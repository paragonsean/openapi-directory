/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisCategory from '../model/AnalysisCategory';
import AnalysisTemplate from '../model/AnalysisTemplate';
import AssetDatabase from '../model/AssetDatabase';
import AttributeCategory from '../model/AttributeCategory';
import Element from '../model/Element';
import ElementCategory from '../model/ElementCategory';
import ElementTemplate from '../model/ElementTemplate';
import EnumerationSet from '../model/EnumerationSet';
import Errors from '../model/Errors';
import EventFrame from '../model/EventFrame';
import ItemsAnalysis from '../model/ItemsAnalysis';
import ItemsAnalysisCategory from '../model/ItemsAnalysisCategory';
import ItemsAnalysisTemplate from '../model/ItemsAnalysisTemplate';
import ItemsAttribute from '../model/ItemsAttribute';
import ItemsAttributeCategory from '../model/ItemsAttributeCategory';
import ItemsElement from '../model/ItemsElement';
import ItemsElementCategory from '../model/ItemsElementCategory';
import ItemsElementTemplate from '../model/ItemsElementTemplate';
import ItemsEnumerationSet from '../model/ItemsEnumerationSet';
import ItemsEventFrame from '../model/ItemsEventFrame';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import ItemsTable from '../model/ItemsTable';
import ItemsTableCategory from '../model/ItemsTableCategory';
import SecurityEntry from '../model/SecurityEntry';
import Table from '../model/Table';
import TableCategory from '../model/TableCategory';

/**
* AssetDatabase service.
* @module api/AssetDatabaseApi
* @version 1.11.1.5383
*/
export default class AssetDatabaseApi {

    /**
    * Constructs a new AssetDatabaseApi. 
    * @alias module:api/AssetDatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assetDatabaseAddReferencedElement operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseAddReferencedElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reference to an existing element to the specified database.
     * @param {String} webId The ID of the database which the referenced element will be added to.
     * @param {Array.<String>} referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
     * @param {Object} opts Optional parameters
     * @param {String} [referenceType] The name of the reference type between the parent and the referenced element. This must be a \"strong\" reference type. The default is \"parent-child\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseAddReferencedElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseAddReferencedElement(webId, referencedElementWebId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseAddReferencedElement");
      }
      // verify the required parameter 'referencedElementWebId' is set
      if (referencedElementWebId === undefined || referencedElementWebId === null) {
        throw new Error("Missing the required parameter 'referencedElementWebId' when calling assetDatabaseAddReferencedElement");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'referencedElementWebId': this.apiClient.buildCollectionParam(referencedElementWebId, 'multi'),
        'referenceType': opts['referenceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/referencedelements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateAnalysisCategory operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateAnalysisCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an analysis category at the Asset Database root.
     * @param {String} webId The ID of the database in which to create the analysis category.
     * @param {module:model/AnalysisCategory} analysisCategory The new analysis category definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateAnalysisCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateAnalysisCategory(webId, analysisCategory, opts, callback) {
      opts = opts || {};
      let postBody = analysisCategory;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateAnalysisCategory");
      }
      // verify the required parameter 'analysisCategory' is set
      if (analysisCategory === undefined || analysisCategory === null) {
        throw new Error("Missing the required parameter 'analysisCategory' when calling assetDatabaseCreateAnalysisCategory");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/analysiscategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateAnalysisTemplate operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an analysis template at the Asset Database root.
     * Analyses that are based on an analysis template will inherit characteristics defined in the template.
     * @param {String} webId The ID of the database in which to create the analysis template.
     * @param {module:model/AnalysisTemplate} template The new analysis template definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateAnalysisTemplate(webId, template, opts, callback) {
      opts = opts || {};
      let postBody = template;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateAnalysisTemplate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling assetDatabaseCreateAnalysisTemplate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/analysistemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateAttributeCategory operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateAttributeCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an attribute category at the Asset Database root.
     * @param {String} webId The ID of the database in which to create the attribute category.
     * @param {module:model/AttributeCategory} attributeCategory The new attribute category definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateAttributeCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateAttributeCategory(webId, attributeCategory, opts, callback) {
      opts = opts || {};
      let postBody = attributeCategory;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateAttributeCategory");
      }
      // verify the required parameter 'attributeCategory' is set
      if (attributeCategory === undefined || attributeCategory === null) {
        throw new Error("Missing the required parameter 'attributeCategory' when calling assetDatabaseCreateAttributeCategory");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/attributecategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateElement operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a child element.
     * @param {String} webId The ID of the asset database on which to create the element.
     * @param {module:model/Element} element The new element definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateElement(webId, element, opts, callback) {
      opts = opts || {};
      let postBody = element;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateElement");
      }
      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling assetDatabaseCreateElement");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateElementCategory operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateElementCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an element category at the Asset Database root.
     * @param {String} webId The ID of the database in which to create the element category.
     * @param {module:model/ElementCategory} elementCategory The new element category definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateElementCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateElementCategory(webId, elementCategory, opts, callback) {
      opts = opts || {};
      let postBody = elementCategory;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateElementCategory");
      }
      // verify the required parameter 'elementCategory' is set
      if (elementCategory === undefined || elementCategory === null) {
        throw new Error("Missing the required parameter 'elementCategory' when calling assetDatabaseCreateElementCategory");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elementcategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateElementTemplate operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateElementTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a template at the Asset Database root. Specify InstanceType of \"Element\" or \"EventFrame\" to create element or event frame template respectively. Only these two types of templates can be created.
     * Elements and event frames that are based on an element template will inherit characteristics defined in the template.
     * @param {String} webId The ID of the database in which to create the element template.
     * @param {module:model/ElementTemplate} template The new element template definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateElementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateElementTemplate(webId, template, opts, callback) {
      opts = opts || {};
      let postBody = template;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateElementTemplate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling assetDatabaseCreateElementTemplate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elementtemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateEnumerationSet operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateEnumerationSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an enumeration set at the Asset Database.
     * @param {String} webId The ID of the database in which to create the enumeration set.
     * @param {module:model/EnumerationSet} enumerationSet The new enumeration set definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateEnumerationSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateEnumerationSet(webId, enumerationSet, opts, callback) {
      opts = opts || {};
      let postBody = enumerationSet;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateEnumerationSet");
      }
      // verify the required parameter 'enumerationSet' is set
      if (enumerationSet === undefined || enumerationSet === null) {
        throw new Error("Missing the required parameter 'enumerationSet' when calling assetDatabaseCreateEnumerationSet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/enumerationsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateEventFrame operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateEventFrameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an event frame.
     * @param {String} webId The ID of the database on which to create the event frame.
     * @param {module:model/EventFrame} eventFrame The new event frame definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateEventFrameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateEventFrame(webId, eventFrame, opts, callback) {
      opts = opts || {};
      let postBody = eventFrame;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateEventFrame");
      }
      // verify the required parameter 'eventFrame' is set
      if (eventFrame === undefined || eventFrame === null) {
        throw new Error("Missing the required parameter 'eventFrame' when calling assetDatabaseCreateEventFrame");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/eventframes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateSecurityEntry operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security entry owned by the asset database.
     * @param {String} webId The ID of the asset database where the security entry will be created.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [securityItem] The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateSecurityEntry(webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling assetDatabaseCreateSecurityEntry");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'securityItem': opts['securityItem'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/securityentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateTable operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a table on the Asset Database.
     * @param {String} webId The ID of the database in which to create the table.
     * @param {module:model/Table} table The new table definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateTable(webId, table, opts, callback) {
      opts = opts || {};
      let postBody = table;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateTable");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling assetDatabaseCreateTable");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/tables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseCreateTableCategory operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseCreateTableCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a table category on the Asset Database.
     * @param {String} webId The ID of the database in which to create the table category.
     * @param {module:model/TableCategory} tableCategory The new table category definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseCreateTableCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseCreateTableCategory(webId, tableCategory, opts, callback) {
      opts = opts || {};
      let postBody = tableCategory;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseCreateTableCategory");
      }
      // verify the required parameter 'tableCategory' is set
      if (tableCategory === undefined || tableCategory === null) {
        throw new Error("Missing the required parameter 'tableCategory' when calling assetDatabaseCreateTableCategory");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/tablecategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseDelete operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an asset database.
     * @param {String} webId The ID of the database.
     * @param {module:api/AssetDatabaseApi~assetDatabaseDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseDeleteSecurityEntry operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseDeleteSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security entry owned by the asset database.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the asset database where the security entry will be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [securityItem] The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
     * @param {module:api/AssetDatabaseApi~assetDatabaseDeleteSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseDeleteSecurityEntry(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetDatabaseDeleteSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseDeleteSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'securityItem': opts['securityItem']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/securityentries/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseExport operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export the asset database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*'.
     * @param {Array.<String>} [exportMode] Indicates the type of export to perform. The default is 'StrongReferences'. Multiple export modes may be specified by using multiple instances of exportMode.
     * @param {String} [startTime] The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export. The default is '*-30d'.
     * @param {module:api/AssetDatabaseApi~assetDatabaseExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseExport(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseExport");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'endTime': opts['endTime'],
        'exportMode': this.apiClient.buildCollectionParam(opts['exportMode'], 'multi'),
        'startTime': opts['startTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseFindAnalyses operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseFindAnalysesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve analyses based on the specified conditions.
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     * @param {String} webId The ID of the database to search for the analyses.
     * @param {Array.<String>} field Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string used for finding analyses. The default is null.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseFindAnalysesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysis}
     */
    assetDatabaseFindAnalyses(webId, field, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseFindAnalyses");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling assetDatabaseFindAnalyses");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'field': this.apiClient.buildCollectionParam(field, 'multi'),
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysis;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/analyses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseFindElementAttributes operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseFindElementAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified asset database.
     * @param {String} webId The ID of the asset database to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [attributeCategory] Specify that returned attributes must have this category. The default is no filter.
     * @param {String} [attributeDescriptionFilter] The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [attributeNameFilter] The attribute name filter string used for finding objects. The default is no filter.
     * @param {String} [attributeType] Specify that returned attributes' value type must be this value type. The default is no filter.
     * @param {String} [elementCategory] Specify that the owner of the returned attributes must have this category. The default is no filter.
     * @param {String} [elementDescriptionFilter] The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [elementNameFilter] The element name filter string used for finding objects. The default is no filter.
     * @param {String} [elementTemplate] Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
     * @param {String} [elementType] Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned (the page size). The default is 1000.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseFindElementAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    assetDatabaseFindElementAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseFindElementAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'attributeCategory': opts['attributeCategory'],
        'attributeDescriptionFilter': opts['attributeDescriptionFilter'],
        'attributeNameFilter': opts['attributeNameFilter'],
        'attributeType': opts['attributeType'],
        'elementCategory': opts['elementCategory'],
        'elementDescriptionFilter': opts['elementDescriptionFilter'],
        'elementNameFilter': opts['elementNameFilter'],
        'elementTemplate': opts['elementTemplate'],
        'elementType': opts['elementType'],
        'maxCount': opts['maxCount'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elementattributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseFindEventFrameAttributes operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseFindEventFrameAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
     * @param {String} webId The ID of the asset database to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [attributeCategory] Specify that returned attributes must have this category. The default is no filter.
     * @param {String} [attributeDescriptionFilter] The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [attributeNameFilter] The attribute name filter string used for finding objects. The default is no filter.
     * @param {String} [attributeType] Specify that returned attributes' value type must be this value type. The default is no filter.
     * @param {String} [endTime] A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is '*'.
     * @param {String} [eventFrameCategory] Specify that the owner of the returned attributes must have this category. The default is no filter.
     * @param {String} [eventFrameDescriptionFilter] The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [eventFrameNameFilter] The event frame name filter string used for finding objects. The default is no filter.
     * @param {String} [eventFrameTemplate] Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned (the page size). The default is 1000.
     * @param {String} [referencedElementNameFilter] The name query string which must match the name of a referenced element. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
     * @param {String} [searchMode] Determines how the startTime and endTime parameters are treated when searching for event frames. The default is 'Overlapped'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [startTime] A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is '*-8h'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseFindEventFrameAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    assetDatabaseFindEventFrameAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseFindEventFrameAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'attributeCategory': opts['attributeCategory'],
        'attributeDescriptionFilter': opts['attributeDescriptionFilter'],
        'attributeNameFilter': opts['attributeNameFilter'],
        'attributeType': opts['attributeType'],
        'endTime': opts['endTime'],
        'eventFrameCategory': opts['eventFrameCategory'],
        'eventFrameDescriptionFilter': opts['eventFrameDescriptionFilter'],
        'eventFrameNameFilter': opts['eventFrameNameFilter'],
        'eventFrameTemplate': opts['eventFrameTemplate'],
        'maxCount': opts['maxCount'],
        'referencedElementNameFilter': opts['referencedElementNameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'searchMode': opts['searchMode'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/eventframeattributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGet operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetDatabase}
     */
    assetDatabaseGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AssetDatabase;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetAnalysisCategories operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetAnalysisCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysisCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve analysis categories for a given Asset Database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetAnalysisCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysisCategory}
     */
    assetDatabaseGetAnalysisCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetAnalysisCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysisCategory;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/analysiscategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetAnalysisTemplates operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetAnalysisTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysisTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
     * Users can search for the analysis templates based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
     * @param {String} webId The ID of the database to search.
     * @param {Array.<String>} field Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string used for finding objects. The default is no query string.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetAnalysisTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysisTemplate}
     */
    assetDatabaseGetAnalysisTemplates(webId, field, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetAnalysisTemplates");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling assetDatabaseGetAnalysisTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'field': this.apiClient.buildCollectionParam(field, 'multi'),
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysisTemplate;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/analysistemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetAttributeCategories operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetAttributeCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttributeCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve attribute categories for a given Asset Database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetAttributeCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttributeCategory}
     */
    assetDatabaseGetAttributeCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetAttributeCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttributeCategory;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/attributecategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetByPath operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Database by path.
     * This method returns an asset database based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetDatabase}
     */
    assetDatabaseGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling assetDatabaseGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AssetDatabase;
      return this.apiClient.callApi(
        '/assetdatabases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetElementCategories operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetElementCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve element categories for a given Asset Database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetElementCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementCategory}
     */
    assetDatabaseGetElementCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetElementCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementCategory;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elementcategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetElementTemplates operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetElementTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve element templates based on the specified criteria. Only templates of instance type \"Element\" and \"EventFrame\" are returned. By default, all element and event frame templates in the specified Asset Database are returned.
     * Users can search for the element and event frame template based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
     * @param {String} webId The ID of the database to search.
     * @param {Array.<String>} field Specifies which of the object's properties are searched. Multiple search fields may be specified with multiple instances of the parameter. The default is 'Name'.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string used for finding objects. The default is no query string.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetElementTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementTemplate}
     */
    assetDatabaseGetElementTemplates(webId, field, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetElementTemplates");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling assetDatabaseGetElementTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'field': this.apiClient.buildCollectionParam(field, 'multi'),
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementTemplate;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elementtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetElements operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetElementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param {String} webId The ID of the database to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [categoryName] Specify that returned elements must have this category. The default is no category filter.
     * @param {String} [descriptionFilter] Specify that returned elements must have this description. The default is no description filter.
     * @param {String} [elementType] Specify that returned elements must have this type. The default type is 'Any'.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding objects. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    assetDatabaseGetElements(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetElements");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'descriptionFilter': opts['descriptionFilter'],
        'elementType': opts['elementType'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetEnumerationSets operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetEnumerationSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEnumerationSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve enumeration sets for given asset database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetEnumerationSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEnumerationSet}
     */
    assetDatabaseGetEnumerationSets(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetEnumerationSets");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEnumerationSet;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/enumerationsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetEventFrames operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetEventFramesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource that have been active in the past 8 hours.
     * @param {String} webId The ID of the asset database to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [canBeAcknowledged] Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
     * @param {String} [categoryName] Specify that returned event frames must have this category. The default is no category filter.
     * @param {String} [endTime] The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {Boolean} [isAcknowledged] Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding event frames. The default is no filter.
     * @param {String} [referencedElementNameFilter] The name query string which must match the name of a referenced element. The default is no filter.
     * @param {String} [referencedElementTemplateName] Specify that returned event frames must have an element in the event frame's referenced elements collection that derives from the template. Specify this parameter by name.
     * @param {Boolean} [searchFullHierarchy] Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
     * @param {String} [searchMode] Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [severity] Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [startTime] The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
     * @param {String} [templateName] Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetEventFramesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEventFrame}
     */
    assetDatabaseGetEventFrames(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetEventFrames");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'canBeAcknowledged': opts['canBeAcknowledged'],
        'categoryName': opts['categoryName'],
        'endTime': opts['endTime'],
        'isAcknowledged': opts['isAcknowledged'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'referencedElementNameFilter': opts['referencedElementNameFilter'],
        'referencedElementTemplateName': opts['referencedElementTemplateName'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'searchMode': opts['searchMode'],
        'selectedFields': opts['selectedFields'],
        'severity': this.apiClient.buildCollectionParam(opts['severity'], 'multi'),
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEventFrame;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/eventframes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetReferencedElements operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetReferencedElementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param {String} webId The ID of the resource to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [categoryName] Specify that returned elements must have this category. The default is no category filter.
     * @param {String} [descriptionFilter] Specify that returned elements must have this description. The default is no description filter.
     * @param {String} [elementType] Specify that returned elements must have this type. The default type is 'Any'.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding objects. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetReferencedElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    assetDatabaseGetReferencedElements(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetReferencedElements");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'descriptionFilter': opts['descriptionFilter'],
        'elementType': opts['elementType'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/referencedelements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetSecurity operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the asset database for a specified user.
     * @param {String} webId The ID of the asset database for the security to be checked.
     * @param {Array.<String>} securityItem The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    assetDatabaseGetSecurity(webId, securityItem, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetSecurity");
      }
      // verify the required parameter 'securityItem' is set
      if (securityItem === undefined || securityItem === null) {
        throw new Error("Missing the required parameter 'securityItem' when calling assetDatabaseGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling assetDatabaseGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'securityItem': this.apiClient.buildCollectionParam(securityItem, 'multi'),
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetSecurityEntries operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
     * @param {String} webId The ID of the asset database.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [securityItem] The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    assetDatabaseGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'securityItem': opts['securityItem'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetSecurityEntryByName operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry of the specified security item associated with the asset database with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the asset database.
     * @param {Object} opts Optional parameters
     * @param {String} [securityItem] The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityEntry}
     */
    assetDatabaseGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetDatabaseGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'securityItem': opts['securityItem'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityEntry;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetTableCategories operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetTableCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsTableCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve table categories for a given Asset Database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetTableCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsTableCategory}
     */
    assetDatabaseGetTableCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetTableCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsTableCategory;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/tablecategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseGetTables operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseGetTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tables for given Asset Database.
     * @param {String} webId The ID of the database.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetDatabaseApi~assetDatabaseGetTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsTable}
     */
    assetDatabaseGetTables(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseGetTables");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsTable;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseImport operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import an asset database.
     * @param {String} webId The ID of the asset database.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [importMode] Indicates the type of import to perform. The default is 'AllowCreate | AllowUpdate | AutoCheckIn'. Multiple import modes may be specified by using multiple instances of importMode.
     * @param {module:api/AssetDatabaseApi~assetDatabaseImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseImport(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseImport");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'importMode': this.apiClient.buildCollectionParam(opts['importMode'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseRemoveReferencedElement operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseRemoveReferencedElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a reference to an existing element from the specified database.
     * @param {String} webId The ID of the database which the referenced element will be removed from.
     * @param {Array.<String>} referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
     * @param {module:api/AssetDatabaseApi~assetDatabaseRemoveReferencedElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseRemoveReferencedElement(webId, referencedElementWebId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseRemoveReferencedElement");
      }
      // verify the required parameter 'referencedElementWebId' is set
      if (referencedElementWebId === undefined || referencedElementWebId === null) {
        throw new Error("Missing the required parameter 'referencedElementWebId' when calling assetDatabaseRemoveReferencedElement");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'referencedElementWebId': this.apiClient.buildCollectionParam(referencedElementWebId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/referencedelements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseUpdate operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an asset database by replacing items in its definition.
     * @param {String} webId The ID of the database.
     * @param {module:model/AssetDatabase} database A partial database containing the desired changes.
     * @param {module:api/AssetDatabaseApi~assetDatabaseUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseUpdate(webId, database, callback) {
      let postBody = database;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseUpdate");
      }
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling assetDatabaseUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetDatabaseUpdateSecurityEntry operation.
     * @callback module:api/AssetDatabaseApi~assetDatabaseUpdateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security entry owned by the asset database.
     * @param {String} name The name of the security entry.
     * @param {String} webId The ID of the asset database where the security entry will be updated.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [securityItem] The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
     * @param {module:api/AssetDatabaseApi~assetDatabaseUpdateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetDatabaseUpdateSecurityEntry(name, webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetDatabaseUpdateSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetDatabaseUpdateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling assetDatabaseUpdateSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'securityItem': opts['securityItem']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetdatabases/{webId}/securityentries/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
