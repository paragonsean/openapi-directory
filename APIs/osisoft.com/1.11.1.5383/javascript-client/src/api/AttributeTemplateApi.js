/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeTemplate from '../model/AttributeTemplate';
import ItemsAttributeCategory from '../model/ItemsAttributeCategory';
import ItemsAttributeTemplate from '../model/ItemsAttributeTemplate';

/**
* AttributeTemplate service.
* @module api/AttributeTemplateApi
* @version 1.11.1.5383
*/
export default class AttributeTemplateApi {

    /**
    * Constructs a new AttributeTemplateApi. 
    * @alias module:api/AttributeTemplateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attributeTemplateCreateAttributeTemplate operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateCreateAttributeTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an attribute template as a child of another attribute template.
     * @param {String} webId The ID of the parent attribute template on which to create the attribute template.
     * @param {module:model/AttributeTemplate} template The attribute template definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeTemplateApi~attributeTemplateCreateAttributeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeTemplateCreateAttributeTemplate(webId, template, opts, callback) {
      opts = opts || {};
      let postBody = template;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeTemplateCreateAttributeTemplate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling attributeTemplateCreateAttributeTemplate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributetemplates/{webId}/attributetemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTemplateDelete operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attribute template.
     * Deleting an attribute template will delete the attributes that were created based on the template
     * @param {String} webId The ID of the attribute template.
     * @param {module:api/AttributeTemplateApi~attributeTemplateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeTemplateDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeTemplateDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributetemplates/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTemplateGet operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an attribute template.
     * @param {String} webId The ID of the attribute template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeTemplateApi~attributeTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeTemplate}
     */
    attributeTemplateGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeTemplateGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AttributeTemplate;
      return this.apiClient.callApi(
        '/attributetemplates/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTemplateGetAttributeTemplates operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateGetAttributeTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttributeTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an attribute template's child attribute templates.
     * @param {String} webId The ID of the attribute template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeTemplateApi~attributeTemplateGetAttributeTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttributeTemplate}
     */
    attributeTemplateGetAttributeTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeTemplateGetAttributeTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttributeTemplate;
      return this.apiClient.callApi(
        '/attributetemplates/{webId}/attributetemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTemplateGetByPath operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an attribute template by path.
     * This method returns an attribute template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the attribute template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeTemplateApi~attributeTemplateGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeTemplate}
     */
    attributeTemplateGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling attributeTemplateGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AttributeTemplate;
      return this.apiClient.callApi(
        '/attributetemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTemplateGetCategories operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttributeCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an attribute template's categories.
     * @param {String} webId The ID of the attribute template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeTemplateApi~attributeTemplateGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttributeCategory}
     */
    attributeTemplateGetCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeTemplateGetCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttributeCategory;
      return this.apiClient.callApi(
        '/attributetemplates/{webId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTemplateUpdate operation.
     * @callback module:api/AttributeTemplateApi~attributeTemplateUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing attribute template by replacing items in its definition.
     * Updating an attribute template will propagate changes to the attributes that were created based on the template
     * @param {String} webId The ID of the attribute template.
     * @param {module:model/AttributeTemplate} template A partial attribute template containing the desired changes.
     * @param {module:api/AttributeTemplateApi~attributeTemplateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeTemplateUpdate(webId, template, callback) {
      let postBody = template;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeTemplateUpdate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling attributeTemplateUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributetemplates/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
