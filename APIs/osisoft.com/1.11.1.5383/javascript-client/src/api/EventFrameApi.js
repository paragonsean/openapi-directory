/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Annotation from '../model/Annotation';
import Attribute from '../model/Attribute';
import Errors from '../model/Errors';
import EventFrame from '../model/EventFrame';
import ItemsAnnotation from '../model/ItemsAnnotation';
import ItemsAttribute from '../model/ItemsAttribute';
import ItemsElement from '../model/ItemsElement';
import ItemsElementCategory from '../model/ItemsElementCategory';
import ItemsEventFrame from '../model/ItemsEventFrame';
import ItemsItemEventFrame from '../model/ItemsItemEventFrame';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import MediaMetadata from '../model/MediaMetadata';
import SearchByAttribute from '../model/SearchByAttribute';
import SecurityEntry from '../model/SecurityEntry';

/**
* EventFrame service.
* @module api/EventFrameApi
* @version 1.11.1.5383
*/
export default class EventFrameApi {

    /**
    * Constructs a new EventFrameApi. 
    * @alias module:api/EventFrameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventFrameAcknowledge operation.
     * @callback module:api/EventFrameApi~eventFrameAcknowledgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls the EventFrame's Acknowledge method.
     * @param {String} webId The ID of the event frame.
     * @param {module:api/EventFrameApi~eventFrameAcknowledgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameAcknowledge(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameAcknowledge");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/acknowledge', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCaptureValues operation.
     * @callback module:api/EventFrameApi~eventFrameCaptureValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls the EventFrame's CaptureValues method.
     * @param {String} webId The ID of the event frame.
     * @param {module:api/EventFrameApi~eventFrameCaptureValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameCaptureValues(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameCaptureValues");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/attributes/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCreateAnnotation operation.
     * @callback module:api/EventFrameApi~eventFrameCreateAnnotationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an annotation on an event frame.
     * @param {String} webId The ID of the owner event frame on which to create the annotation.
     * @param {module:model/Annotation} annotation The new annotation definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameCreateAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameCreateAnnotation(webId, annotation, opts, callback) {
      opts = opts || {};
      let postBody = annotation;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameCreateAnnotation");
      }
      // verify the required parameter 'annotation' is set
      if (annotation === undefined || annotation === null) {
        throw new Error("Missing the required parameter 'annotation' when calling eventFrameCreateAnnotation");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCreateAttribute operation.
     * @callback module:api/EventFrameApi~eventFrameCreateAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new attribute of the specified event frame.
     * @param {String} webId The ID of the event frame on which to create the attribute.
     * @param {module:model/Attribute} attribute The definition of the new attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameCreateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameCreateAttribute(webId, attribute, opts, callback) {
      opts = opts || {};
      let postBody = attribute;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameCreateAttribute");
      }
      // verify the required parameter 'attribute' is set
      if (attribute === undefined || attribute === null) {
        throw new Error("Missing the required parameter 'attribute' when calling eventFrameCreateAttribute");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCreateConfig operation.
     * @callback module:api/EventFrameApi~eventFrameCreateConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes the create configuration function of the data references found within the attributes of the event frame, and optionally, its children.
     * @param {String} webId The ID of the event frame.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeChildElements] If true, includes the child event frames of the specified event frame.
     * @param {module:api/EventFrameApi~eventFrameCreateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameCreateConfig(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameCreateConfig");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'includeChildElements': opts['includeChildElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCreateEventFrame operation.
     * @callback module:api/EventFrameApi~eventFrameCreateEventFrameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an event frame as a child of the specified event frame.
     * @param {String} webId The ID of the parent event frame on which to create the event frame.
     * @param {module:model/EventFrame} eventFrame The new event frame definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameCreateEventFrameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameCreateEventFrame(webId, eventFrame, opts, callback) {
      opts = opts || {};
      let postBody = eventFrame;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameCreateEventFrame");
      }
      // verify the required parameter 'eventFrame' is set
      if (eventFrame === undefined || eventFrame === null) {
        throw new Error("Missing the required parameter 'eventFrame' when calling eventFrameCreateEventFrame");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/eventframes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCreateSearchByAttribute operation.
     * @callback module:api/EventFrameApi~eventFrameCreateSearchByAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a link for a \"Search EventFrames By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root EventFrame. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the EventFrames. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     * @param {module:model/SearchByAttribute} query The query of search by attribute.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [noResults] If false, the response content will contain the first page of the search results. If true, the response content will be empty. The default is false.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameCreateSearchByAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEventFrame}
     */
    eventFrameCreateSearchByAttribute(query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling eventFrameCreateSearchByAttribute");
      }

      let pathParams = {
      };
      let queryParams = {
        'noResults': opts['noResults'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEventFrame;
      return this.apiClient.callApi(
        '/eventframes/searchbyattribute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameCreateSecurityEntry operation.
     * @callback module:api/EventFrameApi~eventFrameCreateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security entry owned by the event frame.
     * @param {String} webId The ID of the event frame where the security entry will be created.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameCreateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameCreateSecurityEntry(webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameCreateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling eventFrameCreateSecurityEntry");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/securityentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameDelete operation.
     * @callback module:api/EventFrameApi~eventFrameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an event frame.
     * @param {String} webId The ID of the event frame to delete.
     * @param {module:api/EventFrameApi~eventFrameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameDeleteAnnotation operation.
     * @callback module:api/EventFrameApi~eventFrameDeleteAnnotationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an annotation on an event frame. If the annotation has attached media, the attached media will also be deleted.
     * @param {String} id The Annotation identifier of the annotation to be deleted.
     * @param {String} webId The ID of the owner event frame of the annotation to delete.
     * @param {module:api/EventFrameApi~eventFrameDeleteAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameDeleteAnnotation(id, webId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventFrameDeleteAnnotation");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameDeleteAnnotation");
      }

      let pathParams = {
        'id': id,
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameDeleteAnnotationAttachmentMediaById operation.
     * @callback module:api/EventFrameApi~eventFrameDeleteAnnotationAttachmentMediaByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attached media from an annotation on an event frame.
     * @param {String} id The Annotation identifier of the annotation to delete the attached media of.
     * @param {String} webId The ID of the owner event frame of the annotation to delete the attached media of.
     * @param {module:api/EventFrameApi~eventFrameDeleteAnnotationAttachmentMediaByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameDeleteAnnotationAttachmentMediaById(id, webId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventFrameDeleteAnnotationAttachmentMediaById");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameDeleteAnnotationAttachmentMediaById");
      }

      let pathParams = {
        'id': id,
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations/{id}/attachment/media', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameDeleteSecurityEntry operation.
     * @callback module:api/EventFrameApi~eventFrameDeleteSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security entry owned by the event frame.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the event frame where the security entry will be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/EventFrameApi~eventFrameDeleteSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameDeleteSecurityEntry(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling eventFrameDeleteSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameDeleteSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/securityentries/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameExecuteSearchByAttribute operation.
     * @callback module:api/EventFrameApi~eventFrameExecuteSearchByAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a \"Search EventFrames By Attribute Value\" operation.
     * @param {String} searchId The encoded search Id of the \"Search EventFrames By Attribute Value\" operation.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [canBeAcknowledged] Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
     * @param {String} [endTime] The ending time for the search. endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*'.
     * @param {Boolean} [isAcknowledged] Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding event frames. The default is no filter.
     * @param {String} [referencedElementNameFilter] The name query string which must match the name of a referenced element. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
     * @param {String} [searchMode] Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. The default is 'Overlapped'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [severity] Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [startTime] The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameExecuteSearchByAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEventFrame}
     */
    eventFrameExecuteSearchByAttribute(searchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling eventFrameExecuteSearchByAttribute");
      }

      let pathParams = {
        'searchId': searchId
      };
      let queryParams = {
        'canBeAcknowledged': opts['canBeAcknowledged'],
        'endTime': opts['endTime'],
        'isAcknowledged': opts['isAcknowledged'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'referencedElementNameFilter': opts['referencedElementNameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'searchMode': opts['searchMode'],
        'selectedFields': opts['selectedFields'],
        'severity': this.apiClient.buildCollectionParam(opts['severity'], 'multi'),
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEventFrame;
      return this.apiClient.callApi(
        '/eventframes/searchbyattribute/{searchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameFindEventFrameAttributes operation.
     * @callback module:api/EventFrameApi~eventFrameFindEventFrameAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of event frame attributes matching the specified filters from the specified event frame.
     * @param {String} webId The ID of the event frame to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [attributeCategory] Specify that returned attributes must have this category. The default is no filter.
     * @param {String} [attributeDescriptionFilter] The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [attributeNameFilter] The attribute name filter string used for finding objects. The default is no filter.
     * @param {String} [attributeType] Specify that returned attributes' value type must be this value type. The default is no filter.
     * @param {String} [endTime] A string representing the latest ending time for the event frames to be matched. The endTime must be greater than or equal to the startTime. The default is '*'.
     * @param {String} [eventFrameCategory] Specify that the owner of the returned attributes must have this category. The default is no filter.
     * @param {String} [eventFrameDescriptionFilter] The event frame description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [eventFrameNameFilter] The event frame name filter string used for finding objects. The default is no filter.
     * @param {String} [eventFrameTemplate] Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned (the page size). The default is 1000.
     * @param {String} [referencedElementNameFilter] The name query string which must match the name of a referenced element. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
     * @param {String} [searchMode] Determines how the startTime and endTime parameters are treated when searching for event frames. The default is 'Overlapped'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [startTime] A string representing the earliest starting time for the event frames to be matched. startTime must be less than or equal to the endTime. The default is '*-8h'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameFindEventFrameAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    eventFrameFindEventFrameAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameFindEventFrameAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'attributeCategory': opts['attributeCategory'],
        'attributeDescriptionFilter': opts['attributeDescriptionFilter'],
        'attributeNameFilter': opts['attributeNameFilter'],
        'attributeType': opts['attributeType'],
        'endTime': opts['endTime'],
        'eventFrameCategory': opts['eventFrameCategory'],
        'eventFrameDescriptionFilter': opts['eventFrameDescriptionFilter'],
        'eventFrameNameFilter': opts['eventFrameNameFilter'],
        'eventFrameTemplate': opts['eventFrameTemplate'],
        'maxCount': opts['maxCount'],
        'referencedElementNameFilter': opts['referencedElementNameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'searchMode': opts['searchMode'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/eventframes/{webId}/eventframeattributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGet operation.
     * @callback module:api/EventFrameApi~eventFrameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an event frame.
     * @param {String} webId The ID of the event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventFrame}
     */
    eventFrameGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = EventFrame;
      return this.apiClient.callApi(
        '/eventframes/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetAnnotationAttachmentMediaMetadataById operation.
     * @callback module:api/EventFrameApi~eventFrameGetAnnotationAttachmentMediaMetadataByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the metadata of the media attached to the specified annotation.
     * @param {String} id The Annotation identifier of the specific annotation.
     * @param {String} webId The ID of the owner event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetAnnotationAttachmentMediaMetadataByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaMetadata}
     */
    eventFrameGetAnnotationAttachmentMediaMetadataById(id, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventFrameGetAnnotationAttachmentMediaMetadataById");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetAnnotationAttachmentMediaMetadataById");
      }

      let pathParams = {
        'id': id,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = MediaMetadata;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations/{id}/attachment/media/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetAnnotationById operation.
     * @callback module:api/EventFrameApi~eventFrameGetAnnotationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific annotation on an event frame.
     * @param {String} id The Annotation identifier of the specific annotation.
     * @param {String} webId The ID of the owner event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetAnnotationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    eventFrameGetAnnotationById(id, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventFrameGetAnnotationById");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetAnnotationById");
      }

      let pathParams = {
        'id': id,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetAnnotations operation.
     * @callback module:api/EventFrameApi~eventFrameGetAnnotationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnnotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an event frame's annotations.
     * @param {String} webId The ID of the owner event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetAnnotationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnnotation}
     */
    eventFrameGetAnnotations(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetAnnotations");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnnotation;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetAttributes operation.
     * @callback module:api/EventFrameApi~eventFrameGetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the attributes of the specified event frame.
     * @param {String} webId The ID of the event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [categoryName] Specify that returned attributes must have this category. The default is no category filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding attributes. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Boolean} [showExcluded] Specified if the search should include attributes with the Excluded property set. The default is 'false'.
     * @param {Boolean} [showHidden] Specified if the search should include attributes with the Hidden property set. The default is 'false'.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned attributes must be members of this template. The default is no template filter.
     * @param {Array.<String>} [trait] The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.
     * @param {Array.<String>} [traitCategory] The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.
     * @param {String} [valueType] Specify that returned attributes' value type must be the given value type. The default is no value type filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    eventFrameGetAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'showExcluded': opts['showExcluded'],
        'showHidden': opts['showHidden'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'trait': this.apiClient.buildCollectionParam(opts['trait'], 'multi'),
        'traitCategory': this.apiClient.buildCollectionParam(opts['traitCategory'], 'multi'),
        'valueType': opts['valueType'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/eventframes/{webId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetByPath operation.
     * @callback module:api/EventFrameApi~eventFrameGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an event frame by path.
     * This method returns an event frame based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventFrame}
     */
    eventFrameGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling eventFrameGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = EventFrame;
      return this.apiClient.callApi(
        '/eventframes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetCategories operation.
     * @callback module:api/EventFrameApi~eventFrameGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an event frame's categories.
     * @param {String} webId The ID of the event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementCategory}
     */
    eventFrameGetCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementCategory;
      return this.apiClient.callApi(
        '/eventframes/{webId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetEventFrames operation.
     * @callback module:api/EventFrameApi~eventFrameGetEventFramesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root event frame that have been active in the past 8 hours.
     * @param {String} webId The ID of the event frame to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [canBeAcknowledged] Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
     * @param {String} [categoryName] Specify that returned event frames must have this category. The default is no category filter.
     * @param {String} [endTime] The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {Boolean} [isAcknowledged] Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding event frames. The default is no filter.
     * @param {String} [referencedElementNameFilter] The name query string which must match the name of a referenced element. The default is no filter.
     * @param {String} [referencedElementTemplateName] Specify that returned event frames must have an element in the event frame's referenced elements collection that derives from the template. Specify this parameter by name.
     * @param {Boolean} [searchFullHierarchy] Specifies whether the search should include objects nested further than the immediate children of the search root. The default is 'false'.
     * @param {String} [searchMode] Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [severity] Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [startTime] The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
     * @param {String} [templateName] Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetEventFramesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEventFrame}
     */
    eventFrameGetEventFrames(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetEventFrames");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'canBeAcknowledged': opts['canBeAcknowledged'],
        'categoryName': opts['categoryName'],
        'endTime': opts['endTime'],
        'isAcknowledged': opts['isAcknowledged'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'referencedElementNameFilter': opts['referencedElementNameFilter'],
        'referencedElementTemplateName': opts['referencedElementTemplateName'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'searchMode': opts['searchMode'],
        'selectedFields': opts['selectedFields'],
        'severity': this.apiClient.buildCollectionParam(opts['severity'], 'multi'),
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEventFrame;
      return this.apiClient.callApi(
        '/eventframes/{webId}/eventframes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetEventFramesQuery operation.
     * @callback module:api/EventFrameApi~eventFrameGetEventFramesQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve event frames based on the specified conditions. Returns event frames using the specified search query string.
     * @param {Object} opts Optional parameters
     * @param {String} [databaseWebId] The ID of the asset database to use as the root of the query.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string is a list of filters used to perform an AFSearch for the eventframes in the asset database. An example would be: \"query=Name:=MyEventFrame* Category:=MyCategory Template:=EFTemplate\".
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetEventFramesQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEventFrame}
     */
    eventFrameGetEventFramesQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'databaseWebId': opts['databaseWebId'],
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEventFrame;
      return this.apiClient.callApi(
        '/eventframes/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetMultiple operation.
     * @callback module:api/EventFrameApi~eventFrameGetMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsItemEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve multiple event frames by web ids or paths.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asParallel] Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
     * @param {String} [includeMode] The include mode for the return list. The default is 'All'.
     * @param {Array.<String>} [path] The path of an event frame. Multiple event frames may be specified with multiple instances of the parameter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [webId] The ID of an event frame. Multiple event frames may be specified with multiple instances of the parameter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsItemEventFrame}
     */
    eventFrameGetMultiple(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'asParallel': opts['asParallel'],
        'includeMode': opts['includeMode'],
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'selectedFields': opts['selectedFields'],
        'webId': this.apiClient.buildCollectionParam(opts['webId'], 'multi'),
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsItemEventFrame;
      return this.apiClient.callApi(
        '/eventframes/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetReferencedElements operation.
     * @callback module:api/EventFrameApi~eventFrameGetReferencedElementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the event frame's referenced elements.
     * @param {String} webId The ID of the event frame whose referenced elements should be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetReferencedElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    eventFrameGetReferencedElements(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetReferencedElements");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/eventframes/{webId}/referencedelements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetSecurity operation.
     * @callback module:api/EventFrameApi~eventFrameGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the event frame for a specified user.
     * @param {String} webId The ID of the event frame for the security to be checked.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    eventFrameGetSecurity(webId, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling eventFrameGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/eventframes/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetSecurityEntries operation.
     * @callback module:api/EventFrameApi~eventFrameGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries associated with the event frame based on the specified criteria. By default, all security entries for this event frame are returned.
     * @param {String} webId The ID of the event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    eventFrameGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/eventframes/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameGetSecurityEntryByName operation.
     * @callback module:api/EventFrameApi~eventFrameGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry associated with the event frame with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the event frame.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EventFrameApi~eventFrameGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityEntry}
     */
    eventFrameGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling eventFrameGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityEntry;
      return this.apiClient.callApi(
        '/eventframes/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameUpdate operation.
     * @callback module:api/EventFrameApi~eventFrameUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an event frame by replacing items in its definition.
     * @param {String} webId The ID of the event frame to update.
     * @param {module:model/EventFrame} eventFrame A partial event frame containing the desired changes.
     * @param {module:api/EventFrameApi~eventFrameUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameUpdate(webId, eventFrame, callback) {
      let postBody = eventFrame;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameUpdate");
      }
      // verify the required parameter 'eventFrame' is set
      if (eventFrame === undefined || eventFrame === null) {
        throw new Error("Missing the required parameter 'eventFrame' when calling eventFrameUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameUpdateAnnotation operation.
     * @callback module:api/EventFrameApi~eventFrameUpdateAnnotationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an annotation on an event frame by replacing items in its definition.
     * @param {String} id The Annotation identifier of the annotation to be updated.
     * @param {String} webId The ID of the owner event frame of the annotation to update.
     * @param {module:model/Annotation} annotation A partial annotation containing the desired changes.
     * @param {module:api/EventFrameApi~eventFrameUpdateAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameUpdateAnnotation(id, webId, annotation, callback) {
      let postBody = annotation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventFrameUpdateAnnotation");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameUpdateAnnotation");
      }
      // verify the required parameter 'annotation' is set
      if (annotation === undefined || annotation === null) {
        throw new Error("Missing the required parameter 'annotation' when calling eventFrameUpdateAnnotation");
      }

      let pathParams = {
        'id': id,
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/annotations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventFrameUpdateSecurityEntry operation.
     * @callback module:api/EventFrameApi~eventFrameUpdateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security entry owned by the event frame.
     * @param {String} name The name of the security entry.
     * @param {String} webId The ID of the event frame where the security entry will be updated.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/EventFrameApi~eventFrameUpdateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventFrameUpdateSecurityEntry(name, webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling eventFrameUpdateSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling eventFrameUpdateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling eventFrameUpdateSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/eventframes/{webId}/securityentries/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
