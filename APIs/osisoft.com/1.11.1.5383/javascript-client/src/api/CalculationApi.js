/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import ItemsSummaryValue from '../model/ItemsSummaryValue';
import TimedValues from '../model/TimedValues';

/**
* Calculation service.
* @module api/CalculationApi
* @version 1.11.1.5383
*/
export default class CalculationApi {

    /**
    * Constructs a new CalculationApi. 
    * @alias module:api/CalculationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calculationGetAtIntervals operation.
     * @callback module:api/CalculationApi~calculationGetAtIntervalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimedValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns results of evaluating the expression over the time range from the start time to the end time at a defined interval.
     * @param {String} expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
     * @param {String} [sampleInterval] A time span specifies how often the filter expression is evaluated when computing the summary for an interval.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [startTime] An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
     * @param {String} [webId] The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
     * @param {module:api/CalculationApi~calculationGetAtIntervalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimedValues}
     */
    calculationGetAtIntervals(expression, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'expression' is set
      if (expression === undefined || expression === null) {
        throw new Error("Missing the required parameter 'expression' when calling calculationGetAtIntervals");
      }

      let pathParams = {
      };
      let queryParams = {
        'expression': expression,
        'endTime': opts['endTime'],
        'sampleInterval': opts['sampleInterval'],
        'selectedFields': opts['selectedFields'],
        'startTime': opts['startTime'],
        'webId': opts['webId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = TimedValues;
      return this.apiClient.callApi(
        '/calculation/intervals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationGetAtRecorded operation.
     * @callback module:api/CalculationApi~calculationGetAtRecordedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimedValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the result of evaluating the expression at each point in time over the time range from the start time to the end time where a recorded value exists for a member of the expression.
     * @param {String} expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [startTime] An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
     * @param {String} [webId] The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
     * @param {module:api/CalculationApi~calculationGetAtRecordedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimedValues}
     */
    calculationGetAtRecorded(expression, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'expression' is set
      if (expression === undefined || expression === null) {
        throw new Error("Missing the required parameter 'expression' when calling calculationGetAtRecorded");
      }

      let pathParams = {
      };
      let queryParams = {
        'expression': expression,
        'endTime': opts['endTime'],
        'selectedFields': opts['selectedFields'],
        'startTime': opts['startTime'],
        'webId': opts['webId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = TimedValues;
      return this.apiClient.callApi(
        '/calculation/recorded', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationGetAtTimes operation.
     * @callback module:api/CalculationApi~calculationGetAtTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimedValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the result of evaluating the expression at the specified timestamps.
     * @param {String} expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
     * @param {Array.<String>} time A list of timestamps at which to calculate the expression.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {String} [webId] The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
     * @param {module:api/CalculationApi~calculationGetAtTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimedValues}
     */
    calculationGetAtTimes(expression, time, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'expression' is set
      if (expression === undefined || expression === null) {
        throw new Error("Missing the required parameter 'expression' when calling calculationGetAtTimes");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling calculationGetAtTimes");
      }

      let pathParams = {
      };
      let queryParams = {
        'expression': expression,
        'time': this.apiClient.buildCollectionParam(time, 'multi'),
        'selectedFields': opts['selectedFields'],
        'sortOrder': opts['sortOrder'],
        'webId': opts['webId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = TimedValues;
      return this.apiClient.callApi(
        '/calculation/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationGetSummary operation.
     * @callback module:api/CalculationApi~calculationGetSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSummaryValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the result of evaluating the expression over the time range from the start time to the end time. The time range is first divided into a number of summary intervals. Then the calculation is performed for the specified summaries over each interval.
     * @param {String} expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation.
     * @param {Object} opts Optional parameters
     * @param {String} [calculationBasis] Specifies the method of evaluating the data over the time range. The default is 'TimeWeighted'.
     * @param {String} [endTime] An optional end time. The default is '*' for element attributes and points. For event frame attributes, the default is the event frame's end time, or '*' if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order.
     * @param {String} [sampleInterval] A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is 'Interval'.
     * @param {String} [sampleType] A flag which specifies one or more summaries to compute for each interval over the time range. The default is 'ExpressionRecordedValues'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [startTime] An optional start time. The default is '*-1d' for element attributes and points. For event frame attributes, the default is the event frame's start time, or '*-1d' if that is not set.
     * @param {String} [summaryDuration] The duration of each summary interval.
     * @param {Array.<String>} [summaryType] Specifies the kinds of summaries to produce over the range. The default is 'Total'. Multiple summary types may be specified by using multiple instances of summaryType.
     * @param {String} [timeType] Specifies how to calculate the timestamp for each interval. The default is 'Auto'.
     * @param {String} [webId] The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null.
     * @param {module:api/CalculationApi~calculationGetSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSummaryValue}
     */
    calculationGetSummary(expression, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'expression' is set
      if (expression === undefined || expression === null) {
        throw new Error("Missing the required parameter 'expression' when calling calculationGetSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'expression': expression,
        'calculationBasis': opts['calculationBasis'],
        'endTime': opts['endTime'],
        'sampleInterval': opts['sampleInterval'],
        'sampleType': opts['sampleType'],
        'selectedFields': opts['selectedFields'],
        'startTime': opts['startTime'],
        'summaryDuration': opts['summaryDuration'],
        'summaryType': this.apiClient.buildCollectionParam(opts['summaryType'], 'multi'),
        'timeType': opts['timeType'],
        'webId': opts['webId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSummaryValue;
      return this.apiClient.callApi(
        '/calculation/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
