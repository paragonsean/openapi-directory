/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PiWebApi2018Sp1SwaggerSpec);
  }
}(this, function(expect, PiWebApi2018Sp1SwaggerSpec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PiWebApi2018Sp1SwaggerSpec.StreamApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StreamApi', function() {
    describe('streamGetChannel', function() {
      it('should call streamGetChannel successfully', function(done) {
        //uncomment below and update the code to test streamGetChannel
        //instance.streamGetChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetEnd', function() {
      it('should call streamGetEnd successfully', function(done) {
        //uncomment below and update the code to test streamGetEnd
        //instance.streamGetEnd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetInterpolated', function() {
      it('should call streamGetInterpolated successfully', function(done) {
        //uncomment below and update the code to test streamGetInterpolated
        //instance.streamGetInterpolated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetInterpolatedAtTimes', function() {
      it('should call streamGetInterpolatedAtTimes successfully', function(done) {
        //uncomment below and update the code to test streamGetInterpolatedAtTimes
        //instance.streamGetInterpolatedAtTimes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetPlot', function() {
      it('should call streamGetPlot successfully', function(done) {
        //uncomment below and update the code to test streamGetPlot
        //instance.streamGetPlot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetRecorded', function() {
      it('should call streamGetRecorded successfully', function(done) {
        //uncomment below and update the code to test streamGetRecorded
        //instance.streamGetRecorded(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetRecordedAtTime', function() {
      it('should call streamGetRecordedAtTime successfully', function(done) {
        //uncomment below and update the code to test streamGetRecordedAtTime
        //instance.streamGetRecordedAtTime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetRecordedAtTimes', function() {
      it('should call streamGetRecordedAtTimes successfully', function(done) {
        //uncomment below and update the code to test streamGetRecordedAtTimes
        //instance.streamGetRecordedAtTimes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetSummary', function() {
      it('should call streamGetSummary successfully', function(done) {
        //uncomment below and update the code to test streamGetSummary
        //instance.streamGetSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamGetValue', function() {
      it('should call streamGetValue successfully', function(done) {
        //uncomment below and update the code to test streamGetValue
        //instance.streamGetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamRegisterStreamUpdate', function() {
      it('should call streamRegisterStreamUpdate successfully', function(done) {
        //uncomment below and update the code to test streamRegisterStreamUpdate
        //instance.streamRegisterStreamUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamRetrieveStreamUpdate', function() {
      it('should call streamRetrieveStreamUpdate successfully', function(done) {
        //uncomment below and update the code to test streamRetrieveStreamUpdate
        //instance.streamRetrieveStreamUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamUpdateValue', function() {
      it('should call streamUpdateValue successfully', function(done) {
        //uncomment below and update the code to test streamUpdateValue
        //instance.streamUpdateValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamUpdateValues', function() {
      it('should call streamUpdateValues successfully', function(done) {
        //uncomment below and update the code to test streamUpdateValues
        //instance.streamUpdateValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
