/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PiWebApi2018Sp1SwaggerSpec);
  }
}(this, function(expect, PiWebApi2018Sp1SwaggerSpec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PiWebApi2018Sp1SwaggerSpec.TableApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TableApi', function() {
    describe('tableCreateSecurityEntry', function() {
      it('should call tableCreateSecurityEntry successfully', function(done) {
        //uncomment below and update the code to test tableCreateSecurityEntry
        //instance.tableCreateSecurityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableDelete', function() {
      it('should call tableDelete successfully', function(done) {
        //uncomment below and update the code to test tableDelete
        //instance.tableDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableDeleteSecurityEntry', function() {
      it('should call tableDeleteSecurityEntry successfully', function(done) {
        //uncomment below and update the code to test tableDeleteSecurityEntry
        //instance.tableDeleteSecurityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGet', function() {
      it('should call tableGet successfully', function(done) {
        //uncomment below and update the code to test tableGet
        //instance.tableGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGetByPath', function() {
      it('should call tableGetByPath successfully', function(done) {
        //uncomment below and update the code to test tableGetByPath
        //instance.tableGetByPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGetCategories', function() {
      it('should call tableGetCategories successfully', function(done) {
        //uncomment below and update the code to test tableGetCategories
        //instance.tableGetCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGetData', function() {
      it('should call tableGetData successfully', function(done) {
        //uncomment below and update the code to test tableGetData
        //instance.tableGetData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGetSecurity', function() {
      it('should call tableGetSecurity successfully', function(done) {
        //uncomment below and update the code to test tableGetSecurity
        //instance.tableGetSecurity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGetSecurityEntries', function() {
      it('should call tableGetSecurityEntries successfully', function(done) {
        //uncomment below and update the code to test tableGetSecurityEntries
        //instance.tableGetSecurityEntries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableGetSecurityEntryByName', function() {
      it('should call tableGetSecurityEntryByName successfully', function(done) {
        //uncomment below and update the code to test tableGetSecurityEntryByName
        //instance.tableGetSecurityEntryByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableUpdate', function() {
      it('should call tableUpdate successfully', function(done) {
        //uncomment below and update the code to test tableUpdate
        //instance.tableUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableUpdateData', function() {
      it('should call tableUpdateData successfully', function(done) {
        //uncomment below and update the code to test tableUpdateData
        //instance.tableUpdateData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tableUpdateSecurityEntry', function() {
      it('should call tableUpdateSecurityEntry successfully', function(done) {
        //uncomment below and update the code to test tableUpdateSecurityEntry
        //instance.tableUpdateSecurityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
