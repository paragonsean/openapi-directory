/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PiWebApi2018Sp1SwaggerSpec);
  }
}(this, function(expect, PiWebApi2018Sp1SwaggerSpec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PiWebApi2018Sp1SwaggerSpec.AttributeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AttributeApi', function() {
    describe('attributeCreateAttribute', function() {
      it('should call attributeCreateAttribute successfully', function(done) {
        //uncomment below and update the code to test attributeCreateAttribute
        //instance.attributeCreateAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeCreateConfig', function() {
      it('should call attributeCreateConfig successfully', function(done) {
        //uncomment below and update the code to test attributeCreateConfig
        //instance.attributeCreateConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeDelete', function() {
      it('should call attributeDelete successfully', function(done) {
        //uncomment below and update the code to test attributeDelete
        //instance.attributeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGet', function() {
      it('should call attributeGet successfully', function(done) {
        //uncomment below and update the code to test attributeGet
        //instance.attributeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGetAttributes', function() {
      it('should call attributeGetAttributes successfully', function(done) {
        //uncomment below and update the code to test attributeGetAttributes
        //instance.attributeGetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGetAttributesQuery', function() {
      it('should call attributeGetAttributesQuery successfully', function(done) {
        //uncomment below and update the code to test attributeGetAttributesQuery
        //instance.attributeGetAttributesQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGetByPath', function() {
      it('should call attributeGetByPath successfully', function(done) {
        //uncomment below and update the code to test attributeGetByPath
        //instance.attributeGetByPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGetCategories', function() {
      it('should call attributeGetCategories successfully', function(done) {
        //uncomment below and update the code to test attributeGetCategories
        //instance.attributeGetCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGetMultiple', function() {
      it('should call attributeGetMultiple successfully', function(done) {
        //uncomment below and update the code to test attributeGetMultiple
        //instance.attributeGetMultiple(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeGetValue', function() {
      it('should call attributeGetValue successfully', function(done) {
        //uncomment below and update the code to test attributeGetValue
        //instance.attributeGetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeSetValue', function() {
      it('should call attributeSetValue successfully', function(done) {
        //uncomment below and update the code to test attributeSetValue
        //instance.attributeSetValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attributeUpdate', function() {
      it('should call attributeUpdate successfully', function(done) {
        //uncomment below and update the code to test attributeUpdate
        //instance.attributeUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
