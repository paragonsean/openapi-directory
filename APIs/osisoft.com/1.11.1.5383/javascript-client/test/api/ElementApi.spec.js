/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PiWebApi2018Sp1SwaggerSpec);
  }
}(this, function(expect, PiWebApi2018Sp1SwaggerSpec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PiWebApi2018Sp1SwaggerSpec.ElementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ElementApi', function() {
    describe('elementAddReferencedElement', function() {
      it('should call elementAddReferencedElement successfully', function(done) {
        //uncomment below and update the code to test elementAddReferencedElement
        //instance.elementAddReferencedElement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateAnalysis', function() {
      it('should call elementCreateAnalysis successfully', function(done) {
        //uncomment below and update the code to test elementCreateAnalysis
        //instance.elementCreateAnalysis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateAttribute', function() {
      it('should call elementCreateAttribute successfully', function(done) {
        //uncomment below and update the code to test elementCreateAttribute
        //instance.elementCreateAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateConfig', function() {
      it('should call elementCreateConfig successfully', function(done) {
        //uncomment below and update the code to test elementCreateConfig
        //instance.elementCreateConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateElement', function() {
      it('should call elementCreateElement successfully', function(done) {
        //uncomment below and update the code to test elementCreateElement
        //instance.elementCreateElement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateNotificationRule', function() {
      it('should call elementCreateNotificationRule successfully', function(done) {
        //uncomment below and update the code to test elementCreateNotificationRule
        //instance.elementCreateNotificationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateSearchByAttribute', function() {
      it('should call elementCreateSearchByAttribute successfully', function(done) {
        //uncomment below and update the code to test elementCreateSearchByAttribute
        //instance.elementCreateSearchByAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementCreateSecurityEntry', function() {
      it('should call elementCreateSecurityEntry successfully', function(done) {
        //uncomment below and update the code to test elementCreateSecurityEntry
        //instance.elementCreateSecurityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementDelete', function() {
      it('should call elementDelete successfully', function(done) {
        //uncomment below and update the code to test elementDelete
        //instance.elementDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementDeleteSecurityEntry', function() {
      it('should call elementDeleteSecurityEntry successfully', function(done) {
        //uncomment below and update the code to test elementDeleteSecurityEntry
        //instance.elementDeleteSecurityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementExecuteSearchByAttribute', function() {
      it('should call elementExecuteSearchByAttribute successfully', function(done) {
        //uncomment below and update the code to test elementExecuteSearchByAttribute
        //instance.elementExecuteSearchByAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementFindElementAttributes', function() {
      it('should call elementFindElementAttributes successfully', function(done) {
        //uncomment below and update the code to test elementFindElementAttributes
        //instance.elementFindElementAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGet', function() {
      it('should call elementGet successfully', function(done) {
        //uncomment below and update the code to test elementGet
        //instance.elementGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetAnalyses', function() {
      it('should call elementGetAnalyses successfully', function(done) {
        //uncomment below and update the code to test elementGetAnalyses
        //instance.elementGetAnalyses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetAttributes', function() {
      it('should call elementGetAttributes successfully', function(done) {
        //uncomment below and update the code to test elementGetAttributes
        //instance.elementGetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetByPath', function() {
      it('should call elementGetByPath successfully', function(done) {
        //uncomment below and update the code to test elementGetByPath
        //instance.elementGetByPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetCategories', function() {
      it('should call elementGetCategories successfully', function(done) {
        //uncomment below and update the code to test elementGetCategories
        //instance.elementGetCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetElements', function() {
      it('should call elementGetElements successfully', function(done) {
        //uncomment below and update the code to test elementGetElements
        //instance.elementGetElements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetElementsQuery', function() {
      it('should call elementGetElementsQuery successfully', function(done) {
        //uncomment below and update the code to test elementGetElementsQuery
        //instance.elementGetElementsQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetEventFrames', function() {
      it('should call elementGetEventFrames successfully', function(done) {
        //uncomment below and update the code to test elementGetEventFrames
        //instance.elementGetEventFrames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetMultiple', function() {
      it('should call elementGetMultiple successfully', function(done) {
        //uncomment below and update the code to test elementGetMultiple
        //instance.elementGetMultiple(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetNotificationRules', function() {
      it('should call elementGetNotificationRules successfully', function(done) {
        //uncomment below and update the code to test elementGetNotificationRules
        //instance.elementGetNotificationRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetPaths', function() {
      it('should call elementGetPaths successfully', function(done) {
        //uncomment below and update the code to test elementGetPaths
        //instance.elementGetPaths(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetReferencedElements', function() {
      it('should call elementGetReferencedElements successfully', function(done) {
        //uncomment below and update the code to test elementGetReferencedElements
        //instance.elementGetReferencedElements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetSecurity', function() {
      it('should call elementGetSecurity successfully', function(done) {
        //uncomment below and update the code to test elementGetSecurity
        //instance.elementGetSecurity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetSecurityEntries', function() {
      it('should call elementGetSecurityEntries successfully', function(done) {
        //uncomment below and update the code to test elementGetSecurityEntries
        //instance.elementGetSecurityEntries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementGetSecurityEntryByName', function() {
      it('should call elementGetSecurityEntryByName successfully', function(done) {
        //uncomment below and update the code to test elementGetSecurityEntryByName
        //instance.elementGetSecurityEntryByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementRemoveReferencedElement', function() {
      it('should call elementRemoveReferencedElement successfully', function(done) {
        //uncomment below and update the code to test elementRemoveReferencedElement
        //instance.elementRemoveReferencedElement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementUpdate', function() {
      it('should call elementUpdate successfully', function(done) {
        //uncomment below and update the code to test elementUpdate
        //instance.elementUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('elementUpdateSecurityEntry', function() {
      it('should call elementUpdateSecurityEntry successfully', function(done) {
        //uncomment below and update the code to test elementUpdateSecurityEntry
        //instance.elementUpdateSecurityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
