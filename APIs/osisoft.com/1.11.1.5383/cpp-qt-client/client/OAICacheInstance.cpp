/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheInstance::OAICacheInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheInstance::OAICacheInstance() {
    this->initializeModel();
}

OAICacheInstance::~OAICacheInstance() {}

void OAICacheInstance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_refresh_time_isSet = false;
    m_last_refresh_time_isValid = false;

    m_scheduled_expiration_time_isSet = false;
    m_scheduled_expiration_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_will_refresh_after_isSet = false;
    m_will_refresh_after_isValid = false;
}

void OAICacheInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheInstance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_refresh_time_isValid = ::OpenAPI::fromJsonValue(m_last_refresh_time, json[QString("LastRefreshTime")]);
    m_last_refresh_time_isSet = !json[QString("LastRefreshTime")].isNull() && m_last_refresh_time_isValid;

    m_scheduled_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_expiration_time, json[QString("ScheduledExpirationTime")]);
    m_scheduled_expiration_time_isSet = !json[QString("ScheduledExpirationTime")].isNull() && m_scheduled_expiration_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_will_refresh_after_isValid = ::OpenAPI::fromJsonValue(m_will_refresh_after, json[QString("WillRefreshAfter")]);
    m_will_refresh_after_isSet = !json[QString("WillRefreshAfter")].isNull() && m_will_refresh_after_isValid;
}

QString OAICacheInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_refresh_time_isSet) {
        obj.insert(QString("LastRefreshTime"), ::OpenAPI::toJsonValue(m_last_refresh_time));
    }
    if (m_scheduled_expiration_time_isSet) {
        obj.insert(QString("ScheduledExpirationTime"), ::OpenAPI::toJsonValue(m_scheduled_expiration_time));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_will_refresh_after_isSet) {
        obj.insert(QString("WillRefreshAfter"), ::OpenAPI::toJsonValue(m_will_refresh_after));
    }
    return obj;
}

QString OAICacheInstance::getId() const {
    return m_id;
}
void OAICacheInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICacheInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAICacheInstance::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICacheInstance::getLastRefreshTime() const {
    return m_last_refresh_time;
}
void OAICacheInstance::setLastRefreshTime(const QDateTime &last_refresh_time) {
    m_last_refresh_time = last_refresh_time;
    m_last_refresh_time_isSet = true;
}

bool OAICacheInstance::is_last_refresh_time_Set() const{
    return m_last_refresh_time_isSet;
}

bool OAICacheInstance::is_last_refresh_time_Valid() const{
    return m_last_refresh_time_isValid;
}

QDateTime OAICacheInstance::getScheduledExpirationTime() const {
    return m_scheduled_expiration_time;
}
void OAICacheInstance::setScheduledExpirationTime(const QDateTime &scheduled_expiration_time) {
    m_scheduled_expiration_time = scheduled_expiration_time;
    m_scheduled_expiration_time_isSet = true;
}

bool OAICacheInstance::is_scheduled_expiration_time_Set() const{
    return m_scheduled_expiration_time_isSet;
}

bool OAICacheInstance::is_scheduled_expiration_time_Valid() const{
    return m_scheduled_expiration_time_isValid;
}

QString OAICacheInstance::getUser() const {
    return m_user;
}
void OAICacheInstance::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICacheInstance::is_user_Set() const{
    return m_user_isSet;
}

bool OAICacheInstance::is_user_Valid() const{
    return m_user_isValid;
}

OAIWebException OAICacheInstance::getWebException() const {
    return m_web_exception;
}
void OAICacheInstance::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAICacheInstance::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAICacheInstance::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QDateTime OAICacheInstance::getWillRefreshAfter() const {
    return m_will_refresh_after;
}
void OAICacheInstance::setWillRefreshAfter(const QDateTime &will_refresh_after) {
    m_will_refresh_after = will_refresh_after;
    m_will_refresh_after_isSet = true;
}

bool OAICacheInstance::is_will_refresh_after_Set() const{
    return m_will_refresh_after_isSet;
}

bool OAICacheInstance::is_will_refresh_after_Valid() const{
    return m_will_refresh_after_isValid;
}

bool OAICacheInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refresh_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_will_refresh_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
