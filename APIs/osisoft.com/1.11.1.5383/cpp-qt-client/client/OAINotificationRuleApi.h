/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationRuleApi_H
#define OAI_OAINotificationRuleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIItems_NotificationRule.h"
#include "OAIItems_NotificationRuleSubscriber.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAINotificationRule.h"
#include "OAINotificationRuleSubscriber.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationRuleApi : public QObject {
    Q_OBJECT

public:
    OAINotificationRuleApi(const int timeOut = 0);
    ~OAINotificationRuleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule_subscriber OAINotificationRuleSubscriber [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleCreateNotificationRuleSubscriber(const QString &web_id, const OAINotificationRuleSubscriber &notification_rule_subscriber, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void notificationRuleDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void notificationRuleDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGetNotificationRuleSubscribers(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGetNotificationRulesQuery(const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule OAINotificationRule [required]
    */
    virtual void notificationRuleUpdate(const QString &web_id, const OAINotificationRule &notification_rule);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void notificationRuleUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationRuleCreateNotificationRuleSubscriberCallback(OAIHttpRequestWorker *worker);
    void notificationRuleCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void notificationRuleDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationRuleDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetByPathCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetNotificationRuleSubscribersCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetNotificationRulesQueryCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetSecurityCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void notificationRuleGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void notificationRuleUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationRuleUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationRuleCreateNotificationRuleSubscriberSignal();
    void notificationRuleCreateSecurityEntrySignal();
    void notificationRuleDeleteSignal();
    void notificationRuleDeleteSecurityEntrySignal();
    void notificationRuleGetSignal(OAINotificationRule summary);
    void notificationRuleGetByPathSignal(OAINotificationRule summary);
    void notificationRuleGetNotificationRuleSubscribersSignal(OAIItems_NotificationRuleSubscriber summary);
    void notificationRuleGetNotificationRulesQuerySignal(OAIItems_NotificationRule summary);
    void notificationRuleGetSecuritySignal(OAIItems_SecurityRights summary);
    void notificationRuleGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void notificationRuleGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void notificationRuleUpdateSignal();
    void notificationRuleUpdateSecurityEntrySignal();


    void notificationRuleCreateNotificationRuleSubscriberSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleGetSignalFull(OAIHttpRequestWorker *worker, OAINotificationRule summary);
    void notificationRuleGetByPathSignalFull(OAIHttpRequestWorker *worker, OAINotificationRule summary);
    void notificationRuleGetNotificationRuleSubscribersSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRuleSubscriber summary);
    void notificationRuleGetNotificationRulesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRule summary);
    void notificationRuleGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void notificationRuleGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void notificationRuleGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void notificationRuleUpdateSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use notificationRuleCreateNotificationRuleSubscriberSignalError() instead")
    void notificationRuleCreateNotificationRuleSubscriberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleCreateNotificationRuleSubscriberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleCreateSecurityEntrySignalError() instead")
    void notificationRuleCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleDeleteSignalError() instead")
    void notificationRuleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleDeleteSecurityEntrySignalError() instead")
    void notificationRuleDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSignalError() instead")
    void notificationRuleGetSignalE(OAINotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSignalError(OAINotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetByPathSignalError() instead")
    void notificationRuleGetByPathSignalE(OAINotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetByPathSignalError(OAINotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetNotificationRuleSubscribersSignalError() instead")
    void notificationRuleGetNotificationRuleSubscribersSignalE(OAIItems_NotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetNotificationRuleSubscribersSignalError(OAIItems_NotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetNotificationRulesQuerySignalError() instead")
    void notificationRuleGetNotificationRulesQuerySignalE(OAIItems_NotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetNotificationRulesQuerySignalError(OAIItems_NotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSecuritySignalError() instead")
    void notificationRuleGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSecurityEntriesSignalError() instead")
    void notificationRuleGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSecurityEntryByNameSignalError() instead")
    void notificationRuleGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleUpdateSignalError() instead")
    void notificationRuleUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleUpdateSecurityEntrySignalError() instead")
    void notificationRuleUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationRuleCreateNotificationRuleSubscriberSignalErrorFull() instead")
    void notificationRuleCreateNotificationRuleSubscriberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleCreateNotificationRuleSubscriberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleCreateSecurityEntrySignalErrorFull() instead")
    void notificationRuleCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleDeleteSignalErrorFull() instead")
    void notificationRuleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleDeleteSecurityEntrySignalErrorFull() instead")
    void notificationRuleDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSignalErrorFull() instead")
    void notificationRuleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetByPathSignalErrorFull() instead")
    void notificationRuleGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetNotificationRuleSubscribersSignalErrorFull() instead")
    void notificationRuleGetNotificationRuleSubscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetNotificationRuleSubscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetNotificationRulesQuerySignalErrorFull() instead")
    void notificationRuleGetNotificationRulesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetNotificationRulesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSecuritySignalErrorFull() instead")
    void notificationRuleGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSecurityEntriesSignalErrorFull() instead")
    void notificationRuleGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleGetSecurityEntryByNameSignalErrorFull() instead")
    void notificationRuleGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleUpdateSignalErrorFull() instead")
    void notificationRuleUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleUpdateSecurityEntrySignalErrorFull() instead")
    void notificationRuleUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
