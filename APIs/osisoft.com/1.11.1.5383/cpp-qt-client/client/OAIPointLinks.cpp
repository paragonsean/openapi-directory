/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointLinks::OAIPointLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointLinks::OAIPointLinks() {
    this->initializeModel();
}

OAIPointLinks::~OAIPointLinks() {}

void OAIPointLinks::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_data_server_isSet = false;
    m_data_server_isValid = false;

    m_end_value_isSet = false;
    m_end_value_isValid = false;

    m_interpolated_data_isSet = false;
    m_interpolated_data_isValid = false;

    m_plot_data_isSet = false;
    m_plot_data_isValid = false;

    m_recorded_data_isSet = false;
    m_recorded_data_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_summary_data_isSet = false;
    m_summary_data_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPointLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointLinks::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_data_server_isValid = ::OpenAPI::fromJsonValue(m_data_server, json[QString("DataServer")]);
    m_data_server_isSet = !json[QString("DataServer")].isNull() && m_data_server_isValid;

    m_end_value_isValid = ::OpenAPI::fromJsonValue(m_end_value, json[QString("EndValue")]);
    m_end_value_isSet = !json[QString("EndValue")].isNull() && m_end_value_isValid;

    m_interpolated_data_isValid = ::OpenAPI::fromJsonValue(m_interpolated_data, json[QString("InterpolatedData")]);
    m_interpolated_data_isSet = !json[QString("InterpolatedData")].isNull() && m_interpolated_data_isValid;

    m_plot_data_isValid = ::OpenAPI::fromJsonValue(m_plot_data, json[QString("PlotData")]);
    m_plot_data_isSet = !json[QString("PlotData")].isNull() && m_plot_data_isValid;

    m_recorded_data_isValid = ::OpenAPI::fromJsonValue(m_recorded_data, json[QString("RecordedData")]);
    m_recorded_data_isSet = !json[QString("RecordedData")].isNull() && m_recorded_data_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_summary_data_isValid = ::OpenAPI::fromJsonValue(m_summary_data, json[QString("SummaryData")]);
    m_summary_data_isSet = !json[QString("SummaryData")].isNull() && m_summary_data_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPointLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_data_server_isSet) {
        obj.insert(QString("DataServer"), ::OpenAPI::toJsonValue(m_data_server));
    }
    if (m_end_value_isSet) {
        obj.insert(QString("EndValue"), ::OpenAPI::toJsonValue(m_end_value));
    }
    if (m_interpolated_data_isSet) {
        obj.insert(QString("InterpolatedData"), ::OpenAPI::toJsonValue(m_interpolated_data));
    }
    if (m_plot_data_isSet) {
        obj.insert(QString("PlotData"), ::OpenAPI::toJsonValue(m_plot_data));
    }
    if (m_recorded_data_isSet) {
        obj.insert(QString("RecordedData"), ::OpenAPI::toJsonValue(m_recorded_data));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_summary_data_isSet) {
        obj.insert(QString("SummaryData"), ::OpenAPI::toJsonValue(m_summary_data));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPointLinks::getAttributes() const {
    return m_attributes;
}
void OAIPointLinks::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIPointLinks::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIPointLinks::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIPointLinks::getDataServer() const {
    return m_data_server;
}
void OAIPointLinks::setDataServer(const QString &data_server) {
    m_data_server = data_server;
    m_data_server_isSet = true;
}

bool OAIPointLinks::is_data_server_Set() const{
    return m_data_server_isSet;
}

bool OAIPointLinks::is_data_server_Valid() const{
    return m_data_server_isValid;
}

QString OAIPointLinks::getEndValue() const {
    return m_end_value;
}
void OAIPointLinks::setEndValue(const QString &end_value) {
    m_end_value = end_value;
    m_end_value_isSet = true;
}

bool OAIPointLinks::is_end_value_Set() const{
    return m_end_value_isSet;
}

bool OAIPointLinks::is_end_value_Valid() const{
    return m_end_value_isValid;
}

QString OAIPointLinks::getInterpolatedData() const {
    return m_interpolated_data;
}
void OAIPointLinks::setInterpolatedData(const QString &interpolated_data) {
    m_interpolated_data = interpolated_data;
    m_interpolated_data_isSet = true;
}

bool OAIPointLinks::is_interpolated_data_Set() const{
    return m_interpolated_data_isSet;
}

bool OAIPointLinks::is_interpolated_data_Valid() const{
    return m_interpolated_data_isValid;
}

QString OAIPointLinks::getPlotData() const {
    return m_plot_data;
}
void OAIPointLinks::setPlotData(const QString &plot_data) {
    m_plot_data = plot_data;
    m_plot_data_isSet = true;
}

bool OAIPointLinks::is_plot_data_Set() const{
    return m_plot_data_isSet;
}

bool OAIPointLinks::is_plot_data_Valid() const{
    return m_plot_data_isValid;
}

QString OAIPointLinks::getRecordedData() const {
    return m_recorded_data;
}
void OAIPointLinks::setRecordedData(const QString &recorded_data) {
    m_recorded_data = recorded_data;
    m_recorded_data_isSet = true;
}

bool OAIPointLinks::is_recorded_data_Set() const{
    return m_recorded_data_isSet;
}

bool OAIPointLinks::is_recorded_data_Valid() const{
    return m_recorded_data_isValid;
}

QString OAIPointLinks::getSelf() const {
    return m_self;
}
void OAIPointLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIPointLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIPointLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIPointLinks::getSummaryData() const {
    return m_summary_data;
}
void OAIPointLinks::setSummaryData(const QString &summary_data) {
    m_summary_data = summary_data;
    m_summary_data_isSet = true;
}

bool OAIPointLinks::is_summary_data_Set() const{
    return m_summary_data_isSet;
}

bool OAIPointLinks::is_summary_data_Valid() const{
    return m_summary_data_isValid;
}

QString OAIPointLinks::getValue() const {
    return m_value;
}
void OAIPointLinks::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPointLinks::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPointLinks::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPointLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolated_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plot_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
