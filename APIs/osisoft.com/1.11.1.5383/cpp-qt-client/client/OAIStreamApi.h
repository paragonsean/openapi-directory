/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStreamApi_H
#define OAI_OAIStreamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIExtendedTimedValue.h"
#include "OAIExtendedTimedValues.h"
#include "OAIItems_StreamValues.h"
#include "OAIItems_Substatus.h"
#include "OAIItems_SummaryValue.h"
#include "OAIStreamUpdatesRegister.h"
#include "OAIStreamUpdatesRetrieve.h"
#include "OAITimedValue.h"
#include "OAITimedValues.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStreamApi : public QObject {
    Q_OBJECT

public:
    OAIStreamApi(const int timeOut = 0);
    ~OAIStreamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  heartbeat_rate qint32 [optional]
    * @param[in]  include_initial_values bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamGetChannel(const QString &web_id, const ::OpenAPI::OptionalParam<qint32> &heartbeat_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_initial_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  desired_units QString [optional]
    * @param[in]  selected_fields QString [optional]
    */
    virtual void streamGetEnd(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  desired_units QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  sync_time QString [optional]
    * @param[in]  sync_time_boundary_type QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetInterpolated(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_time_boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  time QList<QString> [required]
    * @param[in]  desired_units QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetInterpolatedAtTimes(const QString &web_id, const QList<QString> &time, const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  desired_units QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  intervals qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetPlot(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &intervals = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  boundary_type QString [optional]
    * @param[in]  desired_units QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetRecorded(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  time QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  desired_units QString [optional]
    * @param[in]  retrieval_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetRecordedAtTime(const QString &web_id, const QString &time, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &retrieval_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  time QList<QString> [required]
    * @param[in]  associations QString [optional]
    * @param[in]  desired_units QString [optional]
    * @param[in]  retrieval_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetRecordedAtTimes(const QString &web_id, const QList<QString> &time, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &retrieval_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  calculation_basis QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  sample_interval QString [optional]
    * @param[in]  sample_type QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  summary_duration QString [optional]
    * @param[in]  summary_type QList<QString> [optional]
    * @param[in]  time_type QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetSummary(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &calculation_basis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summary_duration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &summary_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &time_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  desired_units QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  time QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void streamGetValue(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamRegisterStreamUpdate(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marker QString [required]
    * @param[in]  desired_units QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamRetrieveStreamUpdate(const QString &marker, const ::OpenAPI::OptionalParam<QString> &desired_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  value OAITimedValue [required]
    * @param[in]  buffer_option QString [optional]
    * @param[in]  update_option QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamUpdateValue(const QString &web_id, const OAITimedValue &value, const ::OpenAPI::OptionalParam<QString> &buffer_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  values QList<OAITimedValue> [required]
    * @param[in]  buffer_option QString [optional]
    * @param[in]  update_option QString [optional]
    */
    virtual void streamUpdateValues(const QString &web_id, const QList<OAITimedValue> &values, const ::OpenAPI::OptionalParam<QString> &buffer_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_option = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void streamGetChannelCallback(OAIHttpRequestWorker *worker);
    void streamGetEndCallback(OAIHttpRequestWorker *worker);
    void streamGetInterpolatedCallback(OAIHttpRequestWorker *worker);
    void streamGetInterpolatedAtTimesCallback(OAIHttpRequestWorker *worker);
    void streamGetPlotCallback(OAIHttpRequestWorker *worker);
    void streamGetRecordedCallback(OAIHttpRequestWorker *worker);
    void streamGetRecordedAtTimeCallback(OAIHttpRequestWorker *worker);
    void streamGetRecordedAtTimesCallback(OAIHttpRequestWorker *worker);
    void streamGetSummaryCallback(OAIHttpRequestWorker *worker);
    void streamGetValueCallback(OAIHttpRequestWorker *worker);
    void streamRegisterStreamUpdateCallback(OAIHttpRequestWorker *worker);
    void streamRetrieveStreamUpdateCallback(OAIHttpRequestWorker *worker);
    void streamUpdateValueCallback(OAIHttpRequestWorker *worker);
    void streamUpdateValuesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void streamGetChannelSignal();
    void streamGetEndSignal(OAITimedValue summary);
    void streamGetInterpolatedSignal(OAITimedValues summary);
    void streamGetInterpolatedAtTimesSignal(OAITimedValues summary);
    void streamGetPlotSignal(OAITimedValues summary);
    void streamGetRecordedSignal(OAIExtendedTimedValues summary);
    void streamGetRecordedAtTimeSignal(OAIExtendedTimedValue summary);
    void streamGetRecordedAtTimesSignal(OAIExtendedTimedValues summary);
    void streamGetSummarySignal(OAIItems_SummaryValue summary);
    void streamGetValueSignal(OAITimedValue summary);
    void streamRegisterStreamUpdateSignal(OAIStreamUpdatesRegister summary);
    void streamRetrieveStreamUpdateSignal(OAIStreamUpdatesRetrieve summary);
    void streamUpdateValueSignal();
    void streamUpdateValuesSignal(OAIItems_Substatus summary);


    void streamGetChannelSignalFull(OAIHttpRequestWorker *worker);
    void streamGetEndSignalFull(OAIHttpRequestWorker *worker, OAITimedValue summary);
    void streamGetInterpolatedSignalFull(OAIHttpRequestWorker *worker, OAITimedValues summary);
    void streamGetInterpolatedAtTimesSignalFull(OAIHttpRequestWorker *worker, OAITimedValues summary);
    void streamGetPlotSignalFull(OAIHttpRequestWorker *worker, OAITimedValues summary);
    void streamGetRecordedSignalFull(OAIHttpRequestWorker *worker, OAIExtendedTimedValues summary);
    void streamGetRecordedAtTimeSignalFull(OAIHttpRequestWorker *worker, OAIExtendedTimedValue summary);
    void streamGetRecordedAtTimesSignalFull(OAIHttpRequestWorker *worker, OAIExtendedTimedValues summary);
    void streamGetSummarySignalFull(OAIHttpRequestWorker *worker, OAIItems_SummaryValue summary);
    void streamGetValueSignalFull(OAIHttpRequestWorker *worker, OAITimedValue summary);
    void streamRegisterStreamUpdateSignalFull(OAIHttpRequestWorker *worker, OAIStreamUpdatesRegister summary);
    void streamRetrieveStreamUpdateSignalFull(OAIHttpRequestWorker *worker, OAIStreamUpdatesRetrieve summary);
    void streamUpdateValueSignalFull(OAIHttpRequestWorker *worker);
    void streamUpdateValuesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Substatus summary);

    Q_DECL_DEPRECATED_X("Use streamGetChannelSignalError() instead")
    void streamGetChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetEndSignalError() instead")
    void streamGetEndSignalE(OAITimedValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetEndSignalError(OAITimedValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetInterpolatedSignalError() instead")
    void streamGetInterpolatedSignalE(OAITimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetInterpolatedSignalError(OAITimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetInterpolatedAtTimesSignalError() instead")
    void streamGetInterpolatedAtTimesSignalE(OAITimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetInterpolatedAtTimesSignalError(OAITimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetPlotSignalError() instead")
    void streamGetPlotSignalE(OAITimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetPlotSignalError(OAITimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetRecordedSignalError() instead")
    void streamGetRecordedSignalE(OAIExtendedTimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetRecordedSignalError(OAIExtendedTimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetRecordedAtTimeSignalError() instead")
    void streamGetRecordedAtTimeSignalE(OAIExtendedTimedValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetRecordedAtTimeSignalError(OAIExtendedTimedValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetRecordedAtTimesSignalError() instead")
    void streamGetRecordedAtTimesSignalE(OAIExtendedTimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetRecordedAtTimesSignalError(OAIExtendedTimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetSummarySignalError() instead")
    void streamGetSummarySignalE(OAIItems_SummaryValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetSummarySignalError(OAIItems_SummaryValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetValueSignalError() instead")
    void streamGetValueSignalE(OAITimedValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetValueSignalError(OAITimedValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamRegisterStreamUpdateSignalError() instead")
    void streamRegisterStreamUpdateSignalE(OAIStreamUpdatesRegister summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamRegisterStreamUpdateSignalError(OAIStreamUpdatesRegister summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamRetrieveStreamUpdateSignalError() instead")
    void streamRetrieveStreamUpdateSignalE(OAIStreamUpdatesRetrieve summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamRetrieveStreamUpdateSignalError(OAIStreamUpdatesRetrieve summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamUpdateValueSignalError() instead")
    void streamUpdateValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamUpdateValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamUpdateValuesSignalError() instead")
    void streamUpdateValuesSignalE(OAIItems_Substatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamUpdateValuesSignalError(OAIItems_Substatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use streamGetChannelSignalErrorFull() instead")
    void streamGetChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetEndSignalErrorFull() instead")
    void streamGetEndSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetEndSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetInterpolatedSignalErrorFull() instead")
    void streamGetInterpolatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetInterpolatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetInterpolatedAtTimesSignalErrorFull() instead")
    void streamGetInterpolatedAtTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetInterpolatedAtTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetPlotSignalErrorFull() instead")
    void streamGetPlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetPlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetRecordedSignalErrorFull() instead")
    void streamGetRecordedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetRecordedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetRecordedAtTimeSignalErrorFull() instead")
    void streamGetRecordedAtTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetRecordedAtTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetRecordedAtTimesSignalErrorFull() instead")
    void streamGetRecordedAtTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetRecordedAtTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetSummarySignalErrorFull() instead")
    void streamGetSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamGetValueSignalErrorFull() instead")
    void streamGetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamGetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamRegisterStreamUpdateSignalErrorFull() instead")
    void streamRegisterStreamUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamRegisterStreamUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamRetrieveStreamUpdateSignalErrorFull() instead")
    void streamRetrieveStreamUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamRetrieveStreamUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamUpdateValueSignalErrorFull() instead")
    void streamUpdateValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamUpdateValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamUpdateValuesSignalErrorFull() instead")
    void streamUpdateValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamUpdateValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
