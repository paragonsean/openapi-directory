/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataServerApi_H
#define OAI_OAIDataServerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataServer.h"
#include "OAIDataServerLicense.h"
#include "OAIEnumerationSet.h"
#include "OAIErrors.h"
#include "OAIItems_DataServer.h"
#include "OAIItems_EnumerationSet.h"
#include "OAIItems_Point.h"
#include "OAIPoint.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataServerApi : public QObject {
    Q_OBJECT

public:
    OAIDataServerApi(const int timeOut = 0);
    ~OAIDataServerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  enumeration_set OAIEnumerationSet [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerCreateEnumerationSet(const QString &web_id, const OAIEnumerationSet &enumeration_set, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  point_dto OAIPoint [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerCreatePoint(const QString &web_id, const OAIPoint &point_dto, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerGetByName(const QString &name, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerGetEnumerationSets(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  module QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerGetLicense(const QString &web_id, const QString &module, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerGetPoints(const QString &web_id, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void dataServerList(const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataServerCreateEnumerationSetCallback(OAIHttpRequestWorker *worker);
    void dataServerCreatePointCallback(OAIHttpRequestWorker *worker);
    void dataServerGetCallback(OAIHttpRequestWorker *worker);
    void dataServerGetByNameCallback(OAIHttpRequestWorker *worker);
    void dataServerGetByPathCallback(OAIHttpRequestWorker *worker);
    void dataServerGetEnumerationSetsCallback(OAIHttpRequestWorker *worker);
    void dataServerGetLicenseCallback(OAIHttpRequestWorker *worker);
    void dataServerGetPointsCallback(OAIHttpRequestWorker *worker);
    void dataServerListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataServerCreateEnumerationSetSignal();
    void dataServerCreatePointSignal();
    void dataServerGetSignal(OAIDataServer summary);
    void dataServerGetByNameSignal(OAIDataServer summary);
    void dataServerGetByPathSignal(OAIDataServer summary);
    void dataServerGetEnumerationSetsSignal(OAIItems_EnumerationSet summary);
    void dataServerGetLicenseSignal(OAIDataServerLicense summary);
    void dataServerGetPointsSignal(OAIItems_Point summary);
    void dataServerListSignal(OAIItems_DataServer summary);


    void dataServerCreateEnumerationSetSignalFull(OAIHttpRequestWorker *worker);
    void dataServerCreatePointSignalFull(OAIHttpRequestWorker *worker);
    void dataServerGetSignalFull(OAIHttpRequestWorker *worker, OAIDataServer summary);
    void dataServerGetByNameSignalFull(OAIHttpRequestWorker *worker, OAIDataServer summary);
    void dataServerGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIDataServer summary);
    void dataServerGetEnumerationSetsSignalFull(OAIHttpRequestWorker *worker, OAIItems_EnumerationSet summary);
    void dataServerGetLicenseSignalFull(OAIHttpRequestWorker *worker, OAIDataServerLicense summary);
    void dataServerGetPointsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Point summary);
    void dataServerListSignalFull(OAIHttpRequestWorker *worker, OAIItems_DataServer summary);

    Q_DECL_DEPRECATED_X("Use dataServerCreateEnumerationSetSignalError() instead")
    void dataServerCreateEnumerationSetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerCreateEnumerationSetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerCreatePointSignalError() instead")
    void dataServerCreatePointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerCreatePointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetSignalError() instead")
    void dataServerGetSignalE(OAIDataServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetSignalError(OAIDataServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetByNameSignalError() instead")
    void dataServerGetByNameSignalE(OAIDataServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetByNameSignalError(OAIDataServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetByPathSignalError() instead")
    void dataServerGetByPathSignalE(OAIDataServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetByPathSignalError(OAIDataServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetEnumerationSetsSignalError() instead")
    void dataServerGetEnumerationSetsSignalE(OAIItems_EnumerationSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetEnumerationSetsSignalError(OAIItems_EnumerationSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetLicenseSignalError() instead")
    void dataServerGetLicenseSignalE(OAIDataServerLicense summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetLicenseSignalError(OAIDataServerLicense summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetPointsSignalError() instead")
    void dataServerGetPointsSignalE(OAIItems_Point summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetPointsSignalError(OAIItems_Point summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerListSignalError() instead")
    void dataServerListSignalE(OAIItems_DataServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerListSignalError(OAIItems_DataServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataServerCreateEnumerationSetSignalErrorFull() instead")
    void dataServerCreateEnumerationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerCreateEnumerationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerCreatePointSignalErrorFull() instead")
    void dataServerCreatePointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerCreatePointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetSignalErrorFull() instead")
    void dataServerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetByNameSignalErrorFull() instead")
    void dataServerGetByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetByPathSignalErrorFull() instead")
    void dataServerGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetEnumerationSetsSignalErrorFull() instead")
    void dataServerGetEnumerationSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetEnumerationSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetLicenseSignalErrorFull() instead")
    void dataServerGetLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerGetPointsSignalErrorFull() instead")
    void dataServerGetPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerGetPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataServerListSignalErrorFull() instead")
    void dataServerListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataServerListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
