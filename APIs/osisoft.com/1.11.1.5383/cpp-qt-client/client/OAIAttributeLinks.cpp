/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeLinks::OAIAttributeLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeLinks::OAIAttributeLinks() {
    this->initializeModel();
}

OAIAttributeLinks::~OAIAttributeLinks() {}

void OAIAttributeLinks::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_element_isSet = false;
    m_element_isValid = false;

    m_end_value_isSet = false;
    m_end_value_isValid = false;

    m_enumeration_set_isSet = false;
    m_enumeration_set_isValid = false;

    m_enumeration_values_isSet = false;
    m_enumeration_values_isValid = false;

    m_event_frame_isSet = false;
    m_event_frame_isValid = false;

    m_interpolated_data_isSet = false;
    m_interpolated_data_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_plot_data_isSet = false;
    m_plot_data_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;

    m_recorded_data_isSet = false;
    m_recorded_data_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_summary_data_isSet = false;
    m_summary_data_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_trait_isSet = false;
    m_trait_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAttributeLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeLinks::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_element_isValid = ::OpenAPI::fromJsonValue(m_element, json[QString("Element")]);
    m_element_isSet = !json[QString("Element")].isNull() && m_element_isValid;

    m_end_value_isValid = ::OpenAPI::fromJsonValue(m_end_value, json[QString("EndValue")]);
    m_end_value_isSet = !json[QString("EndValue")].isNull() && m_end_value_isValid;

    m_enumeration_set_isValid = ::OpenAPI::fromJsonValue(m_enumeration_set, json[QString("EnumerationSet")]);
    m_enumeration_set_isSet = !json[QString("EnumerationSet")].isNull() && m_enumeration_set_isValid;

    m_enumeration_values_isValid = ::OpenAPI::fromJsonValue(m_enumeration_values, json[QString("EnumerationValues")]);
    m_enumeration_values_isSet = !json[QString("EnumerationValues")].isNull() && m_enumeration_values_isValid;

    m_event_frame_isValid = ::OpenAPI::fromJsonValue(m_event_frame, json[QString("EventFrame")]);
    m_event_frame_isSet = !json[QString("EventFrame")].isNull() && m_event_frame_isValid;

    m_interpolated_data_isValid = ::OpenAPI::fromJsonValue(m_interpolated_data, json[QString("InterpolatedData")]);
    m_interpolated_data_isSet = !json[QString("InterpolatedData")].isNull() && m_interpolated_data_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_plot_data_isValid = ::OpenAPI::fromJsonValue(m_plot_data, json[QString("PlotData")]);
    m_plot_data_isSet = !json[QString("PlotData")].isNull() && m_plot_data_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("Point")]);
    m_point_isSet = !json[QString("Point")].isNull() && m_point_isValid;

    m_recorded_data_isValid = ::OpenAPI::fromJsonValue(m_recorded_data, json[QString("RecordedData")]);
    m_recorded_data_isSet = !json[QString("RecordedData")].isNull() && m_recorded_data_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_summary_data_isValid = ::OpenAPI::fromJsonValue(m_summary_data, json[QString("SummaryData")]);
    m_summary_data_isSet = !json[QString("SummaryData")].isNull() && m_summary_data_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("Template")]);
    m_r_template_isSet = !json[QString("Template")].isNull() && m_r_template_isValid;

    m_trait_isValid = ::OpenAPI::fromJsonValue(m_trait, json[QString("Trait")]);
    m_trait_isSet = !json[QString("Trait")].isNull() && m_trait_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIAttributeLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_element_isSet) {
        obj.insert(QString("Element"), ::OpenAPI::toJsonValue(m_element));
    }
    if (m_end_value_isSet) {
        obj.insert(QString("EndValue"), ::OpenAPI::toJsonValue(m_end_value));
    }
    if (m_enumeration_set_isSet) {
        obj.insert(QString("EnumerationSet"), ::OpenAPI::toJsonValue(m_enumeration_set));
    }
    if (m_enumeration_values_isSet) {
        obj.insert(QString("EnumerationValues"), ::OpenAPI::toJsonValue(m_enumeration_values));
    }
    if (m_event_frame_isSet) {
        obj.insert(QString("EventFrame"), ::OpenAPI::toJsonValue(m_event_frame));
    }
    if (m_interpolated_data_isSet) {
        obj.insert(QString("InterpolatedData"), ::OpenAPI::toJsonValue(m_interpolated_data));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_plot_data_isSet) {
        obj.insert(QString("PlotData"), ::OpenAPI::toJsonValue(m_plot_data));
    }
    if (m_point_isSet) {
        obj.insert(QString("Point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_recorded_data_isSet) {
        obj.insert(QString("RecordedData"), ::OpenAPI::toJsonValue(m_recorded_data));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_summary_data_isSet) {
        obj.insert(QString("SummaryData"), ::OpenAPI::toJsonValue(m_summary_data));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("Template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_trait_isSet) {
        obj.insert(QString("Trait"), ::OpenAPI::toJsonValue(m_trait));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAttributeLinks::getAttributes() const {
    return m_attributes;
}
void OAIAttributeLinks::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAttributeLinks::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAttributeLinks::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIAttributeLinks::getCategories() const {
    return m_categories;
}
void OAIAttributeLinks::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIAttributeLinks::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIAttributeLinks::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIAttributeLinks::getElement() const {
    return m_element;
}
void OAIAttributeLinks::setElement(const QString &element) {
    m_element = element;
    m_element_isSet = true;
}

bool OAIAttributeLinks::is_element_Set() const{
    return m_element_isSet;
}

bool OAIAttributeLinks::is_element_Valid() const{
    return m_element_isValid;
}

QString OAIAttributeLinks::getEndValue() const {
    return m_end_value;
}
void OAIAttributeLinks::setEndValue(const QString &end_value) {
    m_end_value = end_value;
    m_end_value_isSet = true;
}

bool OAIAttributeLinks::is_end_value_Set() const{
    return m_end_value_isSet;
}

bool OAIAttributeLinks::is_end_value_Valid() const{
    return m_end_value_isValid;
}

QString OAIAttributeLinks::getEnumerationSet() const {
    return m_enumeration_set;
}
void OAIAttributeLinks::setEnumerationSet(const QString &enumeration_set) {
    m_enumeration_set = enumeration_set;
    m_enumeration_set_isSet = true;
}

bool OAIAttributeLinks::is_enumeration_set_Set() const{
    return m_enumeration_set_isSet;
}

bool OAIAttributeLinks::is_enumeration_set_Valid() const{
    return m_enumeration_set_isValid;
}

QString OAIAttributeLinks::getEnumerationValues() const {
    return m_enumeration_values;
}
void OAIAttributeLinks::setEnumerationValues(const QString &enumeration_values) {
    m_enumeration_values = enumeration_values;
    m_enumeration_values_isSet = true;
}

bool OAIAttributeLinks::is_enumeration_values_Set() const{
    return m_enumeration_values_isSet;
}

bool OAIAttributeLinks::is_enumeration_values_Valid() const{
    return m_enumeration_values_isValid;
}

QString OAIAttributeLinks::getEventFrame() const {
    return m_event_frame;
}
void OAIAttributeLinks::setEventFrame(const QString &event_frame) {
    m_event_frame = event_frame;
    m_event_frame_isSet = true;
}

bool OAIAttributeLinks::is_event_frame_Set() const{
    return m_event_frame_isSet;
}

bool OAIAttributeLinks::is_event_frame_Valid() const{
    return m_event_frame_isValid;
}

QString OAIAttributeLinks::getInterpolatedData() const {
    return m_interpolated_data;
}
void OAIAttributeLinks::setInterpolatedData(const QString &interpolated_data) {
    m_interpolated_data = interpolated_data;
    m_interpolated_data_isSet = true;
}

bool OAIAttributeLinks::is_interpolated_data_Set() const{
    return m_interpolated_data_isSet;
}

bool OAIAttributeLinks::is_interpolated_data_Valid() const{
    return m_interpolated_data_isValid;
}

QString OAIAttributeLinks::getParent() const {
    return m_parent;
}
void OAIAttributeLinks::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAttributeLinks::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAttributeLinks::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIAttributeLinks::getPlotData() const {
    return m_plot_data;
}
void OAIAttributeLinks::setPlotData(const QString &plot_data) {
    m_plot_data = plot_data;
    m_plot_data_isSet = true;
}

bool OAIAttributeLinks::is_plot_data_Set() const{
    return m_plot_data_isSet;
}

bool OAIAttributeLinks::is_plot_data_Valid() const{
    return m_plot_data_isValid;
}

QString OAIAttributeLinks::getPoint() const {
    return m_point;
}
void OAIAttributeLinks::setPoint(const QString &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAIAttributeLinks::is_point_Set() const{
    return m_point_isSet;
}

bool OAIAttributeLinks::is_point_Valid() const{
    return m_point_isValid;
}

QString OAIAttributeLinks::getRecordedData() const {
    return m_recorded_data;
}
void OAIAttributeLinks::setRecordedData(const QString &recorded_data) {
    m_recorded_data = recorded_data;
    m_recorded_data_isSet = true;
}

bool OAIAttributeLinks::is_recorded_data_Set() const{
    return m_recorded_data_isSet;
}

bool OAIAttributeLinks::is_recorded_data_Valid() const{
    return m_recorded_data_isValid;
}

QString OAIAttributeLinks::getSelf() const {
    return m_self;
}
void OAIAttributeLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAttributeLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAttributeLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIAttributeLinks::getSummaryData() const {
    return m_summary_data;
}
void OAIAttributeLinks::setSummaryData(const QString &summary_data) {
    m_summary_data = summary_data;
    m_summary_data_isSet = true;
}

bool OAIAttributeLinks::is_summary_data_Set() const{
    return m_summary_data_isSet;
}

bool OAIAttributeLinks::is_summary_data_Valid() const{
    return m_summary_data_isValid;
}

QString OAIAttributeLinks::getRTemplate() const {
    return m_r_template;
}
void OAIAttributeLinks::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIAttributeLinks::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIAttributeLinks::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIAttributeLinks::getTrait() const {
    return m_trait;
}
void OAIAttributeLinks::setTrait(const QString &trait) {
    m_trait = trait;
    m_trait_isSet = true;
}

bool OAIAttributeLinks::is_trait_Set() const{
    return m_trait_isSet;
}

bool OAIAttributeLinks::is_trait_Valid() const{
    return m_trait_isValid;
}

QString OAIAttributeLinks::getValue() const {
    return m_value;
}
void OAIAttributeLinks::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAttributeLinks::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAttributeLinks::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAttributeLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enumeration_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enumeration_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_frame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolated_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plot_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
