/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnumerationSetApi_H
#define OAI_OAIEnumerationSetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEnumerationSet.h"
#include "OAIEnumerationValue.h"
#include "OAIErrors.h"
#include "OAIItems_EnumerationValue.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnumerationSetApi : public QObject {
    Q_OBJECT

public:
    OAIEnumerationSetApi(const int timeOut = 0);
    ~OAIEnumerationSetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  enumeration_value OAIEnumerationValue [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetCreateValue(const QString &web_id, const OAIEnumerationValue &enumeration_value, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void enumerationSetDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void enumerationSetDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void enumerationSetGetValues(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  enumeration_set OAIEnumerationSet [required]
    */
    virtual void enumerationSetUpdate(const QString &web_id, const OAIEnumerationSet &enumeration_set);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void enumerationSetUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void enumerationSetCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void enumerationSetCreateValueCallback(OAIHttpRequestWorker *worker);
    void enumerationSetDeleteCallback(OAIHttpRequestWorker *worker);
    void enumerationSetDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void enumerationSetGetCallback(OAIHttpRequestWorker *worker);
    void enumerationSetGetByPathCallback(OAIHttpRequestWorker *worker);
    void enumerationSetGetSecurityCallback(OAIHttpRequestWorker *worker);
    void enumerationSetGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void enumerationSetGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void enumerationSetGetValuesCallback(OAIHttpRequestWorker *worker);
    void enumerationSetUpdateCallback(OAIHttpRequestWorker *worker);
    void enumerationSetUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void enumerationSetCreateSecurityEntrySignal();
    void enumerationSetCreateValueSignal();
    void enumerationSetDeleteSignal();
    void enumerationSetDeleteSecurityEntrySignal();
    void enumerationSetGetSignal(OAIEnumerationSet summary);
    void enumerationSetGetByPathSignal(OAIEnumerationSet summary);
    void enumerationSetGetSecuritySignal(OAIItems_SecurityRights summary);
    void enumerationSetGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void enumerationSetGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void enumerationSetGetValuesSignal(OAIItems_EnumerationValue summary);
    void enumerationSetUpdateSignal();
    void enumerationSetUpdateSecurityEntrySignal();


    void enumerationSetCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void enumerationSetCreateValueSignalFull(OAIHttpRequestWorker *worker);
    void enumerationSetDeleteSignalFull(OAIHttpRequestWorker *worker);
    void enumerationSetDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void enumerationSetGetSignalFull(OAIHttpRequestWorker *worker, OAIEnumerationSet summary);
    void enumerationSetGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIEnumerationSet summary);
    void enumerationSetGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void enumerationSetGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void enumerationSetGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void enumerationSetGetValuesSignalFull(OAIHttpRequestWorker *worker, OAIItems_EnumerationValue summary);
    void enumerationSetUpdateSignalFull(OAIHttpRequestWorker *worker);
    void enumerationSetUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use enumerationSetCreateSecurityEntrySignalError() instead")
    void enumerationSetCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetCreateValueSignalError() instead")
    void enumerationSetCreateValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetCreateValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetDeleteSignalError() instead")
    void enumerationSetDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetDeleteSecurityEntrySignalError() instead")
    void enumerationSetDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSignalError() instead")
    void enumerationSetGetSignalE(OAIEnumerationSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSignalError(OAIEnumerationSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetByPathSignalError() instead")
    void enumerationSetGetByPathSignalE(OAIEnumerationSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetByPathSignalError(OAIEnumerationSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSecuritySignalError() instead")
    void enumerationSetGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSecurityEntriesSignalError() instead")
    void enumerationSetGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSecurityEntryByNameSignalError() instead")
    void enumerationSetGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetValuesSignalError() instead")
    void enumerationSetGetValuesSignalE(OAIItems_EnumerationValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetValuesSignalError(OAIItems_EnumerationValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetUpdateSignalError() instead")
    void enumerationSetUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetUpdateSecurityEntrySignalError() instead")
    void enumerationSetUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use enumerationSetCreateSecurityEntrySignalErrorFull() instead")
    void enumerationSetCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetCreateValueSignalErrorFull() instead")
    void enumerationSetCreateValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetCreateValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetDeleteSignalErrorFull() instead")
    void enumerationSetDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetDeleteSecurityEntrySignalErrorFull() instead")
    void enumerationSetDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSignalErrorFull() instead")
    void enumerationSetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetByPathSignalErrorFull() instead")
    void enumerationSetGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSecuritySignalErrorFull() instead")
    void enumerationSetGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSecurityEntriesSignalErrorFull() instead")
    void enumerationSetGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetSecurityEntryByNameSignalErrorFull() instead")
    void enumerationSetGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetGetValuesSignalErrorFull() instead")
    void enumerationSetGetValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetGetValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetUpdateSignalErrorFull() instead")
    void enumerationSetUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumerationSetUpdateSecurityEntrySignalErrorFull() instead")
    void enumerationSetUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumerationSetUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
