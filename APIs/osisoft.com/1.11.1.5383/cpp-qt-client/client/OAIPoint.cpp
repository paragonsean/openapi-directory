/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint::OAIPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint::OAIPoint() {
    this->initializeModel();
}

OAIPoint::~OAIPoint() {}

void OAIPoint::initializeModel() {

    m_descriptor_isSet = false;
    m_descriptor_isValid = false;

    m_digital_set_name_isSet = false;
    m_digital_set_name_isValid = false;

    m_display_digits_isSet = false;
    m_display_digits_isValid = false;

    m_engineering_units_isSet = false;
    m_engineering_units_isValid = false;

    m_future_isSet = false;
    m_future_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_point_class_isSet = false;
    m_point_class_isValid = false;

    m_point_type_isSet = false;
    m_point_type_isValid = false;

    m_span_isSet = false;
    m_span_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;

    m_zero_isSet = false;
    m_zero_isValid = false;
}

void OAIPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint::fromJsonObject(QJsonObject json) {

    m_descriptor_isValid = ::OpenAPI::fromJsonValue(m_descriptor, json[QString("Descriptor")]);
    m_descriptor_isSet = !json[QString("Descriptor")].isNull() && m_descriptor_isValid;

    m_digital_set_name_isValid = ::OpenAPI::fromJsonValue(m_digital_set_name, json[QString("DigitalSetName")]);
    m_digital_set_name_isSet = !json[QString("DigitalSetName")].isNull() && m_digital_set_name_isValid;

    m_display_digits_isValid = ::OpenAPI::fromJsonValue(m_display_digits, json[QString("DisplayDigits")]);
    m_display_digits_isSet = !json[QString("DisplayDigits")].isNull() && m_display_digits_isValid;

    m_engineering_units_isValid = ::OpenAPI::fromJsonValue(m_engineering_units, json[QString("EngineeringUnits")]);
    m_engineering_units_isSet = !json[QString("EngineeringUnits")].isNull() && m_engineering_units_isValid;

    m_future_isValid = ::OpenAPI::fromJsonValue(m_future, json[QString("Future")]);
    m_future_isSet = !json[QString("Future")].isNull() && m_future_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_point_class_isValid = ::OpenAPI::fromJsonValue(m_point_class, json[QString("PointClass")]);
    m_point_class_isSet = !json[QString("PointClass")].isNull() && m_point_class_isValid;

    m_point_type_isValid = ::OpenAPI::fromJsonValue(m_point_type, json[QString("PointType")]);
    m_point_type_isSet = !json[QString("PointType")].isNull() && m_point_type_isValid;

    m_span_isValid = ::OpenAPI::fromJsonValue(m_span, json[QString("Span")]);
    m_span_isSet = !json[QString("Span")].isNull() && m_span_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("Step")]);
    m_step_isSet = !json[QString("Step")].isNull() && m_step_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;

    m_zero_isValid = ::OpenAPI::fromJsonValue(m_zero, json[QString("Zero")]);
    m_zero_isSet = !json[QString("Zero")].isNull() && m_zero_isValid;
}

QString OAIPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_descriptor_isSet) {
        obj.insert(QString("Descriptor"), ::OpenAPI::toJsonValue(m_descriptor));
    }
    if (m_digital_set_name_isSet) {
        obj.insert(QString("DigitalSetName"), ::OpenAPI::toJsonValue(m_digital_set_name));
    }
    if (m_display_digits_isSet) {
        obj.insert(QString("DisplayDigits"), ::OpenAPI::toJsonValue(m_display_digits));
    }
    if (m_engineering_units_isSet) {
        obj.insert(QString("EngineeringUnits"), ::OpenAPI::toJsonValue(m_engineering_units));
    }
    if (m_future_isSet) {
        obj.insert(QString("Future"), ::OpenAPI::toJsonValue(m_future));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_point_class_isSet) {
        obj.insert(QString("PointClass"), ::OpenAPI::toJsonValue(m_point_class));
    }
    if (m_point_type_isSet) {
        obj.insert(QString("PointType"), ::OpenAPI::toJsonValue(m_point_type));
    }
    if (m_span_isSet) {
        obj.insert(QString("Span"), ::OpenAPI::toJsonValue(m_span));
    }
    if (m_step_isSet) {
        obj.insert(QString("Step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    if (m_zero_isSet) {
        obj.insert(QString("Zero"), ::OpenAPI::toJsonValue(m_zero));
    }
    return obj;
}

QString OAIPoint::getDescriptor() const {
    return m_descriptor;
}
void OAIPoint::setDescriptor(const QString &descriptor) {
    m_descriptor = descriptor;
    m_descriptor_isSet = true;
}

bool OAIPoint::is_descriptor_Set() const{
    return m_descriptor_isSet;
}

bool OAIPoint::is_descriptor_Valid() const{
    return m_descriptor_isValid;
}

QString OAIPoint::getDigitalSetName() const {
    return m_digital_set_name;
}
void OAIPoint::setDigitalSetName(const QString &digital_set_name) {
    m_digital_set_name = digital_set_name;
    m_digital_set_name_isSet = true;
}

bool OAIPoint::is_digital_set_name_Set() const{
    return m_digital_set_name_isSet;
}

bool OAIPoint::is_digital_set_name_Valid() const{
    return m_digital_set_name_isValid;
}

qint32 OAIPoint::getDisplayDigits() const {
    return m_display_digits;
}
void OAIPoint::setDisplayDigits(const qint32 &display_digits) {
    m_display_digits = display_digits;
    m_display_digits_isSet = true;
}

bool OAIPoint::is_display_digits_Set() const{
    return m_display_digits_isSet;
}

bool OAIPoint::is_display_digits_Valid() const{
    return m_display_digits_isValid;
}

QString OAIPoint::getEngineeringUnits() const {
    return m_engineering_units;
}
void OAIPoint::setEngineeringUnits(const QString &engineering_units) {
    m_engineering_units = engineering_units;
    m_engineering_units_isSet = true;
}

bool OAIPoint::is_engineering_units_Set() const{
    return m_engineering_units_isSet;
}

bool OAIPoint::is_engineering_units_Valid() const{
    return m_engineering_units_isValid;
}

bool OAIPoint::isFuture() const {
    return m_future;
}
void OAIPoint::setFuture(const bool &future) {
    m_future = future;
    m_future_isSet = true;
}

bool OAIPoint::is_future_Set() const{
    return m_future_isSet;
}

bool OAIPoint::is_future_Valid() const{
    return m_future_isValid;
}

qint32 OAIPoint::getId() const {
    return m_id;
}
void OAIPoint::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPoint::is_id_Valid() const{
    return m_id_isValid;
}

OAIPointLinks OAIPoint::getLinks() const {
    return m_links;
}
void OAIPoint::setLinks(const OAIPointLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPoint::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPoint::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPoint::getName() const {
    return m_name;
}
void OAIPoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPoint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPoint::getPath() const {
    return m_path;
}
void OAIPoint::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPoint::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPoint::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPoint::getPointClass() const {
    return m_point_class;
}
void OAIPoint::setPointClass(const QString &point_class) {
    m_point_class = point_class;
    m_point_class_isSet = true;
}

bool OAIPoint::is_point_class_Set() const{
    return m_point_class_isSet;
}

bool OAIPoint::is_point_class_Valid() const{
    return m_point_class_isValid;
}

QString OAIPoint::getPointType() const {
    return m_point_type;
}
void OAIPoint::setPointType(const QString &point_type) {
    m_point_type = point_type;
    m_point_type_isSet = true;
}

bool OAIPoint::is_point_type_Set() const{
    return m_point_type_isSet;
}

bool OAIPoint::is_point_type_Valid() const{
    return m_point_type_isValid;
}

double OAIPoint::getSpan() const {
    return m_span;
}
void OAIPoint::setSpan(const double &span) {
    m_span = span;
    m_span_isSet = true;
}

bool OAIPoint::is_span_Set() const{
    return m_span_isSet;
}

bool OAIPoint::is_span_Valid() const{
    return m_span_isValid;
}

bool OAIPoint::isStep() const {
    return m_step;
}
void OAIPoint::setStep(const bool &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIPoint::is_step_Set() const{
    return m_step_isSet;
}

bool OAIPoint::is_step_Valid() const{
    return m_step_isValid;
}

OAIWebException OAIPoint::getWebException() const {
    return m_web_exception;
}
void OAIPoint::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIPoint::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIPoint::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIPoint::getWebId() const {
    return m_web_id;
}
void OAIPoint::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIPoint::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIPoint::is_web_id_Valid() const{
    return m_web_id_isValid;
}

double OAIPoint::getZero() const {
    return m_zero;
}
void OAIPoint::setZero(const double &zero) {
    m_zero = zero;
    m_zero_isSet = true;
}

bool OAIPoint::is_zero_Set() const{
    return m_zero_isSet;
}

bool OAIPoint::is_zero_Valid() const{
    return m_zero_isValid;
}

bool OAIPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engineering_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_future_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zero_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
