/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetDatabaseLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetDatabaseLinks::OAIAssetDatabaseLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetDatabaseLinks::OAIAssetDatabaseLinks() {
    this->initializeModel();
}

OAIAssetDatabaseLinks::~OAIAssetDatabaseLinks() {}

void OAIAssetDatabaseLinks::initializeModel() {

    m_analysis_categories_isSet = false;
    m_analysis_categories_isValid = false;

    m_analysis_templates_isSet = false;
    m_analysis_templates_isValid = false;

    m_asset_server_isSet = false;
    m_asset_server_isValid = false;

    m_attribute_categories_isSet = false;
    m_attribute_categories_isValid = false;

    m_element_categories_isSet = false;
    m_element_categories_isValid = false;

    m_element_templates_isSet = false;
    m_element_templates_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_enumeration_sets_isSet = false;
    m_enumeration_sets_isValid = false;

    m_event_frames_isSet = false;
    m_event_frames_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_security_entries_isSet = false;
    m_security_entries_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_table_categories_isSet = false;
    m_table_categories_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;
}

void OAIAssetDatabaseLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetDatabaseLinks::fromJsonObject(QJsonObject json) {

    m_analysis_categories_isValid = ::OpenAPI::fromJsonValue(m_analysis_categories, json[QString("AnalysisCategories")]);
    m_analysis_categories_isSet = !json[QString("AnalysisCategories")].isNull() && m_analysis_categories_isValid;

    m_analysis_templates_isValid = ::OpenAPI::fromJsonValue(m_analysis_templates, json[QString("AnalysisTemplates")]);
    m_analysis_templates_isSet = !json[QString("AnalysisTemplates")].isNull() && m_analysis_templates_isValid;

    m_asset_server_isValid = ::OpenAPI::fromJsonValue(m_asset_server, json[QString("AssetServer")]);
    m_asset_server_isSet = !json[QString("AssetServer")].isNull() && m_asset_server_isValid;

    m_attribute_categories_isValid = ::OpenAPI::fromJsonValue(m_attribute_categories, json[QString("AttributeCategories")]);
    m_attribute_categories_isSet = !json[QString("AttributeCategories")].isNull() && m_attribute_categories_isValid;

    m_element_categories_isValid = ::OpenAPI::fromJsonValue(m_element_categories, json[QString("ElementCategories")]);
    m_element_categories_isSet = !json[QString("ElementCategories")].isNull() && m_element_categories_isValid;

    m_element_templates_isValid = ::OpenAPI::fromJsonValue(m_element_templates, json[QString("ElementTemplates")]);
    m_element_templates_isSet = !json[QString("ElementTemplates")].isNull() && m_element_templates_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("Elements")]);
    m_elements_isSet = !json[QString("Elements")].isNull() && m_elements_isValid;

    m_enumeration_sets_isValid = ::OpenAPI::fromJsonValue(m_enumeration_sets, json[QString("EnumerationSets")]);
    m_enumeration_sets_isSet = !json[QString("EnumerationSets")].isNull() && m_enumeration_sets_isValid;

    m_event_frames_isValid = ::OpenAPI::fromJsonValue(m_event_frames, json[QString("EventFrames")]);
    m_event_frames_isSet = !json[QString("EventFrames")].isNull() && m_event_frames_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_security_entries_isValid = ::OpenAPI::fromJsonValue(m_security_entries, json[QString("SecurityEntries")]);
    m_security_entries_isSet = !json[QString("SecurityEntries")].isNull() && m_security_entries_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_table_categories_isValid = ::OpenAPI::fromJsonValue(m_table_categories, json[QString("TableCategories")]);
    m_table_categories_isSet = !json[QString("TableCategories")].isNull() && m_table_categories_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("Tables")]);
    m_tables_isSet = !json[QString("Tables")].isNull() && m_tables_isValid;
}

QString OAIAssetDatabaseLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetDatabaseLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_categories_isSet) {
        obj.insert(QString("AnalysisCategories"), ::OpenAPI::toJsonValue(m_analysis_categories));
    }
    if (m_analysis_templates_isSet) {
        obj.insert(QString("AnalysisTemplates"), ::OpenAPI::toJsonValue(m_analysis_templates));
    }
    if (m_asset_server_isSet) {
        obj.insert(QString("AssetServer"), ::OpenAPI::toJsonValue(m_asset_server));
    }
    if (m_attribute_categories_isSet) {
        obj.insert(QString("AttributeCategories"), ::OpenAPI::toJsonValue(m_attribute_categories));
    }
    if (m_element_categories_isSet) {
        obj.insert(QString("ElementCategories"), ::OpenAPI::toJsonValue(m_element_categories));
    }
    if (m_element_templates_isSet) {
        obj.insert(QString("ElementTemplates"), ::OpenAPI::toJsonValue(m_element_templates));
    }
    if (m_elements_isSet) {
        obj.insert(QString("Elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_enumeration_sets_isSet) {
        obj.insert(QString("EnumerationSets"), ::OpenAPI::toJsonValue(m_enumeration_sets));
    }
    if (m_event_frames_isSet) {
        obj.insert(QString("EventFrames"), ::OpenAPI::toJsonValue(m_event_frames));
    }
    if (m_security_isSet) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_security_entries_isSet) {
        obj.insert(QString("SecurityEntries"), ::OpenAPI::toJsonValue(m_security_entries));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_table_categories_isSet) {
        obj.insert(QString("TableCategories"), ::OpenAPI::toJsonValue(m_table_categories));
    }
    if (m_tables_isSet) {
        obj.insert(QString("Tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    return obj;
}

QString OAIAssetDatabaseLinks::getAnalysisCategories() const {
    return m_analysis_categories;
}
void OAIAssetDatabaseLinks::setAnalysisCategories(const QString &analysis_categories) {
    m_analysis_categories = analysis_categories;
    m_analysis_categories_isSet = true;
}

bool OAIAssetDatabaseLinks::is_analysis_categories_Set() const{
    return m_analysis_categories_isSet;
}

bool OAIAssetDatabaseLinks::is_analysis_categories_Valid() const{
    return m_analysis_categories_isValid;
}

QString OAIAssetDatabaseLinks::getAnalysisTemplates() const {
    return m_analysis_templates;
}
void OAIAssetDatabaseLinks::setAnalysisTemplates(const QString &analysis_templates) {
    m_analysis_templates = analysis_templates;
    m_analysis_templates_isSet = true;
}

bool OAIAssetDatabaseLinks::is_analysis_templates_Set() const{
    return m_analysis_templates_isSet;
}

bool OAIAssetDatabaseLinks::is_analysis_templates_Valid() const{
    return m_analysis_templates_isValid;
}

QString OAIAssetDatabaseLinks::getAssetServer() const {
    return m_asset_server;
}
void OAIAssetDatabaseLinks::setAssetServer(const QString &asset_server) {
    m_asset_server = asset_server;
    m_asset_server_isSet = true;
}

bool OAIAssetDatabaseLinks::is_asset_server_Set() const{
    return m_asset_server_isSet;
}

bool OAIAssetDatabaseLinks::is_asset_server_Valid() const{
    return m_asset_server_isValid;
}

QString OAIAssetDatabaseLinks::getAttributeCategories() const {
    return m_attribute_categories;
}
void OAIAssetDatabaseLinks::setAttributeCategories(const QString &attribute_categories) {
    m_attribute_categories = attribute_categories;
    m_attribute_categories_isSet = true;
}

bool OAIAssetDatabaseLinks::is_attribute_categories_Set() const{
    return m_attribute_categories_isSet;
}

bool OAIAssetDatabaseLinks::is_attribute_categories_Valid() const{
    return m_attribute_categories_isValid;
}

QString OAIAssetDatabaseLinks::getElementCategories() const {
    return m_element_categories;
}
void OAIAssetDatabaseLinks::setElementCategories(const QString &element_categories) {
    m_element_categories = element_categories;
    m_element_categories_isSet = true;
}

bool OAIAssetDatabaseLinks::is_element_categories_Set() const{
    return m_element_categories_isSet;
}

bool OAIAssetDatabaseLinks::is_element_categories_Valid() const{
    return m_element_categories_isValid;
}

QString OAIAssetDatabaseLinks::getElementTemplates() const {
    return m_element_templates;
}
void OAIAssetDatabaseLinks::setElementTemplates(const QString &element_templates) {
    m_element_templates = element_templates;
    m_element_templates_isSet = true;
}

bool OAIAssetDatabaseLinks::is_element_templates_Set() const{
    return m_element_templates_isSet;
}

bool OAIAssetDatabaseLinks::is_element_templates_Valid() const{
    return m_element_templates_isValid;
}

QString OAIAssetDatabaseLinks::getElements() const {
    return m_elements;
}
void OAIAssetDatabaseLinks::setElements(const QString &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIAssetDatabaseLinks::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIAssetDatabaseLinks::is_elements_Valid() const{
    return m_elements_isValid;
}

QString OAIAssetDatabaseLinks::getEnumerationSets() const {
    return m_enumeration_sets;
}
void OAIAssetDatabaseLinks::setEnumerationSets(const QString &enumeration_sets) {
    m_enumeration_sets = enumeration_sets;
    m_enumeration_sets_isSet = true;
}

bool OAIAssetDatabaseLinks::is_enumeration_sets_Set() const{
    return m_enumeration_sets_isSet;
}

bool OAIAssetDatabaseLinks::is_enumeration_sets_Valid() const{
    return m_enumeration_sets_isValid;
}

QString OAIAssetDatabaseLinks::getEventFrames() const {
    return m_event_frames;
}
void OAIAssetDatabaseLinks::setEventFrames(const QString &event_frames) {
    m_event_frames = event_frames;
    m_event_frames_isSet = true;
}

bool OAIAssetDatabaseLinks::is_event_frames_Set() const{
    return m_event_frames_isSet;
}

bool OAIAssetDatabaseLinks::is_event_frames_Valid() const{
    return m_event_frames_isValid;
}

QString OAIAssetDatabaseLinks::getSecurity() const {
    return m_security;
}
void OAIAssetDatabaseLinks::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIAssetDatabaseLinks::is_security_Set() const{
    return m_security_isSet;
}

bool OAIAssetDatabaseLinks::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIAssetDatabaseLinks::getSecurityEntries() const {
    return m_security_entries;
}
void OAIAssetDatabaseLinks::setSecurityEntries(const QString &security_entries) {
    m_security_entries = security_entries;
    m_security_entries_isSet = true;
}

bool OAIAssetDatabaseLinks::is_security_entries_Set() const{
    return m_security_entries_isSet;
}

bool OAIAssetDatabaseLinks::is_security_entries_Valid() const{
    return m_security_entries_isValid;
}

QString OAIAssetDatabaseLinks::getSelf() const {
    return m_self;
}
void OAIAssetDatabaseLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAssetDatabaseLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAssetDatabaseLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIAssetDatabaseLinks::getTableCategories() const {
    return m_table_categories;
}
void OAIAssetDatabaseLinks::setTableCategories(const QString &table_categories) {
    m_table_categories = table_categories;
    m_table_categories_isSet = true;
}

bool OAIAssetDatabaseLinks::is_table_categories_Set() const{
    return m_table_categories_isSet;
}

bool OAIAssetDatabaseLinks::is_table_categories_Valid() const{
    return m_table_categories_isValid;
}

QString OAIAssetDatabaseLinks::getTables() const {
    return m_tables;
}
void OAIAssetDatabaseLinks::setTables(const QString &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIAssetDatabaseLinks::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIAssetDatabaseLinks::is_tables_Valid() const{
    return m_tables_isValid;
}

bool OAIAssetDatabaseLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enumeration_sets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetDatabaseLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
