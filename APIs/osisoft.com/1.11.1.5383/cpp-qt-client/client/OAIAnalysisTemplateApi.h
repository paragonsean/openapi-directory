/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisTemplateApi_H
#define OAI_OAIAnalysisTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisTemplate.h"
#include "OAIErrors.h"
#include "OAIItems_AnalysisCategory.h"
#include "OAIItems_AnalysisTemplate.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisTemplateApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisTemplateApi(const int timeOut = 0);
    ~OAIAnalysisTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  analysis_web_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateCreateFromAnalysis(const QString &analysis_web_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void analysisTemplateDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void analysisTemplateDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGetAnalysisTemplatesQuery(const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisTemplateGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIAnalysisTemplate [required]
    */
    virtual void analysisTemplateUpdate(const QString &web_id, const OAIAnalysisTemplate &r_template);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void analysisTemplateUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analysisTemplateCreateFromAnalysisCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetAnalysisTemplatesQueryCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetByPathCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetSecurityCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateUpdateCallback(OAIHttpRequestWorker *worker);
    void analysisTemplateUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analysisTemplateCreateFromAnalysisSignal();
    void analysisTemplateCreateSecurityEntrySignal();
    void analysisTemplateDeleteSignal();
    void analysisTemplateDeleteSecurityEntrySignal();
    void analysisTemplateGetSignal(OAIAnalysisTemplate summary);
    void analysisTemplateGetAnalysisTemplatesQuerySignal(OAIItems_AnalysisTemplate summary);
    void analysisTemplateGetByPathSignal(OAIAnalysisTemplate summary);
    void analysisTemplateGetCategoriesSignal(OAIItems_AnalysisCategory summary);
    void analysisTemplateGetSecuritySignal(OAIItems_SecurityRights summary);
    void analysisTemplateGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void analysisTemplateGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void analysisTemplateUpdateSignal();
    void analysisTemplateUpdateSecurityEntrySignal();


    void analysisTemplateCreateFromAnalysisSignalFull(OAIHttpRequestWorker *worker);
    void analysisTemplateCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void analysisTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void analysisTemplateDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void analysisTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisTemplate summary);
    void analysisTemplateGetAnalysisTemplatesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisTemplate summary);
    void analysisTemplateGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisTemplate summary);
    void analysisTemplateGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisCategory summary);
    void analysisTemplateGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void analysisTemplateGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void analysisTemplateGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void analysisTemplateUpdateSignalFull(OAIHttpRequestWorker *worker);
    void analysisTemplateUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use analysisTemplateCreateFromAnalysisSignalError() instead")
    void analysisTemplateCreateFromAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateCreateFromAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateCreateSecurityEntrySignalError() instead")
    void analysisTemplateCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateDeleteSignalError() instead")
    void analysisTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateDeleteSecurityEntrySignalError() instead")
    void analysisTemplateDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSignalError() instead")
    void analysisTemplateGetSignalE(OAIAnalysisTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSignalError(OAIAnalysisTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetAnalysisTemplatesQuerySignalError() instead")
    void analysisTemplateGetAnalysisTemplatesQuerySignalE(OAIItems_AnalysisTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetAnalysisTemplatesQuerySignalError(OAIItems_AnalysisTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetByPathSignalError() instead")
    void analysisTemplateGetByPathSignalE(OAIAnalysisTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetByPathSignalError(OAIAnalysisTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetCategoriesSignalError() instead")
    void analysisTemplateGetCategoriesSignalE(OAIItems_AnalysisCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetCategoriesSignalError(OAIItems_AnalysisCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSecuritySignalError() instead")
    void analysisTemplateGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSecurityEntriesSignalError() instead")
    void analysisTemplateGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSecurityEntryByNameSignalError() instead")
    void analysisTemplateGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateUpdateSignalError() instead")
    void analysisTemplateUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateUpdateSecurityEntrySignalError() instead")
    void analysisTemplateUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analysisTemplateCreateFromAnalysisSignalErrorFull() instead")
    void analysisTemplateCreateFromAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateCreateFromAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateCreateSecurityEntrySignalErrorFull() instead")
    void analysisTemplateCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateDeleteSignalErrorFull() instead")
    void analysisTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateDeleteSecurityEntrySignalErrorFull() instead")
    void analysisTemplateDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSignalErrorFull() instead")
    void analysisTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetAnalysisTemplatesQuerySignalErrorFull() instead")
    void analysisTemplateGetAnalysisTemplatesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetAnalysisTemplatesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetByPathSignalErrorFull() instead")
    void analysisTemplateGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetCategoriesSignalErrorFull() instead")
    void analysisTemplateGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSecuritySignalErrorFull() instead")
    void analysisTemplateGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSecurityEntriesSignalErrorFull() instead")
    void analysisTemplateGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateGetSecurityEntryByNameSignalErrorFull() instead")
    void analysisTemplateGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateUpdateSignalErrorFull() instead")
    void analysisTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisTemplateUpdateSecurityEntrySignalErrorFull() instead")
    void analysisTemplateUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisTemplateUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
