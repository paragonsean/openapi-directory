/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumerationValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumerationValue::OAIEnumerationValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumerationValue::OAIEnumerationValue() {
    this->initializeModel();
}

OAIEnumerationValue::~OAIEnumerationValue() {}

void OAIEnumerationValue::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_serialize_description_isSet = false;
    m_serialize_description_isValid = false;

    m_serialize_id_isSet = false;
    m_serialize_id_isValid = false;

    m_serialize_links_isSet = false;
    m_serialize_links_isValid = false;

    m_serialize_path_isSet = false;
    m_serialize_path_isValid = false;

    m_serialize_web_id_isSet = false;
    m_serialize_web_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIEnumerationValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnumerationValue::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_serialize_description_isValid = ::OpenAPI::fromJsonValue(m_serialize_description, json[QString("SerializeDescription")]);
    m_serialize_description_isSet = !json[QString("SerializeDescription")].isNull() && m_serialize_description_isValid;

    m_serialize_id_isValid = ::OpenAPI::fromJsonValue(m_serialize_id, json[QString("SerializeId")]);
    m_serialize_id_isSet = !json[QString("SerializeId")].isNull() && m_serialize_id_isValid;

    m_serialize_links_isValid = ::OpenAPI::fromJsonValue(m_serialize_links, json[QString("SerializeLinks")]);
    m_serialize_links_isSet = !json[QString("SerializeLinks")].isNull() && m_serialize_links_isValid;

    m_serialize_path_isValid = ::OpenAPI::fromJsonValue(m_serialize_path, json[QString("SerializePath")]);
    m_serialize_path_isSet = !json[QString("SerializePath")].isNull() && m_serialize_path_isValid;

    m_serialize_web_id_isValid = ::OpenAPI::fromJsonValue(m_serialize_web_id, json[QString("SerializeWebId")]);
    m_serialize_web_id_isSet = !json[QString("SerializeWebId")].isNull() && m_serialize_web_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIEnumerationValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnumerationValue::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_serialize_description_isSet) {
        obj.insert(QString("SerializeDescription"), ::OpenAPI::toJsonValue(m_serialize_description));
    }
    if (m_serialize_id_isSet) {
        obj.insert(QString("SerializeId"), ::OpenAPI::toJsonValue(m_serialize_id));
    }
    if (m_serialize_links_isSet) {
        obj.insert(QString("SerializeLinks"), ::OpenAPI::toJsonValue(m_serialize_links));
    }
    if (m_serialize_path_isSet) {
        obj.insert(QString("SerializePath"), ::OpenAPI::toJsonValue(m_serialize_path));
    }
    if (m_serialize_web_id_isSet) {
        obj.insert(QString("SerializeWebId"), ::OpenAPI::toJsonValue(m_serialize_web_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QString OAIEnumerationValue::getDescription() const {
    return m_description;
}
void OAIEnumerationValue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnumerationValue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnumerationValue::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEnumerationValue::getId() const {
    return m_id;
}
void OAIEnumerationValue::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnumerationValue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnumerationValue::is_id_Valid() const{
    return m_id_isValid;
}

OAIEnumerationValueLinks OAIEnumerationValue::getLinks() const {
    return m_links;
}
void OAIEnumerationValue::setLinks(const OAIEnumerationValueLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIEnumerationValue::is_links_Set() const{
    return m_links_isSet;
}

bool OAIEnumerationValue::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIEnumerationValue::getName() const {
    return m_name;
}
void OAIEnumerationValue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnumerationValue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnumerationValue::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnumerationValue::getParent() const {
    return m_parent;
}
void OAIEnumerationValue::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIEnumerationValue::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIEnumerationValue::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIEnumerationValue::getPath() const {
    return m_path;
}
void OAIEnumerationValue::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIEnumerationValue::is_path_Set() const{
    return m_path_isSet;
}

bool OAIEnumerationValue::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIEnumerationValue::isSerializeDescription() const {
    return m_serialize_description;
}
void OAIEnumerationValue::setSerializeDescription(const bool &serialize_description) {
    m_serialize_description = serialize_description;
    m_serialize_description_isSet = true;
}

bool OAIEnumerationValue::is_serialize_description_Set() const{
    return m_serialize_description_isSet;
}

bool OAIEnumerationValue::is_serialize_description_Valid() const{
    return m_serialize_description_isValid;
}

bool OAIEnumerationValue::isSerializeId() const {
    return m_serialize_id;
}
void OAIEnumerationValue::setSerializeId(const bool &serialize_id) {
    m_serialize_id = serialize_id;
    m_serialize_id_isSet = true;
}

bool OAIEnumerationValue::is_serialize_id_Set() const{
    return m_serialize_id_isSet;
}

bool OAIEnumerationValue::is_serialize_id_Valid() const{
    return m_serialize_id_isValid;
}

bool OAIEnumerationValue::isSerializeLinks() const {
    return m_serialize_links;
}
void OAIEnumerationValue::setSerializeLinks(const bool &serialize_links) {
    m_serialize_links = serialize_links;
    m_serialize_links_isSet = true;
}

bool OAIEnumerationValue::is_serialize_links_Set() const{
    return m_serialize_links_isSet;
}

bool OAIEnumerationValue::is_serialize_links_Valid() const{
    return m_serialize_links_isValid;
}

bool OAIEnumerationValue::isSerializePath() const {
    return m_serialize_path;
}
void OAIEnumerationValue::setSerializePath(const bool &serialize_path) {
    m_serialize_path = serialize_path;
    m_serialize_path_isSet = true;
}

bool OAIEnumerationValue::is_serialize_path_Set() const{
    return m_serialize_path_isSet;
}

bool OAIEnumerationValue::is_serialize_path_Valid() const{
    return m_serialize_path_isValid;
}

bool OAIEnumerationValue::isSerializeWebId() const {
    return m_serialize_web_id;
}
void OAIEnumerationValue::setSerializeWebId(const bool &serialize_web_id) {
    m_serialize_web_id = serialize_web_id;
    m_serialize_web_id_isSet = true;
}

bool OAIEnumerationValue::is_serialize_web_id_Set() const{
    return m_serialize_web_id_isSet;
}

bool OAIEnumerationValue::is_serialize_web_id_Valid() const{
    return m_serialize_web_id_isValid;
}

qint32 OAIEnumerationValue::getValue() const {
    return m_value;
}
void OAIEnumerationValue::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEnumerationValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEnumerationValue::is_value_Valid() const{
    return m_value_isValid;
}

OAIWebException OAIEnumerationValue::getWebException() const {
    return m_web_exception;
}
void OAIEnumerationValue::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIEnumerationValue::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIEnumerationValue::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIEnumerationValue::getWebId() const {
    return m_web_id;
}
void OAIEnumerationValue::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIEnumerationValue::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIEnumerationValue::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIEnumerationValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialize_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialize_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialize_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialize_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialize_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnumerationValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
