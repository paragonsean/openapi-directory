/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurity::OAISecurity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurity::OAISecurity() {
    this->initializeModel();
}

OAISecurity::~OAISecurity() {}

void OAISecurity::initializeModel() {

    m_can_annotate_isSet = false;
    m_can_annotate_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_execute_isSet = false;
    m_can_execute_isValid = false;

    m_can_read_isSet = false;
    m_can_read_isValid = false;

    m_can_read_data_isSet = false;
    m_can_read_data_isValid = false;

    m_can_subscribe_isSet = false;
    m_can_subscribe_isValid = false;

    m_can_subscribe_others_isSet = false;
    m_can_subscribe_others_isValid = false;

    m_can_write_isSet = false;
    m_can_write_isValid = false;

    m_can_write_data_isSet = false;
    m_can_write_data_isValid = false;

    m_has_admin_isSet = false;
    m_has_admin_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAISecurity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurity::fromJsonObject(QJsonObject json) {

    m_can_annotate_isValid = ::OpenAPI::fromJsonValue(m_can_annotate, json[QString("CanAnnotate")]);
    m_can_annotate_isSet = !json[QString("CanAnnotate")].isNull() && m_can_annotate_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("CanDelete")]);
    m_can_delete_isSet = !json[QString("CanDelete")].isNull() && m_can_delete_isValid;

    m_can_execute_isValid = ::OpenAPI::fromJsonValue(m_can_execute, json[QString("CanExecute")]);
    m_can_execute_isSet = !json[QString("CanExecute")].isNull() && m_can_execute_isValid;

    m_can_read_isValid = ::OpenAPI::fromJsonValue(m_can_read, json[QString("CanRead")]);
    m_can_read_isSet = !json[QString("CanRead")].isNull() && m_can_read_isValid;

    m_can_read_data_isValid = ::OpenAPI::fromJsonValue(m_can_read_data, json[QString("CanReadData")]);
    m_can_read_data_isSet = !json[QString("CanReadData")].isNull() && m_can_read_data_isValid;

    m_can_subscribe_isValid = ::OpenAPI::fromJsonValue(m_can_subscribe, json[QString("CanSubscribe")]);
    m_can_subscribe_isSet = !json[QString("CanSubscribe")].isNull() && m_can_subscribe_isValid;

    m_can_subscribe_others_isValid = ::OpenAPI::fromJsonValue(m_can_subscribe_others, json[QString("CanSubscribeOthers")]);
    m_can_subscribe_others_isSet = !json[QString("CanSubscribeOthers")].isNull() && m_can_subscribe_others_isValid;

    m_can_write_isValid = ::OpenAPI::fromJsonValue(m_can_write, json[QString("CanWrite")]);
    m_can_write_isSet = !json[QString("CanWrite")].isNull() && m_can_write_isValid;

    m_can_write_data_isValid = ::OpenAPI::fromJsonValue(m_can_write_data, json[QString("CanWriteData")]);
    m_can_write_data_isSet = !json[QString("CanWriteData")].isNull() && m_can_write_data_isValid;

    m_has_admin_isValid = ::OpenAPI::fromJsonValue(m_has_admin, json[QString("HasAdmin")]);
    m_has_admin_isSet = !json[QString("HasAdmin")].isNull() && m_has_admin_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("Rights")]);
    m_rights_isSet = !json[QString("Rights")].isNull() && m_rights_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAISecurity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurity::asJsonObject() const {
    QJsonObject obj;
    if (m_can_annotate_isSet) {
        obj.insert(QString("CanAnnotate"), ::OpenAPI::toJsonValue(m_can_annotate));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("CanDelete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_execute_isSet) {
        obj.insert(QString("CanExecute"), ::OpenAPI::toJsonValue(m_can_execute));
    }
    if (m_can_read_isSet) {
        obj.insert(QString("CanRead"), ::OpenAPI::toJsonValue(m_can_read));
    }
    if (m_can_read_data_isSet) {
        obj.insert(QString("CanReadData"), ::OpenAPI::toJsonValue(m_can_read_data));
    }
    if (m_can_subscribe_isSet) {
        obj.insert(QString("CanSubscribe"), ::OpenAPI::toJsonValue(m_can_subscribe));
    }
    if (m_can_subscribe_others_isSet) {
        obj.insert(QString("CanSubscribeOthers"), ::OpenAPI::toJsonValue(m_can_subscribe_others));
    }
    if (m_can_write_isSet) {
        obj.insert(QString("CanWrite"), ::OpenAPI::toJsonValue(m_can_write));
    }
    if (m_can_write_data_isSet) {
        obj.insert(QString("CanWriteData"), ::OpenAPI::toJsonValue(m_can_write_data));
    }
    if (m_has_admin_isSet) {
        obj.insert(QString("HasAdmin"), ::OpenAPI::toJsonValue(m_has_admin));
    }
    if (m_rights.size() > 0) {
        obj.insert(QString("Rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

bool OAISecurity::isCanAnnotate() const {
    return m_can_annotate;
}
void OAISecurity::setCanAnnotate(const bool &can_annotate) {
    m_can_annotate = can_annotate;
    m_can_annotate_isSet = true;
}

bool OAISecurity::is_can_annotate_Set() const{
    return m_can_annotate_isSet;
}

bool OAISecurity::is_can_annotate_Valid() const{
    return m_can_annotate_isValid;
}

bool OAISecurity::isCanDelete() const {
    return m_can_delete;
}
void OAISecurity::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAISecurity::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAISecurity::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAISecurity::isCanExecute() const {
    return m_can_execute;
}
void OAISecurity::setCanExecute(const bool &can_execute) {
    m_can_execute = can_execute;
    m_can_execute_isSet = true;
}

bool OAISecurity::is_can_execute_Set() const{
    return m_can_execute_isSet;
}

bool OAISecurity::is_can_execute_Valid() const{
    return m_can_execute_isValid;
}

bool OAISecurity::isCanRead() const {
    return m_can_read;
}
void OAISecurity::setCanRead(const bool &can_read) {
    m_can_read = can_read;
    m_can_read_isSet = true;
}

bool OAISecurity::is_can_read_Set() const{
    return m_can_read_isSet;
}

bool OAISecurity::is_can_read_Valid() const{
    return m_can_read_isValid;
}

bool OAISecurity::isCanReadData() const {
    return m_can_read_data;
}
void OAISecurity::setCanReadData(const bool &can_read_data) {
    m_can_read_data = can_read_data;
    m_can_read_data_isSet = true;
}

bool OAISecurity::is_can_read_data_Set() const{
    return m_can_read_data_isSet;
}

bool OAISecurity::is_can_read_data_Valid() const{
    return m_can_read_data_isValid;
}

bool OAISecurity::isCanSubscribe() const {
    return m_can_subscribe;
}
void OAISecurity::setCanSubscribe(const bool &can_subscribe) {
    m_can_subscribe = can_subscribe;
    m_can_subscribe_isSet = true;
}

bool OAISecurity::is_can_subscribe_Set() const{
    return m_can_subscribe_isSet;
}

bool OAISecurity::is_can_subscribe_Valid() const{
    return m_can_subscribe_isValid;
}

bool OAISecurity::isCanSubscribeOthers() const {
    return m_can_subscribe_others;
}
void OAISecurity::setCanSubscribeOthers(const bool &can_subscribe_others) {
    m_can_subscribe_others = can_subscribe_others;
    m_can_subscribe_others_isSet = true;
}

bool OAISecurity::is_can_subscribe_others_Set() const{
    return m_can_subscribe_others_isSet;
}

bool OAISecurity::is_can_subscribe_others_Valid() const{
    return m_can_subscribe_others_isValid;
}

bool OAISecurity::isCanWrite() const {
    return m_can_write;
}
void OAISecurity::setCanWrite(const bool &can_write) {
    m_can_write = can_write;
    m_can_write_isSet = true;
}

bool OAISecurity::is_can_write_Set() const{
    return m_can_write_isSet;
}

bool OAISecurity::is_can_write_Valid() const{
    return m_can_write_isValid;
}

bool OAISecurity::isCanWriteData() const {
    return m_can_write_data;
}
void OAISecurity::setCanWriteData(const bool &can_write_data) {
    m_can_write_data = can_write_data;
    m_can_write_data_isSet = true;
}

bool OAISecurity::is_can_write_data_Set() const{
    return m_can_write_data_isSet;
}

bool OAISecurity::is_can_write_data_Valid() const{
    return m_can_write_data_isValid;
}

bool OAISecurity::isHasAdmin() const {
    return m_has_admin;
}
void OAISecurity::setHasAdmin(const bool &has_admin) {
    m_has_admin = has_admin;
    m_has_admin_isSet = true;
}

bool OAISecurity::is_has_admin_Set() const{
    return m_has_admin_isSet;
}

bool OAISecurity::is_has_admin_Valid() const{
    return m_has_admin_isValid;
}

QList<QString> OAISecurity::getRights() const {
    return m_rights;
}
void OAISecurity::setRights(const QList<QString> &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAISecurity::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAISecurity::is_rights_Valid() const{
    return m_rights_isValid;
}

OAIWebException OAISecurity::getWebException() const {
    return m_web_exception;
}
void OAISecurity::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAISecurity::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAISecurity::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAISecurity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_annotate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_execute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_subscribe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_subscribe_others_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_write_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
