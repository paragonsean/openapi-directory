/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttributeTemplateApi_H
#define OAI_OAIAttributeTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributeTemplate.h"
#include "OAIItems_AttributeCategory.h"
#include "OAIItems_AttributeTemplate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttributeTemplateApi : public QObject {
    Q_OBJECT

public:
    OAIAttributeTemplateApi(const int timeOut = 0);
    ~OAIAttributeTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIAttributeTemplate [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeTemplateCreateAttributeTemplate(const QString &web_id, const OAIAttributeTemplate &r_template, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void attributeTemplateDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeTemplateGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeTemplateGetAttributeTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeTemplateGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeTemplateGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIAttributeTemplate [required]
    */
    virtual void attributeTemplateUpdate(const QString &web_id, const OAIAttributeTemplate &r_template);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attributeTemplateCreateAttributeTemplateCallback(OAIHttpRequestWorker *worker);
    void attributeTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void attributeTemplateGetCallback(OAIHttpRequestWorker *worker);
    void attributeTemplateGetAttributeTemplatesCallback(OAIHttpRequestWorker *worker);
    void attributeTemplateGetByPathCallback(OAIHttpRequestWorker *worker);
    void attributeTemplateGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void attributeTemplateUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attributeTemplateCreateAttributeTemplateSignal();
    void attributeTemplateDeleteSignal();
    void attributeTemplateGetSignal(OAIAttributeTemplate summary);
    void attributeTemplateGetAttributeTemplatesSignal(OAIItems_AttributeTemplate summary);
    void attributeTemplateGetByPathSignal(OAIAttributeTemplate summary);
    void attributeTemplateGetCategoriesSignal(OAIItems_AttributeCategory summary);
    void attributeTemplateUpdateSignal();


    void attributeTemplateCreateAttributeTemplateSignalFull(OAIHttpRequestWorker *worker);
    void attributeTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void attributeTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAIAttributeTemplate summary);
    void attributeTemplateGetAttributeTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AttributeTemplate summary);
    void attributeTemplateGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAttributeTemplate summary);
    void attributeTemplateGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AttributeCategory summary);
    void attributeTemplateUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use attributeTemplateCreateAttributeTemplateSignalError() instead")
    void attributeTemplateCreateAttributeTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateCreateAttributeTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateDeleteSignalError() instead")
    void attributeTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetSignalError() instead")
    void attributeTemplateGetSignalE(OAIAttributeTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetSignalError(OAIAttributeTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetAttributeTemplatesSignalError() instead")
    void attributeTemplateGetAttributeTemplatesSignalE(OAIItems_AttributeTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetAttributeTemplatesSignalError(OAIItems_AttributeTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetByPathSignalError() instead")
    void attributeTemplateGetByPathSignalE(OAIAttributeTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetByPathSignalError(OAIAttributeTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetCategoriesSignalError() instead")
    void attributeTemplateGetCategoriesSignalE(OAIItems_AttributeCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetCategoriesSignalError(OAIItems_AttributeCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateUpdateSignalError() instead")
    void attributeTemplateUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attributeTemplateCreateAttributeTemplateSignalErrorFull() instead")
    void attributeTemplateCreateAttributeTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateCreateAttributeTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateDeleteSignalErrorFull() instead")
    void attributeTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetSignalErrorFull() instead")
    void attributeTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetAttributeTemplatesSignalErrorFull() instead")
    void attributeTemplateGetAttributeTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetAttributeTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetByPathSignalErrorFull() instead")
    void attributeTemplateGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateGetCategoriesSignalErrorFull() instead")
    void attributeTemplateGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTemplateUpdateSignalErrorFull() instead")
    void attributeTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
