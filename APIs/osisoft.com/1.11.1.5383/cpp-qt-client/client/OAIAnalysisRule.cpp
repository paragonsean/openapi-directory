/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisRule::OAIAnalysisRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisRule::OAIAnalysisRule() {
    this->initializeModel();
}

OAIAnalysisRule::~OAIAnalysisRule() {}

void OAIAnalysisRule::initializeModel() {

    m_config_string_isSet = false;
    m_config_string_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_string_isSet = false;
    m_display_string_isValid = false;

    m_editor_type_isSet = false;
    m_editor_type_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_configured_isSet = false;
    m_is_configured_isValid = false;

    m_is_initializing_isSet = false;
    m_is_initializing_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_plug_in_name_isSet = false;
    m_plug_in_name_isValid = false;

    m_supported_behaviors_isSet = false;
    m_supported_behaviors_isValid = false;

    m_variable_mapping_isSet = false;
    m_variable_mapping_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIAnalysisRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisRule::fromJsonObject(QJsonObject json) {

    m_config_string_isValid = ::OpenAPI::fromJsonValue(m_config_string, json[QString("ConfigString")]);
    m_config_string_isSet = !json[QString("ConfigString")].isNull() && m_config_string_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_string_isValid = ::OpenAPI::fromJsonValue(m_display_string, json[QString("DisplayString")]);
    m_display_string_isSet = !json[QString("DisplayString")].isNull() && m_display_string_isValid;

    m_editor_type_isValid = ::OpenAPI::fromJsonValue(m_editor_type, json[QString("EditorType")]);
    m_editor_type_isSet = !json[QString("EditorType")].isNull() && m_editor_type_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("HasChildren")]);
    m_has_children_isSet = !json[QString("HasChildren")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_configured_isValid = ::OpenAPI::fromJsonValue(m_is_configured, json[QString("IsConfigured")]);
    m_is_configured_isSet = !json[QString("IsConfigured")].isNull() && m_is_configured_isValid;

    m_is_initializing_isValid = ::OpenAPI::fromJsonValue(m_is_initializing, json[QString("IsInitializing")]);
    m_is_initializing_isSet = !json[QString("IsInitializing")].isNull() && m_is_initializing_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_plug_in_name_isValid = ::OpenAPI::fromJsonValue(m_plug_in_name, json[QString("PlugInName")]);
    m_plug_in_name_isSet = !json[QString("PlugInName")].isNull() && m_plug_in_name_isValid;

    m_supported_behaviors_isValid = ::OpenAPI::fromJsonValue(m_supported_behaviors, json[QString("SupportedBehaviors")]);
    m_supported_behaviors_isSet = !json[QString("SupportedBehaviors")].isNull() && m_supported_behaviors_isValid;

    m_variable_mapping_isValid = ::OpenAPI::fromJsonValue(m_variable_mapping, json[QString("VariableMapping")]);
    m_variable_mapping_isSet = !json[QString("VariableMapping")].isNull() && m_variable_mapping_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIAnalysisRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisRule::asJsonObject() const {
    QJsonObject obj;
    if (m_config_string_isSet) {
        obj.insert(QString("ConfigString"), ::OpenAPI::toJsonValue(m_config_string));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_string_isSet) {
        obj.insert(QString("DisplayString"), ::OpenAPI::toJsonValue(m_display_string));
    }
    if (m_editor_type_isSet) {
        obj.insert(QString("EditorType"), ::OpenAPI::toJsonValue(m_editor_type));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("HasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_configured_isSet) {
        obj.insert(QString("IsConfigured"), ::OpenAPI::toJsonValue(m_is_configured));
    }
    if (m_is_initializing_isSet) {
        obj.insert(QString("IsInitializing"), ::OpenAPI::toJsonValue(m_is_initializing));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_plug_in_name_isSet) {
        obj.insert(QString("PlugInName"), ::OpenAPI::toJsonValue(m_plug_in_name));
    }
    if (m_supported_behaviors.size() > 0) {
        obj.insert(QString("SupportedBehaviors"), ::OpenAPI::toJsonValue(m_supported_behaviors));
    }
    if (m_variable_mapping_isSet) {
        obj.insert(QString("VariableMapping"), ::OpenAPI::toJsonValue(m_variable_mapping));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QString OAIAnalysisRule::getConfigString() const {
    return m_config_string;
}
void OAIAnalysisRule::setConfigString(const QString &config_string) {
    m_config_string = config_string;
    m_config_string_isSet = true;
}

bool OAIAnalysisRule::is_config_string_Set() const{
    return m_config_string_isSet;
}

bool OAIAnalysisRule::is_config_string_Valid() const{
    return m_config_string_isValid;
}

QString OAIAnalysisRule::getDescription() const {
    return m_description;
}
void OAIAnalysisRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnalysisRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnalysisRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAnalysisRule::getDisplayString() const {
    return m_display_string;
}
void OAIAnalysisRule::setDisplayString(const QString &display_string) {
    m_display_string = display_string;
    m_display_string_isSet = true;
}

bool OAIAnalysisRule::is_display_string_Set() const{
    return m_display_string_isSet;
}

bool OAIAnalysisRule::is_display_string_Valid() const{
    return m_display_string_isValid;
}

QString OAIAnalysisRule::getEditorType() const {
    return m_editor_type;
}
void OAIAnalysisRule::setEditorType(const QString &editor_type) {
    m_editor_type = editor_type;
    m_editor_type_isSet = true;
}

bool OAIAnalysisRule::is_editor_type_Set() const{
    return m_editor_type_isSet;
}

bool OAIAnalysisRule::is_editor_type_Valid() const{
    return m_editor_type_isValid;
}

bool OAIAnalysisRule::isHasChildren() const {
    return m_has_children;
}
void OAIAnalysisRule::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIAnalysisRule::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIAnalysisRule::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAIAnalysisRule::getId() const {
    return m_id;
}
void OAIAnalysisRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnalysisRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnalysisRule::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAnalysisRule::isIsConfigured() const {
    return m_is_configured;
}
void OAIAnalysisRule::setIsConfigured(const bool &is_configured) {
    m_is_configured = is_configured;
    m_is_configured_isSet = true;
}

bool OAIAnalysisRule::is_is_configured_Set() const{
    return m_is_configured_isSet;
}

bool OAIAnalysisRule::is_is_configured_Valid() const{
    return m_is_configured_isValid;
}

bool OAIAnalysisRule::isIsInitializing() const {
    return m_is_initializing;
}
void OAIAnalysisRule::setIsInitializing(const bool &is_initializing) {
    m_is_initializing = is_initializing;
    m_is_initializing_isSet = true;
}

bool OAIAnalysisRule::is_is_initializing_Set() const{
    return m_is_initializing_isSet;
}

bool OAIAnalysisRule::is_is_initializing_Valid() const{
    return m_is_initializing_isValid;
}

OAIAnalysisRuleLinks OAIAnalysisRule::getLinks() const {
    return m_links;
}
void OAIAnalysisRule::setLinks(const OAIAnalysisRuleLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAnalysisRule::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAnalysisRule::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIAnalysisRule::getName() const {
    return m_name;
}
void OAIAnalysisRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysisRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysisRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnalysisRule::getPath() const {
    return m_path;
}
void OAIAnalysisRule::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAnalysisRule::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAnalysisRule::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAnalysisRule::getPlugInName() const {
    return m_plug_in_name;
}
void OAIAnalysisRule::setPlugInName(const QString &plug_in_name) {
    m_plug_in_name = plug_in_name;
    m_plug_in_name_isSet = true;
}

bool OAIAnalysisRule::is_plug_in_name_Set() const{
    return m_plug_in_name_isSet;
}

bool OAIAnalysisRule::is_plug_in_name_Valid() const{
    return m_plug_in_name_isValid;
}

QList<QString> OAIAnalysisRule::getSupportedBehaviors() const {
    return m_supported_behaviors;
}
void OAIAnalysisRule::setSupportedBehaviors(const QList<QString> &supported_behaviors) {
    m_supported_behaviors = supported_behaviors;
    m_supported_behaviors_isSet = true;
}

bool OAIAnalysisRule::is_supported_behaviors_Set() const{
    return m_supported_behaviors_isSet;
}

bool OAIAnalysisRule::is_supported_behaviors_Valid() const{
    return m_supported_behaviors_isValid;
}

QString OAIAnalysisRule::getVariableMapping() const {
    return m_variable_mapping;
}
void OAIAnalysisRule::setVariableMapping(const QString &variable_mapping) {
    m_variable_mapping = variable_mapping;
    m_variable_mapping_isSet = true;
}

bool OAIAnalysisRule::is_variable_mapping_Set() const{
    return m_variable_mapping_isSet;
}

bool OAIAnalysisRule::is_variable_mapping_Valid() const{
    return m_variable_mapping_isValid;
}

OAIWebException OAIAnalysisRule::getWebException() const {
    return m_web_exception;
}
void OAIAnalysisRule::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIAnalysisRule::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIAnalysisRule::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIAnalysisRule::getWebId() const {
    return m_web_id;
}
void OAIAnalysisRule::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIAnalysisRule::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIAnalysisRule::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIAnalysisRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_initializing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_in_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_behaviors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_mapping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
