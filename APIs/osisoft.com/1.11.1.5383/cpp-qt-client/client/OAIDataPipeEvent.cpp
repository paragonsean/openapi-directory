/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPipeEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPipeEvent::OAIDataPipeEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPipeEvent::OAIDataPipeEvent() {
    this->initializeModel();
}

OAIDataPipeEvent::~OAIDataPipeEvent() {}

void OAIDataPipeEvent::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_annotated_isSet = false;
    m_annotated_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_good_isSet = false;
    m_good_isValid = false;

    m_previous_event_action_isSet = false;
    m_previous_event_action_isValid = false;

    m_questionable_isSet = false;
    m_questionable_isValid = false;

    m_substituted_isSet = false;
    m_substituted_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_units_abbreviation_isSet = false;
    m_units_abbreviation_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIDataPipeEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPipeEvent::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_annotated_isValid = ::OpenAPI::fromJsonValue(m_annotated, json[QString("Annotated")]);
    m_annotated_isSet = !json[QString("Annotated")].isNull() && m_annotated_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_good_isValid = ::OpenAPI::fromJsonValue(m_good, json[QString("Good")]);
    m_good_isSet = !json[QString("Good")].isNull() && m_good_isValid;

    m_previous_event_action_isValid = ::OpenAPI::fromJsonValue(m_previous_event_action, json[QString("PreviousEventAction")]);
    m_previous_event_action_isSet = !json[QString("PreviousEventAction")].isNull() && m_previous_event_action_isValid;

    m_questionable_isValid = ::OpenAPI::fromJsonValue(m_questionable, json[QString("Questionable")]);
    m_questionable_isSet = !json[QString("Questionable")].isNull() && m_questionable_isValid;

    m_substituted_isValid = ::OpenAPI::fromJsonValue(m_substituted, json[QString("Substituted")]);
    m_substituted_isSet = !json[QString("Substituted")].isNull() && m_substituted_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_units_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_units_abbreviation, json[QString("UnitsAbbreviation")]);
    m_units_abbreviation_isSet = !json[QString("UnitsAbbreviation")].isNull() && m_units_abbreviation_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIDataPipeEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPipeEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_annotated_isSet) {
        obj.insert(QString("Annotated"), ::OpenAPI::toJsonValue(m_annotated));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_good_isSet) {
        obj.insert(QString("Good"), ::OpenAPI::toJsonValue(m_good));
    }
    if (m_previous_event_action_isSet) {
        obj.insert(QString("PreviousEventAction"), ::OpenAPI::toJsonValue(m_previous_event_action));
    }
    if (m_questionable_isSet) {
        obj.insert(QString("Questionable"), ::OpenAPI::toJsonValue(m_questionable));
    }
    if (m_substituted_isSet) {
        obj.insert(QString("Substituted"), ::OpenAPI::toJsonValue(m_substituted));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_units_abbreviation_isSet) {
        obj.insert(QString("UnitsAbbreviation"), ::OpenAPI::toJsonValue(m_units_abbreviation));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIDataPipeEvent::getAction() const {
    return m_action;
}
void OAIDataPipeEvent::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDataPipeEvent::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDataPipeEvent::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIDataPipeEvent::isAnnotated() const {
    return m_annotated;
}
void OAIDataPipeEvent::setAnnotated(const bool &annotated) {
    m_annotated = annotated;
    m_annotated_isSet = true;
}

bool OAIDataPipeEvent::is_annotated_Set() const{
    return m_annotated_isSet;
}

bool OAIDataPipeEvent::is_annotated_Valid() const{
    return m_annotated_isValid;
}

QList<OAIPropertyError> OAIDataPipeEvent::getErrors() const {
    return m_errors;
}
void OAIDataPipeEvent::setErrors(const QList<OAIPropertyError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDataPipeEvent::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDataPipeEvent::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIDataPipeEvent::isGood() const {
    return m_good;
}
void OAIDataPipeEvent::setGood(const bool &good) {
    m_good = good;
    m_good_isSet = true;
}

bool OAIDataPipeEvent::is_good_Set() const{
    return m_good_isSet;
}

bool OAIDataPipeEvent::is_good_Valid() const{
    return m_good_isValid;
}

QString OAIDataPipeEvent::getPreviousEventAction() const {
    return m_previous_event_action;
}
void OAIDataPipeEvent::setPreviousEventAction(const QString &previous_event_action) {
    m_previous_event_action = previous_event_action;
    m_previous_event_action_isSet = true;
}

bool OAIDataPipeEvent::is_previous_event_action_Set() const{
    return m_previous_event_action_isSet;
}

bool OAIDataPipeEvent::is_previous_event_action_Valid() const{
    return m_previous_event_action_isValid;
}

bool OAIDataPipeEvent::isQuestionable() const {
    return m_questionable;
}
void OAIDataPipeEvent::setQuestionable(const bool &questionable) {
    m_questionable = questionable;
    m_questionable_isSet = true;
}

bool OAIDataPipeEvent::is_questionable_Set() const{
    return m_questionable_isSet;
}

bool OAIDataPipeEvent::is_questionable_Valid() const{
    return m_questionable_isValid;
}

bool OAIDataPipeEvent::isSubstituted() const {
    return m_substituted;
}
void OAIDataPipeEvent::setSubstituted(const bool &substituted) {
    m_substituted = substituted;
    m_substituted_isSet = true;
}

bool OAIDataPipeEvent::is_substituted_Set() const{
    return m_substituted_isSet;
}

bool OAIDataPipeEvent::is_substituted_Valid() const{
    return m_substituted_isValid;
}

QDateTime OAIDataPipeEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIDataPipeEvent::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDataPipeEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDataPipeEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIDataPipeEvent::getUnitsAbbreviation() const {
    return m_units_abbreviation;
}
void OAIDataPipeEvent::setUnitsAbbreviation(const QString &units_abbreviation) {
    m_units_abbreviation = units_abbreviation;
    m_units_abbreviation_isSet = true;
}

bool OAIDataPipeEvent::is_units_abbreviation_Set() const{
    return m_units_abbreviation_isSet;
}

bool OAIDataPipeEvent::is_units_abbreviation_Valid() const{
    return m_units_abbreviation_isValid;
}

OAIObject OAIDataPipeEvent::getValue() const {
    return m_value;
}
void OAIDataPipeEvent::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDataPipeEvent::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDataPipeEvent::is_value_Valid() const{
    return m_value_isValid;
}

OAIWebException OAIDataPipeEvent::getWebException() const {
    return m_web_exception;
}
void OAIDataPipeEvent::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIDataPipeEvent::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIDataPipeEvent::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIDataPipeEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_event_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questionable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substituted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPipeEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
