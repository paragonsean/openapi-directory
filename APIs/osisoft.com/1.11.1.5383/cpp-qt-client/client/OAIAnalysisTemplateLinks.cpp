/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisTemplateLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisTemplateLinks::OAIAnalysisTemplateLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisTemplateLinks::OAIAnalysisTemplateLinks() {
    this->initializeModel();
}

OAIAnalysisTemplateLinks::~OAIAnalysisTemplateLinks() {}

void OAIAnalysisTemplateLinks::initializeModel() {

    m_analysis_rule_isSet = false;
    m_analysis_rule_isValid = false;

    m_analysis_rule_plug_in_isSet = false;
    m_analysis_rule_plug_in_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_security_entries_isSet = false;
    m_security_entries_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_time_rule_isSet = false;
    m_time_rule_isValid = false;

    m_time_rule_plug_in_isSet = false;
    m_time_rule_plug_in_isValid = false;
}

void OAIAnalysisTemplateLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisTemplateLinks::fromJsonObject(QJsonObject json) {

    m_analysis_rule_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule, json[QString("AnalysisRule")]);
    m_analysis_rule_isSet = !json[QString("AnalysisRule")].isNull() && m_analysis_rule_isValid;

    m_analysis_rule_plug_in_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule_plug_in, json[QString("AnalysisRulePlugIn")]);
    m_analysis_rule_plug_in_isSet = !json[QString("AnalysisRulePlugIn")].isNull() && m_analysis_rule_plug_in_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_security_entries_isValid = ::OpenAPI::fromJsonValue(m_security_entries, json[QString("SecurityEntries")]);
    m_security_entries_isSet = !json[QString("SecurityEntries")].isNull() && m_security_entries_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_time_rule_isValid = ::OpenAPI::fromJsonValue(m_time_rule, json[QString("TimeRule")]);
    m_time_rule_isSet = !json[QString("TimeRule")].isNull() && m_time_rule_isValid;

    m_time_rule_plug_in_isValid = ::OpenAPI::fromJsonValue(m_time_rule_plug_in, json[QString("TimeRulePlugIn")]);
    m_time_rule_plug_in_isSet = !json[QString("TimeRulePlugIn")].isNull() && m_time_rule_plug_in_isValid;
}

QString OAIAnalysisTemplateLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisTemplateLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_rule_isSet) {
        obj.insert(QString("AnalysisRule"), ::OpenAPI::toJsonValue(m_analysis_rule));
    }
    if (m_analysis_rule_plug_in_isSet) {
        obj.insert(QString("AnalysisRulePlugIn"), ::OpenAPI::toJsonValue(m_analysis_rule_plug_in));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_security_isSet) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_security_entries_isSet) {
        obj.insert(QString("SecurityEntries"), ::OpenAPI::toJsonValue(m_security_entries));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_time_rule_isSet) {
        obj.insert(QString("TimeRule"), ::OpenAPI::toJsonValue(m_time_rule));
    }
    if (m_time_rule_plug_in_isSet) {
        obj.insert(QString("TimeRulePlugIn"), ::OpenAPI::toJsonValue(m_time_rule_plug_in));
    }
    return obj;
}

QString OAIAnalysisTemplateLinks::getAnalysisRule() const {
    return m_analysis_rule;
}
void OAIAnalysisTemplateLinks::setAnalysisRule(const QString &analysis_rule) {
    m_analysis_rule = analysis_rule;
    m_analysis_rule_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_analysis_rule_Set() const{
    return m_analysis_rule_isSet;
}

bool OAIAnalysisTemplateLinks::is_analysis_rule_Valid() const{
    return m_analysis_rule_isValid;
}

QString OAIAnalysisTemplateLinks::getAnalysisRulePlugIn() const {
    return m_analysis_rule_plug_in;
}
void OAIAnalysisTemplateLinks::setAnalysisRulePlugIn(const QString &analysis_rule_plug_in) {
    m_analysis_rule_plug_in = analysis_rule_plug_in;
    m_analysis_rule_plug_in_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_analysis_rule_plug_in_Set() const{
    return m_analysis_rule_plug_in_isSet;
}

bool OAIAnalysisTemplateLinks::is_analysis_rule_plug_in_Valid() const{
    return m_analysis_rule_plug_in_isValid;
}

QString OAIAnalysisTemplateLinks::getCategories() const {
    return m_categories;
}
void OAIAnalysisTemplateLinks::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIAnalysisTemplateLinks::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIAnalysisTemplateLinks::getDatabase() const {
    return m_database;
}
void OAIAnalysisTemplateLinks::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_database_Set() const{
    return m_database_isSet;
}

bool OAIAnalysisTemplateLinks::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIAnalysisTemplateLinks::getSecurity() const {
    return m_security;
}
void OAIAnalysisTemplateLinks::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_security_Set() const{
    return m_security_isSet;
}

bool OAIAnalysisTemplateLinks::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIAnalysisTemplateLinks::getSecurityEntries() const {
    return m_security_entries;
}
void OAIAnalysisTemplateLinks::setSecurityEntries(const QString &security_entries) {
    m_security_entries = security_entries;
    m_security_entries_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_security_entries_Set() const{
    return m_security_entries_isSet;
}

bool OAIAnalysisTemplateLinks::is_security_entries_Valid() const{
    return m_security_entries_isValid;
}

QString OAIAnalysisTemplateLinks::getSelf() const {
    return m_self;
}
void OAIAnalysisTemplateLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAnalysisTemplateLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIAnalysisTemplateLinks::getTarget() const {
    return m_target;
}
void OAIAnalysisTemplateLinks::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAnalysisTemplateLinks::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIAnalysisTemplateLinks::getTimeRule() const {
    return m_time_rule;
}
void OAIAnalysisTemplateLinks::setTimeRule(const QString &time_rule) {
    m_time_rule = time_rule;
    m_time_rule_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_time_rule_Set() const{
    return m_time_rule_isSet;
}

bool OAIAnalysisTemplateLinks::is_time_rule_Valid() const{
    return m_time_rule_isValid;
}

QString OAIAnalysisTemplateLinks::getTimeRulePlugIn() const {
    return m_time_rule_plug_in;
}
void OAIAnalysisTemplateLinks::setTimeRulePlugIn(const QString &time_rule_plug_in) {
    m_time_rule_plug_in = time_rule_plug_in;
    m_time_rule_plug_in_isSet = true;
}

bool OAIAnalysisTemplateLinks::is_time_rule_plug_in_Set() const{
    return m_time_rule_plug_in_isSet;
}

bool OAIAnalysisTemplateLinks::is_time_rule_plug_in_Valid() const{
    return m_time_rule_plug_in_isValid;
}

bool OAIAnalysisTemplateLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_rule_plug_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_rule_plug_in_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisTemplateLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
