/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUnitClassApi_H
#define OAI_OAIUnitClassApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUnit.h"
#include "OAIUnitClass.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUnitClassApi : public QObject {
    Q_OBJECT

public:
    OAIUnitClassApi(const int timeOut = 0);
    ~OAIUnitClassApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  unit_dto OAIUnit [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitClassCreateUnit(const QString &web_id, const OAIUnit &unit_dto, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void unitClassDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitClassGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitClassGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitClassGetCanonicalUnit(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitClassGetUnits(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  unit_class_dto OAIUnitClass [required]
    */
    virtual void unitClassUpdate(const QString &web_id, const OAIUnitClass &unit_class_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void unitClassCreateUnitCallback(OAIHttpRequestWorker *worker);
    void unitClassDeleteCallback(OAIHttpRequestWorker *worker);
    void unitClassGetCallback(OAIHttpRequestWorker *worker);
    void unitClassGetByPathCallback(OAIHttpRequestWorker *worker);
    void unitClassGetCanonicalUnitCallback(OAIHttpRequestWorker *worker);
    void unitClassGetUnitsCallback(OAIHttpRequestWorker *worker);
    void unitClassUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void unitClassCreateUnitSignal();
    void unitClassDeleteSignal();
    void unitClassGetSignal(OAIUnitClass summary);
    void unitClassGetByPathSignal(OAIUnitClass summary);
    void unitClassGetCanonicalUnitSignal(OAIUnit summary);
    void unitClassGetUnitsSignal(OAIUnit summary);
    void unitClassUpdateSignal();


    void unitClassCreateUnitSignalFull(OAIHttpRequestWorker *worker);
    void unitClassDeleteSignalFull(OAIHttpRequestWorker *worker);
    void unitClassGetSignalFull(OAIHttpRequestWorker *worker, OAIUnitClass summary);
    void unitClassGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIUnitClass summary);
    void unitClassGetCanonicalUnitSignalFull(OAIHttpRequestWorker *worker, OAIUnit summary);
    void unitClassGetUnitsSignalFull(OAIHttpRequestWorker *worker, OAIUnit summary);
    void unitClassUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use unitClassCreateUnitSignalError() instead")
    void unitClassCreateUnitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassCreateUnitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassDeleteSignalError() instead")
    void unitClassDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetSignalError() instead")
    void unitClassGetSignalE(OAIUnitClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetSignalError(OAIUnitClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetByPathSignalError() instead")
    void unitClassGetByPathSignalE(OAIUnitClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetByPathSignalError(OAIUnitClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetCanonicalUnitSignalError() instead")
    void unitClassGetCanonicalUnitSignalE(OAIUnit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetCanonicalUnitSignalError(OAIUnit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetUnitsSignalError() instead")
    void unitClassGetUnitsSignalE(OAIUnit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetUnitsSignalError(OAIUnit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassUpdateSignalError() instead")
    void unitClassUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use unitClassCreateUnitSignalErrorFull() instead")
    void unitClassCreateUnitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassCreateUnitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassDeleteSignalErrorFull() instead")
    void unitClassDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetSignalErrorFull() instead")
    void unitClassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetByPathSignalErrorFull() instead")
    void unitClassGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetCanonicalUnitSignalErrorFull() instead")
    void unitClassGetCanonicalUnitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetCanonicalUnitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassGetUnitsSignalErrorFull() instead")
    void unitClassGetUnitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassGetUnitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitClassUpdateSignalErrorFull() instead")
    void unitClassUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitClassUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
