/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityEntry::OAISecurityEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityEntry::OAISecurityEntry() {
    this->initializeModel();
}

OAISecurityEntry::~OAISecurityEntry() {}

void OAISecurityEntry::initializeModel() {

    m_allow_rights_isSet = false;
    m_allow_rights_isValid = false;

    m_deny_rights_isSet = false;
    m_deny_rights_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_identity_name_isSet = false;
    m_security_identity_name_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAISecurityEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityEntry::fromJsonObject(QJsonObject json) {

    m_allow_rights_isValid = ::OpenAPI::fromJsonValue(m_allow_rights, json[QString("AllowRights")]);
    m_allow_rights_isSet = !json[QString("AllowRights")].isNull() && m_allow_rights_isValid;

    m_deny_rights_isValid = ::OpenAPI::fromJsonValue(m_deny_rights, json[QString("DenyRights")]);
    m_deny_rights_isSet = !json[QString("DenyRights")].isNull() && m_deny_rights_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_security_identity_name_isValid = ::OpenAPI::fromJsonValue(m_security_identity_name, json[QString("SecurityIdentityName")]);
    m_security_identity_name_isSet = !json[QString("SecurityIdentityName")].isNull() && m_security_identity_name_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAISecurityEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_rights.size() > 0) {
        obj.insert(QString("AllowRights"), ::OpenAPI::toJsonValue(m_allow_rights));
    }
    if (m_deny_rights.size() > 0) {
        obj.insert(QString("DenyRights"), ::OpenAPI::toJsonValue(m_deny_rights));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_identity_name_isSet) {
        obj.insert(QString("SecurityIdentityName"), ::OpenAPI::toJsonValue(m_security_identity_name));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QList<QString> OAISecurityEntry::getAllowRights() const {
    return m_allow_rights;
}
void OAISecurityEntry::setAllowRights(const QList<QString> &allow_rights) {
    m_allow_rights = allow_rights;
    m_allow_rights_isSet = true;
}

bool OAISecurityEntry::is_allow_rights_Set() const{
    return m_allow_rights_isSet;
}

bool OAISecurityEntry::is_allow_rights_Valid() const{
    return m_allow_rights_isValid;
}

QList<QString> OAISecurityEntry::getDenyRights() const {
    return m_deny_rights;
}
void OAISecurityEntry::setDenyRights(const QList<QString> &deny_rights) {
    m_deny_rights = deny_rights;
    m_deny_rights_isSet = true;
}

bool OAISecurityEntry::is_deny_rights_Set() const{
    return m_deny_rights_isSet;
}

bool OAISecurityEntry::is_deny_rights_Valid() const{
    return m_deny_rights_isValid;
}

OAISecurityEntryLinks OAISecurityEntry::getLinks() const {
    return m_links;
}
void OAISecurityEntry::setLinks(const OAISecurityEntryLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAISecurityEntry::is_links_Set() const{
    return m_links_isSet;
}

bool OAISecurityEntry::is_links_Valid() const{
    return m_links_isValid;
}

QString OAISecurityEntry::getName() const {
    return m_name;
}
void OAISecurityEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISecurityEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAISecurityEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISecurityEntry::getSecurityIdentityName() const {
    return m_security_identity_name;
}
void OAISecurityEntry::setSecurityIdentityName(const QString &security_identity_name) {
    m_security_identity_name = security_identity_name;
    m_security_identity_name_isSet = true;
}

bool OAISecurityEntry::is_security_identity_name_Set() const{
    return m_security_identity_name_isSet;
}

bool OAISecurityEntry::is_security_identity_name_Valid() const{
    return m_security_identity_name_isValid;
}

OAIWebException OAISecurityEntry::getWebException() const {
    return m_web_exception;
}
void OAISecurityEntry::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAISecurityEntry::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAISecurityEntry::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAISecurityEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_identity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
