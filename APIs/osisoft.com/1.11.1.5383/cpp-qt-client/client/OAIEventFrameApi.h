/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventFrameApi_H
#define OAI_OAIEventFrameApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnnotation.h"
#include "OAIAttribute.h"
#include "OAIErrors.h"
#include "OAIEventFrame.h"
#include "OAIItems_Annotation.h"
#include "OAIItems_Attribute.h"
#include "OAIItems_Element.h"
#include "OAIItems_ElementCategory.h"
#include "OAIItems_EventFrame.h"
#include "OAIItems_Item_EventFrame.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAIMediaMetadata.h"
#include "OAISearchByAttribute.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventFrameApi : public QObject {
    Q_OBJECT

public:
    OAIEventFrameApi(const int timeOut = 0);
    ~OAIEventFrameApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void eventFrameAcknowledge(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void eventFrameCaptureValues(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  annotation OAIAnnotation [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameCreateAnnotation(const QString &web_id, const OAIAnnotation &annotation, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  attribute OAIAttribute [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameCreateAttribute(const QString &web_id, const OAIAttribute &attribute, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  include_child_elements bool [optional]
    */
    virtual void eventFrameCreateConfig(const QString &web_id, const ::OpenAPI::OptionalParam<bool> &include_child_elements = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  event_frame OAIEventFrame [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameCreateEventFrame(const QString &web_id, const OAIEventFrame &event_frame, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query OAISearchByAttribute [required]
    * @param[in]  no_results bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameCreateSearchByAttribute(const OAISearchByAttribute &query, const ::OpenAPI::OptionalParam<bool> &no_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void eventFrameDelete(const QString &web_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  web_id QString [required]
    */
    virtual void eventFrameDeleteAnnotation(const QString &id, const QString &web_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  web_id QString [required]
    */
    virtual void eventFrameDeleteAnnotationAttachmentMediaById(const QString &id, const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void eventFrameDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  search_id QString [required]
    * @param[in]  can_be_acknowledged bool [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  is_acknowledged bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  referenced_element_name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  search_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  severity QList<QString> [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameExecuteSearchByAttribute(const QString &search_id, const ::OpenAPI::OptionalParam<bool> &can_be_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &severity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  attribute_category QString [optional]
    * @param[in]  attribute_description_filter QString [optional]
    * @param[in]  attribute_name_filter QString [optional]
    * @param[in]  attribute_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  event_frame_category QString [optional]
    * @param[in]  event_frame_description_filter QString [optional]
    * @param[in]  event_frame_name_filter QString [optional]
    * @param[in]  event_frame_template QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  referenced_element_name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  search_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameFindEventFrameAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetAnnotationAttachmentMediaMetadataById(const QString &id, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetAnnotationById(const QString &id, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetAnnotations(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  trait QList<QString> [optional]
    * @param[in]  trait_category QList<QString> [optional]
    * @param[in]  value_type QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &trait = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &trait_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &value_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  can_be_acknowledged bool [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  is_acknowledged bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  referenced_element_name_filter QString [optional]
    * @param[in]  referenced_element_template_name QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  search_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  severity QList<QString> [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetEventFrames(const QString &web_id, const ::OpenAPI::OptionalParam<bool> &can_be_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &severity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetEventFramesQuery(const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  as_parallel bool [optional]
    * @param[in]  include_mode QString [optional]
    * @param[in]  path QList<QString> [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id QList<QString> [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetMultiple(const ::OpenAPI::OptionalParam<bool> &as_parallel = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &path = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &web_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetReferencedElements(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void eventFrameGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  event_frame OAIEventFrame [required]
    */
    virtual void eventFrameUpdate(const QString &web_id, const OAIEventFrame &event_frame);

    /**
    * @param[in]  id QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  annotation OAIAnnotation [required]
    */
    virtual void eventFrameUpdateAnnotation(const QString &id, const QString &web_id, const OAIAnnotation &annotation);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void eventFrameUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventFrameAcknowledgeCallback(OAIHttpRequestWorker *worker);
    void eventFrameCaptureValuesCallback(OAIHttpRequestWorker *worker);
    void eventFrameCreateAnnotationCallback(OAIHttpRequestWorker *worker);
    void eventFrameCreateAttributeCallback(OAIHttpRequestWorker *worker);
    void eventFrameCreateConfigCallback(OAIHttpRequestWorker *worker);
    void eventFrameCreateEventFrameCallback(OAIHttpRequestWorker *worker);
    void eventFrameCreateSearchByAttributeCallback(OAIHttpRequestWorker *worker);
    void eventFrameCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void eventFrameDeleteCallback(OAIHttpRequestWorker *worker);
    void eventFrameDeleteAnnotationCallback(OAIHttpRequestWorker *worker);
    void eventFrameDeleteAnnotationAttachmentMediaByIdCallback(OAIHttpRequestWorker *worker);
    void eventFrameDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void eventFrameExecuteSearchByAttributeCallback(OAIHttpRequestWorker *worker);
    void eventFrameFindEventFrameAttributesCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetAnnotationByIdCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetAnnotationsCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetAttributesCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetByPathCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetEventFramesCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetEventFramesQueryCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetMultipleCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetReferencedElementsCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetSecurityCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void eventFrameGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void eventFrameUpdateCallback(OAIHttpRequestWorker *worker);
    void eventFrameUpdateAnnotationCallback(OAIHttpRequestWorker *worker);
    void eventFrameUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventFrameAcknowledgeSignal();
    void eventFrameCaptureValuesSignal();
    void eventFrameCreateAnnotationSignal();
    void eventFrameCreateAttributeSignal();
    void eventFrameCreateConfigSignal();
    void eventFrameCreateEventFrameSignal();
    void eventFrameCreateSearchByAttributeSignal(OAIItems_EventFrame summary);
    void eventFrameCreateSecurityEntrySignal();
    void eventFrameDeleteSignal();
    void eventFrameDeleteAnnotationSignal();
    void eventFrameDeleteAnnotationAttachmentMediaByIdSignal();
    void eventFrameDeleteSecurityEntrySignal();
    void eventFrameExecuteSearchByAttributeSignal(OAIItems_EventFrame summary);
    void eventFrameFindEventFrameAttributesSignal(OAIItems_Attribute summary);
    void eventFrameGetSignal(OAIEventFrame summary);
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdSignal(OAIMediaMetadata summary);
    void eventFrameGetAnnotationByIdSignal(OAIAnnotation summary);
    void eventFrameGetAnnotationsSignal(OAIItems_Annotation summary);
    void eventFrameGetAttributesSignal(OAIItems_Attribute summary);
    void eventFrameGetByPathSignal(OAIEventFrame summary);
    void eventFrameGetCategoriesSignal(OAIItems_ElementCategory summary);
    void eventFrameGetEventFramesSignal(OAIItems_EventFrame summary);
    void eventFrameGetEventFramesQuerySignal(OAIItems_EventFrame summary);
    void eventFrameGetMultipleSignal(OAIItems_Item_EventFrame summary);
    void eventFrameGetReferencedElementsSignal(OAIItems_Element summary);
    void eventFrameGetSecuritySignal(OAIItems_SecurityRights summary);
    void eventFrameGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void eventFrameGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void eventFrameUpdateSignal();
    void eventFrameUpdateAnnotationSignal();
    void eventFrameUpdateSecurityEntrySignal();


    void eventFrameAcknowledgeSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameCaptureValuesSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameCreateAnnotationSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameCreateAttributeSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameCreateConfigSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameCreateEventFrameSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameCreateSearchByAttributeSignalFull(OAIHttpRequestWorker *worker, OAIItems_EventFrame summary);
    void eventFrameCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void eventFrameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameDeleteAnnotationSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameDeleteAnnotationAttachmentMediaByIdSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void eventFrameExecuteSearchByAttributeSignalFull(OAIHttpRequestWorker *worker, OAIItems_EventFrame summary);
    void eventFrameFindEventFrameAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void eventFrameGetSignalFull(OAIHttpRequestWorker *worker, OAIEventFrame summary);
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalFull(OAIHttpRequestWorker *worker, OAIMediaMetadata summary);
    void eventFrameGetAnnotationByIdSignalFull(OAIHttpRequestWorker *worker, OAIAnnotation summary);
    void eventFrameGetAnnotationsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Annotation summary);
    void eventFrameGetAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void eventFrameGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIEventFrame summary);
    void eventFrameGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementCategory summary);
    void eventFrameGetEventFramesSignalFull(OAIHttpRequestWorker *worker, OAIItems_EventFrame summary);
    void eventFrameGetEventFramesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_EventFrame summary);
    void eventFrameGetMultipleSignalFull(OAIHttpRequestWorker *worker, OAIItems_Item_EventFrame summary);
    void eventFrameGetReferencedElementsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void eventFrameGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void eventFrameGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void eventFrameGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void eventFrameUpdateSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameUpdateAnnotationSignalFull(OAIHttpRequestWorker *worker);
    void eventFrameUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use eventFrameAcknowledgeSignalError() instead")
    void eventFrameAcknowledgeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameAcknowledgeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCaptureValuesSignalError() instead")
    void eventFrameCaptureValuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCaptureValuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateAnnotationSignalError() instead")
    void eventFrameCreateAnnotationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateAnnotationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateAttributeSignalError() instead")
    void eventFrameCreateAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateConfigSignalError() instead")
    void eventFrameCreateConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateEventFrameSignalError() instead")
    void eventFrameCreateEventFrameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateEventFrameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateSearchByAttributeSignalError() instead")
    void eventFrameCreateSearchByAttributeSignalE(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateSearchByAttributeSignalError(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateSecurityEntrySignalError() instead")
    void eventFrameCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteSignalError() instead")
    void eventFrameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteAnnotationSignalError() instead")
    void eventFrameDeleteAnnotationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteAnnotationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteAnnotationAttachmentMediaByIdSignalError() instead")
    void eventFrameDeleteAnnotationAttachmentMediaByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteAnnotationAttachmentMediaByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteSecurityEntrySignalError() instead")
    void eventFrameDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameExecuteSearchByAttributeSignalError() instead")
    void eventFrameExecuteSearchByAttributeSignalE(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameExecuteSearchByAttributeSignalError(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameFindEventFrameAttributesSignalError() instead")
    void eventFrameFindEventFrameAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameFindEventFrameAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSignalError() instead")
    void eventFrameGetSignalE(OAIEventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSignalError(OAIEventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalError() instead")
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalE(OAIMediaMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalError(OAIMediaMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAnnotationByIdSignalError() instead")
    void eventFrameGetAnnotationByIdSignalE(OAIAnnotation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAnnotationByIdSignalError(OAIAnnotation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAnnotationsSignalError() instead")
    void eventFrameGetAnnotationsSignalE(OAIItems_Annotation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAnnotationsSignalError(OAIItems_Annotation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAttributesSignalError() instead")
    void eventFrameGetAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetByPathSignalError() instead")
    void eventFrameGetByPathSignalE(OAIEventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetByPathSignalError(OAIEventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetCategoriesSignalError() instead")
    void eventFrameGetCategoriesSignalE(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetCategoriesSignalError(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetEventFramesSignalError() instead")
    void eventFrameGetEventFramesSignalE(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetEventFramesSignalError(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetEventFramesQuerySignalError() instead")
    void eventFrameGetEventFramesQuerySignalE(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetEventFramesQuerySignalError(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetMultipleSignalError() instead")
    void eventFrameGetMultipleSignalE(OAIItems_Item_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetMultipleSignalError(OAIItems_Item_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetReferencedElementsSignalError() instead")
    void eventFrameGetReferencedElementsSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetReferencedElementsSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSecuritySignalError() instead")
    void eventFrameGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSecurityEntriesSignalError() instead")
    void eventFrameGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSecurityEntryByNameSignalError() instead")
    void eventFrameGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameUpdateSignalError() instead")
    void eventFrameUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameUpdateAnnotationSignalError() instead")
    void eventFrameUpdateAnnotationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameUpdateAnnotationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameUpdateSecurityEntrySignalError() instead")
    void eventFrameUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventFrameAcknowledgeSignalErrorFull() instead")
    void eventFrameAcknowledgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameAcknowledgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCaptureValuesSignalErrorFull() instead")
    void eventFrameCaptureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCaptureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateAnnotationSignalErrorFull() instead")
    void eventFrameCreateAnnotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateAnnotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateAttributeSignalErrorFull() instead")
    void eventFrameCreateAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateConfigSignalErrorFull() instead")
    void eventFrameCreateConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateEventFrameSignalErrorFull() instead")
    void eventFrameCreateEventFrameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateEventFrameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateSearchByAttributeSignalErrorFull() instead")
    void eventFrameCreateSearchByAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateSearchByAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameCreateSecurityEntrySignalErrorFull() instead")
    void eventFrameCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteSignalErrorFull() instead")
    void eventFrameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteAnnotationSignalErrorFull() instead")
    void eventFrameDeleteAnnotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteAnnotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteAnnotationAttachmentMediaByIdSignalErrorFull() instead")
    void eventFrameDeleteAnnotationAttachmentMediaByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteAnnotationAttachmentMediaByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameDeleteSecurityEntrySignalErrorFull() instead")
    void eventFrameDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameExecuteSearchByAttributeSignalErrorFull() instead")
    void eventFrameExecuteSearchByAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameExecuteSearchByAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameFindEventFrameAttributesSignalErrorFull() instead")
    void eventFrameFindEventFrameAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameFindEventFrameAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSignalErrorFull() instead")
    void eventFrameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalErrorFull() instead")
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAnnotationAttachmentMediaMetadataByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAnnotationByIdSignalErrorFull() instead")
    void eventFrameGetAnnotationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAnnotationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAnnotationsSignalErrorFull() instead")
    void eventFrameGetAnnotationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAnnotationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetAttributesSignalErrorFull() instead")
    void eventFrameGetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetByPathSignalErrorFull() instead")
    void eventFrameGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetCategoriesSignalErrorFull() instead")
    void eventFrameGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetEventFramesSignalErrorFull() instead")
    void eventFrameGetEventFramesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetEventFramesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetEventFramesQuerySignalErrorFull() instead")
    void eventFrameGetEventFramesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetEventFramesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetMultipleSignalErrorFull() instead")
    void eventFrameGetMultipleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetMultipleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetReferencedElementsSignalErrorFull() instead")
    void eventFrameGetReferencedElementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetReferencedElementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSecuritySignalErrorFull() instead")
    void eventFrameGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSecurityEntriesSignalErrorFull() instead")
    void eventFrameGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameGetSecurityEntryByNameSignalErrorFull() instead")
    void eventFrameGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameUpdateSignalErrorFull() instead")
    void eventFrameUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameUpdateAnnotationSignalErrorFull() instead")
    void eventFrameUpdateAnnotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameUpdateAnnotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventFrameUpdateSecurityEntrySignalErrorFull() instead")
    void eventFrameUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventFrameUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
