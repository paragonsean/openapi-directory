/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssetServerApi_H
#define OAI_OAIAssetServerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssetDatabase.h"
#include "OAIAssetServer.h"
#include "OAIErrors.h"
#include "OAIItems_AnalysisRulePlugIn.h"
#include "OAIItems_AssetDatabase.h"
#include "OAIItems_AssetServer.h"
#include "OAIItems_NotificationContactTemplate.h"
#include "OAIItems_NotificationPlugIn.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityIdentity.h"
#include "OAIItems_SecurityMapping.h"
#include "OAIItems_SecurityRights.h"
#include "OAIItems_TimeRulePlugIn.h"
#include "OAIItems_UnitClass.h"
#include "OAINotificationContactTemplate.h"
#include "OAISecurityEntry.h"
#include "OAISecurityIdentity.h"
#include "OAISecurityMapping.h"
#include "OAIUnitClass.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssetServerApi : public QObject {
    Q_OBJECT

public:
    OAIAssetServerApi(const int timeOut = 0);
    ~OAIAssetServerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  database OAIAssetDatabase [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerCreateAssetDatabase(const QString &web_id, const OAIAssetDatabase &database, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_contact_template OAINotificationContactTemplate [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerCreateNotificationContactTemplate(const QString &web_id, const OAINotificationContactTemplate &notification_contact_template, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  security_item QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_identity OAISecurityIdentity [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerCreateSecurityIdentity(const QString &web_id, const OAISecurityIdentity &security_identity, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_mapping OAISecurityMapping [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerCreateSecurityMapping(const QString &web_id, const OAISecurityMapping &security_mapping, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  unit_class OAIUnitClass [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerCreateUnitClass(const QString &web_id, const OAIUnitClass &unit_class, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  security_item QString [optional]
    */
    virtual void assetServerDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetAnalysisRulePlugIns(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetByName(const QString &name, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetDatabases(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetNotificationContactTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetNotificationPlugIns(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_item QList<QString> [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetSecurity(const QString &web_id, const QList<QString> &security_item, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  security_item QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_item QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  field QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetSecurityIdentities(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetSecurityIdentitiesForUser(const QString &web_id, const QString &user_identity, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  field QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetSecurityMappings(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetTimeRulePlugIns(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerGetUnitClasses(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetServerList(const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  security_item QString [optional]
    */
    virtual void assetServerUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assetServerCreateAssetDatabaseCallback(OAIHttpRequestWorker *worker);
    void assetServerCreateNotificationContactTemplateCallback(OAIHttpRequestWorker *worker);
    void assetServerCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void assetServerCreateSecurityIdentityCallback(OAIHttpRequestWorker *worker);
    void assetServerCreateSecurityMappingCallback(OAIHttpRequestWorker *worker);
    void assetServerCreateUnitClassCallback(OAIHttpRequestWorker *worker);
    void assetServerDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void assetServerGetCallback(OAIHttpRequestWorker *worker);
    void assetServerGetAnalysisRulePlugInsCallback(OAIHttpRequestWorker *worker);
    void assetServerGetByNameCallback(OAIHttpRequestWorker *worker);
    void assetServerGetByPathCallback(OAIHttpRequestWorker *worker);
    void assetServerGetDatabasesCallback(OAIHttpRequestWorker *worker);
    void assetServerGetNotificationContactTemplatesCallback(OAIHttpRequestWorker *worker);
    void assetServerGetNotificationPlugInsCallback(OAIHttpRequestWorker *worker);
    void assetServerGetSecurityCallback(OAIHttpRequestWorker *worker);
    void assetServerGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void assetServerGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void assetServerGetSecurityIdentitiesCallback(OAIHttpRequestWorker *worker);
    void assetServerGetSecurityIdentitiesForUserCallback(OAIHttpRequestWorker *worker);
    void assetServerGetSecurityMappingsCallback(OAIHttpRequestWorker *worker);
    void assetServerGetTimeRulePlugInsCallback(OAIHttpRequestWorker *worker);
    void assetServerGetUnitClassesCallback(OAIHttpRequestWorker *worker);
    void assetServerListCallback(OAIHttpRequestWorker *worker);
    void assetServerUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assetServerCreateAssetDatabaseSignal();
    void assetServerCreateNotificationContactTemplateSignal();
    void assetServerCreateSecurityEntrySignal();
    void assetServerCreateSecurityIdentitySignal();
    void assetServerCreateSecurityMappingSignal();
    void assetServerCreateUnitClassSignal();
    void assetServerDeleteSecurityEntrySignal();
    void assetServerGetSignal(OAIAssetServer summary);
    void assetServerGetAnalysisRulePlugInsSignal(OAIItems_AnalysisRulePlugIn summary);
    void assetServerGetByNameSignal(OAIAssetServer summary);
    void assetServerGetByPathSignal(OAIAssetServer summary);
    void assetServerGetDatabasesSignal(OAIItems_AssetDatabase summary);
    void assetServerGetNotificationContactTemplatesSignal(OAIItems_NotificationContactTemplate summary);
    void assetServerGetNotificationPlugInsSignal(OAIItems_NotificationPlugIn summary);
    void assetServerGetSecuritySignal(OAIItems_SecurityRights summary);
    void assetServerGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void assetServerGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void assetServerGetSecurityIdentitiesSignal(OAIItems_SecurityIdentity summary);
    void assetServerGetSecurityIdentitiesForUserSignal(OAIItems_SecurityIdentity summary);
    void assetServerGetSecurityMappingsSignal(OAIItems_SecurityMapping summary);
    void assetServerGetTimeRulePlugInsSignal(OAIItems_TimeRulePlugIn summary);
    void assetServerGetUnitClassesSignal(OAIItems_UnitClass summary);
    void assetServerListSignal(OAIItems_AssetServer summary);
    void assetServerUpdateSecurityEntrySignal();


    void assetServerCreateAssetDatabaseSignalFull(OAIHttpRequestWorker *worker);
    void assetServerCreateNotificationContactTemplateSignalFull(OAIHttpRequestWorker *worker);
    void assetServerCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void assetServerCreateSecurityIdentitySignalFull(OAIHttpRequestWorker *worker);
    void assetServerCreateSecurityMappingSignalFull(OAIHttpRequestWorker *worker);
    void assetServerCreateUnitClassSignalFull(OAIHttpRequestWorker *worker);
    void assetServerDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void assetServerGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetServer summary);
    void assetServerGetAnalysisRulePlugInsSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisRulePlugIn summary);
    void assetServerGetByNameSignalFull(OAIHttpRequestWorker *worker, OAIAssetServer summary);
    void assetServerGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAssetServer summary);
    void assetServerGetDatabasesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AssetDatabase summary);
    void assetServerGetNotificationContactTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationContactTemplate summary);
    void assetServerGetNotificationPlugInsSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationPlugIn summary);
    void assetServerGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void assetServerGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void assetServerGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void assetServerGetSecurityIdentitiesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityIdentity summary);
    void assetServerGetSecurityIdentitiesForUserSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityIdentity summary);
    void assetServerGetSecurityMappingsSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityMapping summary);
    void assetServerGetTimeRulePlugInsSignalFull(OAIHttpRequestWorker *worker, OAIItems_TimeRulePlugIn summary);
    void assetServerGetUnitClassesSignalFull(OAIHttpRequestWorker *worker, OAIItems_UnitClass summary);
    void assetServerListSignalFull(OAIHttpRequestWorker *worker, OAIItems_AssetServer summary);
    void assetServerUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use assetServerCreateAssetDatabaseSignalError() instead")
    void assetServerCreateAssetDatabaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateAssetDatabaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateNotificationContactTemplateSignalError() instead")
    void assetServerCreateNotificationContactTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateNotificationContactTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateSecurityEntrySignalError() instead")
    void assetServerCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateSecurityIdentitySignalError() instead")
    void assetServerCreateSecurityIdentitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateSecurityIdentitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateSecurityMappingSignalError() instead")
    void assetServerCreateSecurityMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateSecurityMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateUnitClassSignalError() instead")
    void assetServerCreateUnitClassSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateUnitClassSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerDeleteSecurityEntrySignalError() instead")
    void assetServerDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSignalError() instead")
    void assetServerGetSignalE(OAIAssetServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSignalError(OAIAssetServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetAnalysisRulePlugInsSignalError() instead")
    void assetServerGetAnalysisRulePlugInsSignalE(OAIItems_AnalysisRulePlugIn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetAnalysisRulePlugInsSignalError(OAIItems_AnalysisRulePlugIn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetByNameSignalError() instead")
    void assetServerGetByNameSignalE(OAIAssetServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetByNameSignalError(OAIAssetServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetByPathSignalError() instead")
    void assetServerGetByPathSignalE(OAIAssetServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetByPathSignalError(OAIAssetServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetDatabasesSignalError() instead")
    void assetServerGetDatabasesSignalE(OAIItems_AssetDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetDatabasesSignalError(OAIItems_AssetDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetNotificationContactTemplatesSignalError() instead")
    void assetServerGetNotificationContactTemplatesSignalE(OAIItems_NotificationContactTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetNotificationContactTemplatesSignalError(OAIItems_NotificationContactTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetNotificationPlugInsSignalError() instead")
    void assetServerGetNotificationPlugInsSignalE(OAIItems_NotificationPlugIn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetNotificationPlugInsSignalError(OAIItems_NotificationPlugIn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecuritySignalError() instead")
    void assetServerGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityEntriesSignalError() instead")
    void assetServerGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityEntryByNameSignalError() instead")
    void assetServerGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityIdentitiesSignalError() instead")
    void assetServerGetSecurityIdentitiesSignalE(OAIItems_SecurityIdentity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityIdentitiesSignalError(OAIItems_SecurityIdentity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityIdentitiesForUserSignalError() instead")
    void assetServerGetSecurityIdentitiesForUserSignalE(OAIItems_SecurityIdentity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityIdentitiesForUserSignalError(OAIItems_SecurityIdentity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityMappingsSignalError() instead")
    void assetServerGetSecurityMappingsSignalE(OAIItems_SecurityMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityMappingsSignalError(OAIItems_SecurityMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetTimeRulePlugInsSignalError() instead")
    void assetServerGetTimeRulePlugInsSignalE(OAIItems_TimeRulePlugIn summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetTimeRulePlugInsSignalError(OAIItems_TimeRulePlugIn summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetUnitClassesSignalError() instead")
    void assetServerGetUnitClassesSignalE(OAIItems_UnitClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetUnitClassesSignalError(OAIItems_UnitClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerListSignalError() instead")
    void assetServerListSignalE(OAIItems_AssetServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerListSignalError(OAIItems_AssetServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerUpdateSecurityEntrySignalError() instead")
    void assetServerUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assetServerCreateAssetDatabaseSignalErrorFull() instead")
    void assetServerCreateAssetDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateAssetDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateNotificationContactTemplateSignalErrorFull() instead")
    void assetServerCreateNotificationContactTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateNotificationContactTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateSecurityEntrySignalErrorFull() instead")
    void assetServerCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateSecurityIdentitySignalErrorFull() instead")
    void assetServerCreateSecurityIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateSecurityIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateSecurityMappingSignalErrorFull() instead")
    void assetServerCreateSecurityMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateSecurityMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerCreateUnitClassSignalErrorFull() instead")
    void assetServerCreateUnitClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerCreateUnitClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerDeleteSecurityEntrySignalErrorFull() instead")
    void assetServerDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSignalErrorFull() instead")
    void assetServerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetAnalysisRulePlugInsSignalErrorFull() instead")
    void assetServerGetAnalysisRulePlugInsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetAnalysisRulePlugInsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetByNameSignalErrorFull() instead")
    void assetServerGetByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetByPathSignalErrorFull() instead")
    void assetServerGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetDatabasesSignalErrorFull() instead")
    void assetServerGetDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetNotificationContactTemplatesSignalErrorFull() instead")
    void assetServerGetNotificationContactTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetNotificationContactTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetNotificationPlugInsSignalErrorFull() instead")
    void assetServerGetNotificationPlugInsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetNotificationPlugInsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecuritySignalErrorFull() instead")
    void assetServerGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityEntriesSignalErrorFull() instead")
    void assetServerGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityEntryByNameSignalErrorFull() instead")
    void assetServerGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityIdentitiesSignalErrorFull() instead")
    void assetServerGetSecurityIdentitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityIdentitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityIdentitiesForUserSignalErrorFull() instead")
    void assetServerGetSecurityIdentitiesForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityIdentitiesForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetSecurityMappingsSignalErrorFull() instead")
    void assetServerGetSecurityMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetSecurityMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetTimeRulePlugInsSignalErrorFull() instead")
    void assetServerGetTimeRulePlugInsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetTimeRulePlugInsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerGetUnitClassesSignalErrorFull() instead")
    void assetServerGetUnitClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerGetUnitClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerListSignalErrorFull() instead")
    void assetServerListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetServerUpdateSecurityEntrySignalErrorFull() instead")
    void assetServerUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetServerUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
