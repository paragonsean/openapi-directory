/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElementTemplateLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElementTemplateLinks::OAIElementTemplateLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElementTemplateLinks::OAIElementTemplateLinks() {
    this->initializeModel();
}

OAIElementTemplateLinks::~OAIElementTemplateLinks() {}

void OAIElementTemplateLinks::initializeModel() {

    m_analysis_templates_isSet = false;
    m_analysis_templates_isValid = false;

    m_attribute_templates_isSet = false;
    m_attribute_templates_isValid = false;

    m_base_template_isSet = false;
    m_base_template_isValid = false;

    m_base_templates_isSet = false;
    m_base_templates_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_default_attribute_isSet = false;
    m_default_attribute_isValid = false;

    m_derived_templates_isSet = false;
    m_derived_templates_isValid = false;

    m_notification_rule_templates_isSet = false;
    m_notification_rule_templates_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_security_entries_isSet = false;
    m_security_entries_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIElementTemplateLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElementTemplateLinks::fromJsonObject(QJsonObject json) {

    m_analysis_templates_isValid = ::OpenAPI::fromJsonValue(m_analysis_templates, json[QString("AnalysisTemplates")]);
    m_analysis_templates_isSet = !json[QString("AnalysisTemplates")].isNull() && m_analysis_templates_isValid;

    m_attribute_templates_isValid = ::OpenAPI::fromJsonValue(m_attribute_templates, json[QString("AttributeTemplates")]);
    m_attribute_templates_isSet = !json[QString("AttributeTemplates")].isNull() && m_attribute_templates_isValid;

    m_base_template_isValid = ::OpenAPI::fromJsonValue(m_base_template, json[QString("BaseTemplate")]);
    m_base_template_isSet = !json[QString("BaseTemplate")].isNull() && m_base_template_isValid;

    m_base_templates_isValid = ::OpenAPI::fromJsonValue(m_base_templates, json[QString("BaseTemplates")]);
    m_base_templates_isSet = !json[QString("BaseTemplates")].isNull() && m_base_templates_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_default_attribute_isValid = ::OpenAPI::fromJsonValue(m_default_attribute, json[QString("DefaultAttribute")]);
    m_default_attribute_isSet = !json[QString("DefaultAttribute")].isNull() && m_default_attribute_isValid;

    m_derived_templates_isValid = ::OpenAPI::fromJsonValue(m_derived_templates, json[QString("DerivedTemplates")]);
    m_derived_templates_isSet = !json[QString("DerivedTemplates")].isNull() && m_derived_templates_isValid;

    m_notification_rule_templates_isValid = ::OpenAPI::fromJsonValue(m_notification_rule_templates, json[QString("NotificationRuleTemplates")]);
    m_notification_rule_templates_isSet = !json[QString("NotificationRuleTemplates")].isNull() && m_notification_rule_templates_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_security_entries_isValid = ::OpenAPI::fromJsonValue(m_security_entries, json[QString("SecurityEntries")]);
    m_security_entries_isSet = !json[QString("SecurityEntries")].isNull() && m_security_entries_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;
}

QString OAIElementTemplateLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElementTemplateLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_templates_isSet) {
        obj.insert(QString("AnalysisTemplates"), ::OpenAPI::toJsonValue(m_analysis_templates));
    }
    if (m_attribute_templates_isSet) {
        obj.insert(QString("AttributeTemplates"), ::OpenAPI::toJsonValue(m_attribute_templates));
    }
    if (m_base_template_isSet) {
        obj.insert(QString("BaseTemplate"), ::OpenAPI::toJsonValue(m_base_template));
    }
    if (m_base_templates_isSet) {
        obj.insert(QString("BaseTemplates"), ::OpenAPI::toJsonValue(m_base_templates));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_default_attribute_isSet) {
        obj.insert(QString("DefaultAttribute"), ::OpenAPI::toJsonValue(m_default_attribute));
    }
    if (m_derived_templates_isSet) {
        obj.insert(QString("DerivedTemplates"), ::OpenAPI::toJsonValue(m_derived_templates));
    }
    if (m_notification_rule_templates_isSet) {
        obj.insert(QString("NotificationRuleTemplates"), ::OpenAPI::toJsonValue(m_notification_rule_templates));
    }
    if (m_security_isSet) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_security_entries_isSet) {
        obj.insert(QString("SecurityEntries"), ::OpenAPI::toJsonValue(m_security_entries));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QString OAIElementTemplateLinks::getAnalysisTemplates() const {
    return m_analysis_templates;
}
void OAIElementTemplateLinks::setAnalysisTemplates(const QString &analysis_templates) {
    m_analysis_templates = analysis_templates;
    m_analysis_templates_isSet = true;
}

bool OAIElementTemplateLinks::is_analysis_templates_Set() const{
    return m_analysis_templates_isSet;
}

bool OAIElementTemplateLinks::is_analysis_templates_Valid() const{
    return m_analysis_templates_isValid;
}

QString OAIElementTemplateLinks::getAttributeTemplates() const {
    return m_attribute_templates;
}
void OAIElementTemplateLinks::setAttributeTemplates(const QString &attribute_templates) {
    m_attribute_templates = attribute_templates;
    m_attribute_templates_isSet = true;
}

bool OAIElementTemplateLinks::is_attribute_templates_Set() const{
    return m_attribute_templates_isSet;
}

bool OAIElementTemplateLinks::is_attribute_templates_Valid() const{
    return m_attribute_templates_isValid;
}

QString OAIElementTemplateLinks::getBaseTemplate() const {
    return m_base_template;
}
void OAIElementTemplateLinks::setBaseTemplate(const QString &base_template) {
    m_base_template = base_template;
    m_base_template_isSet = true;
}

bool OAIElementTemplateLinks::is_base_template_Set() const{
    return m_base_template_isSet;
}

bool OAIElementTemplateLinks::is_base_template_Valid() const{
    return m_base_template_isValid;
}

QString OAIElementTemplateLinks::getBaseTemplates() const {
    return m_base_templates;
}
void OAIElementTemplateLinks::setBaseTemplates(const QString &base_templates) {
    m_base_templates = base_templates;
    m_base_templates_isSet = true;
}

bool OAIElementTemplateLinks::is_base_templates_Set() const{
    return m_base_templates_isSet;
}

bool OAIElementTemplateLinks::is_base_templates_Valid() const{
    return m_base_templates_isValid;
}

QString OAIElementTemplateLinks::getCategories() const {
    return m_categories;
}
void OAIElementTemplateLinks::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIElementTemplateLinks::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIElementTemplateLinks::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIElementTemplateLinks::getDatabase() const {
    return m_database;
}
void OAIElementTemplateLinks::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIElementTemplateLinks::is_database_Set() const{
    return m_database_isSet;
}

bool OAIElementTemplateLinks::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIElementTemplateLinks::getDefaultAttribute() const {
    return m_default_attribute;
}
void OAIElementTemplateLinks::setDefaultAttribute(const QString &default_attribute) {
    m_default_attribute = default_attribute;
    m_default_attribute_isSet = true;
}

bool OAIElementTemplateLinks::is_default_attribute_Set() const{
    return m_default_attribute_isSet;
}

bool OAIElementTemplateLinks::is_default_attribute_Valid() const{
    return m_default_attribute_isValid;
}

QString OAIElementTemplateLinks::getDerivedTemplates() const {
    return m_derived_templates;
}
void OAIElementTemplateLinks::setDerivedTemplates(const QString &derived_templates) {
    m_derived_templates = derived_templates;
    m_derived_templates_isSet = true;
}

bool OAIElementTemplateLinks::is_derived_templates_Set() const{
    return m_derived_templates_isSet;
}

bool OAIElementTemplateLinks::is_derived_templates_Valid() const{
    return m_derived_templates_isValid;
}

QString OAIElementTemplateLinks::getNotificationRuleTemplates() const {
    return m_notification_rule_templates;
}
void OAIElementTemplateLinks::setNotificationRuleTemplates(const QString &notification_rule_templates) {
    m_notification_rule_templates = notification_rule_templates;
    m_notification_rule_templates_isSet = true;
}

bool OAIElementTemplateLinks::is_notification_rule_templates_Set() const{
    return m_notification_rule_templates_isSet;
}

bool OAIElementTemplateLinks::is_notification_rule_templates_Valid() const{
    return m_notification_rule_templates_isValid;
}

QString OAIElementTemplateLinks::getSecurity() const {
    return m_security;
}
void OAIElementTemplateLinks::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIElementTemplateLinks::is_security_Set() const{
    return m_security_isSet;
}

bool OAIElementTemplateLinks::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIElementTemplateLinks::getSecurityEntries() const {
    return m_security_entries;
}
void OAIElementTemplateLinks::setSecurityEntries(const QString &security_entries) {
    m_security_entries = security_entries;
    m_security_entries_isSet = true;
}

bool OAIElementTemplateLinks::is_security_entries_Set() const{
    return m_security_entries_isSet;
}

bool OAIElementTemplateLinks::is_security_entries_Valid() const{
    return m_security_entries_isValid;
}

QString OAIElementTemplateLinks::getSelf() const {
    return m_self;
}
void OAIElementTemplateLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIElementTemplateLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIElementTemplateLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIElementTemplateLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_rule_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElementTemplateLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
