/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeTrait.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeTrait::OAIAttributeTrait(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeTrait::OAIAttributeTrait() {
    this->initializeModel();
}

OAIAttributeTrait::~OAIAttributeTrait() {}

void OAIAttributeTrait::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_allow_child_attributes_isSet = false;
    m_allow_child_attributes_isValid = false;

    m_allow_duplicates_isSet = false;
    m_allow_duplicates_isValid = false;

    m_is_allowed_on_root_attribute_isSet = false;
    m_is_allowed_on_root_attribute_isValid = false;

    m_is_type_inherited_isSet = false;
    m_is_type_inherited_isValid = false;

    m_is_uom_inherited_isSet = false;
    m_is_uom_inherited_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_require_numeric_isSet = false;
    m_require_numeric_isValid = false;

    m_require_string_isSet = false;
    m_require_string_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIAttributeTrait::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeTrait::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("Abbreviation")]);
    m_abbreviation_isSet = !json[QString("Abbreviation")].isNull() && m_abbreviation_isValid;

    m_allow_child_attributes_isValid = ::OpenAPI::fromJsonValue(m_allow_child_attributes, json[QString("AllowChildAttributes")]);
    m_allow_child_attributes_isSet = !json[QString("AllowChildAttributes")].isNull() && m_allow_child_attributes_isValid;

    m_allow_duplicates_isValid = ::OpenAPI::fromJsonValue(m_allow_duplicates, json[QString("AllowDuplicates")]);
    m_allow_duplicates_isSet = !json[QString("AllowDuplicates")].isNull() && m_allow_duplicates_isValid;

    m_is_allowed_on_root_attribute_isValid = ::OpenAPI::fromJsonValue(m_is_allowed_on_root_attribute, json[QString("IsAllowedOnRootAttribute")]);
    m_is_allowed_on_root_attribute_isSet = !json[QString("IsAllowedOnRootAttribute")].isNull() && m_is_allowed_on_root_attribute_isValid;

    m_is_type_inherited_isValid = ::OpenAPI::fromJsonValue(m_is_type_inherited, json[QString("IsTypeInherited")]);
    m_is_type_inherited_isSet = !json[QString("IsTypeInherited")].isNull() && m_is_type_inherited_isValid;

    m_is_uom_inherited_isValid = ::OpenAPI::fromJsonValue(m_is_uom_inherited, json[QString("IsUOMInherited")]);
    m_is_uom_inherited_isSet = !json[QString("IsUOMInherited")].isNull() && m_is_uom_inherited_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_require_numeric_isValid = ::OpenAPI::fromJsonValue(m_require_numeric, json[QString("RequireNumeric")]);
    m_require_numeric_isSet = !json[QString("RequireNumeric")].isNull() && m_require_numeric_isValid;

    m_require_string_isValid = ::OpenAPI::fromJsonValue(m_require_string, json[QString("RequireString")]);
    m_require_string_isSet = !json[QString("RequireString")].isNull() && m_require_string_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIAttributeTrait::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeTrait::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("Abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_allow_child_attributes_isSet) {
        obj.insert(QString("AllowChildAttributes"), ::OpenAPI::toJsonValue(m_allow_child_attributes));
    }
    if (m_allow_duplicates_isSet) {
        obj.insert(QString("AllowDuplicates"), ::OpenAPI::toJsonValue(m_allow_duplicates));
    }
    if (m_is_allowed_on_root_attribute_isSet) {
        obj.insert(QString("IsAllowedOnRootAttribute"), ::OpenAPI::toJsonValue(m_is_allowed_on_root_attribute));
    }
    if (m_is_type_inherited_isSet) {
        obj.insert(QString("IsTypeInherited"), ::OpenAPI::toJsonValue(m_is_type_inherited));
    }
    if (m_is_uom_inherited_isSet) {
        obj.insert(QString("IsUOMInherited"), ::OpenAPI::toJsonValue(m_is_uom_inherited));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_require_numeric_isSet) {
        obj.insert(QString("RequireNumeric"), ::OpenAPI::toJsonValue(m_require_numeric));
    }
    if (m_require_string_isSet) {
        obj.insert(QString("RequireString"), ::OpenAPI::toJsonValue(m_require_string));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIAttributeTrait::getAbbreviation() const {
    return m_abbreviation;
}
void OAIAttributeTrait::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIAttributeTrait::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIAttributeTrait::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

bool OAIAttributeTrait::isAllowChildAttributes() const {
    return m_allow_child_attributes;
}
void OAIAttributeTrait::setAllowChildAttributes(const bool &allow_child_attributes) {
    m_allow_child_attributes = allow_child_attributes;
    m_allow_child_attributes_isSet = true;
}

bool OAIAttributeTrait::is_allow_child_attributes_Set() const{
    return m_allow_child_attributes_isSet;
}

bool OAIAttributeTrait::is_allow_child_attributes_Valid() const{
    return m_allow_child_attributes_isValid;
}

bool OAIAttributeTrait::isAllowDuplicates() const {
    return m_allow_duplicates;
}
void OAIAttributeTrait::setAllowDuplicates(const bool &allow_duplicates) {
    m_allow_duplicates = allow_duplicates;
    m_allow_duplicates_isSet = true;
}

bool OAIAttributeTrait::is_allow_duplicates_Set() const{
    return m_allow_duplicates_isSet;
}

bool OAIAttributeTrait::is_allow_duplicates_Valid() const{
    return m_allow_duplicates_isValid;
}

bool OAIAttributeTrait::isIsAllowedOnRootAttribute() const {
    return m_is_allowed_on_root_attribute;
}
void OAIAttributeTrait::setIsAllowedOnRootAttribute(const bool &is_allowed_on_root_attribute) {
    m_is_allowed_on_root_attribute = is_allowed_on_root_attribute;
    m_is_allowed_on_root_attribute_isSet = true;
}

bool OAIAttributeTrait::is_is_allowed_on_root_attribute_Set() const{
    return m_is_allowed_on_root_attribute_isSet;
}

bool OAIAttributeTrait::is_is_allowed_on_root_attribute_Valid() const{
    return m_is_allowed_on_root_attribute_isValid;
}

bool OAIAttributeTrait::isIsTypeInherited() const {
    return m_is_type_inherited;
}
void OAIAttributeTrait::setIsTypeInherited(const bool &is_type_inherited) {
    m_is_type_inherited = is_type_inherited;
    m_is_type_inherited_isSet = true;
}

bool OAIAttributeTrait::is_is_type_inherited_Set() const{
    return m_is_type_inherited_isSet;
}

bool OAIAttributeTrait::is_is_type_inherited_Valid() const{
    return m_is_type_inherited_isValid;
}

bool OAIAttributeTrait::isIsUomInherited() const {
    return m_is_uom_inherited;
}
void OAIAttributeTrait::setIsUomInherited(const bool &is_uom_inherited) {
    m_is_uom_inherited = is_uom_inherited;
    m_is_uom_inherited_isSet = true;
}

bool OAIAttributeTrait::is_is_uom_inherited_Set() const{
    return m_is_uom_inherited_isSet;
}

bool OAIAttributeTrait::is_is_uom_inherited_Valid() const{
    return m_is_uom_inherited_isValid;
}

OAIAttributeTraitLinks OAIAttributeTrait::getLinks() const {
    return m_links;
}
void OAIAttributeTrait::setLinks(const OAIAttributeTraitLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAttributeTrait::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAttributeTrait::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIAttributeTrait::getName() const {
    return m_name;
}
void OAIAttributeTrait::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttributeTrait::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttributeTrait::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAttributeTrait::isRequireNumeric() const {
    return m_require_numeric;
}
void OAIAttributeTrait::setRequireNumeric(const bool &require_numeric) {
    m_require_numeric = require_numeric;
    m_require_numeric_isSet = true;
}

bool OAIAttributeTrait::is_require_numeric_Set() const{
    return m_require_numeric_isSet;
}

bool OAIAttributeTrait::is_require_numeric_Valid() const{
    return m_require_numeric_isValid;
}

bool OAIAttributeTrait::isRequireString() const {
    return m_require_string;
}
void OAIAttributeTrait::setRequireString(const bool &require_string) {
    m_require_string = require_string;
    m_require_string_isSet = true;
}

bool OAIAttributeTrait::is_require_string_Set() const{
    return m_require_string_isSet;
}

bool OAIAttributeTrait::is_require_string_Valid() const{
    return m_require_string_isValid;
}

OAIWebException OAIAttributeTrait::getWebException() const {
    return m_web_exception;
}
void OAIAttributeTrait::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIAttributeTrait::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIAttributeTrait::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIAttributeTrait::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_child_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_duplicates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_allowed_on_root_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_type_inherited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_uom_inherited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_numeric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeTrait::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
