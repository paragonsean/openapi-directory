/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationPlugIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationPlugIn::OAINotificationPlugIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationPlugIn::OAINotificationPlugIn() {
    this->initializeModel();
}

OAINotificationPlugIn::~OAINotificationPlugIn() {}

void OAINotificationPlugIn::initializeModel() {

    m_assembly_file_name_isSet = false;
    m_assembly_file_name_isValid = false;

    m_assembly_id_isSet = false;
    m_assembly_id_isValid = false;

    m_assembly_load_properties_isSet = false;
    m_assembly_load_properties_isValid = false;

    m_assembly_time_isSet = false;
    m_assembly_time_isValid = false;

    m_compatibility_version_isSet = false;
    m_compatibility_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_browsable_isSet = false;
    m_is_browsable_isValid = false;

    m_is_non_editable_config_isSet = false;
    m_is_non_editable_config_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_loaded_assembly_time_isSet = false;
    m_loaded_assembly_time_isValid = false;

    m_loaded_version_isSet = false;
    m_loaded_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAINotificationPlugIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationPlugIn::fromJsonObject(QJsonObject json) {

    m_assembly_file_name_isValid = ::OpenAPI::fromJsonValue(m_assembly_file_name, json[QString("AssemblyFileName")]);
    m_assembly_file_name_isSet = !json[QString("AssemblyFileName")].isNull() && m_assembly_file_name_isValid;

    m_assembly_id_isValid = ::OpenAPI::fromJsonValue(m_assembly_id, json[QString("AssemblyID")]);
    m_assembly_id_isSet = !json[QString("AssemblyID")].isNull() && m_assembly_id_isValid;

    m_assembly_load_properties_isValid = ::OpenAPI::fromJsonValue(m_assembly_load_properties, json[QString("AssemblyLoadProperties")]);
    m_assembly_load_properties_isSet = !json[QString("AssemblyLoadProperties")].isNull() && m_assembly_load_properties_isValid;

    m_assembly_time_isValid = ::OpenAPI::fromJsonValue(m_assembly_time, json[QString("AssemblyTime")]);
    m_assembly_time_isSet = !json[QString("AssemblyTime")].isNull() && m_assembly_time_isValid;

    m_compatibility_version_isValid = ::OpenAPI::fromJsonValue(m_compatibility_version, json[QString("CompatibilityVersion")]);
    m_compatibility_version_isSet = !json[QString("CompatibilityVersion")].isNull() && m_compatibility_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_browsable_isValid = ::OpenAPI::fromJsonValue(m_is_browsable, json[QString("IsBrowsable")]);
    m_is_browsable_isSet = !json[QString("IsBrowsable")].isNull() && m_is_browsable_isValid;

    m_is_non_editable_config_isValid = ::OpenAPI::fromJsonValue(m_is_non_editable_config, json[QString("IsNonEditableConfig")]);
    m_is_non_editable_config_isSet = !json[QString("IsNonEditableConfig")].isNull() && m_is_non_editable_config_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_loaded_assembly_time_isValid = ::OpenAPI::fromJsonValue(m_loaded_assembly_time, json[QString("LoadedAssemblyTime")]);
    m_loaded_assembly_time_isSet = !json[QString("LoadedAssemblyTime")].isNull() && m_loaded_assembly_time_isValid;

    m_loaded_version_isValid = ::OpenAPI::fromJsonValue(m_loaded_version, json[QString("LoadedVersion")]);
    m_loaded_version_isSet = !json[QString("LoadedVersion")].isNull() && m_loaded_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAINotificationPlugIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationPlugIn::asJsonObject() const {
    QJsonObject obj;
    if (m_assembly_file_name_isSet) {
        obj.insert(QString("AssemblyFileName"), ::OpenAPI::toJsonValue(m_assembly_file_name));
    }
    if (m_assembly_id_isSet) {
        obj.insert(QString("AssemblyID"), ::OpenAPI::toJsonValue(m_assembly_id));
    }
    if (m_assembly_load_properties.size() > 0) {
        obj.insert(QString("AssemblyLoadProperties"), ::OpenAPI::toJsonValue(m_assembly_load_properties));
    }
    if (m_assembly_time_isSet) {
        obj.insert(QString("AssemblyTime"), ::OpenAPI::toJsonValue(m_assembly_time));
    }
    if (m_compatibility_version_isSet) {
        obj.insert(QString("CompatibilityVersion"), ::OpenAPI::toJsonValue(m_compatibility_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_browsable_isSet) {
        obj.insert(QString("IsBrowsable"), ::OpenAPI::toJsonValue(m_is_browsable));
    }
    if (m_is_non_editable_config_isSet) {
        obj.insert(QString("IsNonEditableConfig"), ::OpenAPI::toJsonValue(m_is_non_editable_config));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_loaded_assembly_time_isSet) {
        obj.insert(QString("LoadedAssemblyTime"), ::OpenAPI::toJsonValue(m_loaded_assembly_time));
    }
    if (m_loaded_version_isSet) {
        obj.insert(QString("LoadedVersion"), ::OpenAPI::toJsonValue(m_loaded_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QString OAINotificationPlugIn::getAssemblyFileName() const {
    return m_assembly_file_name;
}
void OAINotificationPlugIn::setAssemblyFileName(const QString &assembly_file_name) {
    m_assembly_file_name = assembly_file_name;
    m_assembly_file_name_isSet = true;
}

bool OAINotificationPlugIn::is_assembly_file_name_Set() const{
    return m_assembly_file_name_isSet;
}

bool OAINotificationPlugIn::is_assembly_file_name_Valid() const{
    return m_assembly_file_name_isValid;
}

QString OAINotificationPlugIn::getAssemblyId() const {
    return m_assembly_id;
}
void OAINotificationPlugIn::setAssemblyId(const QString &assembly_id) {
    m_assembly_id = assembly_id;
    m_assembly_id_isSet = true;
}

bool OAINotificationPlugIn::is_assembly_id_Set() const{
    return m_assembly_id_isSet;
}

bool OAINotificationPlugIn::is_assembly_id_Valid() const{
    return m_assembly_id_isValid;
}

QList<QString> OAINotificationPlugIn::getAssemblyLoadProperties() const {
    return m_assembly_load_properties;
}
void OAINotificationPlugIn::setAssemblyLoadProperties(const QList<QString> &assembly_load_properties) {
    m_assembly_load_properties = assembly_load_properties;
    m_assembly_load_properties_isSet = true;
}

bool OAINotificationPlugIn::is_assembly_load_properties_Set() const{
    return m_assembly_load_properties_isSet;
}

bool OAINotificationPlugIn::is_assembly_load_properties_Valid() const{
    return m_assembly_load_properties_isValid;
}

QDateTime OAINotificationPlugIn::getAssemblyTime() const {
    return m_assembly_time;
}
void OAINotificationPlugIn::setAssemblyTime(const QDateTime &assembly_time) {
    m_assembly_time = assembly_time;
    m_assembly_time_isSet = true;
}

bool OAINotificationPlugIn::is_assembly_time_Set() const{
    return m_assembly_time_isSet;
}

bool OAINotificationPlugIn::is_assembly_time_Valid() const{
    return m_assembly_time_isValid;
}

qint32 OAINotificationPlugIn::getCompatibilityVersion() const {
    return m_compatibility_version;
}
void OAINotificationPlugIn::setCompatibilityVersion(const qint32 &compatibility_version) {
    m_compatibility_version = compatibility_version;
    m_compatibility_version_isSet = true;
}

bool OAINotificationPlugIn::is_compatibility_version_Set() const{
    return m_compatibility_version_isSet;
}

bool OAINotificationPlugIn::is_compatibility_version_Valid() const{
    return m_compatibility_version_isValid;
}

QString OAINotificationPlugIn::getDescription() const {
    return m_description;
}
void OAINotificationPlugIn::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationPlugIn::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationPlugIn::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINotificationPlugIn::getId() const {
    return m_id;
}
void OAINotificationPlugIn::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationPlugIn::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationPlugIn::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINotificationPlugIn::isIsBrowsable() const {
    return m_is_browsable;
}
void OAINotificationPlugIn::setIsBrowsable(const bool &is_browsable) {
    m_is_browsable = is_browsable;
    m_is_browsable_isSet = true;
}

bool OAINotificationPlugIn::is_is_browsable_Set() const{
    return m_is_browsable_isSet;
}

bool OAINotificationPlugIn::is_is_browsable_Valid() const{
    return m_is_browsable_isValid;
}

bool OAINotificationPlugIn::isIsNonEditableConfig() const {
    return m_is_non_editable_config;
}
void OAINotificationPlugIn::setIsNonEditableConfig(const bool &is_non_editable_config) {
    m_is_non_editable_config = is_non_editable_config;
    m_is_non_editable_config_isSet = true;
}

bool OAINotificationPlugIn::is_is_non_editable_config_Set() const{
    return m_is_non_editable_config_isSet;
}

bool OAINotificationPlugIn::is_is_non_editable_config_Valid() const{
    return m_is_non_editable_config_isValid;
}

OAIDeliveryChannelPlugInLinks OAINotificationPlugIn::getLinks() const {
    return m_links;
}
void OAINotificationPlugIn::setLinks(const OAIDeliveryChannelPlugInLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINotificationPlugIn::is_links_Set() const{
    return m_links_isSet;
}

bool OAINotificationPlugIn::is_links_Valid() const{
    return m_links_isValid;
}

QDateTime OAINotificationPlugIn::getLoadedAssemblyTime() const {
    return m_loaded_assembly_time;
}
void OAINotificationPlugIn::setLoadedAssemblyTime(const QDateTime &loaded_assembly_time) {
    m_loaded_assembly_time = loaded_assembly_time;
    m_loaded_assembly_time_isSet = true;
}

bool OAINotificationPlugIn::is_loaded_assembly_time_Set() const{
    return m_loaded_assembly_time_isSet;
}

bool OAINotificationPlugIn::is_loaded_assembly_time_Valid() const{
    return m_loaded_assembly_time_isValid;
}

QString OAINotificationPlugIn::getLoadedVersion() const {
    return m_loaded_version;
}
void OAINotificationPlugIn::setLoadedVersion(const QString &loaded_version) {
    m_loaded_version = loaded_version;
    m_loaded_version_isSet = true;
}

bool OAINotificationPlugIn::is_loaded_version_Set() const{
    return m_loaded_version_isSet;
}

bool OAINotificationPlugIn::is_loaded_version_Valid() const{
    return m_loaded_version_isValid;
}

QString OAINotificationPlugIn::getName() const {
    return m_name;
}
void OAINotificationPlugIn::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationPlugIn::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationPlugIn::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationPlugIn::getPath() const {
    return m_path;
}
void OAINotificationPlugIn::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAINotificationPlugIn::is_path_Set() const{
    return m_path_isSet;
}

bool OAINotificationPlugIn::is_path_Valid() const{
    return m_path_isValid;
}

QString OAINotificationPlugIn::getVersion() const {
    return m_version;
}
void OAINotificationPlugIn::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINotificationPlugIn::is_version_Set() const{
    return m_version_isSet;
}

bool OAINotificationPlugIn::is_version_Valid() const{
    return m_version_isValid;
}

OAIWebException OAINotificationPlugIn::getWebException() const {
    return m_web_exception;
}
void OAINotificationPlugIn::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAINotificationPlugIn::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAINotificationPlugIn::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAINotificationPlugIn::getWebId() const {
    return m_web_id;
}
void OAINotificationPlugIn::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAINotificationPlugIn::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAINotificationPlugIn::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAINotificationPlugIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assembly_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_load_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_browsable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_editable_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loaded_assembly_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loaded_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationPlugIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
