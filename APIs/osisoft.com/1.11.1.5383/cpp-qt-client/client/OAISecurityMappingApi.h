/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecurityMappingApi_H
#define OAI_OAISecurityMappingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAISecurityEntry.h"
#include "OAISecurityMapping.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecurityMappingApi : public QObject {
    Q_OBJECT

public:
    OAISecurityMappingApi(const int timeOut = 0);
    ~OAISecurityMappingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void securityMappingDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void securityMappingGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void securityMappingGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void securityMappingGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void securityMappingGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void securityMappingGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_mapping OAISecurityMapping [required]
    */
    virtual void securityMappingUpdate(const QString &web_id, const OAISecurityMapping &security_mapping);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void securityMappingDeleteCallback(OAIHttpRequestWorker *worker);
    void securityMappingGetCallback(OAIHttpRequestWorker *worker);
    void securityMappingGetByPathCallback(OAIHttpRequestWorker *worker);
    void securityMappingGetSecurityCallback(OAIHttpRequestWorker *worker);
    void securityMappingGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void securityMappingGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void securityMappingUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void securityMappingDeleteSignal();
    void securityMappingGetSignal(OAISecurityMapping summary);
    void securityMappingGetByPathSignal(OAISecurityMapping summary);
    void securityMappingGetSecuritySignal(OAIItems_SecurityRights summary);
    void securityMappingGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void securityMappingGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void securityMappingUpdateSignal();


    void securityMappingDeleteSignalFull(OAIHttpRequestWorker *worker);
    void securityMappingGetSignalFull(OAIHttpRequestWorker *worker, OAISecurityMapping summary);
    void securityMappingGetByPathSignalFull(OAIHttpRequestWorker *worker, OAISecurityMapping summary);
    void securityMappingGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void securityMappingGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void securityMappingGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void securityMappingUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use securityMappingDeleteSignalError() instead")
    void securityMappingDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSignalError() instead")
    void securityMappingGetSignalE(OAISecurityMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSignalError(OAISecurityMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetByPathSignalError() instead")
    void securityMappingGetByPathSignalE(OAISecurityMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetByPathSignalError(OAISecurityMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSecuritySignalError() instead")
    void securityMappingGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSecurityEntriesSignalError() instead")
    void securityMappingGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSecurityEntryByNameSignalError() instead")
    void securityMappingGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingUpdateSignalError() instead")
    void securityMappingUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use securityMappingDeleteSignalErrorFull() instead")
    void securityMappingDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSignalErrorFull() instead")
    void securityMappingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetByPathSignalErrorFull() instead")
    void securityMappingGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSecuritySignalErrorFull() instead")
    void securityMappingGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSecurityEntriesSignalErrorFull() instead")
    void securityMappingGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingGetSecurityEntryByNameSignalErrorFull() instead")
    void securityMappingGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityMappingUpdateSignalErrorFull() instead")
    void securityMappingUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityMappingUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
