/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationRuleTemplateApi_H
#define OAI_OAINotificationRuleTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIItems_NotificationRuleSubscriber.h"
#include "OAIItems_NotificationRuleTemplate.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAINotificationRuleSubscriber.h"
#include "OAINotificationRuleTemplate.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationRuleTemplateApi : public QObject {
    Q_OBJECT

public:
    OAINotificationRuleTemplateApi(const int timeOut = 0);
    ~OAINotificationRuleTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule_subscriber OAINotificationRuleSubscriber [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateCreateNotificationRuleTemplateSubscriber(const QString &web_id, const OAINotificationRuleSubscriber &notification_rule_subscriber, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void notificationRuleTemplateDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void notificationRuleTemplateDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGetNotificationRuleTemplateSubscribers(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGetNotificationRuleTemplatesQuery(const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleTemplateGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule_template OAINotificationRuleTemplate [required]
    */
    virtual void notificationRuleTemplateUpdate(const QString &web_id, const OAINotificationRuleTemplate &notification_rule_template);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void notificationRuleTemplateUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetByPathCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetNotificationRuleTemplatesQueryCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetSecurityCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignal();
    void notificationRuleTemplateCreateSecurityEntrySignal();
    void notificationRuleTemplateDeleteSignal();
    void notificationRuleTemplateDeleteSecurityEntrySignal();
    void notificationRuleTemplateGetSignal(OAINotificationRuleTemplate summary);
    void notificationRuleTemplateGetByPathSignal(OAINotificationRuleTemplate summary);
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignal(OAIItems_NotificationRuleSubscriber summary);
    void notificationRuleTemplateGetNotificationRuleTemplatesQuerySignal(OAIItems_NotificationRuleTemplate summary);
    void notificationRuleTemplateGetSecuritySignal(OAIItems_SecurityRights summary);
    void notificationRuleTemplateGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void notificationRuleTemplateGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void notificationRuleTemplateUpdateSignal();
    void notificationRuleTemplateUpdateSecurityEntrySignal();


    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAINotificationRuleTemplate summary);
    void notificationRuleTemplateGetByPathSignalFull(OAIHttpRequestWorker *worker, OAINotificationRuleTemplate summary);
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRuleSubscriber summary);
    void notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRuleTemplate summary);
    void notificationRuleTemplateGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void notificationRuleTemplateGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void notificationRuleTemplateGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void notificationRuleTemplateUpdateSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleTemplateUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalError() instead")
    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateCreateSecurityEntrySignalError() instead")
    void notificationRuleTemplateCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateDeleteSignalError() instead")
    void notificationRuleTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateDeleteSecurityEntrySignalError() instead")
    void notificationRuleTemplateDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSignalError() instead")
    void notificationRuleTemplateGetSignalE(OAINotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSignalError(OAINotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetByPathSignalError() instead")
    void notificationRuleTemplateGetByPathSignalE(OAINotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetByPathSignalError(OAINotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalError() instead")
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalE(OAIItems_NotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalError(OAIItems_NotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalError() instead")
    void notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalE(OAIItems_NotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalError(OAIItems_NotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSecuritySignalError() instead")
    void notificationRuleTemplateGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSecurityEntriesSignalError() instead")
    void notificationRuleTemplateGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSecurityEntryByNameSignalError() instead")
    void notificationRuleTemplateGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateUpdateSignalError() instead")
    void notificationRuleTemplateUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateUpdateSecurityEntrySignalError() instead")
    void notificationRuleTemplateUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalErrorFull() instead")
    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateCreateNotificationRuleTemplateSubscriberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateCreateSecurityEntrySignalErrorFull() instead")
    void notificationRuleTemplateCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateDeleteSignalErrorFull() instead")
    void notificationRuleTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateDeleteSecurityEntrySignalErrorFull() instead")
    void notificationRuleTemplateDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSignalErrorFull() instead")
    void notificationRuleTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetByPathSignalErrorFull() instead")
    void notificationRuleTemplateGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalErrorFull() instead")
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetNotificationRuleTemplateSubscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalErrorFull() instead")
    void notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetNotificationRuleTemplatesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSecuritySignalErrorFull() instead")
    void notificationRuleTemplateGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSecurityEntriesSignalErrorFull() instead")
    void notificationRuleTemplateGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateGetSecurityEntryByNameSignalErrorFull() instead")
    void notificationRuleTemplateGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateUpdateSignalErrorFull() instead")
    void notificationRuleTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleTemplateUpdateSecurityEntrySignalErrorFull() instead")
    void notificationRuleTemplateUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleTemplateUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
