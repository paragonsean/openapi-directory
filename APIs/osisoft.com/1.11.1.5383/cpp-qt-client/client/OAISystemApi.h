/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemApi_H
#define OAI_OAISystemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIItems_CacheInstance.h"
#include "OAISystemLanding.h"
#include "OAISystemStatus.h"
#include "OAIUserInfo.h"
#include "OAIVersion.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemApi : public QObject {
    Q_OBJECT

public:
    OAISystemApi(const int timeOut = 0);
    ~OAISystemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void systemCacheInstances();


    virtual void systemLanding();


    virtual void systemStatus();


    virtual void systemUserInfo();


    virtual void systemVersions();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void systemCacheInstancesCallback(OAIHttpRequestWorker *worker);
    void systemLandingCallback(OAIHttpRequestWorker *worker);
    void systemStatusCallback(OAIHttpRequestWorker *worker);
    void systemUserInfoCallback(OAIHttpRequestWorker *worker);
    void systemVersionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void systemCacheInstancesSignal(OAIItems_CacheInstance summary);
    void systemLandingSignal(OAISystemLanding summary);
    void systemStatusSignal(OAISystemStatus summary);
    void systemUserInfoSignal(OAIUserInfo summary);
    void systemVersionsSignal(QMap<QString, OAIVersion> summary);


    void systemCacheInstancesSignalFull(OAIHttpRequestWorker *worker, OAIItems_CacheInstance summary);
    void systemLandingSignalFull(OAIHttpRequestWorker *worker, OAISystemLanding summary);
    void systemStatusSignalFull(OAIHttpRequestWorker *worker, OAISystemStatus summary);
    void systemUserInfoSignalFull(OAIHttpRequestWorker *worker, OAIUserInfo summary);
    void systemVersionsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIVersion> summary);

    Q_DECL_DEPRECATED_X("Use systemCacheInstancesSignalError() instead")
    void systemCacheInstancesSignalE(OAIItems_CacheInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void systemCacheInstancesSignalError(OAIItems_CacheInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemLandingSignalError() instead")
    void systemLandingSignalE(OAISystemLanding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void systemLandingSignalError(OAISystemLanding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemStatusSignalError() instead")
    void systemStatusSignalE(OAISystemStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void systemStatusSignalError(OAISystemStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemUserInfoSignalError() instead")
    void systemUserInfoSignalE(OAIUserInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void systemUserInfoSignalError(OAIUserInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemVersionsSignalError() instead")
    void systemVersionsSignalE(QMap<QString, OAIVersion> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void systemVersionsSignalError(QMap<QString, OAIVersion> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use systemCacheInstancesSignalErrorFull() instead")
    void systemCacheInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemCacheInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemLandingSignalErrorFull() instead")
    void systemLandingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemLandingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemStatusSignalErrorFull() instead")
    void systemStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemUserInfoSignalErrorFull() instead")
    void systemUserInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemUserInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemVersionsSignalErrorFull() instead")
    void systemVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
