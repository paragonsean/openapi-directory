/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchByAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchByAttribute::OAISearchByAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchByAttribute::OAISearchByAttribute() {
    this->initializeModel();
}

OAISearchByAttribute::~OAISearchByAttribute() {}

void OAISearchByAttribute::initializeModel() {

    m_element_template_isSet = false;
    m_element_template_isValid = false;

    m_search_root_isSet = false;
    m_search_root_isValid = false;

    m_value_queries_isSet = false;
    m_value_queries_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAISearchByAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchByAttribute::fromJsonObject(QJsonObject json) {

    m_element_template_isValid = ::OpenAPI::fromJsonValue(m_element_template, json[QString("ElementTemplate")]);
    m_element_template_isSet = !json[QString("ElementTemplate")].isNull() && m_element_template_isValid;

    m_search_root_isValid = ::OpenAPI::fromJsonValue(m_search_root, json[QString("SearchRoot")]);
    m_search_root_isSet = !json[QString("SearchRoot")].isNull() && m_search_root_isValid;

    m_value_queries_isValid = ::OpenAPI::fromJsonValue(m_value_queries, json[QString("ValueQueries")]);
    m_value_queries_isSet = !json[QString("ValueQueries")].isNull() && m_value_queries_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAISearchByAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchByAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_element_template_isSet) {
        obj.insert(QString("ElementTemplate"), ::OpenAPI::toJsonValue(m_element_template));
    }
    if (m_search_root_isSet) {
        obj.insert(QString("SearchRoot"), ::OpenAPI::toJsonValue(m_search_root));
    }
    if (m_value_queries.size() > 0) {
        obj.insert(QString("ValueQueries"), ::OpenAPI::toJsonValue(m_value_queries));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAISearchByAttribute::getElementTemplate() const {
    return m_element_template;
}
void OAISearchByAttribute::setElementTemplate(const QString &element_template) {
    m_element_template = element_template;
    m_element_template_isSet = true;
}

bool OAISearchByAttribute::is_element_template_Set() const{
    return m_element_template_isSet;
}

bool OAISearchByAttribute::is_element_template_Valid() const{
    return m_element_template_isValid;
}

QString OAISearchByAttribute::getSearchRoot() const {
    return m_search_root;
}
void OAISearchByAttribute::setSearchRoot(const QString &search_root) {
    m_search_root = search_root;
    m_search_root_isSet = true;
}

bool OAISearchByAttribute::is_search_root_Set() const{
    return m_search_root_isSet;
}

bool OAISearchByAttribute::is_search_root_Valid() const{
    return m_search_root_isValid;
}

QList<OAIValueQuery> OAISearchByAttribute::getValueQueries() const {
    return m_value_queries;
}
void OAISearchByAttribute::setValueQueries(const QList<OAIValueQuery> &value_queries) {
    m_value_queries = value_queries;
    m_value_queries_isSet = true;
}

bool OAISearchByAttribute::is_value_queries_Set() const{
    return m_value_queries_isSet;
}

bool OAISearchByAttribute::is_value_queries_Valid() const{
    return m_value_queries_isValid;
}

OAIWebException OAISearchByAttribute::getWebException() const {
    return m_web_exception;
}
void OAISearchByAttribute::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAISearchByAttribute::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAISearchByAttribute::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAISearchByAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchByAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
