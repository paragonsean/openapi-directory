/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIElementApi_H
#define OAI_OAIElementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysis.h"
#include "OAIAttribute.h"
#include "OAIElement.h"
#include "OAIErrors.h"
#include "OAIItems_Analysis.h"
#include "OAIItems_Attribute.h"
#include "OAIItems_Element.h"
#include "OAIItems_ElementCategory.h"
#include "OAIItems_EventFrame.h"
#include "OAIItems_Item_Element.h"
#include "OAIItems_NotificationRule.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAIItems_string.h"
#include "OAINotificationRule.h"
#include "OAISearchByAttribute.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIElementApi : public QObject {
    Q_OBJECT

public:
    OAIElementApi(const int timeOut = 0);
    ~OAIElementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  referenced_element_web_id QList<QString> [required]
    * @param[in]  reference_type QString [optional]
    */
    virtual void elementAddReferencedElement(const QString &web_id, const QList<QString> &referenced_element_web_id, const ::OpenAPI::OptionalParam<QString> &reference_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  analysis OAIAnalysis [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementCreateAnalysis(const QString &web_id, const OAIAnalysis &analysis, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  attribute OAIAttribute [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementCreateAttribute(const QString &web_id, const OAIAttribute &attribute, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  include_child_elements bool [optional]
    */
    virtual void elementCreateConfig(const QString &web_id, const ::OpenAPI::OptionalParam<bool> &include_child_elements = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  element OAIElement [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementCreateElement(const QString &web_id, const OAIElement &element, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule OAINotificationRule [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementCreateNotificationRule(const QString &web_id, const OAINotificationRule &notification_rule, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query OAISearchByAttribute [required]
    * @param[in]  associations QString [optional]
    * @param[in]  no_results bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementCreateSearchByAttribute(const OAISearchByAttribute &query, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &no_results = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void elementDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void elementDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  search_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  description_filter QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementExecuteSearchByAttribute(const QString &search_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  attribute_category QString [optional]
    * @param[in]  attribute_description_filter QString [optional]
    * @param[in]  attribute_name_filter QString [optional]
    * @param[in]  attribute_type QString [optional]
    * @param[in]  element_category QString [optional]
    * @param[in]  element_description_filter QString [optional]
    * @param[in]  element_name_filter QString [optional]
    * @param[in]  element_template QString [optional]
    * @param[in]  element_type QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementFindElementAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetAnalyses(const QString &web_id, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  trait QList<QString> [optional]
    * @param[in]  trait_category QList<QString> [optional]
    * @param[in]  value_type QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &trait = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &trait_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &value_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  description_filter QString [optional]
    * @param[in]  element_type QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetElements(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  associations QString [optional]
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  query_date QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetElementsQuery(const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  can_be_acknowledged bool [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  is_acknowledged bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  severity QList<QString> [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetEventFrames(const QString &web_id, const ::OpenAPI::OptionalParam<bool> &can_be_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &severity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  as_parallel bool [optional]
    * @param[in]  associations QString [optional]
    * @param[in]  include_mode QString [optional]
    * @param[in]  path QList<QString> [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id QList<QString> [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetMultiple(const ::OpenAPI::OptionalParam<bool> &as_parallel = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &path = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &web_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetNotificationRules(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  relative_path QString [optional]
    */
    virtual void elementGetPaths(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &relative_path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  description_filter QString [optional]
    * @param[in]  element_type QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetReferencedElements(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  referenced_element_web_id QList<QString> [required]
    */
    virtual void elementRemoveReferencedElement(const QString &web_id, const QList<QString> &referenced_element_web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  element OAIElement [required]
    */
    virtual void elementUpdate(const QString &web_id, const OAIElement &element);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void elementUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void elementAddReferencedElementCallback(OAIHttpRequestWorker *worker);
    void elementCreateAnalysisCallback(OAIHttpRequestWorker *worker);
    void elementCreateAttributeCallback(OAIHttpRequestWorker *worker);
    void elementCreateConfigCallback(OAIHttpRequestWorker *worker);
    void elementCreateElementCallback(OAIHttpRequestWorker *worker);
    void elementCreateNotificationRuleCallback(OAIHttpRequestWorker *worker);
    void elementCreateSearchByAttributeCallback(OAIHttpRequestWorker *worker);
    void elementCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void elementDeleteCallback(OAIHttpRequestWorker *worker);
    void elementDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void elementExecuteSearchByAttributeCallback(OAIHttpRequestWorker *worker);
    void elementFindElementAttributesCallback(OAIHttpRequestWorker *worker);
    void elementGetCallback(OAIHttpRequestWorker *worker);
    void elementGetAnalysesCallback(OAIHttpRequestWorker *worker);
    void elementGetAttributesCallback(OAIHttpRequestWorker *worker);
    void elementGetByPathCallback(OAIHttpRequestWorker *worker);
    void elementGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void elementGetElementsCallback(OAIHttpRequestWorker *worker);
    void elementGetElementsQueryCallback(OAIHttpRequestWorker *worker);
    void elementGetEventFramesCallback(OAIHttpRequestWorker *worker);
    void elementGetMultipleCallback(OAIHttpRequestWorker *worker);
    void elementGetNotificationRulesCallback(OAIHttpRequestWorker *worker);
    void elementGetPathsCallback(OAIHttpRequestWorker *worker);
    void elementGetReferencedElementsCallback(OAIHttpRequestWorker *worker);
    void elementGetSecurityCallback(OAIHttpRequestWorker *worker);
    void elementGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void elementGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void elementRemoveReferencedElementCallback(OAIHttpRequestWorker *worker);
    void elementUpdateCallback(OAIHttpRequestWorker *worker);
    void elementUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void elementAddReferencedElementSignal();
    void elementCreateAnalysisSignal();
    void elementCreateAttributeSignal();
    void elementCreateConfigSignal();
    void elementCreateElementSignal();
    void elementCreateNotificationRuleSignal();
    void elementCreateSearchByAttributeSignal(OAIItems_Element summary);
    void elementCreateSecurityEntrySignal();
    void elementDeleteSignal();
    void elementDeleteSecurityEntrySignal();
    void elementExecuteSearchByAttributeSignal(OAIItems_Element summary);
    void elementFindElementAttributesSignal(OAIItems_Attribute summary);
    void elementGetSignal(OAIElement summary);
    void elementGetAnalysesSignal(OAIItems_Analysis summary);
    void elementGetAttributesSignal(OAIItems_Attribute summary);
    void elementGetByPathSignal(OAIElement summary);
    void elementGetCategoriesSignal(OAIItems_ElementCategory summary);
    void elementGetElementsSignal(OAIItems_Element summary);
    void elementGetElementsQuerySignal(OAIItems_Element summary);
    void elementGetEventFramesSignal(OAIItems_EventFrame summary);
    void elementGetMultipleSignal(OAIItems_Item_Element summary);
    void elementGetNotificationRulesSignal(OAIItems_NotificationRule summary);
    void elementGetPathsSignal(OAIItems_string summary);
    void elementGetReferencedElementsSignal(OAIItems_Element summary);
    void elementGetSecuritySignal(OAIItems_SecurityRights summary);
    void elementGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void elementGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void elementRemoveReferencedElementSignal();
    void elementUpdateSignal();
    void elementUpdateSecurityEntrySignal();


    void elementAddReferencedElementSignalFull(OAIHttpRequestWorker *worker);
    void elementCreateAnalysisSignalFull(OAIHttpRequestWorker *worker);
    void elementCreateAttributeSignalFull(OAIHttpRequestWorker *worker);
    void elementCreateConfigSignalFull(OAIHttpRequestWorker *worker);
    void elementCreateElementSignalFull(OAIHttpRequestWorker *worker);
    void elementCreateNotificationRuleSignalFull(OAIHttpRequestWorker *worker);
    void elementCreateSearchByAttributeSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void elementCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void elementDeleteSignalFull(OAIHttpRequestWorker *worker);
    void elementDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void elementExecuteSearchByAttributeSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void elementFindElementAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void elementGetSignalFull(OAIHttpRequestWorker *worker, OAIElement summary);
    void elementGetAnalysesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Analysis summary);
    void elementGetAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void elementGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIElement summary);
    void elementGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementCategory summary);
    void elementGetElementsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void elementGetElementsQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void elementGetEventFramesSignalFull(OAIHttpRequestWorker *worker, OAIItems_EventFrame summary);
    void elementGetMultipleSignalFull(OAIHttpRequestWorker *worker, OAIItems_Item_Element summary);
    void elementGetNotificationRulesSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRule summary);
    void elementGetPathsSignalFull(OAIHttpRequestWorker *worker, OAIItems_string summary);
    void elementGetReferencedElementsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void elementGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void elementGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void elementGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void elementRemoveReferencedElementSignalFull(OAIHttpRequestWorker *worker);
    void elementUpdateSignalFull(OAIHttpRequestWorker *worker);
    void elementUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use elementAddReferencedElementSignalError() instead")
    void elementAddReferencedElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementAddReferencedElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateAnalysisSignalError() instead")
    void elementCreateAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateAttributeSignalError() instead")
    void elementCreateAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateConfigSignalError() instead")
    void elementCreateConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateElementSignalError() instead")
    void elementCreateElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateNotificationRuleSignalError() instead")
    void elementCreateNotificationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateNotificationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateSearchByAttributeSignalError() instead")
    void elementCreateSearchByAttributeSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateSearchByAttributeSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateSecurityEntrySignalError() instead")
    void elementCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementDeleteSignalError() instead")
    void elementDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementDeleteSecurityEntrySignalError() instead")
    void elementDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementExecuteSearchByAttributeSignalError() instead")
    void elementExecuteSearchByAttributeSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementExecuteSearchByAttributeSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementFindElementAttributesSignalError() instead")
    void elementFindElementAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementFindElementAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSignalError() instead")
    void elementGetSignalE(OAIElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSignalError(OAIElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetAnalysesSignalError() instead")
    void elementGetAnalysesSignalE(OAIItems_Analysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetAnalysesSignalError(OAIItems_Analysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetAttributesSignalError() instead")
    void elementGetAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetByPathSignalError() instead")
    void elementGetByPathSignalE(OAIElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetByPathSignalError(OAIElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetCategoriesSignalError() instead")
    void elementGetCategoriesSignalE(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetCategoriesSignalError(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetElementsSignalError() instead")
    void elementGetElementsSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetElementsSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetElementsQuerySignalError() instead")
    void elementGetElementsQuerySignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetElementsQuerySignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetEventFramesSignalError() instead")
    void elementGetEventFramesSignalE(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetEventFramesSignalError(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetMultipleSignalError() instead")
    void elementGetMultipleSignalE(OAIItems_Item_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetMultipleSignalError(OAIItems_Item_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetNotificationRulesSignalError() instead")
    void elementGetNotificationRulesSignalE(OAIItems_NotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetNotificationRulesSignalError(OAIItems_NotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetPathsSignalError() instead")
    void elementGetPathsSignalE(OAIItems_string summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetPathsSignalError(OAIItems_string summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetReferencedElementsSignalError() instead")
    void elementGetReferencedElementsSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetReferencedElementsSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSecuritySignalError() instead")
    void elementGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSecurityEntriesSignalError() instead")
    void elementGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSecurityEntryByNameSignalError() instead")
    void elementGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementRemoveReferencedElementSignalError() instead")
    void elementRemoveReferencedElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementRemoveReferencedElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementUpdateSignalError() instead")
    void elementUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementUpdateSecurityEntrySignalError() instead")
    void elementUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use elementAddReferencedElementSignalErrorFull() instead")
    void elementAddReferencedElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementAddReferencedElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateAnalysisSignalErrorFull() instead")
    void elementCreateAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateAttributeSignalErrorFull() instead")
    void elementCreateAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateConfigSignalErrorFull() instead")
    void elementCreateConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateElementSignalErrorFull() instead")
    void elementCreateElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateNotificationRuleSignalErrorFull() instead")
    void elementCreateNotificationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateNotificationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateSearchByAttributeSignalErrorFull() instead")
    void elementCreateSearchByAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateSearchByAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementCreateSecurityEntrySignalErrorFull() instead")
    void elementCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementDeleteSignalErrorFull() instead")
    void elementDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementDeleteSecurityEntrySignalErrorFull() instead")
    void elementDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementExecuteSearchByAttributeSignalErrorFull() instead")
    void elementExecuteSearchByAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementExecuteSearchByAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementFindElementAttributesSignalErrorFull() instead")
    void elementFindElementAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementFindElementAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSignalErrorFull() instead")
    void elementGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetAnalysesSignalErrorFull() instead")
    void elementGetAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetAttributesSignalErrorFull() instead")
    void elementGetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetByPathSignalErrorFull() instead")
    void elementGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetCategoriesSignalErrorFull() instead")
    void elementGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetElementsSignalErrorFull() instead")
    void elementGetElementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetElementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetElementsQuerySignalErrorFull() instead")
    void elementGetElementsQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetElementsQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetEventFramesSignalErrorFull() instead")
    void elementGetEventFramesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetEventFramesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetMultipleSignalErrorFull() instead")
    void elementGetMultipleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetMultipleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetNotificationRulesSignalErrorFull() instead")
    void elementGetNotificationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetNotificationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetPathsSignalErrorFull() instead")
    void elementGetPathsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetPathsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetReferencedElementsSignalErrorFull() instead")
    void elementGetReferencedElementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetReferencedElementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSecuritySignalErrorFull() instead")
    void elementGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSecurityEntriesSignalErrorFull() instead")
    void elementGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementGetSecurityEntryByNameSignalErrorFull() instead")
    void elementGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementRemoveReferencedElementSignalErrorFull() instead")
    void elementRemoveReferencedElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementRemoveReferencedElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementUpdateSignalErrorFull() instead")
    void elementUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementUpdateSecurityEntrySignalErrorFull() instead")
    void elementUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
