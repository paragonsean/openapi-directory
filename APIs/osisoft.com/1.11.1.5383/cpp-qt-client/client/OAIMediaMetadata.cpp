/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaMetadata::OAIMediaMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaMetadata::OAIMediaMetadata() {
    this->initializeModel();
}

OAIMediaMetadata::~OAIMediaMetadata() {}

void OAIMediaMetadata::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_change_date_isSet = false;
    m_change_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIMediaMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaMetadata::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("Author")]);
    m_author_isSet = !json[QString("Author")].isNull() && m_author_isValid;

    m_change_date_isValid = ::OpenAPI::fromJsonValue(m_change_date, json[QString("ChangeDate")]);
    m_change_date_isSet = !json[QString("ChangeDate")].isNull() && m_change_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIMediaMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("Author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_change_date_isSet) {
        obj.insert(QString("ChangeDate"), ::OpenAPI::toJsonValue(m_change_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIMediaMetadata::getAuthor() const {
    return m_author;
}
void OAIMediaMetadata::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIMediaMetadata::is_author_Set() const{
    return m_author_isSet;
}

bool OAIMediaMetadata::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIMediaMetadata::getChangeDate() const {
    return m_change_date;
}
void OAIMediaMetadata::setChangeDate(const QDateTime &change_date) {
    m_change_date = change_date;
    m_change_date_isSet = true;
}

bool OAIMediaMetadata::is_change_date_Set() const{
    return m_change_date_isSet;
}

bool OAIMediaMetadata::is_change_date_Valid() const{
    return m_change_date_isValid;
}

QString OAIMediaMetadata::getDescription() const {
    return m_description;
}
void OAIMediaMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMediaMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMediaMetadata::is_description_Valid() const{
    return m_description_isValid;
}

OAIMediaMetadataLinks OAIMediaMetadata::getLinks() const {
    return m_links;
}
void OAIMediaMetadata::setLinks(const OAIMediaMetadataLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMediaMetadata::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMediaMetadata::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIMediaMetadata::getName() const {
    return m_name;
}
void OAIMediaMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMediaMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMediaMetadata::is_name_Valid() const{
    return m_name_isValid;
}

double OAIMediaMetadata::getSize() const {
    return m_size;
}
void OAIMediaMetadata::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIMediaMetadata::is_size_Set() const{
    return m_size_isSet;
}

bool OAIMediaMetadata::is_size_Valid() const{
    return m_size_isValid;
}

OAIWebException OAIMediaMetadata::getWebException() const {
    return m_web_exception;
}
void OAIMediaMetadata::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIMediaMetadata::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIMediaMetadata::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIMediaMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
