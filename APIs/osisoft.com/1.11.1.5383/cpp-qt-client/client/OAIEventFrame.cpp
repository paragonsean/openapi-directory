/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventFrame::OAIEventFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventFrame::OAIEventFrame() {
    this->initializeModel();
}

OAIEventFrame::~OAIEventFrame() {}

void OAIEventFrame::initializeModel() {

    m_acknowledged_by_isSet = false;
    m_acknowledged_by_isValid = false;

    m_acknowledged_date_isSet = false;
    m_acknowledged_date_isValid = false;

    m_are_values_captured_isSet = false;
    m_are_values_captured_isValid = false;

    m_can_be_acknowledged_isSet = false;
    m_can_be_acknowledged_isValid = false;

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_acknowledged_isSet = false;
    m_is_acknowledged_isValid = false;

    m_is_annotated_isSet = false;
    m_is_annotated_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_ref_element_web_ids_isSet = false;
    m_ref_element_web_ids_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIEventFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventFrame::fromJsonObject(QJsonObject json) {

    m_acknowledged_by_isValid = ::OpenAPI::fromJsonValue(m_acknowledged_by, json[QString("AcknowledgedBy")]);
    m_acknowledged_by_isSet = !json[QString("AcknowledgedBy")].isNull() && m_acknowledged_by_isValid;

    m_acknowledged_date_isValid = ::OpenAPI::fromJsonValue(m_acknowledged_date, json[QString("AcknowledgedDate")]);
    m_acknowledged_date_isSet = !json[QString("AcknowledgedDate")].isNull() && m_acknowledged_date_isValid;

    m_are_values_captured_isValid = ::OpenAPI::fromJsonValue(m_are_values_captured, json[QString("AreValuesCaptured")]);
    m_are_values_captured_isSet = !json[QString("AreValuesCaptured")].isNull() && m_are_values_captured_isValid;

    m_can_be_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_can_be_acknowledged, json[QString("CanBeAcknowledged")]);
    m_can_be_acknowledged_isSet = !json[QString("CanBeAcknowledged")].isNull() && m_can_be_acknowledged_isValid;

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("ExtendedProperties")]);
    m_extended_properties_isSet = !json[QString("ExtendedProperties")].isNull() && m_extended_properties_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("HasChildren")]);
    m_has_children_isSet = !json[QString("HasChildren")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_is_acknowledged, json[QString("IsAcknowledged")]);
    m_is_acknowledged_isSet = !json[QString("IsAcknowledged")].isNull() && m_is_acknowledged_isValid;

    m_is_annotated_isValid = ::OpenAPI::fromJsonValue(m_is_annotated, json[QString("IsAnnotated")]);
    m_is_annotated_isSet = !json[QString("IsAnnotated")].isNull() && m_is_annotated_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("IsLocked")]);
    m_is_locked_isSet = !json[QString("IsLocked")].isNull() && m_is_locked_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_ref_element_web_ids_isValid = ::OpenAPI::fromJsonValue(m_ref_element_web_ids, json[QString("RefElementWebIds")]);
    m_ref_element_web_ids_isSet = !json[QString("RefElementWebIds")].isNull() && m_ref_element_web_ids_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIEventFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledged_by_isSet) {
        obj.insert(QString("AcknowledgedBy"), ::OpenAPI::toJsonValue(m_acknowledged_by));
    }
    if (m_acknowledged_date_isSet) {
        obj.insert(QString("AcknowledgedDate"), ::OpenAPI::toJsonValue(m_acknowledged_date));
    }
    if (m_are_values_captured_isSet) {
        obj.insert(QString("AreValuesCaptured"), ::OpenAPI::toJsonValue(m_are_values_captured));
    }
    if (m_can_be_acknowledged_isSet) {
        obj.insert(QString("CanBeAcknowledged"), ::OpenAPI::toJsonValue(m_can_be_acknowledged));
    }
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_extended_properties.size() > 0) {
        obj.insert(QString("ExtendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("HasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_acknowledged_isSet) {
        obj.insert(QString("IsAcknowledged"), ::OpenAPI::toJsonValue(m_is_acknowledged));
    }
    if (m_is_annotated_isSet) {
        obj.insert(QString("IsAnnotated"), ::OpenAPI::toJsonValue(m_is_annotated));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("IsLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_ref_element_web_ids.size() > 0) {
        obj.insert(QString("RefElementWebIds"), ::OpenAPI::toJsonValue(m_ref_element_web_ids));
    }
    if (m_security.isSet()) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_severity_isSet) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QString OAIEventFrame::getAcknowledgedBy() const {
    return m_acknowledged_by;
}
void OAIEventFrame::setAcknowledgedBy(const QString &acknowledged_by) {
    m_acknowledged_by = acknowledged_by;
    m_acknowledged_by_isSet = true;
}

bool OAIEventFrame::is_acknowledged_by_Set() const{
    return m_acknowledged_by_isSet;
}

bool OAIEventFrame::is_acknowledged_by_Valid() const{
    return m_acknowledged_by_isValid;
}

QDateTime OAIEventFrame::getAcknowledgedDate() const {
    return m_acknowledged_date;
}
void OAIEventFrame::setAcknowledgedDate(const QDateTime &acknowledged_date) {
    m_acknowledged_date = acknowledged_date;
    m_acknowledged_date_isSet = true;
}

bool OAIEventFrame::is_acknowledged_date_Set() const{
    return m_acknowledged_date_isSet;
}

bool OAIEventFrame::is_acknowledged_date_Valid() const{
    return m_acknowledged_date_isValid;
}

bool OAIEventFrame::isAreValuesCaptured() const {
    return m_are_values_captured;
}
void OAIEventFrame::setAreValuesCaptured(const bool &are_values_captured) {
    m_are_values_captured = are_values_captured;
    m_are_values_captured_isSet = true;
}

bool OAIEventFrame::is_are_values_captured_Set() const{
    return m_are_values_captured_isSet;
}

bool OAIEventFrame::is_are_values_captured_Valid() const{
    return m_are_values_captured_isValid;
}

bool OAIEventFrame::isCanBeAcknowledged() const {
    return m_can_be_acknowledged;
}
void OAIEventFrame::setCanBeAcknowledged(const bool &can_be_acknowledged) {
    m_can_be_acknowledged = can_be_acknowledged;
    m_can_be_acknowledged_isSet = true;
}

bool OAIEventFrame::is_can_be_acknowledged_Set() const{
    return m_can_be_acknowledged_isSet;
}

bool OAIEventFrame::is_can_be_acknowledged_Valid() const{
    return m_can_be_acknowledged_isValid;
}

QList<QString> OAIEventFrame::getCategoryNames() const {
    return m_category_names;
}
void OAIEventFrame::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIEventFrame::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIEventFrame::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIEventFrame::getDescription() const {
    return m_description;
}
void OAIEventFrame::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventFrame::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventFrame::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIEventFrame::getEndTime() const {
    return m_end_time;
}
void OAIEventFrame::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIEventFrame::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIEventFrame::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QMap<QString, OAIValue> OAIEventFrame::getExtendedProperties() const {
    return m_extended_properties;
}
void OAIEventFrame::setExtendedProperties(const QMap<QString, OAIValue> &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAIEventFrame::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAIEventFrame::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

bool OAIEventFrame::isHasChildren() const {
    return m_has_children;
}
void OAIEventFrame::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIEventFrame::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIEventFrame::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAIEventFrame::getId() const {
    return m_id;
}
void OAIEventFrame::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventFrame::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventFrame::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEventFrame::isIsAcknowledged() const {
    return m_is_acknowledged;
}
void OAIEventFrame::setIsAcknowledged(const bool &is_acknowledged) {
    m_is_acknowledged = is_acknowledged;
    m_is_acknowledged_isSet = true;
}

bool OAIEventFrame::is_is_acknowledged_Set() const{
    return m_is_acknowledged_isSet;
}

bool OAIEventFrame::is_is_acknowledged_Valid() const{
    return m_is_acknowledged_isValid;
}

bool OAIEventFrame::isIsAnnotated() const {
    return m_is_annotated;
}
void OAIEventFrame::setIsAnnotated(const bool &is_annotated) {
    m_is_annotated = is_annotated;
    m_is_annotated_isSet = true;
}

bool OAIEventFrame::is_is_annotated_Set() const{
    return m_is_annotated_isSet;
}

bool OAIEventFrame::is_is_annotated_Valid() const{
    return m_is_annotated_isValid;
}

bool OAIEventFrame::isIsLocked() const {
    return m_is_locked;
}
void OAIEventFrame::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIEventFrame::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIEventFrame::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

OAIEventFrameLinks OAIEventFrame::getLinks() const {
    return m_links;
}
void OAIEventFrame::setLinks(const OAIEventFrameLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIEventFrame::is_links_Set() const{
    return m_links_isSet;
}

bool OAIEventFrame::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIEventFrame::getName() const {
    return m_name;
}
void OAIEventFrame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventFrame::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventFrame::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventFrame::getPath() const {
    return m_path;
}
void OAIEventFrame::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIEventFrame::is_path_Set() const{
    return m_path_isSet;
}

bool OAIEventFrame::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIEventFrame::getRefElementWebIds() const {
    return m_ref_element_web_ids;
}
void OAIEventFrame::setRefElementWebIds(const QList<QString> &ref_element_web_ids) {
    m_ref_element_web_ids = ref_element_web_ids;
    m_ref_element_web_ids_isSet = true;
}

bool OAIEventFrame::is_ref_element_web_ids_Set() const{
    return m_ref_element_web_ids_isSet;
}

bool OAIEventFrame::is_ref_element_web_ids_Valid() const{
    return m_ref_element_web_ids_isValid;
}

OAISecurity OAIEventFrame::getSecurity() const {
    return m_security;
}
void OAIEventFrame::setSecurity(const OAISecurity &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIEventFrame::is_security_Set() const{
    return m_security_isSet;
}

bool OAIEventFrame::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIEventFrame::getSeverity() const {
    return m_severity;
}
void OAIEventFrame::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEventFrame::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEventFrame::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAIEventFrame::getStartTime() const {
    return m_start_time;
}
void OAIEventFrame::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEventFrame::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEventFrame::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIEventFrame::getTemplateName() const {
    return m_template_name;
}
void OAIEventFrame::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIEventFrame::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIEventFrame::is_template_name_Valid() const{
    return m_template_name_isValid;
}

OAIWebException OAIEventFrame::getWebException() const {
    return m_web_exception;
}
void OAIEventFrame::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIEventFrame::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIEventFrame::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIEventFrame::getWebId() const {
    return m_web_id;
}
void OAIEventFrame::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIEventFrame::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIEventFrame::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIEventFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledged_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acknowledged_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_are_values_captured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_annotated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_element_web_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
