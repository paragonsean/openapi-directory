/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisApi_H
#define OAI_OAIAnalysisApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysis.h"
#include "OAIErrors.h"
#include "OAIItems_Analysis.h"
#include "OAIItems_AnalysisCategory.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisApi(const int timeOut = 0);
    ~OAIAnalysisApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void analysisDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void analysisDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGetAnalysesQuery(const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  analysis OAIAnalysis [required]
    */
    virtual void analysisUpdate(const QString &web_id, const OAIAnalysis &analysis);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void analysisUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analysisCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void analysisDeleteCallback(OAIHttpRequestWorker *worker);
    void analysisDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void analysisGetCallback(OAIHttpRequestWorker *worker);
    void analysisGetAnalysesQueryCallback(OAIHttpRequestWorker *worker);
    void analysisGetByPathCallback(OAIHttpRequestWorker *worker);
    void analysisGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void analysisGetSecurityCallback(OAIHttpRequestWorker *worker);
    void analysisGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void analysisGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void analysisUpdateCallback(OAIHttpRequestWorker *worker);
    void analysisUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analysisCreateSecurityEntrySignal();
    void analysisDeleteSignal();
    void analysisDeleteSecurityEntrySignal();
    void analysisGetSignal(OAIAnalysis summary);
    void analysisGetAnalysesQuerySignal(OAIItems_Analysis summary);
    void analysisGetByPathSignal(OAIAnalysis summary);
    void analysisGetCategoriesSignal(OAIItems_AnalysisCategory summary);
    void analysisGetSecuritySignal(OAIItems_SecurityRights summary);
    void analysisGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void analysisGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void analysisUpdateSignal();
    void analysisUpdateSecurityEntrySignal();


    void analysisCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void analysisDeleteSignalFull(OAIHttpRequestWorker *worker);
    void analysisDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void analysisGetSignalFull(OAIHttpRequestWorker *worker, OAIAnalysis summary);
    void analysisGetAnalysesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_Analysis summary);
    void analysisGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAnalysis summary);
    void analysisGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisCategory summary);
    void analysisGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void analysisGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void analysisGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void analysisUpdateSignalFull(OAIHttpRequestWorker *worker);
    void analysisUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use analysisCreateSecurityEntrySignalError() instead")
    void analysisCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisDeleteSignalError() instead")
    void analysisDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisDeleteSecurityEntrySignalError() instead")
    void analysisDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSignalError() instead")
    void analysisGetSignalE(OAIAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSignalError(OAIAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetAnalysesQuerySignalError() instead")
    void analysisGetAnalysesQuerySignalE(OAIItems_Analysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetAnalysesQuerySignalError(OAIItems_Analysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetByPathSignalError() instead")
    void analysisGetByPathSignalE(OAIAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetByPathSignalError(OAIAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetCategoriesSignalError() instead")
    void analysisGetCategoriesSignalE(OAIItems_AnalysisCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetCategoriesSignalError(OAIItems_AnalysisCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSecuritySignalError() instead")
    void analysisGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSecurityEntriesSignalError() instead")
    void analysisGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSecurityEntryByNameSignalError() instead")
    void analysisGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisUpdateSignalError() instead")
    void analysisUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisUpdateSecurityEntrySignalError() instead")
    void analysisUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analysisCreateSecurityEntrySignalErrorFull() instead")
    void analysisCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisDeleteSignalErrorFull() instead")
    void analysisDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisDeleteSecurityEntrySignalErrorFull() instead")
    void analysisDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSignalErrorFull() instead")
    void analysisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetAnalysesQuerySignalErrorFull() instead")
    void analysisGetAnalysesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetAnalysesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetByPathSignalErrorFull() instead")
    void analysisGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetCategoriesSignalErrorFull() instead")
    void analysisGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSecuritySignalErrorFull() instead")
    void analysisGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSecurityEntriesSignalErrorFull() instead")
    void analysisGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisGetSecurityEntryByNameSignalErrorFull() instead")
    void analysisGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisUpdateSignalErrorFull() instead")
    void analysisUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisUpdateSecurityEntrySignalErrorFull() instead")
    void analysisUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
