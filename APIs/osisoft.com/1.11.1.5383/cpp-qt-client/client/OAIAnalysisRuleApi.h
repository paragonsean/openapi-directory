/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisRuleApi_H
#define OAI_OAIAnalysisRuleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisRule.h"
#include "OAIItems_AnalysisRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisRuleApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisRuleApi(const int timeOut = 0);
    ~OAIAnalysisRuleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  analysis_rule OAIAnalysisRule [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisRuleCreateAnalysisRule(const QString &web_id, const OAIAnalysisRule &analysis_rule, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void analysisRuleDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisRuleGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisRuleGetAnalysisRules(const QString &web_id, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisRuleGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  analysis_rule OAIAnalysisRule [required]
    */
    virtual void analysisRuleUpdate(const QString &web_id, const OAIAnalysisRule &analysis_rule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analysisRuleCreateAnalysisRuleCallback(OAIHttpRequestWorker *worker);
    void analysisRuleDeleteCallback(OAIHttpRequestWorker *worker);
    void analysisRuleGetCallback(OAIHttpRequestWorker *worker);
    void analysisRuleGetAnalysisRulesCallback(OAIHttpRequestWorker *worker);
    void analysisRuleGetByPathCallback(OAIHttpRequestWorker *worker);
    void analysisRuleUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analysisRuleCreateAnalysisRuleSignal();
    void analysisRuleDeleteSignal();
    void analysisRuleGetSignal(OAIAnalysisRule summary);
    void analysisRuleGetAnalysisRulesSignal(OAIItems_AnalysisRule summary);
    void analysisRuleGetByPathSignal(OAIAnalysisRule summary);
    void analysisRuleUpdateSignal();


    void analysisRuleCreateAnalysisRuleSignalFull(OAIHttpRequestWorker *worker);
    void analysisRuleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void analysisRuleGetSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisRule summary);
    void analysisRuleGetAnalysisRulesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisRule summary);
    void analysisRuleGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisRule summary);
    void analysisRuleUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use analysisRuleCreateAnalysisRuleSignalError() instead")
    void analysisRuleCreateAnalysisRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleCreateAnalysisRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleDeleteSignalError() instead")
    void analysisRuleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleGetSignalError() instead")
    void analysisRuleGetSignalE(OAIAnalysisRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleGetSignalError(OAIAnalysisRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleGetAnalysisRulesSignalError() instead")
    void analysisRuleGetAnalysisRulesSignalE(OAIItems_AnalysisRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleGetAnalysisRulesSignalError(OAIItems_AnalysisRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleGetByPathSignalError() instead")
    void analysisRuleGetByPathSignalE(OAIAnalysisRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleGetByPathSignalError(OAIAnalysisRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleUpdateSignalError() instead")
    void analysisRuleUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analysisRuleCreateAnalysisRuleSignalErrorFull() instead")
    void analysisRuleCreateAnalysisRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleCreateAnalysisRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleDeleteSignalErrorFull() instead")
    void analysisRuleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleGetSignalErrorFull() instead")
    void analysisRuleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleGetAnalysisRulesSignalErrorFull() instead")
    void analysisRuleGetAnalysisRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleGetAnalysisRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleGetByPathSignalErrorFull() instead")
    void analysisRuleGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisRuleUpdateSignalErrorFull() instead")
    void analysisRuleUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisRuleUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
