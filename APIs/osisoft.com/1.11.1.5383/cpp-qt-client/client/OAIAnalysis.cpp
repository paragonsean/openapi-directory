/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysis::OAIAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysis::OAIAnalysis() {
    this->initializeModel();
}

OAIAnalysis::~OAIAnalysis() {}

void OAIAnalysis::initializeModel() {

    m_analysis_rule_plug_in_name_isSet = false;
    m_analysis_rule_plug_in_name_isValid = false;

    m_auto_created_isSet = false;
    m_auto_created_isValid = false;

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_has_notification_isSet = false;
    m_has_notification_isValid = false;

    m_has_target_isSet = false;
    m_has_target_isValid = false;

    m_has_template_isSet = false;
    m_has_template_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_configured_isSet = false;
    m_is_configured_isValid = false;

    m_is_time_rule_defined_by_template_isSet = false;
    m_is_time_rule_defined_by_template_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_maximum_queue_size_isSet = false;
    m_maximum_queue_size_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_time_isSet = false;
    m_output_time_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_publish_results_isSet = false;
    m_publish_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_web_id_isSet = false;
    m_target_web_id_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_time_rule_plug_in_name_isSet = false;
    m_time_rule_plug_in_name_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysis::fromJsonObject(QJsonObject json) {

    m_analysis_rule_plug_in_name_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule_plug_in_name, json[QString("AnalysisRulePlugInName")]);
    m_analysis_rule_plug_in_name_isSet = !json[QString("AnalysisRulePlugInName")].isNull() && m_analysis_rule_plug_in_name_isValid;

    m_auto_created_isValid = ::OpenAPI::fromJsonValue(m_auto_created, json[QString("AutoCreated")]);
    m_auto_created_isSet = !json[QString("AutoCreated")].isNull() && m_auto_created_isValid;

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("GroupId")]);
    m_group_id_isSet = !json[QString("GroupId")].isNull() && m_group_id_isValid;

    m_has_notification_isValid = ::OpenAPI::fromJsonValue(m_has_notification, json[QString("HasNotification")]);
    m_has_notification_isSet = !json[QString("HasNotification")].isNull() && m_has_notification_isValid;

    m_has_target_isValid = ::OpenAPI::fromJsonValue(m_has_target, json[QString("HasTarget")]);
    m_has_target_isSet = !json[QString("HasTarget")].isNull() && m_has_target_isValid;

    m_has_template_isValid = ::OpenAPI::fromJsonValue(m_has_template, json[QString("HasTemplate")]);
    m_has_template_isSet = !json[QString("HasTemplate")].isNull() && m_has_template_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_configured_isValid = ::OpenAPI::fromJsonValue(m_is_configured, json[QString("IsConfigured")]);
    m_is_configured_isSet = !json[QString("IsConfigured")].isNull() && m_is_configured_isValid;

    m_is_time_rule_defined_by_template_isValid = ::OpenAPI::fromJsonValue(m_is_time_rule_defined_by_template, json[QString("IsTimeRuleDefinedByTemplate")]);
    m_is_time_rule_defined_by_template_isSet = !json[QString("IsTimeRuleDefinedByTemplate")].isNull() && m_is_time_rule_defined_by_template_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_maximum_queue_size_isValid = ::OpenAPI::fromJsonValue(m_maximum_queue_size, json[QString("MaximumQueueSize")]);
    m_maximum_queue_size_isSet = !json[QString("MaximumQueueSize")].isNull() && m_maximum_queue_size_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_output_time_isValid = ::OpenAPI::fromJsonValue(m_output_time, json[QString("OutputTime")]);
    m_output_time_isSet = !json[QString("OutputTime")].isNull() && m_output_time_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_publish_results_isValid = ::OpenAPI::fromJsonValue(m_publish_results, json[QString("PublishResults")]);
    m_publish_results_isSet = !json[QString("PublishResults")].isNull() && m_publish_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_web_id_isValid = ::OpenAPI::fromJsonValue(m_target_web_id, json[QString("TargetWebId")]);
    m_target_web_id_isSet = !json[QString("TargetWebId")].isNull() && m_target_web_id_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_time_rule_plug_in_name_isValid = ::OpenAPI::fromJsonValue(m_time_rule_plug_in_name, json[QString("TimeRulePlugInName")]);
    m_time_rule_plug_in_name_isSet = !json[QString("TimeRulePlugInName")].isNull() && m_time_rule_plug_in_name_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_rule_plug_in_name_isSet) {
        obj.insert(QString("AnalysisRulePlugInName"), ::OpenAPI::toJsonValue(m_analysis_rule_plug_in_name));
    }
    if (m_auto_created_isSet) {
        obj.insert(QString("AutoCreated"), ::OpenAPI::toJsonValue(m_auto_created));
    }
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("GroupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_has_notification_isSet) {
        obj.insert(QString("HasNotification"), ::OpenAPI::toJsonValue(m_has_notification));
    }
    if (m_has_target_isSet) {
        obj.insert(QString("HasTarget"), ::OpenAPI::toJsonValue(m_has_target));
    }
    if (m_has_template_isSet) {
        obj.insert(QString("HasTemplate"), ::OpenAPI::toJsonValue(m_has_template));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_configured_isSet) {
        obj.insert(QString("IsConfigured"), ::OpenAPI::toJsonValue(m_is_configured));
    }
    if (m_is_time_rule_defined_by_template_isSet) {
        obj.insert(QString("IsTimeRuleDefinedByTemplate"), ::OpenAPI::toJsonValue(m_is_time_rule_defined_by_template));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_maximum_queue_size_isSet) {
        obj.insert(QString("MaximumQueueSize"), ::OpenAPI::toJsonValue(m_maximum_queue_size));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_time_isSet) {
        obj.insert(QString("OutputTime"), ::OpenAPI::toJsonValue(m_output_time));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_publish_results_isSet) {
        obj.insert(QString("PublishResults"), ::OpenAPI::toJsonValue(m_publish_results));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_web_id_isSet) {
        obj.insert(QString("TargetWebId"), ::OpenAPI::toJsonValue(m_target_web_id));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_time_rule_plug_in_name_isSet) {
        obj.insert(QString("TimeRulePlugInName"), ::OpenAPI::toJsonValue(m_time_rule_plug_in_name));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QString OAIAnalysis::getAnalysisRulePlugInName() const {
    return m_analysis_rule_plug_in_name;
}
void OAIAnalysis::setAnalysisRulePlugInName(const QString &analysis_rule_plug_in_name) {
    m_analysis_rule_plug_in_name = analysis_rule_plug_in_name;
    m_analysis_rule_plug_in_name_isSet = true;
}

bool OAIAnalysis::is_analysis_rule_plug_in_name_Set() const{
    return m_analysis_rule_plug_in_name_isSet;
}

bool OAIAnalysis::is_analysis_rule_plug_in_name_Valid() const{
    return m_analysis_rule_plug_in_name_isValid;
}

bool OAIAnalysis::isAutoCreated() const {
    return m_auto_created;
}
void OAIAnalysis::setAutoCreated(const bool &auto_created) {
    m_auto_created = auto_created;
    m_auto_created_isSet = true;
}

bool OAIAnalysis::is_auto_created_Set() const{
    return m_auto_created_isSet;
}

bool OAIAnalysis::is_auto_created_Valid() const{
    return m_auto_created_isValid;
}

QList<QString> OAIAnalysis::getCategoryNames() const {
    return m_category_names;
}
void OAIAnalysis::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIAnalysis::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIAnalysis::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIAnalysis::getDescription() const {
    return m_description;
}
void OAIAnalysis::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnalysis::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnalysis::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAnalysis::getGroupId() const {
    return m_group_id;
}
void OAIAnalysis::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIAnalysis::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIAnalysis::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIAnalysis::isHasNotification() const {
    return m_has_notification;
}
void OAIAnalysis::setHasNotification(const bool &has_notification) {
    m_has_notification = has_notification;
    m_has_notification_isSet = true;
}

bool OAIAnalysis::is_has_notification_Set() const{
    return m_has_notification_isSet;
}

bool OAIAnalysis::is_has_notification_Valid() const{
    return m_has_notification_isValid;
}

bool OAIAnalysis::isHasTarget() const {
    return m_has_target;
}
void OAIAnalysis::setHasTarget(const bool &has_target) {
    m_has_target = has_target;
    m_has_target_isSet = true;
}

bool OAIAnalysis::is_has_target_Set() const{
    return m_has_target_isSet;
}

bool OAIAnalysis::is_has_target_Valid() const{
    return m_has_target_isValid;
}

bool OAIAnalysis::isHasTemplate() const {
    return m_has_template;
}
void OAIAnalysis::setHasTemplate(const bool &has_template) {
    m_has_template = has_template;
    m_has_template_isSet = true;
}

bool OAIAnalysis::is_has_template_Set() const{
    return m_has_template_isSet;
}

bool OAIAnalysis::is_has_template_Valid() const{
    return m_has_template_isValid;
}

QString OAIAnalysis::getId() const {
    return m_id;
}
void OAIAnalysis::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnalysis::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnalysis::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAnalysis::isIsConfigured() const {
    return m_is_configured;
}
void OAIAnalysis::setIsConfigured(const bool &is_configured) {
    m_is_configured = is_configured;
    m_is_configured_isSet = true;
}

bool OAIAnalysis::is_is_configured_Set() const{
    return m_is_configured_isSet;
}

bool OAIAnalysis::is_is_configured_Valid() const{
    return m_is_configured_isValid;
}

bool OAIAnalysis::isIsTimeRuleDefinedByTemplate() const {
    return m_is_time_rule_defined_by_template;
}
void OAIAnalysis::setIsTimeRuleDefinedByTemplate(const bool &is_time_rule_defined_by_template) {
    m_is_time_rule_defined_by_template = is_time_rule_defined_by_template;
    m_is_time_rule_defined_by_template_isSet = true;
}

bool OAIAnalysis::is_is_time_rule_defined_by_template_Set() const{
    return m_is_time_rule_defined_by_template_isSet;
}

bool OAIAnalysis::is_is_time_rule_defined_by_template_Valid() const{
    return m_is_time_rule_defined_by_template_isValid;
}

OAIAnalysisLinks OAIAnalysis::getLinks() const {
    return m_links;
}
void OAIAnalysis::setLinks(const OAIAnalysisLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAnalysis::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAnalysis::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIAnalysis::getMaximumQueueSize() const {
    return m_maximum_queue_size;
}
void OAIAnalysis::setMaximumQueueSize(const qint32 &maximum_queue_size) {
    m_maximum_queue_size = maximum_queue_size;
    m_maximum_queue_size_isSet = true;
}

bool OAIAnalysis::is_maximum_queue_size_Set() const{
    return m_maximum_queue_size_isSet;
}

bool OAIAnalysis::is_maximum_queue_size_Valid() const{
    return m_maximum_queue_size_isValid;
}

QString OAIAnalysis::getName() const {
    return m_name;
}
void OAIAnalysis::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysis::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysis::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnalysis::getOutputTime() const {
    return m_output_time;
}
void OAIAnalysis::setOutputTime(const QString &output_time) {
    m_output_time = output_time;
    m_output_time_isSet = true;
}

bool OAIAnalysis::is_output_time_Set() const{
    return m_output_time_isSet;
}

bool OAIAnalysis::is_output_time_Valid() const{
    return m_output_time_isValid;
}

QString OAIAnalysis::getPath() const {
    return m_path;
}
void OAIAnalysis::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAnalysis::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAnalysis::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAnalysis::getPriority() const {
    return m_priority;
}
void OAIAnalysis::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAnalysis::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAnalysis::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIAnalysis::isPublishResults() const {
    return m_publish_results;
}
void OAIAnalysis::setPublishResults(const bool &publish_results) {
    m_publish_results = publish_results;
    m_publish_results_isSet = true;
}

bool OAIAnalysis::is_publish_results_Set() const{
    return m_publish_results_isSet;
}

bool OAIAnalysis::is_publish_results_Valid() const{
    return m_publish_results_isValid;
}

QString OAIAnalysis::getStatus() const {
    return m_status;
}
void OAIAnalysis::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAnalysis::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAnalysis::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAnalysis::getTargetWebId() const {
    return m_target_web_id;
}
void OAIAnalysis::setTargetWebId(const QString &target_web_id) {
    m_target_web_id = target_web_id;
    m_target_web_id_isSet = true;
}

bool OAIAnalysis::is_target_web_id_Set() const{
    return m_target_web_id_isSet;
}

bool OAIAnalysis::is_target_web_id_Valid() const{
    return m_target_web_id_isValid;
}

QString OAIAnalysis::getTemplateName() const {
    return m_template_name;
}
void OAIAnalysis::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIAnalysis::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIAnalysis::is_template_name_Valid() const{
    return m_template_name_isValid;
}

QString OAIAnalysis::getTimeRulePlugInName() const {
    return m_time_rule_plug_in_name;
}
void OAIAnalysis::setTimeRulePlugInName(const QString &time_rule_plug_in_name) {
    m_time_rule_plug_in_name = time_rule_plug_in_name;
    m_time_rule_plug_in_name_isSet = true;
}

bool OAIAnalysis::is_time_rule_plug_in_name_Set() const{
    return m_time_rule_plug_in_name_isSet;
}

bool OAIAnalysis::is_time_rule_plug_in_name_Valid() const{
    return m_time_rule_plug_in_name_isValid;
}

OAIWebException OAIAnalysis::getWebException() const {
    return m_web_exception;
}
void OAIAnalysis::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIAnalysis::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIAnalysis::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIAnalysis::getWebId() const {
    return m_web_id;
}
void OAIAnalysis::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIAnalysis::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIAnalysis::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_rule_plug_in_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_time_rule_defined_by_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_queue_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_rule_plug_in_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
