/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem_EventFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem_EventFrame::OAIItem_EventFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem_EventFrame::OAIItem_EventFrame() {
    this->initializeModel();
}

OAIItem_EventFrame::~OAIItem_EventFrame() {}

void OAIItem_EventFrame::initializeModel() {

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_identifier_type_isSet = false;
    m_identifier_type_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIItem_EventFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem_EventFrame::fromJsonObject(QJsonObject json) {

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("Exception")]);
    m_exception_isSet = !json[QString("Exception")].isNull() && m_exception_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_identifier_type_isValid = ::OpenAPI::fromJsonValue(m_identifier_type, json[QString("IdentifierType")]);
    m_identifier_type_isSet = !json[QString("IdentifierType")].isNull() && m_identifier_type_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("Object")]);
    m_object_isSet = !json[QString("Object")].isNull() && m_object_isValid;
}

QString OAIItem_EventFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem_EventFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_exception.isSet()) {
        obj.insert(QString("Exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_identifier_type_isSet) {
        obj.insert(QString("IdentifierType"), ::OpenAPI::toJsonValue(m_identifier_type));
    }
    if (m_object.isSet()) {
        obj.insert(QString("Object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

OAIErrors OAIItem_EventFrame::getException() const {
    return m_exception;
}
void OAIItem_EventFrame::setException(const OAIErrors &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAIItem_EventFrame::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIItem_EventFrame::is_exception_Valid() const{
    return m_exception_isValid;
}

QString OAIItem_EventFrame::getIdentifier() const {
    return m_identifier;
}
void OAIItem_EventFrame::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIItem_EventFrame::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIItem_EventFrame::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIItem_EventFrame::getIdentifierType() const {
    return m_identifier_type;
}
void OAIItem_EventFrame::setIdentifierType(const QString &identifier_type) {
    m_identifier_type = identifier_type;
    m_identifier_type_isSet = true;
}

bool OAIItem_EventFrame::is_identifier_type_Set() const{
    return m_identifier_type_isSet;
}

bool OAIItem_EventFrame::is_identifier_type_Valid() const{
    return m_identifier_type_isValid;
}

OAIEventFrame OAIItem_EventFrame::getObject() const {
    return m_object;
}
void OAIItem_EventFrame::setObject(const OAIEventFrame &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIItem_EventFrame::is_object_Set() const{
    return m_object_isSet;
}

bool OAIItem_EventFrame::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIItem_EventFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem_EventFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
