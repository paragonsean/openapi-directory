/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisTemplate::OAIAnalysisTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisTemplate::OAIAnalysisTemplate() {
    this->initializeModel();
}

OAIAnalysisTemplate::~OAIAnalysisTemplate() {}

void OAIAnalysisTemplate::initializeModel() {

    m_analysis_rule_plug_in_name_isSet = false;
    m_analysis_rule_plug_in_name_isValid = false;

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_create_enabled_isSet = false;
    m_create_enabled_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_has_notification_template_isSet = false;
    m_has_notification_template_isValid = false;

    m_has_target_isSet = false;
    m_has_target_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_time_isSet = false;
    m_output_time_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_target_name_isSet = false;
    m_target_name_isValid = false;

    m_time_rule_plug_in_name_isSet = false;
    m_time_rule_plug_in_name_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIAnalysisTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisTemplate::fromJsonObject(QJsonObject json) {

    m_analysis_rule_plug_in_name_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule_plug_in_name, json[QString("AnalysisRulePlugInName")]);
    m_analysis_rule_plug_in_name_isSet = !json[QString("AnalysisRulePlugInName")].isNull() && m_analysis_rule_plug_in_name_isValid;

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_create_enabled_isValid = ::OpenAPI::fromJsonValue(m_create_enabled, json[QString("CreateEnabled")]);
    m_create_enabled_isSet = !json[QString("CreateEnabled")].isNull() && m_create_enabled_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("GroupId")]);
    m_group_id_isSet = !json[QString("GroupId")].isNull() && m_group_id_isValid;

    m_has_notification_template_isValid = ::OpenAPI::fromJsonValue(m_has_notification_template, json[QString("HasNotificationTemplate")]);
    m_has_notification_template_isSet = !json[QString("HasNotificationTemplate")].isNull() && m_has_notification_template_isValid;

    m_has_target_isValid = ::OpenAPI::fromJsonValue(m_has_target, json[QString("HasTarget")]);
    m_has_target_isSet = !json[QString("HasTarget")].isNull() && m_has_target_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_output_time_isValid = ::OpenAPI::fromJsonValue(m_output_time, json[QString("OutputTime")]);
    m_output_time_isSet = !json[QString("OutputTime")].isNull() && m_output_time_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_target_name_isValid = ::OpenAPI::fromJsonValue(m_target_name, json[QString("TargetName")]);
    m_target_name_isSet = !json[QString("TargetName")].isNull() && m_target_name_isValid;

    m_time_rule_plug_in_name_isValid = ::OpenAPI::fromJsonValue(m_time_rule_plug_in_name, json[QString("TimeRulePlugInName")]);
    m_time_rule_plug_in_name_isSet = !json[QString("TimeRulePlugInName")].isNull() && m_time_rule_plug_in_name_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIAnalysisTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_rule_plug_in_name_isSet) {
        obj.insert(QString("AnalysisRulePlugInName"), ::OpenAPI::toJsonValue(m_analysis_rule_plug_in_name));
    }
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_create_enabled_isSet) {
        obj.insert(QString("CreateEnabled"), ::OpenAPI::toJsonValue(m_create_enabled));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("GroupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_has_notification_template_isSet) {
        obj.insert(QString("HasNotificationTemplate"), ::OpenAPI::toJsonValue(m_has_notification_template));
    }
    if (m_has_target_isSet) {
        obj.insert(QString("HasTarget"), ::OpenAPI::toJsonValue(m_has_target));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_time_isSet) {
        obj.insert(QString("OutputTime"), ::OpenAPI::toJsonValue(m_output_time));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_target_name_isSet) {
        obj.insert(QString("TargetName"), ::OpenAPI::toJsonValue(m_target_name));
    }
    if (m_time_rule_plug_in_name_isSet) {
        obj.insert(QString("TimeRulePlugInName"), ::OpenAPI::toJsonValue(m_time_rule_plug_in_name));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QString OAIAnalysisTemplate::getAnalysisRulePlugInName() const {
    return m_analysis_rule_plug_in_name;
}
void OAIAnalysisTemplate::setAnalysisRulePlugInName(const QString &analysis_rule_plug_in_name) {
    m_analysis_rule_plug_in_name = analysis_rule_plug_in_name;
    m_analysis_rule_plug_in_name_isSet = true;
}

bool OAIAnalysisTemplate::is_analysis_rule_plug_in_name_Set() const{
    return m_analysis_rule_plug_in_name_isSet;
}

bool OAIAnalysisTemplate::is_analysis_rule_plug_in_name_Valid() const{
    return m_analysis_rule_plug_in_name_isValid;
}

QList<QString> OAIAnalysisTemplate::getCategoryNames() const {
    return m_category_names;
}
void OAIAnalysisTemplate::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIAnalysisTemplate::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIAnalysisTemplate::is_category_names_Valid() const{
    return m_category_names_isValid;
}

bool OAIAnalysisTemplate::isCreateEnabled() const {
    return m_create_enabled;
}
void OAIAnalysisTemplate::setCreateEnabled(const bool &create_enabled) {
    m_create_enabled = create_enabled;
    m_create_enabled_isSet = true;
}

bool OAIAnalysisTemplate::is_create_enabled_Set() const{
    return m_create_enabled_isSet;
}

bool OAIAnalysisTemplate::is_create_enabled_Valid() const{
    return m_create_enabled_isValid;
}

QString OAIAnalysisTemplate::getDescription() const {
    return m_description;
}
void OAIAnalysisTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnalysisTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnalysisTemplate::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAnalysisTemplate::getGroupId() const {
    return m_group_id;
}
void OAIAnalysisTemplate::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIAnalysisTemplate::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIAnalysisTemplate::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIAnalysisTemplate::isHasNotificationTemplate() const {
    return m_has_notification_template;
}
void OAIAnalysisTemplate::setHasNotificationTemplate(const bool &has_notification_template) {
    m_has_notification_template = has_notification_template;
    m_has_notification_template_isSet = true;
}

bool OAIAnalysisTemplate::is_has_notification_template_Set() const{
    return m_has_notification_template_isSet;
}

bool OAIAnalysisTemplate::is_has_notification_template_Valid() const{
    return m_has_notification_template_isValid;
}

bool OAIAnalysisTemplate::isHasTarget() const {
    return m_has_target;
}
void OAIAnalysisTemplate::setHasTarget(const bool &has_target) {
    m_has_target = has_target;
    m_has_target_isSet = true;
}

bool OAIAnalysisTemplate::is_has_target_Set() const{
    return m_has_target_isSet;
}

bool OAIAnalysisTemplate::is_has_target_Valid() const{
    return m_has_target_isValid;
}

QString OAIAnalysisTemplate::getId() const {
    return m_id;
}
void OAIAnalysisTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnalysisTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnalysisTemplate::is_id_Valid() const{
    return m_id_isValid;
}

OAIAnalysisTemplateLinks OAIAnalysisTemplate::getLinks() const {
    return m_links;
}
void OAIAnalysisTemplate::setLinks(const OAIAnalysisTemplateLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAnalysisTemplate::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAnalysisTemplate::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIAnalysisTemplate::getName() const {
    return m_name;
}
void OAIAnalysisTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysisTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysisTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnalysisTemplate::getOutputTime() const {
    return m_output_time;
}
void OAIAnalysisTemplate::setOutputTime(const QString &output_time) {
    m_output_time = output_time;
    m_output_time_isSet = true;
}

bool OAIAnalysisTemplate::is_output_time_Set() const{
    return m_output_time_isSet;
}

bool OAIAnalysisTemplate::is_output_time_Valid() const{
    return m_output_time_isValid;
}

QString OAIAnalysisTemplate::getPath() const {
    return m_path;
}
void OAIAnalysisTemplate::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAnalysisTemplate::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAnalysisTemplate::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAnalysisTemplate::getTargetName() const {
    return m_target_name;
}
void OAIAnalysisTemplate::setTargetName(const QString &target_name) {
    m_target_name = target_name;
    m_target_name_isSet = true;
}

bool OAIAnalysisTemplate::is_target_name_Set() const{
    return m_target_name_isSet;
}

bool OAIAnalysisTemplate::is_target_name_Valid() const{
    return m_target_name_isValid;
}

QString OAIAnalysisTemplate::getTimeRulePlugInName() const {
    return m_time_rule_plug_in_name;
}
void OAIAnalysisTemplate::setTimeRulePlugInName(const QString &time_rule_plug_in_name) {
    m_time_rule_plug_in_name = time_rule_plug_in_name;
    m_time_rule_plug_in_name_isSet = true;
}

bool OAIAnalysisTemplate::is_time_rule_plug_in_name_Set() const{
    return m_time_rule_plug_in_name_isSet;
}

bool OAIAnalysisTemplate::is_time_rule_plug_in_name_Valid() const{
    return m_time_rule_plug_in_name_isValid;
}

OAIWebException OAIAnalysisTemplate::getWebException() const {
    return m_web_exception;
}
void OAIAnalysisTemplate::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIAnalysisTemplate::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIAnalysisTemplate::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIAnalysisTemplate::getWebId() const {
    return m_web_id;
}
void OAIAnalysisTemplate::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIAnalysisTemplate::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIAnalysisTemplate::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIAnalysisTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_rule_plug_in_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_notification_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_rule_plug_in_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
