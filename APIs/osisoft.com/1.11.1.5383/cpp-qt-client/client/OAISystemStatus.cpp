/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemStatus::OAISystemStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemStatus::OAISystemStatus() {
    this->initializeModel();
}

OAISystemStatus::~OAISystemStatus() {}

void OAISystemStatus::initializeModel() {

    m_cache_instances_isSet = false;
    m_cache_instances_isValid = false;

    m_server_time_isSet = false;
    m_server_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_up_time_in_minutes_isSet = false;
    m_up_time_in_minutes_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAISystemStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemStatus::fromJsonObject(QJsonObject json) {

    m_cache_instances_isValid = ::OpenAPI::fromJsonValue(m_cache_instances, json[QString("CacheInstances")]);
    m_cache_instances_isSet = !json[QString("CacheInstances")].isNull() && m_cache_instances_isValid;

    m_server_time_isValid = ::OpenAPI::fromJsonValue(m_server_time, json[QString("ServerTime")]);
    m_server_time_isSet = !json[QString("ServerTime")].isNull() && m_server_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_up_time_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_up_time_in_minutes, json[QString("UpTimeInMinutes")]);
    m_up_time_in_minutes_isSet = !json[QString("UpTimeInMinutes")].isNull() && m_up_time_in_minutes_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAISystemStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_instances_isSet) {
        obj.insert(QString("CacheInstances"), ::OpenAPI::toJsonValue(m_cache_instances));
    }
    if (m_server_time_isSet) {
        obj.insert(QString("ServerTime"), ::OpenAPI::toJsonValue(m_server_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_up_time_in_minutes_isSet) {
        obj.insert(QString("UpTimeInMinutes"), ::OpenAPI::toJsonValue(m_up_time_in_minutes));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

qint32 OAISystemStatus::getCacheInstances() const {
    return m_cache_instances;
}
void OAISystemStatus::setCacheInstances(const qint32 &cache_instances) {
    m_cache_instances = cache_instances;
    m_cache_instances_isSet = true;
}

bool OAISystemStatus::is_cache_instances_Set() const{
    return m_cache_instances_isSet;
}

bool OAISystemStatus::is_cache_instances_Valid() const{
    return m_cache_instances_isValid;
}

QDateTime OAISystemStatus::getServerTime() const {
    return m_server_time;
}
void OAISystemStatus::setServerTime(const QDateTime &server_time) {
    m_server_time = server_time;
    m_server_time_isSet = true;
}

bool OAISystemStatus::is_server_time_Set() const{
    return m_server_time_isSet;
}

bool OAISystemStatus::is_server_time_Valid() const{
    return m_server_time_isValid;
}

QString OAISystemStatus::getState() const {
    return m_state;
}
void OAISystemStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISystemStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAISystemStatus::is_state_Valid() const{
    return m_state_isValid;
}

double OAISystemStatus::getUpTimeInMinutes() const {
    return m_up_time_in_minutes;
}
void OAISystemStatus::setUpTimeInMinutes(const double &up_time_in_minutes) {
    m_up_time_in_minutes = up_time_in_minutes;
    m_up_time_in_minutes_isSet = true;
}

bool OAISystemStatus::is_up_time_in_minutes_Set() const{
    return m_up_time_in_minutes_isSet;
}

bool OAISystemStatus::is_up_time_in_minutes_Valid() const{
    return m_up_time_in_minutes_isValid;
}

OAIWebException OAISystemStatus::getWebException() const {
    return m_web_exception;
}
void OAISystemStatus::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAISystemStatus::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAISystemStatus::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAISystemStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_time_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
