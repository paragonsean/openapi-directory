/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssetDatabaseApi_H
#define OAI_OAIAssetDatabaseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisCategory.h"
#include "OAIAnalysisTemplate.h"
#include "OAIAssetDatabase.h"
#include "OAIAttributeCategory.h"
#include "OAIElement.h"
#include "OAIElementCategory.h"
#include "OAIElementTemplate.h"
#include "OAIEnumerationSet.h"
#include "OAIErrors.h"
#include "OAIEventFrame.h"
#include "OAIItems_Analysis.h"
#include "OAIItems_AnalysisCategory.h"
#include "OAIItems_AnalysisTemplate.h"
#include "OAIItems_Attribute.h"
#include "OAIItems_AttributeCategory.h"
#include "OAIItems_Element.h"
#include "OAIItems_ElementCategory.h"
#include "OAIItems_ElementTemplate.h"
#include "OAIItems_EnumerationSet.h"
#include "OAIItems_EventFrame.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAIItems_Table.h"
#include "OAIItems_TableCategory.h"
#include "OAISecurityEntry.h"
#include "OAITable.h"
#include "OAITableCategory.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssetDatabaseApi : public QObject {
    Q_OBJECT

public:
    OAIAssetDatabaseApi(const int timeOut = 0);
    ~OAIAssetDatabaseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  referenced_element_web_id QList<QString> [required]
    * @param[in]  reference_type QString [optional]
    */
    virtual void assetDatabaseAddReferencedElement(const QString &web_id, const QList<QString> &referenced_element_web_id, const ::OpenAPI::OptionalParam<QString> &reference_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  analysis_category OAIAnalysisCategory [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateAnalysisCategory(const QString &web_id, const OAIAnalysisCategory &analysis_category, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIAnalysisTemplate [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateAnalysisTemplate(const QString &web_id, const OAIAnalysisTemplate &r_template, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  attribute_category OAIAttributeCategory [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateAttributeCategory(const QString &web_id, const OAIAttributeCategory &attribute_category, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  element OAIElement [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateElement(const QString &web_id, const OAIElement &element, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  element_category OAIElementCategory [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateElementCategory(const QString &web_id, const OAIElementCategory &element_category, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIElementTemplate [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateElementTemplate(const QString &web_id, const OAIElementTemplate &r_template, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  enumeration_set OAIEnumerationSet [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateEnumerationSet(const QString &web_id, const OAIEnumerationSet &enumeration_set, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  event_frame OAIEventFrame [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateEventFrame(const QString &web_id, const OAIEventFrame &event_frame, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  security_item QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  table OAITable [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateTable(const QString &web_id, const OAITable &table, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  table_category OAITableCategory [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseCreateTableCategory(const QString &web_id, const OAITableCategory &table_category, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void assetDatabaseDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  security_item QString [optional]
    */
    virtual void assetDatabaseDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  end_time QString [optional]
    * @param[in]  export_mode QList<QString> [optional]
    * @param[in]  start_time QString [optional]
    */
    virtual void assetDatabaseExport(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &export_mode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  field QList<QString> [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseFindAnalyses(const QString &web_id, const QList<QString> &field, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  attribute_category QString [optional]
    * @param[in]  attribute_description_filter QString [optional]
    * @param[in]  attribute_name_filter QString [optional]
    * @param[in]  attribute_type QString [optional]
    * @param[in]  element_category QString [optional]
    * @param[in]  element_description_filter QString [optional]
    * @param[in]  element_name_filter QString [optional]
    * @param[in]  element_template QString [optional]
    * @param[in]  element_type QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseFindElementAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  attribute_category QString [optional]
    * @param[in]  attribute_description_filter QString [optional]
    * @param[in]  attribute_name_filter QString [optional]
    * @param[in]  attribute_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  event_frame_category QString [optional]
    * @param[in]  event_frame_description_filter QString [optional]
    * @param[in]  event_frame_name_filter QString [optional]
    * @param[in]  event_frame_template QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  referenced_element_name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  search_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseFindEventFrameAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_frame_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetAnalysisCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  field QList<QString> [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetAnalysisTemplates(const QString &web_id, const QList<QString> &field, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetAttributeCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetElementCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  field QList<QString> [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetElementTemplates(const QString &web_id, const QList<QString> &field, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  description_filter QString [optional]
    * @param[in]  element_type QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetElements(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetEnumerationSets(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  can_be_acknowledged bool [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  is_acknowledged bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  referenced_element_name_filter QString [optional]
    * @param[in]  referenced_element_template_name QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  search_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  severity QList<QString> [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetEventFrames(const QString &web_id, const ::OpenAPI::OptionalParam<bool> &can_be_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &referenced_element_template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &severity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  description_filter QString [optional]
    * @param[in]  element_type QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetReferencedElements(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &element_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_item QList<QString> [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetSecurity(const QString &web_id, const QList<QString> &security_item, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  security_item QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_item QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetTableCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void assetDatabaseGetTables(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  import_mode QList<QString> [optional]
    */
    virtual void assetDatabaseImport(const QString &web_id, const ::OpenAPI::OptionalParam<QList<QString>> &import_mode = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  referenced_element_web_id QList<QString> [required]
    */
    virtual void assetDatabaseRemoveReferencedElement(const QString &web_id, const QList<QString> &referenced_element_web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  database OAIAssetDatabase [required]
    */
    virtual void assetDatabaseUpdate(const QString &web_id, const OAIAssetDatabase &database);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  security_item QString [optional]
    */
    virtual void assetDatabaseUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &security_item = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assetDatabaseAddReferencedElementCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateAnalysisCategoryCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateAnalysisTemplateCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateAttributeCategoryCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateElementCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateElementCategoryCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateElementTemplateCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateEnumerationSetCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateEventFrameCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateTableCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateTableCategoryCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseDeleteCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseExportCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseFindAnalysesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseFindElementAttributesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseFindEventFrameAttributesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetAnalysisCategoriesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetAnalysisTemplatesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetAttributeCategoriesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetByPathCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetElementCategoriesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetElementTemplatesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetElementsCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetEnumerationSetsCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetEventFramesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetReferencedElementsCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetSecurityCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetTableCategoriesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseGetTablesCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseImportCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseRemoveReferencedElementCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseUpdateCallback(OAIHttpRequestWorker *worker);
    void assetDatabaseUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assetDatabaseAddReferencedElementSignal();
    void assetDatabaseCreateAnalysisCategorySignal();
    void assetDatabaseCreateAnalysisTemplateSignal();
    void assetDatabaseCreateAttributeCategorySignal();
    void assetDatabaseCreateElementSignal();
    void assetDatabaseCreateElementCategorySignal();
    void assetDatabaseCreateElementTemplateSignal();
    void assetDatabaseCreateEnumerationSetSignal();
    void assetDatabaseCreateEventFrameSignal();
    void assetDatabaseCreateSecurityEntrySignal();
    void assetDatabaseCreateTableSignal();
    void assetDatabaseCreateTableCategorySignal();
    void assetDatabaseDeleteSignal();
    void assetDatabaseDeleteSecurityEntrySignal();
    void assetDatabaseExportSignal();
    void assetDatabaseFindAnalysesSignal(OAIItems_Analysis summary);
    void assetDatabaseFindElementAttributesSignal(OAIItems_Attribute summary);
    void assetDatabaseFindEventFrameAttributesSignal(OAIItems_Attribute summary);
    void assetDatabaseGetSignal(OAIAssetDatabase summary);
    void assetDatabaseGetAnalysisCategoriesSignal(OAIItems_AnalysisCategory summary);
    void assetDatabaseGetAnalysisTemplatesSignal(OAIItems_AnalysisTemplate summary);
    void assetDatabaseGetAttributeCategoriesSignal(OAIItems_AttributeCategory summary);
    void assetDatabaseGetByPathSignal(OAIAssetDatabase summary);
    void assetDatabaseGetElementCategoriesSignal(OAIItems_ElementCategory summary);
    void assetDatabaseGetElementTemplatesSignal(OAIItems_ElementTemplate summary);
    void assetDatabaseGetElementsSignal(OAIItems_Element summary);
    void assetDatabaseGetEnumerationSetsSignal(OAIItems_EnumerationSet summary);
    void assetDatabaseGetEventFramesSignal(OAIItems_EventFrame summary);
    void assetDatabaseGetReferencedElementsSignal(OAIItems_Element summary);
    void assetDatabaseGetSecuritySignal(OAIItems_SecurityRights summary);
    void assetDatabaseGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void assetDatabaseGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void assetDatabaseGetTableCategoriesSignal(OAIItems_TableCategory summary);
    void assetDatabaseGetTablesSignal(OAIItems_Table summary);
    void assetDatabaseImportSignal();
    void assetDatabaseRemoveReferencedElementSignal();
    void assetDatabaseUpdateSignal();
    void assetDatabaseUpdateSecurityEntrySignal();


    void assetDatabaseAddReferencedElementSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateAnalysisCategorySignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateAnalysisTemplateSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateAttributeCategorySignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateElementSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateElementCategorySignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateElementTemplateSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateEnumerationSetSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateEventFrameSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateTableSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseCreateTableCategorySignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseDeleteSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseExportSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseFindAnalysesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Analysis summary);
    void assetDatabaseFindElementAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void assetDatabaseFindEventFrameAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void assetDatabaseGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetDatabase summary);
    void assetDatabaseGetAnalysisCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisCategory summary);
    void assetDatabaseGetAnalysisTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisTemplate summary);
    void assetDatabaseGetAttributeCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AttributeCategory summary);
    void assetDatabaseGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAssetDatabase summary);
    void assetDatabaseGetElementCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementCategory summary);
    void assetDatabaseGetElementTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementTemplate summary);
    void assetDatabaseGetElementsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void assetDatabaseGetEnumerationSetsSignalFull(OAIHttpRequestWorker *worker, OAIItems_EnumerationSet summary);
    void assetDatabaseGetEventFramesSignalFull(OAIHttpRequestWorker *worker, OAIItems_EventFrame summary);
    void assetDatabaseGetReferencedElementsSignalFull(OAIHttpRequestWorker *worker, OAIItems_Element summary);
    void assetDatabaseGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void assetDatabaseGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void assetDatabaseGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void assetDatabaseGetTableCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_TableCategory summary);
    void assetDatabaseGetTablesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Table summary);
    void assetDatabaseImportSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseRemoveReferencedElementSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseUpdateSignalFull(OAIHttpRequestWorker *worker);
    void assetDatabaseUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use assetDatabaseAddReferencedElementSignalError() instead")
    void assetDatabaseAddReferencedElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseAddReferencedElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateAnalysisCategorySignalError() instead")
    void assetDatabaseCreateAnalysisCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateAnalysisCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateAnalysisTemplateSignalError() instead")
    void assetDatabaseCreateAnalysisTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateAnalysisTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateAttributeCategorySignalError() instead")
    void assetDatabaseCreateAttributeCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateAttributeCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateElementSignalError() instead")
    void assetDatabaseCreateElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateElementCategorySignalError() instead")
    void assetDatabaseCreateElementCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateElementCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateElementTemplateSignalError() instead")
    void assetDatabaseCreateElementTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateElementTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateEnumerationSetSignalError() instead")
    void assetDatabaseCreateEnumerationSetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateEnumerationSetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateEventFrameSignalError() instead")
    void assetDatabaseCreateEventFrameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateEventFrameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateSecurityEntrySignalError() instead")
    void assetDatabaseCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateTableSignalError() instead")
    void assetDatabaseCreateTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateTableCategorySignalError() instead")
    void assetDatabaseCreateTableCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateTableCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseDeleteSignalError() instead")
    void assetDatabaseDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseDeleteSecurityEntrySignalError() instead")
    void assetDatabaseDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseExportSignalError() instead")
    void assetDatabaseExportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseExportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseFindAnalysesSignalError() instead")
    void assetDatabaseFindAnalysesSignalE(OAIItems_Analysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseFindAnalysesSignalError(OAIItems_Analysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseFindElementAttributesSignalError() instead")
    void assetDatabaseFindElementAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseFindElementAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseFindEventFrameAttributesSignalError() instead")
    void assetDatabaseFindEventFrameAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseFindEventFrameAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSignalError() instead")
    void assetDatabaseGetSignalE(OAIAssetDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSignalError(OAIAssetDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetAnalysisCategoriesSignalError() instead")
    void assetDatabaseGetAnalysisCategoriesSignalE(OAIItems_AnalysisCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetAnalysisCategoriesSignalError(OAIItems_AnalysisCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetAnalysisTemplatesSignalError() instead")
    void assetDatabaseGetAnalysisTemplatesSignalE(OAIItems_AnalysisTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetAnalysisTemplatesSignalError(OAIItems_AnalysisTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetAttributeCategoriesSignalError() instead")
    void assetDatabaseGetAttributeCategoriesSignalE(OAIItems_AttributeCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetAttributeCategoriesSignalError(OAIItems_AttributeCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetByPathSignalError() instead")
    void assetDatabaseGetByPathSignalE(OAIAssetDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetByPathSignalError(OAIAssetDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetElementCategoriesSignalError() instead")
    void assetDatabaseGetElementCategoriesSignalE(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetElementCategoriesSignalError(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetElementTemplatesSignalError() instead")
    void assetDatabaseGetElementTemplatesSignalE(OAIItems_ElementTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetElementTemplatesSignalError(OAIItems_ElementTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetElementsSignalError() instead")
    void assetDatabaseGetElementsSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetElementsSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetEnumerationSetsSignalError() instead")
    void assetDatabaseGetEnumerationSetsSignalE(OAIItems_EnumerationSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetEnumerationSetsSignalError(OAIItems_EnumerationSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetEventFramesSignalError() instead")
    void assetDatabaseGetEventFramesSignalE(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetEventFramesSignalError(OAIItems_EventFrame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetReferencedElementsSignalError() instead")
    void assetDatabaseGetReferencedElementsSignalE(OAIItems_Element summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetReferencedElementsSignalError(OAIItems_Element summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSecuritySignalError() instead")
    void assetDatabaseGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSecurityEntriesSignalError() instead")
    void assetDatabaseGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSecurityEntryByNameSignalError() instead")
    void assetDatabaseGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetTableCategoriesSignalError() instead")
    void assetDatabaseGetTableCategoriesSignalE(OAIItems_TableCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetTableCategoriesSignalError(OAIItems_TableCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetTablesSignalError() instead")
    void assetDatabaseGetTablesSignalE(OAIItems_Table summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetTablesSignalError(OAIItems_Table summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseImportSignalError() instead")
    void assetDatabaseImportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseImportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseRemoveReferencedElementSignalError() instead")
    void assetDatabaseRemoveReferencedElementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseRemoveReferencedElementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseUpdateSignalError() instead")
    void assetDatabaseUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseUpdateSecurityEntrySignalError() instead")
    void assetDatabaseUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assetDatabaseAddReferencedElementSignalErrorFull() instead")
    void assetDatabaseAddReferencedElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseAddReferencedElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateAnalysisCategorySignalErrorFull() instead")
    void assetDatabaseCreateAnalysisCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateAnalysisCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateAnalysisTemplateSignalErrorFull() instead")
    void assetDatabaseCreateAnalysisTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateAnalysisTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateAttributeCategorySignalErrorFull() instead")
    void assetDatabaseCreateAttributeCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateAttributeCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateElementSignalErrorFull() instead")
    void assetDatabaseCreateElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateElementCategorySignalErrorFull() instead")
    void assetDatabaseCreateElementCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateElementCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateElementTemplateSignalErrorFull() instead")
    void assetDatabaseCreateElementTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateElementTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateEnumerationSetSignalErrorFull() instead")
    void assetDatabaseCreateEnumerationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateEnumerationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateEventFrameSignalErrorFull() instead")
    void assetDatabaseCreateEventFrameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateEventFrameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateSecurityEntrySignalErrorFull() instead")
    void assetDatabaseCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateTableSignalErrorFull() instead")
    void assetDatabaseCreateTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseCreateTableCategorySignalErrorFull() instead")
    void assetDatabaseCreateTableCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseCreateTableCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseDeleteSignalErrorFull() instead")
    void assetDatabaseDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseDeleteSecurityEntrySignalErrorFull() instead")
    void assetDatabaseDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseExportSignalErrorFull() instead")
    void assetDatabaseExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseFindAnalysesSignalErrorFull() instead")
    void assetDatabaseFindAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseFindAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseFindElementAttributesSignalErrorFull() instead")
    void assetDatabaseFindElementAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseFindElementAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseFindEventFrameAttributesSignalErrorFull() instead")
    void assetDatabaseFindEventFrameAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseFindEventFrameAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSignalErrorFull() instead")
    void assetDatabaseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetAnalysisCategoriesSignalErrorFull() instead")
    void assetDatabaseGetAnalysisCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetAnalysisCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetAnalysisTemplatesSignalErrorFull() instead")
    void assetDatabaseGetAnalysisTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetAnalysisTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetAttributeCategoriesSignalErrorFull() instead")
    void assetDatabaseGetAttributeCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetAttributeCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetByPathSignalErrorFull() instead")
    void assetDatabaseGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetElementCategoriesSignalErrorFull() instead")
    void assetDatabaseGetElementCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetElementCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetElementTemplatesSignalErrorFull() instead")
    void assetDatabaseGetElementTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetElementTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetElementsSignalErrorFull() instead")
    void assetDatabaseGetElementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetElementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetEnumerationSetsSignalErrorFull() instead")
    void assetDatabaseGetEnumerationSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetEnumerationSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetEventFramesSignalErrorFull() instead")
    void assetDatabaseGetEventFramesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetEventFramesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetReferencedElementsSignalErrorFull() instead")
    void assetDatabaseGetReferencedElementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetReferencedElementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSecuritySignalErrorFull() instead")
    void assetDatabaseGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSecurityEntriesSignalErrorFull() instead")
    void assetDatabaseGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetSecurityEntryByNameSignalErrorFull() instead")
    void assetDatabaseGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetTableCategoriesSignalErrorFull() instead")
    void assetDatabaseGetTableCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetTableCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseGetTablesSignalErrorFull() instead")
    void assetDatabaseGetTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseGetTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseImportSignalErrorFull() instead")
    void assetDatabaseImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseRemoveReferencedElementSignalErrorFull() instead")
    void assetDatabaseRemoveReferencedElementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseRemoveReferencedElementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseUpdateSignalErrorFull() instead")
    void assetDatabaseUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetDatabaseUpdateSecurityEntrySignalErrorFull() instead")
    void assetDatabaseUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetDatabaseUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
