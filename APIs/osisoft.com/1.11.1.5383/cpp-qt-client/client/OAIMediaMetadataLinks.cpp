/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaMetadataLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaMetadataLinks::OAIMediaMetadataLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaMetadataLinks::OAIMediaMetadataLinks() {
    this->initializeModel();
}

OAIMediaMetadataLinks::~OAIMediaMetadataLinks() {}

void OAIMediaMetadataLinks::initializeModel() {

    m_media_data_isSet = false;
    m_media_data_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIMediaMetadataLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaMetadataLinks::fromJsonObject(QJsonObject json) {

    m_media_data_isValid = ::OpenAPI::fromJsonValue(m_media_data, json[QString("MediaData")]);
    m_media_data_isSet = !json[QString("MediaData")].isNull() && m_media_data_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;
}

QString OAIMediaMetadataLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaMetadataLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_media_data_isSet) {
        obj.insert(QString("MediaData"), ::OpenAPI::toJsonValue(m_media_data));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QString OAIMediaMetadataLinks::getMediaData() const {
    return m_media_data;
}
void OAIMediaMetadataLinks::setMediaData(const QString &media_data) {
    m_media_data = media_data;
    m_media_data_isSet = true;
}

bool OAIMediaMetadataLinks::is_media_data_Set() const{
    return m_media_data_isSet;
}

bool OAIMediaMetadataLinks::is_media_data_Valid() const{
    return m_media_data_isValid;
}

QString OAIMediaMetadataLinks::getOwner() const {
    return m_owner;
}
void OAIMediaMetadataLinks::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIMediaMetadataLinks::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIMediaMetadataLinks::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIMediaMetadataLinks::getSelf() const {
    return m_self;
}
void OAIMediaMetadataLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIMediaMetadataLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIMediaMetadataLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIMediaMetadataLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaMetadataLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
