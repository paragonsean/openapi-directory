/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIElementTemplateApi_H
#define OAI_OAIElementTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributeTemplate.h"
#include "OAIElementTemplate.h"
#include "OAIErrors.h"
#include "OAIItems_AnalysisTemplate.h"
#include "OAIItems_AttributeTemplate.h"
#include "OAIItems_ElementCategory.h"
#include "OAIItems_ElementTemplate.h"
#include "OAIItems_NotificationRuleTemplate.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAINotificationRuleTemplate.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIElementTemplateApi : public QObject {
    Q_OBJECT

public:
    OAIElementTemplateApi(const int timeOut = 0);
    ~OAIElementTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIAttributeTemplate [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateCreateAttributeTemplate(const QString &web_id, const OAIAttributeTemplate &r_template, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule_template OAINotificationRuleTemplate [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateCreateNotificationRuleTemplate(const QString &web_id, const OAINotificationRuleTemplate &notification_rule_template, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void elementTemplateDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void elementTemplateDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetAnalysisTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  depth_first_traverse bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_descendants bool [optional]
    * @param[in]  show_inherited bool [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetAttributeTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<bool> &depth_first_traverse = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_inherited = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetBaseElementTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_inherited bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_inherited = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_descendants bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetDerivedElementTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetNotificationRuleTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void elementTemplateGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  r_template OAIElementTemplate [required]
    */
    virtual void elementTemplateUpdate(const QString &web_id, const OAIElementTemplate &r_template);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void elementTemplateUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void elementTemplateCreateAttributeTemplateCallback(OAIHttpRequestWorker *worker);
    void elementTemplateCreateNotificationRuleTemplateCallback(OAIHttpRequestWorker *worker);
    void elementTemplateCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void elementTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void elementTemplateDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetAnalysisTemplatesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetAttributeTemplatesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetBaseElementTemplatesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetByPathCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetDerivedElementTemplatesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetNotificationRuleTemplatesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetSecurityCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void elementTemplateGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void elementTemplateUpdateCallback(OAIHttpRequestWorker *worker);
    void elementTemplateUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void elementTemplateCreateAttributeTemplateSignal();
    void elementTemplateCreateNotificationRuleTemplateSignal();
    void elementTemplateCreateSecurityEntrySignal();
    void elementTemplateDeleteSignal();
    void elementTemplateDeleteSecurityEntrySignal();
    void elementTemplateGetSignal(OAIElementTemplate summary);
    void elementTemplateGetAnalysisTemplatesSignal(OAIItems_AnalysisTemplate summary);
    void elementTemplateGetAttributeTemplatesSignal(OAIItems_AttributeTemplate summary);
    void elementTemplateGetBaseElementTemplatesSignal(OAIItems_ElementTemplate summary);
    void elementTemplateGetByPathSignal(OAIElementTemplate summary);
    void elementTemplateGetCategoriesSignal(OAIItems_ElementCategory summary);
    void elementTemplateGetDerivedElementTemplatesSignal(OAIItems_ElementTemplate summary);
    void elementTemplateGetNotificationRuleTemplatesSignal(OAIItems_NotificationRuleTemplate summary);
    void elementTemplateGetSecuritySignal(OAIItems_SecurityRights summary);
    void elementTemplateGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void elementTemplateGetSecurityEntryByNameSignal(OAIItems_SecurityEntry summary);
    void elementTemplateUpdateSignal();
    void elementTemplateUpdateSecurityEntrySignal();


    void elementTemplateCreateAttributeTemplateSignalFull(OAIHttpRequestWorker *worker);
    void elementTemplateCreateNotificationRuleTemplateSignalFull(OAIHttpRequestWorker *worker);
    void elementTemplateCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void elementTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void elementTemplateDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void elementTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAIElementTemplate summary);
    void elementTemplateGetAnalysisTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AnalysisTemplate summary);
    void elementTemplateGetAttributeTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AttributeTemplate summary);
    void elementTemplateGetBaseElementTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementTemplate summary);
    void elementTemplateGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIElementTemplate summary);
    void elementTemplateGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementCategory summary);
    void elementTemplateGetDerivedElementTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_ElementTemplate summary);
    void elementTemplateGetNotificationRuleTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRuleTemplate summary);
    void elementTemplateGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void elementTemplateGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void elementTemplateGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void elementTemplateUpdateSignalFull(OAIHttpRequestWorker *worker);
    void elementTemplateUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use elementTemplateCreateAttributeTemplateSignalError() instead")
    void elementTemplateCreateAttributeTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateCreateAttributeTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateCreateNotificationRuleTemplateSignalError() instead")
    void elementTemplateCreateNotificationRuleTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateCreateNotificationRuleTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateCreateSecurityEntrySignalError() instead")
    void elementTemplateCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateDeleteSignalError() instead")
    void elementTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateDeleteSecurityEntrySignalError() instead")
    void elementTemplateDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSignalError() instead")
    void elementTemplateGetSignalE(OAIElementTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSignalError(OAIElementTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetAnalysisTemplatesSignalError() instead")
    void elementTemplateGetAnalysisTemplatesSignalE(OAIItems_AnalysisTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetAnalysisTemplatesSignalError(OAIItems_AnalysisTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetAttributeTemplatesSignalError() instead")
    void elementTemplateGetAttributeTemplatesSignalE(OAIItems_AttributeTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetAttributeTemplatesSignalError(OAIItems_AttributeTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetBaseElementTemplatesSignalError() instead")
    void elementTemplateGetBaseElementTemplatesSignalE(OAIItems_ElementTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetBaseElementTemplatesSignalError(OAIItems_ElementTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetByPathSignalError() instead")
    void elementTemplateGetByPathSignalE(OAIElementTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetByPathSignalError(OAIElementTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetCategoriesSignalError() instead")
    void elementTemplateGetCategoriesSignalE(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetCategoriesSignalError(OAIItems_ElementCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetDerivedElementTemplatesSignalError() instead")
    void elementTemplateGetDerivedElementTemplatesSignalE(OAIItems_ElementTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetDerivedElementTemplatesSignalError(OAIItems_ElementTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetNotificationRuleTemplatesSignalError() instead")
    void elementTemplateGetNotificationRuleTemplatesSignalE(OAIItems_NotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetNotificationRuleTemplatesSignalError(OAIItems_NotificationRuleTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSecuritySignalError() instead")
    void elementTemplateGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSecurityEntriesSignalError() instead")
    void elementTemplateGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSecurityEntryByNameSignalError() instead")
    void elementTemplateGetSecurityEntryByNameSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSecurityEntryByNameSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateUpdateSignalError() instead")
    void elementTemplateUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateUpdateSecurityEntrySignalError() instead")
    void elementTemplateUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use elementTemplateCreateAttributeTemplateSignalErrorFull() instead")
    void elementTemplateCreateAttributeTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateCreateAttributeTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateCreateNotificationRuleTemplateSignalErrorFull() instead")
    void elementTemplateCreateNotificationRuleTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateCreateNotificationRuleTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateCreateSecurityEntrySignalErrorFull() instead")
    void elementTemplateCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateDeleteSignalErrorFull() instead")
    void elementTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateDeleteSecurityEntrySignalErrorFull() instead")
    void elementTemplateDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSignalErrorFull() instead")
    void elementTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetAnalysisTemplatesSignalErrorFull() instead")
    void elementTemplateGetAnalysisTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetAnalysisTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetAttributeTemplatesSignalErrorFull() instead")
    void elementTemplateGetAttributeTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetAttributeTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetBaseElementTemplatesSignalErrorFull() instead")
    void elementTemplateGetBaseElementTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetBaseElementTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetByPathSignalErrorFull() instead")
    void elementTemplateGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetCategoriesSignalErrorFull() instead")
    void elementTemplateGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetDerivedElementTemplatesSignalErrorFull() instead")
    void elementTemplateGetDerivedElementTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetDerivedElementTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetNotificationRuleTemplatesSignalErrorFull() instead")
    void elementTemplateGetNotificationRuleTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetNotificationRuleTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSecuritySignalErrorFull() instead")
    void elementTemplateGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSecurityEntriesSignalErrorFull() instead")
    void elementTemplateGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateGetSecurityEntryByNameSignalErrorFull() instead")
    void elementTemplateGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateUpdateSignalErrorFull() instead")
    void elementTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elementTemplateUpdateSecurityEntrySignalErrorFull() instead")
    void elementTemplateUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementTemplateUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
