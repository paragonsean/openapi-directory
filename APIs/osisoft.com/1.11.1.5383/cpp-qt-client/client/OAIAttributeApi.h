/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttributeApi_H
#define OAI_OAIAttributeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttribute.h"
#include "OAIItems_Attribute.h"
#include "OAIItems_AttributeCategory.h"
#include "OAIItems_Item_Attribute.h"
#include "OAITimedValue.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttributeApi : public QObject {
    Q_OBJECT

public:
    OAIAttributeApi(const int timeOut = 0);
    ~OAIAttributeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  attribute OAIAttribute [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeCreateAttribute(const QString &web_id, const OAIAttribute &attribute, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeCreateConfig(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void attributeDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  trait QList<QString> [optional]
    * @param[in]  trait_category QList<QString> [optional]
    * @param[in]  value_type QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeGetAttributes(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &trait = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &trait_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &value_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  associations QString [optional]
    * @param[in]  database_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeGetAttributesQuery(const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &database_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  associations QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeGetCategories(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  as_parallel bool [optional]
    * @param[in]  associations QString [optional]
    * @param[in]  include_mode QString [optional]
    * @param[in]  path QList<QString> [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id QList<QString> [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void attributeGetMultiple(const ::OpenAPI::OptionalParam<bool> &as_parallel = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &associations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &path = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &web_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    */
    virtual void attributeGetValue(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  value OAITimedValue [required]
    */
    virtual void attributeSetValue(const QString &web_id, const OAITimedValue &value);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  attribute OAIAttribute [required]
    */
    virtual void attributeUpdate(const QString &web_id, const OAIAttribute &attribute);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attributeCreateAttributeCallback(OAIHttpRequestWorker *worker);
    void attributeCreateConfigCallback(OAIHttpRequestWorker *worker);
    void attributeDeleteCallback(OAIHttpRequestWorker *worker);
    void attributeGetCallback(OAIHttpRequestWorker *worker);
    void attributeGetAttributesCallback(OAIHttpRequestWorker *worker);
    void attributeGetAttributesQueryCallback(OAIHttpRequestWorker *worker);
    void attributeGetByPathCallback(OAIHttpRequestWorker *worker);
    void attributeGetCategoriesCallback(OAIHttpRequestWorker *worker);
    void attributeGetMultipleCallback(OAIHttpRequestWorker *worker);
    void attributeGetValueCallback(OAIHttpRequestWorker *worker);
    void attributeSetValueCallback(OAIHttpRequestWorker *worker);
    void attributeUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attributeCreateAttributeSignal();
    void attributeCreateConfigSignal();
    void attributeDeleteSignal();
    void attributeGetSignal(OAIAttribute summary);
    void attributeGetAttributesSignal(OAIItems_Attribute summary);
    void attributeGetAttributesQuerySignal(OAIItems_Attribute summary);
    void attributeGetByPathSignal(OAIAttribute summary);
    void attributeGetCategoriesSignal(OAIItems_AttributeCategory summary);
    void attributeGetMultipleSignal(OAIItems_Item_Attribute summary);
    void attributeGetValueSignal(OAITimedValue summary);
    void attributeSetValueSignal();
    void attributeUpdateSignal();


    void attributeCreateAttributeSignalFull(OAIHttpRequestWorker *worker);
    void attributeCreateConfigSignalFull(OAIHttpRequestWorker *worker);
    void attributeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void attributeGetSignalFull(OAIHttpRequestWorker *worker, OAIAttribute summary);
    void attributeGetAttributesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void attributeGetAttributesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_Attribute summary);
    void attributeGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAttribute summary);
    void attributeGetCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_AttributeCategory summary);
    void attributeGetMultipleSignalFull(OAIHttpRequestWorker *worker, OAIItems_Item_Attribute summary);
    void attributeGetValueSignalFull(OAIHttpRequestWorker *worker, OAITimedValue summary);
    void attributeSetValueSignalFull(OAIHttpRequestWorker *worker);
    void attributeUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use attributeCreateAttributeSignalError() instead")
    void attributeCreateAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeCreateAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeCreateConfigSignalError() instead")
    void attributeCreateConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeCreateConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeDeleteSignalError() instead")
    void attributeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetSignalError() instead")
    void attributeGetSignalE(OAIAttribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetSignalError(OAIAttribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributesSignalError() instead")
    void attributeGetAttributesSignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributesSignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributesQuerySignalError() instead")
    void attributeGetAttributesQuerySignalE(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributesQuerySignalError(OAIItems_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetByPathSignalError() instead")
    void attributeGetByPathSignalE(OAIAttribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetByPathSignalError(OAIAttribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetCategoriesSignalError() instead")
    void attributeGetCategoriesSignalE(OAIItems_AttributeCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetCategoriesSignalError(OAIItems_AttributeCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetMultipleSignalError() instead")
    void attributeGetMultipleSignalE(OAIItems_Item_Attribute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetMultipleSignalError(OAIItems_Item_Attribute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetValueSignalError() instead")
    void attributeGetValueSignalE(OAITimedValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetValueSignalError(OAITimedValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeSetValueSignalError() instead")
    void attributeSetValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeSetValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUpdateSignalError() instead")
    void attributeUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attributeCreateAttributeSignalErrorFull() instead")
    void attributeCreateAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeCreateAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeCreateConfigSignalErrorFull() instead")
    void attributeCreateConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeCreateConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeDeleteSignalErrorFull() instead")
    void attributeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetSignalErrorFull() instead")
    void attributeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributesSignalErrorFull() instead")
    void attributeGetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetAttributesQuerySignalErrorFull() instead")
    void attributeGetAttributesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetAttributesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetByPathSignalErrorFull() instead")
    void attributeGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetCategoriesSignalErrorFull() instead")
    void attributeGetCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetMultipleSignalErrorFull() instead")
    void attributeGetMultipleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetMultipleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGetValueSignalErrorFull() instead")
    void attributeGetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeSetValueSignalErrorFull() instead")
    void attributeSetValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeSetValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUpdateSignalErrorFull() instead")
    void attributeUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
