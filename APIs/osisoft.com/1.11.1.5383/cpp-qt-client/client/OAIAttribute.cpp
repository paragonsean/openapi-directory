/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttribute::OAIAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttribute::OAIAttribute() {
    this->initializeModel();
}

OAIAttribute::~OAIAttribute() {}

void OAIAttribute::initializeModel() {

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_config_string_isSet = false;
    m_config_string_isValid = false;

    m_data_reference_isSet = false;
    m_data_reference_isValid = false;

    m_data_reference_plug_in_isSet = false;
    m_data_reference_plug_in_isValid = false;

    m_default_units_name_isSet = false;
    m_default_units_name_isValid = false;

    m_default_units_name_abbreviation_isSet = false;
    m_default_units_name_abbreviation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_digits_isSet = false;
    m_display_digits_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_configuration_item_isSet = false;
    m_is_configuration_item_isValid = false;

    m_is_excluded_isSet = false;
    m_is_excluded_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_is_manual_data_entry_isSet = false;
    m_is_manual_data_entry_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_span_isSet = false;
    m_span_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_trait_name_isSet = false;
    m_trait_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_qualifier_isSet = false;
    m_type_qualifier_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;

    m_zero_isSet = false;
    m_zero_isValid = false;
}

void OAIAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttribute::fromJsonObject(QJsonObject json) {

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_config_string_isValid = ::OpenAPI::fromJsonValue(m_config_string, json[QString("ConfigString")]);
    m_config_string_isSet = !json[QString("ConfigString")].isNull() && m_config_string_isValid;

    m_data_reference_isValid = ::OpenAPI::fromJsonValue(m_data_reference, json[QString("DataReference")]);
    m_data_reference_isSet = !json[QString("DataReference")].isNull() && m_data_reference_isValid;

    m_data_reference_plug_in_isValid = ::OpenAPI::fromJsonValue(m_data_reference_plug_in, json[QString("DataReferencePlugIn")]);
    m_data_reference_plug_in_isSet = !json[QString("DataReferencePlugIn")].isNull() && m_data_reference_plug_in_isValid;

    m_default_units_name_isValid = ::OpenAPI::fromJsonValue(m_default_units_name, json[QString("DefaultUnitsName")]);
    m_default_units_name_isSet = !json[QString("DefaultUnitsName")].isNull() && m_default_units_name_isValid;

    m_default_units_name_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_default_units_name_abbreviation, json[QString("DefaultUnitsNameAbbreviation")]);
    m_default_units_name_abbreviation_isSet = !json[QString("DefaultUnitsNameAbbreviation")].isNull() && m_default_units_name_abbreviation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_digits_isValid = ::OpenAPI::fromJsonValue(m_display_digits, json[QString("DisplayDigits")]);
    m_display_digits_isSet = !json[QString("DisplayDigits")].isNull() && m_display_digits_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("HasChildren")]);
    m_has_children_isSet = !json[QString("HasChildren")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_configuration_item_isValid = ::OpenAPI::fromJsonValue(m_is_configuration_item, json[QString("IsConfigurationItem")]);
    m_is_configuration_item_isSet = !json[QString("IsConfigurationItem")].isNull() && m_is_configuration_item_isValid;

    m_is_excluded_isValid = ::OpenAPI::fromJsonValue(m_is_excluded, json[QString("IsExcluded")]);
    m_is_excluded_isSet = !json[QString("IsExcluded")].isNull() && m_is_excluded_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("IsHidden")]);
    m_is_hidden_isSet = !json[QString("IsHidden")].isNull() && m_is_hidden_isValid;

    m_is_manual_data_entry_isValid = ::OpenAPI::fromJsonValue(m_is_manual_data_entry, json[QString("IsManualDataEntry")]);
    m_is_manual_data_entry_isSet = !json[QString("IsManualDataEntry")].isNull() && m_is_manual_data_entry_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_span_isValid = ::OpenAPI::fromJsonValue(m_span, json[QString("Span")]);
    m_span_isSet = !json[QString("Span")].isNull() && m_span_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("Step")]);
    m_step_isSet = !json[QString("Step")].isNull() && m_step_isValid;

    m_trait_name_isValid = ::OpenAPI::fromJsonValue(m_trait_name, json[QString("TraitName")]);
    m_trait_name_isSet = !json[QString("TraitName")].isNull() && m_trait_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_qualifier_isValid = ::OpenAPI::fromJsonValue(m_type_qualifier, json[QString("TypeQualifier")]);
    m_type_qualifier_isSet = !json[QString("TypeQualifier")].isNull() && m_type_qualifier_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;

    m_zero_isValid = ::OpenAPI::fromJsonValue(m_zero, json[QString("Zero")]);
    m_zero_isSet = !json[QString("Zero")].isNull() && m_zero_isValid;
}

QString OAIAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_config_string_isSet) {
        obj.insert(QString("ConfigString"), ::OpenAPI::toJsonValue(m_config_string));
    }
    if (m_data_reference.isSet()) {
        obj.insert(QString("DataReference"), ::OpenAPI::toJsonValue(m_data_reference));
    }
    if (m_data_reference_plug_in_isSet) {
        obj.insert(QString("DataReferencePlugIn"), ::OpenAPI::toJsonValue(m_data_reference_plug_in));
    }
    if (m_default_units_name_isSet) {
        obj.insert(QString("DefaultUnitsName"), ::OpenAPI::toJsonValue(m_default_units_name));
    }
    if (m_default_units_name_abbreviation_isSet) {
        obj.insert(QString("DefaultUnitsNameAbbreviation"), ::OpenAPI::toJsonValue(m_default_units_name_abbreviation));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_digits_isSet) {
        obj.insert(QString("DisplayDigits"), ::OpenAPI::toJsonValue(m_display_digits));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("HasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_configuration_item_isSet) {
        obj.insert(QString("IsConfigurationItem"), ::OpenAPI::toJsonValue(m_is_configuration_item));
    }
    if (m_is_excluded_isSet) {
        obj.insert(QString("IsExcluded"), ::OpenAPI::toJsonValue(m_is_excluded));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("IsHidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_is_manual_data_entry_isSet) {
        obj.insert(QString("IsManualDataEntry"), ::OpenAPI::toJsonValue(m_is_manual_data_entry));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_span_isSet) {
        obj.insert(QString("Span"), ::OpenAPI::toJsonValue(m_span));
    }
    if (m_step_isSet) {
        obj.insert(QString("Step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_trait_name_isSet) {
        obj.insert(QString("TraitName"), ::OpenAPI::toJsonValue(m_trait_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_qualifier_isSet) {
        obj.insert(QString("TypeQualifier"), ::OpenAPI::toJsonValue(m_type_qualifier));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    if (m_zero_isSet) {
        obj.insert(QString("Zero"), ::OpenAPI::toJsonValue(m_zero));
    }
    return obj;
}

QList<QString> OAIAttribute::getCategoryNames() const {
    return m_category_names;
}
void OAIAttribute::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIAttribute::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIAttribute::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIAttribute::getConfigString() const {
    return m_config_string;
}
void OAIAttribute::setConfigString(const QString &config_string) {
    m_config_string = config_string;
    m_config_string_isSet = true;
}

bool OAIAttribute::is_config_string_Set() const{
    return m_config_string_isSet;
}

bool OAIAttribute::is_config_string_Valid() const{
    return m_config_string_isValid;
}

OAIDataReference OAIAttribute::getDataReference() const {
    return m_data_reference;
}
void OAIAttribute::setDataReference(const OAIDataReference &data_reference) {
    m_data_reference = data_reference;
    m_data_reference_isSet = true;
}

bool OAIAttribute::is_data_reference_Set() const{
    return m_data_reference_isSet;
}

bool OAIAttribute::is_data_reference_Valid() const{
    return m_data_reference_isValid;
}

QString OAIAttribute::getDataReferencePlugIn() const {
    return m_data_reference_plug_in;
}
void OAIAttribute::setDataReferencePlugIn(const QString &data_reference_plug_in) {
    m_data_reference_plug_in = data_reference_plug_in;
    m_data_reference_plug_in_isSet = true;
}

bool OAIAttribute::is_data_reference_plug_in_Set() const{
    return m_data_reference_plug_in_isSet;
}

bool OAIAttribute::is_data_reference_plug_in_Valid() const{
    return m_data_reference_plug_in_isValid;
}

QString OAIAttribute::getDefaultUnitsName() const {
    return m_default_units_name;
}
void OAIAttribute::setDefaultUnitsName(const QString &default_units_name) {
    m_default_units_name = default_units_name;
    m_default_units_name_isSet = true;
}

bool OAIAttribute::is_default_units_name_Set() const{
    return m_default_units_name_isSet;
}

bool OAIAttribute::is_default_units_name_Valid() const{
    return m_default_units_name_isValid;
}

QString OAIAttribute::getDefaultUnitsNameAbbreviation() const {
    return m_default_units_name_abbreviation;
}
void OAIAttribute::setDefaultUnitsNameAbbreviation(const QString &default_units_name_abbreviation) {
    m_default_units_name_abbreviation = default_units_name_abbreviation;
    m_default_units_name_abbreviation_isSet = true;
}

bool OAIAttribute::is_default_units_name_abbreviation_Set() const{
    return m_default_units_name_abbreviation_isSet;
}

bool OAIAttribute::is_default_units_name_abbreviation_Valid() const{
    return m_default_units_name_abbreviation_isValid;
}

QString OAIAttribute::getDescription() const {
    return m_description;
}
void OAIAttribute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttribute::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttribute::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAttribute::getDisplayDigits() const {
    return m_display_digits;
}
void OAIAttribute::setDisplayDigits(const qint32 &display_digits) {
    m_display_digits = display_digits;
    m_display_digits_isSet = true;
}

bool OAIAttribute::is_display_digits_Set() const{
    return m_display_digits_isSet;
}

bool OAIAttribute::is_display_digits_Valid() const{
    return m_display_digits_isValid;
}

bool OAIAttribute::isHasChildren() const {
    return m_has_children;
}
void OAIAttribute::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIAttribute::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIAttribute::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAIAttribute::getId() const {
    return m_id;
}
void OAIAttribute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttribute::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttribute::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAttribute::isIsConfigurationItem() const {
    return m_is_configuration_item;
}
void OAIAttribute::setIsConfigurationItem(const bool &is_configuration_item) {
    m_is_configuration_item = is_configuration_item;
    m_is_configuration_item_isSet = true;
}

bool OAIAttribute::is_is_configuration_item_Set() const{
    return m_is_configuration_item_isSet;
}

bool OAIAttribute::is_is_configuration_item_Valid() const{
    return m_is_configuration_item_isValid;
}

bool OAIAttribute::isIsExcluded() const {
    return m_is_excluded;
}
void OAIAttribute::setIsExcluded(const bool &is_excluded) {
    m_is_excluded = is_excluded;
    m_is_excluded_isSet = true;
}

bool OAIAttribute::is_is_excluded_Set() const{
    return m_is_excluded_isSet;
}

bool OAIAttribute::is_is_excluded_Valid() const{
    return m_is_excluded_isValid;
}

bool OAIAttribute::isIsHidden() const {
    return m_is_hidden;
}
void OAIAttribute::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIAttribute::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIAttribute::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

bool OAIAttribute::isIsManualDataEntry() const {
    return m_is_manual_data_entry;
}
void OAIAttribute::setIsManualDataEntry(const bool &is_manual_data_entry) {
    m_is_manual_data_entry = is_manual_data_entry;
    m_is_manual_data_entry_isSet = true;
}

bool OAIAttribute::is_is_manual_data_entry_Set() const{
    return m_is_manual_data_entry_isSet;
}

bool OAIAttribute::is_is_manual_data_entry_Valid() const{
    return m_is_manual_data_entry_isValid;
}

OAIAttributeLinks OAIAttribute::getLinks() const {
    return m_links;
}
void OAIAttribute::setLinks(const OAIAttributeLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAttribute::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAttribute::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIAttribute::getName() const {
    return m_name;
}
void OAIAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttribute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttribute::getPath() const {
    return m_path;
}
void OAIAttribute::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAttribute::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAttribute::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIAttribute::getPaths() const {
    return m_paths;
}
void OAIAttribute::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIAttribute::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIAttribute::is_paths_Valid() const{
    return m_paths_isValid;
}

double OAIAttribute::getSpan() const {
    return m_span;
}
void OAIAttribute::setSpan(const double &span) {
    m_span = span;
    m_span_isSet = true;
}

bool OAIAttribute::is_span_Set() const{
    return m_span_isSet;
}

bool OAIAttribute::is_span_Valid() const{
    return m_span_isValid;
}

bool OAIAttribute::isStep() const {
    return m_step;
}
void OAIAttribute::setStep(const bool &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIAttribute::is_step_Set() const{
    return m_step_isSet;
}

bool OAIAttribute::is_step_Valid() const{
    return m_step_isValid;
}

QString OAIAttribute::getTraitName() const {
    return m_trait_name;
}
void OAIAttribute::setTraitName(const QString &trait_name) {
    m_trait_name = trait_name;
    m_trait_name_isSet = true;
}

bool OAIAttribute::is_trait_name_Set() const{
    return m_trait_name_isSet;
}

bool OAIAttribute::is_trait_name_Valid() const{
    return m_trait_name_isValid;
}

QString OAIAttribute::getType() const {
    return m_type;
}
void OAIAttribute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttribute::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAttribute::getTypeQualifier() const {
    return m_type_qualifier;
}
void OAIAttribute::setTypeQualifier(const QString &type_qualifier) {
    m_type_qualifier = type_qualifier;
    m_type_qualifier_isSet = true;
}

bool OAIAttribute::is_type_qualifier_Set() const{
    return m_type_qualifier_isSet;
}

bool OAIAttribute::is_type_qualifier_Valid() const{
    return m_type_qualifier_isValid;
}

OAIWebException OAIAttribute::getWebException() const {
    return m_web_exception;
}
void OAIAttribute::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIAttribute::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIAttribute::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIAttribute::getWebId() const {
    return m_web_id;
}
void OAIAttribute::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIAttribute::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIAttribute::is_web_id_Valid() const{
    return m_web_id_isValid;
}

double OAIAttribute::getZero() const {
    return m_zero;
}
void OAIAttribute::setZero(const double &zero) {
    m_zero = zero;
    m_zero_isSet = true;
}

bool OAIAttribute::is_zero_Set() const{
    return m_zero_isSet;
}

bool OAIAttribute::is_zero_Valid() const{
    return m_zero_isValid;
}

bool OAIAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_reference_plug_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_units_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_units_name_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_configuration_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_data_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zero_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
