/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStreamSetApi_H
#define OAI_OAIStreamSetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIItems_Items_Substatus.h"
#include "OAIItems_StreamSummaries.h"
#include "OAIItems_StreamUpdatesRegister.h"
#include "OAIItems_StreamUpdatesRetrieve.h"
#include "OAIItems_StreamValue.h"
#include "OAIItems_StreamValues.h"
#include "OAIItems_Substatus.h"
#include "OAIStreamValue.h"
#include "OAIStreamValues.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStreamSetApi : public QObject {
    Q_OBJECT

public:
    OAIStreamSetApi(const int timeOut = 0);
    ~OAIStreamSetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  heartbeat_rate qint32 [optional]
    * @param[in]  include_initial_values bool [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetChannel(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &heartbeat_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_initial_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  heartbeat_rate qint32 [optional]
    * @param[in]  include_initial_values bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetChannelAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<qint32> &heartbeat_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_initial_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetEnd(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetEndAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  sync_time QString [optional]
    * @param[in]  sync_time_boundary_type QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetInterpolated(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_time_boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  sync_time QString [optional]
    * @param[in]  sync_time_boundary_type QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetInterpolatedAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_time_boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  time QList<QString> [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetInterpolatedAtTimes(const QString &web_id, const QList<QString> &time, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time QList<QString> [required]
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetInterpolatedAtTimesAdHoc(const QList<QString> &time, const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  base_web_id QString [required]
    * @param[in]  subordinate_web_id QList<QString> [required]
    * @param[in]  boundary_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetJoined(const QString &base_web_id, const QList<QString> &subordinate_web_id, const ::OpenAPI::OptionalParam<QString> &boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  intervals qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetPlot(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &intervals = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  end_time QString [optional]
    * @param[in]  intervals qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetPlotAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &intervals = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  boundary_type QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetRecorded(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  boundary_type QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  include_filtered_values bool [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetRecordedAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &boundary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_filtered_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  time QString [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  retrieval_mode QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetRecordedAtTime(const QString &web_id, const QString &time, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &retrieval_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time QString [required]
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  retrieval_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetRecordedAtTimeAdHoc(const QString &time, const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &retrieval_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  time QList<QString> [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  retrieval_mode QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetRecordedAtTimes(const QString &web_id, const QList<QString> &time, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &retrieval_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time QList<QString> [required]
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  retrieval_mode QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetRecordedAtTimesAdHoc(const QList<QString> &time, const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &retrieval_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  calculation_basis QString [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  sample_interval QString [optional]
    * @param[in]  sample_type QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  summary_duration QString [optional]
    * @param[in]  summary_type QList<QString> [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time_type QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetSummaries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &calculation_basis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summary_duration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &summary_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  calculation_basis QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  filter_expression QString [optional]
    * @param[in]  sample_interval QString [optional]
    * @param[in]  sample_type QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  summary_duration QString [optional]
    * @param[in]  summary_type QList<QString> [optional]
    * @param[in]  time_type QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetSummariesAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &calculation_basis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summary_duration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &summary_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &time_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  category_name QString [optional]
    * @param[in]  name_filter QString [optional]
    * @param[in]  search_full_hierarchy bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  show_excluded bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  template_name QString [optional]
    * @param[in]  time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetValues(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_full_hierarchy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_excluded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_field QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetGetValuesAdHoc(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QList<QString> [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetRegisterStreamSetUpdates(const QList<QString> &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  marker QList<QString> [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void streamSetRetrieveStreamSetUpdates(const QList<QString> &marker, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  values QList<OAIStreamValue> [required]
    * @param[in]  buffer_option QString [optional]
    * @param[in]  update_option QString [optional]
    */
    virtual void streamSetUpdateValue(const QString &web_id, const QList<OAIStreamValue> &values, const ::OpenAPI::OptionalParam<QString> &buffer_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_option = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  values QList<OAIStreamValue> [required]
    * @param[in]  buffer_option QString [optional]
    * @param[in]  update_option QString [optional]
    */
    virtual void streamSetUpdateValueAdHoc(const QList<OAIStreamValue> &values, const ::OpenAPI::OptionalParam<QString> &buffer_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_option = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  values QList<OAIStreamValues> [required]
    * @param[in]  buffer_option QString [optional]
    * @param[in]  update_option QString [optional]
    */
    virtual void streamSetUpdateValues(const QString &web_id, const QList<OAIStreamValues> &values, const ::OpenAPI::OptionalParam<QString> &buffer_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_option = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  values QList<OAIStreamValues> [required]
    * @param[in]  buffer_option QString [optional]
    * @param[in]  update_option QString [optional]
    */
    virtual void streamSetUpdateValuesAdHoc(const QList<OAIStreamValues> &values, const ::OpenAPI::OptionalParam<QString> &buffer_option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_option = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void streamSetGetChannelCallback(OAIHttpRequestWorker *worker);
    void streamSetGetChannelAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetEndCallback(OAIHttpRequestWorker *worker);
    void streamSetGetEndAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetInterpolatedCallback(OAIHttpRequestWorker *worker);
    void streamSetGetInterpolatedAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetInterpolatedAtTimesCallback(OAIHttpRequestWorker *worker);
    void streamSetGetInterpolatedAtTimesAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetJoinedCallback(OAIHttpRequestWorker *worker);
    void streamSetGetPlotCallback(OAIHttpRequestWorker *worker);
    void streamSetGetPlotAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetRecordedCallback(OAIHttpRequestWorker *worker);
    void streamSetGetRecordedAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetRecordedAtTimeCallback(OAIHttpRequestWorker *worker);
    void streamSetGetRecordedAtTimeAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetRecordedAtTimesCallback(OAIHttpRequestWorker *worker);
    void streamSetGetRecordedAtTimesAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetSummariesCallback(OAIHttpRequestWorker *worker);
    void streamSetGetSummariesAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetGetValuesCallback(OAIHttpRequestWorker *worker);
    void streamSetGetValuesAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetRegisterStreamSetUpdatesCallback(OAIHttpRequestWorker *worker);
    void streamSetRetrieveStreamSetUpdatesCallback(OAIHttpRequestWorker *worker);
    void streamSetUpdateValueCallback(OAIHttpRequestWorker *worker);
    void streamSetUpdateValueAdHocCallback(OAIHttpRequestWorker *worker);
    void streamSetUpdateValuesCallback(OAIHttpRequestWorker *worker);
    void streamSetUpdateValuesAdHocCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void streamSetGetChannelSignal();
    void streamSetGetChannelAdHocSignal();
    void streamSetGetEndSignal(OAIItems_StreamValue summary);
    void streamSetGetEndAdHocSignal(OAIItems_StreamValues summary);
    void streamSetGetInterpolatedSignal(OAIItems_StreamValues summary);
    void streamSetGetInterpolatedAdHocSignal(OAIItems_StreamValues summary);
    void streamSetGetInterpolatedAtTimesSignal(OAIItems_StreamValues summary);
    void streamSetGetInterpolatedAtTimesAdHocSignal(OAIItems_StreamValues summary);
    void streamSetGetJoinedSignal(OAIItems_StreamValues summary);
    void streamSetGetPlotSignal(OAIItems_StreamValues summary);
    void streamSetGetPlotAdHocSignal(OAIItems_StreamValues summary);
    void streamSetGetRecordedSignal(OAIItems_StreamValues summary);
    void streamSetGetRecordedAdHocSignal(OAIItems_StreamValues summary);
    void streamSetGetRecordedAtTimeSignal(OAIItems_StreamValue summary);
    void streamSetGetRecordedAtTimeAdHocSignal(OAIItems_StreamValue summary);
    void streamSetGetRecordedAtTimesSignal(OAIItems_StreamValues summary);
    void streamSetGetRecordedAtTimesAdHocSignal(OAIItems_StreamValues summary);
    void streamSetGetSummariesSignal(OAIItems_StreamSummaries summary);
    void streamSetGetSummariesAdHocSignal(OAIItems_StreamSummaries summary);
    void streamSetGetValuesSignal(OAIItems_StreamValue summary);
    void streamSetGetValuesAdHocSignal(OAIItems_StreamValue summary);
    void streamSetRegisterStreamSetUpdatesSignal(OAIItems_StreamUpdatesRegister summary);
    void streamSetRetrieveStreamSetUpdatesSignal(OAIItems_StreamUpdatesRetrieve summary);
    void streamSetUpdateValueSignal(OAIItems_Substatus summary);
    void streamSetUpdateValueAdHocSignal(OAIItems_Substatus summary);
    void streamSetUpdateValuesSignal(OAIItems_Items_Substatus summary);
    void streamSetUpdateValuesAdHocSignal(OAIItems_Items_Substatus summary);


    void streamSetGetChannelSignalFull(OAIHttpRequestWorker *worker);
    void streamSetGetChannelAdHocSignalFull(OAIHttpRequestWorker *worker);
    void streamSetGetEndSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValue summary);
    void streamSetGetEndAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetInterpolatedSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetInterpolatedAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetInterpolatedAtTimesSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetInterpolatedAtTimesAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetJoinedSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetPlotSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetPlotAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetRecordedSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetRecordedAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetRecordedAtTimeSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValue summary);
    void streamSetGetRecordedAtTimeAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValue summary);
    void streamSetGetRecordedAtTimesSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetRecordedAtTimesAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValues summary);
    void streamSetGetSummariesSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamSummaries summary);
    void streamSetGetSummariesAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamSummaries summary);
    void streamSetGetValuesSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValue summary);
    void streamSetGetValuesAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamValue summary);
    void streamSetRegisterStreamSetUpdatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamUpdatesRegister summary);
    void streamSetRetrieveStreamSetUpdatesSignalFull(OAIHttpRequestWorker *worker, OAIItems_StreamUpdatesRetrieve summary);
    void streamSetUpdateValueSignalFull(OAIHttpRequestWorker *worker, OAIItems_Substatus summary);
    void streamSetUpdateValueAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_Substatus summary);
    void streamSetUpdateValuesSignalFull(OAIHttpRequestWorker *worker, OAIItems_Items_Substatus summary);
    void streamSetUpdateValuesAdHocSignalFull(OAIHttpRequestWorker *worker, OAIItems_Items_Substatus summary);

    Q_DECL_DEPRECATED_X("Use streamSetGetChannelSignalError() instead")
    void streamSetGetChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetChannelAdHocSignalError() instead")
    void streamSetGetChannelAdHocSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetChannelAdHocSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetEndSignalError() instead")
    void streamSetGetEndSignalE(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetEndSignalError(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetEndAdHocSignalError() instead")
    void streamSetGetEndAdHocSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetEndAdHocSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedSignalError() instead")
    void streamSetGetInterpolatedSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedAdHocSignalError() instead")
    void streamSetGetInterpolatedAdHocSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedAdHocSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedAtTimesSignalError() instead")
    void streamSetGetInterpolatedAtTimesSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedAtTimesSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedAtTimesAdHocSignalError() instead")
    void streamSetGetInterpolatedAtTimesAdHocSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedAtTimesAdHocSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetJoinedSignalError() instead")
    void streamSetGetJoinedSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetJoinedSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetPlotSignalError() instead")
    void streamSetGetPlotSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetPlotSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetPlotAdHocSignalError() instead")
    void streamSetGetPlotAdHocSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetPlotAdHocSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedSignalError() instead")
    void streamSetGetRecordedSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAdHocSignalError() instead")
    void streamSetGetRecordedAdHocSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAdHocSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimeSignalError() instead")
    void streamSetGetRecordedAtTimeSignalE(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimeSignalError(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimeAdHocSignalError() instead")
    void streamSetGetRecordedAtTimeAdHocSignalE(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimeAdHocSignalError(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimesSignalError() instead")
    void streamSetGetRecordedAtTimesSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimesSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimesAdHocSignalError() instead")
    void streamSetGetRecordedAtTimesAdHocSignalE(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimesAdHocSignalError(OAIItems_StreamValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetSummariesSignalError() instead")
    void streamSetGetSummariesSignalE(OAIItems_StreamSummaries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetSummariesSignalError(OAIItems_StreamSummaries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetSummariesAdHocSignalError() instead")
    void streamSetGetSummariesAdHocSignalE(OAIItems_StreamSummaries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetSummariesAdHocSignalError(OAIItems_StreamSummaries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetValuesSignalError() instead")
    void streamSetGetValuesSignalE(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetValuesSignalError(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetValuesAdHocSignalError() instead")
    void streamSetGetValuesAdHocSignalE(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetValuesAdHocSignalError(OAIItems_StreamValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetRegisterStreamSetUpdatesSignalError() instead")
    void streamSetRegisterStreamSetUpdatesSignalE(OAIItems_StreamUpdatesRegister summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetRegisterStreamSetUpdatesSignalError(OAIItems_StreamUpdatesRegister summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetRetrieveStreamSetUpdatesSignalError() instead")
    void streamSetRetrieveStreamSetUpdatesSignalE(OAIItems_StreamUpdatesRetrieve summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetRetrieveStreamSetUpdatesSignalError(OAIItems_StreamUpdatesRetrieve summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValueSignalError() instead")
    void streamSetUpdateValueSignalE(OAIItems_Substatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValueSignalError(OAIItems_Substatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValueAdHocSignalError() instead")
    void streamSetUpdateValueAdHocSignalE(OAIItems_Substatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValueAdHocSignalError(OAIItems_Substatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValuesSignalError() instead")
    void streamSetUpdateValuesSignalE(OAIItems_Items_Substatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValuesSignalError(OAIItems_Items_Substatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValuesAdHocSignalError() instead")
    void streamSetUpdateValuesAdHocSignalE(OAIItems_Items_Substatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValuesAdHocSignalError(OAIItems_Items_Substatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use streamSetGetChannelSignalErrorFull() instead")
    void streamSetGetChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetChannelAdHocSignalErrorFull() instead")
    void streamSetGetChannelAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetChannelAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetEndSignalErrorFull() instead")
    void streamSetGetEndSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetEndSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetEndAdHocSignalErrorFull() instead")
    void streamSetGetEndAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetEndAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedSignalErrorFull() instead")
    void streamSetGetInterpolatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedAdHocSignalErrorFull() instead")
    void streamSetGetInterpolatedAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedAtTimesSignalErrorFull() instead")
    void streamSetGetInterpolatedAtTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedAtTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetInterpolatedAtTimesAdHocSignalErrorFull() instead")
    void streamSetGetInterpolatedAtTimesAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetInterpolatedAtTimesAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetJoinedSignalErrorFull() instead")
    void streamSetGetJoinedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetJoinedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetPlotSignalErrorFull() instead")
    void streamSetGetPlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetPlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetPlotAdHocSignalErrorFull() instead")
    void streamSetGetPlotAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetPlotAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedSignalErrorFull() instead")
    void streamSetGetRecordedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAdHocSignalErrorFull() instead")
    void streamSetGetRecordedAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimeSignalErrorFull() instead")
    void streamSetGetRecordedAtTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimeAdHocSignalErrorFull() instead")
    void streamSetGetRecordedAtTimeAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimeAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimesSignalErrorFull() instead")
    void streamSetGetRecordedAtTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetRecordedAtTimesAdHocSignalErrorFull() instead")
    void streamSetGetRecordedAtTimesAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetRecordedAtTimesAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetSummariesSignalErrorFull() instead")
    void streamSetGetSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetSummariesAdHocSignalErrorFull() instead")
    void streamSetGetSummariesAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetSummariesAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetValuesSignalErrorFull() instead")
    void streamSetGetValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetGetValuesAdHocSignalErrorFull() instead")
    void streamSetGetValuesAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetGetValuesAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetRegisterStreamSetUpdatesSignalErrorFull() instead")
    void streamSetRegisterStreamSetUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetRegisterStreamSetUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetRetrieveStreamSetUpdatesSignalErrorFull() instead")
    void streamSetRetrieveStreamSetUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetRetrieveStreamSetUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValueSignalErrorFull() instead")
    void streamSetUpdateValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValueAdHocSignalErrorFull() instead")
    void streamSetUpdateValueAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValueAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValuesSignalErrorFull() instead")
    void streamSetUpdateValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamSetUpdateValuesAdHocSignalErrorFull() instead")
    void streamSetUpdateValuesAdHocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamSetUpdateValuesAdHocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
