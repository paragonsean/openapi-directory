/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandingLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandingLinks::OAILandingLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandingLinks::OAILandingLinks() {
    this->initializeModel();
}

OAILandingLinks::~OAILandingLinks() {}

void OAILandingLinks::initializeModel() {

    m_asset_servers_isSet = false;
    m_asset_servers_isValid = false;

    m_data_servers_isSet = false;
    m_data_servers_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;
}

void OAILandingLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandingLinks::fromJsonObject(QJsonObject json) {

    m_asset_servers_isValid = ::OpenAPI::fromJsonValue(m_asset_servers, json[QString("AssetServers")]);
    m_asset_servers_isSet = !json[QString("AssetServers")].isNull() && m_asset_servers_isValid;

    m_data_servers_isValid = ::OpenAPI::fromJsonValue(m_data_servers, json[QString("DataServers")]);
    m_data_servers_isSet = !json[QString("DataServers")].isNull() && m_data_servers_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("Search")]);
    m_search_isSet = !json[QString("Search")].isNull() && m_search_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("System")]);
    m_system_isSet = !json[QString("System")].isNull() && m_system_isValid;
}

QString OAILandingLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandingLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_servers_isSet) {
        obj.insert(QString("AssetServers"), ::OpenAPI::toJsonValue(m_asset_servers));
    }
    if (m_data_servers_isSet) {
        obj.insert(QString("DataServers"), ::OpenAPI::toJsonValue(m_data_servers));
    }
    if (m_search_isSet) {
        obj.insert(QString("Search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_system_isSet) {
        obj.insert(QString("System"), ::OpenAPI::toJsonValue(m_system));
    }
    return obj;
}

QString OAILandingLinks::getAssetServers() const {
    return m_asset_servers;
}
void OAILandingLinks::setAssetServers(const QString &asset_servers) {
    m_asset_servers = asset_servers;
    m_asset_servers_isSet = true;
}

bool OAILandingLinks::is_asset_servers_Set() const{
    return m_asset_servers_isSet;
}

bool OAILandingLinks::is_asset_servers_Valid() const{
    return m_asset_servers_isValid;
}

QString OAILandingLinks::getDataServers() const {
    return m_data_servers;
}
void OAILandingLinks::setDataServers(const QString &data_servers) {
    m_data_servers = data_servers;
    m_data_servers_isSet = true;
}

bool OAILandingLinks::is_data_servers_Set() const{
    return m_data_servers_isSet;
}

bool OAILandingLinks::is_data_servers_Valid() const{
    return m_data_servers_isValid;
}

QString OAILandingLinks::getSearch() const {
    return m_search;
}
void OAILandingLinks::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAILandingLinks::is_search_Set() const{
    return m_search_isSet;
}

bool OAILandingLinks::is_search_Valid() const{
    return m_search_isValid;
}

QString OAILandingLinks::getSelf() const {
    return m_self;
}
void OAILandingLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAILandingLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAILandingLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAILandingLinks::getSystem() const {
    return m_system;
}
void OAILandingLinks::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAILandingLinks::is_system_Set() const{
    return m_system_isSet;
}

bool OAILandingLinks::is_system_Valid() const{
    return m_system_isValid;
}

bool OAILandingLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_servers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_servers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandingLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
