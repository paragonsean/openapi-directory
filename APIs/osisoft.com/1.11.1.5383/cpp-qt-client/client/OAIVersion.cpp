/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_full_version_isSet = false;
    m_full_version_isValid = false;

    m_major_minor_revision_isSet = false;
    m_major_minor_revision_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("Build")]);
    m_build_isSet = !json[QString("Build")].isNull() && m_build_isValid;

    m_full_version_isValid = ::OpenAPI::fromJsonValue(m_full_version, json[QString("FullVersion")]);
    m_full_version_isSet = !json[QString("FullVersion")].isNull() && m_full_version_isValid;

    m_major_minor_revision_isValid = ::OpenAPI::fromJsonValue(m_major_minor_revision, json[QString("MajorMinorRevision")]);
    m_major_minor_revision_isSet = !json[QString("MajorMinorRevision")].isNull() && m_major_minor_revision_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_build_isSet) {
        obj.insert(QString("Build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_full_version_isSet) {
        obj.insert(QString("FullVersion"), ::OpenAPI::toJsonValue(m_full_version));
    }
    if (m_major_minor_revision_isSet) {
        obj.insert(QString("MajorMinorRevision"), ::OpenAPI::toJsonValue(m_major_minor_revision));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIVersion::getBuild() const {
    return m_build;
}
void OAIVersion::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIVersion::is_build_Set() const{
    return m_build_isSet;
}

bool OAIVersion::is_build_Valid() const{
    return m_build_isValid;
}

QString OAIVersion::getFullVersion() const {
    return m_full_version;
}
void OAIVersion::setFullVersion(const QString &full_version) {
    m_full_version = full_version;
    m_full_version_isSet = true;
}

bool OAIVersion::is_full_version_Set() const{
    return m_full_version_isSet;
}

bool OAIVersion::is_full_version_Valid() const{
    return m_full_version_isValid;
}

QString OAIVersion::getMajorMinorRevision() const {
    return m_major_minor_revision;
}
void OAIVersion::setMajorMinorRevision(const QString &major_minor_revision) {
    m_major_minor_revision = major_minor_revision;
    m_major_minor_revision_isSet = true;
}

bool OAIVersion::is_major_minor_revision_Set() const{
    return m_major_minor_revision_isSet;
}

bool OAIVersion::is_major_minor_revision_Valid() const{
    return m_major_minor_revision_isValid;
}

OAIWebException OAIVersion::getWebException() const {
    return m_web_exception;
}
void OAIVersion::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIVersion::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIVersion::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_minor_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
