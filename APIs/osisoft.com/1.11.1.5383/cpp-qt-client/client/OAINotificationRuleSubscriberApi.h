/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationRuleSubscriberApi_H
#define OAI_OAINotificationRuleSubscriberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIItems_NotificationRuleSubscriber.h"
#include "OAINotificationRuleSubscriber.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationRuleSubscriberApi : public QObject {
    Q_OBJECT

public:
    OAINotificationRuleSubscriberApi(const int timeOut = 0);
    ~OAINotificationRuleSubscriberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void notificationRuleSubscriberDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleSubscriberGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleSubscriberGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationRuleSubscriberGetNotificationRuleSubscribers(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_rule_subscriber OAINotificationRuleSubscriber [required]
    */
    virtual void notificationRuleSubscriberUpdate(const QString &web_id, const OAINotificationRuleSubscriber &notification_rule_subscriber);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationRuleSubscriberDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationRuleSubscriberGetCallback(OAIHttpRequestWorker *worker);
    void notificationRuleSubscriberGetByPathCallback(OAIHttpRequestWorker *worker);
    void notificationRuleSubscriberGetNotificationRuleSubscribersCallback(OAIHttpRequestWorker *worker);
    void notificationRuleSubscriberUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationRuleSubscriberDeleteSignal();
    void notificationRuleSubscriberGetSignal(OAINotificationRuleSubscriber summary);
    void notificationRuleSubscriberGetByPathSignal(OAINotificationRuleSubscriber summary);
    void notificationRuleSubscriberGetNotificationRuleSubscribersSignal(OAIItems_NotificationRuleSubscriber summary);
    void notificationRuleSubscriberUpdateSignal();


    void notificationRuleSubscriberDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationRuleSubscriberGetSignalFull(OAIHttpRequestWorker *worker, OAINotificationRuleSubscriber summary);
    void notificationRuleSubscriberGetByPathSignalFull(OAIHttpRequestWorker *worker, OAINotificationRuleSubscriber summary);
    void notificationRuleSubscriberGetNotificationRuleSubscribersSignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationRuleSubscriber summary);
    void notificationRuleSubscriberUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberDeleteSignalError() instead")
    void notificationRuleSubscriberDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberGetSignalError() instead")
    void notificationRuleSubscriberGetSignalE(OAINotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberGetSignalError(OAINotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberGetByPathSignalError() instead")
    void notificationRuleSubscriberGetByPathSignalE(OAINotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberGetByPathSignalError(OAINotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberGetNotificationRuleSubscribersSignalError() instead")
    void notificationRuleSubscriberGetNotificationRuleSubscribersSignalE(OAIItems_NotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberGetNotificationRuleSubscribersSignalError(OAIItems_NotificationRuleSubscriber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberUpdateSignalError() instead")
    void notificationRuleSubscriberUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberDeleteSignalErrorFull() instead")
    void notificationRuleSubscriberDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberGetSignalErrorFull() instead")
    void notificationRuleSubscriberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberGetByPathSignalErrorFull() instead")
    void notificationRuleSubscriberGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberGetNotificationRuleSubscribersSignalErrorFull() instead")
    void notificationRuleSubscriberGetNotificationRuleSubscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberGetNotificationRuleSubscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRuleSubscriberUpdateSignalErrorFull() instead")
    void notificationRuleSubscriberUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRuleSubscriberUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
