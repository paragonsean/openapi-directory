/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataServerLicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataServerLicense::OAIDataServerLicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataServerLicense::OAIDataServerLicense() {
    this->initializeModel();
}

OAIDataServerLicense::~OAIDataServerLicense() {}

void OAIDataServerLicense::initializeModel() {

    m_amount_left_isSet = false;
    m_amount_left_isValid = false;

    m_amount_used_isSet = false;
    m_amount_used_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIDataServerLicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataServerLicense::fromJsonObject(QJsonObject json) {

    m_amount_left_isValid = ::OpenAPI::fromJsonValue(m_amount_left, json[QString("AmountLeft")]);
    m_amount_left_isSet = !json[QString("AmountLeft")].isNull() && m_amount_left_isValid;

    m_amount_used_isValid = ::OpenAPI::fromJsonValue(m_amount_used, json[QString("AmountUsed")]);
    m_amount_used_isSet = !json[QString("AmountUsed")].isNull() && m_amount_used_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIDataServerLicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataServerLicense::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_left_isSet) {
        obj.insert(QString("AmountLeft"), ::OpenAPI::toJsonValue(m_amount_left));
    }
    if (m_amount_used_isSet) {
        obj.insert(QString("AmountUsed"), ::OpenAPI::toJsonValue(m_amount_used));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIDataServerLicense::getAmountLeft() const {
    return m_amount_left;
}
void OAIDataServerLicense::setAmountLeft(const QString &amount_left) {
    m_amount_left = amount_left;
    m_amount_left_isSet = true;
}

bool OAIDataServerLicense::is_amount_left_Set() const{
    return m_amount_left_isSet;
}

bool OAIDataServerLicense::is_amount_left_Valid() const{
    return m_amount_left_isValid;
}

QString OAIDataServerLicense::getAmountUsed() const {
    return m_amount_used;
}
void OAIDataServerLicense::setAmountUsed(const QString &amount_used) {
    m_amount_used = amount_used;
    m_amount_used_isSet = true;
}

bool OAIDataServerLicense::is_amount_used_Set() const{
    return m_amount_used_isSet;
}

bool OAIDataServerLicense::is_amount_used_Valid() const{
    return m_amount_used_isValid;
}

OAIDataServerLicenseLinks OAIDataServerLicense::getLinks() const {
    return m_links;
}
void OAIDataServerLicense::setLinks(const OAIDataServerLicenseLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDataServerLicense::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDataServerLicense::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIDataServerLicense::getName() const {
    return m_name;
}
void OAIDataServerLicense::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataServerLicense::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataServerLicense::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataServerLicense::getTotalAmount() const {
    return m_total_amount;
}
void OAIDataServerLicense::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIDataServerLicense::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIDataServerLicense::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

OAIWebException OAIDataServerLicense::getWebException() const {
    return m_web_exception;
}
void OAIDataServerLicense::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIDataServerLicense::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIDataServerLicense::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIDataServerLicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataServerLicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
