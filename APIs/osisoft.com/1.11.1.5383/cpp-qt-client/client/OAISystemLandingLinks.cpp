/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemLandingLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemLandingLinks::OAISystemLandingLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemLandingLinks::OAISystemLandingLinks() {
    this->initializeModel();
}

OAISystemLandingLinks::~OAISystemLandingLinks() {}

void OAISystemLandingLinks::initializeModel() {

    m_cache_instances_isSet = false;
    m_cache_instances_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAISystemLandingLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemLandingLinks::fromJsonObject(QJsonObject json) {

    m_cache_instances_isValid = ::OpenAPI::fromJsonValue(m_cache_instances, json[QString("CacheInstances")]);
    m_cache_instances_isSet = !json[QString("CacheInstances")].isNull() && m_cache_instances_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("UserInfo")]);
    m_user_info_isSet = !json[QString("UserInfo")].isNull() && m_user_info_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("Versions")]);
    m_versions_isSet = !json[QString("Versions")].isNull() && m_versions_isValid;
}

QString OAISystemLandingLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemLandingLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_instances_isSet) {
        obj.insert(QString("CacheInstances"), ::OpenAPI::toJsonValue(m_cache_instances));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_info_isSet) {
        obj.insert(QString("UserInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    if (m_versions_isSet) {
        obj.insert(QString("Versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QString OAISystemLandingLinks::getCacheInstances() const {
    return m_cache_instances;
}
void OAISystemLandingLinks::setCacheInstances(const QString &cache_instances) {
    m_cache_instances = cache_instances;
    m_cache_instances_isSet = true;
}

bool OAISystemLandingLinks::is_cache_instances_Set() const{
    return m_cache_instances_isSet;
}

bool OAISystemLandingLinks::is_cache_instances_Valid() const{
    return m_cache_instances_isValid;
}

QString OAISystemLandingLinks::getConfiguration() const {
    return m_configuration;
}
void OAISystemLandingLinks::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAISystemLandingLinks::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAISystemLandingLinks::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAISystemLandingLinks::getSelf() const {
    return m_self;
}
void OAISystemLandingLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAISystemLandingLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAISystemLandingLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAISystemLandingLinks::getStatus() const {
    return m_status;
}
void OAISystemLandingLinks::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISystemLandingLinks::is_status_Set() const{
    return m_status_isSet;
}

bool OAISystemLandingLinks::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISystemLandingLinks::getUserInfo() const {
    return m_user_info;
}
void OAISystemLandingLinks::setUserInfo(const QString &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAISystemLandingLinks::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAISystemLandingLinks::is_user_info_Valid() const{
    return m_user_info_isValid;
}

QString OAISystemLandingLinks::getVersions() const {
    return m_versions;
}
void OAISystemLandingLinks::setVersions(const QString &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAISystemLandingLinks::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAISystemLandingLinks::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAISystemLandingLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemLandingLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
