/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElementTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElementTemplate::OAIElementTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElementTemplate::OAIElementTemplate() {
    this->initializeModel();
}

OAIElementTemplate::~OAIElementTemplate() {}

void OAIElementTemplate::initializeModel() {

    m_allow_element_to_extend_isSet = false;
    m_allow_element_to_extend_isValid = false;

    m_base_template_isSet = false;
    m_base_template_isValid = false;

    m_can_be_acknowledged_isSet = false;
    m_can_be_acknowledged_isValid = false;

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_naming_pattern_isSet = false;
    m_naming_pattern_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIElementTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElementTemplate::fromJsonObject(QJsonObject json) {

    m_allow_element_to_extend_isValid = ::OpenAPI::fromJsonValue(m_allow_element_to_extend, json[QString("AllowElementToExtend")]);
    m_allow_element_to_extend_isSet = !json[QString("AllowElementToExtend")].isNull() && m_allow_element_to_extend_isValid;

    m_base_template_isValid = ::OpenAPI::fromJsonValue(m_base_template, json[QString("BaseTemplate")]);
    m_base_template_isSet = !json[QString("BaseTemplate")].isNull() && m_base_template_isValid;

    m_can_be_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_can_be_acknowledged, json[QString("CanBeAcknowledged")]);
    m_can_be_acknowledged_isSet = !json[QString("CanBeAcknowledged")].isNull() && m_can_be_acknowledged_isValid;

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("ExtendedProperties")]);
    m_extended_properties_isSet = !json[QString("ExtendedProperties")].isNull() && m_extended_properties_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_naming_pattern_isValid = ::OpenAPI::fromJsonValue(m_naming_pattern, json[QString("NamingPattern")]);
    m_naming_pattern_isSet = !json[QString("NamingPattern")].isNull() && m_naming_pattern_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIElementTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElementTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_element_to_extend_isSet) {
        obj.insert(QString("AllowElementToExtend"), ::OpenAPI::toJsonValue(m_allow_element_to_extend));
    }
    if (m_base_template_isSet) {
        obj.insert(QString("BaseTemplate"), ::OpenAPI::toJsonValue(m_base_template));
    }
    if (m_can_be_acknowledged_isSet) {
        obj.insert(QString("CanBeAcknowledged"), ::OpenAPI::toJsonValue(m_can_be_acknowledged));
    }
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extended_properties.size() > 0) {
        obj.insert(QString("ExtendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_naming_pattern_isSet) {
        obj.insert(QString("NamingPattern"), ::OpenAPI::toJsonValue(m_naming_pattern));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_severity_isSet) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

bool OAIElementTemplate::isAllowElementToExtend() const {
    return m_allow_element_to_extend;
}
void OAIElementTemplate::setAllowElementToExtend(const bool &allow_element_to_extend) {
    m_allow_element_to_extend = allow_element_to_extend;
    m_allow_element_to_extend_isSet = true;
}

bool OAIElementTemplate::is_allow_element_to_extend_Set() const{
    return m_allow_element_to_extend_isSet;
}

bool OAIElementTemplate::is_allow_element_to_extend_Valid() const{
    return m_allow_element_to_extend_isValid;
}

QString OAIElementTemplate::getBaseTemplate() const {
    return m_base_template;
}
void OAIElementTemplate::setBaseTemplate(const QString &base_template) {
    m_base_template = base_template;
    m_base_template_isSet = true;
}

bool OAIElementTemplate::is_base_template_Set() const{
    return m_base_template_isSet;
}

bool OAIElementTemplate::is_base_template_Valid() const{
    return m_base_template_isValid;
}

bool OAIElementTemplate::isCanBeAcknowledged() const {
    return m_can_be_acknowledged;
}
void OAIElementTemplate::setCanBeAcknowledged(const bool &can_be_acknowledged) {
    m_can_be_acknowledged = can_be_acknowledged;
    m_can_be_acknowledged_isSet = true;
}

bool OAIElementTemplate::is_can_be_acknowledged_Set() const{
    return m_can_be_acknowledged_isSet;
}

bool OAIElementTemplate::is_can_be_acknowledged_Valid() const{
    return m_can_be_acknowledged_isValid;
}

QList<QString> OAIElementTemplate::getCategoryNames() const {
    return m_category_names;
}
void OAIElementTemplate::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIElementTemplate::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIElementTemplate::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIElementTemplate::getDescription() const {
    return m_description;
}
void OAIElementTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIElementTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIElementTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, OAIValue> OAIElementTemplate::getExtendedProperties() const {
    return m_extended_properties;
}
void OAIElementTemplate::setExtendedProperties(const QMap<QString, OAIValue> &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAIElementTemplate::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAIElementTemplate::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

QString OAIElementTemplate::getId() const {
    return m_id;
}
void OAIElementTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIElementTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIElementTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIElementTemplate::getInstanceType() const {
    return m_instance_type;
}
void OAIElementTemplate::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIElementTemplate::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIElementTemplate::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAIElementTemplateLinks OAIElementTemplate::getLinks() const {
    return m_links;
}
void OAIElementTemplate::setLinks(const OAIElementTemplateLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIElementTemplate::is_links_Set() const{
    return m_links_isSet;
}

bool OAIElementTemplate::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIElementTemplate::getName() const {
    return m_name;
}
void OAIElementTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIElementTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIElementTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIElementTemplate::getNamingPattern() const {
    return m_naming_pattern;
}
void OAIElementTemplate::setNamingPattern(const QString &naming_pattern) {
    m_naming_pattern = naming_pattern;
    m_naming_pattern_isSet = true;
}

bool OAIElementTemplate::is_naming_pattern_Set() const{
    return m_naming_pattern_isSet;
}

bool OAIElementTemplate::is_naming_pattern_Valid() const{
    return m_naming_pattern_isValid;
}

QString OAIElementTemplate::getPath() const {
    return m_path;
}
void OAIElementTemplate::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIElementTemplate::is_path_Set() const{
    return m_path_isSet;
}

bool OAIElementTemplate::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIElementTemplate::getSeverity() const {
    return m_severity;
}
void OAIElementTemplate::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIElementTemplate::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIElementTemplate::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIWebException OAIElementTemplate::getWebException() const {
    return m_web_exception;
}
void OAIElementTemplate::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIElementTemplate::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIElementTemplate::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIElementTemplate::getWebId() const {
    return m_web_id;
}
void OAIElementTemplate::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIElementTemplate::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIElementTemplate::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIElementTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_element_to_extend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naming_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElementTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
