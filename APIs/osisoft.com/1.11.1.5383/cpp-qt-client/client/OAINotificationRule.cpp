/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationRule::OAINotificationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationRule::OAINotificationRule() {
    this->initializeModel();
}

OAINotificationRule::~OAINotificationRule() {}

void OAINotificationRule::initializeModel() {

    m_auto_created_isSet = false;
    m_auto_created_isValid = false;

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multi_trigger_event_option_isSet = false;
    m_multi_trigger_event_option_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nonrepetition_interval_isSet = false;
    m_nonrepetition_interval_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_resend_interval_isSet = false;
    m_resend_interval_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAINotificationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationRule::fromJsonObject(QJsonObject json) {

    m_auto_created_isValid = ::OpenAPI::fromJsonValue(m_auto_created, json[QString("AutoCreated")]);
    m_auto_created_isSet = !json[QString("AutoCreated")].isNull() && m_auto_created_isValid;

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("Criteria")]);
    m_criteria_isSet = !json[QString("Criteria")].isNull() && m_criteria_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_multi_trigger_event_option_isValid = ::OpenAPI::fromJsonValue(m_multi_trigger_event_option, json[QString("MultiTriggerEventOption")]);
    m_multi_trigger_event_option_isSet = !json[QString("MultiTriggerEventOption")].isNull() && m_multi_trigger_event_option_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_nonrepetition_interval_isValid = ::OpenAPI::fromJsonValue(m_nonrepetition_interval, json[QString("NonrepetitionInterval")]);
    m_nonrepetition_interval_isSet = !json[QString("NonrepetitionInterval")].isNull() && m_nonrepetition_interval_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_resend_interval_isValid = ::OpenAPI::fromJsonValue(m_resend_interval, json[QString("ResendInterval")]);
    m_resend_interval_isSet = !json[QString("ResendInterval")].isNull() && m_resend_interval_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAINotificationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_created_isSet) {
        obj.insert(QString("AutoCreated"), ::OpenAPI::toJsonValue(m_auto_created));
    }
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_criteria_isSet) {
        obj.insert(QString("Criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multi_trigger_event_option_isSet) {
        obj.insert(QString("MultiTriggerEventOption"), ::OpenAPI::toJsonValue(m_multi_trigger_event_option));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nonrepetition_interval_isSet) {
        obj.insert(QString("NonrepetitionInterval"), ::OpenAPI::toJsonValue(m_nonrepetition_interval));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_resend_interval_isSet) {
        obj.insert(QString("ResendInterval"), ::OpenAPI::toJsonValue(m_resend_interval));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

bool OAINotificationRule::isAutoCreated() const {
    return m_auto_created;
}
void OAINotificationRule::setAutoCreated(const bool &auto_created) {
    m_auto_created = auto_created;
    m_auto_created_isSet = true;
}

bool OAINotificationRule::is_auto_created_Set() const{
    return m_auto_created_isSet;
}

bool OAINotificationRule::is_auto_created_Valid() const{
    return m_auto_created_isValid;
}

QList<QString> OAINotificationRule::getCategoryNames() const {
    return m_category_names;
}
void OAINotificationRule::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAINotificationRule::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAINotificationRule::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAINotificationRule::getCriteria() const {
    return m_criteria;
}
void OAINotificationRule::setCriteria(const QString &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAINotificationRule::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAINotificationRule::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAINotificationRule::getDescription() const {
    return m_description;
}
void OAINotificationRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINotificationRule::getId() const {
    return m_id;
}
void OAINotificationRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationRule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINotificationRule::getMultiTriggerEventOption() const {
    return m_multi_trigger_event_option;
}
void OAINotificationRule::setMultiTriggerEventOption(const QString &multi_trigger_event_option) {
    m_multi_trigger_event_option = multi_trigger_event_option;
    m_multi_trigger_event_option_isSet = true;
}

bool OAINotificationRule::is_multi_trigger_event_option_Set() const{
    return m_multi_trigger_event_option_isSet;
}

bool OAINotificationRule::is_multi_trigger_event_option_Valid() const{
    return m_multi_trigger_event_option_isValid;
}

QString OAINotificationRule::getName() const {
    return m_name;
}
void OAINotificationRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationRule::getNonrepetitionInterval() const {
    return m_nonrepetition_interval;
}
void OAINotificationRule::setNonrepetitionInterval(const QString &nonrepetition_interval) {
    m_nonrepetition_interval = nonrepetition_interval;
    m_nonrepetition_interval_isSet = true;
}

bool OAINotificationRule::is_nonrepetition_interval_Set() const{
    return m_nonrepetition_interval_isSet;
}

bool OAINotificationRule::is_nonrepetition_interval_Valid() const{
    return m_nonrepetition_interval_isValid;
}

QString OAINotificationRule::getPath() const {
    return m_path;
}
void OAINotificationRule::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAINotificationRule::is_path_Set() const{
    return m_path_isSet;
}

bool OAINotificationRule::is_path_Valid() const{
    return m_path_isValid;
}

QString OAINotificationRule::getResendInterval() const {
    return m_resend_interval;
}
void OAINotificationRule::setResendInterval(const QString &resend_interval) {
    m_resend_interval = resend_interval;
    m_resend_interval_isSet = true;
}

bool OAINotificationRule::is_resend_interval_Set() const{
    return m_resend_interval_isSet;
}

bool OAINotificationRule::is_resend_interval_Valid() const{
    return m_resend_interval_isValid;
}

QString OAINotificationRule::getStatus() const {
    return m_status;
}
void OAINotificationRule::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINotificationRule::is_status_Set() const{
    return m_status_isSet;
}

bool OAINotificationRule::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINotificationRule::getTemplateName() const {
    return m_template_name;
}
void OAINotificationRule::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAINotificationRule::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAINotificationRule::is_template_name_Valid() const{
    return m_template_name_isValid;
}

OAIWebException OAINotificationRule::getWebException() const {
    return m_web_exception;
}
void OAINotificationRule::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAINotificationRule::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAINotificationRule::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAINotificationRule::getWebId() const {
    return m_web_id;
}
void OAINotificationRule::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAINotificationRule::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAINotificationRule::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAINotificationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_trigger_event_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonrepetition_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resend_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
