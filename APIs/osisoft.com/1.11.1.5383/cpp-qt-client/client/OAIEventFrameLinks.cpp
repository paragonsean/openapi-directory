/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventFrameLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventFrameLinks::OAIEventFrameLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventFrameLinks::OAIEventFrameLinks() {
    this->initializeModel();
}

OAIEventFrameLinks::~OAIEventFrameLinks() {}

void OAIEventFrameLinks::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_default_attribute_isSet = false;
    m_default_attribute_isValid = false;

    m_end_value_isSet = false;
    m_end_value_isValid = false;

    m_event_frames_isSet = false;
    m_event_frames_isValid = false;

    m_interpolated_data_isSet = false;
    m_interpolated_data_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_plot_data_isSet = false;
    m_plot_data_isValid = false;

    m_primary_referenced_element_isSet = false;
    m_primary_referenced_element_isValid = false;

    m_recorded_data_isSet = false;
    m_recorded_data_isValid = false;

    m_referenced_elements_isSet = false;
    m_referenced_elements_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_security_entries_isSet = false;
    m_security_entries_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_summary_data_isSet = false;
    m_summary_data_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEventFrameLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventFrameLinks::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("Annotations")]);
    m_annotations_isSet = !json[QString("Annotations")].isNull() && m_annotations_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_default_attribute_isValid = ::OpenAPI::fromJsonValue(m_default_attribute, json[QString("DefaultAttribute")]);
    m_default_attribute_isSet = !json[QString("DefaultAttribute")].isNull() && m_default_attribute_isValid;

    m_end_value_isValid = ::OpenAPI::fromJsonValue(m_end_value, json[QString("EndValue")]);
    m_end_value_isSet = !json[QString("EndValue")].isNull() && m_end_value_isValid;

    m_event_frames_isValid = ::OpenAPI::fromJsonValue(m_event_frames, json[QString("EventFrames")]);
    m_event_frames_isSet = !json[QString("EventFrames")].isNull() && m_event_frames_isValid;

    m_interpolated_data_isValid = ::OpenAPI::fromJsonValue(m_interpolated_data, json[QString("InterpolatedData")]);
    m_interpolated_data_isSet = !json[QString("InterpolatedData")].isNull() && m_interpolated_data_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_plot_data_isValid = ::OpenAPI::fromJsonValue(m_plot_data, json[QString("PlotData")]);
    m_plot_data_isSet = !json[QString("PlotData")].isNull() && m_plot_data_isValid;

    m_primary_referenced_element_isValid = ::OpenAPI::fromJsonValue(m_primary_referenced_element, json[QString("PrimaryReferencedElement")]);
    m_primary_referenced_element_isSet = !json[QString("PrimaryReferencedElement")].isNull() && m_primary_referenced_element_isValid;

    m_recorded_data_isValid = ::OpenAPI::fromJsonValue(m_recorded_data, json[QString("RecordedData")]);
    m_recorded_data_isSet = !json[QString("RecordedData")].isNull() && m_recorded_data_isValid;

    m_referenced_elements_isValid = ::OpenAPI::fromJsonValue(m_referenced_elements, json[QString("ReferencedElements")]);
    m_referenced_elements_isSet = !json[QString("ReferencedElements")].isNull() && m_referenced_elements_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_security_entries_isValid = ::OpenAPI::fromJsonValue(m_security_entries, json[QString("SecurityEntries")]);
    m_security_entries_isSet = !json[QString("SecurityEntries")].isNull() && m_security_entries_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_summary_data_isValid = ::OpenAPI::fromJsonValue(m_summary_data, json[QString("SummaryData")]);
    m_summary_data_isSet = !json[QString("SummaryData")].isNull() && m_summary_data_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("Template")]);
    m_r_template_isSet = !json[QString("Template")].isNull() && m_r_template_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIEventFrameLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventFrameLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations_isSet) {
        obj.insert(QString("Annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_default_attribute_isSet) {
        obj.insert(QString("DefaultAttribute"), ::OpenAPI::toJsonValue(m_default_attribute));
    }
    if (m_end_value_isSet) {
        obj.insert(QString("EndValue"), ::OpenAPI::toJsonValue(m_end_value));
    }
    if (m_event_frames_isSet) {
        obj.insert(QString("EventFrames"), ::OpenAPI::toJsonValue(m_event_frames));
    }
    if (m_interpolated_data_isSet) {
        obj.insert(QString("InterpolatedData"), ::OpenAPI::toJsonValue(m_interpolated_data));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_plot_data_isSet) {
        obj.insert(QString("PlotData"), ::OpenAPI::toJsonValue(m_plot_data));
    }
    if (m_primary_referenced_element_isSet) {
        obj.insert(QString("PrimaryReferencedElement"), ::OpenAPI::toJsonValue(m_primary_referenced_element));
    }
    if (m_recorded_data_isSet) {
        obj.insert(QString("RecordedData"), ::OpenAPI::toJsonValue(m_recorded_data));
    }
    if (m_referenced_elements_isSet) {
        obj.insert(QString("ReferencedElements"), ::OpenAPI::toJsonValue(m_referenced_elements));
    }
    if (m_security_isSet) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_security_entries_isSet) {
        obj.insert(QString("SecurityEntries"), ::OpenAPI::toJsonValue(m_security_entries));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_summary_data_isSet) {
        obj.insert(QString("SummaryData"), ::OpenAPI::toJsonValue(m_summary_data));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("Template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIEventFrameLinks::getAnnotations() const {
    return m_annotations;
}
void OAIEventFrameLinks::setAnnotations(const QString &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIEventFrameLinks::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIEventFrameLinks::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIEventFrameLinks::getAttributes() const {
    return m_attributes;
}
void OAIEventFrameLinks::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEventFrameLinks::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEventFrameLinks::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIEventFrameLinks::getCategories() const {
    return m_categories;
}
void OAIEventFrameLinks::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIEventFrameLinks::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIEventFrameLinks::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIEventFrameLinks::getDatabase() const {
    return m_database;
}
void OAIEventFrameLinks::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIEventFrameLinks::is_database_Set() const{
    return m_database_isSet;
}

bool OAIEventFrameLinks::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIEventFrameLinks::getDefaultAttribute() const {
    return m_default_attribute;
}
void OAIEventFrameLinks::setDefaultAttribute(const QString &default_attribute) {
    m_default_attribute = default_attribute;
    m_default_attribute_isSet = true;
}

bool OAIEventFrameLinks::is_default_attribute_Set() const{
    return m_default_attribute_isSet;
}

bool OAIEventFrameLinks::is_default_attribute_Valid() const{
    return m_default_attribute_isValid;
}

QString OAIEventFrameLinks::getEndValue() const {
    return m_end_value;
}
void OAIEventFrameLinks::setEndValue(const QString &end_value) {
    m_end_value = end_value;
    m_end_value_isSet = true;
}

bool OAIEventFrameLinks::is_end_value_Set() const{
    return m_end_value_isSet;
}

bool OAIEventFrameLinks::is_end_value_Valid() const{
    return m_end_value_isValid;
}

QString OAIEventFrameLinks::getEventFrames() const {
    return m_event_frames;
}
void OAIEventFrameLinks::setEventFrames(const QString &event_frames) {
    m_event_frames = event_frames;
    m_event_frames_isSet = true;
}

bool OAIEventFrameLinks::is_event_frames_Set() const{
    return m_event_frames_isSet;
}

bool OAIEventFrameLinks::is_event_frames_Valid() const{
    return m_event_frames_isValid;
}

QString OAIEventFrameLinks::getInterpolatedData() const {
    return m_interpolated_data;
}
void OAIEventFrameLinks::setInterpolatedData(const QString &interpolated_data) {
    m_interpolated_data = interpolated_data;
    m_interpolated_data_isSet = true;
}

bool OAIEventFrameLinks::is_interpolated_data_Set() const{
    return m_interpolated_data_isSet;
}

bool OAIEventFrameLinks::is_interpolated_data_Valid() const{
    return m_interpolated_data_isValid;
}

QString OAIEventFrameLinks::getParent() const {
    return m_parent;
}
void OAIEventFrameLinks::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIEventFrameLinks::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIEventFrameLinks::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIEventFrameLinks::getPlotData() const {
    return m_plot_data;
}
void OAIEventFrameLinks::setPlotData(const QString &plot_data) {
    m_plot_data = plot_data;
    m_plot_data_isSet = true;
}

bool OAIEventFrameLinks::is_plot_data_Set() const{
    return m_plot_data_isSet;
}

bool OAIEventFrameLinks::is_plot_data_Valid() const{
    return m_plot_data_isValid;
}

QString OAIEventFrameLinks::getPrimaryReferencedElement() const {
    return m_primary_referenced_element;
}
void OAIEventFrameLinks::setPrimaryReferencedElement(const QString &primary_referenced_element) {
    m_primary_referenced_element = primary_referenced_element;
    m_primary_referenced_element_isSet = true;
}

bool OAIEventFrameLinks::is_primary_referenced_element_Set() const{
    return m_primary_referenced_element_isSet;
}

bool OAIEventFrameLinks::is_primary_referenced_element_Valid() const{
    return m_primary_referenced_element_isValid;
}

QString OAIEventFrameLinks::getRecordedData() const {
    return m_recorded_data;
}
void OAIEventFrameLinks::setRecordedData(const QString &recorded_data) {
    m_recorded_data = recorded_data;
    m_recorded_data_isSet = true;
}

bool OAIEventFrameLinks::is_recorded_data_Set() const{
    return m_recorded_data_isSet;
}

bool OAIEventFrameLinks::is_recorded_data_Valid() const{
    return m_recorded_data_isValid;
}

QString OAIEventFrameLinks::getReferencedElements() const {
    return m_referenced_elements;
}
void OAIEventFrameLinks::setReferencedElements(const QString &referenced_elements) {
    m_referenced_elements = referenced_elements;
    m_referenced_elements_isSet = true;
}

bool OAIEventFrameLinks::is_referenced_elements_Set() const{
    return m_referenced_elements_isSet;
}

bool OAIEventFrameLinks::is_referenced_elements_Valid() const{
    return m_referenced_elements_isValid;
}

QString OAIEventFrameLinks::getSecurity() const {
    return m_security;
}
void OAIEventFrameLinks::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIEventFrameLinks::is_security_Set() const{
    return m_security_isSet;
}

bool OAIEventFrameLinks::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIEventFrameLinks::getSecurityEntries() const {
    return m_security_entries;
}
void OAIEventFrameLinks::setSecurityEntries(const QString &security_entries) {
    m_security_entries = security_entries;
    m_security_entries_isSet = true;
}

bool OAIEventFrameLinks::is_security_entries_Set() const{
    return m_security_entries_isSet;
}

bool OAIEventFrameLinks::is_security_entries_Valid() const{
    return m_security_entries_isValid;
}

QString OAIEventFrameLinks::getSelf() const {
    return m_self;
}
void OAIEventFrameLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIEventFrameLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIEventFrameLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIEventFrameLinks::getSummaryData() const {
    return m_summary_data;
}
void OAIEventFrameLinks::setSummaryData(const QString &summary_data) {
    m_summary_data = summary_data;
    m_summary_data_isSet = true;
}

bool OAIEventFrameLinks::is_summary_data_Set() const{
    return m_summary_data_isSet;
}

bool OAIEventFrameLinks::is_summary_data_Valid() const{
    return m_summary_data_isValid;
}

QString OAIEventFrameLinks::getRTemplate() const {
    return m_r_template;
}
void OAIEventFrameLinks::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIEventFrameLinks::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIEventFrameLinks::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIEventFrameLinks::getValue() const {
    return m_value;
}
void OAIEventFrameLinks::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEventFrameLinks::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEventFrameLinks::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEventFrameLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolated_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plot_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_referenced_element_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventFrameLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
