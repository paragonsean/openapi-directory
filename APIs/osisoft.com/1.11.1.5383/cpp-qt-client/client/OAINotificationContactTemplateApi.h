/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationContactTemplateApi_H
#define OAI_OAINotificationContactTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIItems_NotificationContactTemplate.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAINotificationContactTemplate.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationContactTemplateApi : public QObject {
    Q_OBJECT

public:
    OAINotificationContactTemplateApi(const int timeOut = 0);
    ~OAINotificationContactTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void notificationContactTemplateDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void notificationContactTemplateDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGetNotificationContactTemplates(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  asset_server_web_id QString [optional]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGetNotificationContactTemplatesQuery(const ::OpenAPI::OptionalParam<QString> &asset_server_web_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void notificationContactTemplateGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  notification_contact_template OAINotificationContactTemplate [required]
    */
    virtual void notificationContactTemplateUpdate(const QString &web_id, const OAINotificationContactTemplate &notification_contact_template);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void notificationContactTemplateUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationContactTemplateCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetByPathCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetNotificationContactTemplatesCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetNotificationContactTemplatesQueryCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetSecurityCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationContactTemplateUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationContactTemplateCreateSecurityEntrySignal();
    void notificationContactTemplateDeleteSignal();
    void notificationContactTemplateDeleteSecurityEntrySignal();
    void notificationContactTemplateGetSignal(OAINotificationContactTemplate summary);
    void notificationContactTemplateGetByPathSignal(OAINotificationContactTemplate summary);
    void notificationContactTemplateGetNotificationContactTemplatesSignal(OAINotificationContactTemplate summary);
    void notificationContactTemplateGetNotificationContactTemplatesQuerySignal(OAIItems_NotificationContactTemplate summary);
    void notificationContactTemplateGetSecuritySignal(OAIItems_SecurityRights summary);
    void notificationContactTemplateGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void notificationContactTemplateGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void notificationContactTemplateUpdateSignal();
    void notificationContactTemplateUpdateSecurityEntrySignal();


    void notificationContactTemplateCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void notificationContactTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationContactTemplateDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void notificationContactTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAINotificationContactTemplate summary);
    void notificationContactTemplateGetByPathSignalFull(OAIHttpRequestWorker *worker, OAINotificationContactTemplate summary);
    void notificationContactTemplateGetNotificationContactTemplatesSignalFull(OAIHttpRequestWorker *worker, OAINotificationContactTemplate summary);
    void notificationContactTemplateGetNotificationContactTemplatesQuerySignalFull(OAIHttpRequestWorker *worker, OAIItems_NotificationContactTemplate summary);
    void notificationContactTemplateGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void notificationContactTemplateGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void notificationContactTemplateGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void notificationContactTemplateUpdateSignalFull(OAIHttpRequestWorker *worker);
    void notificationContactTemplateUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use notificationContactTemplateCreateSecurityEntrySignalError() instead")
    void notificationContactTemplateCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateDeleteSignalError() instead")
    void notificationContactTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateDeleteSecurityEntrySignalError() instead")
    void notificationContactTemplateDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSignalError() instead")
    void notificationContactTemplateGetSignalE(OAINotificationContactTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSignalError(OAINotificationContactTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetByPathSignalError() instead")
    void notificationContactTemplateGetByPathSignalE(OAINotificationContactTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetByPathSignalError(OAINotificationContactTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetNotificationContactTemplatesSignalError() instead")
    void notificationContactTemplateGetNotificationContactTemplatesSignalE(OAINotificationContactTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetNotificationContactTemplatesSignalError(OAINotificationContactTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetNotificationContactTemplatesQuerySignalError() instead")
    void notificationContactTemplateGetNotificationContactTemplatesQuerySignalE(OAIItems_NotificationContactTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetNotificationContactTemplatesQuerySignalError(OAIItems_NotificationContactTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSecuritySignalError() instead")
    void notificationContactTemplateGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSecurityEntriesSignalError() instead")
    void notificationContactTemplateGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSecurityEntryByNameSignalError() instead")
    void notificationContactTemplateGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateUpdateSignalError() instead")
    void notificationContactTemplateUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateUpdateSecurityEntrySignalError() instead")
    void notificationContactTemplateUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationContactTemplateCreateSecurityEntrySignalErrorFull() instead")
    void notificationContactTemplateCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateDeleteSignalErrorFull() instead")
    void notificationContactTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateDeleteSecurityEntrySignalErrorFull() instead")
    void notificationContactTemplateDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSignalErrorFull() instead")
    void notificationContactTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetByPathSignalErrorFull() instead")
    void notificationContactTemplateGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetNotificationContactTemplatesSignalErrorFull() instead")
    void notificationContactTemplateGetNotificationContactTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetNotificationContactTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetNotificationContactTemplatesQuerySignalErrorFull() instead")
    void notificationContactTemplateGetNotificationContactTemplatesQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetNotificationContactTemplatesQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSecuritySignalErrorFull() instead")
    void notificationContactTemplateGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSecurityEntriesSignalErrorFull() instead")
    void notificationContactTemplateGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateGetSecurityEntryByNameSignalErrorFull() instead")
    void notificationContactTemplateGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateUpdateSignalErrorFull() instead")
    void notificationContactTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationContactTemplateUpdateSecurityEntrySignalErrorFull() instead")
    void notificationContactTemplateUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationContactTemplateUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
