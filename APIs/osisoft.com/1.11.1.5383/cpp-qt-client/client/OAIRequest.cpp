/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_request_template_isSet = false;
    m_request_template_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("Method")]);
    m_method_isSet = !json[QString("Method")].isNull() && m_method_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("ParentIds")]);
    m_parent_ids_isSet = !json[QString("ParentIds")].isNull() && m_parent_ids_isValid;

    m_request_template_isValid = ::OpenAPI::fromJsonValue(m_request_template, json[QString("RequestTemplate")]);
    m_request_template_isSet = !json[QString("RequestTemplate")].isNull() && m_request_template_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("Resource")]);
    m_resource_isSet = !json[QString("Resource")].isNull() && m_resource_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("Method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_parent_ids.size() > 0) {
        obj.insert(QString("ParentIds"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_request_template.isSet()) {
        obj.insert(QString("RequestTemplate"), ::OpenAPI::toJsonValue(m_request_template));
    }
    if (m_resource_isSet) {
        obj.insert(QString("Resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QString OAIRequest::getContent() const {
    return m_content;
}
void OAIRequest::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIRequest::is_content_Set() const{
    return m_content_isSet;
}

bool OAIRequest::is_content_Valid() const{
    return m_content_isValid;
}

QMap<QString, QString> OAIRequest::getHeaders() const {
    return m_headers;
}
void OAIRequest::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIRequest::getMethod() const {
    return m_method;
}
void OAIRequest::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRequest::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRequest::is_method_Valid() const{
    return m_method_isValid;
}

QList<QString> OAIRequest::getParameters() const {
    return m_parameters;
}
void OAIRequest::setParameters(const QList<QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<QString> OAIRequest::getParentIds() const {
    return m_parent_ids;
}
void OAIRequest::setParentIds(const QList<QString> &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAIRequest::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAIRequest::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

OAIRequestTemplate OAIRequest::getRequestTemplate() const {
    return m_request_template;
}
void OAIRequest::setRequestTemplate(const OAIRequestTemplate &request_template) {
    m_request_template = request_template;
    m_request_template_isSet = true;
}

bool OAIRequest::is_request_template_Set() const{
    return m_request_template_isSet;
}

bool OAIRequest::is_request_template_Valid() const{
    return m_request_template_isValid;
}

QString OAIRequest::getResource() const {
    return m_resource;
}
void OAIRequest::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
