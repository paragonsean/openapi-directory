/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamUpdatesRegister.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamUpdatesRegister::OAIStreamUpdatesRegister(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamUpdatesRegister::OAIStreamUpdatesRegister() {
    this->initializeModel();
}

OAIStreamUpdatesRegister::~OAIStreamUpdatesRegister() {}

void OAIStreamUpdatesRegister::initializeModel() {

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_latest_marker_isSet = false;
    m_latest_marker_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_source_path_isSet = false;
    m_source_path_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIStreamUpdatesRegister::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamUpdatesRegister::fromJsonObject(QJsonObject json) {

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("Exception")]);
    m_exception_isSet = !json[QString("Exception")].isNull() && m_exception_isValid;

    m_latest_marker_isValid = ::OpenAPI::fromJsonValue(m_latest_marker, json[QString("LatestMarker")]);
    m_latest_marker_isSet = !json[QString("LatestMarker")].isNull() && m_latest_marker_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("SourceName")]);
    m_source_name_isSet = !json[QString("SourceName")].isNull() && m_source_name_isValid;

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("SourcePath")]);
    m_source_path_isSet = !json[QString("SourcePath")].isNull() && m_source_path_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIStreamUpdatesRegister::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamUpdatesRegister::asJsonObject() const {
    QJsonObject obj;
    if (m_exception.isSet()) {
        obj.insert(QString("Exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_latest_marker_isSet) {
        obj.insert(QString("LatestMarker"), ::OpenAPI::toJsonValue(m_latest_marker));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("SourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_source_path_isSet) {
        obj.insert(QString("SourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIErrors OAIStreamUpdatesRegister::getException() const {
    return m_exception;
}
void OAIStreamUpdatesRegister::setException(const OAIErrors &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAIStreamUpdatesRegister::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIStreamUpdatesRegister::is_exception_Valid() const{
    return m_exception_isValid;
}

QString OAIStreamUpdatesRegister::getLatestMarker() const {
    return m_latest_marker;
}
void OAIStreamUpdatesRegister::setLatestMarker(const QString &latest_marker) {
    m_latest_marker = latest_marker;
    m_latest_marker_isSet = true;
}

bool OAIStreamUpdatesRegister::is_latest_marker_Set() const{
    return m_latest_marker_isSet;
}

bool OAIStreamUpdatesRegister::is_latest_marker_Valid() const{
    return m_latest_marker_isValid;
}

QString OAIStreamUpdatesRegister::getSource() const {
    return m_source;
}
void OAIStreamUpdatesRegister::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIStreamUpdatesRegister::is_source_Set() const{
    return m_source_isSet;
}

bool OAIStreamUpdatesRegister::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIStreamUpdatesRegister::getSourceName() const {
    return m_source_name;
}
void OAIStreamUpdatesRegister::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIStreamUpdatesRegister::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIStreamUpdatesRegister::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIStreamUpdatesRegister::getSourcePath() const {
    return m_source_path;
}
void OAIStreamUpdatesRegister::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAIStreamUpdatesRegister::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAIStreamUpdatesRegister::is_source_path_Valid() const{
    return m_source_path_isValid;
}

QString OAIStreamUpdatesRegister::getStatus() const {
    return m_status;
}
void OAIStreamUpdatesRegister::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStreamUpdatesRegister::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStreamUpdatesRegister::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIStreamUpdatesRegister::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamUpdatesRegister::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
