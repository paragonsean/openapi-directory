/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalysis.h
 *
 * 
 */

#ifndef OAIAnalysis_H
#define OAIAnalysis_H

#include <QJsonObject>

#include "OAIAnalysisLinks.h"
#include "OAIWebException.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnalysisLinks;
class OAIWebException;

class OAIAnalysis : public OAIObject {
public:
    OAIAnalysis();
    OAIAnalysis(QString json);
    ~OAIAnalysis() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAnalysisRulePlugInName() const;
    void setAnalysisRulePlugInName(const QString &analysis_rule_plug_in_name);
    bool is_analysis_rule_plug_in_name_Set() const;
    bool is_analysis_rule_plug_in_name_Valid() const;

    bool isAutoCreated() const;
    void setAutoCreated(const bool &auto_created);
    bool is_auto_created_Set() const;
    bool is_auto_created_Valid() const;

    QList<QString> getCategoryNames() const;
    void setCategoryNames(const QList<QString> &category_names);
    bool is_category_names_Set() const;
    bool is_category_names_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getGroupId() const;
    void setGroupId(const qint32 &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    bool isHasNotification() const;
    void setHasNotification(const bool &has_notification);
    bool is_has_notification_Set() const;
    bool is_has_notification_Valid() const;

    bool isHasTarget() const;
    void setHasTarget(const bool &has_target);
    bool is_has_target_Set() const;
    bool is_has_target_Valid() const;

    bool isHasTemplate() const;
    void setHasTemplate(const bool &has_template);
    bool is_has_template_Set() const;
    bool is_has_template_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsConfigured() const;
    void setIsConfigured(const bool &is_configured);
    bool is_is_configured_Set() const;
    bool is_is_configured_Valid() const;

    bool isIsTimeRuleDefinedByTemplate() const;
    void setIsTimeRuleDefinedByTemplate(const bool &is_time_rule_defined_by_template);
    bool is_is_time_rule_defined_by_template_Set() const;
    bool is_is_time_rule_defined_by_template_Valid() const;

    OAIAnalysisLinks getLinks() const;
    void setLinks(const OAIAnalysisLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getMaximumQueueSize() const;
    void setMaximumQueueSize(const qint32 &maximum_queue_size);
    bool is_maximum_queue_size_Set() const;
    bool is_maximum_queue_size_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOutputTime() const;
    void setOutputTime(const QString &output_time);
    bool is_output_time_Set() const;
    bool is_output_time_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getPriority() const;
    void setPriority(const QString &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    bool isPublishResults() const;
    void setPublishResults(const bool &publish_results);
    bool is_publish_results_Set() const;
    bool is_publish_results_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTargetWebId() const;
    void setTargetWebId(const QString &target_web_id);
    bool is_target_web_id_Set() const;
    bool is_target_web_id_Valid() const;

    QString getTemplateName() const;
    void setTemplateName(const QString &template_name);
    bool is_template_name_Set() const;
    bool is_template_name_Valid() const;

    QString getTimeRulePlugInName() const;
    void setTimeRulePlugInName(const QString &time_rule_plug_in_name);
    bool is_time_rule_plug_in_name_Set() const;
    bool is_time_rule_plug_in_name_Valid() const;

    OAIWebException getWebException() const;
    void setWebException(const OAIWebException &web_exception);
    bool is_web_exception_Set() const;
    bool is_web_exception_Valid() const;

    QString getWebId() const;
    void setWebId(const QString &web_id);
    bool is_web_id_Set() const;
    bool is_web_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_analysis_rule_plug_in_name;
    bool m_analysis_rule_plug_in_name_isSet;
    bool m_analysis_rule_plug_in_name_isValid;

    bool m_auto_created;
    bool m_auto_created_isSet;
    bool m_auto_created_isValid;

    QList<QString> m_category_names;
    bool m_category_names_isSet;
    bool m_category_names_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    bool m_has_notification;
    bool m_has_notification_isSet;
    bool m_has_notification_isValid;

    bool m_has_target;
    bool m_has_target_isSet;
    bool m_has_target_isValid;

    bool m_has_template;
    bool m_has_template_isSet;
    bool m_has_template_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_configured;
    bool m_is_configured_isSet;
    bool m_is_configured_isValid;

    bool m_is_time_rule_defined_by_template;
    bool m_is_time_rule_defined_by_template_isSet;
    bool m_is_time_rule_defined_by_template_isValid;

    OAIAnalysisLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_maximum_queue_size;
    bool m_maximum_queue_size_isSet;
    bool m_maximum_queue_size_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_output_time;
    bool m_output_time_isSet;
    bool m_output_time_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    bool m_publish_results;
    bool m_publish_results_isSet;
    bool m_publish_results_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_target_web_id;
    bool m_target_web_id_isSet;
    bool m_target_web_id_isValid;

    QString m_template_name;
    bool m_template_name_isSet;
    bool m_template_name_isValid;

    QString m_time_rule_plug_in_name;
    bool m_time_rule_plug_in_name_isSet;
    bool m_time_rule_plug_in_name_isValid;

    OAIWebException m_web_exception;
    bool m_web_exception_isSet;
    bool m_web_exception_isValid;

    QString m_web_id;
    bool m_web_id_isSet;
    bool m_web_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalysis)

#endif // OAIAnalysis_H
