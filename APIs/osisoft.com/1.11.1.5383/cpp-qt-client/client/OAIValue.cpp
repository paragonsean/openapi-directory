/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValue::OAIValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValue::OAIValue() {
    this->initializeModel();
}

OAIValue::~OAIValue() {}

void OAIValue::initializeModel() {

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValue::fromJsonObject(QJsonObject json) {

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("Exception")]);
    m_exception_isSet = !json[QString("Exception")].isNull() && m_exception_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValue::asJsonObject() const {
    QJsonObject obj;
    if (m_exception.isSet()) {
        obj.insert(QString("Exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

OAIErrors OAIValue::getException() const {
    return m_exception;
}
void OAIValue::setException(const OAIErrors &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAIValue::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIValue::is_exception_Valid() const{
    return m_exception_isValid;
}

OAIObject OAIValue::getValue() const {
    return m_value;
}
void OAIValue::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIValue::is_value_Valid() const{
    return m_value_isValid;
}

OAIWebException OAIValue::getWebException() const {
    return m_web_exception;
}
void OAIValue::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIValue::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIValue::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
