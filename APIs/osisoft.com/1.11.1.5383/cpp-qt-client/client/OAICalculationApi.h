/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICalculationApi_H
#define OAI_OAICalculationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIItems_SummaryValue.h"
#include "OAITimedValues.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICalculationApi : public QObject {
    Q_OBJECT

public:
    OAICalculationApi(const int timeOut = 0);
    ~OAICalculationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  expression QString [required]
    * @param[in]  end_time QString [optional]
    * @param[in]  sample_interval QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  web_id QString [optional]
    */
    virtual void calculationGetAtIntervals(const QString &expression, const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expression QString [required]
    * @param[in]  end_time QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  web_id QString [optional]
    */
    virtual void calculationGetAtRecorded(const QString &expression, const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expression QString [required]
    * @param[in]  time QList<QString> [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  web_id QString [optional]
    */
    virtual void calculationGetAtTimes(const QString &expression, const QList<QString> &time, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expression QString [required]
    * @param[in]  calculation_basis QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  sample_interval QString [optional]
    * @param[in]  sample_type QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  summary_duration QString [optional]
    * @param[in]  summary_type QList<QString> [optional]
    * @param[in]  time_type QString [optional]
    * @param[in]  web_id QString [optional]
    */
    virtual void calculationGetSummary(const QString &expression, const ::OpenAPI::OptionalParam<QString> &calculation_basis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sample_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &summary_duration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &summary_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &time_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calculationGetAtIntervalsCallback(OAIHttpRequestWorker *worker);
    void calculationGetAtRecordedCallback(OAIHttpRequestWorker *worker);
    void calculationGetAtTimesCallback(OAIHttpRequestWorker *worker);
    void calculationGetSummaryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calculationGetAtIntervalsSignal(OAITimedValues summary);
    void calculationGetAtRecordedSignal(OAITimedValues summary);
    void calculationGetAtTimesSignal(OAITimedValues summary);
    void calculationGetSummarySignal(OAIItems_SummaryValue summary);


    void calculationGetAtIntervalsSignalFull(OAIHttpRequestWorker *worker, OAITimedValues summary);
    void calculationGetAtRecordedSignalFull(OAIHttpRequestWorker *worker, OAITimedValues summary);
    void calculationGetAtTimesSignalFull(OAIHttpRequestWorker *worker, OAITimedValues summary);
    void calculationGetSummarySignalFull(OAIHttpRequestWorker *worker, OAIItems_SummaryValue summary);

    Q_DECL_DEPRECATED_X("Use calculationGetAtIntervalsSignalError() instead")
    void calculationGetAtIntervalsSignalE(OAITimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetAtIntervalsSignalError(OAITimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculationGetAtRecordedSignalError() instead")
    void calculationGetAtRecordedSignalE(OAITimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetAtRecordedSignalError(OAITimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculationGetAtTimesSignalError() instead")
    void calculationGetAtTimesSignalE(OAITimedValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetAtTimesSignalError(OAITimedValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculationGetSummarySignalError() instead")
    void calculationGetSummarySignalE(OAIItems_SummaryValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetSummarySignalError(OAIItems_SummaryValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calculationGetAtIntervalsSignalErrorFull() instead")
    void calculationGetAtIntervalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetAtIntervalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculationGetAtRecordedSignalErrorFull() instead")
    void calculationGetAtRecordedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetAtRecordedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculationGetAtTimesSignalErrorFull() instead")
    void calculationGetAtTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetAtTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calculationGetSummarySignalErrorFull() instead")
    void calculationGetSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calculationGetSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
