/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamAnnotation::OAIStreamAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamAnnotation::OAIStreamAnnotation() {
    this->initializeModel();
}

OAIStreamAnnotation::~OAIStreamAnnotation() {}

void OAIStreamAnnotation::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modifier_isSet = false;
    m_modifier_isValid = false;

    m_modify_date_isSet = false;
    m_modify_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIStreamAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamAnnotation::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("Creator")]);
    m_creator_isSet = !json[QString("Creator")].isNull() && m_creator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_modifier_isValid = ::OpenAPI::fromJsonValue(m_modifier, json[QString("Modifier")]);
    m_modifier_isSet = !json[QString("Modifier")].isNull() && m_modifier_isValid;

    m_modify_date_isValid = ::OpenAPI::fromJsonValue(m_modify_date, json[QString("ModifyDate")]);
    m_modify_date_isSet = !json[QString("ModifyDate")].isNull() && m_modify_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIStreamAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creator_isSet) {
        obj.insert(QString("Creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modifier_isSet) {
        obj.insert(QString("Modifier"), ::OpenAPI::toJsonValue(m_modifier));
    }
    if (m_modify_date_isSet) {
        obj.insert(QString("ModifyDate"), ::OpenAPI::toJsonValue(m_modify_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QDateTime OAIStreamAnnotation::getCreationDate() const {
    return m_creation_date;
}
void OAIStreamAnnotation::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIStreamAnnotation::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIStreamAnnotation::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIStreamAnnotation::getCreator() const {
    return m_creator;
}
void OAIStreamAnnotation::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIStreamAnnotation::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIStreamAnnotation::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIStreamAnnotation::getDescription() const {
    return m_description;
}
void OAIStreamAnnotation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStreamAnnotation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStreamAnnotation::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPropertyError> OAIStreamAnnotation::getErrors() const {
    return m_errors;
}
void OAIStreamAnnotation::setErrors(const QList<OAIPropertyError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIStreamAnnotation::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIStreamAnnotation::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIStreamAnnotation::getId() const {
    return m_id;
}
void OAIStreamAnnotation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStreamAnnotation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStreamAnnotation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStreamAnnotation::getModifier() const {
    return m_modifier;
}
void OAIStreamAnnotation::setModifier(const QString &modifier) {
    m_modifier = modifier;
    m_modifier_isSet = true;
}

bool OAIStreamAnnotation::is_modifier_Set() const{
    return m_modifier_isSet;
}

bool OAIStreamAnnotation::is_modifier_Valid() const{
    return m_modifier_isValid;
}

QDateTime OAIStreamAnnotation::getModifyDate() const {
    return m_modify_date;
}
void OAIStreamAnnotation::setModifyDate(const QDateTime &modify_date) {
    m_modify_date = modify_date;
    m_modify_date_isSet = true;
}

bool OAIStreamAnnotation::is_modify_date_Set() const{
    return m_modify_date_isSet;
}

bool OAIStreamAnnotation::is_modify_date_Valid() const{
    return m_modify_date_isValid;
}

QString OAIStreamAnnotation::getName() const {
    return m_name;
}
void OAIStreamAnnotation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStreamAnnotation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStreamAnnotation::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIStreamAnnotation::getValue() const {
    return m_value;
}
void OAIStreamAnnotation::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIStreamAnnotation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIStreamAnnotation::is_value_Valid() const{
    return m_value_isValid;
}

OAIWebException OAIStreamAnnotation::getWebException() const {
    return m_web_exception;
}
void OAIStreamAnnotation::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIStreamAnnotation::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIStreamAnnotation::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIStreamAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
