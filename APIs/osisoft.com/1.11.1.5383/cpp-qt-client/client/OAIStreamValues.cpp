/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamValues::OAIStreamValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamValues::OAIStreamValues() {
    this->initializeModel();
}

OAIStreamValues::~OAIStreamValues() {}

void OAIStreamValues::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_units_abbreviation_isSet = false;
    m_units_abbreviation_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIStreamValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamValues::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_units_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_units_abbreviation, json[QString("UnitsAbbreviation")]);
    m_units_abbreviation_isSet = !json[QString("UnitsAbbreviation")].isNull() && m_units_abbreviation_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIStreamValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamValues::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_units_abbreviation_isSet) {
        obj.insert(QString("UnitsAbbreviation"), ::OpenAPI::toJsonValue(m_units_abbreviation));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QList<OAITimedValue> OAIStreamValues::getItems() const {
    return m_items;
}
void OAIStreamValues::setItems(const QList<OAITimedValue> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIStreamValues::is_items_Set() const{
    return m_items_isSet;
}

bool OAIStreamValues::is_items_Valid() const{
    return m_items_isValid;
}

OAIStreamValuesLinks OAIStreamValues::getLinks() const {
    return m_links;
}
void OAIStreamValues::setLinks(const OAIStreamValuesLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIStreamValues::is_links_Set() const{
    return m_links_isSet;
}

bool OAIStreamValues::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIStreamValues::getName() const {
    return m_name;
}
void OAIStreamValues::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStreamValues::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStreamValues::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStreamValues::getPath() const {
    return m_path;
}
void OAIStreamValues::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIStreamValues::is_path_Set() const{
    return m_path_isSet;
}

bool OAIStreamValues::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIStreamValues::getUnitsAbbreviation() const {
    return m_units_abbreviation;
}
void OAIStreamValues::setUnitsAbbreviation(const QString &units_abbreviation) {
    m_units_abbreviation = units_abbreviation;
    m_units_abbreviation_isSet = true;
}

bool OAIStreamValues::is_units_abbreviation_Set() const{
    return m_units_abbreviation_isSet;
}

bool OAIStreamValues::is_units_abbreviation_Valid() const{
    return m_units_abbreviation_isValid;
}

OAIWebException OAIStreamValues::getWebException() const {
    return m_web_exception;
}
void OAIStreamValues::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIStreamValues::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIStreamValues::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIStreamValues::getWebId() const {
    return m_web_id;
}
void OAIStreamValues::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIStreamValues::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIStreamValues::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIStreamValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
