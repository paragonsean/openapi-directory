/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElement::OAIElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElement::OAIElement() {
    this->initializeModel();
}

OAIElement::~OAIElement() {}

void OAIElement::initializeModel() {

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAIElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElement::fromJsonObject(QJsonObject json) {

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("CategoryNames")]);
    m_category_names_isSet = !json[QString("CategoryNames")].isNull() && m_category_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("ExtendedProperties")]);
    m_extended_properties_isSet = !json[QString("ExtendedProperties")].isNull() && m_extended_properties_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("HasChildren")]);
    m_has_children_isSet = !json[QString("HasChildren")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("TemplateName")]);
    m_template_name_isSet = !json[QString("TemplateName")].isNull() && m_template_name_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAIElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElement::asJsonObject() const {
    QJsonObject obj;
    if (m_category_names.size() > 0) {
        obj.insert(QString("CategoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_extended_properties.size() > 0) {
        obj.insert(QString("ExtendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("HasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("TemplateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

QList<QString> OAIElement::getCategoryNames() const {
    return m_category_names;
}
void OAIElement::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIElement::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIElement::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIElement::getDescription() const {
    return m_description;
}
void OAIElement::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIElement::is_description_Set() const{
    return m_description_isSet;
}

bool OAIElement::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPropertyError> OAIElement::getErrors() const {
    return m_errors;
}
void OAIElement::setErrors(const QList<OAIPropertyError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIElement::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIElement::is_errors_Valid() const{
    return m_errors_isValid;
}

QMap<QString, OAIValue> OAIElement::getExtendedProperties() const {
    return m_extended_properties;
}
void OAIElement::setExtendedProperties(const QMap<QString, OAIValue> &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAIElement::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAIElement::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

bool OAIElement::isHasChildren() const {
    return m_has_children;
}
void OAIElement::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIElement::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIElement::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAIElement::getId() const {
    return m_id;
}
void OAIElement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIElement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIElement::is_id_Valid() const{
    return m_id_isValid;
}

OAIElementLinks OAIElement::getLinks() const {
    return m_links;
}
void OAIElement::setLinks(const OAIElementLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIElement::is_links_Set() const{
    return m_links_isSet;
}

bool OAIElement::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIElement::getName() const {
    return m_name;
}
void OAIElement::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIElement::is_name_Set() const{
    return m_name_isSet;
}

bool OAIElement::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIElement::getPath() const {
    return m_path;
}
void OAIElement::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIElement::is_path_Set() const{
    return m_path_isSet;
}

bool OAIElement::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIElement::getPaths() const {
    return m_paths;
}
void OAIElement::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIElement::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIElement::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAIElement::getTemplateName() const {
    return m_template_name;
}
void OAIElement::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIElement::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIElement::is_template_name_Valid() const{
    return m_template_name_isValid;
}

OAIWebException OAIElement::getWebException() const {
    return m_web_exception;
}
void OAIElement::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIElement::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIElement::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAIElement::getWebId() const {
    return m_web_id;
}
void OAIElement::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAIElement::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAIElement::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAIElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
