/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationContactTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationContactTemplate::OAINotificationContactTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationContactTemplate::OAINotificationContactTemplate() {
    this->initializeModel();
}

OAINotificationContactTemplate::~OAINotificationContactTemplate() {}

void OAINotificationContactTemplate::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_config_string_isSet = false;
    m_config_string_isValid = false;

    m_contact_type_isSet = false;
    m_contact_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_escalation_timeout_isSet = false;
    m_escalation_timeout_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_maximum_retries_isSet = false;
    m_maximum_retries_isValid = false;

    m_minimum_acknowledgements_isSet = false;
    m_minimum_acknowledgements_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notify_when_instance_ended_isSet = false;
    m_notify_when_instance_ended_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_plug_in_name_isSet = false;
    m_plug_in_name_isValid = false;

    m_retry_interval_isSet = false;
    m_retry_interval_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;

    m_web_id_isSet = false;
    m_web_id_isValid = false;
}

void OAINotificationContactTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationContactTemplate::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("Available")]);
    m_available_isSet = !json[QString("Available")].isNull() && m_available_isValid;

    m_config_string_isValid = ::OpenAPI::fromJsonValue(m_config_string, json[QString("ConfigString")]);
    m_config_string_isSet = !json[QString("ConfigString")].isNull() && m_config_string_isValid;

    m_contact_type_isValid = ::OpenAPI::fromJsonValue(m_contact_type, json[QString("ContactType")]);
    m_contact_type_isSet = !json[QString("ContactType")].isNull() && m_contact_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_escalation_timeout_isValid = ::OpenAPI::fromJsonValue(m_escalation_timeout, json[QString("EscalationTimeout")]);
    m_escalation_timeout_isSet = !json[QString("EscalationTimeout")].isNull() && m_escalation_timeout_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("HasChildren")]);
    m_has_children_isSet = !json[QString("HasChildren")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_maximum_retries_isValid = ::OpenAPI::fromJsonValue(m_maximum_retries, json[QString("MaximumRetries")]);
    m_maximum_retries_isSet = !json[QString("MaximumRetries")].isNull() && m_maximum_retries_isValid;

    m_minimum_acknowledgements_isValid = ::OpenAPI::fromJsonValue(m_minimum_acknowledgements, json[QString("MinimumAcknowledgements")]);
    m_minimum_acknowledgements_isSet = !json[QString("MinimumAcknowledgements")].isNull() && m_minimum_acknowledgements_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_notify_when_instance_ended_isValid = ::OpenAPI::fromJsonValue(m_notify_when_instance_ended, json[QString("NotifyWhenInstanceEnded")]);
    m_notify_when_instance_ended_isSet = !json[QString("NotifyWhenInstanceEnded")].isNull() && m_notify_when_instance_ended_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_plug_in_name_isValid = ::OpenAPI::fromJsonValue(m_plug_in_name, json[QString("PlugInName")]);
    m_plug_in_name_isSet = !json[QString("PlugInName")].isNull() && m_plug_in_name_isValid;

    m_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_retry_interval, json[QString("RetryInterval")]);
    m_retry_interval_isSet = !json[QString("RetryInterval")].isNull() && m_retry_interval_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;

    m_web_id_isValid = ::OpenAPI::fromJsonValue(m_web_id, json[QString("WebId")]);
    m_web_id_isSet = !json[QString("WebId")].isNull() && m_web_id_isValid;
}

QString OAINotificationContactTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationContactTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("Available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_config_string_isSet) {
        obj.insert(QString("ConfigString"), ::OpenAPI::toJsonValue(m_config_string));
    }
    if (m_contact_type_isSet) {
        obj.insert(QString("ContactType"), ::OpenAPI::toJsonValue(m_contact_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_escalation_timeout_isSet) {
        obj.insert(QString("EscalationTimeout"), ::OpenAPI::toJsonValue(m_escalation_timeout));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("HasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_maximum_retries_isSet) {
        obj.insert(QString("MaximumRetries"), ::OpenAPI::toJsonValue(m_maximum_retries));
    }
    if (m_minimum_acknowledgements_isSet) {
        obj.insert(QString("MinimumAcknowledgements"), ::OpenAPI::toJsonValue(m_minimum_acknowledgements));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notify_when_instance_ended_isSet) {
        obj.insert(QString("NotifyWhenInstanceEnded"), ::OpenAPI::toJsonValue(m_notify_when_instance_ended));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_plug_in_name_isSet) {
        obj.insert(QString("PlugInName"), ::OpenAPI::toJsonValue(m_plug_in_name));
    }
    if (m_retry_interval_isSet) {
        obj.insert(QString("RetryInterval"), ::OpenAPI::toJsonValue(m_retry_interval));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    if (m_web_id_isSet) {
        obj.insert(QString("WebId"), ::OpenAPI::toJsonValue(m_web_id));
    }
    return obj;
}

bool OAINotificationContactTemplate::isAvailable() const {
    return m_available;
}
void OAINotificationContactTemplate::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAINotificationContactTemplate::is_available_Set() const{
    return m_available_isSet;
}

bool OAINotificationContactTemplate::is_available_Valid() const{
    return m_available_isValid;
}

QString OAINotificationContactTemplate::getConfigString() const {
    return m_config_string;
}
void OAINotificationContactTemplate::setConfigString(const QString &config_string) {
    m_config_string = config_string;
    m_config_string_isSet = true;
}

bool OAINotificationContactTemplate::is_config_string_Set() const{
    return m_config_string_isSet;
}

bool OAINotificationContactTemplate::is_config_string_Valid() const{
    return m_config_string_isValid;
}

QString OAINotificationContactTemplate::getContactType() const {
    return m_contact_type;
}
void OAINotificationContactTemplate::setContactType(const QString &contact_type) {
    m_contact_type = contact_type;
    m_contact_type_isSet = true;
}

bool OAINotificationContactTemplate::is_contact_type_Set() const{
    return m_contact_type_isSet;
}

bool OAINotificationContactTemplate::is_contact_type_Valid() const{
    return m_contact_type_isValid;
}

QString OAINotificationContactTemplate::getDescription() const {
    return m_description;
}
void OAINotificationContactTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationContactTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationContactTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINotificationContactTemplate::getEscalationTimeout() const {
    return m_escalation_timeout;
}
void OAINotificationContactTemplate::setEscalationTimeout(const QString &escalation_timeout) {
    m_escalation_timeout = escalation_timeout;
    m_escalation_timeout_isSet = true;
}

bool OAINotificationContactTemplate::is_escalation_timeout_Set() const{
    return m_escalation_timeout_isSet;
}

bool OAINotificationContactTemplate::is_escalation_timeout_Valid() const{
    return m_escalation_timeout_isValid;
}

bool OAINotificationContactTemplate::isHasChildren() const {
    return m_has_children;
}
void OAINotificationContactTemplate::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAINotificationContactTemplate::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAINotificationContactTemplate::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAINotificationContactTemplate::getId() const {
    return m_id;
}
void OAINotificationContactTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationContactTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationContactTemplate::is_id_Valid() const{
    return m_id_isValid;
}

OAINotificationContactTemplateLinks OAINotificationContactTemplate::getLinks() const {
    return m_links;
}
void OAINotificationContactTemplate::setLinks(const OAINotificationContactTemplateLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINotificationContactTemplate::is_links_Set() const{
    return m_links_isSet;
}

bool OAINotificationContactTemplate::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAINotificationContactTemplate::getMaximumRetries() const {
    return m_maximum_retries;
}
void OAINotificationContactTemplate::setMaximumRetries(const qint32 &maximum_retries) {
    m_maximum_retries = maximum_retries;
    m_maximum_retries_isSet = true;
}

bool OAINotificationContactTemplate::is_maximum_retries_Set() const{
    return m_maximum_retries_isSet;
}

bool OAINotificationContactTemplate::is_maximum_retries_Valid() const{
    return m_maximum_retries_isValid;
}

qint32 OAINotificationContactTemplate::getMinimumAcknowledgements() const {
    return m_minimum_acknowledgements;
}
void OAINotificationContactTemplate::setMinimumAcknowledgements(const qint32 &minimum_acknowledgements) {
    m_minimum_acknowledgements = minimum_acknowledgements;
    m_minimum_acknowledgements_isSet = true;
}

bool OAINotificationContactTemplate::is_minimum_acknowledgements_Set() const{
    return m_minimum_acknowledgements_isSet;
}

bool OAINotificationContactTemplate::is_minimum_acknowledgements_Valid() const{
    return m_minimum_acknowledgements_isValid;
}

QString OAINotificationContactTemplate::getName() const {
    return m_name;
}
void OAINotificationContactTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationContactTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationContactTemplate::is_name_Valid() const{
    return m_name_isValid;
}

bool OAINotificationContactTemplate::isNotifyWhenInstanceEnded() const {
    return m_notify_when_instance_ended;
}
void OAINotificationContactTemplate::setNotifyWhenInstanceEnded(const bool &notify_when_instance_ended) {
    m_notify_when_instance_ended = notify_when_instance_ended;
    m_notify_when_instance_ended_isSet = true;
}

bool OAINotificationContactTemplate::is_notify_when_instance_ended_Set() const{
    return m_notify_when_instance_ended_isSet;
}

bool OAINotificationContactTemplate::is_notify_when_instance_ended_Valid() const{
    return m_notify_when_instance_ended_isValid;
}

QString OAINotificationContactTemplate::getPath() const {
    return m_path;
}
void OAINotificationContactTemplate::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAINotificationContactTemplate::is_path_Set() const{
    return m_path_isSet;
}

bool OAINotificationContactTemplate::is_path_Valid() const{
    return m_path_isValid;
}

QString OAINotificationContactTemplate::getPlugInName() const {
    return m_plug_in_name;
}
void OAINotificationContactTemplate::setPlugInName(const QString &plug_in_name) {
    m_plug_in_name = plug_in_name;
    m_plug_in_name_isSet = true;
}

bool OAINotificationContactTemplate::is_plug_in_name_Set() const{
    return m_plug_in_name_isSet;
}

bool OAINotificationContactTemplate::is_plug_in_name_Valid() const{
    return m_plug_in_name_isValid;
}

QString OAINotificationContactTemplate::getRetryInterval() const {
    return m_retry_interval;
}
void OAINotificationContactTemplate::setRetryInterval(const QString &retry_interval) {
    m_retry_interval = retry_interval;
    m_retry_interval_isSet = true;
}

bool OAINotificationContactTemplate::is_retry_interval_Set() const{
    return m_retry_interval_isSet;
}

bool OAINotificationContactTemplate::is_retry_interval_Valid() const{
    return m_retry_interval_isValid;
}

OAIWebException OAINotificationContactTemplate::getWebException() const {
    return m_web_exception;
}
void OAINotificationContactTemplate::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAINotificationContactTemplate::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAINotificationContactTemplate::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

QString OAINotificationContactTemplate::getWebId() const {
    return m_web_id;
}
void OAINotificationContactTemplate::setWebId(const QString &web_id) {
    m_web_id = web_id;
    m_web_id_isSet = true;
}

bool OAINotificationContactTemplate::is_web_id_Set() const{
    return m_web_id_isSet;
}

bool OAINotificationContactTemplate::is_web_id_Valid() const{
    return m_web_id_isValid;
}

bool OAINotificationContactTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escalation_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_acknowledgements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_when_instance_ended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_in_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationContactTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
