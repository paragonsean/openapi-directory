/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeTemplateLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeTemplateLinks::OAIAttributeTemplateLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeTemplateLinks::OAIAttributeTemplateLinks() {
    this->initializeModel();
}

OAIAttributeTemplateLinks::~OAIAttributeTemplateLinks() {}

void OAIAttributeTemplateLinks::initializeModel() {

    m_attribute_templates_isSet = false;
    m_attribute_templates_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_element_template_isSet = false;
    m_element_template_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_trait_isSet = false;
    m_trait_isValid = false;
}

void OAIAttributeTemplateLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeTemplateLinks::fromJsonObject(QJsonObject json) {

    m_attribute_templates_isValid = ::OpenAPI::fromJsonValue(m_attribute_templates, json[QString("AttributeTemplates")]);
    m_attribute_templates_isSet = !json[QString("AttributeTemplates")].isNull() && m_attribute_templates_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_element_template_isValid = ::OpenAPI::fromJsonValue(m_element_template, json[QString("ElementTemplate")]);
    m_element_template_isSet = !json[QString("ElementTemplate")].isNull() && m_element_template_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_trait_isValid = ::OpenAPI::fromJsonValue(m_trait, json[QString("Trait")]);
    m_trait_isSet = !json[QString("Trait")].isNull() && m_trait_isValid;
}

QString OAIAttributeTemplateLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeTemplateLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_templates_isSet) {
        obj.insert(QString("AttributeTemplates"), ::OpenAPI::toJsonValue(m_attribute_templates));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_element_template_isSet) {
        obj.insert(QString("ElementTemplate"), ::OpenAPI::toJsonValue(m_element_template));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_trait_isSet) {
        obj.insert(QString("Trait"), ::OpenAPI::toJsonValue(m_trait));
    }
    return obj;
}

QString OAIAttributeTemplateLinks::getAttributeTemplates() const {
    return m_attribute_templates;
}
void OAIAttributeTemplateLinks::setAttributeTemplates(const QString &attribute_templates) {
    m_attribute_templates = attribute_templates;
    m_attribute_templates_isSet = true;
}

bool OAIAttributeTemplateLinks::is_attribute_templates_Set() const{
    return m_attribute_templates_isSet;
}

bool OAIAttributeTemplateLinks::is_attribute_templates_Valid() const{
    return m_attribute_templates_isValid;
}

QString OAIAttributeTemplateLinks::getCategories() const {
    return m_categories;
}
void OAIAttributeTemplateLinks::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIAttributeTemplateLinks::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIAttributeTemplateLinks::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIAttributeTemplateLinks::getElementTemplate() const {
    return m_element_template;
}
void OAIAttributeTemplateLinks::setElementTemplate(const QString &element_template) {
    m_element_template = element_template;
    m_element_template_isSet = true;
}

bool OAIAttributeTemplateLinks::is_element_template_Set() const{
    return m_element_template_isSet;
}

bool OAIAttributeTemplateLinks::is_element_template_Valid() const{
    return m_element_template_isValid;
}

QString OAIAttributeTemplateLinks::getParent() const {
    return m_parent;
}
void OAIAttributeTemplateLinks::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAttributeTemplateLinks::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAttributeTemplateLinks::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIAttributeTemplateLinks::getSelf() const {
    return m_self;
}
void OAIAttributeTemplateLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAttributeTemplateLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAttributeTemplateLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIAttributeTemplateLinks::getTrait() const {
    return m_trait;
}
void OAIAttributeTemplateLinks::setTrait(const QString &trait) {
    m_trait = trait;
    m_trait_isSet = true;
}

bool OAIAttributeTemplateLinks::is_trait_Set() const{
    return m_trait_isSet;
}

bool OAIAttributeTemplateLinks::is_trait_Valid() const{
    return m_trait_isValid;
}

bool OAIAttributeTemplateLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trait_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeTemplateLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
