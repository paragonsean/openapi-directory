/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElementLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElementLinks::OAIElementLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElementLinks::OAIElementLinks() {
    this->initializeModel();
}

OAIElementLinks::~OAIElementLinks() {}

void OAIElementLinks::initializeModel() {

    m_analyses_isSet = false;
    m_analyses_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_default_attribute_isSet = false;
    m_default_attribute_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_end_value_isSet = false;
    m_end_value_isValid = false;

    m_event_frames_isSet = false;
    m_event_frames_isValid = false;

    m_interpolated_data_isSet = false;
    m_interpolated_data_isValid = false;

    m_notification_rules_isSet = false;
    m_notification_rules_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_plot_data_isSet = false;
    m_plot_data_isValid = false;

    m_recorded_data_isSet = false;
    m_recorded_data_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_security_entries_isSet = false;
    m_security_entries_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_summary_data_isSet = false;
    m_summary_data_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIElementLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElementLinks::fromJsonObject(QJsonObject json) {

    m_analyses_isValid = ::OpenAPI::fromJsonValue(m_analyses, json[QString("Analyses")]);
    m_analyses_isSet = !json[QString("Analyses")].isNull() && m_analyses_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_default_attribute_isValid = ::OpenAPI::fromJsonValue(m_default_attribute, json[QString("DefaultAttribute")]);
    m_default_attribute_isSet = !json[QString("DefaultAttribute")].isNull() && m_default_attribute_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("Elements")]);
    m_elements_isSet = !json[QString("Elements")].isNull() && m_elements_isValid;

    m_end_value_isValid = ::OpenAPI::fromJsonValue(m_end_value, json[QString("EndValue")]);
    m_end_value_isSet = !json[QString("EndValue")].isNull() && m_end_value_isValid;

    m_event_frames_isValid = ::OpenAPI::fromJsonValue(m_event_frames, json[QString("EventFrames")]);
    m_event_frames_isSet = !json[QString("EventFrames")].isNull() && m_event_frames_isValid;

    m_interpolated_data_isValid = ::OpenAPI::fromJsonValue(m_interpolated_data, json[QString("InterpolatedData")]);
    m_interpolated_data_isSet = !json[QString("InterpolatedData")].isNull() && m_interpolated_data_isValid;

    m_notification_rules_isValid = ::OpenAPI::fromJsonValue(m_notification_rules, json[QString("NotificationRules")]);
    m_notification_rules_isSet = !json[QString("NotificationRules")].isNull() && m_notification_rules_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_plot_data_isValid = ::OpenAPI::fromJsonValue(m_plot_data, json[QString("PlotData")]);
    m_plot_data_isSet = !json[QString("PlotData")].isNull() && m_plot_data_isValid;

    m_recorded_data_isValid = ::OpenAPI::fromJsonValue(m_recorded_data, json[QString("RecordedData")]);
    m_recorded_data_isSet = !json[QString("RecordedData")].isNull() && m_recorded_data_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("Security")]);
    m_security_isSet = !json[QString("Security")].isNull() && m_security_isValid;

    m_security_entries_isValid = ::OpenAPI::fromJsonValue(m_security_entries, json[QString("SecurityEntries")]);
    m_security_entries_isSet = !json[QString("SecurityEntries")].isNull() && m_security_entries_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;

    m_summary_data_isValid = ::OpenAPI::fromJsonValue(m_summary_data, json[QString("SummaryData")]);
    m_summary_data_isSet = !json[QString("SummaryData")].isNull() && m_summary_data_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("Template")]);
    m_r_template_isSet = !json[QString("Template")].isNull() && m_r_template_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIElementLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElementLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_analyses_isSet) {
        obj.insert(QString("Analyses"), ::OpenAPI::toJsonValue(m_analyses));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_default_attribute_isSet) {
        obj.insert(QString("DefaultAttribute"), ::OpenAPI::toJsonValue(m_default_attribute));
    }
    if (m_elements_isSet) {
        obj.insert(QString("Elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_end_value_isSet) {
        obj.insert(QString("EndValue"), ::OpenAPI::toJsonValue(m_end_value));
    }
    if (m_event_frames_isSet) {
        obj.insert(QString("EventFrames"), ::OpenAPI::toJsonValue(m_event_frames));
    }
    if (m_interpolated_data_isSet) {
        obj.insert(QString("InterpolatedData"), ::OpenAPI::toJsonValue(m_interpolated_data));
    }
    if (m_notification_rules_isSet) {
        obj.insert(QString("NotificationRules"), ::OpenAPI::toJsonValue(m_notification_rules));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_plot_data_isSet) {
        obj.insert(QString("PlotData"), ::OpenAPI::toJsonValue(m_plot_data));
    }
    if (m_recorded_data_isSet) {
        obj.insert(QString("RecordedData"), ::OpenAPI::toJsonValue(m_recorded_data));
    }
    if (m_security_isSet) {
        obj.insert(QString("Security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_security_entries_isSet) {
        obj.insert(QString("SecurityEntries"), ::OpenAPI::toJsonValue(m_security_entries));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_summary_data_isSet) {
        obj.insert(QString("SummaryData"), ::OpenAPI::toJsonValue(m_summary_data));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("Template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIElementLinks::getAnalyses() const {
    return m_analyses;
}
void OAIElementLinks::setAnalyses(const QString &analyses) {
    m_analyses = analyses;
    m_analyses_isSet = true;
}

bool OAIElementLinks::is_analyses_Set() const{
    return m_analyses_isSet;
}

bool OAIElementLinks::is_analyses_Valid() const{
    return m_analyses_isValid;
}

QString OAIElementLinks::getAttributes() const {
    return m_attributes;
}
void OAIElementLinks::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIElementLinks::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIElementLinks::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIElementLinks::getCategories() const {
    return m_categories;
}
void OAIElementLinks::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIElementLinks::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIElementLinks::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIElementLinks::getDatabase() const {
    return m_database;
}
void OAIElementLinks::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIElementLinks::is_database_Set() const{
    return m_database_isSet;
}

bool OAIElementLinks::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIElementLinks::getDefaultAttribute() const {
    return m_default_attribute;
}
void OAIElementLinks::setDefaultAttribute(const QString &default_attribute) {
    m_default_attribute = default_attribute;
    m_default_attribute_isSet = true;
}

bool OAIElementLinks::is_default_attribute_Set() const{
    return m_default_attribute_isSet;
}

bool OAIElementLinks::is_default_attribute_Valid() const{
    return m_default_attribute_isValid;
}

QString OAIElementLinks::getElements() const {
    return m_elements;
}
void OAIElementLinks::setElements(const QString &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIElementLinks::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIElementLinks::is_elements_Valid() const{
    return m_elements_isValid;
}

QString OAIElementLinks::getEndValue() const {
    return m_end_value;
}
void OAIElementLinks::setEndValue(const QString &end_value) {
    m_end_value = end_value;
    m_end_value_isSet = true;
}

bool OAIElementLinks::is_end_value_Set() const{
    return m_end_value_isSet;
}

bool OAIElementLinks::is_end_value_Valid() const{
    return m_end_value_isValid;
}

QString OAIElementLinks::getEventFrames() const {
    return m_event_frames;
}
void OAIElementLinks::setEventFrames(const QString &event_frames) {
    m_event_frames = event_frames;
    m_event_frames_isSet = true;
}

bool OAIElementLinks::is_event_frames_Set() const{
    return m_event_frames_isSet;
}

bool OAIElementLinks::is_event_frames_Valid() const{
    return m_event_frames_isValid;
}

QString OAIElementLinks::getInterpolatedData() const {
    return m_interpolated_data;
}
void OAIElementLinks::setInterpolatedData(const QString &interpolated_data) {
    m_interpolated_data = interpolated_data;
    m_interpolated_data_isSet = true;
}

bool OAIElementLinks::is_interpolated_data_Set() const{
    return m_interpolated_data_isSet;
}

bool OAIElementLinks::is_interpolated_data_Valid() const{
    return m_interpolated_data_isValid;
}

QString OAIElementLinks::getNotificationRules() const {
    return m_notification_rules;
}
void OAIElementLinks::setNotificationRules(const QString &notification_rules) {
    m_notification_rules = notification_rules;
    m_notification_rules_isSet = true;
}

bool OAIElementLinks::is_notification_rules_Set() const{
    return m_notification_rules_isSet;
}

bool OAIElementLinks::is_notification_rules_Valid() const{
    return m_notification_rules_isValid;
}

QString OAIElementLinks::getParent() const {
    return m_parent;
}
void OAIElementLinks::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIElementLinks::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIElementLinks::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIElementLinks::getPlotData() const {
    return m_plot_data;
}
void OAIElementLinks::setPlotData(const QString &plot_data) {
    m_plot_data = plot_data;
    m_plot_data_isSet = true;
}

bool OAIElementLinks::is_plot_data_Set() const{
    return m_plot_data_isSet;
}

bool OAIElementLinks::is_plot_data_Valid() const{
    return m_plot_data_isValid;
}

QString OAIElementLinks::getRecordedData() const {
    return m_recorded_data;
}
void OAIElementLinks::setRecordedData(const QString &recorded_data) {
    m_recorded_data = recorded_data;
    m_recorded_data_isSet = true;
}

bool OAIElementLinks::is_recorded_data_Set() const{
    return m_recorded_data_isSet;
}

bool OAIElementLinks::is_recorded_data_Valid() const{
    return m_recorded_data_isValid;
}

QString OAIElementLinks::getSecurity() const {
    return m_security;
}
void OAIElementLinks::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIElementLinks::is_security_Set() const{
    return m_security_isSet;
}

bool OAIElementLinks::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIElementLinks::getSecurityEntries() const {
    return m_security_entries;
}
void OAIElementLinks::setSecurityEntries(const QString &security_entries) {
    m_security_entries = security_entries;
    m_security_entries_isSet = true;
}

bool OAIElementLinks::is_security_entries_Set() const{
    return m_security_entries_isSet;
}

bool OAIElementLinks::is_security_entries_Valid() const{
    return m_security_entries_isValid;
}

QString OAIElementLinks::getSelf() const {
    return m_self;
}
void OAIElementLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIElementLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIElementLinks::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIElementLinks::getSummaryData() const {
    return m_summary_data;
}
void OAIElementLinks::setSummaryData(const QString &summary_data) {
    m_summary_data = summary_data;
    m_summary_data_isSet = true;
}

bool OAIElementLinks::is_summary_data_Set() const{
    return m_summary_data_isSet;
}

bool OAIElementLinks::is_summary_data_Valid() const{
    return m_summary_data_isValid;
}

QString OAIElementLinks::getRTemplate() const {
    return m_r_template;
}
void OAIElementLinks::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIElementLinks::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIElementLinks::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIElementLinks::getValue() const {
    return m_value;
}
void OAIElementLinks::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIElementLinks::is_value_Set() const{
    return m_value_isSet;
}

bool OAIElementLinks::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIElementLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolated_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plot_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElementLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
