/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelInstance::OAIChannelInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelInstance::OAIChannelInstance() {
    this->initializeModel();
}

OAIChannelInstance::~OAIChannelInstance() {}

void OAIChannelInstance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_message_sent_time_isSet = false;
    m_last_message_sent_time_isValid = false;

    m_sent_message_count_isSet = false;
    m_sent_message_count_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIChannelInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelInstance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_message_sent_time_isValid = ::OpenAPI::fromJsonValue(m_last_message_sent_time, json[QString("LastMessageSentTime")]);
    m_last_message_sent_time_isSet = !json[QString("LastMessageSentTime")].isNull() && m_last_message_sent_time_isValid;

    m_sent_message_count_isValid = ::OpenAPI::fromJsonValue(m_sent_message_count, json[QString("SentMessageCount")]);
    m_sent_message_count_isSet = !json[QString("SentMessageCount")].isNull() && m_sent_message_count_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIChannelInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_message_sent_time_isSet) {
        obj.insert(QString("LastMessageSentTime"), ::OpenAPI::toJsonValue(m_last_message_sent_time));
    }
    if (m_sent_message_count_isSet) {
        obj.insert(QString("SentMessageCount"), ::OpenAPI::toJsonValue(m_sent_message_count));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIChannelInstance::getId() const {
    return m_id;
}
void OAIChannelInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannelInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannelInstance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChannelInstance::getLastMessageSentTime() const {
    return m_last_message_sent_time;
}
void OAIChannelInstance::setLastMessageSentTime(const QString &last_message_sent_time) {
    m_last_message_sent_time = last_message_sent_time;
    m_last_message_sent_time_isSet = true;
}

bool OAIChannelInstance::is_last_message_sent_time_Set() const{
    return m_last_message_sent_time_isSet;
}

bool OAIChannelInstance::is_last_message_sent_time_Valid() const{
    return m_last_message_sent_time_isValid;
}

qint32 OAIChannelInstance::getSentMessageCount() const {
    return m_sent_message_count;
}
void OAIChannelInstance::setSentMessageCount(const qint32 &sent_message_count) {
    m_sent_message_count = sent_message_count;
    m_sent_message_count_isSet = true;
}

bool OAIChannelInstance::is_sent_message_count_Set() const{
    return m_sent_message_count_isSet;
}

bool OAIChannelInstance::is_sent_message_count_Valid() const{
    return m_sent_message_count_isValid;
}

QString OAIChannelInstance::getStartTime() const {
    return m_start_time;
}
void OAIChannelInstance::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIChannelInstance::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIChannelInstance::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIWebException OAIChannelInstance::getWebException() const {
    return m_web_exception;
}
void OAIChannelInstance::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIChannelInstance::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIChannelInstance::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIChannelInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_sent_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_message_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
