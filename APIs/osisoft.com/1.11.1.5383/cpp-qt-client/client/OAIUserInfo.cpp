/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInfo::OAIUserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInfo::OAIUserInfo() {
    this->initializeModel();
}

OAIUserInfo::~OAIUserInfo() {}

void OAIUserInfo::initializeModel() {

    m_identity_type_isSet = false;
    m_identity_type_isValid = false;

    m_impersonation_level_isSet = false;
    m_impersonation_level_isValid = false;

    m_is_authenticated_isSet = false;
    m_is_authenticated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_web_exception_isSet = false;
    m_web_exception_isValid = false;
}

void OAIUserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInfo::fromJsonObject(QJsonObject json) {

    m_identity_type_isValid = ::OpenAPI::fromJsonValue(m_identity_type, json[QString("IdentityType")]);
    m_identity_type_isSet = !json[QString("IdentityType")].isNull() && m_identity_type_isValid;

    m_impersonation_level_isValid = ::OpenAPI::fromJsonValue(m_impersonation_level, json[QString("ImpersonationLevel")]);
    m_impersonation_level_isSet = !json[QString("ImpersonationLevel")].isNull() && m_impersonation_level_isValid;

    m_is_authenticated_isValid = ::OpenAPI::fromJsonValue(m_is_authenticated, json[QString("IsAuthenticated")]);
    m_is_authenticated_isSet = !json[QString("IsAuthenticated")].isNull() && m_is_authenticated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("SID")]);
    m_sid_isSet = !json[QString("SID")].isNull() && m_sid_isValid;

    m_web_exception_isValid = ::OpenAPI::fromJsonValue(m_web_exception, json[QString("WebException")]);
    m_web_exception_isSet = !json[QString("WebException")].isNull() && m_web_exception_isValid;
}

QString OAIUserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_type_isSet) {
        obj.insert(QString("IdentityType"), ::OpenAPI::toJsonValue(m_identity_type));
    }
    if (m_impersonation_level_isSet) {
        obj.insert(QString("ImpersonationLevel"), ::OpenAPI::toJsonValue(m_impersonation_level));
    }
    if (m_is_authenticated_isSet) {
        obj.insert(QString("IsAuthenticated"), ::OpenAPI::toJsonValue(m_is_authenticated));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sid_isSet) {
        obj.insert(QString("SID"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_web_exception.isSet()) {
        obj.insert(QString("WebException"), ::OpenAPI::toJsonValue(m_web_exception));
    }
    return obj;
}

QString OAIUserInfo::getIdentityType() const {
    return m_identity_type;
}
void OAIUserInfo::setIdentityType(const QString &identity_type) {
    m_identity_type = identity_type;
    m_identity_type_isSet = true;
}

bool OAIUserInfo::is_identity_type_Set() const{
    return m_identity_type_isSet;
}

bool OAIUserInfo::is_identity_type_Valid() const{
    return m_identity_type_isValid;
}

QString OAIUserInfo::getImpersonationLevel() const {
    return m_impersonation_level;
}
void OAIUserInfo::setImpersonationLevel(const QString &impersonation_level) {
    m_impersonation_level = impersonation_level;
    m_impersonation_level_isSet = true;
}

bool OAIUserInfo::is_impersonation_level_Set() const{
    return m_impersonation_level_isSet;
}

bool OAIUserInfo::is_impersonation_level_Valid() const{
    return m_impersonation_level_isValid;
}

bool OAIUserInfo::isIsAuthenticated() const {
    return m_is_authenticated;
}
void OAIUserInfo::setIsAuthenticated(const bool &is_authenticated) {
    m_is_authenticated = is_authenticated;
    m_is_authenticated_isSet = true;
}

bool OAIUserInfo::is_is_authenticated_Set() const{
    return m_is_authenticated_isSet;
}

bool OAIUserInfo::is_is_authenticated_Valid() const{
    return m_is_authenticated_isValid;
}

QString OAIUserInfo::getName() const {
    return m_name;
}
void OAIUserInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserInfo::getSid() const {
    return m_sid;
}
void OAIUserInfo::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIUserInfo::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIUserInfo::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIWebException OAIUserInfo::getWebException() const {
    return m_web_exception;
}
void OAIUserInfo::setWebException(const OAIWebException &web_exception) {
    m_web_exception = web_exception;
    m_web_exception_isSet = true;
}

bool OAIUserInfo::is_web_exception_Set() const{
    return m_web_exception_isSet;
}

bool OAIUserInfo::is_web_exception_Valid() const{
    return m_web_exception_isValid;
}

bool OAIUserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impersonation_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
