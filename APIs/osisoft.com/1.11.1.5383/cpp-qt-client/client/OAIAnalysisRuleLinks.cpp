/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisRuleLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisRuleLinks::OAIAnalysisRuleLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisRuleLinks::OAIAnalysisRuleLinks() {
    this->initializeModel();
}

OAIAnalysisRuleLinks::~OAIAnalysisRuleLinks() {}

void OAIAnalysisRuleLinks::initializeModel() {

    m_analysis_isSet = false;
    m_analysis_isValid = false;

    m_analysis_rules_isSet = false;
    m_analysis_rules_isValid = false;

    m_analysis_template_isSet = false;
    m_analysis_template_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_plug_in_isSet = false;
    m_plug_in_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIAnalysisRuleLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisRuleLinks::fromJsonObject(QJsonObject json) {

    m_analysis_isValid = ::OpenAPI::fromJsonValue(m_analysis, json[QString("Analysis")]);
    m_analysis_isSet = !json[QString("Analysis")].isNull() && m_analysis_isValid;

    m_analysis_rules_isValid = ::OpenAPI::fromJsonValue(m_analysis_rules, json[QString("AnalysisRules")]);
    m_analysis_rules_isSet = !json[QString("AnalysisRules")].isNull() && m_analysis_rules_isValid;

    m_analysis_template_isValid = ::OpenAPI::fromJsonValue(m_analysis_template, json[QString("AnalysisTemplate")]);
    m_analysis_template_isSet = !json[QString("AnalysisTemplate")].isNull() && m_analysis_template_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_plug_in_isValid = ::OpenAPI::fromJsonValue(m_plug_in, json[QString("PlugIn")]);
    m_plug_in_isSet = !json[QString("PlugIn")].isNull() && m_plug_in_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("Self")]);
    m_self_isSet = !json[QString("Self")].isNull() && m_self_isValid;
}

QString OAIAnalysisRuleLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisRuleLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_isSet) {
        obj.insert(QString("Analysis"), ::OpenAPI::toJsonValue(m_analysis));
    }
    if (m_analysis_rules_isSet) {
        obj.insert(QString("AnalysisRules"), ::OpenAPI::toJsonValue(m_analysis_rules));
    }
    if (m_analysis_template_isSet) {
        obj.insert(QString("AnalysisTemplate"), ::OpenAPI::toJsonValue(m_analysis_template));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_plug_in_isSet) {
        obj.insert(QString("PlugIn"), ::OpenAPI::toJsonValue(m_plug_in));
    }
    if (m_self_isSet) {
        obj.insert(QString("Self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QString OAIAnalysisRuleLinks::getAnalysis() const {
    return m_analysis;
}
void OAIAnalysisRuleLinks::setAnalysis(const QString &analysis) {
    m_analysis = analysis;
    m_analysis_isSet = true;
}

bool OAIAnalysisRuleLinks::is_analysis_Set() const{
    return m_analysis_isSet;
}

bool OAIAnalysisRuleLinks::is_analysis_Valid() const{
    return m_analysis_isValid;
}

QString OAIAnalysisRuleLinks::getAnalysisRules() const {
    return m_analysis_rules;
}
void OAIAnalysisRuleLinks::setAnalysisRules(const QString &analysis_rules) {
    m_analysis_rules = analysis_rules;
    m_analysis_rules_isSet = true;
}

bool OAIAnalysisRuleLinks::is_analysis_rules_Set() const{
    return m_analysis_rules_isSet;
}

bool OAIAnalysisRuleLinks::is_analysis_rules_Valid() const{
    return m_analysis_rules_isValid;
}

QString OAIAnalysisRuleLinks::getAnalysisTemplate() const {
    return m_analysis_template;
}
void OAIAnalysisRuleLinks::setAnalysisTemplate(const QString &analysis_template) {
    m_analysis_template = analysis_template;
    m_analysis_template_isSet = true;
}

bool OAIAnalysisRuleLinks::is_analysis_template_Set() const{
    return m_analysis_template_isSet;
}

bool OAIAnalysisRuleLinks::is_analysis_template_Valid() const{
    return m_analysis_template_isValid;
}

QString OAIAnalysisRuleLinks::getParent() const {
    return m_parent;
}
void OAIAnalysisRuleLinks::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAnalysisRuleLinks::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAnalysisRuleLinks::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIAnalysisRuleLinks::getPlugIn() const {
    return m_plug_in;
}
void OAIAnalysisRuleLinks::setPlugIn(const QString &plug_in) {
    m_plug_in = plug_in;
    m_plug_in_isSet = true;
}

bool OAIAnalysisRuleLinks::is_plug_in_Set() const{
    return m_plug_in_isSet;
}

bool OAIAnalysisRuleLinks::is_plug_in_Valid() const{
    return m_plug_in_isValid;
}

QString OAIAnalysisRuleLinks::getSelf() const {
    return m_self;
}
void OAIAnalysisRuleLinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIAnalysisRuleLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIAnalysisRuleLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIAnalysisRuleLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisRuleLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
