/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUnitApi_H
#define OAI_OAIUnitApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUnit.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUnitApi : public QObject {
    Q_OBJECT

public:
    OAIUnitApi(const int timeOut = 0);
    ~OAIUnitApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void unitDelete(const QString &web_id);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void unitGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  unit_dto OAIUnit [required]
    */
    virtual void unitUpdate(const QString &web_id, const OAIUnit &unit_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void unitDeleteCallback(OAIHttpRequestWorker *worker);
    void unitGetCallback(OAIHttpRequestWorker *worker);
    void unitGetByPathCallback(OAIHttpRequestWorker *worker);
    void unitUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void unitDeleteSignal();
    void unitGetSignal(OAIUnit summary);
    void unitGetByPathSignal(OAIUnit summary);
    void unitUpdateSignal();


    void unitDeleteSignalFull(OAIHttpRequestWorker *worker);
    void unitGetSignalFull(OAIHttpRequestWorker *worker, OAIUnit summary);
    void unitGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIUnit summary);
    void unitUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use unitDeleteSignalError() instead")
    void unitDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unitDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitGetSignalError() instead")
    void unitGetSignalE(OAIUnit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unitGetSignalError(OAIUnit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitGetByPathSignalError() instead")
    void unitGetByPathSignalE(OAIUnit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unitGetByPathSignalError(OAIUnit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitUpdateSignalError() instead")
    void unitUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unitUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use unitDeleteSignalErrorFull() instead")
    void unitDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitGetSignalErrorFull() instead")
    void unitGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitGetByPathSignalErrorFull() instead")
    void unitGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unitUpdateSignalErrorFull() instead")
    void unitUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unitUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
