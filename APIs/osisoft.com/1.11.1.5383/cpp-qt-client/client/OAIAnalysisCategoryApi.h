/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisCategoryApi_H
#define OAI_OAIAnalysisCategoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisCategory.h"
#include "OAIErrors.h"
#include "OAIItems_SecurityEntry.h"
#include "OAIItems_SecurityRights.h"
#include "OAISecurityEntry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisCategoryApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisCategoryApi(const int timeOut = 0);
    ~OAIAnalysisCategoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCategoryCreateSecurityEntry(const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    */
    virtual void analysisCategoryDelete(const QString &web_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void analysisCategoryDeleteSecurityEntry(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCategoryGet(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCategoryGetByPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  user_identity QList<QString> [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCategoryGetSecurity(const QString &web_id, const QList<QString> &user_identity, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  name_filter QString [optional]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCategoryGetSecurityEntries(const QString &web_id, const ::OpenAPI::OptionalParam<QString> &name_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  selected_fields QString [optional]
    * @param[in]  web_id_type QString [optional]
    */
    virtual void analysisCategoryGetSecurityEntryByName(const QString &name, const QString &web_id, const ::OpenAPI::OptionalParam<QString> &selected_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &web_id_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_id QString [required]
    * @param[in]  category OAIAnalysisCategory [required]
    */
    virtual void analysisCategoryUpdate(const QString &web_id, const OAIAnalysisCategory &category);

    /**
    * @param[in]  name QString [required]
    * @param[in]  web_id QString [required]
    * @param[in]  security_entry OAISecurityEntry [required]
    * @param[in]  apply_to_children bool [optional]
    */
    virtual void analysisCategoryUpdateSecurityEntry(const QString &name, const QString &web_id, const OAISecurityEntry &security_entry, const ::OpenAPI::OptionalParam<bool> &apply_to_children = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analysisCategoryCreateSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryDeleteCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryDeleteSecurityEntryCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryGetCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryGetByPathCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryGetSecurityCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryGetSecurityEntriesCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryGetSecurityEntryByNameCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryUpdateCallback(OAIHttpRequestWorker *worker);
    void analysisCategoryUpdateSecurityEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analysisCategoryCreateSecurityEntrySignal();
    void analysisCategoryDeleteSignal();
    void analysisCategoryDeleteSecurityEntrySignal();
    void analysisCategoryGetSignal(OAIAnalysisCategory summary);
    void analysisCategoryGetByPathSignal(OAIAnalysisCategory summary);
    void analysisCategoryGetSecuritySignal(OAIItems_SecurityRights summary);
    void analysisCategoryGetSecurityEntriesSignal(OAIItems_SecurityEntry summary);
    void analysisCategoryGetSecurityEntryByNameSignal(OAISecurityEntry summary);
    void analysisCategoryUpdateSignal();
    void analysisCategoryUpdateSecurityEntrySignal();


    void analysisCategoryCreateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void analysisCategoryDeleteSignalFull(OAIHttpRequestWorker *worker);
    void analysisCategoryDeleteSecurityEntrySignalFull(OAIHttpRequestWorker *worker);
    void analysisCategoryGetSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisCategory summary);
    void analysisCategoryGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisCategory summary);
    void analysisCategoryGetSecuritySignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityRights summary);
    void analysisCategoryGetSecurityEntriesSignalFull(OAIHttpRequestWorker *worker, OAIItems_SecurityEntry summary);
    void analysisCategoryGetSecurityEntryByNameSignalFull(OAIHttpRequestWorker *worker, OAISecurityEntry summary);
    void analysisCategoryUpdateSignalFull(OAIHttpRequestWorker *worker);
    void analysisCategoryUpdateSecurityEntrySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use analysisCategoryCreateSecurityEntrySignalError() instead")
    void analysisCategoryCreateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryCreateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryDeleteSignalError() instead")
    void analysisCategoryDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryDeleteSecurityEntrySignalError() instead")
    void analysisCategoryDeleteSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryDeleteSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSignalError() instead")
    void analysisCategoryGetSignalE(OAIAnalysisCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSignalError(OAIAnalysisCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetByPathSignalError() instead")
    void analysisCategoryGetByPathSignalE(OAIAnalysisCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetByPathSignalError(OAIAnalysisCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSecuritySignalError() instead")
    void analysisCategoryGetSecuritySignalE(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSecuritySignalError(OAIItems_SecurityRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSecurityEntriesSignalError() instead")
    void analysisCategoryGetSecurityEntriesSignalE(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSecurityEntriesSignalError(OAIItems_SecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSecurityEntryByNameSignalError() instead")
    void analysisCategoryGetSecurityEntryByNameSignalE(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSecurityEntryByNameSignalError(OAISecurityEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryUpdateSignalError() instead")
    void analysisCategoryUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryUpdateSecurityEntrySignalError() instead")
    void analysisCategoryUpdateSecurityEntrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryUpdateSecurityEntrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analysisCategoryCreateSecurityEntrySignalErrorFull() instead")
    void analysisCategoryCreateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryCreateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryDeleteSignalErrorFull() instead")
    void analysisCategoryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryDeleteSecurityEntrySignalErrorFull() instead")
    void analysisCategoryDeleteSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryDeleteSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSignalErrorFull() instead")
    void analysisCategoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetByPathSignalErrorFull() instead")
    void analysisCategoryGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSecuritySignalErrorFull() instead")
    void analysisCategoryGetSecuritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSecuritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSecurityEntriesSignalErrorFull() instead")
    void analysisCategoryGetSecurityEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSecurityEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryGetSecurityEntryByNameSignalErrorFull() instead")
    void analysisCategoryGetSecurityEntryByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryGetSecurityEntryByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryUpdateSignalErrorFull() instead")
    void analysisCategoryUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analysisCategoryUpdateSecurityEntrySignalErrorFull() instead")
    void analysisCategoryUpdateSecurityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analysisCategoryUpdateSecurityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
