/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rule model module.
 * @module model/Rule
 * @version 0.1.1
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * Rule definition for packing constraints.
     * @alias module:model/Rule
     * @param operation {module:model/Rule.OperationEnum} Rule type for this definition. Valid operation values include <ul>   <li>     <h3>exclude</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all <b>targetItemRefIds</b></p>     <pre>{   \"operation\": \"exclude\",   \"itemRefId\": 0,   \"targetItemRefIds\": [1,2] }</pre>     </li>   <li>     <h3>exclude-all</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all items without its refId</p>     <pre>{   \"operation\": \"exclude-all\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>pack-as-is</h3>     <p>Each individual item with <b>itemRefId</b> is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.</p>     <pre>{   \"operation\": \"pack-as-is\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>irregular</h3>     <p>There are two types of irregular item packings right now, \"nesting\" and \"roll\".</p>     <ul>       <li>         <h4>\"nesting\"</h4>          <p>\"nesting\" is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,         a flower pot may have dimensions of 6\" x 6\" x 6\", but additional flower pots can nest in the first pot, and have         effective dimensions of 1\" x 6\" x 6\". These cases are almost always have a single direction that nesting can occur         in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must         reflect these restrictions.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"nesting\"</td></tr>           <tr><td>additionalDimensionsX</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsY</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsZ</td><td><i>number</i></td></tr>           <tr><td>nestingOrientation</td><td>0, 1, or 2</td><td>axis index of direction of stacking (0 for vertical/X/\"dinner plates\", 1 for shorter-horizontal/Y/\"shopping carts\", 2 for long-horizontal/Z/\"newsstand magazines\")</td></tr>           <tr><td>nestingLimit</td><td><i>integer</i></td><td>total number of nested items allowed in a single \"stack\"</td></tr>         </table>         <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"nesting\",     \"additionalDimensionsX\": 1.0,     \"additionalDimensionsY\": 6.0,     \"additionalDimensionsZ\": 6.0,     \"nestingOrientation\": 0,     \"nestingLimit\": 5   } }</pre>       </li>       <li>         <h4>\"roll\"</h4>          <p>A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total         length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box         of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,         it will be shipped as if it were a 12\" x 12\" x 60\" item. Rolls can have a maximum allowable diameter, and any rolls that must be         split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"roll\"</td></tr>           <tr><td>innerDiameter</td><td><i>number</i></td><td>the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.</td></tr>           <tr><td>spoolWeight</td><td><i>number</i></td><td>the additional weight of each spool or dowel if applicable</td></tr>           <tr><td>maxDiameter</td><td><i>number</i></td><td>the maximum acceptable diameter of a resultant roll.</td></tr>           <tr><td>maxWeight</td><td><i>number</i></td><td>the maximum acceptable weight of a resultant roll.</td></tr>           <tr><td>minRollLength</td><td><i>number</i></td><td>the minimum length above which rolling will occur. E.g., if less than 12\" remain, ship it flat without rolling.</td></tr>         </table>       <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"roll\",     \"innerDiameter\": 1.0,     \"spoolWeight\": 1.0,     \"maxDiameter\": 8.0,     \"maxWeight\": 150,     \"minRollLength\": 12   } }</pre>       </li>     </ul>   </li>   <li>     <h3>lock-orientation</h3>     <p><b>itemRefId</b> is locked from rotation of its original dimensions, with axes of rotation excepted by <b>freeAxes</b></p>     <p><b>\"options\"</b> contents:</p>        <table>          <tr><th>key</th><th>value</th><th>description</th></tr>          <tr><td>freeAxes</td><td>array</td><td>Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.</td></tr>        </table>     <pre>{   \"operation\": \"lock-orientation\",   \"itemRefId\": 0,   \"options\": {     \"freeAxes\": [0,1]   } }</pre>     </li> </ul> 
     */
    constructor(operation) { 
        
        Rule.initialize(this, operation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operation) { 
        obj['operation'] = operation;
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('itemRefId')) {
                obj['itemRefId'] = ApiClient.convertToType(data['itemRefId'], 'Number');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], Object);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], ['String']);
            }
            if (data.hasOwnProperty('targetItemRefIds')) {
                obj['targetItemRefIds'] = ApiClient.convertToType(data['targetItemRefIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parameters'])) {
            throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetItemRefIds'])) {
            throw new Error("Expected the field `targetItemRefIds` to be an array in the JSON data but got " + data['targetItemRefIds']);
        }

        return true;
    }


}

Rule.RequiredProperties = ["operation"];

/**
 * reference ID for the item the rule applies to.
 * @member {Number} itemRefId
 */
Rule.prototype['itemRefId'] = undefined;

/**
 * Rule type for this definition. Valid operation values include <ul>   <li>     <h3>exclude</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all <b>targetItemRefIds</b></p>     <pre>{   \"operation\": \"exclude\",   \"itemRefId\": 0,   \"targetItemRefIds\": [1,2] }</pre>     </li>   <li>     <h3>exclude-all</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all items without its refId</p>     <pre>{   \"operation\": \"exclude-all\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>pack-as-is</h3>     <p>Each individual item with <b>itemRefId</b> is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.</p>     <pre>{   \"operation\": \"pack-as-is\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>irregular</h3>     <p>There are two types of irregular item packings right now, \"nesting\" and \"roll\".</p>     <ul>       <li>         <h4>\"nesting\"</h4>          <p>\"nesting\" is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,         a flower pot may have dimensions of 6\" x 6\" x 6\", but additional flower pots can nest in the first pot, and have         effective dimensions of 1\" x 6\" x 6\". These cases are almost always have a single direction that nesting can occur         in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must         reflect these restrictions.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"nesting\"</td></tr>           <tr><td>additionalDimensionsX</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsY</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsZ</td><td><i>number</i></td></tr>           <tr><td>nestingOrientation</td><td>0, 1, or 2</td><td>axis index of direction of stacking (0 for vertical/X/\"dinner plates\", 1 for shorter-horizontal/Y/\"shopping carts\", 2 for long-horizontal/Z/\"newsstand magazines\")</td></tr>           <tr><td>nestingLimit</td><td><i>integer</i></td><td>total number of nested items allowed in a single \"stack\"</td></tr>         </table>         <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"nesting\",     \"additionalDimensionsX\": 1.0,     \"additionalDimensionsY\": 6.0,     \"additionalDimensionsZ\": 6.0,     \"nestingOrientation\": 0,     \"nestingLimit\": 5   } }</pre>       </li>       <li>         <h4>\"roll\"</h4>          <p>A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total         length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box         of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,         it will be shipped as if it were a 12\" x 12\" x 60\" item. Rolls can have a maximum allowable diameter, and any rolls that must be         split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"roll\"</td></tr>           <tr><td>innerDiameter</td><td><i>number</i></td><td>the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.</td></tr>           <tr><td>spoolWeight</td><td><i>number</i></td><td>the additional weight of each spool or dowel if applicable</td></tr>           <tr><td>maxDiameter</td><td><i>number</i></td><td>the maximum acceptable diameter of a resultant roll.</td></tr>           <tr><td>maxWeight</td><td><i>number</i></td><td>the maximum acceptable weight of a resultant roll.</td></tr>           <tr><td>minRollLength</td><td><i>number</i></td><td>the minimum length above which rolling will occur. E.g., if less than 12\" remain, ship it flat without rolling.</td></tr>         </table>       <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"roll\",     \"innerDiameter\": 1.0,     \"spoolWeight\": 1.0,     \"maxDiameter\": 8.0,     \"maxWeight\": 150,     \"minRollLength\": 12   } }</pre>       </li>     </ul>   </li>   <li>     <h3>lock-orientation</h3>     <p><b>itemRefId</b> is locked from rotation of its original dimensions, with axes of rotation excepted by <b>freeAxes</b></p>     <p><b>\"options\"</b> contents:</p>        <table>          <tr><th>key</th><th>value</th><th>description</th></tr>          <tr><td>freeAxes</td><td>array</td><td>Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.</td></tr>        </table>     <pre>{   \"operation\": \"lock-orientation\",   \"itemRefId\": 0,   \"options\": {     \"freeAxes\": [0,1]   } }</pre>     </li> </ul> 
 * @member {module:model/Rule.OperationEnum} operation
 */
Rule.prototype['operation'] = undefined;

/**
 * additional key-value options to pass for rule based on operation type.
 * @member {Object} options
 */
Rule.prototype['options'] = undefined;

/**
 * array of supplementary parameters to pass for rule, mostly deprecated. may be different from options.
 * @member {Array.<String>} parameters
 */
Rule.prototype['parameters'] = undefined;

/**
 * target item reference IDs that the rule applies to.
 * @member {Array.<Number>} targetItemRefIds
 */
Rule.prototype['targetItemRefIds'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
Rule['OperationEnum'] = {

    /**
     * value: "exclude"
     * @const
     */
    "exclude": "exclude",

    /**
     * value: "exclude-all"
     * @const
     */
    "exclude-all": "exclude-all",

    /**
     * value: "pack-as-is"
     * @const
     */
    "pack-as-is": "pack-as-is",

    /**
     * value: "irregular"
     * @const
     */
    "irregular": "irregular",

    /**
     * value: "lock-orientation"
     * @const
     */
    "lock-orientation": "lock-orientation"
};



export default Rule;

