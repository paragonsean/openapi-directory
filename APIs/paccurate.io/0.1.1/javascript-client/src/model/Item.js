/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemProperties from './ItemProperties';
import Point from './Point';

/**
 * The Item model module.
 * @module model/Item
 * @version 0.1.1
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * a specific, packed item.
     * @alias module:model/Item
     * @implements module:model/ItemProperties
     * @param dimensions {module:model/Point} the length, width, and height of the item.
     * @param weight {Number} weight of this single packed item.
     */
    constructor(dimensions, weight) { 
        ItemProperties.initialize(this, dimensions, weight);
        Item.initialize(this, dimensions, weight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dimensions, weight) { 
        obj['dimensions'] = dimensions;
        obj['weight'] = weight;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();
            ItemProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], Point);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'Number');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Point.validateJSON(data['dimensions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}

Item.RequiredProperties = ["dimensions", "weight"];

/**
 * designated color name for the item in pack visualizations.
 * @member {String} color
 */
Item.prototype['color'] = undefined;

/**
 * the length, width, and height of the item.
 * @member {module:model/Point} dimensions
 */
Item.prototype['dimensions'] = undefined;

/**
 * name or description of item for your reference.
 * @member {String} name
 */
Item.prototype['name'] = undefined;

/**
 * item type reference identifier passed backed from request.
 * @member {Number} refId
 */
Item.prototype['refId'] = undefined;

/**
 * A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be '1120'. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume.
 * @member {String} sequence
 */
Item.prototype['sequence'] = undefined;

/**
 * weight of this single packed item.
 * @member {Number} weight
 */
Item.prototype['weight'] = undefined;

/**
 * the sequence at which the item was packed.
 * @member {Number} index
 */
Item.prototype['index'] = undefined;

/**
 * any relevant information or warnings about the packing of the item.
 * @member {String} message
 */
Item.prototype['message'] = undefined;

/**
 * the [x,y,z] placement point of the back-bottom corner of the item.
 * @member {Object} origin
 */
Item.prototype['origin'] = undefined;


// Implement ItemProperties interface:
/**
 * designated color name for the item in pack visualizations.
 * @member {String} color
 */
ItemProperties.prototype['color'] = undefined;
/**
 * the length, width, and height of the item.
 * @member {module:model/Point} dimensions
 */
ItemProperties.prototype['dimensions'] = undefined;
/**
 * name or description of item for your reference.
 * @member {String} name
 */
ItemProperties.prototype['name'] = undefined;
/**
 * item type reference identifier passed backed from request.
 * @member {Number} refId
 */
ItemProperties.prototype['refId'] = undefined;
/**
 * A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be '1120'. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume.
 * @member {String} sequence
 */
ItemProperties.prototype['sequence'] = undefined;
/**
 * weight of this single packed item.
 * @member {Number} weight
 */
ItemProperties.prototype['weight'] = undefined;




export default Item;

