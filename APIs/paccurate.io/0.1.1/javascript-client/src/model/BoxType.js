/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoxProperties from './BoxProperties';
import Point from './Point';
import RateTable from './RateTable';

/**
 * The BoxType model module.
 * @module model/BoxType
 * @version 0.1.1
 */
class BoxType {
    /**
     * Constructs a new <code>BoxType</code>.
     * box types to be used for packing.
     * @alias module:model/BoxType
     * @implements module:model/BoxProperties
     * @param dimensions {module:model/Point} the [height,length,width] of the box.
     * @param weightMax {Number} maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.
     */
    constructor(dimensions, weightMax) { 
        BoxProperties.initialize(this, dimensions, weightMax);
        BoxType.initialize(this, dimensions, weightMax);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dimensions, weightMax) { 
        obj['dimensions'] = dimensions;
        obj['weightMax'] = weightMax;
    }

    /**
     * Constructs a <code>BoxType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoxType} obj Optional instance to populate.
     * @return {module:model/BoxType} The populated <code>BoxType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoxType();
            BoxProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], Point);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('rateTable')) {
                obj['rateTable'] = ApiClient.convertToType(data['rateTable'], RateTable);
            }
            if (data.hasOwnProperty('weightMax')) {
                obj['weightMax'] = ApiClient.convertToType(data['weightMax'], 'Number');
            }
            if (data.hasOwnProperty('weightTare')) {
                obj['weightTare'] = ApiClient.convertToType(data['weightTare'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoxType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoxType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BoxType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Point.validateJSON(data['dimensions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `rateTable`
        if (data['rateTable']) { // data not null
          RateTable.validateJSON(data['rateTable']);
        }

        return true;
    }


}

BoxType.RequiredProperties = ["dimensions", "weightMax"];

/**
 * the [height,length,width] of the box.
 * @member {module:model/Point} dimensions
 */
BoxType.prototype['dimensions'] = undefined;

/**
 * name for the type of box.
 * @member {String} name
 */
BoxType.prototype['name'] = undefined;

/**
 * Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton.
 * @member {Number} price
 */
BoxType.prototype['price'] = undefined;

/**
 * An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>
 * @member {module:model/RateTable} rateTable
 */
BoxType.prototype['rateTable'] = undefined;

/**
 * maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.
 * @member {Number} weightMax
 */
BoxType.prototype['weightMax'] = undefined;

/**
 * weight of the container when empty or otherwise unladen, i.e., of the box itself.
 * @member {Number} weightTare
 */
BoxType.prototype['weightTare'] = undefined;


// Implement BoxProperties interface:
/**
 * the [height,length,width] of the box.
 * @member {module:model/Point} dimensions
 */
BoxProperties.prototype['dimensions'] = undefined;
/**
 * name for the type of box.
 * @member {String} name
 */
BoxProperties.prototype['name'] = undefined;
/**
 * Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton.
 * @member {Number} price
 */
BoxProperties.prototype['price'] = undefined;
/**
 * An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>
 * @member {module:model/RateTable} rateTable
 */
BoxProperties.prototype['rateTable'] = undefined;
/**
 * maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.
 * @member {Number} weightMax
 */
BoxProperties.prototype['weightMax'] = undefined;
/**
 * weight of the container when empty or otherwise unladen, i.e., of the box itself.
 * @member {Number} weightTare
 */
BoxProperties.prototype['weightTare'] = undefined;




export default BoxType;

