/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Box from './Box';
import Item from './Item';

/**
 * The PackResponse model module.
 * @module model/PackResponse
 * @version 0.1.1
 */
class PackResponse {
    /**
     * Constructs a new <code>PackResponse</code>.
     * @alias module:model/PackResponse
     */
    constructor() { 
        
        PackResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackResponse} obj Optional instance to populate.
     * @return {module:model/PackResponse} The populated <code>PackResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackResponse();

            if (data.hasOwnProperty('boxes')) {
                obj['boxes'] = ApiClient.convertToType(data['boxes'], [Box]);
            }
            if (data.hasOwnProperty('built')) {
                obj['built'] = ApiClient.convertToType(data['built'], 'String');
            }
            if (data.hasOwnProperty('leftovers')) {
                obj['leftovers'] = ApiClient.convertToType(data['leftovers'], [Item]);
            }
            if (data.hasOwnProperty('lenBoxes')) {
                obj['lenBoxes'] = ApiClient.convertToType(data['lenBoxes'], 'Number');
            }
            if (data.hasOwnProperty('lenItems')) {
                obj['lenItems'] = ApiClient.convertToType(data['lenItems'], 'Number');
            }
            if (data.hasOwnProperty('lenLeftovers')) {
                obj['lenLeftovers'] = ApiClient.convertToType(data['lenLeftovers'], 'Number');
            }
            if (data.hasOwnProperty('packTime')) {
                obj['packTime'] = ApiClient.convertToType(data['packTime'], 'Number');
            }
            if (data.hasOwnProperty('renderTime')) {
                obj['renderTime'] = ApiClient.convertToType(data['renderTime'], 'Number');
            }
            if (data.hasOwnProperty('scripts')) {
                obj['scripts'] = ApiClient.convertToType(data['scripts'], 'String');
            }
            if (data.hasOwnProperty('styles')) {
                obj['styles'] = ApiClient.convertToType(data['styles'], 'String');
            }
            if (data.hasOwnProperty('svgs')) {
                obj['svgs'] = ApiClient.convertToType(data['svgs'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('totalCost')) {
                obj['totalCost'] = ApiClient.convertToType(data['totalCost'], 'Number');
            }
            if (data.hasOwnProperty('totalTime')) {
                obj['totalTime'] = ApiClient.convertToType(data['totalTime'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackResponse</code>.
     */
    static validateJSON(data) {
        if (data['boxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['boxes'])) {
                throw new Error("Expected the field `boxes` to be an array in the JSON data but got " + data['boxes']);
            }
            // validate the optional field `boxes` (array)
            for (const item of data['boxes']) {
                Box.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['built'] && !(typeof data['built'] === 'string' || data['built'] instanceof String)) {
            throw new Error("Expected the field `built` to be a primitive type in the JSON string but got " + data['built']);
        }
        if (data['leftovers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['leftovers'])) {
                throw new Error("Expected the field `leftovers` to be an array in the JSON data but got " + data['leftovers']);
            }
            // validate the optional field `leftovers` (array)
            for (const item of data['leftovers']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['scripts'] && !(typeof data['scripts'] === 'string' || data['scripts'] instanceof String)) {
            throw new Error("Expected the field `scripts` to be a primitive type in the JSON string but got " + data['scripts']);
        }
        // ensure the json data is a string
        if (data['styles'] && !(typeof data['styles'] === 'string' || data['styles'] instanceof String)) {
            throw new Error("Expected the field `styles` to be a primitive type in the JSON string but got " + data['styles']);
        }
        // ensure the json data is a string
        if (data['svgs'] && !(typeof data['svgs'] === 'string' || data['svgs'] instanceof String)) {
            throw new Error("Expected the field `svgs` to be a primitive type in the JSON string but got " + data['svgs']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * List of boxes, packed, with their contained items.
 * @member {Array.<module:model/Box>} boxes
 */
PackResponse.prototype['boxes'] = undefined;

/**
 * build timestamp of engine.
 * @member {String} built
 */
PackResponse.prototype['built'] = undefined;

/**
 * items left over that could not be packed into any available boxes.
 * @member {Array.<module:model/Item>} leftovers
 */
PackResponse.prototype['leftovers'] = undefined;

/**
 * cardinality of all packed boxes
 * @member {Number} lenBoxes
 */
PackResponse.prototype['lenBoxes'] = undefined;

/**
 * cardinality of all items
 * @member {Number} lenItems
 */
PackResponse.prototype['lenItems'] = undefined;

/**
 * cardinality of items unabled to be packed
 * @member {Number} lenLeftovers
 */
PackResponse.prototype['lenLeftovers'] = undefined;

/**
 * seconds spent in packing
 * @member {Number} packTime
 */
PackResponse.prototype['packTime'] = undefined;

/**
 * seconds spent in rendering and placement instruction creation of packing solution
 * @member {Number} renderTime
 */
PackResponse.prototype['renderTime'] = undefined;

/**
 * additional javascripts for any image loading.
 * @member {String} scripts
 */
PackResponse.prototype['scripts'] = undefined;

/**
 * additional styles for pack images
 * @member {String} styles
 */
PackResponse.prototype['styles'] = undefined;

/**
 * all box SVG images
 * @member {String} svgs
 */
PackResponse.prototype['svgs'] = undefined;

/**
 * title of packing result, when applicable.
 * @member {String} title
 */
PackResponse.prototype['title'] = undefined;

/**
 * total estimated cost of all packed boxes, when applicable, in cents.
 * @member {Number} totalCost
 */
PackResponse.prototype['totalCost'] = undefined;

/**
 * seconds spent generating response, total.
 * @member {Number} totalTime
 */
PackResponse.prototype['totalTime'] = undefined;

/**
 * version of engine
 * @member {String} version
 */
PackResponse.prototype['version'] = undefined;






export default PackResponse;

