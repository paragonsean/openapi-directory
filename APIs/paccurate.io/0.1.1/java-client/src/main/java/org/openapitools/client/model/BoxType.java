/*
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Point;
import org.openapitools.client.model.RateTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * box types to be used for packing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:44.933917-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxType {
  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Point dimensions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_RATE_TABLE = "rateTable";
  @SerializedName(SERIALIZED_NAME_RATE_TABLE)
  private RateTable rateTable;

  public static final String SERIALIZED_NAME_WEIGHT_MAX = "weightMax";
  @SerializedName(SERIALIZED_NAME_WEIGHT_MAX)
  private BigDecimal weightMax;

  public static final String SERIALIZED_NAME_WEIGHT_TARE = "weightTare";
  @SerializedName(SERIALIZED_NAME_WEIGHT_TARE)
  private BigDecimal weightTare;

  public BoxType() {
  }

  public BoxType dimensions(Point dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * the [height,length,width] of the box.
   * @return dimensions
   */
  @javax.annotation.Nonnull
  public Point getDimensions() {
    return dimensions;
  }

  public void setDimensions(Point dimensions) {
    this.dimensions = dimensions;
  }


  public BoxType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name for the type of box.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BoxType price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a &lt;i&gt;per-carton&lt;/i&gt; basis, such as handling, accessorial surchages, oversize fees, etc. This value is &lt;i&gt;added&lt;/i&gt; to any rate table rates defined for the carton.
   * minimum: 0
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public BoxType rateTable(RateTable rateTable) {
    this.rateTable = rateTable;
    return this;
  }

  /**
   * An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton&#39;s specific rate table. Methods are &lt;ol&gt;&lt;li&gt;Provide carrier, service, and zone.&lt;/li&gt;&lt;li&gt;Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.&lt;/li&gt;&lt;li&gt;Provide the coefficients required for a simple linear weight-dependent pricing model.&lt;/li&gt;&lt;/ol&gt;
   * @return rateTable
   */
  @javax.annotation.Nullable
  public RateTable getRateTable() {
    return rateTable;
  }

  public void setRateTable(RateTable rateTable) {
    this.rateTable = rateTable;
  }


  public BoxType weightMax(BigDecimal weightMax) {
    this.weightMax = weightMax;
    return this;
  }

  /**
   * maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.
   * minimum: 0
   * @return weightMax
   */
  @javax.annotation.Nonnull
  public BigDecimal getWeightMax() {
    return weightMax;
  }

  public void setWeightMax(BigDecimal weightMax) {
    this.weightMax = weightMax;
  }


  public BoxType weightTare(BigDecimal weightTare) {
    this.weightTare = weightTare;
    return this;
  }

  /**
   * weight of the container when empty or otherwise unladen, i.e., of the box itself.
   * minimum: 0
   * @return weightTare
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightTare() {
    return weightTare;
  }

  public void setWeightTare(BigDecimal weightTare) {
    this.weightTare = weightTare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxType boxType = (BoxType) o;
    return Objects.equals(this.dimensions, boxType.dimensions) &&
        Objects.equals(this.name, boxType.name) &&
        Objects.equals(this.price, boxType.price) &&
        Objects.equals(this.rateTable, boxType.rateTable) &&
        Objects.equals(this.weightMax, boxType.weightMax) &&
        Objects.equals(this.weightTare, boxType.weightTare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, name, price, rateTable, weightMax, weightTare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxType {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rateTable: ").append(toIndentedString(rateTable)).append("\n");
    sb.append("    weightMax: ").append(toIndentedString(weightMax)).append("\n");
    sb.append("    weightTare: ").append(toIndentedString(weightTare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensions");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("rateTable");
    openapiFields.add("weightMax");
    openapiFields.add("weightTare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dimensions");
    openapiRequiredFields.add("weightMax");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxType is not found in the empty JSON string", BoxType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BoxType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dimensions`
      Point.validateJsonElement(jsonObj.get("dimensions"));
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rateTable`
      if (jsonObj.get("rateTable") != null && !jsonObj.get("rateTable").isJsonNull()) {
        RateTable.validateJsonElement(jsonObj.get("rateTable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxType.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxType>() {
           @Override
           public void write(JsonWriter out, BoxType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxType
   * @throws IOException if the JSON string is invalid with respect to BoxType
   */
  public static BoxType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxType.class);
  }

  /**
   * Convert an instance of BoxType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

