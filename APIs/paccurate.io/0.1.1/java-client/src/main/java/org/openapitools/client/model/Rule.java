/*
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rule definition for packing constraints.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:44.933917-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rule {
  public static final String SERIALIZED_NAME_ITEM_REF_ID = "itemRefId";
  @SerializedName(SERIALIZED_NAME_ITEM_REF_ID)
  private Integer itemRefId;

  /**
   * Rule type for this definition. Valid operation values include &lt;ul&gt;   &lt;li&gt;     &lt;h3&gt;exclude&lt;/h3&gt;     &lt;p&gt;&lt;b&gt;itemRefId&lt;/b&gt; is excluded from being packed in the same carton with all &lt;b&gt;targetItemRefIds&lt;/b&gt;&lt;/p&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;exclude\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;targetItemRefIds\&quot;: [1,2] }&lt;/pre&gt;     &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;exclude-all&lt;/h3&gt;     &lt;p&gt;&lt;b&gt;itemRefId&lt;/b&gt; is excluded from being packed in the same carton with all items without its refId&lt;/p&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;exclude-all\&quot;,   \&quot;itemRefId\&quot;: 0 }&lt;/pre&gt;     &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;pack-as-is&lt;/h3&gt;     &lt;p&gt;Each individual item with &lt;b&gt;itemRefId&lt;/b&gt; is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.&lt;/p&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;pack-as-is\&quot;,   \&quot;itemRefId\&quot;: 0 }&lt;/pre&gt;     &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;irregular&lt;/h3&gt;     &lt;p&gt;There are two types of irregular item packings right now, \&quot;nesting\&quot; and \&quot;roll\&quot;.&lt;/p&gt;     &lt;ul&gt;       &lt;li&gt;         &lt;h4&gt;\&quot;nesting\&quot;&lt;/h4&gt;          &lt;p&gt;\&quot;nesting\&quot; is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,         a flower pot may have dimensions of 6\&quot; x 6\&quot; x 6\&quot;, but additional flower pots can nest in the first pot, and have         effective dimensions of 1\&quot; x 6\&quot; x 6\&quot;. These cases are almost always have a single direction that nesting can occur         in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must         reflect these restrictions.&lt;p/&gt;         &lt;p&gt;&lt;b&gt;\&quot;options\&quot;&lt;/b&gt; contents:&lt;/p&gt;         &lt;table&gt;           &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;\&quot;nesting\&quot;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;additionalDimensionsX&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;additionalDimensionsY&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;additionalDimensionsZ&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;nestingOrientation&lt;/td&gt;&lt;td&gt;0, 1, or 2&lt;/td&gt;&lt;td&gt;axis index of direction of stacking (0 for vertical/X/\&quot;dinner plates\&quot;, 1 for shorter-horizontal/Y/\&quot;shopping carts\&quot;, 2 for long-horizontal/Z/\&quot;newsstand magazines\&quot;)&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;nestingLimit&lt;/td&gt;&lt;td&gt;&lt;i&gt;integer&lt;/i&gt;&lt;/td&gt;&lt;td&gt;total number of nested items allowed in a single \&quot;stack\&quot;&lt;/td&gt;&lt;/tr&gt;         &lt;/table&gt;         &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;irregular\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;options\&quot;: {     \&quot;type\&quot;: \&quot;nesting\&quot;,     \&quot;additionalDimensionsX\&quot;: 1.0,     \&quot;additionalDimensionsY\&quot;: 6.0,     \&quot;additionalDimensionsZ\&quot;: 6.0,     \&quot;nestingOrientation\&quot;: 0,     \&quot;nestingLimit\&quot;: 5   } }&lt;/pre&gt;       &lt;/li&gt;       &lt;li&gt;         &lt;h4&gt;\&quot;roll\&quot;&lt;/h4&gt;          &lt;p&gt;A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total         length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box         of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,         it will be shipped as if it were a 12\&quot; x 12\&quot; x 60\&quot; item. Rolls can have a maximum allowable diameter, and any rolls that must be         split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.&lt;p/&gt;         &lt;p&gt;&lt;b&gt;\&quot;options\&quot;&lt;/b&gt; contents:&lt;/p&gt;         &lt;table&gt;           &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;\&quot;roll\&quot;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;innerDiameter&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;spoolWeight&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the additional weight of each spool or dowel if applicable&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;maxDiameter&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the maximum acceptable diameter of a resultant roll.&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;maxWeight&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the maximum acceptable weight of a resultant roll.&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;minRollLength&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the minimum length above which rolling will occur. E.g., if less than 12\&quot; remain, ship it flat without rolling.&lt;/td&gt;&lt;/tr&gt;         &lt;/table&gt;       &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;irregular\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;options\&quot;: {     \&quot;type\&quot;: \&quot;roll\&quot;,     \&quot;innerDiameter\&quot;: 1.0,     \&quot;spoolWeight\&quot;: 1.0,     \&quot;maxDiameter\&quot;: 8.0,     \&quot;maxWeight\&quot;: 150,     \&quot;minRollLength\&quot;: 12   } }&lt;/pre&gt;       &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;lock-orientation&lt;/h3&gt;     &lt;p&gt;&lt;b&gt;itemRefId&lt;/b&gt; is locked from rotation of its original dimensions, with axes of rotation excepted by &lt;b&gt;freeAxes&lt;/b&gt;&lt;/p&gt;     &lt;p&gt;&lt;b&gt;\&quot;options\&quot;&lt;/b&gt; contents:&lt;/p&gt;        &lt;table&gt;          &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;freeAxes&lt;/td&gt;&lt;td&gt;array&lt;/td&gt;&lt;td&gt;Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.&lt;/td&gt;&lt;/tr&gt;        &lt;/table&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;lock-orientation\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;options\&quot;: {     \&quot;freeAxes\&quot;: [0,1]   } }&lt;/pre&gt;     &lt;/li&gt; &lt;/ul&gt; 
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    EXCLUDE("exclude"),
    
    EXCLUDE_ALL("exclude-all"),
    
    PACK_AS_IS("pack-as-is"),
    
    IRREGULAR("irregular"),
    
    LOCK_ORIENTATION("lock-orientation");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<String> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_ITEM_REF_IDS = "targetItemRefIds";
  @SerializedName(SERIALIZED_NAME_TARGET_ITEM_REF_IDS)
  private List<Integer> targetItemRefIds = new ArrayList<>();

  public Rule() {
  }

  public Rule itemRefId(Integer itemRefId) {
    this.itemRefId = itemRefId;
    return this;
  }

  /**
   * reference ID for the item the rule applies to.
   * @return itemRefId
   */
  @javax.annotation.Nullable
  public Integer getItemRefId() {
    return itemRefId;
  }

  public void setItemRefId(Integer itemRefId) {
    this.itemRefId = itemRefId;
  }


  public Rule operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Rule type for this definition. Valid operation values include &lt;ul&gt;   &lt;li&gt;     &lt;h3&gt;exclude&lt;/h3&gt;     &lt;p&gt;&lt;b&gt;itemRefId&lt;/b&gt; is excluded from being packed in the same carton with all &lt;b&gt;targetItemRefIds&lt;/b&gt;&lt;/p&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;exclude\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;targetItemRefIds\&quot;: [1,2] }&lt;/pre&gt;     &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;exclude-all&lt;/h3&gt;     &lt;p&gt;&lt;b&gt;itemRefId&lt;/b&gt; is excluded from being packed in the same carton with all items without its refId&lt;/p&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;exclude-all\&quot;,   \&quot;itemRefId\&quot;: 0 }&lt;/pre&gt;     &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;pack-as-is&lt;/h3&gt;     &lt;p&gt;Each individual item with &lt;b&gt;itemRefId&lt;/b&gt; is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.&lt;/p&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;pack-as-is\&quot;,   \&quot;itemRefId\&quot;: 0 }&lt;/pre&gt;     &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;irregular&lt;/h3&gt;     &lt;p&gt;There are two types of irregular item packings right now, \&quot;nesting\&quot; and \&quot;roll\&quot;.&lt;/p&gt;     &lt;ul&gt;       &lt;li&gt;         &lt;h4&gt;\&quot;nesting\&quot;&lt;/h4&gt;          &lt;p&gt;\&quot;nesting\&quot; is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,         a flower pot may have dimensions of 6\&quot; x 6\&quot; x 6\&quot;, but additional flower pots can nest in the first pot, and have         effective dimensions of 1\&quot; x 6\&quot; x 6\&quot;. These cases are almost always have a single direction that nesting can occur         in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must         reflect these restrictions.&lt;p/&gt;         &lt;p&gt;&lt;b&gt;\&quot;options\&quot;&lt;/b&gt; contents:&lt;/p&gt;         &lt;table&gt;           &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;\&quot;nesting\&quot;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;additionalDimensionsX&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;additionalDimensionsY&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;additionalDimensionsZ&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;nestingOrientation&lt;/td&gt;&lt;td&gt;0, 1, or 2&lt;/td&gt;&lt;td&gt;axis index of direction of stacking (0 for vertical/X/\&quot;dinner plates\&quot;, 1 for shorter-horizontal/Y/\&quot;shopping carts\&quot;, 2 for long-horizontal/Z/\&quot;newsstand magazines\&quot;)&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;nestingLimit&lt;/td&gt;&lt;td&gt;&lt;i&gt;integer&lt;/i&gt;&lt;/td&gt;&lt;td&gt;total number of nested items allowed in a single \&quot;stack\&quot;&lt;/td&gt;&lt;/tr&gt;         &lt;/table&gt;         &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;irregular\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;options\&quot;: {     \&quot;type\&quot;: \&quot;nesting\&quot;,     \&quot;additionalDimensionsX\&quot;: 1.0,     \&quot;additionalDimensionsY\&quot;: 6.0,     \&quot;additionalDimensionsZ\&quot;: 6.0,     \&quot;nestingOrientation\&quot;: 0,     \&quot;nestingLimit\&quot;: 5   } }&lt;/pre&gt;       &lt;/li&gt;       &lt;li&gt;         &lt;h4&gt;\&quot;roll\&quot;&lt;/h4&gt;          &lt;p&gt;A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total         length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box         of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,         it will be shipped as if it were a 12\&quot; x 12\&quot; x 60\&quot; item. Rolls can have a maximum allowable diameter, and any rolls that must be         split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.&lt;p/&gt;         &lt;p&gt;&lt;b&gt;\&quot;options\&quot;&lt;/b&gt; contents:&lt;/p&gt;         &lt;table&gt;           &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;\&quot;roll\&quot;&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;innerDiameter&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;spoolWeight&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the additional weight of each spool or dowel if applicable&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;maxDiameter&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the maximum acceptable diameter of a resultant roll.&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;maxWeight&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the maximum acceptable weight of a resultant roll.&lt;/td&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;td&gt;minRollLength&lt;/td&gt;&lt;td&gt;&lt;i&gt;number&lt;/i&gt;&lt;/td&gt;&lt;td&gt;the minimum length above which rolling will occur. E.g., if less than 12\&quot; remain, ship it flat without rolling.&lt;/td&gt;&lt;/tr&gt;         &lt;/table&gt;       &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;irregular\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;options\&quot;: {     \&quot;type\&quot;: \&quot;roll\&quot;,     \&quot;innerDiameter\&quot;: 1.0,     \&quot;spoolWeight\&quot;: 1.0,     \&quot;maxDiameter\&quot;: 8.0,     \&quot;maxWeight\&quot;: 150,     \&quot;minRollLength\&quot;: 12   } }&lt;/pre&gt;       &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;   &lt;li&gt;     &lt;h3&gt;lock-orientation&lt;/h3&gt;     &lt;p&gt;&lt;b&gt;itemRefId&lt;/b&gt; is locked from rotation of its original dimensions, with axes of rotation excepted by &lt;b&gt;freeAxes&lt;/b&gt;&lt;/p&gt;     &lt;p&gt;&lt;b&gt;\&quot;options\&quot;&lt;/b&gt; contents:&lt;/p&gt;        &lt;table&gt;          &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;          &lt;tr&gt;&lt;td&gt;freeAxes&lt;/td&gt;&lt;td&gt;array&lt;/td&gt;&lt;td&gt;Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.&lt;/td&gt;&lt;/tr&gt;        &lt;/table&gt;     &lt;pre&gt;{   \&quot;operation\&quot;: \&quot;lock-orientation\&quot;,   \&quot;itemRefId\&quot;: 0,   \&quot;options\&quot;: {     \&quot;freeAxes\&quot;: [0,1]   } }&lt;/pre&gt;     &lt;/li&gt; &lt;/ul&gt; 
   * @return operation
   */
  @javax.annotation.Nonnull
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  public Rule options(Object options) {
    this.options = options;
    return this;
  }

  /**
   * additional key-value options to pass for rule based on operation type.
   * @return options
   */
  @javax.annotation.Nullable
  public Object getOptions() {
    return options;
  }

  public void setOptions(Object options) {
    this.options = options;
  }


  public Rule parameters(List<String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public Rule addParametersItem(String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * array of supplementary parameters to pass for rule, mostly deprecated. may be different from options.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<String> getParameters() {
    return parameters;
  }

  public void setParameters(List<String> parameters) {
    this.parameters = parameters;
  }


  public Rule targetItemRefIds(List<Integer> targetItemRefIds) {
    this.targetItemRefIds = targetItemRefIds;
    return this;
  }

  public Rule addTargetItemRefIdsItem(Integer targetItemRefIdsItem) {
    if (this.targetItemRefIds == null) {
      this.targetItemRefIds = new ArrayList<>();
    }
    this.targetItemRefIds.add(targetItemRefIdsItem);
    return this;
  }

  /**
   * target item reference IDs that the rule applies to.
   * @return targetItemRefIds
   */
  @javax.annotation.Nullable
  public List<Integer> getTargetItemRefIds() {
    return targetItemRefIds;
  }

  public void setTargetItemRefIds(List<Integer> targetItemRefIds) {
    this.targetItemRefIds = targetItemRefIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rule rule = (Rule) o;
    return Objects.equals(this.itemRefId, rule.itemRefId) &&
        Objects.equals(this.operation, rule.operation) &&
        Objects.equals(this.options, rule.options) &&
        Objects.equals(this.parameters, rule.parameters) &&
        Objects.equals(this.targetItemRefIds, rule.targetItemRefIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemRefId, operation, options, parameters, targetItemRefIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rule {\n");
    sb.append("    itemRefId: ").append(toIndentedString(itemRefId)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    targetItemRefIds: ").append(toIndentedString(targetItemRefIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemRefId");
    openapiFields.add("operation");
    openapiFields.add("options");
    openapiFields.add("parameters");
    openapiFields.add("targetItemRefIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rule is not found in the empty JSON string", Rule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Rule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      // validate the required field `operation`
      OperationEnum.validateJsonElement(jsonObj.get("operation"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull() && !jsonObj.get("parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetItemRefIds") != null && !jsonObj.get("targetItemRefIds").isJsonNull() && !jsonObj.get("targetItemRefIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetItemRefIds` to be an array in the JSON string but got `%s`", jsonObj.get("targetItemRefIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rule.class));

       return (TypeAdapter<T>) new TypeAdapter<Rule>() {
           @Override
           public void write(JsonWriter out, Rule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rule
   * @throws IOException if the JSON string is invalid with respect to Rule
   */
  public static Rule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rule.class);
  }

  /**
   * Convert an instance of Rule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

