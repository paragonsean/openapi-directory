/*
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.Point;
import org.openapitools.client.model.RateTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A completed, packed box.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:44.933917-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Box {
  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Point dimensions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_RATE_TABLE = "rateTable";
  @SerializedName(SERIALIZED_NAME_RATE_TABLE)
  private RateTable rateTable;

  public static final String SERIALIZED_NAME_WEIGHT_MAX = "weightMax";
  @SerializedName(SERIALIZED_NAME_WEIGHT_MAX)
  private BigDecimal weightMax;

  public static final String SERIALIZED_NAME_WEIGHT_TARE = "weightTare";
  @SerializedName(SERIALIZED_NAME_WEIGHT_TARE)
  private BigDecimal weightTare;

  public static final String SERIALIZED_NAME_DIMENSIONAL_WEIGHT = "dimensionalWeight";
  @SerializedName(SERIALIZED_NAME_DIMENSIONAL_WEIGHT)
  private BigDecimal dimensionalWeight;

  public static final String SERIALIZED_NAME_DIMENSIONAL_WEIGHT_USED = "dimensionalWeightUsed";
  @SerializedName(SERIALIZED_NAME_DIMENSIONAL_WEIGHT_USED)
  private Boolean dimensionalWeightUsed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_SVG = "svg";
  @SerializedName(SERIALIZED_NAME_SVG)
  private String svg;

  public static final String SERIALIZED_NAME_VOLUME_MAX = "volumeMax";
  @SerializedName(SERIALIZED_NAME_VOLUME_MAX)
  private BigDecimal volumeMax;

  public static final String SERIALIZED_NAME_VOLUME_REMAINING = "volumeRemaining";
  @SerializedName(SERIALIZED_NAME_VOLUME_REMAINING)
  private BigDecimal volumeRemaining;

  public static final String SERIALIZED_NAME_VOLUME_USED = "volumeUsed";
  @SerializedName(SERIALIZED_NAME_VOLUME_USED)
  private BigDecimal volumeUsed;

  public static final String SERIALIZED_NAME_VOLUME_UTILIZATION = "volumeUtilization";
  @SerializedName(SERIALIZED_NAME_VOLUME_UTILIZATION)
  private BigDecimal volumeUtilization;

  public static final String SERIALIZED_NAME_WEIGHT_NET = "weightNet";
  @SerializedName(SERIALIZED_NAME_WEIGHT_NET)
  private BigDecimal weightNet;

  public static final String SERIALIZED_NAME_WEIGHT_REMAINING = "weightRemaining";
  @SerializedName(SERIALIZED_NAME_WEIGHT_REMAINING)
  private BigDecimal weightRemaining;

  public static final String SERIALIZED_NAME_WEIGHT_USED = "weightUsed";
  @SerializedName(SERIALIZED_NAME_WEIGHT_USED)
  private BigDecimal weightUsed;

  public static final String SERIALIZED_NAME_WEIGHT_UTILIZATION = "weightUtilization";
  @SerializedName(SERIALIZED_NAME_WEIGHT_UTILIZATION)
  private BigDecimal weightUtilization;

  public Box() {
  }

  public Box dimensions(Point dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * the [height,length,width] of the box.
   * @return dimensions
   */
  @javax.annotation.Nonnull
  public Point getDimensions() {
    return dimensions;
  }

  public void setDimensions(Point dimensions) {
    this.dimensions = dimensions;
  }


  public Box name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name for the type of box.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Box price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a &lt;i&gt;per-carton&lt;/i&gt; basis, such as handling, accessorial surchages, oversize fees, etc. This value is &lt;i&gt;added&lt;/i&gt; to any rate table rates defined for the carton.
   * minimum: 0
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public Box rateTable(RateTable rateTable) {
    this.rateTable = rateTable;
    return this;
  }

  /**
   * An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton&#39;s specific rate table. Methods are &lt;ol&gt;&lt;li&gt;Provide carrier, service, and zone.&lt;/li&gt;&lt;li&gt;Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.&lt;/li&gt;&lt;li&gt;Provide the coefficients required for a simple linear weight-dependent pricing model.&lt;/li&gt;&lt;/ol&gt;
   * @return rateTable
   */
  @javax.annotation.Nullable
  public RateTable getRateTable() {
    return rateTable;
  }

  public void setRateTable(RateTable rateTable) {
    this.rateTable = rateTable;
  }


  public Box weightMax(BigDecimal weightMax) {
    this.weightMax = weightMax;
    return this;
  }

  /**
   * maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.
   * minimum: 0
   * @return weightMax
   */
  @javax.annotation.Nonnull
  public BigDecimal getWeightMax() {
    return weightMax;
  }

  public void setWeightMax(BigDecimal weightMax) {
    this.weightMax = weightMax;
  }


  public Box weightTare(BigDecimal weightTare) {
    this.weightTare = weightTare;
    return this;
  }

  /**
   * weight of the container when empty or otherwise unladen, i.e., of the box itself.
   * minimum: 0
   * @return weightTare
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightTare() {
    return weightTare;
  }

  public void setWeightTare(BigDecimal weightTare) {
    this.weightTare = weightTare;
  }


  public Box dimensionalWeight(BigDecimal dimensionalWeight) {
    this.dimensionalWeight = dimensionalWeight;
    return this;
  }

  /**
   * the calculated dimensional weight of this box, if applicable.
   * @return dimensionalWeight
   */
  @javax.annotation.Nullable
  public BigDecimal getDimensionalWeight() {
    return dimensionalWeight;
  }

  public void setDimensionalWeight(BigDecimal dimensionalWeight) {
    this.dimensionalWeight = dimensionalWeight;
  }


  public Box dimensionalWeightUsed(Boolean dimensionalWeightUsed) {
    this.dimensionalWeightUsed = dimensionalWeightUsed;
    return this;
  }

  /**
   * whether or not dimensional weight was used for this box.
   * @return dimensionalWeightUsed
   */
  @javax.annotation.Nullable
  public Boolean getDimensionalWeightUsed() {
    return dimensionalWeightUsed;
  }

  public void setDimensionalWeightUsed(Boolean dimensionalWeightUsed) {
    this.dimensionalWeightUsed = dimensionalWeightUsed;
  }


  public Box id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Box items(List<Item> items) {
    this.items = items;
    return this;
  }

  public Box addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }


  public Box svg(String svg) {
    this.svg = svg;
    return this;
  }

  /**
   * raw svg of visualization.
   * @return svg
   */
  @javax.annotation.Nullable
  public String getSvg() {
    return svg;
  }

  public void setSvg(String svg) {
    this.svg = svg;
  }


  public Box volumeMax(BigDecimal volumeMax) {
    this.volumeMax = volumeMax;
    return this;
  }

  /**
   * total volume of the box.
   * minimum: 0
   * @return volumeMax
   */
  @javax.annotation.Nullable
  public BigDecimal getVolumeMax() {
    return volumeMax;
  }

  public void setVolumeMax(BigDecimal volumeMax) {
    this.volumeMax = volumeMax;
  }


  public Box volumeRemaining(BigDecimal volumeRemaining) {
    this.volumeRemaining = volumeRemaining;
    return this;
  }

  /**
   * remaining volume of the box.
   * minimum: 0
   * @return volumeRemaining
   */
  @javax.annotation.Nullable
  public BigDecimal getVolumeRemaining() {
    return volumeRemaining;
  }

  public void setVolumeRemaining(BigDecimal volumeRemaining) {
    this.volumeRemaining = volumeRemaining;
  }


  public Box volumeUsed(BigDecimal volumeUsed) {
    this.volumeUsed = volumeUsed;
    return this;
  }

  /**
   * utilized volume of the box.
   * minimum: 0
   * @return volumeUsed
   */
  @javax.annotation.Nullable
  public BigDecimal getVolumeUsed() {
    return volumeUsed;
  }

  public void setVolumeUsed(BigDecimal volumeUsed) {
    this.volumeUsed = volumeUsed;
  }


  public Box volumeUtilization(BigDecimal volumeUtilization) {
    this.volumeUtilization = volumeUtilization;
    return this;
  }

  /**
   * percentage of volume utilized by packed items.
   * minimum: 0
   * maximum: 1
   * @return volumeUtilization
   */
  @javax.annotation.Nullable
  public BigDecimal getVolumeUtilization() {
    return volumeUtilization;
  }

  public void setVolumeUtilization(BigDecimal volumeUtilization) {
    this.volumeUtilization = volumeUtilization;
  }


  public Box weightNet(BigDecimal weightNet) {
    this.weightNet = weightNet;
    return this;
  }

  /**
   * total weight of box&#39;s contents, not including the box&#39;s empty (tare) weight.
   * minimum: 0
   * @return weightNet
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightNet() {
    return weightNet;
  }

  public void setWeightNet(BigDecimal weightNet) {
    this.weightNet = weightNet;
  }


  public Box weightRemaining(BigDecimal weightRemaining) {
    this.weightRemaining = weightRemaining;
    return this;
  }

  /**
   * remaining weight of the box.
   * minimum: 0
   * @return weightRemaining
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightRemaining() {
    return weightRemaining;
  }

  public void setWeightRemaining(BigDecimal weightRemaining) {
    this.weightRemaining = weightRemaining;
  }


  public Box weightUsed(BigDecimal weightUsed) {
    this.weightUsed = weightUsed;
    return this;
  }

  /**
   * utilized weight of the box.
   * minimum: 0
   * @return weightUsed
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightUsed() {
    return weightUsed;
  }

  public void setWeightUsed(BigDecimal weightUsed) {
    this.weightUsed = weightUsed;
  }


  public Box weightUtilization(BigDecimal weightUtilization) {
    this.weightUtilization = weightUtilization;
    return this;
  }

  /**
   * percentage of weight utilized by packed items.
   * minimum: 0
   * maximum: 1
   * @return weightUtilization
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightUtilization() {
    return weightUtilization;
  }

  public void setWeightUtilization(BigDecimal weightUtilization) {
    this.weightUtilization = weightUtilization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Box box = (Box) o;
    return Objects.equals(this.dimensions, box.dimensions) &&
        Objects.equals(this.name, box.name) &&
        Objects.equals(this.price, box.price) &&
        Objects.equals(this.rateTable, box.rateTable) &&
        Objects.equals(this.weightMax, box.weightMax) &&
        Objects.equals(this.weightTare, box.weightTare) &&
        Objects.equals(this.dimensionalWeight, box.dimensionalWeight) &&
        Objects.equals(this.dimensionalWeightUsed, box.dimensionalWeightUsed) &&
        Objects.equals(this.id, box.id) &&
        Objects.equals(this.items, box.items) &&
        Objects.equals(this.svg, box.svg) &&
        Objects.equals(this.volumeMax, box.volumeMax) &&
        Objects.equals(this.volumeRemaining, box.volumeRemaining) &&
        Objects.equals(this.volumeUsed, box.volumeUsed) &&
        Objects.equals(this.volumeUtilization, box.volumeUtilization) &&
        Objects.equals(this.weightNet, box.weightNet) &&
        Objects.equals(this.weightRemaining, box.weightRemaining) &&
        Objects.equals(this.weightUsed, box.weightUsed) &&
        Objects.equals(this.weightUtilization, box.weightUtilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, name, price, rateTable, weightMax, weightTare, dimensionalWeight, dimensionalWeightUsed, id, items, svg, volumeMax, volumeRemaining, volumeUsed, volumeUtilization, weightNet, weightRemaining, weightUsed, weightUtilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Box {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rateTable: ").append(toIndentedString(rateTable)).append("\n");
    sb.append("    weightMax: ").append(toIndentedString(weightMax)).append("\n");
    sb.append("    weightTare: ").append(toIndentedString(weightTare)).append("\n");
    sb.append("    dimensionalWeight: ").append(toIndentedString(dimensionalWeight)).append("\n");
    sb.append("    dimensionalWeightUsed: ").append(toIndentedString(dimensionalWeightUsed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    svg: ").append(toIndentedString(svg)).append("\n");
    sb.append("    volumeMax: ").append(toIndentedString(volumeMax)).append("\n");
    sb.append("    volumeRemaining: ").append(toIndentedString(volumeRemaining)).append("\n");
    sb.append("    volumeUsed: ").append(toIndentedString(volumeUsed)).append("\n");
    sb.append("    volumeUtilization: ").append(toIndentedString(volumeUtilization)).append("\n");
    sb.append("    weightNet: ").append(toIndentedString(weightNet)).append("\n");
    sb.append("    weightRemaining: ").append(toIndentedString(weightRemaining)).append("\n");
    sb.append("    weightUsed: ").append(toIndentedString(weightUsed)).append("\n");
    sb.append("    weightUtilization: ").append(toIndentedString(weightUtilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensions");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("rateTable");
    openapiFields.add("weightMax");
    openapiFields.add("weightTare");
    openapiFields.add("dimensionalWeight");
    openapiFields.add("dimensionalWeightUsed");
    openapiFields.add("id");
    openapiFields.add("items");
    openapiFields.add("svg");
    openapiFields.add("volumeMax");
    openapiFields.add("volumeRemaining");
    openapiFields.add("volumeUsed");
    openapiFields.add("volumeUtilization");
    openapiFields.add("weightNet");
    openapiFields.add("weightRemaining");
    openapiFields.add("weightUsed");
    openapiFields.add("weightUtilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dimensions");
    openapiRequiredFields.add("weightMax");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Box
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Box.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Box is not found in the empty JSON string", Box.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Box.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Box` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Box.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dimensions`
      Point.validateJsonElement(jsonObj.get("dimensions"));
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rateTable`
      if (jsonObj.get("rateTable") != null && !jsonObj.get("rateTable").isJsonNull()) {
        RateTable.validateJsonElement(jsonObj.get("rateTable"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("svg") != null && !jsonObj.get("svg").isJsonNull()) && !jsonObj.get("svg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Box.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Box' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Box> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Box.class));

       return (TypeAdapter<T>) new TypeAdapter<Box>() {
           @Override
           public void write(JsonWriter out, Box value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Box read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Box given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Box
   * @throws IOException if the JSON string is invalid with respect to Box
   */
  public static Box fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Box.class);
  }

  /**
   * Convert an instance of Box to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

