/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPack.h
 *
 * 
 */

#ifndef OAIPack_H
#define OAIPack_H

#include <QJsonObject>

#include "OAIBoxType.h"
#include "OAIBoxTypeSet.h"
#include "OAIItemSet.h"
#include "OAIPoint.h"
#include "OAIRule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBoxType;
class OAIPoint;
class OAIItemSet;
class OAIRule;

class OAIPack : public OAIObject {
public:
    OAIPack();
    OAIPack(QString json);
    ~OAIPack() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAllowableOverhang() const;
    void setAllowableOverhang(const double &allowable_overhang);
    bool is_allowable_overhang_Set() const;
    bool is_allowable_overhang_Valid() const;

    QList<OAIBoxTypeSet> getBoxTypeSets() const;
    void setBoxTypeSets(const QList<OAIBoxTypeSet> &box_type_sets);
    bool is_box_type_sets_Set() const;
    bool is_box_type_sets_Valid() const;

    QList<OAIBoxType> getBoxTypes() const;
    void setBoxTypes(const QList<OAIBoxType> &box_types);
    bool is_box_types_Set() const;
    bool is_box_types_Valid() const;

    qint32 getCohortMax() const;
    void setCohortMax(const qint32 &cohort_max);
    bool is_cohort_max_Set() const;
    bool is_cohort_max_Valid() const;

    bool isCohortPacking() const;
    void setCohortPacking(const bool &cohort_packing);
    bool is_cohort_packing_Set() const;
    bool is_cohort_packing_Valid() const;

    QList<qint32> getCoordOrder() const;
    void setCoordOrder(const QList<qint32> &coord_order);
    bool is_coord_order_Set() const;
    bool is_coord_order_Valid() const;

    bool isCorners() const;
    void setCorners(const bool &corners);
    bool is_corners_Set() const;
    bool is_corners_Valid() const;

    OAIPoint getEye() const;
    void setEye(const OAIPoint &eye);
    bool is_eye_Set() const;
    bool is_eye_Valid() const;

    qint32 getImgSize() const;
    void setImgSize(const qint32 &img_size);
    bool is_img_size_Set() const;
    bool is_img_size_Valid() const;

    bool isIncludeImages() const;
    void setIncludeImages(const bool &include_images);
    bool is_include_images_Set() const;
    bool is_include_images_Valid() const;

    bool isIncludeScripts() const;
    void setIncludeScripts(const bool &include_scripts);
    bool is_include_scripts_Set() const;
    bool is_include_scripts_Valid() const;

    bool isInterlock() const;
    void setInterlock(const bool &interlock);
    bool is_interlock_Set() const;
    bool is_interlock_Valid() const;

    QList<OAIItemSet> getItemSets() const;
    void setItemSets(const QList<OAIItemSet> &item_sets);
    bool is_item_sets_Set() const;
    bool is_item_sets_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    bool isLayFlat() const;
    void setLayFlat(const bool &lay_flat);
    bool is_lay_flat_Set() const;
    bool is_lay_flat_Valid() const;

    qint32 getMaxSequenceDistance() const;
    void setMaxSequenceDistance(const qint32 &max_sequence_distance);
    bool is_max_sequence_distance_Set() const;
    bool is_max_sequence_distance_Valid() const;

    qint32 getN() const;
    void setN(const qint32 &n);
    bool is_n_Set() const;
    bool is_n_Valid() const;

    OAIPoint getPackOrigin() const;
    void setPackOrigin(const OAIPoint &pack_origin);
    bool is_pack_origin_Set() const;
    bool is_pack_origin_Valid() const;

    QString getPlacementStyle() const;
    void setPlacementStyle(const QString &placement_style);
    bool is_placement_style_Set() const;
    bool is_placement_style_Valid() const;

    bool isRandom() const;
    void setRandom(const bool &random);
    bool is_random_Set() const;
    bool is_random_Valid() const;

    qint32 getRandomMaxDimension() const;
    void setRandomMaxDimension(const qint32 &random_max_dimension);
    bool is_random_max_dimension_Set() const;
    bool is_random_max_dimension_Valid() const;

    qint32 getRandomMaxWeight() const;
    void setRandomMaxWeight(const qint32 &random_max_weight);
    bool is_random_max_weight_Set() const;
    bool is_random_max_weight_Valid() const;

    QList<OAIRule> getRules() const;
    void setRules(const QList<OAIRule> &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    bool isSeed() const;
    void setSeed(const bool &seed);
    bool is_seed_Set() const;
    bool is_seed_Valid() const;

    bool isSequenceHeatMap() const;
    void setSequenceHeatMap(const bool &sequence_heat_map);
    bool is_sequence_heat_map_Set() const;
    bool is_sequence_heat_map_Valid() const;

    bool isSequenceSort() const;
    void setSequenceSort(const bool &sequence_sort);
    bool is_sequence_sort_Set() const;
    bool is_sequence_sort_Valid() const;

    QString getRTemplate() const;
    void setRTemplate(const QString &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    double getUsableSpace() const;
    void setUsableSpace(const double &usable_space);
    bool is_usable_space_Set() const;
    bool is_usable_space_Valid() const;

    qint32 getZone() const;
    void setZone(const qint32 &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_allowable_overhang;
    bool m_allowable_overhang_isSet;
    bool m_allowable_overhang_isValid;

    QList<OAIBoxTypeSet> m_box_type_sets;
    bool m_box_type_sets_isSet;
    bool m_box_type_sets_isValid;

    QList<OAIBoxType> m_box_types;
    bool m_box_types_isSet;
    bool m_box_types_isValid;

    qint32 m_cohort_max;
    bool m_cohort_max_isSet;
    bool m_cohort_max_isValid;

    bool m_cohort_packing;
    bool m_cohort_packing_isSet;
    bool m_cohort_packing_isValid;

    QList<qint32> m_coord_order;
    bool m_coord_order_isSet;
    bool m_coord_order_isValid;

    bool m_corners;
    bool m_corners_isSet;
    bool m_corners_isValid;

    OAIPoint m_eye;
    bool m_eye_isSet;
    bool m_eye_isValid;

    qint32 m_img_size;
    bool m_img_size_isSet;
    bool m_img_size_isValid;

    bool m_include_images;
    bool m_include_images_isSet;
    bool m_include_images_isValid;

    bool m_include_scripts;
    bool m_include_scripts_isSet;
    bool m_include_scripts_isValid;

    bool m_interlock;
    bool m_interlock_isSet;
    bool m_interlock_isValid;

    QList<OAIItemSet> m_item_sets;
    bool m_item_sets_isSet;
    bool m_item_sets_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    bool m_lay_flat;
    bool m_lay_flat_isSet;
    bool m_lay_flat_isValid;

    qint32 m_max_sequence_distance;
    bool m_max_sequence_distance_isSet;
    bool m_max_sequence_distance_isValid;

    qint32 m_n;
    bool m_n_isSet;
    bool m_n_isValid;

    OAIPoint m_pack_origin;
    bool m_pack_origin_isSet;
    bool m_pack_origin_isValid;

    QString m_placement_style;
    bool m_placement_style_isSet;
    bool m_placement_style_isValid;

    bool m_random;
    bool m_random_isSet;
    bool m_random_isValid;

    qint32 m_random_max_dimension;
    bool m_random_max_dimension_isSet;
    bool m_random_max_dimension_isValid;

    qint32 m_random_max_weight;
    bool m_random_max_weight_isSet;
    bool m_random_max_weight_isValid;

    QList<OAIRule> m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    bool m_seed;
    bool m_seed_isSet;
    bool m_seed_isValid;

    bool m_sequence_heat_map;
    bool m_sequence_heat_map_isSet;
    bool m_sequence_heat_map_isValid;

    bool m_sequence_sort;
    bool m_sequence_sort_isSet;
    bool m_sequence_sort_isValid;

    QString m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    double m_usable_space;
    bool m_usable_space_isSet;
    bool m_usable_space_isValid;

    qint32 m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPack)

#endif // OAIPack_H
