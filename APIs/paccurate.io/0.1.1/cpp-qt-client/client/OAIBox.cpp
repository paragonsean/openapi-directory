/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBox::OAIBox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBox::OAIBox() {
    this->initializeModel();
}

OAIBox::~OAIBox() {}

void OAIBox::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_rate_table_isSet = false;
    m_rate_table_isValid = false;

    m_weight_max_isSet = false;
    m_weight_max_isValid = false;

    m_weight_tare_isSet = false;
    m_weight_tare_isValid = false;

    m_dimensional_weight_isSet = false;
    m_dimensional_weight_isValid = false;

    m_dimensional_weight_used_isSet = false;
    m_dimensional_weight_used_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_svg_isSet = false;
    m_svg_isValid = false;

    m_volume_max_isSet = false;
    m_volume_max_isValid = false;

    m_volume_remaining_isSet = false;
    m_volume_remaining_isValid = false;

    m_volume_used_isSet = false;
    m_volume_used_isValid = false;

    m_volume_utilization_isSet = false;
    m_volume_utilization_isValid = false;

    m_weight_net_isSet = false;
    m_weight_net_isValid = false;

    m_weight_remaining_isSet = false;
    m_weight_remaining_isValid = false;

    m_weight_used_isSet = false;
    m_weight_used_isValid = false;

    m_weight_utilization_isSet = false;
    m_weight_utilization_isValid = false;
}

void OAIBox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBox::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_rate_table_isValid = ::OpenAPI::fromJsonValue(m_rate_table, json[QString("rateTable")]);
    m_rate_table_isSet = !json[QString("rateTable")].isNull() && m_rate_table_isValid;

    m_weight_max_isValid = ::OpenAPI::fromJsonValue(m_weight_max, json[QString("weightMax")]);
    m_weight_max_isSet = !json[QString("weightMax")].isNull() && m_weight_max_isValid;

    m_weight_tare_isValid = ::OpenAPI::fromJsonValue(m_weight_tare, json[QString("weightTare")]);
    m_weight_tare_isSet = !json[QString("weightTare")].isNull() && m_weight_tare_isValid;

    m_dimensional_weight_isValid = ::OpenAPI::fromJsonValue(m_dimensional_weight, json[QString("dimensionalWeight")]);
    m_dimensional_weight_isSet = !json[QString("dimensionalWeight")].isNull() && m_dimensional_weight_isValid;

    m_dimensional_weight_used_isValid = ::OpenAPI::fromJsonValue(m_dimensional_weight_used, json[QString("dimensionalWeightUsed")]);
    m_dimensional_weight_used_isSet = !json[QString("dimensionalWeightUsed")].isNull() && m_dimensional_weight_used_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_svg_isValid = ::OpenAPI::fromJsonValue(m_svg, json[QString("svg")]);
    m_svg_isSet = !json[QString("svg")].isNull() && m_svg_isValid;

    m_volume_max_isValid = ::OpenAPI::fromJsonValue(m_volume_max, json[QString("volumeMax")]);
    m_volume_max_isSet = !json[QString("volumeMax")].isNull() && m_volume_max_isValid;

    m_volume_remaining_isValid = ::OpenAPI::fromJsonValue(m_volume_remaining, json[QString("volumeRemaining")]);
    m_volume_remaining_isSet = !json[QString("volumeRemaining")].isNull() && m_volume_remaining_isValid;

    m_volume_used_isValid = ::OpenAPI::fromJsonValue(m_volume_used, json[QString("volumeUsed")]);
    m_volume_used_isSet = !json[QString("volumeUsed")].isNull() && m_volume_used_isValid;

    m_volume_utilization_isValid = ::OpenAPI::fromJsonValue(m_volume_utilization, json[QString("volumeUtilization")]);
    m_volume_utilization_isSet = !json[QString("volumeUtilization")].isNull() && m_volume_utilization_isValid;

    m_weight_net_isValid = ::OpenAPI::fromJsonValue(m_weight_net, json[QString("weightNet")]);
    m_weight_net_isSet = !json[QString("weightNet")].isNull() && m_weight_net_isValid;

    m_weight_remaining_isValid = ::OpenAPI::fromJsonValue(m_weight_remaining, json[QString("weightRemaining")]);
    m_weight_remaining_isSet = !json[QString("weightRemaining")].isNull() && m_weight_remaining_isValid;

    m_weight_used_isValid = ::OpenAPI::fromJsonValue(m_weight_used, json[QString("weightUsed")]);
    m_weight_used_isSet = !json[QString("weightUsed")].isNull() && m_weight_used_isValid;

    m_weight_utilization_isValid = ::OpenAPI::fromJsonValue(m_weight_utilization, json[QString("weightUtilization")]);
    m_weight_utilization_isSet = !json[QString("weightUtilization")].isNull() && m_weight_utilization_isValid;
}

QString OAIBox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBox::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_rate_table.isSet()) {
        obj.insert(QString("rateTable"), ::OpenAPI::toJsonValue(m_rate_table));
    }
    if (m_weight_max_isSet) {
        obj.insert(QString("weightMax"), ::OpenAPI::toJsonValue(m_weight_max));
    }
    if (m_weight_tare_isSet) {
        obj.insert(QString("weightTare"), ::OpenAPI::toJsonValue(m_weight_tare));
    }
    if (m_dimensional_weight_isSet) {
        obj.insert(QString("dimensionalWeight"), ::OpenAPI::toJsonValue(m_dimensional_weight));
    }
    if (m_dimensional_weight_used_isSet) {
        obj.insert(QString("dimensionalWeightUsed"), ::OpenAPI::toJsonValue(m_dimensional_weight_used));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_svg_isSet) {
        obj.insert(QString("svg"), ::OpenAPI::toJsonValue(m_svg));
    }
    if (m_volume_max_isSet) {
        obj.insert(QString("volumeMax"), ::OpenAPI::toJsonValue(m_volume_max));
    }
    if (m_volume_remaining_isSet) {
        obj.insert(QString("volumeRemaining"), ::OpenAPI::toJsonValue(m_volume_remaining));
    }
    if (m_volume_used_isSet) {
        obj.insert(QString("volumeUsed"), ::OpenAPI::toJsonValue(m_volume_used));
    }
    if (m_volume_utilization_isSet) {
        obj.insert(QString("volumeUtilization"), ::OpenAPI::toJsonValue(m_volume_utilization));
    }
    if (m_weight_net_isSet) {
        obj.insert(QString("weightNet"), ::OpenAPI::toJsonValue(m_weight_net));
    }
    if (m_weight_remaining_isSet) {
        obj.insert(QString("weightRemaining"), ::OpenAPI::toJsonValue(m_weight_remaining));
    }
    if (m_weight_used_isSet) {
        obj.insert(QString("weightUsed"), ::OpenAPI::toJsonValue(m_weight_used));
    }
    if (m_weight_utilization_isSet) {
        obj.insert(QString("weightUtilization"), ::OpenAPI::toJsonValue(m_weight_utilization));
    }
    return obj;
}

OAIPoint OAIBox::getDimensions() const {
    return m_dimensions;
}
void OAIBox::setDimensions(const OAIPoint &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIBox::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIBox::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIBox::getName() const {
    return m_name;
}
void OAIBox::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBox::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBox::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBox::getPrice() const {
    return m_price;
}
void OAIBox::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIBox::is_price_Set() const{
    return m_price_isSet;
}

bool OAIBox::is_price_Valid() const{
    return m_price_isValid;
}

OAIRateTable OAIBox::getRateTable() const {
    return m_rate_table;
}
void OAIBox::setRateTable(const OAIRateTable &rate_table) {
    m_rate_table = rate_table;
    m_rate_table_isSet = true;
}

bool OAIBox::is_rate_table_Set() const{
    return m_rate_table_isSet;
}

bool OAIBox::is_rate_table_Valid() const{
    return m_rate_table_isValid;
}

double OAIBox::getWeightMax() const {
    return m_weight_max;
}
void OAIBox::setWeightMax(const double &weight_max) {
    m_weight_max = weight_max;
    m_weight_max_isSet = true;
}

bool OAIBox::is_weight_max_Set() const{
    return m_weight_max_isSet;
}

bool OAIBox::is_weight_max_Valid() const{
    return m_weight_max_isValid;
}

double OAIBox::getWeightTare() const {
    return m_weight_tare;
}
void OAIBox::setWeightTare(const double &weight_tare) {
    m_weight_tare = weight_tare;
    m_weight_tare_isSet = true;
}

bool OAIBox::is_weight_tare_Set() const{
    return m_weight_tare_isSet;
}

bool OAIBox::is_weight_tare_Valid() const{
    return m_weight_tare_isValid;
}

double OAIBox::getDimensionalWeight() const {
    return m_dimensional_weight;
}
void OAIBox::setDimensionalWeight(const double &dimensional_weight) {
    m_dimensional_weight = dimensional_weight;
    m_dimensional_weight_isSet = true;
}

bool OAIBox::is_dimensional_weight_Set() const{
    return m_dimensional_weight_isSet;
}

bool OAIBox::is_dimensional_weight_Valid() const{
    return m_dimensional_weight_isValid;
}

bool OAIBox::isDimensionalWeightUsed() const {
    return m_dimensional_weight_used;
}
void OAIBox::setDimensionalWeightUsed(const bool &dimensional_weight_used) {
    m_dimensional_weight_used = dimensional_weight_used;
    m_dimensional_weight_used_isSet = true;
}

bool OAIBox::is_dimensional_weight_used_Set() const{
    return m_dimensional_weight_used_isSet;
}

bool OAIBox::is_dimensional_weight_used_Valid() const{
    return m_dimensional_weight_used_isValid;
}

qint32 OAIBox::getId() const {
    return m_id;
}
void OAIBox::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBox::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBox::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIItem> OAIBox::getItems() const {
    return m_items;
}
void OAIBox::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIBox::is_items_Set() const{
    return m_items_isSet;
}

bool OAIBox::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIBox::getSvg() const {
    return m_svg;
}
void OAIBox::setSvg(const QString &svg) {
    m_svg = svg;
    m_svg_isSet = true;
}

bool OAIBox::is_svg_Set() const{
    return m_svg_isSet;
}

bool OAIBox::is_svg_Valid() const{
    return m_svg_isValid;
}

double OAIBox::getVolumeMax() const {
    return m_volume_max;
}
void OAIBox::setVolumeMax(const double &volume_max) {
    m_volume_max = volume_max;
    m_volume_max_isSet = true;
}

bool OAIBox::is_volume_max_Set() const{
    return m_volume_max_isSet;
}

bool OAIBox::is_volume_max_Valid() const{
    return m_volume_max_isValid;
}

double OAIBox::getVolumeRemaining() const {
    return m_volume_remaining;
}
void OAIBox::setVolumeRemaining(const double &volume_remaining) {
    m_volume_remaining = volume_remaining;
    m_volume_remaining_isSet = true;
}

bool OAIBox::is_volume_remaining_Set() const{
    return m_volume_remaining_isSet;
}

bool OAIBox::is_volume_remaining_Valid() const{
    return m_volume_remaining_isValid;
}

double OAIBox::getVolumeUsed() const {
    return m_volume_used;
}
void OAIBox::setVolumeUsed(const double &volume_used) {
    m_volume_used = volume_used;
    m_volume_used_isSet = true;
}

bool OAIBox::is_volume_used_Set() const{
    return m_volume_used_isSet;
}

bool OAIBox::is_volume_used_Valid() const{
    return m_volume_used_isValid;
}

double OAIBox::getVolumeUtilization() const {
    return m_volume_utilization;
}
void OAIBox::setVolumeUtilization(const double &volume_utilization) {
    m_volume_utilization = volume_utilization;
    m_volume_utilization_isSet = true;
}

bool OAIBox::is_volume_utilization_Set() const{
    return m_volume_utilization_isSet;
}

bool OAIBox::is_volume_utilization_Valid() const{
    return m_volume_utilization_isValid;
}

double OAIBox::getWeightNet() const {
    return m_weight_net;
}
void OAIBox::setWeightNet(const double &weight_net) {
    m_weight_net = weight_net;
    m_weight_net_isSet = true;
}

bool OAIBox::is_weight_net_Set() const{
    return m_weight_net_isSet;
}

bool OAIBox::is_weight_net_Valid() const{
    return m_weight_net_isValid;
}

double OAIBox::getWeightRemaining() const {
    return m_weight_remaining;
}
void OAIBox::setWeightRemaining(const double &weight_remaining) {
    m_weight_remaining = weight_remaining;
    m_weight_remaining_isSet = true;
}

bool OAIBox::is_weight_remaining_Set() const{
    return m_weight_remaining_isSet;
}

bool OAIBox::is_weight_remaining_Valid() const{
    return m_weight_remaining_isValid;
}

double OAIBox::getWeightUsed() const {
    return m_weight_used;
}
void OAIBox::setWeightUsed(const double &weight_used) {
    m_weight_used = weight_used;
    m_weight_used_isSet = true;
}

bool OAIBox::is_weight_used_Set() const{
    return m_weight_used_isSet;
}

bool OAIBox::is_weight_used_Valid() const{
    return m_weight_used_isValid;
}

double OAIBox::getWeightUtilization() const {
    return m_weight_utilization;
}
void OAIBox::setWeightUtilization(const double &weight_utilization) {
    m_weight_utilization = weight_utilization;
    m_weight_utilization_isSet = true;
}

bool OAIBox::is_weight_utilization_Set() const{
    return m_weight_utilization_isSet;
}

bool OAIBox::is_weight_utilization_Valid() const{
    return m_weight_utilization_isValid;
}

bool OAIBox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_tare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensional_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensional_weight_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_svg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_net_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBox::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimensions_isValid && m_weight_max_isValid && true;
}

} // namespace OpenAPI
