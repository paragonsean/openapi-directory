/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackResponse::OAIPackResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackResponse::OAIPackResponse() {
    this->initializeModel();
}

OAIPackResponse::~OAIPackResponse() {}

void OAIPackResponse::initializeModel() {

    m_boxes_isSet = false;
    m_boxes_isValid = false;

    m_built_isSet = false;
    m_built_isValid = false;

    m_leftovers_isSet = false;
    m_leftovers_isValid = false;

    m_len_boxes_isSet = false;
    m_len_boxes_isValid = false;

    m_len_items_isSet = false;
    m_len_items_isValid = false;

    m_len_leftovers_isSet = false;
    m_len_leftovers_isValid = false;

    m_pack_time_isSet = false;
    m_pack_time_isValid = false;

    m_render_time_isSet = false;
    m_render_time_isValid = false;

    m_scripts_isSet = false;
    m_scripts_isValid = false;

    m_styles_isSet = false;
    m_styles_isValid = false;

    m_svgs_isSet = false;
    m_svgs_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;

    m_total_time_isSet = false;
    m_total_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackResponse::fromJsonObject(QJsonObject json) {

    m_boxes_isValid = ::OpenAPI::fromJsonValue(m_boxes, json[QString("boxes")]);
    m_boxes_isSet = !json[QString("boxes")].isNull() && m_boxes_isValid;

    m_built_isValid = ::OpenAPI::fromJsonValue(m_built, json[QString("built")]);
    m_built_isSet = !json[QString("built")].isNull() && m_built_isValid;

    m_leftovers_isValid = ::OpenAPI::fromJsonValue(m_leftovers, json[QString("leftovers")]);
    m_leftovers_isSet = !json[QString("leftovers")].isNull() && m_leftovers_isValid;

    m_len_boxes_isValid = ::OpenAPI::fromJsonValue(m_len_boxes, json[QString("lenBoxes")]);
    m_len_boxes_isSet = !json[QString("lenBoxes")].isNull() && m_len_boxes_isValid;

    m_len_items_isValid = ::OpenAPI::fromJsonValue(m_len_items, json[QString("lenItems")]);
    m_len_items_isSet = !json[QString("lenItems")].isNull() && m_len_items_isValid;

    m_len_leftovers_isValid = ::OpenAPI::fromJsonValue(m_len_leftovers, json[QString("lenLeftovers")]);
    m_len_leftovers_isSet = !json[QString("lenLeftovers")].isNull() && m_len_leftovers_isValid;

    m_pack_time_isValid = ::OpenAPI::fromJsonValue(m_pack_time, json[QString("packTime")]);
    m_pack_time_isSet = !json[QString("packTime")].isNull() && m_pack_time_isValid;

    m_render_time_isValid = ::OpenAPI::fromJsonValue(m_render_time, json[QString("renderTime")]);
    m_render_time_isSet = !json[QString("renderTime")].isNull() && m_render_time_isValid;

    m_scripts_isValid = ::OpenAPI::fromJsonValue(m_scripts, json[QString("scripts")]);
    m_scripts_isSet = !json[QString("scripts")].isNull() && m_scripts_isValid;

    m_styles_isValid = ::OpenAPI::fromJsonValue(m_styles, json[QString("styles")]);
    m_styles_isSet = !json[QString("styles")].isNull() && m_styles_isValid;

    m_svgs_isValid = ::OpenAPI::fromJsonValue(m_svgs, json[QString("svgs")]);
    m_svgs_isSet = !json[QString("svgs")].isNull() && m_svgs_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("totalCost")]);
    m_total_cost_isSet = !json[QString("totalCost")].isNull() && m_total_cost_isValid;

    m_total_time_isValid = ::OpenAPI::fromJsonValue(m_total_time, json[QString("totalTime")]);
    m_total_time_isSet = !json[QString("totalTime")].isNull() && m_total_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_boxes.size() > 0) {
        obj.insert(QString("boxes"), ::OpenAPI::toJsonValue(m_boxes));
    }
    if (m_built_isSet) {
        obj.insert(QString("built"), ::OpenAPI::toJsonValue(m_built));
    }
    if (m_leftovers.size() > 0) {
        obj.insert(QString("leftovers"), ::OpenAPI::toJsonValue(m_leftovers));
    }
    if (m_len_boxes_isSet) {
        obj.insert(QString("lenBoxes"), ::OpenAPI::toJsonValue(m_len_boxes));
    }
    if (m_len_items_isSet) {
        obj.insert(QString("lenItems"), ::OpenAPI::toJsonValue(m_len_items));
    }
    if (m_len_leftovers_isSet) {
        obj.insert(QString("lenLeftovers"), ::OpenAPI::toJsonValue(m_len_leftovers));
    }
    if (m_pack_time_isSet) {
        obj.insert(QString("packTime"), ::OpenAPI::toJsonValue(m_pack_time));
    }
    if (m_render_time_isSet) {
        obj.insert(QString("renderTime"), ::OpenAPI::toJsonValue(m_render_time));
    }
    if (m_scripts_isSet) {
        obj.insert(QString("scripts"), ::OpenAPI::toJsonValue(m_scripts));
    }
    if (m_styles_isSet) {
        obj.insert(QString("styles"), ::OpenAPI::toJsonValue(m_styles));
    }
    if (m_svgs_isSet) {
        obj.insert(QString("svgs"), ::OpenAPI::toJsonValue(m_svgs));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("totalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    if (m_total_time_isSet) {
        obj.insert(QString("totalTime"), ::OpenAPI::toJsonValue(m_total_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIBox> OAIPackResponse::getBoxes() const {
    return m_boxes;
}
void OAIPackResponse::setBoxes(const QList<OAIBox> &boxes) {
    m_boxes = boxes;
    m_boxes_isSet = true;
}

bool OAIPackResponse::is_boxes_Set() const{
    return m_boxes_isSet;
}

bool OAIPackResponse::is_boxes_Valid() const{
    return m_boxes_isValid;
}

QString OAIPackResponse::getBuilt() const {
    return m_built;
}
void OAIPackResponse::setBuilt(const QString &built) {
    m_built = built;
    m_built_isSet = true;
}

bool OAIPackResponse::is_built_Set() const{
    return m_built_isSet;
}

bool OAIPackResponse::is_built_Valid() const{
    return m_built_isValid;
}

QList<OAIItem> OAIPackResponse::getLeftovers() const {
    return m_leftovers;
}
void OAIPackResponse::setLeftovers(const QList<OAIItem> &leftovers) {
    m_leftovers = leftovers;
    m_leftovers_isSet = true;
}

bool OAIPackResponse::is_leftovers_Set() const{
    return m_leftovers_isSet;
}

bool OAIPackResponse::is_leftovers_Valid() const{
    return m_leftovers_isValid;
}

qint32 OAIPackResponse::getLenBoxes() const {
    return m_len_boxes;
}
void OAIPackResponse::setLenBoxes(const qint32 &len_boxes) {
    m_len_boxes = len_boxes;
    m_len_boxes_isSet = true;
}

bool OAIPackResponse::is_len_boxes_Set() const{
    return m_len_boxes_isSet;
}

bool OAIPackResponse::is_len_boxes_Valid() const{
    return m_len_boxes_isValid;
}

qint32 OAIPackResponse::getLenItems() const {
    return m_len_items;
}
void OAIPackResponse::setLenItems(const qint32 &len_items) {
    m_len_items = len_items;
    m_len_items_isSet = true;
}

bool OAIPackResponse::is_len_items_Set() const{
    return m_len_items_isSet;
}

bool OAIPackResponse::is_len_items_Valid() const{
    return m_len_items_isValid;
}

qint32 OAIPackResponse::getLenLeftovers() const {
    return m_len_leftovers;
}
void OAIPackResponse::setLenLeftovers(const qint32 &len_leftovers) {
    m_len_leftovers = len_leftovers;
    m_len_leftovers_isSet = true;
}

bool OAIPackResponse::is_len_leftovers_Set() const{
    return m_len_leftovers_isSet;
}

bool OAIPackResponse::is_len_leftovers_Valid() const{
    return m_len_leftovers_isValid;
}

double OAIPackResponse::getPackTime() const {
    return m_pack_time;
}
void OAIPackResponse::setPackTime(const double &pack_time) {
    m_pack_time = pack_time;
    m_pack_time_isSet = true;
}

bool OAIPackResponse::is_pack_time_Set() const{
    return m_pack_time_isSet;
}

bool OAIPackResponse::is_pack_time_Valid() const{
    return m_pack_time_isValid;
}

double OAIPackResponse::getRenderTime() const {
    return m_render_time;
}
void OAIPackResponse::setRenderTime(const double &render_time) {
    m_render_time = render_time;
    m_render_time_isSet = true;
}

bool OAIPackResponse::is_render_time_Set() const{
    return m_render_time_isSet;
}

bool OAIPackResponse::is_render_time_Valid() const{
    return m_render_time_isValid;
}

QString OAIPackResponse::getScripts() const {
    return m_scripts;
}
void OAIPackResponse::setScripts(const QString &scripts) {
    m_scripts = scripts;
    m_scripts_isSet = true;
}

bool OAIPackResponse::is_scripts_Set() const{
    return m_scripts_isSet;
}

bool OAIPackResponse::is_scripts_Valid() const{
    return m_scripts_isValid;
}

QString OAIPackResponse::getStyles() const {
    return m_styles;
}
void OAIPackResponse::setStyles(const QString &styles) {
    m_styles = styles;
    m_styles_isSet = true;
}

bool OAIPackResponse::is_styles_Set() const{
    return m_styles_isSet;
}

bool OAIPackResponse::is_styles_Valid() const{
    return m_styles_isValid;
}

QString OAIPackResponse::getSvgs() const {
    return m_svgs;
}
void OAIPackResponse::setSvgs(const QString &svgs) {
    m_svgs = svgs;
    m_svgs_isSet = true;
}

bool OAIPackResponse::is_svgs_Set() const{
    return m_svgs_isSet;
}

bool OAIPackResponse::is_svgs_Valid() const{
    return m_svgs_isValid;
}

QString OAIPackResponse::getTitle() const {
    return m_title;
}
void OAIPackResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPackResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPackResponse::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIPackResponse::getTotalCost() const {
    return m_total_cost;
}
void OAIPackResponse::setTotalCost(const qint32 &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAIPackResponse::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAIPackResponse::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

double OAIPackResponse::getTotalTime() const {
    return m_total_time;
}
void OAIPackResponse::setTotalTime(const double &total_time) {
    m_total_time = total_time;
    m_total_time_isSet = true;
}

bool OAIPackResponse::is_total_time_Set() const{
    return m_total_time_isSet;
}

bool OAIPackResponse::is_total_time_Valid() const{
    return m_total_time_isValid;
}

QString OAIPackResponse::getVersion() const {
    return m_version;
}
void OAIPackResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_built_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leftovers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_len_boxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_len_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_len_leftovers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pack_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scripts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_styles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svgs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
