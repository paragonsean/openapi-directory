/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxType::OAIBoxType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxType::OAIBoxType() {
    this->initializeModel();
}

OAIBoxType::~OAIBoxType() {}

void OAIBoxType::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_rate_table_isSet = false;
    m_rate_table_isValid = false;

    m_weight_max_isSet = false;
    m_weight_max_isValid = false;

    m_weight_tare_isSet = false;
    m_weight_tare_isValid = false;
}

void OAIBoxType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxType::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_rate_table_isValid = ::OpenAPI::fromJsonValue(m_rate_table, json[QString("rateTable")]);
    m_rate_table_isSet = !json[QString("rateTable")].isNull() && m_rate_table_isValid;

    m_weight_max_isValid = ::OpenAPI::fromJsonValue(m_weight_max, json[QString("weightMax")]);
    m_weight_max_isSet = !json[QString("weightMax")].isNull() && m_weight_max_isValid;

    m_weight_tare_isValid = ::OpenAPI::fromJsonValue(m_weight_tare, json[QString("weightTare")]);
    m_weight_tare_isSet = !json[QString("weightTare")].isNull() && m_weight_tare_isValid;
}

QString OAIBoxType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxType::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_rate_table.isSet()) {
        obj.insert(QString("rateTable"), ::OpenAPI::toJsonValue(m_rate_table));
    }
    if (m_weight_max_isSet) {
        obj.insert(QString("weightMax"), ::OpenAPI::toJsonValue(m_weight_max));
    }
    if (m_weight_tare_isSet) {
        obj.insert(QString("weightTare"), ::OpenAPI::toJsonValue(m_weight_tare));
    }
    return obj;
}

OAIPoint OAIBoxType::getDimensions() const {
    return m_dimensions;
}
void OAIBoxType::setDimensions(const OAIPoint &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIBoxType::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIBoxType::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIBoxType::getName() const {
    return m_name;
}
void OAIBoxType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBoxType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBoxType::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBoxType::getPrice() const {
    return m_price;
}
void OAIBoxType::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIBoxType::is_price_Set() const{
    return m_price_isSet;
}

bool OAIBoxType::is_price_Valid() const{
    return m_price_isValid;
}

OAIRateTable OAIBoxType::getRateTable() const {
    return m_rate_table;
}
void OAIBoxType::setRateTable(const OAIRateTable &rate_table) {
    m_rate_table = rate_table;
    m_rate_table_isSet = true;
}

bool OAIBoxType::is_rate_table_Set() const{
    return m_rate_table_isSet;
}

bool OAIBoxType::is_rate_table_Valid() const{
    return m_rate_table_isValid;
}

double OAIBoxType::getWeightMax() const {
    return m_weight_max;
}
void OAIBoxType::setWeightMax(const double &weight_max) {
    m_weight_max = weight_max;
    m_weight_max_isSet = true;
}

bool OAIBoxType::is_weight_max_Set() const{
    return m_weight_max_isSet;
}

bool OAIBoxType::is_weight_max_Valid() const{
    return m_weight_max_isValid;
}

double OAIBoxType::getWeightTare() const {
    return m_weight_tare;
}
void OAIBoxType::setWeightTare(const double &weight_tare) {
    m_weight_tare = weight_tare;
    m_weight_tare_isSet = true;
}

bool OAIBoxType::is_weight_tare_Set() const{
    return m_weight_tare_isSet;
}

bool OAIBoxType::is_weight_tare_Valid() const{
    return m_weight_tare_isValid;
}

bool OAIBoxType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_tare_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimensions_isValid && m_weight_max_isValid && true;
}

} // namespace OpenAPI
