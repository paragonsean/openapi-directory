/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBox.h
 *
 * A completed, packed box.
 */

#ifndef OAIBox_H
#define OAIBox_H

#include <QJsonObject>

#include "OAIItem.h"
#include "OAIPoint.h"
#include "OAIRateTable.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPoint;
class OAIRateTable;
class OAIItem;

class OAIBox : public OAIObject {
public:
    OAIBox();
    OAIBox(QString json);
    ~OAIBox() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPoint getDimensions() const;
    void setDimensions(const OAIPoint &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPrice() const;
    void setPrice(const qint32 &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    OAIRateTable getRateTable() const;
    void setRateTable(const OAIRateTable &rate_table);
    bool is_rate_table_Set() const;
    bool is_rate_table_Valid() const;

    double getWeightMax() const;
    void setWeightMax(const double &weight_max);
    bool is_weight_max_Set() const;
    bool is_weight_max_Valid() const;

    double getWeightTare() const;
    void setWeightTare(const double &weight_tare);
    bool is_weight_tare_Set() const;
    bool is_weight_tare_Valid() const;

    double getDimensionalWeight() const;
    void setDimensionalWeight(const double &dimensional_weight);
    bool is_dimensional_weight_Set() const;
    bool is_dimensional_weight_Valid() const;

    bool isDimensionalWeightUsed() const;
    void setDimensionalWeightUsed(const bool &dimensional_weight_used);
    bool is_dimensional_weight_used_Set() const;
    bool is_dimensional_weight_used_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIItem> getItems() const;
    void setItems(const QList<OAIItem> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    QString getSvg() const;
    void setSvg(const QString &svg);
    bool is_svg_Set() const;
    bool is_svg_Valid() const;

    double getVolumeMax() const;
    void setVolumeMax(const double &volume_max);
    bool is_volume_max_Set() const;
    bool is_volume_max_Valid() const;

    double getVolumeRemaining() const;
    void setVolumeRemaining(const double &volume_remaining);
    bool is_volume_remaining_Set() const;
    bool is_volume_remaining_Valid() const;

    double getVolumeUsed() const;
    void setVolumeUsed(const double &volume_used);
    bool is_volume_used_Set() const;
    bool is_volume_used_Valid() const;

    double getVolumeUtilization() const;
    void setVolumeUtilization(const double &volume_utilization);
    bool is_volume_utilization_Set() const;
    bool is_volume_utilization_Valid() const;

    double getWeightNet() const;
    void setWeightNet(const double &weight_net);
    bool is_weight_net_Set() const;
    bool is_weight_net_Valid() const;

    double getWeightRemaining() const;
    void setWeightRemaining(const double &weight_remaining);
    bool is_weight_remaining_Set() const;
    bool is_weight_remaining_Valid() const;

    double getWeightUsed() const;
    void setWeightUsed(const double &weight_used);
    bool is_weight_used_Set() const;
    bool is_weight_used_Valid() const;

    double getWeightUtilization() const;
    void setWeightUtilization(const double &weight_utilization);
    bool is_weight_utilization_Set() const;
    bool is_weight_utilization_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPoint m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    OAIRateTable m_rate_table;
    bool m_rate_table_isSet;
    bool m_rate_table_isValid;

    double m_weight_max;
    bool m_weight_max_isSet;
    bool m_weight_max_isValid;

    double m_weight_tare;
    bool m_weight_tare_isSet;
    bool m_weight_tare_isValid;

    double m_dimensional_weight;
    bool m_dimensional_weight_isSet;
    bool m_dimensional_weight_isValid;

    bool m_dimensional_weight_used;
    bool m_dimensional_weight_used_isSet;
    bool m_dimensional_weight_used_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIItem> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    QString m_svg;
    bool m_svg_isSet;
    bool m_svg_isValid;

    double m_volume_max;
    bool m_volume_max_isSet;
    bool m_volume_max_isValid;

    double m_volume_remaining;
    bool m_volume_remaining_isSet;
    bool m_volume_remaining_isValid;

    double m_volume_used;
    bool m_volume_used_isSet;
    bool m_volume_used_isValid;

    double m_volume_utilization;
    bool m_volume_utilization_isSet;
    bool m_volume_utilization_isValid;

    double m_weight_net;
    bool m_weight_net_isSet;
    bool m_weight_net_isValid;

    double m_weight_remaining;
    bool m_weight_remaining_isSet;
    bool m_weight_remaining_isValid;

    double m_weight_used;
    bool m_weight_used_isSet;
    bool m_weight_used_isValid;

    double m_weight_utilization;
    bool m_weight_utilization_isSet;
    bool m_weight_utilization_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBox)

#endif // OAIBox_H
