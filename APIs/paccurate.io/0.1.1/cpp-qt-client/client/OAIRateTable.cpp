/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateTable::OAIRateTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateTable::OAIRateTable() {
    this->initializeModel();
}

OAIRateTable::~OAIRateTable() {}

void OAIRateTable::initializeModel() {

    m_base_price_isSet = false;
    m_base_price_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_dim_factor_isSet = false;
    m_dim_factor_isValid = false;

    m_price_increase_rate_isSet = false;
    m_price_increase_rate_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_weights_isSet = false;
    m_weights_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIRateTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateTable::fromJsonObject(QJsonObject json) {

    m_base_price_isValid = ::OpenAPI::fromJsonValue(m_base_price, json[QString("basePrice")]);
    m_base_price_isSet = !json[QString("basePrice")].isNull() && m_base_price_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_dim_factor_isValid = ::OpenAPI::fromJsonValue(m_dim_factor, json[QString("dimFactor")]);
    m_dim_factor_isSet = !json[QString("dimFactor")].isNull() && m_dim_factor_isValid;

    m_price_increase_rate_isValid = ::OpenAPI::fromJsonValue(m_price_increase_rate, json[QString("priceIncreaseRate")]);
    m_price_increase_rate_isSet = !json[QString("priceIncreaseRate")].isNull() && m_price_increase_rate_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_weights_isValid = ::OpenAPI::fromJsonValue(m_weights, json[QString("weights")]);
    m_weights_isSet = !json[QString("weights")].isNull() && m_weights_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIRateTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateTable::asJsonObject() const {
    QJsonObject obj;
    if (m_base_price_isSet) {
        obj.insert(QString("basePrice"), ::OpenAPI::toJsonValue(m_base_price));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_dim_factor_isSet) {
        obj.insert(QString("dimFactor"), ::OpenAPI::toJsonValue(m_dim_factor));
    }
    if (m_price_increase_rate_isSet) {
        obj.insert(QString("priceIncreaseRate"), ::OpenAPI::toJsonValue(m_price_increase_rate));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_weights.size() > 0) {
        obj.insert(QString("weights"), ::OpenAPI::toJsonValue(m_weights));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

double OAIRateTable::getBasePrice() const {
    return m_base_price;
}
void OAIRateTable::setBasePrice(const double &base_price) {
    m_base_price = base_price;
    m_base_price_isSet = true;
}

bool OAIRateTable::is_base_price_Set() const{
    return m_base_price_isSet;
}

bool OAIRateTable::is_base_price_Valid() const{
    return m_base_price_isValid;
}

QString OAIRateTable::getCarrier() const {
    return m_carrier;
}
void OAIRateTable::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIRateTable::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIRateTable::is_carrier_Valid() const{
    return m_carrier_isValid;
}

double OAIRateTable::getDimFactor() const {
    return m_dim_factor;
}
void OAIRateTable::setDimFactor(const double &dim_factor) {
    m_dim_factor = dim_factor;
    m_dim_factor_isSet = true;
}

bool OAIRateTable::is_dim_factor_Set() const{
    return m_dim_factor_isSet;
}

bool OAIRateTable::is_dim_factor_Valid() const{
    return m_dim_factor_isValid;
}

double OAIRateTable::getPriceIncreaseRate() const {
    return m_price_increase_rate;
}
void OAIRateTable::setPriceIncreaseRate(const double &price_increase_rate) {
    m_price_increase_rate = price_increase_rate;
    m_price_increase_rate_isSet = true;
}

bool OAIRateTable::is_price_increase_rate_Set() const{
    return m_price_increase_rate_isSet;
}

bool OAIRateTable::is_price_increase_rate_Valid() const{
    return m_price_increase_rate_isValid;
}

QList<double> OAIRateTable::getRates() const {
    return m_rates;
}
void OAIRateTable::setRates(const QList<double> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIRateTable::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIRateTable::is_rates_Valid() const{
    return m_rates_isValid;
}

QString OAIRateTable::getService() const {
    return m_service;
}
void OAIRateTable::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIRateTable::is_service_Set() const{
    return m_service_isSet;
}

bool OAIRateTable::is_service_Valid() const{
    return m_service_isValid;
}

QList<double> OAIRateTable::getWeights() const {
    return m_weights;
}
void OAIRateTable::setWeights(const QList<double> &weights) {
    m_weights = weights;
    m_weights_isSet = true;
}

bool OAIRateTable::is_weights_Set() const{
    return m_weights_isSet;
}

bool OAIRateTable::is_weights_Valid() const{
    return m_weights_isValid;
}

QString OAIRateTable::getZone() const {
    return m_zone;
}
void OAIRateTable::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIRateTable::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIRateTable::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIRateTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dim_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_increase_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
