/**
 * paccurate.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    return obj;
}

QString OAIItem::getColor() const {
    return m_color;
}
void OAIItem::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIItem::is_color_Set() const{
    return m_color_isSet;
}

bool OAIItem::is_color_Valid() const{
    return m_color_isValid;
}

OAIPoint OAIItem::getDimensions() const {
    return m_dimensions;
}
void OAIItem::setDimensions(const OAIPoint &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIItem::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIItem::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIItem::getRefId() const {
    return m_ref_id;
}
void OAIItem::setRefId(const qint32 &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIItem::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIItem::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QString OAIItem::getSequence() const {
    return m_sequence;
}
void OAIItem::setSequence(const QString &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIItem::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIItem::is_sequence_Valid() const{
    return m_sequence_isValid;
}

double OAIItem::getWeight() const {
    return m_weight;
}
void OAIItem::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIItem::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIItem::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIItem::getIndex() const {
    return m_index;
}
void OAIItem::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIItem::is_index_Set() const{
    return m_index_isSet;
}

bool OAIItem::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIItem::getMessage() const {
    return m_message;
}
void OAIItem::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIItem::is_message_Set() const{
    return m_message_isSet;
}

bool OAIItem::is_message_Valid() const{
    return m_message_isValid;
}

OAIObject OAIItem::getOrigin() const {
    return m_origin;
}
void OAIItem::setOrigin(const OAIObject &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIItem::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIItem::is_origin_Valid() const{
    return m_origin_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimensions_isValid && m_weight_isValid && true;
}

} // namespace OpenAPI
