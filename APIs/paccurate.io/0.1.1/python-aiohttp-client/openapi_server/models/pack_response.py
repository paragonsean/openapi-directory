# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.box import Box
from openapi_server.models.item import Item
from openapi_server import util


class PackResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boxes: List[Box]=None, built: str=None, leftovers: List[Item]=None, len_boxes: int=None, len_items: int=None, len_leftovers: int=None, pack_time: float=None, render_time: float=None, scripts: str=None, styles: str=None, svgs: str=None, title: str=None, total_cost: int=None, total_time: float=None, version: str=None):
        """PackResponse - a model defined in OpenAPI

        :param boxes: The boxes of this PackResponse.
        :param built: The built of this PackResponse.
        :param leftovers: The leftovers of this PackResponse.
        :param len_boxes: The len_boxes of this PackResponse.
        :param len_items: The len_items of this PackResponse.
        :param len_leftovers: The len_leftovers of this PackResponse.
        :param pack_time: The pack_time of this PackResponse.
        :param render_time: The render_time of this PackResponse.
        :param scripts: The scripts of this PackResponse.
        :param styles: The styles of this PackResponse.
        :param svgs: The svgs of this PackResponse.
        :param title: The title of this PackResponse.
        :param total_cost: The total_cost of this PackResponse.
        :param total_time: The total_time of this PackResponse.
        :param version: The version of this PackResponse.
        """
        self.openapi_types = {
            'boxes': List[Box],
            'built': str,
            'leftovers': List[Item],
            'len_boxes': int,
            'len_items': int,
            'len_leftovers': int,
            'pack_time': float,
            'render_time': float,
            'scripts': str,
            'styles': str,
            'svgs': str,
            'title': str,
            'total_cost': int,
            'total_time': float,
            'version': str
        }

        self.attribute_map = {
            'boxes': 'boxes',
            'built': 'built',
            'leftovers': 'leftovers',
            'len_boxes': 'lenBoxes',
            'len_items': 'lenItems',
            'len_leftovers': 'lenLeftovers',
            'pack_time': 'packTime',
            'render_time': 'renderTime',
            'scripts': 'scripts',
            'styles': 'styles',
            'svgs': 'svgs',
            'title': 'title',
            'total_cost': 'totalCost',
            'total_time': 'totalTime',
            'version': 'version'
        }

        self._boxes = boxes
        self._built = built
        self._leftovers = leftovers
        self._len_boxes = len_boxes
        self._len_items = len_items
        self._len_leftovers = len_leftovers
        self._pack_time = pack_time
        self._render_time = render_time
        self._scripts = scripts
        self._styles = styles
        self._svgs = svgs
        self._title = title
        self._total_cost = total_cost
        self._total_time = total_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackResponse of this PackResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boxes(self):
        """Gets the boxes of this PackResponse.

        List of boxes, packed, with their contained items.

        :return: The boxes of this PackResponse.
        :rtype: List[Box]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes):
        """Sets the boxes of this PackResponse.

        List of boxes, packed, with their contained items.

        :param boxes: The boxes of this PackResponse.
        :type boxes: List[Box]
        """

        self._boxes = boxes

    @property
    def built(self):
        """Gets the built of this PackResponse.

        build timestamp of engine.

        :return: The built of this PackResponse.
        :rtype: str
        """
        return self._built

    @built.setter
    def built(self, built):
        """Sets the built of this PackResponse.

        build timestamp of engine.

        :param built: The built of this PackResponse.
        :type built: str
        """

        self._built = built

    @property
    def leftovers(self):
        """Gets the leftovers of this PackResponse.

        items left over that could not be packed into any available boxes.

        :return: The leftovers of this PackResponse.
        :rtype: List[Item]
        """
        return self._leftovers

    @leftovers.setter
    def leftovers(self, leftovers):
        """Sets the leftovers of this PackResponse.

        items left over that could not be packed into any available boxes.

        :param leftovers: The leftovers of this PackResponse.
        :type leftovers: List[Item]
        """

        self._leftovers = leftovers

    @property
    def len_boxes(self):
        """Gets the len_boxes of this PackResponse.

        cardinality of all packed boxes

        :return: The len_boxes of this PackResponse.
        :rtype: int
        """
        return self._len_boxes

    @len_boxes.setter
    def len_boxes(self, len_boxes):
        """Sets the len_boxes of this PackResponse.

        cardinality of all packed boxes

        :param len_boxes: The len_boxes of this PackResponse.
        :type len_boxes: int
        """

        self._len_boxes = len_boxes

    @property
    def len_items(self):
        """Gets the len_items of this PackResponse.

        cardinality of all items

        :return: The len_items of this PackResponse.
        :rtype: int
        """
        return self._len_items

    @len_items.setter
    def len_items(self, len_items):
        """Sets the len_items of this PackResponse.

        cardinality of all items

        :param len_items: The len_items of this PackResponse.
        :type len_items: int
        """

        self._len_items = len_items

    @property
    def len_leftovers(self):
        """Gets the len_leftovers of this PackResponse.

        cardinality of items unabled to be packed

        :return: The len_leftovers of this PackResponse.
        :rtype: int
        """
        return self._len_leftovers

    @len_leftovers.setter
    def len_leftovers(self, len_leftovers):
        """Sets the len_leftovers of this PackResponse.

        cardinality of items unabled to be packed

        :param len_leftovers: The len_leftovers of this PackResponse.
        :type len_leftovers: int
        """

        self._len_leftovers = len_leftovers

    @property
    def pack_time(self):
        """Gets the pack_time of this PackResponse.

        seconds spent in packing

        :return: The pack_time of this PackResponse.
        :rtype: float
        """
        return self._pack_time

    @pack_time.setter
    def pack_time(self, pack_time):
        """Sets the pack_time of this PackResponse.

        seconds spent in packing

        :param pack_time: The pack_time of this PackResponse.
        :type pack_time: float
        """

        self._pack_time = pack_time

    @property
    def render_time(self):
        """Gets the render_time of this PackResponse.

        seconds spent in rendering and placement instruction creation of packing solution

        :return: The render_time of this PackResponse.
        :rtype: float
        """
        return self._render_time

    @render_time.setter
    def render_time(self, render_time):
        """Sets the render_time of this PackResponse.

        seconds spent in rendering and placement instruction creation of packing solution

        :param render_time: The render_time of this PackResponse.
        :type render_time: float
        """

        self._render_time = render_time

    @property
    def scripts(self):
        """Gets the scripts of this PackResponse.

        additional javascripts for any image loading.

        :return: The scripts of this PackResponse.
        :rtype: str
        """
        return self._scripts

    @scripts.setter
    def scripts(self, scripts):
        """Sets the scripts of this PackResponse.

        additional javascripts for any image loading.

        :param scripts: The scripts of this PackResponse.
        :type scripts: str
        """

        self._scripts = scripts

    @property
    def styles(self):
        """Gets the styles of this PackResponse.

        additional styles for pack images

        :return: The styles of this PackResponse.
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this PackResponse.

        additional styles for pack images

        :param styles: The styles of this PackResponse.
        :type styles: str
        """

        self._styles = styles

    @property
    def svgs(self):
        """Gets the svgs of this PackResponse.

        all box SVG images

        :return: The svgs of this PackResponse.
        :rtype: str
        """
        return self._svgs

    @svgs.setter
    def svgs(self, svgs):
        """Sets the svgs of this PackResponse.

        all box SVG images

        :param svgs: The svgs of this PackResponse.
        :type svgs: str
        """

        self._svgs = svgs

    @property
    def title(self):
        """Gets the title of this PackResponse.

        title of packing result, when applicable.

        :return: The title of this PackResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PackResponse.

        title of packing result, when applicable.

        :param title: The title of this PackResponse.
        :type title: str
        """

        self._title = title

    @property
    def total_cost(self):
        """Gets the total_cost of this PackResponse.

        total estimated cost of all packed boxes, when applicable, in cents.

        :return: The total_cost of this PackResponse.
        :rtype: int
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this PackResponse.

        total estimated cost of all packed boxes, when applicable, in cents.

        :param total_cost: The total_cost of this PackResponse.
        :type total_cost: int
        """

        self._total_cost = total_cost

    @property
    def total_time(self):
        """Gets the total_time of this PackResponse.

        seconds spent generating response, total.

        :return: The total_time of this PackResponse.
        :rtype: float
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this PackResponse.

        seconds spent generating response, total.

        :param total_time: The total_time of this PackResponse.
        :type total_time: float
        """

        self._total_time = total_time

    @property
    def version(self):
        """Gets the version of this PackResponse.

        version of engine

        :return: The version of this PackResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackResponse.

        version of engine

        :param version: The version of this PackResponse.
        :type version: str
        """

        self._version = version
