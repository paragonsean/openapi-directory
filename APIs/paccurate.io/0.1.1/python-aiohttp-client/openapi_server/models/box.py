# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server.models.point import Point
from openapi_server.models.rate_table import RateTable
from openapi_server import util


class Box(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: Point=None, name: str=None, price: int=None, rate_table: RateTable=None, weight_max: float=None, weight_tare: float=None, dimensional_weight: float=None, dimensional_weight_used: bool=None, id: int=None, items: List[Item]=None, svg: str=None, volume_max: float=None, volume_remaining: float=None, volume_used: float=None, volume_utilization: float=None, weight_net: float=None, weight_remaining: float=None, weight_used: float=None, weight_utilization: float=None):
        """Box - a model defined in OpenAPI

        :param dimensions: The dimensions of this Box.
        :param name: The name of this Box.
        :param price: The price of this Box.
        :param rate_table: The rate_table of this Box.
        :param weight_max: The weight_max of this Box.
        :param weight_tare: The weight_tare of this Box.
        :param dimensional_weight: The dimensional_weight of this Box.
        :param dimensional_weight_used: The dimensional_weight_used of this Box.
        :param id: The id of this Box.
        :param items: The items of this Box.
        :param svg: The svg of this Box.
        :param volume_max: The volume_max of this Box.
        :param volume_remaining: The volume_remaining of this Box.
        :param volume_used: The volume_used of this Box.
        :param volume_utilization: The volume_utilization of this Box.
        :param weight_net: The weight_net of this Box.
        :param weight_remaining: The weight_remaining of this Box.
        :param weight_used: The weight_used of this Box.
        :param weight_utilization: The weight_utilization of this Box.
        """
        self.openapi_types = {
            'dimensions': Point,
            'name': str,
            'price': int,
            'rate_table': RateTable,
            'weight_max': float,
            'weight_tare': float,
            'dimensional_weight': float,
            'dimensional_weight_used': bool,
            'id': int,
            'items': List[Item],
            'svg': str,
            'volume_max': float,
            'volume_remaining': float,
            'volume_used': float,
            'volume_utilization': float,
            'weight_net': float,
            'weight_remaining': float,
            'weight_used': float,
            'weight_utilization': float
        }

        self.attribute_map = {
            'dimensions': 'dimensions',
            'name': 'name',
            'price': 'price',
            'rate_table': 'rateTable',
            'weight_max': 'weightMax',
            'weight_tare': 'weightTare',
            'dimensional_weight': 'dimensionalWeight',
            'dimensional_weight_used': 'dimensionalWeightUsed',
            'id': 'id',
            'items': 'items',
            'svg': 'svg',
            'volume_max': 'volumeMax',
            'volume_remaining': 'volumeRemaining',
            'volume_used': 'volumeUsed',
            'volume_utilization': 'volumeUtilization',
            'weight_net': 'weightNet',
            'weight_remaining': 'weightRemaining',
            'weight_used': 'weightUsed',
            'weight_utilization': 'weightUtilization'
        }

        self._dimensions = dimensions
        self._name = name
        self._price = price
        self._rate_table = rate_table
        self._weight_max = weight_max
        self._weight_tare = weight_tare
        self._dimensional_weight = dimensional_weight
        self._dimensional_weight_used = dimensional_weight_used
        self._id = id
        self._items = items
        self._svg = svg
        self._volume_max = volume_max
        self._volume_remaining = volume_remaining
        self._volume_used = volume_used
        self._volume_utilization = volume_utilization
        self._weight_net = weight_net
        self._weight_remaining = weight_remaining
        self._weight_used = weight_used
        self._weight_utilization = weight_utilization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Box':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Box of this Box.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this Box.

        the [height,length,width] of the box.

        :return: The dimensions of this Box.
        :rtype: Point
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Box.

        the [height,length,width] of the box.

        :param dimensions: The dimensions of this Box.
        :type dimensions: Point
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")

        self._dimensions = dimensions

    @property
    def name(self):
        """Gets the name of this Box.

        name for the type of box.

        :return: The name of this Box.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Box.

        name for the type of box.

        :param name: The name of this Box.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Box.

        Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton.

        :return: The price of this Box.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Box.

        Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton.

        :param price: The price of this Box.
        :type price: int
        """
        if price is not None and price < 0:
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")

        self._price = price

    @property
    def rate_table(self):
        """Gets the rate_table of this Box.

        An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>

        :return: The rate_table of this Box.
        :rtype: RateTable
        """
        return self._rate_table

    @rate_table.setter
    def rate_table(self, rate_table):
        """Sets the rate_table of this Box.

        An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>

        :param rate_table: The rate_table of this Box.
        :type rate_table: RateTable
        """

        self._rate_table = rate_table

    @property
    def weight_max(self):
        """Gets the weight_max of this Box.

        maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.

        :return: The weight_max of this Box.
        :rtype: float
        """
        return self._weight_max

    @weight_max.setter
    def weight_max(self, weight_max):
        """Sets the weight_max of this Box.

        maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.

        :param weight_max: The weight_max of this Box.
        :type weight_max: float
        """
        if weight_max is None:
            raise ValueError("Invalid value for `weight_max`, must not be `None`")
        if weight_max is not None and weight_max < 0:
            raise ValueError("Invalid value for `weight_max`, must be a value greater than or equal to `0`")

        self._weight_max = weight_max

    @property
    def weight_tare(self):
        """Gets the weight_tare of this Box.

        weight of the container when empty or otherwise unladen, i.e., of the box itself.

        :return: The weight_tare of this Box.
        :rtype: float
        """
        return self._weight_tare

    @weight_tare.setter
    def weight_tare(self, weight_tare):
        """Sets the weight_tare of this Box.

        weight of the container when empty or otherwise unladen, i.e., of the box itself.

        :param weight_tare: The weight_tare of this Box.
        :type weight_tare: float
        """
        if weight_tare is not None and weight_tare < 0:
            raise ValueError("Invalid value for `weight_tare`, must be a value greater than or equal to `0`")

        self._weight_tare = weight_tare

    @property
    def dimensional_weight(self):
        """Gets the dimensional_weight of this Box.

        the calculated dimensional weight of this box, if applicable.

        :return: The dimensional_weight of this Box.
        :rtype: float
        """
        return self._dimensional_weight

    @dimensional_weight.setter
    def dimensional_weight(self, dimensional_weight):
        """Sets the dimensional_weight of this Box.

        the calculated dimensional weight of this box, if applicable.

        :param dimensional_weight: The dimensional_weight of this Box.
        :type dimensional_weight: float
        """

        self._dimensional_weight = dimensional_weight

    @property
    def dimensional_weight_used(self):
        """Gets the dimensional_weight_used of this Box.

        whether or not dimensional weight was used for this box.

        :return: The dimensional_weight_used of this Box.
        :rtype: bool
        """
        return self._dimensional_weight_used

    @dimensional_weight_used.setter
    def dimensional_weight_used(self, dimensional_weight_used):
        """Sets the dimensional_weight_used of this Box.

        whether or not dimensional weight was used for this box.

        :param dimensional_weight_used: The dimensional_weight_used of this Box.
        :type dimensional_weight_used: bool
        """

        self._dimensional_weight_used = dimensional_weight_used

    @property
    def id(self):
        """Gets the id of this Box.


        :return: The id of this Box.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Box.


        :param id: The id of this Box.
        :type id: int
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this Box.


        :return: The items of this Box.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Box.


        :param items: The items of this Box.
        :type items: List[Item]
        """

        self._items = items

    @property
    def svg(self):
        """Gets the svg of this Box.

        raw svg of visualization.

        :return: The svg of this Box.
        :rtype: str
        """
        return self._svg

    @svg.setter
    def svg(self, svg):
        """Sets the svg of this Box.

        raw svg of visualization.

        :param svg: The svg of this Box.
        :type svg: str
        """

        self._svg = svg

    @property
    def volume_max(self):
        """Gets the volume_max of this Box.

        total volume of the box.

        :return: The volume_max of this Box.
        :rtype: float
        """
        return self._volume_max

    @volume_max.setter
    def volume_max(self, volume_max):
        """Sets the volume_max of this Box.

        total volume of the box.

        :param volume_max: The volume_max of this Box.
        :type volume_max: float
        """
        if volume_max is not None and volume_max < 0:
            raise ValueError("Invalid value for `volume_max`, must be a value greater than or equal to `0`")

        self._volume_max = volume_max

    @property
    def volume_remaining(self):
        """Gets the volume_remaining of this Box.

        remaining volume of the box.

        :return: The volume_remaining of this Box.
        :rtype: float
        """
        return self._volume_remaining

    @volume_remaining.setter
    def volume_remaining(self, volume_remaining):
        """Sets the volume_remaining of this Box.

        remaining volume of the box.

        :param volume_remaining: The volume_remaining of this Box.
        :type volume_remaining: float
        """
        if volume_remaining is not None and volume_remaining < 0:
            raise ValueError("Invalid value for `volume_remaining`, must be a value greater than or equal to `0`")

        self._volume_remaining = volume_remaining

    @property
    def volume_used(self):
        """Gets the volume_used of this Box.

        utilized volume of the box.

        :return: The volume_used of this Box.
        :rtype: float
        """
        return self._volume_used

    @volume_used.setter
    def volume_used(self, volume_used):
        """Sets the volume_used of this Box.

        utilized volume of the box.

        :param volume_used: The volume_used of this Box.
        :type volume_used: float
        """
        if volume_used is not None and volume_used < 0:
            raise ValueError("Invalid value for `volume_used`, must be a value greater than or equal to `0`")

        self._volume_used = volume_used

    @property
    def volume_utilization(self):
        """Gets the volume_utilization of this Box.

        percentage of volume utilized by packed items.

        :return: The volume_utilization of this Box.
        :rtype: float
        """
        return self._volume_utilization

    @volume_utilization.setter
    def volume_utilization(self, volume_utilization):
        """Sets the volume_utilization of this Box.

        percentage of volume utilized by packed items.

        :param volume_utilization: The volume_utilization of this Box.
        :type volume_utilization: float
        """
        if volume_utilization is not None and volume_utilization > 1:
            raise ValueError("Invalid value for `volume_utilization`, must be a value less than or equal to `1`")
        if volume_utilization is not None and volume_utilization < 0:
            raise ValueError("Invalid value for `volume_utilization`, must be a value greater than or equal to `0`")

        self._volume_utilization = volume_utilization

    @property
    def weight_net(self):
        """Gets the weight_net of this Box.

        total weight of box's contents, not including the box's empty (tare) weight.

        :return: The weight_net of this Box.
        :rtype: float
        """
        return self._weight_net

    @weight_net.setter
    def weight_net(self, weight_net):
        """Sets the weight_net of this Box.

        total weight of box's contents, not including the box's empty (tare) weight.

        :param weight_net: The weight_net of this Box.
        :type weight_net: float
        """
        if weight_net is not None and weight_net < 0:
            raise ValueError("Invalid value for `weight_net`, must be a value greater than or equal to `0`")

        self._weight_net = weight_net

    @property
    def weight_remaining(self):
        """Gets the weight_remaining of this Box.

        remaining weight of the box.

        :return: The weight_remaining of this Box.
        :rtype: float
        """
        return self._weight_remaining

    @weight_remaining.setter
    def weight_remaining(self, weight_remaining):
        """Sets the weight_remaining of this Box.

        remaining weight of the box.

        :param weight_remaining: The weight_remaining of this Box.
        :type weight_remaining: float
        """
        if weight_remaining is not None and weight_remaining < 0:
            raise ValueError("Invalid value for `weight_remaining`, must be a value greater than or equal to `0`")

        self._weight_remaining = weight_remaining

    @property
    def weight_used(self):
        """Gets the weight_used of this Box.

        utilized weight of the box.

        :return: The weight_used of this Box.
        :rtype: float
        """
        return self._weight_used

    @weight_used.setter
    def weight_used(self, weight_used):
        """Sets the weight_used of this Box.

        utilized weight of the box.

        :param weight_used: The weight_used of this Box.
        :type weight_used: float
        """
        if weight_used is not None and weight_used < 0:
            raise ValueError("Invalid value for `weight_used`, must be a value greater than or equal to `0`")

        self._weight_used = weight_used

    @property
    def weight_utilization(self):
        """Gets the weight_utilization of this Box.

        percentage of weight utilized by packed items.

        :return: The weight_utilization of this Box.
        :rtype: float
        """
        return self._weight_utilization

    @weight_utilization.setter
    def weight_utilization(self, weight_utilization):
        """Sets the weight_utilization of this Box.

        percentage of weight utilized by packed items.

        :param weight_utilization: The weight_utilization of this Box.
        :type weight_utilization: float
        """
        if weight_utilization is not None and weight_utilization > 1:
            raise ValueError("Invalid value for `weight_utilization`, must be a value less than or equal to `1`")
        if weight_utilization is not None and weight_utilization < 0:
            raise ValueError("Invalid value for `weight_utilization`, must be a value greater than or equal to `0`")

        self._weight_utilization = weight_utilization
