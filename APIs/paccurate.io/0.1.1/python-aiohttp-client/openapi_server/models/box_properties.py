# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point import Point
from openapi_server.models.rate_table import RateTable
from openapi_server import util


class BoxProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: Point=None, name: str=None, price: int=None, rate_table: RateTable=None, weight_max: float=None, weight_tare: float=None):
        """BoxProperties - a model defined in OpenAPI

        :param dimensions: The dimensions of this BoxProperties.
        :param name: The name of this BoxProperties.
        :param price: The price of this BoxProperties.
        :param rate_table: The rate_table of this BoxProperties.
        :param weight_max: The weight_max of this BoxProperties.
        :param weight_tare: The weight_tare of this BoxProperties.
        """
        self.openapi_types = {
            'dimensions': Point,
            'name': str,
            'price': int,
            'rate_table': RateTable,
            'weight_max': float,
            'weight_tare': float
        }

        self.attribute_map = {
            'dimensions': 'dimensions',
            'name': 'name',
            'price': 'price',
            'rate_table': 'rateTable',
            'weight_max': 'weightMax',
            'weight_tare': 'weightTare'
        }

        self._dimensions = dimensions
        self._name = name
        self._price = price
        self._rate_table = rate_table
        self._weight_max = weight_max
        self._weight_tare = weight_tare

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BoxProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BoxProperties of this BoxProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this BoxProperties.

        the [height,length,width] of the box.

        :return: The dimensions of this BoxProperties.
        :rtype: Point
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this BoxProperties.

        the [height,length,width] of the box.

        :param dimensions: The dimensions of this BoxProperties.
        :type dimensions: Point
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")

        self._dimensions = dimensions

    @property
    def name(self):
        """Gets the name of this BoxProperties.

        name for the type of box.

        :return: The name of this BoxProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoxProperties.

        name for the type of box.

        :param name: The name of this BoxProperties.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this BoxProperties.

        Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton.

        :return: The price of this BoxProperties.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BoxProperties.

        Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton.

        :param price: The price of this BoxProperties.
        :type price: int
        """
        if price is not None and price < 0:
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")

        self._price = price

    @property
    def rate_table(self):
        """Gets the rate_table of this BoxProperties.

        An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>

        :return: The rate_table of this BoxProperties.
        :rtype: RateTable
        """
        return self._rate_table

    @rate_table.setter
    def rate_table(self, rate_table):
        """Sets the rate_table of this BoxProperties.

        An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>

        :param rate_table: The rate_table of this BoxProperties.
        :type rate_table: RateTable
        """

        self._rate_table = rate_table

    @property
    def weight_max(self):
        """Gets the weight_max of this BoxProperties.

        maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.

        :return: The weight_max of this BoxProperties.
        :rtype: float
        """
        return self._weight_max

    @weight_max.setter
    def weight_max(self, weight_max):
        """Sets the weight_max of this BoxProperties.

        maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare.

        :param weight_max: The weight_max of this BoxProperties.
        :type weight_max: float
        """
        if weight_max is None:
            raise ValueError("Invalid value for `weight_max`, must not be `None`")
        if weight_max is not None and weight_max < 0:
            raise ValueError("Invalid value for `weight_max`, must be a value greater than or equal to `0`")

        self._weight_max = weight_max

    @property
    def weight_tare(self):
        """Gets the weight_tare of this BoxProperties.

        weight of the container when empty or otherwise unladen, i.e., of the box itself.

        :return: The weight_tare of this BoxProperties.
        :rtype: float
        """
        return self._weight_tare

    @weight_tare.setter
    def weight_tare(self, weight_tare):
        """Sets the weight_tare of this BoxProperties.

        weight of the container when empty or otherwise unladen, i.e., of the box itself.

        :param weight_tare: The weight_tare of this BoxProperties.
        :type weight_tare: float
        """
        if weight_tare is not None and weight_tare < 0:
            raise ValueError("Invalid value for `weight_tare`, must be a value greater than or equal to `0`")

        self._weight_tare = weight_tare
