# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_ref_id: int=None, operation: str=None, options: object=None, parameters: List[str]=None, target_item_ref_ids: List[int]=None):
        """Rule - a model defined in OpenAPI

        :param item_ref_id: The item_ref_id of this Rule.
        :param operation: The operation of this Rule.
        :param options: The options of this Rule.
        :param parameters: The parameters of this Rule.
        :param target_item_ref_ids: The target_item_ref_ids of this Rule.
        """
        self.openapi_types = {
            'item_ref_id': int,
            'operation': str,
            'options': object,
            'parameters': List[str],
            'target_item_ref_ids': List[int]
        }

        self.attribute_map = {
            'item_ref_id': 'itemRefId',
            'operation': 'operation',
            'options': 'options',
            'parameters': 'parameters',
            'target_item_ref_ids': 'targetItemRefIds'
        }

        self._item_ref_id = item_ref_id
        self._operation = operation
        self._options = options
        self._parameters = parameters
        self._target_item_ref_ids = target_item_ref_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_ref_id(self):
        """Gets the item_ref_id of this Rule.

        reference ID for the item the rule applies to.

        :return: The item_ref_id of this Rule.
        :rtype: int
        """
        return self._item_ref_id

    @item_ref_id.setter
    def item_ref_id(self, item_ref_id):
        """Sets the item_ref_id of this Rule.

        reference ID for the item the rule applies to.

        :param item_ref_id: The item_ref_id of this Rule.
        :type item_ref_id: int
        """

        self._item_ref_id = item_ref_id

    @property
    def operation(self):
        """Gets the operation of this Rule.

        Rule type for this definition. Valid operation values include <ul>   <li>     <h3>exclude</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all <b>targetItemRefIds</b></p>     <pre>{   \"operation\": \"exclude\",   \"itemRefId\": 0,   \"targetItemRefIds\": [1,2] }</pre>     </li>   <li>     <h3>exclude-all</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all items without its refId</p>     <pre>{   \"operation\": \"exclude-all\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>pack-as-is</h3>     <p>Each individual item with <b>itemRefId</b> is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.</p>     <pre>{   \"operation\": \"pack-as-is\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>irregular</h3>     <p>There are two types of irregular item packings right now, \"nesting\" and \"roll\".</p>     <ul>       <li>         <h4>\"nesting\"</h4>          <p>\"nesting\" is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,         a flower pot may have dimensions of 6\" x 6\" x 6\", but additional flower pots can nest in the first pot, and have         effective dimensions of 1\" x 6\" x 6\". These cases are almost always have a single direction that nesting can occur         in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must         reflect these restrictions.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"nesting\"</td></tr>           <tr><td>additionalDimensionsX</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsY</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsZ</td><td><i>number</i></td></tr>           <tr><td>nestingOrientation</td><td>0, 1, or 2</td><td>axis index of direction of stacking (0 for vertical/X/\"dinner plates\", 1 for shorter-horizontal/Y/\"shopping carts\", 2 for long-horizontal/Z/\"newsstand magazines\")</td></tr>           <tr><td>nestingLimit</td><td><i>integer</i></td><td>total number of nested items allowed in a single \"stack\"</td></tr>         </table>         <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"nesting\",     \"additionalDimensionsX\": 1.0,     \"additionalDimensionsY\": 6.0,     \"additionalDimensionsZ\": 6.0,     \"nestingOrientation\": 0,     \"nestingLimit\": 5   } }</pre>       </li>       <li>         <h4>\"roll\"</h4>          <p>A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total         length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box         of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,         it will be shipped as if it were a 12\" x 12\" x 60\" item. Rolls can have a maximum allowable diameter, and any rolls that must be         split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"roll\"</td></tr>           <tr><td>innerDiameter</td><td><i>number</i></td><td>the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.</td></tr>           <tr><td>spoolWeight</td><td><i>number</i></td><td>the additional weight of each spool or dowel if applicable</td></tr>           <tr><td>maxDiameter</td><td><i>number</i></td><td>the maximum acceptable diameter of a resultant roll.</td></tr>           <tr><td>maxWeight</td><td><i>number</i></td><td>the maximum acceptable weight of a resultant roll.</td></tr>           <tr><td>minRollLength</td><td><i>number</i></td><td>the minimum length above which rolling will occur. E.g., if less than 12\" remain, ship it flat without rolling.</td></tr>         </table>       <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"roll\",     \"innerDiameter\": 1.0,     \"spoolWeight\": 1.0,     \"maxDiameter\": 8.0,     \"maxWeight\": 150,     \"minRollLength\": 12   } }</pre>       </li>     </ul>   </li>   <li>     <h3>lock-orientation</h3>     <p><b>itemRefId</b> is locked from rotation of its original dimensions, with axes of rotation excepted by <b>freeAxes</b></p>     <p><b>\"options\"</b> contents:</p>        <table>          <tr><th>key</th><th>value</th><th>description</th></tr>          <tr><td>freeAxes</td><td>array</td><td>Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.</td></tr>        </table>     <pre>{   \"operation\": \"lock-orientation\",   \"itemRefId\": 0,   \"options\": {     \"freeAxes\": [0,1]   } }</pre>     </li> </ul> 

        :return: The operation of this Rule.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Rule.

        Rule type for this definition. Valid operation values include <ul>   <li>     <h3>exclude</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all <b>targetItemRefIds</b></p>     <pre>{   \"operation\": \"exclude\",   \"itemRefId\": 0,   \"targetItemRefIds\": [1,2] }</pre>     </li>   <li>     <h3>exclude-all</h3>     <p><b>itemRefId</b> is excluded from being packed in the same carton with all items without its refId</p>     <pre>{   \"operation\": \"exclude-all\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>pack-as-is</h3>     <p>Each individual item with <b>itemRefId</b> is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.</p>     <pre>{   \"operation\": \"pack-as-is\",   \"itemRefId\": 0 }</pre>     </li>   <li>     <h3>irregular</h3>     <p>There are two types of irregular item packings right now, \"nesting\" and \"roll\".</p>     <ul>       <li>         <h4>\"nesting\"</h4>          <p>\"nesting\" is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,         a flower pot may have dimensions of 6\" x 6\" x 6\", but additional flower pots can nest in the first pot, and have         effective dimensions of 1\" x 6\" x 6\". These cases are almost always have a single direction that nesting can occur         in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must         reflect these restrictions.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"nesting\"</td></tr>           <tr><td>additionalDimensionsX</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsY</td><td><i>number</i></td></tr>           <tr><td>additionalDimensionsZ</td><td><i>number</i></td></tr>           <tr><td>nestingOrientation</td><td>0, 1, or 2</td><td>axis index of direction of stacking (0 for vertical/X/\"dinner plates\", 1 for shorter-horizontal/Y/\"shopping carts\", 2 for long-horizontal/Z/\"newsstand magazines\")</td></tr>           <tr><td>nestingLimit</td><td><i>integer</i></td><td>total number of nested items allowed in a single \"stack\"</td></tr>         </table>         <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"nesting\",     \"additionalDimensionsX\": 1.0,     \"additionalDimensionsY\": 6.0,     \"additionalDimensionsZ\": 6.0,     \"nestingOrientation\": 0,     \"nestingLimit\": 5   } }</pre>       </li>       <li>         <h4>\"roll\"</h4>          <p>A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total         length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box         of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,         it will be shipped as if it were a 12\" x 12\" x 60\" item. Rolls can have a maximum allowable diameter, and any rolls that must be         split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.<p/>         <p><b>\"options\"</b> contents:</p>         <table>           <tr><th>key</th><th>value</th><th>description</th></tr>           <tr><td>type</td><td>\"roll\"</td></tr>           <tr><td>innerDiameter</td><td><i>number</i></td><td>the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.</td></tr>           <tr><td>spoolWeight</td><td><i>number</i></td><td>the additional weight of each spool or dowel if applicable</td></tr>           <tr><td>maxDiameter</td><td><i>number</i></td><td>the maximum acceptable diameter of a resultant roll.</td></tr>           <tr><td>maxWeight</td><td><i>number</i></td><td>the maximum acceptable weight of a resultant roll.</td></tr>           <tr><td>minRollLength</td><td><i>number</i></td><td>the minimum length above which rolling will occur. E.g., if less than 12\" remain, ship it flat without rolling.</td></tr>         </table>       <pre>{   \"operation\": \"irregular\",   \"itemRefId\": 0,   \"options\": {     \"type\": \"roll\",     \"innerDiameter\": 1.0,     \"spoolWeight\": 1.0,     \"maxDiameter\": 8.0,     \"maxWeight\": 150,     \"minRollLength\": 12   } }</pre>       </li>     </ul>   </li>   <li>     <h3>lock-orientation</h3>     <p><b>itemRefId</b> is locked from rotation of its original dimensions, with axes of rotation excepted by <b>freeAxes</b></p>     <p><b>\"options\"</b> contents:</p>        <table>          <tr><th>key</th><th>value</th><th>description</th></tr>          <tr><td>freeAxes</td><td>array</td><td>Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.</td></tr>        </table>     <pre>{   \"operation\": \"lock-orientation\",   \"itemRefId\": 0,   \"options\": {     \"freeAxes\": [0,1]   } }</pre>     </li> </ul> 

        :param operation: The operation of this Rule.
        :type operation: str
        """
        allowed_values = ["exclude", "exclude-all", "pack-as-is", "irregular", "lock-orientation"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def options(self):
        """Gets the options of this Rule.

        additional key-value options to pass for rule based on operation type.

        :return: The options of this Rule.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Rule.

        additional key-value options to pass for rule based on operation type.

        :param options: The options of this Rule.
        :type options: object
        """

        self._options = options

    @property
    def parameters(self):
        """Gets the parameters of this Rule.

        array of supplementary parameters to pass for rule, mostly deprecated. may be different from options.

        :return: The parameters of this Rule.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Rule.

        array of supplementary parameters to pass for rule, mostly deprecated. may be different from options.

        :param parameters: The parameters of this Rule.
        :type parameters: List[str]
        """

        self._parameters = parameters

    @property
    def target_item_ref_ids(self):
        """Gets the target_item_ref_ids of this Rule.

        target item reference IDs that the rule applies to.

        :return: The target_item_ref_ids of this Rule.
        :rtype: List[int]
        """
        return self._target_item_ref_ids

    @target_item_ref_ids.setter
    def target_item_ref_ids(self, target_item_ref_ids):
        """Sets the target_item_ref_ids of this Rule.

        target item reference IDs that the rule applies to.

        :param target_item_ref_ids: The target_item_ref_ids of this Rule.
        :type target_item_ref_ids: List[int]
        """

        self._target_item_ref_ids = target_item_ref_ids
