# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point import Point
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, dimensions: Point=None, name: str=None, ref_id: int=None, sequence: str=None, weight: float=None, index: int=None, message: str=None, origin: object=None):
        """Item - a model defined in OpenAPI

        :param color: The color of this Item.
        :param dimensions: The dimensions of this Item.
        :param name: The name of this Item.
        :param ref_id: The ref_id of this Item.
        :param sequence: The sequence of this Item.
        :param weight: The weight of this Item.
        :param index: The index of this Item.
        :param message: The message of this Item.
        :param origin: The origin of this Item.
        """
        self.openapi_types = {
            'color': str,
            'dimensions': Point,
            'name': str,
            'ref_id': int,
            'sequence': str,
            'weight': float,
            'index': int,
            'message': str,
            'origin': object
        }

        self.attribute_map = {
            'color': 'color',
            'dimensions': 'dimensions',
            'name': 'name',
            'ref_id': 'refId',
            'sequence': 'sequence',
            'weight': 'weight',
            'index': 'index',
            'message': 'message',
            'origin': 'origin'
        }

        self._color = color
        self._dimensions = dimensions
        self._name = name
        self._ref_id = ref_id
        self._sequence = sequence
        self._weight = weight
        self._index = index
        self._message = message
        self._origin = origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Item.

        designated color name for the item in pack visualizations.

        :return: The color of this Item.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Item.

        designated color name for the item in pack visualizations.

        :param color: The color of this Item.
        :type color: str
        """

        self._color = color

    @property
    def dimensions(self):
        """Gets the dimensions of this Item.

        the length, width, and height of the item.

        :return: The dimensions of this Item.
        :rtype: Point
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Item.

        the length, width, and height of the item.

        :param dimensions: The dimensions of this Item.
        :type dimensions: Point
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")

        self._dimensions = dimensions

    @property
    def name(self):
        """Gets the name of this Item.

        name or description of item for your reference.

        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.

        name or description of item for your reference.

        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def ref_id(self):
        """Gets the ref_id of this Item.

        item type reference identifier passed backed from request.

        :return: The ref_id of this Item.
        :rtype: int
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Item.

        item type reference identifier passed backed from request.

        :param ref_id: The ref_id of this Item.
        :type ref_id: int
        """

        self._ref_id = ref_id

    @property
    def sequence(self):
        """Gets the sequence of this Item.

        A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be '1120'. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume.

        :return: The sequence of this Item.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Item.

        A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be '1120'. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume.

        :param sequence: The sequence of this Item.
        :type sequence: str
        """

        self._sequence = sequence

    @property
    def weight(self):
        """Gets the weight of this Item.

        weight of this single packed item.

        :return: The weight of this Item.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Item.

        weight of this single packed item.

        :param weight: The weight of this Item.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def index(self):
        """Gets the index of this Item.

        the sequence at which the item was packed.

        :return: The index of this Item.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Item.

        the sequence at which the item was packed.

        :param index: The index of this Item.
        :type index: int
        """

        self._index = index

    @property
    def message(self):
        """Gets the message of this Item.

        any relevant information or warnings about the packing of the item.

        :return: The message of this Item.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Item.

        any relevant information or warnings about the packing of the item.

        :param message: The message of this Item.
        :type message: str
        """

        self._message = message

    @property
    def origin(self):
        """Gets the origin of this Item.

        the [x,y,z] placement point of the back-bottom corner of the item.

        :return: The origin of this Item.
        :rtype: object
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Item.

        the [x,y,z] placement point of the back-bottom corner of the item.

        :param origin: The origin of this Item.
        :type origin: object
        """

        self._origin = origin
