/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedLogConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedLogConfiguration::OAINamedLogConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedLogConfiguration::OAINamedLogConfiguration() {
    this->initializeModel();
}

OAINamedLogConfiguration::~OAINamedLogConfiguration() {}

void OAINamedLogConfiguration::initializeModel() {

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAINamedLogConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedLogConfiguration::fromJsonObject(QJsonObject json) {

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAINamedLogConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedLogConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAILogLevel OAINamedLogConfiguration::getLevel() const {
    return m_level;
}
void OAINamedLogConfiguration::setLevel(const OAILogLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAINamedLogConfiguration::is_level_Set() const{
    return m_level_isSet;
}

bool OAINamedLogConfiguration::is_level_Valid() const{
    return m_level_isValid;
}

QString OAINamedLogConfiguration::getName() const {
    return m_name;
}
void OAINamedLogConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINamedLogConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamedLogConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

bool OAINamedLogConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedLogConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_level_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
