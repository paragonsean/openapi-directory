/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleMapping::OAIRoleMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleMapping::OAIRoleMapping() {
    this->initializeModel();
}

OAIRoleMapping::~OAIRoleMapping() {}

void OAIRoleMapping::initializeModel() {

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_principal_name_isSet = false;
    m_principal_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIRoleMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleMapping::fromJsonObject(QJsonObject json) {

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_principal_name_isValid = ::OpenAPI::fromJsonValue(m_principal_name, json[QString("principalName")]);
    m_principal_name_isSet = !json[QString("principalName")].isNull() && m_principal_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIRoleMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_principal_name_isSet) {
        obj.insert(QString("principalName"), ::OpenAPI::toJsonValue(m_principal_name));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIRoleMapping::getPrincipalId() const {
    return m_principal_id;
}
void OAIRoleMapping::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIRoleMapping::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIRoleMapping::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIRoleMapping::getPrincipalName() const {
    return m_principal_name;
}
void OAIRoleMapping::setPrincipalName(const QString &principal_name) {
    m_principal_name = principal_name;
    m_principal_name_isSet = true;
}

bool OAIRoleMapping::is_principal_name_Set() const{
    return m_principal_name_isSet;
}

bool OAIRoleMapping::is_principal_name_Valid() const{
    return m_principal_name_isValid;
}

OAIRoleType OAIRoleMapping::getRole() const {
    return m_role;
}
void OAIRoleMapping::setRole(const OAIRoleType &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRoleMapping::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRoleMapping::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIRoleMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principal_id_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
