/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtifactRulesApi_H
#define OAI_OAIArtifactRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIRule.h"
#include "OAIRuleType.h"
#include "OAIRuleViolationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtifactRulesApi : public QObject {
    Q_OBJECT

public:
    OAIArtifactRulesApi(const int timeOut = 0);
    ~OAIArtifactRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  oai_rule OAIRule [required]
    */
    virtual void createArtifactRule(const QString &group_id, const QString &artifact_id, const OAIRule &oai_rule);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  rule QString [required]
    */
    virtual void deleteArtifactRule(const QString &group_id, const QString &artifact_id, const QString &rule);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void deleteArtifactRules(const QString &group_id, const QString &artifact_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  rule QString [required]
    */
    virtual void getArtifactRuleConfig(const QString &group_id, const QString &artifact_id, const QString &rule);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void listArtifactRules(const QString &group_id, const QString &artifact_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  body OAIHttpFileElement [required]
    */
    virtual void testUpdateArtifact(const QString &group_id, const QString &artifact_id, const OAIHttpFileElement &body);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  rule QString [required]
    * @param[in]  oai_rule OAIRule [required]
    */
    virtual void updateArtifactRuleConfig(const QString &group_id, const QString &artifact_id, const QString &rule, const OAIRule &oai_rule);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createArtifactRuleCallback(OAIHttpRequestWorker *worker);
    void deleteArtifactRuleCallback(OAIHttpRequestWorker *worker);
    void deleteArtifactRulesCallback(OAIHttpRequestWorker *worker);
    void getArtifactRuleConfigCallback(OAIHttpRequestWorker *worker);
    void listArtifactRulesCallback(OAIHttpRequestWorker *worker);
    void testUpdateArtifactCallback(OAIHttpRequestWorker *worker);
    void updateArtifactRuleConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createArtifactRuleSignal();
    void deleteArtifactRuleSignal();
    void deleteArtifactRulesSignal();
    void getArtifactRuleConfigSignal(OAIRule summary);
    void listArtifactRulesSignal(QList<OAIRuleType> summary);
    void testUpdateArtifactSignal();
    void updateArtifactRuleConfigSignal(OAIRule summary);


    void createArtifactRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteArtifactRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteArtifactRulesSignalFull(OAIHttpRequestWorker *worker);
    void getArtifactRuleConfigSignalFull(OAIHttpRequestWorker *worker, OAIRule summary);
    void listArtifactRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleType> summary);
    void testUpdateArtifactSignalFull(OAIHttpRequestWorker *worker);
    void updateArtifactRuleConfigSignalFull(OAIHttpRequestWorker *worker, OAIRule summary);

    Q_DECL_DEPRECATED_X("Use createArtifactRuleSignalError() instead")
    void createArtifactRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactRuleSignalError() instead")
    void deleteArtifactRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactRulesSignalError() instead")
    void deleteArtifactRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactRuleConfigSignalError() instead")
    void getArtifactRuleConfigSignalE(OAIRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactRuleConfigSignalError(OAIRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactRulesSignalError() instead")
    void listArtifactRulesSignalE(QList<OAIRuleType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactRulesSignalError(QList<OAIRuleType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUpdateArtifactSignalError() instead")
    void testUpdateArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testUpdateArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactRuleConfigSignalError() instead")
    void updateArtifactRuleConfigSignalE(OAIRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactRuleConfigSignalError(OAIRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createArtifactRuleSignalErrorFull() instead")
    void createArtifactRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactRuleSignalErrorFull() instead")
    void deleteArtifactRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactRulesSignalErrorFull() instead")
    void deleteArtifactRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactRuleConfigSignalErrorFull() instead")
    void getArtifactRuleConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactRuleConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactRulesSignalErrorFull() instead")
    void listArtifactRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUpdateArtifactSignalErrorFull() instead")
    void testUpdateArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testUpdateArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactRuleConfigSignalErrorFull() instead")
    void updateArtifactRuleConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactRuleConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
