/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtifactsApi_H
#define OAI_OAIArtifactsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifactContent.h"
#include "OAIArtifactMetaData.h"
#include "OAIArtifactReference.h"
#include "OAIArtifactSearchResults.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIIfExists.h"
#include "OAIRuleViolationError.h"
#include "OAISortBy.h"
#include "OAISortOrder.h"
#include "OAIUpdateState.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtifactsApi : public QObject {
    Q_OBJECT

public:
    OAIArtifactsApi(const int timeOut = 0);
    ~OAIArtifactsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  body OAIHttpFileElement [required]
    * @param[in]  x_registry_artifact_type QString [optional]
    * @param[in]  x_registry_artifact_id QString [optional]
    * @param[in]  x_registry_version QString [optional]
    * @param[in]  if_exists OAIIfExists [optional]
    * @param[in]  canonical bool [optional]
    * @param[in]  x_registry_description QString [optional]
    * @param[in]  x_registry_description_encoded QString [optional]
    * @param[in]  x_registry_name QString [optional]
    * @param[in]  x_registry_name_encoded QString [optional]
    * @param[in]  x_registry_content_hash QString [optional]
    * @param[in]  x_registry_hash_algorithm QString [optional]
    */
    virtual void createArtifact(const QString &group_id, const OAIHttpFileElement &body, const ::OpenAPI::OptionalParam<QString> &x_registry_artifact_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_artifact_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIfExists> &if_exists = ::OpenAPI::OptionalParam<OAIIfExists>(), const ::OpenAPI::OptionalParam<bool> &canonical = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_registry_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_description_encoded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_name_encoded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_content_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_hash_algorithm = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    */
    virtual void deleteArtifact(const QString &group_id, const QString &artifact_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void deleteArtifactsInGroup(const QString &group_id);

    /**
    * @param[in]  global_id qint64 [required]
    * @param[in]  dereference bool [optional]
    */
    virtual void getContentByGlobalId(const qint64 &global_id, const ::OpenAPI::OptionalParam<bool> &dereference = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  content_hash QString [required]
    */
    virtual void getContentByHash(const QString &content_hash);

    /**
    * @param[in]  content_id qint64 [required]
    */
    virtual void getContentById(const qint64 &content_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  dereference bool [optional]
    */
    virtual void getLatestArtifact(const QString &group_id, const QString &artifact_id, const ::OpenAPI::OptionalParam<bool> &dereference = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order OAISortOrder [optional]
    * @param[in]  orderby OAISortBy [optional]
    */
    virtual void listArtifactsInGroup(const QString &group_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISortOrder> &order = ::OpenAPI::OptionalParam<OAISortOrder>(), const ::OpenAPI::OptionalParam<OAISortBy> &orderby = ::OpenAPI::OptionalParam<OAISortBy>());

    /**
    * @param[in]  content_hash QString [required]
    */
    virtual void referencesByContentHash(const QString &content_hash);

    /**
    * @param[in]  content_id qint64 [required]
    */
    virtual void referencesByContentId(const qint64 &content_id);

    /**
    * @param[in]  global_id qint64 [required]
    */
    virtual void referencesByGlobalId(const qint64 &global_id);

    /**
    * @param[in]  body OAIHttpFileElement [required]
    * @param[in]  canonical bool [optional]
    * @param[in]  artifact_type QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void searchArtifactsByContent(const OAIHttpFileElement &body, const ::OpenAPI::OptionalParam<bool> &canonical = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &artifact_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order OAISortOrder [optional]
    * @param[in]  orderby OAISortBy [optional]
    * @param[in]  labels QList<QString> [optional]
    * @param[in]  properties QList<QString> [optional]
    * @param[in]  description QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  global_id qint64 [optional]
    * @param[in]  content_id qint64 [optional]
    */
    virtual void searchArtifacts(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISortOrder> &order = ::OpenAPI::OptionalParam<OAISortOrder>(), const ::OpenAPI::OptionalParam<OAISortBy> &orderby = ::OpenAPI::OptionalParam<OAISortBy>(), const ::OpenAPI::OptionalParam<QList<QString>> &labels = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &global_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &content_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  body OAIHttpFileElement [required]
    * @param[in]  x_registry_version QString [optional]
    * @param[in]  x_registry_name QString [optional]
    * @param[in]  x_registry_name_encoded QString [optional]
    * @param[in]  x_registry_description QString [optional]
    * @param[in]  x_registry_description_encoded QString [optional]
    */
    virtual void updateArtifact(const QString &group_id, const QString &artifact_id, const OAIHttpFileElement &body, const ::OpenAPI::OptionalParam<QString> &x_registry_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_name_encoded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_description_encoded = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  oai_update_state OAIUpdateState [required]
    */
    virtual void updateArtifactState(const QString &group_id, const QString &artifact_id, const OAIUpdateState &oai_update_state);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteArtifactsInGroupCallback(OAIHttpRequestWorker *worker);
    void getContentByGlobalIdCallback(OAIHttpRequestWorker *worker);
    void getContentByHashCallback(OAIHttpRequestWorker *worker);
    void getContentByIdCallback(OAIHttpRequestWorker *worker);
    void getLatestArtifactCallback(OAIHttpRequestWorker *worker);
    void listArtifactsInGroupCallback(OAIHttpRequestWorker *worker);
    void referencesByContentHashCallback(OAIHttpRequestWorker *worker);
    void referencesByContentIdCallback(OAIHttpRequestWorker *worker);
    void referencesByGlobalIdCallback(OAIHttpRequestWorker *worker);
    void searchArtifactsByContentCallback(OAIHttpRequestWorker *worker);
    void searchArtifactsCallback(OAIHttpRequestWorker *worker);
    void updateArtifactCallback(OAIHttpRequestWorker *worker);
    void updateArtifactStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createArtifactSignal(OAIArtifactMetaData summary);
    void deleteArtifactSignal();
    void deleteArtifactsInGroupSignal();
    void getContentByGlobalIdSignal(OAIHttpFileElement summary);
    void getContentByHashSignal(OAIHttpFileElement summary);
    void getContentByIdSignal(OAIHttpFileElement summary);
    void getLatestArtifactSignal(OAIHttpFileElement summary);
    void listArtifactsInGroupSignal(OAIArtifactSearchResults summary);
    void referencesByContentHashSignal(QList<OAIArtifactReference> summary);
    void referencesByContentIdSignal(QList<OAIArtifactReference> summary);
    void referencesByGlobalIdSignal(QList<OAIArtifactReference> summary);
    void searchArtifactsByContentSignal(OAIArtifactSearchResults summary);
    void searchArtifactsSignal(OAIArtifactSearchResults summary);
    void updateArtifactSignal(OAIArtifactMetaData summary);
    void updateArtifactStateSignal();


    void createArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifactMetaData summary);
    void deleteArtifactSignalFull(OAIHttpRequestWorker *worker);
    void deleteArtifactsInGroupSignalFull(OAIHttpRequestWorker *worker);
    void getContentByGlobalIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContentByHashSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContentByIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getLatestArtifactSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void listArtifactsInGroupSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSearchResults summary);
    void referencesByContentHashSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifactReference> summary);
    void referencesByContentIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifactReference> summary);
    void referencesByGlobalIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifactReference> summary);
    void searchArtifactsByContentSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSearchResults summary);
    void searchArtifactsSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSearchResults summary);
    void updateArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifactMetaData summary);
    void updateArtifactStateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createArtifactSignalError() instead")
    void createArtifactSignalE(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactSignalError(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactSignalError() instead")
    void deleteArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactsInGroupSignalError() instead")
    void deleteArtifactsInGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactsInGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentByGlobalIdSignalError() instead")
    void getContentByGlobalIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentByGlobalIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentByHashSignalError() instead")
    void getContentByHashSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentByHashSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentByIdSignalError() instead")
    void getContentByIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentByIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestArtifactSignalError() instead")
    void getLatestArtifactSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestArtifactSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactsInGroupSignalError() instead")
    void listArtifactsInGroupSignalE(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactsInGroupSignalError(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesByContentHashSignalError() instead")
    void referencesByContentHashSignalE(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesByContentHashSignalError(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesByContentIdSignalError() instead")
    void referencesByContentIdSignalE(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesByContentIdSignalError(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesByGlobalIdSignalError() instead")
    void referencesByGlobalIdSignalE(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesByGlobalIdSignalError(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchArtifactsByContentSignalError() instead")
    void searchArtifactsByContentSignalE(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchArtifactsByContentSignalError(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchArtifactsSignalError() instead")
    void searchArtifactsSignalE(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchArtifactsSignalError(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactSignalError() instead")
    void updateArtifactSignalE(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactSignalError(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactStateSignalError() instead")
    void updateArtifactStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createArtifactSignalErrorFull() instead")
    void createArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactSignalErrorFull() instead")
    void deleteArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactsInGroupSignalErrorFull() instead")
    void deleteArtifactsInGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactsInGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentByGlobalIdSignalErrorFull() instead")
    void getContentByGlobalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentByGlobalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentByHashSignalErrorFull() instead")
    void getContentByHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentByHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentByIdSignalErrorFull() instead")
    void getContentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestArtifactSignalErrorFull() instead")
    void getLatestArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactsInGroupSignalErrorFull() instead")
    void listArtifactsInGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactsInGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesByContentHashSignalErrorFull() instead")
    void referencesByContentHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesByContentHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesByContentIdSignalErrorFull() instead")
    void referencesByContentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesByContentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesByGlobalIdSignalErrorFull() instead")
    void referencesByGlobalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesByGlobalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchArtifactsByContentSignalErrorFull() instead")
    void searchArtifactsByContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchArtifactsByContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchArtifactsSignalErrorFull() instead")
    void searchArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactSignalErrorFull() instead")
    void updateArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactStateSignalErrorFull() instead")
    void updateArtifactStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
