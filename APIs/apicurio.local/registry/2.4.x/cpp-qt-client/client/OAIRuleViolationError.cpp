/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleViolationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleViolationError::OAIRuleViolationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleViolationError::OAIRuleViolationError() {
    this->initializeModel();
}

OAIRuleViolationError::~OAIRuleViolationError() {}

void OAIRuleViolationError::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_causes_isSet = false;
    m_causes_isValid = false;
}

void OAIRuleViolationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleViolationError::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_causes_isValid = ::OpenAPI::fromJsonValue(m_causes, json[QString("causes")]);
    m_causes_isSet = !json[QString("causes")].isNull() && m_causes_isValid;
}

QString OAIRuleViolationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleViolationError::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_causes.size() > 0) {
        obj.insert(QString("causes"), ::OpenAPI::toJsonValue(m_causes));
    }
    return obj;
}

QString OAIRuleViolationError::getDetail() const {
    return m_detail;
}
void OAIRuleViolationError::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIRuleViolationError::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIRuleViolationError::is_detail_Valid() const{
    return m_detail_isValid;
}

qint32 OAIRuleViolationError::getErrorCode() const {
    return m_error_code;
}
void OAIRuleViolationError::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIRuleViolationError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIRuleViolationError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIRuleViolationError::getMessage() const {
    return m_message;
}
void OAIRuleViolationError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRuleViolationError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRuleViolationError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIRuleViolationError::getName() const {
    return m_name;
}
void OAIRuleViolationError::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRuleViolationError::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRuleViolationError::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRuleViolationCause> OAIRuleViolationError::getCauses() const {
    return m_causes;
}
void OAIRuleViolationError::setCauses(const QList<OAIRuleViolationCause> &causes) {
    m_causes = causes;
    m_causes_isSet = true;
}

bool OAIRuleViolationError::is_causes_Set() const{
    return m_causes_isSet;
}

bool OAIRuleViolationError::is_causes_Valid() const{
    return m_causes_isValid;
}

bool OAIRuleViolationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_causes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleViolationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_causes_isValid && true;
}

} // namespace OpenAPI
