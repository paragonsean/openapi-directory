/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILimits::OAILimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILimits::OAILimits() {
    this->initializeModel();
}

OAILimits::~OAILimits() {}

void OAILimits::initializeModel() {

    m_max_artifact_description_length_chars_isSet = false;
    m_max_artifact_description_length_chars_isValid = false;

    m_max_artifact_labels_count_isSet = false;
    m_max_artifact_labels_count_isValid = false;

    m_max_artifact_name_length_chars_isSet = false;
    m_max_artifact_name_length_chars_isValid = false;

    m_max_artifact_properties_count_isSet = false;
    m_max_artifact_properties_count_isValid = false;

    m_max_artifacts_count_isSet = false;
    m_max_artifacts_count_isValid = false;

    m_max_label_size_bytes_isSet = false;
    m_max_label_size_bytes_isValid = false;

    m_max_property_key_size_bytes_isSet = false;
    m_max_property_key_size_bytes_isValid = false;

    m_max_property_value_size_bytes_isSet = false;
    m_max_property_value_size_bytes_isValid = false;

    m_max_requests_per_second_count_isSet = false;
    m_max_requests_per_second_count_isValid = false;

    m_max_schema_size_bytes_isSet = false;
    m_max_schema_size_bytes_isValid = false;

    m_max_total_schemas_count_isSet = false;
    m_max_total_schemas_count_isValid = false;

    m_max_versions_per_artifact_count_isSet = false;
    m_max_versions_per_artifact_count_isValid = false;
}

void OAILimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILimits::fromJsonObject(QJsonObject json) {

    m_max_artifact_description_length_chars_isValid = ::OpenAPI::fromJsonValue(m_max_artifact_description_length_chars, json[QString("maxArtifactDescriptionLengthChars")]);
    m_max_artifact_description_length_chars_isSet = !json[QString("maxArtifactDescriptionLengthChars")].isNull() && m_max_artifact_description_length_chars_isValid;

    m_max_artifact_labels_count_isValid = ::OpenAPI::fromJsonValue(m_max_artifact_labels_count, json[QString("maxArtifactLabelsCount")]);
    m_max_artifact_labels_count_isSet = !json[QString("maxArtifactLabelsCount")].isNull() && m_max_artifact_labels_count_isValid;

    m_max_artifact_name_length_chars_isValid = ::OpenAPI::fromJsonValue(m_max_artifact_name_length_chars, json[QString("maxArtifactNameLengthChars")]);
    m_max_artifact_name_length_chars_isSet = !json[QString("maxArtifactNameLengthChars")].isNull() && m_max_artifact_name_length_chars_isValid;

    m_max_artifact_properties_count_isValid = ::OpenAPI::fromJsonValue(m_max_artifact_properties_count, json[QString("maxArtifactPropertiesCount")]);
    m_max_artifact_properties_count_isSet = !json[QString("maxArtifactPropertiesCount")].isNull() && m_max_artifact_properties_count_isValid;

    m_max_artifacts_count_isValid = ::OpenAPI::fromJsonValue(m_max_artifacts_count, json[QString("maxArtifactsCount")]);
    m_max_artifacts_count_isSet = !json[QString("maxArtifactsCount")].isNull() && m_max_artifacts_count_isValid;

    m_max_label_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_label_size_bytes, json[QString("maxLabelSizeBytes")]);
    m_max_label_size_bytes_isSet = !json[QString("maxLabelSizeBytes")].isNull() && m_max_label_size_bytes_isValid;

    m_max_property_key_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_property_key_size_bytes, json[QString("maxPropertyKeySizeBytes")]);
    m_max_property_key_size_bytes_isSet = !json[QString("maxPropertyKeySizeBytes")].isNull() && m_max_property_key_size_bytes_isValid;

    m_max_property_value_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_property_value_size_bytes, json[QString("maxPropertyValueSizeBytes")]);
    m_max_property_value_size_bytes_isSet = !json[QString("maxPropertyValueSizeBytes")].isNull() && m_max_property_value_size_bytes_isValid;

    m_max_requests_per_second_count_isValid = ::OpenAPI::fromJsonValue(m_max_requests_per_second_count, json[QString("maxRequestsPerSecondCount")]);
    m_max_requests_per_second_count_isSet = !json[QString("maxRequestsPerSecondCount")].isNull() && m_max_requests_per_second_count_isValid;

    m_max_schema_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_schema_size_bytes, json[QString("maxSchemaSizeBytes")]);
    m_max_schema_size_bytes_isSet = !json[QString("maxSchemaSizeBytes")].isNull() && m_max_schema_size_bytes_isValid;

    m_max_total_schemas_count_isValid = ::OpenAPI::fromJsonValue(m_max_total_schemas_count, json[QString("maxTotalSchemasCount")]);
    m_max_total_schemas_count_isSet = !json[QString("maxTotalSchemasCount")].isNull() && m_max_total_schemas_count_isValid;

    m_max_versions_per_artifact_count_isValid = ::OpenAPI::fromJsonValue(m_max_versions_per_artifact_count, json[QString("maxVersionsPerArtifactCount")]);
    m_max_versions_per_artifact_count_isSet = !json[QString("maxVersionsPerArtifactCount")].isNull() && m_max_versions_per_artifact_count_isValid;
}

QString OAILimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILimits::asJsonObject() const {
    QJsonObject obj;
    if (m_max_artifact_description_length_chars_isSet) {
        obj.insert(QString("maxArtifactDescriptionLengthChars"), ::OpenAPI::toJsonValue(m_max_artifact_description_length_chars));
    }
    if (m_max_artifact_labels_count_isSet) {
        obj.insert(QString("maxArtifactLabelsCount"), ::OpenAPI::toJsonValue(m_max_artifact_labels_count));
    }
    if (m_max_artifact_name_length_chars_isSet) {
        obj.insert(QString("maxArtifactNameLengthChars"), ::OpenAPI::toJsonValue(m_max_artifact_name_length_chars));
    }
    if (m_max_artifact_properties_count_isSet) {
        obj.insert(QString("maxArtifactPropertiesCount"), ::OpenAPI::toJsonValue(m_max_artifact_properties_count));
    }
    if (m_max_artifacts_count_isSet) {
        obj.insert(QString("maxArtifactsCount"), ::OpenAPI::toJsonValue(m_max_artifacts_count));
    }
    if (m_max_label_size_bytes_isSet) {
        obj.insert(QString("maxLabelSizeBytes"), ::OpenAPI::toJsonValue(m_max_label_size_bytes));
    }
    if (m_max_property_key_size_bytes_isSet) {
        obj.insert(QString("maxPropertyKeySizeBytes"), ::OpenAPI::toJsonValue(m_max_property_key_size_bytes));
    }
    if (m_max_property_value_size_bytes_isSet) {
        obj.insert(QString("maxPropertyValueSizeBytes"), ::OpenAPI::toJsonValue(m_max_property_value_size_bytes));
    }
    if (m_max_requests_per_second_count_isSet) {
        obj.insert(QString("maxRequestsPerSecondCount"), ::OpenAPI::toJsonValue(m_max_requests_per_second_count));
    }
    if (m_max_schema_size_bytes_isSet) {
        obj.insert(QString("maxSchemaSizeBytes"), ::OpenAPI::toJsonValue(m_max_schema_size_bytes));
    }
    if (m_max_total_schemas_count_isSet) {
        obj.insert(QString("maxTotalSchemasCount"), ::OpenAPI::toJsonValue(m_max_total_schemas_count));
    }
    if (m_max_versions_per_artifact_count_isSet) {
        obj.insert(QString("maxVersionsPerArtifactCount"), ::OpenAPI::toJsonValue(m_max_versions_per_artifact_count));
    }
    return obj;
}

qint64 OAILimits::getMaxArtifactDescriptionLengthChars() const {
    return m_max_artifact_description_length_chars;
}
void OAILimits::setMaxArtifactDescriptionLengthChars(const qint64 &max_artifact_description_length_chars) {
    m_max_artifact_description_length_chars = max_artifact_description_length_chars;
    m_max_artifact_description_length_chars_isSet = true;
}

bool OAILimits::is_max_artifact_description_length_chars_Set() const{
    return m_max_artifact_description_length_chars_isSet;
}

bool OAILimits::is_max_artifact_description_length_chars_Valid() const{
    return m_max_artifact_description_length_chars_isValid;
}

qint64 OAILimits::getMaxArtifactLabelsCount() const {
    return m_max_artifact_labels_count;
}
void OAILimits::setMaxArtifactLabelsCount(const qint64 &max_artifact_labels_count) {
    m_max_artifact_labels_count = max_artifact_labels_count;
    m_max_artifact_labels_count_isSet = true;
}

bool OAILimits::is_max_artifact_labels_count_Set() const{
    return m_max_artifact_labels_count_isSet;
}

bool OAILimits::is_max_artifact_labels_count_Valid() const{
    return m_max_artifact_labels_count_isValid;
}

qint64 OAILimits::getMaxArtifactNameLengthChars() const {
    return m_max_artifact_name_length_chars;
}
void OAILimits::setMaxArtifactNameLengthChars(const qint64 &max_artifact_name_length_chars) {
    m_max_artifact_name_length_chars = max_artifact_name_length_chars;
    m_max_artifact_name_length_chars_isSet = true;
}

bool OAILimits::is_max_artifact_name_length_chars_Set() const{
    return m_max_artifact_name_length_chars_isSet;
}

bool OAILimits::is_max_artifact_name_length_chars_Valid() const{
    return m_max_artifact_name_length_chars_isValid;
}

qint64 OAILimits::getMaxArtifactPropertiesCount() const {
    return m_max_artifact_properties_count;
}
void OAILimits::setMaxArtifactPropertiesCount(const qint64 &max_artifact_properties_count) {
    m_max_artifact_properties_count = max_artifact_properties_count;
    m_max_artifact_properties_count_isSet = true;
}

bool OAILimits::is_max_artifact_properties_count_Set() const{
    return m_max_artifact_properties_count_isSet;
}

bool OAILimits::is_max_artifact_properties_count_Valid() const{
    return m_max_artifact_properties_count_isValid;
}

qint64 OAILimits::getMaxArtifactsCount() const {
    return m_max_artifacts_count;
}
void OAILimits::setMaxArtifactsCount(const qint64 &max_artifacts_count) {
    m_max_artifacts_count = max_artifacts_count;
    m_max_artifacts_count_isSet = true;
}

bool OAILimits::is_max_artifacts_count_Set() const{
    return m_max_artifacts_count_isSet;
}

bool OAILimits::is_max_artifacts_count_Valid() const{
    return m_max_artifacts_count_isValid;
}

qint64 OAILimits::getMaxLabelSizeBytes() const {
    return m_max_label_size_bytes;
}
void OAILimits::setMaxLabelSizeBytes(const qint64 &max_label_size_bytes) {
    m_max_label_size_bytes = max_label_size_bytes;
    m_max_label_size_bytes_isSet = true;
}

bool OAILimits::is_max_label_size_bytes_Set() const{
    return m_max_label_size_bytes_isSet;
}

bool OAILimits::is_max_label_size_bytes_Valid() const{
    return m_max_label_size_bytes_isValid;
}

qint64 OAILimits::getMaxPropertyKeySizeBytes() const {
    return m_max_property_key_size_bytes;
}
void OAILimits::setMaxPropertyKeySizeBytes(const qint64 &max_property_key_size_bytes) {
    m_max_property_key_size_bytes = max_property_key_size_bytes;
    m_max_property_key_size_bytes_isSet = true;
}

bool OAILimits::is_max_property_key_size_bytes_Set() const{
    return m_max_property_key_size_bytes_isSet;
}

bool OAILimits::is_max_property_key_size_bytes_Valid() const{
    return m_max_property_key_size_bytes_isValid;
}

qint64 OAILimits::getMaxPropertyValueSizeBytes() const {
    return m_max_property_value_size_bytes;
}
void OAILimits::setMaxPropertyValueSizeBytes(const qint64 &max_property_value_size_bytes) {
    m_max_property_value_size_bytes = max_property_value_size_bytes;
    m_max_property_value_size_bytes_isSet = true;
}

bool OAILimits::is_max_property_value_size_bytes_Set() const{
    return m_max_property_value_size_bytes_isSet;
}

bool OAILimits::is_max_property_value_size_bytes_Valid() const{
    return m_max_property_value_size_bytes_isValid;
}

qint64 OAILimits::getMaxRequestsPerSecondCount() const {
    return m_max_requests_per_second_count;
}
void OAILimits::setMaxRequestsPerSecondCount(const qint64 &max_requests_per_second_count) {
    m_max_requests_per_second_count = max_requests_per_second_count;
    m_max_requests_per_second_count_isSet = true;
}

bool OAILimits::is_max_requests_per_second_count_Set() const{
    return m_max_requests_per_second_count_isSet;
}

bool OAILimits::is_max_requests_per_second_count_Valid() const{
    return m_max_requests_per_second_count_isValid;
}

qint64 OAILimits::getMaxSchemaSizeBytes() const {
    return m_max_schema_size_bytes;
}
void OAILimits::setMaxSchemaSizeBytes(const qint64 &max_schema_size_bytes) {
    m_max_schema_size_bytes = max_schema_size_bytes;
    m_max_schema_size_bytes_isSet = true;
}

bool OAILimits::is_max_schema_size_bytes_Set() const{
    return m_max_schema_size_bytes_isSet;
}

bool OAILimits::is_max_schema_size_bytes_Valid() const{
    return m_max_schema_size_bytes_isValid;
}

qint64 OAILimits::getMaxTotalSchemasCount() const {
    return m_max_total_schemas_count;
}
void OAILimits::setMaxTotalSchemasCount(const qint64 &max_total_schemas_count) {
    m_max_total_schemas_count = max_total_schemas_count;
    m_max_total_schemas_count_isSet = true;
}

bool OAILimits::is_max_total_schemas_count_Set() const{
    return m_max_total_schemas_count_isSet;
}

bool OAILimits::is_max_total_schemas_count_Valid() const{
    return m_max_total_schemas_count_isValid;
}

qint64 OAILimits::getMaxVersionsPerArtifactCount() const {
    return m_max_versions_per_artifact_count;
}
void OAILimits::setMaxVersionsPerArtifactCount(const qint64 &max_versions_per_artifact_count) {
    m_max_versions_per_artifact_count = max_versions_per_artifact_count;
    m_max_versions_per_artifact_count_isSet = true;
}

bool OAILimits::is_max_versions_per_artifact_count_Set() const{
    return m_max_versions_per_artifact_count_isSet;
}

bool OAILimits::is_max_versions_per_artifact_count_Valid() const{
    return m_max_versions_per_artifact_count_isValid;
}

bool OAILimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_artifact_description_length_chars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_artifact_labels_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_artifact_name_length_chars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_artifact_properties_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_artifacts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_label_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_property_key_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_property_value_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_requests_per_second_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_schema_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_total_schemas_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_versions_per_artifact_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
