/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminApi_H
#define OAI_OAIAdminApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifactTypeInfo.h"
#include "OAIConfigurationProperty.h"
#include "OAIDownloadRef.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAILogConfiguration.h"
#include "OAINamedLogConfiguration.h"
#include "OAIRoleMapping.h"
#include "OAIRule.h"
#include "OAIRuleType.h"
#include "OAIUpdateConfigurationProperty.h"
#include "OAIUpdateRole.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminApi : public QObject {
    Q_OBJECT

public:
    OAIAdminApi(const int timeOut = 0);
    ~OAIAdminApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_rule OAIRule [required]
    */
    virtual void createGlobalRule(const OAIRule &oai_rule);

    /**
    * @param[in]  oai_role_mapping OAIRoleMapping [required]
    */
    virtual void createRoleMapping(const OAIRoleMapping &oai_role_mapping);


    virtual void deleteAllGlobalRules();

    /**
    * @param[in]  rule OAIRuleType [required]
    */
    virtual void deleteGlobalRule(const OAIRuleType &rule);

    /**
    * @param[in]  principal_id QString [required]
    */
    virtual void deleteRoleMapping(const QString &principal_id);

    /**
    * @param[in]  for_browser bool [optional]
    */
    virtual void exportData(const ::OpenAPI::OptionalParam<bool> &for_browser = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  property_name QString [required]
    */
    virtual void getConfigProperty(const QString &property_name);

    /**
    * @param[in]  rule OAIRuleType [required]
    */
    virtual void getGlobalRuleConfig(const OAIRuleType &rule);

    /**
    * @param[in]  logger QString [required]
    */
    virtual void getLogConfiguration(const QString &logger);

    /**
    * @param[in]  principal_id QString [required]
    */
    virtual void getRoleMapping(const QString &principal_id);

    /**
    * @param[in]  body OAIHttpFileElement [required]
    * @param[in]  x_registry_preserve_global_id bool [optional]
    * @param[in]  x_registry_preserve_content_id bool [optional]
    */
    virtual void importData(const OAIHttpFileElement &body, const ::OpenAPI::OptionalParam<bool> &x_registry_preserve_global_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &x_registry_preserve_content_id = ::OpenAPI::OptionalParam<bool>());


    virtual void listArtifactTypes();


    virtual void listConfigProperties();


    virtual void listGlobalRules();


    virtual void listLogConfigurations();


    virtual void listRoleMappings();

    /**
    * @param[in]  logger QString [required]
    */
    virtual void removeLogConfiguration(const QString &logger);

    /**
    * @param[in]  property_name QString [required]
    */
    virtual void resetConfigProperty(const QString &property_name);

    /**
    * @param[in]  logger QString [required]
    * @param[in]  oai_log_configuration OAILogConfiguration [required]
    */
    virtual void setLogConfiguration(const QString &logger, const OAILogConfiguration &oai_log_configuration);

    /**
    * @param[in]  property_name QString [required]
    * @param[in]  oai_update_configuration_property OAIUpdateConfigurationProperty [required]
    */
    virtual void updateConfigProperty(const QString &property_name, const OAIUpdateConfigurationProperty &oai_update_configuration_property);

    /**
    * @param[in]  rule OAIRuleType [required]
    * @param[in]  oai_rule OAIRule [required]
    */
    virtual void updateGlobalRuleConfig(const OAIRuleType &rule, const OAIRule &oai_rule);

    /**
    * @param[in]  principal_id QString [required]
    * @param[in]  oai_update_role OAIUpdateRole [required]
    */
    virtual void updateRoleMapping(const QString &principal_id, const OAIUpdateRole &oai_update_role);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGlobalRuleCallback(OAIHttpRequestWorker *worker);
    void createRoleMappingCallback(OAIHttpRequestWorker *worker);
    void deleteAllGlobalRulesCallback(OAIHttpRequestWorker *worker);
    void deleteGlobalRuleCallback(OAIHttpRequestWorker *worker);
    void deleteRoleMappingCallback(OAIHttpRequestWorker *worker);
    void exportDataCallback(OAIHttpRequestWorker *worker);
    void getConfigPropertyCallback(OAIHttpRequestWorker *worker);
    void getGlobalRuleConfigCallback(OAIHttpRequestWorker *worker);
    void getLogConfigurationCallback(OAIHttpRequestWorker *worker);
    void getRoleMappingCallback(OAIHttpRequestWorker *worker);
    void importDataCallback(OAIHttpRequestWorker *worker);
    void listArtifactTypesCallback(OAIHttpRequestWorker *worker);
    void listConfigPropertiesCallback(OAIHttpRequestWorker *worker);
    void listGlobalRulesCallback(OAIHttpRequestWorker *worker);
    void listLogConfigurationsCallback(OAIHttpRequestWorker *worker);
    void listRoleMappingsCallback(OAIHttpRequestWorker *worker);
    void removeLogConfigurationCallback(OAIHttpRequestWorker *worker);
    void resetConfigPropertyCallback(OAIHttpRequestWorker *worker);
    void setLogConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateConfigPropertyCallback(OAIHttpRequestWorker *worker);
    void updateGlobalRuleConfigCallback(OAIHttpRequestWorker *worker);
    void updateRoleMappingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGlobalRuleSignal();
    void createRoleMappingSignal();
    void deleteAllGlobalRulesSignal();
    void deleteGlobalRuleSignal();
    void deleteRoleMappingSignal();
    void exportDataSignal(OAIDownloadRef summary);
    void getConfigPropertySignal(OAIConfigurationProperty summary);
    void getGlobalRuleConfigSignal(OAIRule summary);
    void getLogConfigurationSignal(OAINamedLogConfiguration summary);
    void getRoleMappingSignal(OAIRoleMapping summary);
    void importDataSignal();
    void listArtifactTypesSignal(QList<OAIArtifactTypeInfo> summary);
    void listConfigPropertiesSignal(QList<OAIConfigurationProperty> summary);
    void listGlobalRulesSignal(QList<OAIRuleType> summary);
    void listLogConfigurationsSignal(QList<OAINamedLogConfiguration> summary);
    void listRoleMappingsSignal(QList<OAIRoleMapping> summary);
    void removeLogConfigurationSignal(OAINamedLogConfiguration summary);
    void resetConfigPropertySignal();
    void setLogConfigurationSignal(OAINamedLogConfiguration summary);
    void updateConfigPropertySignal();
    void updateGlobalRuleConfigSignal(OAIRule summary);
    void updateRoleMappingSignal();


    void createGlobalRuleSignalFull(OAIHttpRequestWorker *worker);
    void createRoleMappingSignalFull(OAIHttpRequestWorker *worker);
    void deleteAllGlobalRulesSignalFull(OAIHttpRequestWorker *worker);
    void deleteGlobalRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteRoleMappingSignalFull(OAIHttpRequestWorker *worker);
    void exportDataSignalFull(OAIHttpRequestWorker *worker, OAIDownloadRef summary);
    void getConfigPropertySignalFull(OAIHttpRequestWorker *worker, OAIConfigurationProperty summary);
    void getGlobalRuleConfigSignalFull(OAIHttpRequestWorker *worker, OAIRule summary);
    void getLogConfigurationSignalFull(OAIHttpRequestWorker *worker, OAINamedLogConfiguration summary);
    void getRoleMappingSignalFull(OAIHttpRequestWorker *worker, OAIRoleMapping summary);
    void importDataSignalFull(OAIHttpRequestWorker *worker);
    void listArtifactTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifactTypeInfo> summary);
    void listConfigPropertiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIConfigurationProperty> summary);
    void listGlobalRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleType> summary);
    void listLogConfigurationsSignalFull(OAIHttpRequestWorker *worker, QList<OAINamedLogConfiguration> summary);
    void listRoleMappingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleMapping> summary);
    void removeLogConfigurationSignalFull(OAIHttpRequestWorker *worker, OAINamedLogConfiguration summary);
    void resetConfigPropertySignalFull(OAIHttpRequestWorker *worker);
    void setLogConfigurationSignalFull(OAIHttpRequestWorker *worker, OAINamedLogConfiguration summary);
    void updateConfigPropertySignalFull(OAIHttpRequestWorker *worker);
    void updateGlobalRuleConfigSignalFull(OAIHttpRequestWorker *worker, OAIRule summary);
    void updateRoleMappingSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createGlobalRuleSignalError() instead")
    void createGlobalRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createGlobalRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoleMappingSignalError() instead")
    void createRoleMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllGlobalRulesSignalError() instead")
    void deleteAllGlobalRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllGlobalRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlobalRuleSignalError() instead")
    void deleteGlobalRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleMappingSignalError() instead")
    void deleteRoleMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDataSignalError() instead")
    void exportDataSignalE(OAIDownloadRef summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDataSignalError(OAIDownloadRef summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigPropertySignalError() instead")
    void getConfigPropertySignalE(OAIConfigurationProperty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigPropertySignalError(OAIConfigurationProperty summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalRuleConfigSignalError() instead")
    void getGlobalRuleConfigSignalE(OAIRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalRuleConfigSignalError(OAIRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLogConfigurationSignalError() instead")
    void getLogConfigurationSignalE(OAINamedLogConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLogConfigurationSignalError(OAINamedLogConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoleMappingSignalError() instead")
    void getRoleMappingSignalE(OAIRoleMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoleMappingSignalError(OAIRoleMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importDataSignalError() instead")
    void importDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactTypesSignalError() instead")
    void listArtifactTypesSignalE(QList<OAIArtifactTypeInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactTypesSignalError(QList<OAIArtifactTypeInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConfigPropertiesSignalError() instead")
    void listConfigPropertiesSignalE(QList<OAIConfigurationProperty> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConfigPropertiesSignalError(QList<OAIConfigurationProperty> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGlobalRulesSignalError() instead")
    void listGlobalRulesSignalE(QList<OAIRuleType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGlobalRulesSignalError(QList<OAIRuleType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLogConfigurationsSignalError() instead")
    void listLogConfigurationsSignalE(QList<OAINamedLogConfiguration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLogConfigurationsSignalError(QList<OAINamedLogConfiguration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoleMappingsSignalError() instead")
    void listRoleMappingsSignalE(QList<OAIRoleMapping> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoleMappingsSignalError(QList<OAIRoleMapping> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeLogConfigurationSignalError() instead")
    void removeLogConfigurationSignalE(OAINamedLogConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLogConfigurationSignalError(OAINamedLogConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetConfigPropertySignalError() instead")
    void resetConfigPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetConfigPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLogConfigurationSignalError() instead")
    void setLogConfigurationSignalE(OAINamedLogConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setLogConfigurationSignalError(OAINamedLogConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigPropertySignalError() instead")
    void updateConfigPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalRuleConfigSignalError() instead")
    void updateGlobalRuleConfigSignalE(OAIRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalRuleConfigSignalError(OAIRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoleMappingSignalError() instead")
    void updateRoleMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGlobalRuleSignalErrorFull() instead")
    void createGlobalRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGlobalRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoleMappingSignalErrorFull() instead")
    void createRoleMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllGlobalRulesSignalErrorFull() instead")
    void deleteAllGlobalRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllGlobalRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlobalRuleSignalErrorFull() instead")
    void deleteGlobalRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleMappingSignalErrorFull() instead")
    void deleteRoleMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDataSignalErrorFull() instead")
    void exportDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigPropertySignalErrorFull() instead")
    void getConfigPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalRuleConfigSignalErrorFull() instead")
    void getGlobalRuleConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalRuleConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLogConfigurationSignalErrorFull() instead")
    void getLogConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLogConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoleMappingSignalErrorFull() instead")
    void getRoleMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoleMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importDataSignalErrorFull() instead")
    void importDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactTypesSignalErrorFull() instead")
    void listArtifactTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConfigPropertiesSignalErrorFull() instead")
    void listConfigPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConfigPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGlobalRulesSignalErrorFull() instead")
    void listGlobalRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGlobalRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLogConfigurationsSignalErrorFull() instead")
    void listLogConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLogConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoleMappingsSignalErrorFull() instead")
    void listRoleMappingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoleMappingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeLogConfigurationSignalErrorFull() instead")
    void removeLogConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLogConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetConfigPropertySignalErrorFull() instead")
    void resetConfigPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetConfigPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLogConfigurationSignalErrorFull() instead")
    void setLogConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setLogConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigPropertySignalErrorFull() instead")
    void updateConfigPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalRuleConfigSignalErrorFull() instead")
    void updateGlobalRuleConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalRuleConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoleMappingSignalErrorFull() instead")
    void updateRoleMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
