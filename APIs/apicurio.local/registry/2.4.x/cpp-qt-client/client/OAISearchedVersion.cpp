/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchedVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchedVersion::OAISearchedVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchedVersion::OAISearchedVersion() {
    this->initializeModel();
}

OAISearchedVersion::~OAISearchedVersion() {}

void OAISearchedVersion::initializeModel() {

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_global_id_isSet = false;
    m_global_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISearchedVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchedVersion::fromJsonObject(QJsonObject json) {

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("contentId")]);
    m_content_id_isSet = !json[QString("contentId")].isNull() && m_content_id_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_global_id_isValid = ::OpenAPI::fromJsonValue(m_global_id, json[QString("globalId")]);
    m_global_id_isSet = !json[QString("globalId")].isNull() && m_global_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISearchedVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchedVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_content_id_isSet) {
        obj.insert(QString("contentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_global_id_isSet) {
        obj.insert(QString("globalId"), ::OpenAPI::toJsonValue(m_global_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint64 OAISearchedVersion::getContentId() const {
    return m_content_id;
}
void OAISearchedVersion::setContentId(const qint64 &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAISearchedVersion::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAISearchedVersion::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAISearchedVersion::getCreatedBy() const {
    return m_created_by;
}
void OAISearchedVersion::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISearchedVersion::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISearchedVersion::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAISearchedVersion::getCreatedOn() const {
    return m_created_on;
}
void OAISearchedVersion::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAISearchedVersion::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAISearchedVersion::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAISearchedVersion::getDescription() const {
    return m_description;
}
void OAISearchedVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchedVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchedVersion::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAISearchedVersion::getGlobalId() const {
    return m_global_id;
}
void OAISearchedVersion::setGlobalId(const qint64 &global_id) {
    m_global_id = global_id;
    m_global_id_isSet = true;
}

bool OAISearchedVersion::is_global_id_Set() const{
    return m_global_id_isSet;
}

bool OAISearchedVersion::is_global_id_Valid() const{
    return m_global_id_isValid;
}

QList<QString> OAISearchedVersion::getLabels() const {
    return m_labels;
}
void OAISearchedVersion::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISearchedVersion::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISearchedVersion::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISearchedVersion::getName() const {
    return m_name;
}
void OAISearchedVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchedVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchedVersion::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAISearchedVersion::getProperties() const {
    return m_properties;
}
void OAISearchedVersion::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISearchedVersion::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISearchedVersion::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<OAIArtifactReference> OAISearchedVersion::getReferences() const {
    return m_references;
}
void OAISearchedVersion::setReferences(const QList<OAIArtifactReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAISearchedVersion::is_references_Set() const{
    return m_references_isSet;
}

bool OAISearchedVersion::is_references_Valid() const{
    return m_references_isValid;
}

OAIArtifactState OAISearchedVersion::getState() const {
    return m_state;
}
void OAISearchedVersion::setState(const OAIArtifactState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISearchedVersion::is_state_Set() const{
    return m_state_isSet;
}

bool OAISearchedVersion::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISearchedVersion::getType() const {
    return m_type;
}
void OAISearchedVersion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchedVersion::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchedVersion::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISearchedVersion::getVersion() const {
    return m_version;
}
void OAISearchedVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISearchedVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAISearchedVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISearchedVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchedVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_id_isValid && m_created_by_isValid && m_created_on_isValid && m_global_id_isValid && m_references_isValid && m_state_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
