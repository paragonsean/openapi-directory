/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVersionsApi_H
#define OAI_OAIVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifactContent.h"
#include "OAIArtifactReference.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIRuleViolationError.h"
#include "OAIUpdateState.h"
#include "OAIVersionMetaData.h"
#include "OAIVersionSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIVersionsApi(const int timeOut = 0);
    ~OAIVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  body OAIHttpFileElement [required]
    * @param[in]  x_registry_version QString [optional]
    * @param[in]  x_registry_name QString [optional]
    * @param[in]  x_registry_description QString [optional]
    * @param[in]  x_registry_description_encoded QString [optional]
    * @param[in]  x_registry_name_encoded QString [optional]
    */
    virtual void createArtifactVersion(const QString &group_id, const QString &artifact_id, const OAIHttpFileElement &body, const ::OpenAPI::OptionalParam<QString> &x_registry_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_description_encoded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_name_encoded = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void deleteArtifactVersion(const QString &group_id, const QString &artifact_id, const QString &version);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  dereference bool [optional]
    */
    virtual void getArtifactVersion(const QString &group_id, const QString &artifact_id, const QString &version, const ::OpenAPI::OptionalParam<bool> &dereference = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getArtifactVersionReferences(const QString &group_id, const QString &artifact_id, const QString &version);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listArtifactVersions(const QString &group_id, const QString &artifact_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  artifact_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_update_state OAIUpdateState [required]
    */
    virtual void updateArtifactVersionState(const QString &group_id, const QString &artifact_id, const QString &version, const OAIUpdateState &oai_update_state);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createArtifactVersionCallback(OAIHttpRequestWorker *worker);
    void deleteArtifactVersionCallback(OAIHttpRequestWorker *worker);
    void getArtifactVersionCallback(OAIHttpRequestWorker *worker);
    void getArtifactVersionReferencesCallback(OAIHttpRequestWorker *worker);
    void listArtifactVersionsCallback(OAIHttpRequestWorker *worker);
    void updateArtifactVersionStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createArtifactVersionSignal(OAIVersionMetaData summary);
    void deleteArtifactVersionSignal();
    void getArtifactVersionSignal(OAIHttpFileElement summary);
    void getArtifactVersionReferencesSignal(QList<OAIArtifactReference> summary);
    void listArtifactVersionsSignal(OAIVersionSearchResults summary);
    void updateArtifactVersionStateSignal();


    void createArtifactVersionSignalFull(OAIHttpRequestWorker *worker, OAIVersionMetaData summary);
    void deleteArtifactVersionSignalFull(OAIHttpRequestWorker *worker);
    void getArtifactVersionSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getArtifactVersionReferencesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifactReference> summary);
    void listArtifactVersionsSignalFull(OAIHttpRequestWorker *worker, OAIVersionSearchResults summary);
    void updateArtifactVersionStateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createArtifactVersionSignalError() instead")
    void createArtifactVersionSignalE(OAIVersionMetaData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactVersionSignalError(OAIVersionMetaData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactVersionSignalError() instead")
    void deleteArtifactVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactVersionSignalError() instead")
    void getArtifactVersionSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactVersionSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactVersionReferencesSignalError() instead")
    void getArtifactVersionReferencesSignalE(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactVersionReferencesSignalError(QList<OAIArtifactReference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactVersionsSignalError() instead")
    void listArtifactVersionsSignalE(OAIVersionSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactVersionsSignalError(OAIVersionSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactVersionStateSignalError() instead")
    void updateArtifactVersionStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactVersionStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createArtifactVersionSignalErrorFull() instead")
    void createArtifactVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactVersionSignalErrorFull() instead")
    void deleteArtifactVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactVersionSignalErrorFull() instead")
    void getArtifactVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactVersionReferencesSignalErrorFull() instead")
    void getArtifactVersionReferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactVersionReferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactVersionsSignalErrorFull() instead")
    void listArtifactVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactVersionStateSignalErrorFull() instead")
    void updateArtifactVersionStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactVersionStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
