/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleType;
import org.openapitools.client.model.RuleViolationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArtifactRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createArtifactRule
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactRuleCall(String groupId, String artifactId, Rule rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/rules"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArtifactRuleValidateBeforeCall(String groupId, String artifactId, Rule rule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createArtifactRule(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling createArtifactRule(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling createArtifactRule(Async)");
        }

        return createArtifactRuleCall(groupId, artifactId, rule, _callback);

    }

    /**
     * Create artifact rule
     * Adds a rule to the list of rules that get applied to the artifact when adding new versions.  All configured rules must pass to successfully add a new artifact version.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * Rule (named in the request body) is unknown (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void createArtifactRule(String groupId, String artifactId, Rule rule) throws ApiException {
        createArtifactRuleWithHttpInfo(groupId, artifactId, rule);
    }

    /**
     * Create artifact rule
     * Adds a rule to the list of rules that get applied to the artifact when adding new versions.  All configured rules must pass to successfully add a new artifact version.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * Rule (named in the request body) is unknown (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createArtifactRuleWithHttpInfo(String groupId, String artifactId, Rule rule) throws ApiException {
        okhttp3.Call localVarCall = createArtifactRuleValidateBeforeCall(groupId, artifactId, rule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create artifact rule (asynchronously)
     * Adds a rule to the list of rules that get applied to the artifact when adding new versions.  All configured rules must pass to successfully add a new artifact version.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * Rule (named in the request body) is unknown (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactRuleAsync(String groupId, String artifactId, Rule rule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArtifactRuleValidateBeforeCall(groupId, artifactId, rule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteArtifactRule
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArtifactRuleCall(String groupId, String artifactId, String rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/rules/{rule}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()))
            .replace("{" + "rule" + "}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteArtifactRuleValidateBeforeCall(String groupId, String artifactId, String rule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteArtifactRule(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling deleteArtifactRule(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling deleteArtifactRule(Async)");
        }

        return deleteArtifactRuleCall(groupId, artifactId, rule, _callback);

    }

    /**
     * Delete artifact rule
     * Deletes a rule from the artifact.  This results in the rule no longer applying for this artifact.  If this is the only rule configured for the artifact, this is the  same as deleting **all** rules, and the globally configured rules now apply to this artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteArtifactRule(String groupId, String artifactId, String rule) throws ApiException {
        deleteArtifactRuleWithHttpInfo(groupId, artifactId, rule);
    }

    /**
     * Delete artifact rule
     * Deletes a rule from the artifact.  This results in the rule no longer applying for this artifact.  If this is the only rule configured for the artifact, this is the  same as deleting **all** rules, and the globally configured rules now apply to this artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteArtifactRuleWithHttpInfo(String groupId, String artifactId, String rule) throws ApiException {
        okhttp3.Call localVarCall = deleteArtifactRuleValidateBeforeCall(groupId, artifactId, rule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete artifact rule (asynchronously)
     * Deletes a rule from the artifact.  This results in the rule no longer applying for this artifact.  If this is the only rule configured for the artifact, this is the  same as deleting **all** rules, and the globally configured rules now apply to this artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rule was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArtifactRuleAsync(String groupId, String artifactId, String rule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteArtifactRuleValidateBeforeCall(groupId, artifactId, rule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteArtifactRules
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rules were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArtifactRulesCall(String groupId, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/rules"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteArtifactRulesValidateBeforeCall(String groupId, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteArtifactRules(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling deleteArtifactRules(Async)");
        }

        return deleteArtifactRulesCall(groupId, artifactId, _callback);

    }

    /**
     * Delete artifact rules
     * Deletes all of the rules configured for the artifact.  After this is done, the global rules apply to the artifact again.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rules were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteArtifactRules(String groupId, String artifactId) throws ApiException {
        deleteArtifactRulesWithHttpInfo(groupId, artifactId);
    }

    /**
     * Delete artifact rules
     * Deletes all of the rules configured for the artifact.  After this is done, the global rules apply to the artifact again.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rules were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteArtifactRulesWithHttpInfo(String groupId, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = deleteArtifactRulesValidateBeforeCall(groupId, artifactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete artifact rules (asynchronously)
     * Deletes all of the rules configured for the artifact.  After this is done, the global rules apply to the artifact again.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The rules were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArtifactRulesAsync(String groupId, String artifactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteArtifactRulesValidateBeforeCall(groupId, artifactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtifactRuleConfig
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a rule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactRuleConfigCall(String groupId, String artifactId, String rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/rules/{rule}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()))
            .replace("{" + "rule" + "}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtifactRuleConfigValidateBeforeCall(String groupId, String artifactId, String rule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getArtifactRuleConfig(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getArtifactRuleConfig(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling getArtifactRuleConfig(Async)");
        }

        return getArtifactRuleConfigCall(groupId, artifactId, rule, _callback);

    }

    /**
     * Get artifact rule configuration
     * Returns information about a single rule configured for an artifact.  This is useful when you want to know what the current configuration settings are for a specific rule.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a rule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public Rule getArtifactRuleConfig(String groupId, String artifactId, String rule) throws ApiException {
        ApiResponse<Rule> localVarResp = getArtifactRuleConfigWithHttpInfo(groupId, artifactId, rule);
        return localVarResp.getData();
    }

    /**
     * Get artifact rule configuration
     * Returns information about a single rule configured for an artifact.  This is useful when you want to know what the current configuration settings are for a specific rule.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a rule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> getArtifactRuleConfigWithHttpInfo(String groupId, String artifactId, String rule) throws ApiException {
        okhttp3.Call localVarCall = getArtifactRuleConfigValidateBeforeCall(groupId, artifactId, rule, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get artifact rule configuration (asynchronously)
     * Returns information about a single rule configured for an artifact.  This is useful when you want to know what the current configuration settings are for a specific rule.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a rule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactRuleConfigAsync(String groupId, String artifactId, String rule, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtifactRuleConfigValidateBeforeCall(groupId, artifactId, rule, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listArtifactRules
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the names of the rules configured for the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listArtifactRulesCall(String groupId, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/rules"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listArtifactRulesValidateBeforeCall(String groupId, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listArtifactRules(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling listArtifactRules(Async)");
        }

        return listArtifactRulesCall(groupId, artifactId, _callback);

    }

    /**
     * List artifact rules
     * Returns a list of all rules configured for the artifact.  The set of rules determines how the content of an artifact can evolve over time.  If no rules are configured for an artifact, the set of globally configured rules are used.  If no global rules  are defined, there are no restrictions on content evolution.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @return List&lt;RuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the names of the rules configured for the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleType> listArtifactRules(String groupId, String artifactId) throws ApiException {
        ApiResponse<List<RuleType>> localVarResp = listArtifactRulesWithHttpInfo(groupId, artifactId);
        return localVarResp.getData();
    }

    /**
     * List artifact rules
     * Returns a list of all rules configured for the artifact.  The set of rules determines how the content of an artifact can evolve over time.  If no rules are configured for an artifact, the set of globally configured rules are used.  If no global rules  are defined, there are no restrictions on content evolution.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;List&lt;RuleType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the names of the rules configured for the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleType>> listArtifactRulesWithHttpInfo(String groupId, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = listArtifactRulesValidateBeforeCall(groupId, artifactId, null);
        Type localVarReturnType = new TypeToken<List<RuleType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List artifact rules (asynchronously)
     * Returns a list of all rules configured for the artifact.  The set of rules determines how the content of an artifact can evolve over time.  If no rules are configured for an artifact, the set of globally configured rules are used.  If no global rules  are defined, there are no restrictions on content evolution.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the names of the rules configured for the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listArtifactRulesAsync(String groupId, String artifactId, final ApiCallback<List<RuleType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listArtifactRulesValidateBeforeCall(groupId, artifactId, _callback);
        Type localVarReturnType = new TypeToken<List<RuleType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testUpdateArtifact
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param body The content of the artifact being tested. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When successful, returns \&quot;No Content\&quot; to indicate that the rules passed, and the content was not updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUpdateArtifactCall(String groupId, String artifactId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/test"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testUpdateArtifactValidateBeforeCall(String groupId, String artifactId, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling testUpdateArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling testUpdateArtifact(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling testUpdateArtifact(Async)");
        }

        return testUpdateArtifactCall(groupId, artifactId, body, _callback);

    }

    /**
     * Test update artifact
     * Tests whether an update to the artifact&#39;s content *would* succeed for the provided content. Ultimately, this applies any rules configured for the artifact against the given content to determine whether the rules would pass or fail, but without actually updating the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in  JSON format for *most* of the supported types, but may be in another format for a few  (for example, &#x60;PROTOBUF&#x60;).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * The provided artifact type is not recognized (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)  When successful, this operation simply returns a *No Content* response.  This response indicates that the content is valid against the configured content rules for the  artifact (or the global rules if no artifact rules are enabled).
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param body The content of the artifact being tested. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When successful, returns \&quot;No Content\&quot; to indicate that the rules passed, and the content was not updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void testUpdateArtifact(String groupId, String artifactId, File body) throws ApiException {
        testUpdateArtifactWithHttpInfo(groupId, artifactId, body);
    }

    /**
     * Test update artifact
     * Tests whether an update to the artifact&#39;s content *would* succeed for the provided content. Ultimately, this applies any rules configured for the artifact against the given content to determine whether the rules would pass or fail, but without actually updating the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in  JSON format for *most* of the supported types, but may be in another format for a few  (for example, &#x60;PROTOBUF&#x60;).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * The provided artifact type is not recognized (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)  When successful, this operation simply returns a *No Content* response.  This response indicates that the content is valid against the configured content rules for the  artifact (or the global rules if no artifact rules are enabled).
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param body The content of the artifact being tested. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When successful, returns \&quot;No Content\&quot; to indicate that the rules passed, and the content was not updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testUpdateArtifactWithHttpInfo(String groupId, String artifactId, File body) throws ApiException {
        okhttp3.Call localVarCall = testUpdateArtifactValidateBeforeCall(groupId, artifactId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Test update artifact (asynchronously)
     * Tests whether an update to the artifact&#39;s content *would* succeed for the provided content. Ultimately, this applies any rules configured for the artifact against the given content to determine whether the rules would pass or fail, but without actually updating the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in  JSON format for *most* of the supported types, but may be in another format for a few  (for example, &#x60;PROTOBUF&#x60;).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * The provided artifact type is not recognized (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)  When successful, this operation simply returns a *No Content* response.  This response indicates that the content is valid against the configured content rules for the  artifact (or the global rules if no artifact rules are enabled).
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param body The content of the artifact being tested. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> When successful, returns \&quot;No Content\&quot; to indicate that the rules passed, and the content was not updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUpdateArtifactAsync(String groupId, String artifactId, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testUpdateArtifactValidateBeforeCall(groupId, artifactId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateArtifactRuleConfig
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule configuration was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactRuleConfigCall(String groupId, String artifactId, String rule, Rule rule2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule2;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/artifacts/{artifactId}/rules/{rule}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()))
            .replace("{" + "rule" + "}", localVarApiClient.escapeString(rule.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArtifactRuleConfigValidateBeforeCall(String groupId, String artifactId, String rule, Rule rule2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateArtifactRuleConfig(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling updateArtifactRuleConfig(Async)");
        }

        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling updateArtifactRuleConfig(Async)");
        }

        // verify the required parameter 'rule2' is set
        if (rule2 == null) {
            throw new ApiException("Missing the required parameter 'rule2' when calling updateArtifactRuleConfig(Async)");
        }

        return updateArtifactRuleConfigCall(groupId, artifactId, rule, rule2, _callback);

    }

    /**
     * Update artifact rule configuration
     * Updates the configuration of a single rule for the artifact.  The configuration data is specific to each rule type, so the configuration of the &#x60;COMPATIBILITY&#x60; rule  is in a different format from the configuration of the &#x60;VALIDITY&#x60; rule.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule configuration was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public Rule updateArtifactRuleConfig(String groupId, String artifactId, String rule, Rule rule2) throws ApiException {
        ApiResponse<Rule> localVarResp = updateArtifactRuleConfigWithHttpInfo(groupId, artifactId, rule, rule2);
        return localVarResp.getData();
    }

    /**
     * Update artifact rule configuration
     * Updates the configuration of a single rule for the artifact.  The configuration data is specific to each rule type, so the configuration of the &#x60;COMPATIBILITY&#x60; rule  is in a different format from the configuration of the &#x60;VALIDITY&#x60; rule.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule configuration was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> updateArtifactRuleConfigWithHttpInfo(String groupId, String artifactId, String rule, Rule rule2) throws ApiException {
        okhttp3.Call localVarCall = updateArtifactRuleConfigValidateBeforeCall(groupId, artifactId, rule, rule2, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update artifact rule configuration (asynchronously)
     * Updates the configuration of a single rule for the artifact.  The configuration data is specific to each rule type, so the configuration of the &#x60;COMPATIBILITY&#x60; rule  is in a different format from the configuration of the &#x60;VALIDITY&#x60; rule.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No rule with this name/type is configured for this artifact (HTTP error &#x60;404&#x60;) * Invalid rule type (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier. (required)
     * @param rule The unique name/type of a rule. (required)
     * @param rule2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule configuration was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactRuleConfigAsync(String groupId, String artifactId, String rule, Rule rule2, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArtifactRuleConfigValidateBeforeCall(groupId, artifactId, rule, rule2, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
