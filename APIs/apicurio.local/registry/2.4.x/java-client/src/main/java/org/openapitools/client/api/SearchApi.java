/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArtifactSearchResults;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.SortBy;
import org.openapitools.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchArtifacts
     * @param name Filter by artifact name. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @param labels Filter by label.  Include one or more label to only return artifacts containing all of the specified labels. (optional)
     * @param properties Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example &#x60;properties&#x3D;foo:bar&#x60; will return only artifacts with a custom property named &#x60;foo&#x60; and value &#x60;bar&#x60;. (optional)
     * @param description Filter by description. (optional)
     * @param group Filter by artifact group. (optional)
     * @param globalId Filter by globalId. (optional)
     * @param contentId Filter by contentId. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArtifactsCall(String name, Integer offset, Integer limit, SortOrder order, SortBy orderby, List<String> labels, List<String> properties, String description, String group, Long globalId, Long contentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/artifacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "labels", labels));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (globalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("globalId", globalId));
        }

        if (contentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentId", contentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchArtifactsValidateBeforeCall(String name, Integer offset, Integer limit, SortOrder order, SortBy orderby, List<String> labels, List<String> properties, String description, String group, Long globalId, Long contentId, final ApiCallback _callback) throws ApiException {
        return searchArtifactsCall(name, offset, limit, order, orderby, labels, properties, description, group, globalId, contentId, _callback);

    }

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * @param name Filter by artifact name. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @param labels Filter by label.  Include one or more label to only return artifacts containing all of the specified labels. (optional)
     * @param properties Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example &#x60;properties&#x3D;foo:bar&#x60; will return only artifacts with a custom property named &#x60;foo&#x60; and value &#x60;bar&#x60;. (optional)
     * @param description Filter by description. (optional)
     * @param group Filter by artifact group. (optional)
     * @param globalId Filter by globalId. (optional)
     * @param contentId Filter by contentId. (optional)
     * @return ArtifactSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactSearchResults searchArtifacts(String name, Integer offset, Integer limit, SortOrder order, SortBy orderby, List<String> labels, List<String> properties, String description, String group, Long globalId, Long contentId) throws ApiException {
        ApiResponse<ArtifactSearchResults> localVarResp = searchArtifactsWithHttpInfo(name, offset, limit, order, orderby, labels, properties, description, group, globalId, contentId);
        return localVarResp.getData();
    }

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * @param name Filter by artifact name. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @param labels Filter by label.  Include one or more label to only return artifacts containing all of the specified labels. (optional)
     * @param properties Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example &#x60;properties&#x3D;foo:bar&#x60; will return only artifacts with a custom property named &#x60;foo&#x60; and value &#x60;bar&#x60;. (optional)
     * @param description Filter by description. (optional)
     * @param group Filter by artifact group. (optional)
     * @param globalId Filter by globalId. (optional)
     * @param contentId Filter by contentId. (optional)
     * @return ApiResponse&lt;ArtifactSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactSearchResults> searchArtifactsWithHttpInfo(String name, Integer offset, Integer limit, SortOrder order, SortBy orderby, List<String> labels, List<String> properties, String description, String group, Long globalId, Long contentId) throws ApiException {
        okhttp3.Call localVarCall = searchArtifactsValidateBeforeCall(name, offset, limit, order, orderby, labels, properties, description, group, globalId, contentId, null);
        Type localVarReturnType = new TypeToken<ArtifactSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for artifacts (asynchronously)
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * @param name Filter by artifact name. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @param labels Filter by label.  Include one or more label to only return artifacts containing all of the specified labels. (optional)
     * @param properties Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example &#x60;properties&#x3D;foo:bar&#x60; will return only artifacts with a custom property named &#x60;foo&#x60; and value &#x60;bar&#x60;. (optional)
     * @param description Filter by description. (optional)
     * @param group Filter by artifact group. (optional)
     * @param globalId Filter by globalId. (optional)
     * @param contentId Filter by contentId. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArtifactsAsync(String name, Integer offset, Integer limit, SortOrder order, SortBy orderby, List<String> labels, List<String> properties, String description, String group, Long globalId, Long contentId, final ApiCallback<ArtifactSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchArtifactsValidateBeforeCall(name, offset, limit, order, orderby, labels, properties, description, group, globalId, contentId, _callback);
        Type localVarReturnType = new TypeToken<ArtifactSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchArtifactsByContent
     * @param body The content to search for. (required)
     * @param canonical Parameter that can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the &#x60;artifactType&#x60; query parameter. (optional)
     * @param artifactType Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the &#x60;canonical&#x60; query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArtifactsByContentCall(File body, Boolean canonical, String artifactType, Integer offset, Integer limit, String order, String orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search/artifacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (canonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canonical", canonical));
        }

        if (artifactType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artifactType", artifactType));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchArtifactsByContentValidateBeforeCall(File body, Boolean canonical, String artifactType, Integer offset, Integer limit, String order, String orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchArtifactsByContent(Async)");
        }

        return searchArtifactsByContentCall(body, canonical, artifactType, offset, limit, order, orderby, _callback);

    }

    /**
     * Search for artifacts by content
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * @param body The content to search for. (required)
     * @param canonical Parameter that can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the &#x60;artifactType&#x60; query parameter. (optional)
     * @param artifactType Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the &#x60;canonical&#x60; query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @return ArtifactSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactSearchResults searchArtifactsByContent(File body, Boolean canonical, String artifactType, Integer offset, Integer limit, String order, String orderby) throws ApiException {
        ApiResponse<ArtifactSearchResults> localVarResp = searchArtifactsByContentWithHttpInfo(body, canonical, artifactType, offset, limit, order, orderby);
        return localVarResp.getData();
    }

    /**
     * Search for artifacts by content
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * @param body The content to search for. (required)
     * @param canonical Parameter that can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the &#x60;artifactType&#x60; query parameter. (optional)
     * @param artifactType Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the &#x60;canonical&#x60; query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @return ApiResponse&lt;ArtifactSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactSearchResults> searchArtifactsByContentWithHttpInfo(File body, Boolean canonical, String artifactType, Integer offset, Integer limit, String order, String orderby) throws ApiException {
        okhttp3.Call localVarCall = searchArtifactsByContentValidateBeforeCall(body, canonical, artifactType, offset, limit, order, orderby, null);
        Type localVarReturnType = new TypeToken<ArtifactSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for artifacts by content (asynchronously)
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * @param body The content to search for. (required)
     * @param canonical Parameter that can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the &#x60;artifactType&#x60; query parameter. (optional)
     * @param artifactType Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the &#x60;canonical&#x60; query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts. (optional)
     * @param offset The number of artifacts to skip before starting to collect the result set.  Defaults to 0. (optional, default to 0)
     * @param limit The number of artifacts to return.  Defaults to 20. (optional, default to 20)
     * @param order Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional)
     * @param orderby The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArtifactsByContentAsync(File body, Boolean canonical, String artifactType, Integer offset, Integer limit, String order, String orderby, final ApiCallback<ArtifactSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchArtifactsByContentValidateBeforeCall(body, canonical, artifactType, offset, limit, order, orderby, _callback);
        Type localVarReturnType = new TypeToken<ArtifactSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
