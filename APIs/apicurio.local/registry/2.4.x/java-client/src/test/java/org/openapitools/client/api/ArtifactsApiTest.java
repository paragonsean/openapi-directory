/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtifactContent;
import org.openapitools.client.model.ArtifactMetaData;
import org.openapitools.client.model.ArtifactReference;
import org.openapitools.client.model.ArtifactSearchResults;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.IfExists;
import org.openapitools.client.model.RuleViolationError;
import org.openapitools.client.model.SortBy;
import org.openapitools.client.model.SortOrder;
import org.openapitools.client.model.UpdateState;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArtifactsApi
 */
@Disabled
public class ArtifactsApiTest {

    private final ArtifactsApi api = new ArtifactsApi();

    /**
     * Create artifact
     *
     * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, &#x60;PROTOBUF&#x60;).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  Alternatively, you can specify the artifact type using the &#x60;X-Registry-ArtifactType&#x60;  HTTP request header, or include a hint in the request&#39;s &#x60;Content-Type&#x60;.  For example:  &#x60;&#x60;&#x60; Content-Type: application/json; artifactType&#x3D;AVRO &#x60;&#x60;&#x60;  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the &#x60;X-Registry-ArtifactId&#x60; request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the &#x60;ifExists&#x60; query parameter to alter this default behavior. The &#x60;ifExists&#x60; query parameter can have one of the following values:  * &#x60;FAIL&#x60; (*default*) - server rejects the content with a 409 error * &#x60;UPDATE&#x60; - server updates the existing artifact and returns the new metadata * &#x60;RETURN&#x60; - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * &#x60;RETURN_OR_UPDATE&#x60; - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid &#x60;ArtifactType&#x60; was indicated (HTTP error &#x60;400&#x60;) * No &#x60;ArtifactType&#x60; was indicated and the server could not determine one from the content (HTTP error &#x60;400&#x60;) * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * An artifact with the provided ID already exists (HTTP error &#x60;409&#x60;) * The content violates one of the configured global rules (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createArtifactTest() throws ApiException {
        String groupId = null;
        File body = null;
        String xRegistryArtifactType = null;
        String xRegistryArtifactId = null;
        String xRegistryVersion = null;
        IfExists ifExists = null;
        Boolean canonical = null;
        String xRegistryDescription = null;
        String xRegistryDescriptionEncoded = null;
        String xRegistryName = null;
        String xRegistryNameEncoded = null;
        String xRegistryContentHash = null;
        String xRegistryHashAlgorithm = null;
        ArtifactMetaData response = api.createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm);
        // TODO: test validations
    }

    /**
     * Delete artifact
     *
     * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArtifactTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        api.deleteArtifact(groupId, artifactId);
        // TODO: test validations
    }

    /**
     * Delete artifacts in group
     *
     * Deletes all of the artifacts that exist in a given group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArtifactsInGroupTest() throws ApiException {
        String groupId = null;
        api.deleteArtifactsInGroup(groupId);
        // TODO: test validations
    }

    /**
     * Get artifact by global ID
     *
     * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this &#x60;globalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentByGlobalIdTest() throws ApiException {
        Long globalId = null;
        Boolean dereference = null;
        File response = api.getContentByGlobalId(globalId, dereference);
        // TODO: test validations
    }

    /**
     * Get artifact content by SHA-256 hash
     *
     * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this &#x60;contentHash&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentByHashTest() throws ApiException {
        String contentHash = null;
        File response = api.getContentByHash(contentHash);
        // TODO: test validations
    }

    /**
     * Get artifact content by ID
     *
     * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this &#x60;contentId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentByIdTest() throws ApiException {
        Long contentId = null;
        File response = api.getContentById(contentId);
        // TODO: test validations
    }

    /**
     * Get latest artifact
     *
     * Returns the latest version of the artifact in its raw form.  The &#x60;Content-Type&#x60; of the response depends on the artifact type.  In most cases, this is &#x60;application/json&#x60;, but  for some types it may be different (for example, &#x60;PROTOBUF&#x60;). If the latest version of the artifact is marked as &#x60;DISABLED&#x60;, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists or all versions are &#x60;DISABLED&#x60; (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestArtifactTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        Boolean dereference = null;
        File response = api.getLatestArtifact(groupId, artifactId, dereference);
        // TODO: test validations
    }

    /**
     * List artifacts in group
     *
     * Returns a list of all artifacts in the group.  This list is paged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArtifactsInGroupTest() throws ApiException {
        String groupId = null;
        Integer limit = null;
        Integer offset = null;
        SortOrder order = null;
        SortBy orderby = null;
        ArtifactSearchResults response = api.listArtifactsInGroup(groupId, limit, offset, order, orderby);
        // TODO: test validations
    }

    /**
     * List artifact references by hash
     *
     * Returns a list containing all the artifact references using the artifact content hash.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void referencesByContentHashTest() throws ApiException {
        String contentHash = null;
        List<ArtifactReference> response = api.referencesByContentHash(contentHash);
        // TODO: test validations
    }

    /**
     * List artifact references by content ID
     *
     * Returns a list containing all the artifact references using the artifact content ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void referencesByContentIdTest() throws ApiException {
        Long contentId = null;
        List<ArtifactReference> response = api.referencesByContentId(contentId);
        // TODO: test validations
    }

    /**
     * List artifact references by global ID
     *
     * Returns a list containing all the artifact references using the artifact global ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void referencesByGlobalIdTest() throws ApiException {
        Long globalId = null;
        List<ArtifactReference> response = api.referencesByGlobalId(globalId);
        // TODO: test validations
    }

    /**
     * Search for artifacts by content
     *
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchArtifactsByContent_0Test() throws ApiException {
        File body = null;
        Boolean canonical = null;
        String artifactType = null;
        Integer offset = null;
        Integer limit = null;
        String order = null;
        String orderby = null;
        ArtifactSearchResults response = api.searchArtifactsByContent_0(body, canonical, artifactType, offset, limit, order, orderby);
        // TODO: test validations
    }

    /**
     * Search for artifacts
     *
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchArtifacts_0Test() throws ApiException {
        String name = null;
        Integer offset = null;
        Integer limit = null;
        SortOrder order = null;
        SortBy orderby = null;
        List<String> labels = null;
        List<String> properties = null;
        String description = null;
        String group = null;
        Long globalId = null;
        Long contentId = null;
        ArtifactSearchResults response = api.searchArtifacts_0(name, offset, limit, order, orderby, labels, properties, description, group, globalId, contentId);
        // TODO: test validations
    }

    /**
     * Update artifact
     *
     * Updates an artifact by uploading new content.  The body of the request can be the raw content of the artifact or a JSON object containing both the raw content and a set of references to other artifacts..  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, &#x60;PROTOBUF&#x60;). The type of the content should be compatible with the artifact&#39;s type (it would be an error to update an &#x60;AVRO&#x60; artifact with new &#x60;OPENAPI&#x60; content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        File body = null;
        String xRegistryVersion = null;
        String xRegistryName = null;
        String xRegistryNameEncoded = null;
        String xRegistryDescription = null;
        String xRegistryDescriptionEncoded = null;
        ArtifactMetaData response = api.updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded);
        // TODO: test validations
    }

    /**
     * Update artifact state
     *
     * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as &#x60;DEPRECATED&#x60;. The operation changes the state of the latest version of the artifact, even if this version is &#x60;DISABLED&#x60;. If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactStateTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        UpdateState updateState = null;
        api.updateArtifactState(groupId, artifactId, updateState);
        // TODO: test validations
    }

}
