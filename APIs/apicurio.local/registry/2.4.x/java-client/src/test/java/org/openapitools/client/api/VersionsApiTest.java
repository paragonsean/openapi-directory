/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtifactContent;
import org.openapitools.client.model.ArtifactReference;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.RuleViolationError;
import org.openapitools.client.model.UpdateState;
import org.openapitools.client.model.VersionMetaData;
import org.openapitools.client.model.VersionSearchResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VersionsApi
 */
@Disabled
public class VersionsApiTest {

    private final VersionsApi api = new VersionsApi();

    /**
     * Create artifact version
     *
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request can be the raw content of the new artifact version, or the raw content  and a set of references pointing to other artifacts, and the type of that content should match the artifact&#39;s type (for example if the artifact type is &#x60;AVRO&#x60; then the content of the request should be an Apache Avro document).  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createArtifactVersionTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        File body = null;
        String xRegistryVersion = null;
        String xRegistryName = null;
        String xRegistryDescription = null;
        String xRegistryDescriptionEncoded = null;
        String xRegistryNameEncoded = null;
        VersionMetaData response = api.createArtifactVersion(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryNameEncoded);
        // TODO: test validations
    }

    /**
     * Delete artifact version
     *
     * Deletes a single version of the artifact. Parameters &#x60;groupId&#x60;, &#x60;artifactId&#x60; and the unique &#x60;version&#x60; are needed. If this is the only version of the artifact, this operation is the same as  deleting the entire artifact.  This feature is disabled by default and it&#39;s discouraged for normal usage. To enable it, set the &#x60;registry.rest.artifact.deletion.enabled&#x60; property to true. This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;)  * Feature is disabled (HTTP error &#x60;405&#x60;)  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArtifactVersionTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        api.deleteArtifactVersion(groupId, artifactId, version);
        // TODO: test validations
    }

    /**
     * Get artifact version
     *
     * Retrieves a single version of the artifact content.  Both the &#x60;artifactId&#x60; and the unique &#x60;version&#x60; number must be provided.  The &#x60;Content-Type&#x60; of the response depends  on the artifact type.  In most cases, this is &#x60;application/json&#x60;, but for some types  it may be different (for example, &#x60;PROTOBUF&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtifactVersionTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        Boolean dereference = null;
        File response = api.getArtifactVersion(groupId, artifactId, version, dereference);
        // TODO: test validations
    }

    /**
     * Get artifact version
     *
     * Retrieves a single version of the artifact content.  Both the &#x60;artifactId&#x60; and the unique &#x60;version&#x60; number must be provided.  The &#x60;Content-Type&#x60; of the response depends  on the artifact type.  In most cases, this is &#x60;application/json&#x60;, but for some types  it may be different (for example, &#x60;PROTOBUF&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtifactVersionReferencesTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        List<ArtifactReference> response = api.getArtifactVersionReferences(groupId, artifactId, version);
        // TODO: test validations
    }

    /**
     * List artifact versions
     *
     * Returns a list of all versions of the artifact.  The result set is paged.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArtifactVersionsTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        Integer offset = null;
        Integer limit = null;
        VersionSearchResults response = api.listArtifactVersions(groupId, artifactId, offset, limit);
        // TODO: test validations
    }

    /**
     * Update artifact version state
     *
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactVersionStateTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        UpdateState updateState = null;
        api.updateArtifactVersionState(groupId, artifactId, version, updateState);
        // TODO: test validations
    }

}
