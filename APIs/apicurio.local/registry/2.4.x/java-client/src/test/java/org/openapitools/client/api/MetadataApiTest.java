/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtifactContent;
import org.openapitools.client.model.ArtifactMetaData;
import org.openapitools.client.model.ArtifactOwner;
import org.openapitools.client.model.EditableMetaData;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.VersionMetaData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataApi
 */
@Disabled
public class MetadataApiTest {

    private final MetadataApi api = new MetadataApi();

    /**
     * Delete artifact version metadata
     *
     * Deletes the user-editable metadata properties of the artifact version.  Any properties that are not user-editable are preserved.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArtifactVersionMetaDataTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        api.deleteArtifactVersionMetaData(groupId, artifactId, version);
        // TODO: test validations
    }

    /**
     * Get artifact metadata
     *
     * Gets the metadata for an artifact in the registry, based on the latest version. If the latest version of the artifact is marked as &#x60;DISABLED&#x60;, the next available non-disabled version will be used. The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists  or all versions are &#x60;DISABLED&#x60; (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtifactMetaDataTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        ArtifactMetaData response = api.getArtifactMetaData(groupId, artifactId);
        // TODO: test validations
    }

    /**
     * Get artifact owner
     *
     * Gets the owner of an artifact in the registry.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtifactOwnerTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        ArtifactOwner response = api.getArtifactOwner(groupId, artifactId);
        // TODO: test validations
    }

    /**
     * Get artifact version metadata
     *
     * Retrieves the metadata for a single version of the artifact.  The version metadata is  a subset of the artifact metadata and only includes the metadata that is specific to the version (for example, this doesn&#39;t include &#x60;modifiedOn&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtifactVersionMetaDataTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        VersionMetaData response = api.getArtifactVersionMetaData(groupId, artifactId, version);
        // TODO: test validations
    }

    /**
     * Get artifact version metadata by content
     *
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry for a version of the given artifact matching the content provided in the body of the POST.  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No artifact version matching the provided content exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtifactVersionMetaDataByContentTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        File body = null;
        Boolean canonical = null;
        VersionMetaData response = api.getArtifactVersionMetaDataByContent(groupId, artifactId, body, canonical);
        // TODO: test validations
    }

    /**
     * Update artifact metadata
     *
     * Updates the editable parts of the artifact&#39;s metadata.  Not all metadata fields can be updated.  For example, &#x60;createdOn&#x60; and &#x60;createdBy&#x60; are both read-only properties.  This operation can fail for the following reasons:  * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactMetaDataTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        EditableMetaData editableMetaData = null;
        api.updateArtifactMetaData(groupId, artifactId, editableMetaData);
        // TODO: test validations
    }

    /**
     * Update artifact owner
     *
     * Changes the ownership of an artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactOwnerTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        ArtifactOwner artifactOwner = null;
        api.updateArtifactOwner(groupId, artifactId, artifactOwner);
        // TODO: test validations
    }

    /**
     * Update artifact version metadata
     *
     * Updates the user-editable portion of the artifact version&#39;s metadata.  Only some of  the metadata fields are editable by the user.  For example, &#x60;description&#x60; is editable,  but &#x60;createdOn&#x60; is not.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactVersionMetaDataTest() throws ApiException {
        String groupId = null;
        String artifactId = null;
        String version = null;
        EditableMetaData editableMetaData = null;
        api.updateArtifactVersionMetaData(groupId, artifactId, version, editableMetaData);
        // TODO: test validations
    }

}
