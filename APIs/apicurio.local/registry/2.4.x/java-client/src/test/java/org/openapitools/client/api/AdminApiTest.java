/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtifactTypeInfo;
import org.openapitools.client.model.ConfigurationProperty;
import org.openapitools.client.model.DownloadRef;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.LogConfiguration;
import org.openapitools.client.model.NamedLogConfiguration;
import org.openapitools.client.model.RoleMapping;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleType;
import org.openapitools.client.model.UpdateConfigurationProperty;
import org.openapitools.client.model.UpdateRole;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Disabled
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    /**
     * Create global rule
     *
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error &#x60;400&#x60;) * The rule already exists (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGlobalRule_0Test() throws ApiException {
        Rule rule = null;
        api.createGlobalRule_0(rule);
        // TODO: test validations
    }

    /**
     * Create a new role mapping
     *
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;)  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRoleMappingTest() throws ApiException {
        RoleMapping roleMapping = null;
        api.createRoleMapping(roleMapping);
        // TODO: test validations
    }

    /**
     * Delete all global rules
     *
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllGlobalRules_0Test() throws ApiException {
        api.deleteAllGlobalRules_0();
        // TODO: test validations
    }

    /**
     * Delete global rule
     *
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * Rule cannot be deleted (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGlobalRule_0Test() throws ApiException {
        RuleType rule = null;
        api.deleteGlobalRule_0(rule);
        // TODO: test validations
    }

    /**
     * Delete a role mapping
     *
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoleMappingTest() throws ApiException {
        String principalId = null;
        api.deleteRoleMapping(principalId);
        // TODO: test validations
    }

    /**
     * Export registry data
     *
     * Exports registry data as a ZIP archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDataTest() throws ApiException {
        Boolean forBrowser = null;
        DownloadRef response = api.exportData(forBrowser);
        // TODO: test validations
    }

    /**
     * Get configuration property value
     *
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigPropertyTest() throws ApiException {
        String propertyName = null;
        ConfigurationProperty response = api.getConfigProperty(propertyName);
        // TODO: test validations
    }

    /**
     * Get global rule configuration
     *
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGlobalRuleConfig_0Test() throws ApiException {
        RuleType rule = null;
        Rule response = api.getGlobalRuleConfig_0(rule);
        // TODO: test validations
    }

    /**
     * Get a single logger configuration
     *
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogConfigurationTest() throws ApiException {
        String logger = null;
        NamedLogConfiguration response = api.getLogConfiguration(logger);
        // TODO: test validations
    }

    /**
     * Return a single role mapping
     *
     * Gets the details of a single role mapping (by &#x60;principalId&#x60;).  This operation can fail for the following reasons:  * No role mapping for the &#x60;principalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleMappingTest() throws ApiException {
        String principalId = null;
        RoleMapping response = api.getRoleMapping(principalId);
        // TODO: test validations
    }

    /**
     * Import registry data
     *
     * Imports registry data that was previously exported using the &#x60;/admin/export&#x60; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importDataTest() throws ApiException {
        File body = null;
        Boolean xRegistryPreserveGlobalId = null;
        Boolean xRegistryPreserveContentId = null;
        api.importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId);
        // TODO: test validations
    }

    /**
     * List artifact types
     *
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArtifactTypes_0Test() throws ApiException {
        List<ArtifactTypeInfo> response = api.listArtifactTypes_0();
        // TODO: test validations
    }

    /**
     * List all configuration properties
     *
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigPropertiesTest() throws ApiException {
        List<ConfigurationProperty> response = api.listConfigProperties();
        // TODO: test validations
    }

    /**
     * List global rules
     *
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGlobalRules_0Test() throws ApiException {
        List<RuleType> response = api.listGlobalRules_0();
        // TODO: test validations
    }

    /**
     * List logging configurations
     *
     * List all of the configured logging levels.  These override the default logging configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLogConfigurationsTest() throws ApiException {
        List<NamedLogConfiguration> response = api.listLogConfigurations();
        // TODO: test validations
    }

    /**
     * List all role mappings
     *
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoleMappingsTest() throws ApiException {
        List<RoleMapping> response = api.listRoleMappings();
        // TODO: test validations
    }

    /**
     * Removes logger configuration
     *
     * Removes the configured logger configuration (if any) for the given logger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLogConfigurationTest() throws ApiException {
        String logger = null;
        NamedLogConfiguration response = api.removeLogConfiguration(logger);
        // TODO: test validations
    }

    /**
     * Reset a configuration property
     *
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetConfigPropertyTest() throws ApiException {
        String propertyName = null;
        api.resetConfigProperty(propertyName);
        // TODO: test validations
    }

    /**
     * Set a logger&#39;s configuration
     *
     * Configures the logger referenced by the provided logger name with the given configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLogConfigurationTest() throws ApiException {
        String logger = null;
        LogConfiguration logConfiguration = null;
        NamedLogConfiguration response = api.setLogConfiguration(logger, logConfiguration);
        // TODO: test validations
    }

    /**
     * Update a configuration property
     *
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigPropertyTest() throws ApiException {
        String propertyName = null;
        UpdateConfigurationProperty updateConfigurationProperty = null;
        api.updateConfigProperty(propertyName, updateConfigurationProperty);
        // TODO: test validations
    }

    /**
     * Update global rule configuration
     *
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error &#x60;400&#x60;) * No rule with name/type &#x60;rule&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGlobalRuleConfig_0Test() throws ApiException {
        RuleType rule = null;
        Rule rule2 = null;
        Rule response = api.updateGlobalRuleConfig_0(rule, rule2);
        // TODO: test validations
    }

    /**
     * Update a role mapping
     *
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoleMappingTest() throws ApiException {
        String principalId = null;
        UpdateRole updateRole = null;
        api.updateRoleMapping(principalId, updateRole);
        // TODO: test validations
    }

}
