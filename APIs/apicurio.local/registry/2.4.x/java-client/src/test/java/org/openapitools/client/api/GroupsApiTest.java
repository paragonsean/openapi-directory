/*
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateGroupMetaData;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GroupMetaData;
import org.openapitools.client.model.GroupSearchResults;
import org.openapitools.client.model.SortBy;
import org.openapitools.client.model.SortOrder;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Create a new group
     *
     * Creates a new group.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) * The group already exist (HTTP error &#x60;409&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        CreateGroupMetaData createGroupMetaData = null;
        GroupMetaData response = api.createGroup(createGroupMetaData);
        // TODO: test validations
    }

    /**
     * Delete a group by the specified ID.
     *
     * Deletes a group by identifier.  This operation can fail for the following reasons:  * A server error occurred (HTTP error &#x60;500&#x60;) * The group does not exist (HTTP error &#x60;404&#x60;) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupByIdTest() throws ApiException {
        String groupId = null;
        api.deleteGroupById(groupId);
        // TODO: test validations
    }

    /**
     * Get a group by the specified ID.
     *
     * Returns a group using the specified id.  This operation can fail for the following reasons:  * No group exists with the specified ID (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupByIdTest() throws ApiException {
        String groupId = null;
        GroupMetaData response = api.getGroupById(groupId);
        // TODO: test validations
    }

    /**
     * List groups
     *
     * Returns a list of all groups.  This list is paged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        SortOrder order = null;
        SortBy orderby = null;
        GroupSearchResults response = api.listGroups(limit, offset, order, orderby);
        // TODO: test validations
    }

}
