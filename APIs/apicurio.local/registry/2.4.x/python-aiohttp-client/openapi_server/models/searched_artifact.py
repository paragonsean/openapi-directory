# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_state import ArtifactState
from openapi_server import util


class SearchedArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_on: datetime=None, description: str=None, group_id: str=None, id: str=None, labels: List[str]=None, modified_by: str=None, modified_on: datetime=None, name: str=None, state: ArtifactState=None, type: str=None):
        """SearchedArtifact - a model defined in OpenAPI

        :param created_by: The created_by of this SearchedArtifact.
        :param created_on: The created_on of this SearchedArtifact.
        :param description: The description of this SearchedArtifact.
        :param group_id: The group_id of this SearchedArtifact.
        :param id: The id of this SearchedArtifact.
        :param labels: The labels of this SearchedArtifact.
        :param modified_by: The modified_by of this SearchedArtifact.
        :param modified_on: The modified_on of this SearchedArtifact.
        :param name: The name of this SearchedArtifact.
        :param state: The state of this SearchedArtifact.
        :param type: The type of this SearchedArtifact.
        """
        self.openapi_types = {
            'created_by': str,
            'created_on': datetime,
            'description': str,
            'group_id': str,
            'id': str,
            'labels': List[str],
            'modified_by': str,
            'modified_on': datetime,
            'name': str,
            'state': ArtifactState,
            'type': str
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_on': 'createdOn',
            'description': 'description',
            'group_id': 'groupId',
            'id': 'id',
            'labels': 'labels',
            'modified_by': 'modifiedBy',
            'modified_on': 'modifiedOn',
            'name': 'name',
            'state': 'state',
            'type': 'type'
        }

        self._created_by = created_by
        self._created_on = created_on
        self._description = description
        self._group_id = group_id
        self._id = id
        self._labels = labels
        self._modified_by = modified_by
        self._modified_on = modified_on
        self._name = name
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchedArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchedArtifact of this SearchedArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this SearchedArtifact.

        

        :return: The created_by of this SearchedArtifact.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SearchedArtifact.

        

        :param created_by: The created_by of this SearchedArtifact.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this SearchedArtifact.

        

        :return: The created_on of this SearchedArtifact.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SearchedArtifact.

        

        :param created_on: The created_on of this SearchedArtifact.
        :type created_on: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this SearchedArtifact.

        

        :return: The description of this SearchedArtifact.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchedArtifact.

        

        :param description: The description of this SearchedArtifact.
        :type description: str
        """

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this SearchedArtifact.

        An ID of a single artifact group.

        :return: The group_id of this SearchedArtifact.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SearchedArtifact.

        An ID of a single artifact group.

        :param group_id: The group_id of this SearchedArtifact.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this SearchedArtifact.

        The ID of a single artifact.

        :return: The id of this SearchedArtifact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchedArtifact.

        The ID of a single artifact.

        :param id: The id of this SearchedArtifact.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this SearchedArtifact.

        

        :return: The labels of this SearchedArtifact.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SearchedArtifact.

        

        :param labels: The labels of this SearchedArtifact.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def modified_by(self):
        """Gets the modified_by of this SearchedArtifact.

        

        :return: The modified_by of this SearchedArtifact.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this SearchedArtifact.

        

        :param modified_by: The modified_by of this SearchedArtifact.
        :type modified_by: str
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this SearchedArtifact.

        

        :return: The modified_on of this SearchedArtifact.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this SearchedArtifact.

        

        :param modified_on: The modified_on of this SearchedArtifact.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """Gets the name of this SearchedArtifact.

        

        :return: The name of this SearchedArtifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchedArtifact.

        

        :param name: The name of this SearchedArtifact.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this SearchedArtifact.


        :return: The state of this SearchedArtifact.
        :rtype: ArtifactState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SearchedArtifact.


        :param state: The state of this SearchedArtifact.
        :type state: ArtifactState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def type(self):
        """Gets the type of this SearchedArtifact.

        

        :return: The type of this SearchedArtifact.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchedArtifact.

        

        :param type: The type of this SearchedArtifact.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
