# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_type import RoleType
from openapi_server import util


class RoleMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_id: str=None, principal_name: str=None, role: RoleType=None):
        """RoleMapping - a model defined in OpenAPI

        :param principal_id: The principal_id of this RoleMapping.
        :param principal_name: The principal_name of this RoleMapping.
        :param role: The role of this RoleMapping.
        """
        self.openapi_types = {
            'principal_id': str,
            'principal_name': str,
            'role': RoleType
        }

        self.attribute_map = {
            'principal_id': 'principalId',
            'principal_name': 'principalName',
            'role': 'role'
        }

        self._principal_id = principal_id
        self._principal_name = principal_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleMapping of this RoleMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_id(self):
        """Gets the principal_id of this RoleMapping.

        

        :return: The principal_id of this RoleMapping.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this RoleMapping.

        

        :param principal_id: The principal_id of this RoleMapping.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id

    @property
    def principal_name(self):
        """Gets the principal_name of this RoleMapping.

        A friendly name for the principal.

        :return: The principal_name of this RoleMapping.
        :rtype: str
        """
        return self._principal_name

    @principal_name.setter
    def principal_name(self, principal_name):
        """Sets the principal_name of this RoleMapping.

        A friendly name for the principal.

        :param principal_name: The principal_name of this RoleMapping.
        :type principal_name: str
        """

        self._principal_name = principal_name

    @property
    def role(self):
        """Gets the role of this RoleMapping.


        :return: The role of this RoleMapping.
        :rtype: RoleType
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleMapping.


        :param role: The role of this RoleMapping.
        :type role: RoleType
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
