# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.searched_version import SearchedVersion
from openapi_server import util


class VersionSearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, versions: List[SearchedVersion]=None):
        """VersionSearchResults - a model defined in OpenAPI

        :param count: The count of this VersionSearchResults.
        :param versions: The versions of this VersionSearchResults.
        """
        self.openapi_types = {
            'count': int,
            'versions': List[SearchedVersion]
        }

        self.attribute_map = {
            'count': 'count',
            'versions': 'versions'
        }

        self._count = count
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionSearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionSearchResults of this VersionSearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this VersionSearchResults.

        The total number of versions that matched the query (may be more than the number of versions returned in the result set).

        :return: The count of this VersionSearchResults.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this VersionSearchResults.

        The total number of versions that matched the query (may be more than the number of versions returned in the result set).

        :param count: The count of this VersionSearchResults.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def versions(self):
        """Gets the versions of this VersionSearchResults.

        The collection of artifact versions returned in the result set.

        :return: The versions of this VersionSearchResults.
        :rtype: List[SearchedVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this VersionSearchResults.

        The collection of artifact versions returned in the result set.

        :param versions: The versions of this VersionSearchResults.
        :type versions: List[SearchedVersion]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")

        self._versions = versions
