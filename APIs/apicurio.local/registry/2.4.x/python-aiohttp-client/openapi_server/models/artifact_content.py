# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_reference import ArtifactReference
from openapi_server import util


class ArtifactContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, references: List[ArtifactReference]=None):
        """ArtifactContent - a model defined in OpenAPI

        :param content: The content of this ArtifactContent.
        :param references: The references of this ArtifactContent.
        """
        self.openapi_types = {
            'content': str,
            'references': List[ArtifactReference]
        }

        self.attribute_map = {
            'content': 'content',
            'references': 'references'
        }

        self._content = content
        self._references = references

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactContent of this ArtifactContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ArtifactContent.

        Raw content of the artifact or a valid (and accessible) URL where the content can be found.

        :return: The content of this ArtifactContent.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ArtifactContent.

        Raw content of the artifact or a valid (and accessible) URL where the content can be found.

        :param content: The content of this ArtifactContent.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def references(self):
        """Gets the references of this ArtifactContent.

        Collection of references to other artifacts.

        :return: The references of this ArtifactContent.
        :rtype: List[ArtifactReference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ArtifactContent.

        Collection of references to other artifacts.

        :param references: The references of this ArtifactContent.
        :type references: List[ArtifactReference]
        """
        if references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")

        self._references = references
