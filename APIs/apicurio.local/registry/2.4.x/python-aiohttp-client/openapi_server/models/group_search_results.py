# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.searched_group import SearchedGroup
from openapi_server import util


class GroupSearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, groups: List[SearchedGroup]=None):
        """GroupSearchResults - a model defined in OpenAPI

        :param count: The count of this GroupSearchResults.
        :param groups: The groups of this GroupSearchResults.
        """
        self.openapi_types = {
            'count': int,
            'groups': List[SearchedGroup]
        }

        self.attribute_map = {
            'count': 'count',
            'groups': 'groups'
        }

        self._count = count
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupSearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupSearchResults of this GroupSearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GroupSearchResults.

        The total number of groups that matched the query that produced the result set (may be  more than the number of groups in the result set).

        :return: The count of this GroupSearchResults.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GroupSearchResults.

        The total number of groups that matched the query that produced the result set (may be  more than the number of groups in the result set).

        :param count: The count of this GroupSearchResults.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def groups(self):
        """Gets the groups of this GroupSearchResults.

        The groups returned in the result set.

        :return: The groups of this GroupSearchResults.
        :rtype: List[SearchedGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this GroupSearchResults.

        The groups returned in the result set.

        :param groups: The groups of this GroupSearchResults.
        :type groups: List[SearchedGroup]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups
