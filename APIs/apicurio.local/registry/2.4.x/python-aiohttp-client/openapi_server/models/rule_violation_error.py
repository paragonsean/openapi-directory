# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_violation_cause import RuleViolationCause
from openapi_server import util


class RuleViolationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, error_code: int=None, message: str=None, name: str=None, causes: List[RuleViolationCause]=None):
        """RuleViolationError - a model defined in OpenAPI

        :param detail: The detail of this RuleViolationError.
        :param error_code: The error_code of this RuleViolationError.
        :param message: The message of this RuleViolationError.
        :param name: The name of this RuleViolationError.
        :param causes: The causes of this RuleViolationError.
        """
        self.openapi_types = {
            'detail': str,
            'error_code': int,
            'message': str,
            'name': str,
            'causes': List[RuleViolationCause]
        }

        self.attribute_map = {
            'detail': 'detail',
            'error_code': 'error_code',
            'message': 'message',
            'name': 'name',
            'causes': 'causes'
        }

        self._detail = detail
        self._error_code = error_code
        self._message = message
        self._name = name
        self._causes = causes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleViolationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleViolationError of this RuleViolationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this RuleViolationError.

        Full details about the error.  This might contain a server stack trace, for example.

        :return: The detail of this RuleViolationError.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this RuleViolationError.

        Full details about the error.  This might contain a server stack trace, for example.

        :param detail: The detail of this RuleViolationError.
        :type detail: str
        """

        self._detail = detail

    @property
    def error_code(self):
        """Gets the error_code of this RuleViolationError.

        The server-side error code.

        :return: The error_code of this RuleViolationError.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this RuleViolationError.

        The server-side error code.

        :param error_code: The error_code of this RuleViolationError.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this RuleViolationError.

        The short error message.

        :return: The message of this RuleViolationError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RuleViolationError.

        The short error message.

        :param message: The message of this RuleViolationError.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this RuleViolationError.

        The error name - typically the classname of the exception thrown by the server.

        :return: The name of this RuleViolationError.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleViolationError.

        The error name - typically the classname of the exception thrown by the server.

        :param name: The name of this RuleViolationError.
        :type name: str
        """

        self._name = name

    @property
    def causes(self):
        """Gets the causes of this RuleViolationError.

        List of rule violation causes.

        :return: The causes of this RuleViolationError.
        :rtype: List[RuleViolationCause]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this RuleViolationError.

        List of rule violation causes.

        :param causes: The causes of this RuleViolationError.
        :type causes: List[RuleViolationCause]
        """
        if causes is None:
            raise ValueError("Invalid value for `causes`, must not be `None`")

        self._causes = causes
