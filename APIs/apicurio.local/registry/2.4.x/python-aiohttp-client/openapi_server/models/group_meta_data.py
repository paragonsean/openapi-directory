# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupMetaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_on: datetime=None, description: str=None, id: str=None, modified_by: str=None, modified_on: datetime=None, properties: Dict[str, str]=None):
        """GroupMetaData - a model defined in OpenAPI

        :param created_by: The created_by of this GroupMetaData.
        :param created_on: The created_on of this GroupMetaData.
        :param description: The description of this GroupMetaData.
        :param id: The id of this GroupMetaData.
        :param modified_by: The modified_by of this GroupMetaData.
        :param modified_on: The modified_on of this GroupMetaData.
        :param properties: The properties of this GroupMetaData.
        """
        self.openapi_types = {
            'created_by': str,
            'created_on': datetime,
            'description': str,
            'id': str,
            'modified_by': str,
            'modified_on': datetime,
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_on': 'createdOn',
            'description': 'description',
            'id': 'id',
            'modified_by': 'modifiedBy',
            'modified_on': 'modifiedOn',
            'properties': 'properties'
        }

        self._created_by = created_by
        self._created_on = created_on
        self._description = description
        self._id = id
        self._modified_by = modified_by
        self._modified_on = modified_on
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupMetaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupMetaData of this GroupMetaData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this GroupMetaData.


        :return: The created_by of this GroupMetaData.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GroupMetaData.


        :param created_by: The created_by of this GroupMetaData.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this GroupMetaData.


        :return: The created_on of this GroupMetaData.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this GroupMetaData.


        :param created_on: The created_on of this GroupMetaData.
        :type created_on: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this GroupMetaData.


        :return: The description of this GroupMetaData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupMetaData.


        :param description: The description of this GroupMetaData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this GroupMetaData.

        An ID of a single artifact group.

        :return: The id of this GroupMetaData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupMetaData.

        An ID of a single artifact group.

        :param id: The id of this GroupMetaData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified_by(self):
        """Gets the modified_by of this GroupMetaData.


        :return: The modified_by of this GroupMetaData.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this GroupMetaData.


        :param modified_by: The modified_by of this GroupMetaData.
        :type modified_by: str
        """
        if modified_by is None:
            raise ValueError("Invalid value for `modified_by`, must not be `None`")

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this GroupMetaData.


        :return: The modified_on of this GroupMetaData.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this GroupMetaData.


        :param modified_on: The modified_on of this GroupMetaData.
        :type modified_on: datetime
        """
        if modified_on is None:
            raise ValueError("Invalid value for `modified_on`, must not be `None`")

        self._modified_on = modified_on

    @property
    def properties(self):
        """Gets the properties of this GroupMetaData.

        User-defined name-value pairs. Name and value must be strings.

        :return: The properties of this GroupMetaData.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GroupMetaData.

        User-defined name-value pairs. Name and value must be strings.

        :param properties: The properties of this GroupMetaData.
        :type properties: Dict[str, str]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
