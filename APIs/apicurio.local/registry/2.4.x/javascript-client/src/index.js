/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ArtifactContent from './model/ArtifactContent';
import ArtifactMetaData from './model/ArtifactMetaData';
import ArtifactOwner from './model/ArtifactOwner';
import ArtifactReference from './model/ArtifactReference';
import ArtifactSearchResults from './model/ArtifactSearchResults';
import ArtifactState from './model/ArtifactState';
import ArtifactTypeInfo from './model/ArtifactTypeInfo';
import ConfigurationProperty from './model/ConfigurationProperty';
import CreateGroupMetaData from './model/CreateGroupMetaData';
import DownloadRef from './model/DownloadRef';
import EditableMetaData from './model/EditableMetaData';
import Error from './model/Error';
import GroupMetaData from './model/GroupMetaData';
import GroupSearchResults from './model/GroupSearchResults';
import IfExists from './model/IfExists';
import Limits from './model/Limits';
import LogConfiguration from './model/LogConfiguration';
import LogLevel from './model/LogLevel';
import NamedLogConfiguration from './model/NamedLogConfiguration';
import RoleMapping from './model/RoleMapping';
import RoleType from './model/RoleType';
import Rule from './model/Rule';
import RuleType from './model/RuleType';
import RuleViolationCause from './model/RuleViolationCause';
import RuleViolationError from './model/RuleViolationError';
import SearchedArtifact from './model/SearchedArtifact';
import SearchedGroup from './model/SearchedGroup';
import SearchedVersion from './model/SearchedVersion';
import SortBy from './model/SortBy';
import SortOrder from './model/SortOrder';
import SystemInfo from './model/SystemInfo';
import UpdateConfigurationProperty from './model/UpdateConfigurationProperty';
import UpdateRole from './model/UpdateRole';
import UpdateState from './model/UpdateState';
import UserInfo from './model/UserInfo';
import VersionMetaData from './model/VersionMetaData';
import VersionSearchResults from './model/VersionSearchResults';
import AdminApi from './api/AdminApi';
import ArtifactRulesApi from './api/ArtifactRulesApi';
import ArtifactTypeApi from './api/ArtifactTypeApi';
import ArtifactsApi from './api/ArtifactsApi';
import GlobalRulesApi from './api/GlobalRulesApi';
import GroupsApi from './api/GroupsApi';
import MetadataApi from './api/MetadataApi';
import SearchApi from './api/SearchApi';
import SystemApi from './api/SystemApi';
import UsersApi from './api/UsersApi';
import VersionsApi from './api/VersionsApi';


/**
* Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from &#x60;https://MY-REGISTRY-URL/apis/registry/v2&#x60; by default. Therefore you must prefix all API operation paths with &#x60;../apis/registry/v2&#x60; in this case. For example: &#x60;../apis/registry/v2/ids/globalIds/{globalId}&#x60;. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ApicurioRegistryApiV2 = require('index'); // See note below*.
* var xxxSvc = new ApicurioRegistryApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ApicurioRegistryApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ApicurioRegistryApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ApicurioRegistryApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.4.x
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ArtifactContent model constructor.
     * @property {module:model/ArtifactContent}
     */
    ArtifactContent,

    /**
     * The ArtifactMetaData model constructor.
     * @property {module:model/ArtifactMetaData}
     */
    ArtifactMetaData,

    /**
     * The ArtifactOwner model constructor.
     * @property {module:model/ArtifactOwner}
     */
    ArtifactOwner,

    /**
     * The ArtifactReference model constructor.
     * @property {module:model/ArtifactReference}
     */
    ArtifactReference,

    /**
     * The ArtifactSearchResults model constructor.
     * @property {module:model/ArtifactSearchResults}
     */
    ArtifactSearchResults,

    /**
     * The ArtifactState model constructor.
     * @property {module:model/ArtifactState}
     */
    ArtifactState,

    /**
     * The ArtifactTypeInfo model constructor.
     * @property {module:model/ArtifactTypeInfo}
     */
    ArtifactTypeInfo,

    /**
     * The ConfigurationProperty model constructor.
     * @property {module:model/ConfigurationProperty}
     */
    ConfigurationProperty,

    /**
     * The CreateGroupMetaData model constructor.
     * @property {module:model/CreateGroupMetaData}
     */
    CreateGroupMetaData,

    /**
     * The DownloadRef model constructor.
     * @property {module:model/DownloadRef}
     */
    DownloadRef,

    /**
     * The EditableMetaData model constructor.
     * @property {module:model/EditableMetaData}
     */
    EditableMetaData,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The GroupMetaData model constructor.
     * @property {module:model/GroupMetaData}
     */
    GroupMetaData,

    /**
     * The GroupSearchResults model constructor.
     * @property {module:model/GroupSearchResults}
     */
    GroupSearchResults,

    /**
     * The IfExists model constructor.
     * @property {module:model/IfExists}
     */
    IfExists,

    /**
     * The Limits model constructor.
     * @property {module:model/Limits}
     */
    Limits,

    /**
     * The LogConfiguration model constructor.
     * @property {module:model/LogConfiguration}
     */
    LogConfiguration,

    /**
     * The LogLevel model constructor.
     * @property {module:model/LogLevel}
     */
    LogLevel,

    /**
     * The NamedLogConfiguration model constructor.
     * @property {module:model/NamedLogConfiguration}
     */
    NamedLogConfiguration,

    /**
     * The RoleMapping model constructor.
     * @property {module:model/RoleMapping}
     */
    RoleMapping,

    /**
     * The RoleType model constructor.
     * @property {module:model/RoleType}
     */
    RoleType,

    /**
     * The Rule model constructor.
     * @property {module:model/Rule}
     */
    Rule,

    /**
     * The RuleType model constructor.
     * @property {module:model/RuleType}
     */
    RuleType,

    /**
     * The RuleViolationCause model constructor.
     * @property {module:model/RuleViolationCause}
     */
    RuleViolationCause,

    /**
     * The RuleViolationError model constructor.
     * @property {module:model/RuleViolationError}
     */
    RuleViolationError,

    /**
     * The SearchedArtifact model constructor.
     * @property {module:model/SearchedArtifact}
     */
    SearchedArtifact,

    /**
     * The SearchedGroup model constructor.
     * @property {module:model/SearchedGroup}
     */
    SearchedGroup,

    /**
     * The SearchedVersion model constructor.
     * @property {module:model/SearchedVersion}
     */
    SearchedVersion,

    /**
     * The SortBy model constructor.
     * @property {module:model/SortBy}
     */
    SortBy,

    /**
     * The SortOrder model constructor.
     * @property {module:model/SortOrder}
     */
    SortOrder,

    /**
     * The SystemInfo model constructor.
     * @property {module:model/SystemInfo}
     */
    SystemInfo,

    /**
     * The UpdateConfigurationProperty model constructor.
     * @property {module:model/UpdateConfigurationProperty}
     */
    UpdateConfigurationProperty,

    /**
     * The UpdateRole model constructor.
     * @property {module:model/UpdateRole}
     */
    UpdateRole,

    /**
     * The UpdateState model constructor.
     * @property {module:model/UpdateState}
     */
    UpdateState,

    /**
     * The UserInfo model constructor.
     * @property {module:model/UserInfo}
     */
    UserInfo,

    /**
     * The VersionMetaData model constructor.
     * @property {module:model/VersionMetaData}
     */
    VersionMetaData,

    /**
     * The VersionSearchResults model constructor.
     * @property {module:model/VersionSearchResults}
     */
    VersionSearchResults,

    /**
    * The AdminApi service constructor.
    * @property {module:api/AdminApi}
    */
    AdminApi,

    /**
    * The ArtifactRulesApi service constructor.
    * @property {module:api/ArtifactRulesApi}
    */
    ArtifactRulesApi,

    /**
    * The ArtifactTypeApi service constructor.
    * @property {module:api/ArtifactTypeApi}
    */
    ArtifactTypeApi,

    /**
    * The ArtifactsApi service constructor.
    * @property {module:api/ArtifactsApi}
    */
    ArtifactsApi,

    /**
    * The GlobalRulesApi service constructor.
    * @property {module:api/GlobalRulesApi}
    */
    GlobalRulesApi,

    /**
    * The GroupsApi service constructor.
    * @property {module:api/GroupsApi}
    */
    GroupsApi,

    /**
    * The MetadataApi service constructor.
    * @property {module:api/MetadataApi}
    */
    MetadataApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi,

    /**
    * The SystemApi service constructor.
    * @property {module:api/SystemApi}
    */
    SystemApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi,

    /**
    * The VersionsApi service constructor.
    * @property {module:api/VersionsApi}
    */
    VersionsApi
};
