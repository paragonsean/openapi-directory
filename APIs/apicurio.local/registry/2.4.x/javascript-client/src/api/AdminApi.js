/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactTypeInfo from '../model/ArtifactTypeInfo';
import ConfigurationProperty from '../model/ConfigurationProperty';
import DownloadRef from '../model/DownloadRef';
import Error from '../model/Error';
import LogConfiguration from '../model/LogConfiguration';
import NamedLogConfiguration from '../model/NamedLogConfiguration';
import RoleMapping from '../model/RoleMapping';
import Rule from '../model/Rule';
import RuleType from '../model/RuleType';
import UpdateConfigurationProperty from '../model/UpdateConfigurationProperty';
import UpdateRole from '../model/UpdateRole';

/**
* Admin service.
* @module api/AdminApi
* @version 2.4.x
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGlobalRule_0 operation.
     * @callback module:api/AdminApi~createGlobalRule_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create global rule
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/Rule} rule 
     * @param {module:api/AdminApi~createGlobalRule_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    createGlobalRule_0(rule, callback) {
      let postBody = rule;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling createGlobalRule_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoleMapping operation.
     * @callback module:api/AdminApi~createRoleMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new role mapping
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)  
     * @param {module:model/RoleMapping} roleMapping 
     * @param {module:api/AdminApi~createRoleMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createRoleMapping(roleMapping, callback) {
      let postBody = roleMapping;
      // verify the required parameter 'roleMapping' is set
      if (roleMapping === undefined || roleMapping === null) {
        throw new Error("Missing the required parameter 'roleMapping' when calling createRoleMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/roleMappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllGlobalRules_0 operation.
     * @callback module:api/AdminApi~deleteAllGlobalRules_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all global rules
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/AdminApi~deleteAllGlobalRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllGlobalRules_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/rules', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlobalRule_0 operation.
     * @callback module:api/AdminApi~deleteGlobalRule_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete global rule
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/RuleType} rule The unique name/type of a rule.
     * @param {module:api/AdminApi~deleteGlobalRule_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGlobalRule_0(rule, callback) {
      let postBody = null;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling deleteGlobalRule_0");
      }

      let pathParams = {
        'rule': rule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/rules/{rule}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleMapping operation.
     * @callback module:api/AdminApi~deleteRoleMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role mapping
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} principalId Unique id of a principal (typically either a user or service account).
     * @param {module:api/AdminApi~deleteRoleMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoleMapping(principalId, callback) {
      let postBody = null;
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling deleteRoleMapping");
      }

      let pathParams = {
        'principalId': principalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/roleMappings/{principalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportData operation.
     * @callback module:api/AdminApi~exportDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadRef} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export registry data
     * Exports registry data as a ZIP archive.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called `href`.  This `href` will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {module:api/AdminApi~exportDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadRef}
     */
    exportData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'forBrowser': opts['forBrowser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/zip'];
      let returnType = DownloadRef;
      return this.apiClient.callApi(
        '/admin/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigProperty operation.
     * @callback module:api/AdminApi~getConfigPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration property value
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} propertyName The name of a configuration property.
     * @param {module:api/AdminApi~getConfigPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationProperty}
     */
    getConfigProperty(propertyName, callback) {
      let postBody = null;
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getConfigProperty");
      }

      let pathParams = {
        'propertyName': propertyName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationProperty;
      return this.apiClient.callApi(
        '/admin/config/properties/{propertyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalRuleConfig_0 operation.
     * @callback module:api/AdminApi~getGlobalRuleConfig_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global rule configuration
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/RuleType} rule The unique name/type of a rule.
     * @param {module:api/AdminApi~getGlobalRuleConfig_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    getGlobalRuleConfig_0(rule, callback) {
      let postBody = null;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling getGlobalRuleConfig_0");
      }

      let pathParams = {
        'rule': rule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/admin/rules/{rule}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogConfiguration operation.
     * @callback module:api/AdminApi~getLogConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamedLogConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single logger configuration
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @param {String} logger The name of a single logger.
     * @param {module:api/AdminApi~getLogConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamedLogConfiguration}
     */
    getLogConfiguration(logger, callback) {
      let postBody = null;
      // verify the required parameter 'logger' is set
      if (logger === undefined || logger === null) {
        throw new Error("Missing the required parameter 'logger' when calling getLogConfiguration");
      }

      let pathParams = {
        'logger': logger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamedLogConfiguration;
      return this.apiClient.callApi(
        '/admin/loggers/{logger}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleMapping operation.
     * @callback module:api/AdminApi~getRoleMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single role mapping
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} principalId Unique id of a principal (typically either a user or service account).
     * @param {module:api/AdminApi~getRoleMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleMapping}
     */
    getRoleMapping(principalId, callback) {
      let postBody = null;
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling getRoleMapping");
      }

      let pathParams = {
        'principalId': principalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleMapping;
      return this.apiClient.callApi(
        '/admin/roleMappings/{principalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importData operation.
     * @callback module:api/AdminApi~importDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import registry data
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @param {File} body The ZIP file representing the previously exported registry data.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {Boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {module:api/AdminApi~importDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importData(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Registry-Preserve-GlobalId': opts['xRegistryPreserveGlobalId'],
        'X-Registry-Preserve-ContentId': opts['xRegistryPreserveContentId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/zip'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifactTypes_0 operation.
     * @callback module:api/AdminApi~listArtifactTypes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArtifactTypeInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifact types
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/AdminApi~listArtifactTypes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArtifactTypeInfo>}
     */
    listArtifactTypes_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArtifactTypeInfo];
      return this.apiClient.callApi(
        '/admin/artifactTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigProperties operation.
     * @callback module:api/AdminApi~listConfigPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all configuration properties
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/AdminApi~listConfigPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationProperty>}
     */
    listConfigProperties(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfigurationProperty];
      return this.apiClient.callApi(
        '/admin/config/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGlobalRules_0 operation.
     * @callback module:api/AdminApi~listGlobalRules_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List global rules
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/AdminApi~listGlobalRules_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleType>}
     */
    listGlobalRules_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleType];
      return this.apiClient.callApi(
        '/admin/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLogConfigurations operation.
     * @callback module:api/AdminApi~listLogConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NamedLogConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List logging configurations
     * List all of the configured logging levels.  These override the default logging configuration.
     * @param {module:api/AdminApi~listLogConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NamedLogConfiguration>}
     */
    listLogConfigurations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NamedLogConfiguration];
      return this.apiClient.callApi(
        '/admin/loggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoleMappings operation.
     * @callback module:api/AdminApi~listRoleMappingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleMapping>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all role mappings
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/AdminApi~listRoleMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleMapping>}
     */
    listRoleMappings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleMapping];
      return this.apiClient.callApi(
        '/admin/roleMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLogConfiguration operation.
     * @callback module:api/AdminApi~removeLogConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamedLogConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes logger configuration
     * Removes the configured logger configuration (if any) for the given logger.
     * @param {String} logger The name of a single logger.
     * @param {module:api/AdminApi~removeLogConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamedLogConfiguration}
     */
    removeLogConfiguration(logger, callback) {
      let postBody = null;
      // verify the required parameter 'logger' is set
      if (logger === undefined || logger === null) {
        throw new Error("Missing the required parameter 'logger' when calling removeLogConfiguration");
      }

      let pathParams = {
        'logger': logger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamedLogConfiguration;
      return this.apiClient.callApi(
        '/admin/loggers/{logger}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetConfigProperty operation.
     * @callback module:api/AdminApi~resetConfigPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a configuration property
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} propertyName The name of a configuration property.
     * @param {module:api/AdminApi~resetConfigPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetConfigProperty(propertyName, callback) {
      let postBody = null;
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling resetConfigProperty");
      }

      let pathParams = {
        'propertyName': propertyName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/config/properties/{propertyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLogConfiguration operation.
     * @callback module:api/AdminApi~setLogConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamedLogConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a logger's configuration
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @param {String} logger The name of a single logger.
     * @param {module:model/LogConfiguration} logConfiguration The new logger configuration.
     * @param {module:api/AdminApi~setLogConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamedLogConfiguration}
     */
    setLogConfiguration(logger, logConfiguration, callback) {
      let postBody = logConfiguration;
      // verify the required parameter 'logger' is set
      if (logger === undefined || logger === null) {
        throw new Error("Missing the required parameter 'logger' when calling setLogConfiguration");
      }
      // verify the required parameter 'logConfiguration' is set
      if (logConfiguration === undefined || logConfiguration === null) {
        throw new Error("Missing the required parameter 'logConfiguration' when calling setLogConfiguration");
      }

      let pathParams = {
        'logger': logger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NamedLogConfiguration;
      return this.apiClient.callApi(
        '/admin/loggers/{logger}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigProperty operation.
     * @callback module:api/AdminApi~updateConfigPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a configuration property
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} propertyName The name of a configuration property.
     * @param {module:model/UpdateConfigurationProperty} updateConfigurationProperty 
     * @param {module:api/AdminApi~updateConfigPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConfigProperty(propertyName, updateConfigurationProperty, callback) {
      let postBody = updateConfigurationProperty;
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling updateConfigProperty");
      }
      // verify the required parameter 'updateConfigurationProperty' is set
      if (updateConfigurationProperty === undefined || updateConfigurationProperty === null) {
        throw new Error("Missing the required parameter 'updateConfigurationProperty' when calling updateConfigProperty");
      }

      let pathParams = {
        'propertyName': propertyName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/config/properties/{propertyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalRuleConfig_0 operation.
     * @callback module:api/AdminApi~updateGlobalRuleConfig_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global rule configuration
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/RuleType} rule The unique name/type of a rule.
     * @param {module:model/Rule} rule2 
     * @param {module:api/AdminApi~updateGlobalRuleConfig_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    updateGlobalRuleConfig_0(rule, rule2, callback) {
      let postBody = rule2;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling updateGlobalRuleConfig_0");
      }
      // verify the required parameter 'rule2' is set
      if (rule2 === undefined || rule2 === null) {
        throw new Error("Missing the required parameter 'rule2' when calling updateGlobalRuleConfig_0");
      }

      let pathParams = {
        'rule': rule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/admin/rules/{rule}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleMapping operation.
     * @callback module:api/AdminApi~updateRoleMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role mapping
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} principalId Unique id of a principal (typically either a user or service account).
     * @param {module:model/UpdateRole} updateRole 
     * @param {module:api/AdminApi~updateRoleMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoleMapping(principalId, updateRole, callback) {
      let postBody = updateRole;
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling updateRoleMapping");
      }
      // verify the required parameter 'updateRole' is set
      if (updateRole === undefined || updateRole === null) {
        throw new Error("Missing the required parameter 'updateRole' when calling updateRoleMapping");
      }

      let pathParams = {
        'principalId': principalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/roleMappings/{principalId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
