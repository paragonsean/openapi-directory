/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Rule from '../model/Rule';
import RuleType from '../model/RuleType';

/**
* GlobalRules service.
* @module api/GlobalRulesApi
* @version 2.4.x
*/
export default class GlobalRulesApi {

    /**
    * Constructs a new GlobalRulesApi. 
    * @alias module:api/GlobalRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGlobalRule operation.
     * @callback module:api/GlobalRulesApi~createGlobalRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create global rule
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/Rule} rule 
     * @param {module:api/GlobalRulesApi~createGlobalRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createGlobalRule(rule, callback) {
      let postBody = rule;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling createGlobalRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllGlobalRules operation.
     * @callback module:api/GlobalRulesApi~deleteAllGlobalRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all global rules
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/GlobalRulesApi~deleteAllGlobalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllGlobalRules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/rules', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlobalRule operation.
     * @callback module:api/GlobalRulesApi~deleteGlobalRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete global rule
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/RuleType} rule The unique name/type of a rule.
     * @param {module:api/GlobalRulesApi~deleteGlobalRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGlobalRule(rule, callback) {
      let postBody = null;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling deleteGlobalRule");
      }

      let pathParams = {
        'rule': rule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/rules/{rule}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalRuleConfig operation.
     * @callback module:api/GlobalRulesApi~getGlobalRuleConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global rule configuration
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/RuleType} rule The unique name/type of a rule.
     * @param {module:api/GlobalRulesApi~getGlobalRuleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    getGlobalRuleConfig(rule, callback) {
      let postBody = null;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling getGlobalRuleConfig");
      }

      let pathParams = {
        'rule': rule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/admin/rules/{rule}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGlobalRules operation.
     * @callback module:api/GlobalRulesApi~listGlobalRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List global rules
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {module:api/GlobalRulesApi~listGlobalRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleType>}
     */
    listGlobalRules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleType];
      return this.apiClient.callApi(
        '/admin/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalRuleConfig operation.
     * @callback module:api/GlobalRulesApi~updateGlobalRuleConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global rule configuration
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {module:model/RuleType} rule The unique name/type of a rule.
     * @param {module:model/Rule} rule2 
     * @param {module:api/GlobalRulesApi~updateGlobalRuleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    updateGlobalRuleConfig(rule, rule2, callback) {
      let postBody = rule2;
      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling updateGlobalRuleConfig");
      }
      // verify the required parameter 'rule2' is set
      if (rule2 === undefined || rule2 === null) {
        throw new Error("Missing the required parameter 'rule2' when calling updateGlobalRuleConfig");
      }

      let pathParams = {
        'rule': rule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/admin/rules/{rule}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
