/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactSearchResults from '../model/ArtifactSearchResults';
import Error from '../model/Error';
import SortBy from '../model/SortBy';
import SortOrder from '../model/SortOrder';

/**
* Search service.
* @module api/SearchApi
* @version 2.4.x
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchArtifacts operation.
     * @callback module:api/SearchApi~searchArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by artifact name.
     * @param {Number} [offset = 0)] The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
     * @param {Number} [limit = 20)] The number of artifacts to return.  Defaults to 20.
     * @param {module:model/SortOrder} [order] Sort order, ascending (`asc`) or descending (`desc`).
     * @param {module:model/SortBy} [orderby] The field to sort by.  Can be one of:  * `name` * `createdOn` 
     * @param {Array.<String>} [labels] Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.
     * @param {Array.<String>} [properties] Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.
     * @param {String} [description] Filter by description.
     * @param {String} [group] Filter by artifact group.
     * @param {Number} [globalId] Filter by globalId.
     * @param {Number} [contentId] Filter by contentId.
     * @param {module:api/SearchApi~searchArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    searchArtifacts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order': opts['order'],
        'orderby': opts['orderby'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'description': opts['description'],
        'group': opts['group'],
        'globalId': opts['globalId'],
        'contentId': opts['contentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArtifactsByContent operation.
     * @callback module:api/SearchApi~searchArtifactsByContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for artifacts by content
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * @param {File} body The content to search for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [canonical] Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.
     * @param {String} [artifactType] Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.
     * @param {Number} [offset = 0)] The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
     * @param {Number} [limit = 20)] The number of artifacts to return.  Defaults to 20.
     * @param {module:model/String} [order] Sort order, ascending (`asc`) or descending (`desc`).
     * @param {module:model/String} [orderby] The field to sort by.  Can be one of:  * `name` * `createdOn` 
     * @param {module:api/SearchApi~searchArtifactsByContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    searchArtifactsByContent(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchArtifactsByContent");
      }

      let pathParams = {
      };
      let queryParams = {
        'canonical': opts['canonical'],
        'artifactType': opts['artifactType'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order': opts['order'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
