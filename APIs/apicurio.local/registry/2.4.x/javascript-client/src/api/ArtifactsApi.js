/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactContent from '../model/ArtifactContent';
import ArtifactMetaData from '../model/ArtifactMetaData';
import ArtifactReference from '../model/ArtifactReference';
import ArtifactSearchResults from '../model/ArtifactSearchResults';
import Error from '../model/Error';
import IfExists from '../model/IfExists';
import RuleViolationError from '../model/RuleViolationError';
import SortBy from '../model/SortBy';
import SortOrder from '../model/SortOrder';
import UpdateState from '../model/UpdateState';

/**
* Artifacts service.
* @module api/ArtifactsApi
* @version 2.4.x
*/
export default class ArtifactsApi {

    /**
    * Constructs a new ArtifactsApi. 
    * @alias module:api/ArtifactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createArtifact operation.
     * @callback module:api/ArtifactsApi~createArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create artifact
     * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request's `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {File} body The content of the artifact being created. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`) 
     * @param {Object} opts Optional parameters
     * @param {String} [xRegistryArtifactType] Specifies the type of the artifact being added. Possible values include:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)
     * @param {String} [xRegistryArtifactId] A client-provided, globally unique identifier for the new artifact.
     * @param {String} [xRegistryVersion] Specifies the version number of this initial version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically (starting with version `1`).
     * @param {module:model/IfExists} [ifExists] Set this option to instruct the server on what to do if the artifact already exists.
     * @param {Boolean} [canonical] Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`, this parameter can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
     * @param {String} [xRegistryDescription] Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
     * @param {String} [xRegistryDescriptionEncoded] Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
     * @param {String} [xRegistryName] Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
     * @param {String} [xRegistryNameEncoded] Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
     * @param {String} [xRegistryContentHash] Specifies the (optional) hash of the artifact to be verified.
     * @param {module:model/String} [xRegistryHashAlgorithm] The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
     * @param {module:api/ArtifactsApi~createArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    createArtifact(groupId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling createArtifact");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createArtifact");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'ifExists': opts['ifExists'],
        'canonical': opts['canonical']
      };
      let headerParams = {
        'X-Registry-ArtifactType': opts['xRegistryArtifactType'],
        'X-Registry-ArtifactId': opts['xRegistryArtifactId'],
        'X-Registry-Version': opts['xRegistryVersion'],
        'X-Registry-Description': opts['xRegistryDescription'],
        'X-Registry-Description-Encoded': opts['xRegistryDescriptionEncoded'],
        'X-Registry-Name': opts['xRegistryName'],
        'X-Registry-Name-Encoded': opts['xRegistryNameEncoded'],
        'X-Registry-Content-Hash': opts['xRegistryContentHash'],
        'X-Registry-Hash-Algorithm': opts['xRegistryHashAlgorithm']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/create.extended+json', 'application/vnd.create.extended+json'];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArtifact operation.
     * @callback module:api/ArtifactsApi~deleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete artifact
     * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {module:api/ArtifactsApi~deleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArtifact(groupId, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling deleteArtifact");
      }

      let pathParams = {
        'groupId': groupId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts/{artifactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArtifactsInGroup operation.
     * @callback module:api/ArtifactsApi~deleteArtifactsInGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete artifacts in group
     * Deletes all of the artifacts that exist in a given group.
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {module:api/ArtifactsApi~deleteArtifactsInGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArtifactsInGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteArtifactsInGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentByGlobalId operation.
     * @callback module:api/ArtifactsApi~getContentByGlobalIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact by global ID
     * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} globalId Global identifier for an artifact version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
     * @param {module:api/ArtifactsApi~getContentByGlobalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContentByGlobalId(globalId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling getContentByGlobalId");
      }

      let pathParams = {
        'globalId': globalId
      };
      let queryParams = {
        'dereference': opts['dereference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ids/globalIds/{globalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentByHash operation.
     * @callback module:api/ArtifactsApi~getContentByHashCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact content by SHA-256 hash
     * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} contentHash SHA-256 content hash for a single artifact content.
     * @param {module:api/ArtifactsApi~getContentByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContentByHash(contentHash, callback) {
      let postBody = null;
      // verify the required parameter 'contentHash' is set
      if (contentHash === undefined || contentHash === null) {
        throw new Error("Missing the required parameter 'contentHash' when calling getContentByHash");
      }

      let pathParams = {
        'contentHash': contentHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ids/contentHashes/{contentHash}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentById operation.
     * @callback module:api/ArtifactsApi~getContentByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact content by ID
     * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} contentId Global identifier for a single artifact content.
     * @param {module:api/ArtifactsApi~getContentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContentById(contentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getContentById");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ids/contentIds/{contentId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestArtifact operation.
     * @callback module:api/ArtifactsApi~getLatestArtifactCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest artifact
     * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`). If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
     * @param {module:api/ArtifactsApi~getLatestArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getLatestArtifact(groupId, artifactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getLatestArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getLatestArtifact");
      }

      let pathParams = {
        'groupId': groupId,
        'artifactId': artifactId
      };
      let queryParams = {
        'dereference': opts['dereference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts/{artifactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifactsInGroup operation.
     * @callback module:api/ArtifactsApi~listArtifactsInGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifacts in group
     * Returns a list of all artifacts in the group.  This list is paged.
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The number of artifacts to return.  Defaults to 20.
     * @param {Number} [offset] The number of artifacts to skip before starting the result set.  Defaults to 0.
     * @param {module:model/SortOrder} [order] Sort order, ascending (`asc`) or descending (`desc`).
     * @param {module:model/SortBy} [orderby] The field to sort by.  Can be one of:  * `name` * `createdOn` 
     * @param {module:api/ArtifactsApi~listArtifactsInGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    listArtifactsInGroup(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling listArtifactsInGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referencesByContentHash operation.
     * @callback module:api/ArtifactsApi~referencesByContentHashCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArtifactReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifact references by hash
     * Returns a list containing all the artifact references using the artifact content hash.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`) 
     * @param {String} contentHash SHA-256 content hash for a single artifact content.
     * @param {module:api/ArtifactsApi~referencesByContentHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArtifactReference>}
     */
    referencesByContentHash(contentHash, callback) {
      let postBody = null;
      // verify the required parameter 'contentHash' is set
      if (contentHash === undefined || contentHash === null) {
        throw new Error("Missing the required parameter 'contentHash' when calling referencesByContentHash");
      }

      let pathParams = {
        'contentHash': contentHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArtifactReference];
      return this.apiClient.callApi(
        '/ids/contentHashes/{contentHash}/references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referencesByContentId operation.
     * @callback module:api/ArtifactsApi~referencesByContentIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArtifactReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifact references by content ID
     * Returns a list containing all the artifact references using the artifact content ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @param {Number} contentId Global identifier for a single artifact content.
     * @param {module:api/ArtifactsApi~referencesByContentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArtifactReference>}
     */
    referencesByContentId(contentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling referencesByContentId");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArtifactReference];
      return this.apiClient.callApi(
        '/ids/contentIds/{contentId}/references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referencesByGlobalId operation.
     * @callback module:api/ArtifactsApi~referencesByGlobalIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArtifactReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifact references by global ID
     * Returns a list containing all the artifact references using the artifact global ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @param {Number} globalId Global identifier for an artifact version.
     * @param {module:api/ArtifactsApi~referencesByGlobalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArtifactReference>}
     */
    referencesByGlobalId(globalId, callback) {
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling referencesByGlobalId");
      }

      let pathParams = {
        'globalId': globalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArtifactReference];
      return this.apiClient.callApi(
        '/ids/globalIds/{globalId}/references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArtifactsByContent_0 operation.
     * @callback module:api/ArtifactsApi~searchArtifactsByContent_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for artifacts by content
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * @param {File} body The content to search for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [canonical] Parameter that can be set to `true` to indicate that the server should \"canonicalize\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter.
     * @param {String} [artifactType] Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts.
     * @param {Number} [offset = 0)] The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
     * @param {Number} [limit = 20)] The number of artifacts to return.  Defaults to 20.
     * @param {module:model/String} [order] Sort order, ascending (`asc`) or descending (`desc`).
     * @param {module:model/String} [orderby] The field to sort by.  Can be one of:  * `name` * `createdOn` 
     * @param {module:api/ArtifactsApi~searchArtifactsByContent_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    searchArtifactsByContent_0(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchArtifactsByContent_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'canonical': opts['canonical'],
        'artifactType': opts['artifactType'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order': opts['order'],
        'orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArtifacts_0 operation.
     * @callback module:api/ArtifactsApi~searchArtifacts_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by artifact name.
     * @param {Number} [offset = 0)] The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
     * @param {Number} [limit = 20)] The number of artifacts to return.  Defaults to 20.
     * @param {module:model/SortOrder} [order] Sort order, ascending (`asc`) or descending (`desc`).
     * @param {module:model/SortBy} [orderby] The field to sort by.  Can be one of:  * `name` * `createdOn` 
     * @param {Array.<String>} [labels] Filter by label.  Include one or more label to only return artifacts containing all of the specified labels.
     * @param {Array.<String>} [properties] Filter by one or more name/value property.  Separate each name/value pair using a colon.  For example `properties=foo:bar` will return only artifacts with a custom property named `foo` and value `bar`.
     * @param {String} [description] Filter by description.
     * @param {String} [group] Filter by artifact group.
     * @param {Number} [globalId] Filter by globalId.
     * @param {Number} [contentId] Filter by contentId.
     * @param {module:api/ArtifactsApi~searchArtifacts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    searchArtifacts_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order': opts['order'],
        'orderby': opts['orderby'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'description': opts['description'],
        'group': opts['group'],
        'globalId': opts['globalId'],
        'contentId': opts['contentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifact operation.
     * @callback module:api/ArtifactsApi~updateArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact
     * Updates an artifact by uploading new content.  The body of the request can be the raw content of the artifact or a JSON object containing both the raw content and a set of references to other artifacts..  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact's type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {File} body The new content of the artifact being updated. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`) 
     * @param {Object} opts Optional parameters
     * @param {String} [xRegistryVersion] Specifies the version number of this new version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically.
     * @param {String} [xRegistryName] Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
     * @param {String} [xRegistryNameEncoded] Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
     * @param {String} [xRegistryDescription] Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
     * @param {String} [xRegistryDescriptionEncoded] Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
     * @param {module:api/ArtifactsApi~updateArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    updateArtifact(groupId, artifactId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifact");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateArtifact");
      }

      let pathParams = {
        'groupId': groupId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Registry-Version': opts['xRegistryVersion'],
        'X-Registry-Name': opts['xRegistryName'],
        'X-Registry-Name-Encoded': opts['xRegistryNameEncoded'],
        'X-Registry-Description': opts['xRegistryDescription'],
        'X-Registry-Description-Encoded': opts['xRegistryDescriptionEncoded']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/create.extended+json', 'application/vnd.create.extended+json'];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts/{artifactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifactState operation.
     * @callback module:api/ArtifactsApi~updateArtifactStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact state
     * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`. The operation changes the state of the latest version of the artifact, even if this version is `DISABLED`. If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {module:model/UpdateState} updateState 
     * @param {module:api/ArtifactsApi~updateArtifactStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArtifactState(groupId, artifactId, updateState, callback) {
      let postBody = updateState;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateArtifactState");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifactState");
      }
      // verify the required parameter 'updateState' is set
      if (updateState === undefined || updateState === null) {
        throw new Error("Missing the required parameter 'updateState' when calling updateArtifactState");
      }

      let pathParams = {
        'groupId': groupId,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{groupId}/artifacts/{artifactId}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
