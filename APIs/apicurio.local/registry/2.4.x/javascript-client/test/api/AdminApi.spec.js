/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApicurioRegistryApiV2);
  }
}(this, function(expect, ApicurioRegistryApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApicurioRegistryApiV2.AdminApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AdminApi', function() {
    describe('createGlobalRule_0', function() {
      it('should call createGlobalRule_0 successfully', function(done) {
        //uncomment below and update the code to test createGlobalRule_0
        //instance.createGlobalRule_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoleMapping', function() {
      it('should call createRoleMapping successfully', function(done) {
        //uncomment below and update the code to test createRoleMapping
        //instance.createRoleMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllGlobalRules_0', function() {
      it('should call deleteAllGlobalRules_0 successfully', function(done) {
        //uncomment below and update the code to test deleteAllGlobalRules_0
        //instance.deleteAllGlobalRules_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGlobalRule_0', function() {
      it('should call deleteGlobalRule_0 successfully', function(done) {
        //uncomment below and update the code to test deleteGlobalRule_0
        //instance.deleteGlobalRule_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoleMapping', function() {
      it('should call deleteRoleMapping successfully', function(done) {
        //uncomment below and update the code to test deleteRoleMapping
        //instance.deleteRoleMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportData', function() {
      it('should call exportData successfully', function(done) {
        //uncomment below and update the code to test exportData
        //instance.exportData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfigProperty', function() {
      it('should call getConfigProperty successfully', function(done) {
        //uncomment below and update the code to test getConfigProperty
        //instance.getConfigProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGlobalRuleConfig_0', function() {
      it('should call getGlobalRuleConfig_0 successfully', function(done) {
        //uncomment below and update the code to test getGlobalRuleConfig_0
        //instance.getGlobalRuleConfig_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLogConfiguration', function() {
      it('should call getLogConfiguration successfully', function(done) {
        //uncomment below and update the code to test getLogConfiguration
        //instance.getLogConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoleMapping', function() {
      it('should call getRoleMapping successfully', function(done) {
        //uncomment below and update the code to test getRoleMapping
        //instance.getRoleMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importData', function() {
      it('should call importData successfully', function(done) {
        //uncomment below and update the code to test importData
        //instance.importData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listArtifactTypes_0', function() {
      it('should call listArtifactTypes_0 successfully', function(done) {
        //uncomment below and update the code to test listArtifactTypes_0
        //instance.listArtifactTypes_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigProperties', function() {
      it('should call listConfigProperties successfully', function(done) {
        //uncomment below and update the code to test listConfigProperties
        //instance.listConfigProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGlobalRules_0', function() {
      it('should call listGlobalRules_0 successfully', function(done) {
        //uncomment below and update the code to test listGlobalRules_0
        //instance.listGlobalRules_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLogConfigurations', function() {
      it('should call listLogConfigurations successfully', function(done) {
        //uncomment below and update the code to test listLogConfigurations
        //instance.listLogConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoleMappings', function() {
      it('should call listRoleMappings successfully', function(done) {
        //uncomment below and update the code to test listRoleMappings
        //instance.listRoleMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeLogConfiguration', function() {
      it('should call removeLogConfiguration successfully', function(done) {
        //uncomment below and update the code to test removeLogConfiguration
        //instance.removeLogConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetConfigProperty', function() {
      it('should call resetConfigProperty successfully', function(done) {
        //uncomment below and update the code to test resetConfigProperty
        //instance.resetConfigProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLogConfiguration', function() {
      it('should call setLogConfiguration successfully', function(done) {
        //uncomment below and update the code to test setLogConfiguration
        //instance.setLogConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConfigProperty', function() {
      it('should call updateConfigProperty successfully', function(done) {
        //uncomment below and update the code to test updateConfigProperty
        //instance.updateConfigProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGlobalRuleConfig_0', function() {
      it('should call updateGlobalRuleConfig_0 successfully', function(done) {
        //uncomment below and update the code to test updateGlobalRuleConfig_0
        //instance.updateGlobalRuleConfig_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoleMapping', function() {
      it('should call updateRoleMapping successfully', function(done) {
        //uncomment below and update the code to test updateRoleMapping
        //instance.updateRoleMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
