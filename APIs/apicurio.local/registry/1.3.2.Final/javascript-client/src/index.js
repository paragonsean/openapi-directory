/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ArtifactMetaData from './model/ArtifactMetaData';
import ArtifactSearchResults from './model/ArtifactSearchResults';
import ArtifactState from './model/ArtifactState';
import ArtifactType from './model/ArtifactType';
import EditableMetaData from './model/EditableMetaData';
import Error from './model/Error';
import Rule from './model/Rule';
import RuleType from './model/RuleType';
import SearchOver from './model/SearchOver';
import SearchedArtifact from './model/SearchedArtifact';
import SearchedVersion from './model/SearchedVersion';
import SortOrder from './model/SortOrder';
import UpdateState from './model/UpdateState';
import VersionMetaData from './model/VersionMetaData';
import VersionSearchResults from './model/VersionSearchResults';
import ArtifactRulesApi from './api/ArtifactRulesApi';
import ArtifactsApi from './api/ArtifactsApi';
import GlobalRulesApi from './api/GlobalRulesApi';
import MetadataApi from './api/MetadataApi';
import SearchApi from './api/SearchApi';
import VersionsApi from './api/VersionsApi';


/**
* Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from &#x60;http://MY-REGISTRY-URL/api&#x60;. You must prefix all API operation paths with &#x60;/api&#x60;, for example, &#x60;api/ids/{globalId}&#x60;. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ApicurioRegistryApi = require('index'); // See note below*.
* var xxxSvc = new ApicurioRegistryApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ApicurioRegistryApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ApicurioRegistryApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ApicurioRegistryApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.3.2.Final
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ArtifactMetaData model constructor.
     * @property {module:model/ArtifactMetaData}
     */
    ArtifactMetaData,

    /**
     * The ArtifactSearchResults model constructor.
     * @property {module:model/ArtifactSearchResults}
     */
    ArtifactSearchResults,

    /**
     * The ArtifactState model constructor.
     * @property {module:model/ArtifactState}
     */
    ArtifactState,

    /**
     * The ArtifactType model constructor.
     * @property {module:model/ArtifactType}
     */
    ArtifactType,

    /**
     * The EditableMetaData model constructor.
     * @property {module:model/EditableMetaData}
     */
    EditableMetaData,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Rule model constructor.
     * @property {module:model/Rule}
     */
    Rule,

    /**
     * The RuleType model constructor.
     * @property {module:model/RuleType}
     */
    RuleType,

    /**
     * The SearchOver model constructor.
     * @property {module:model/SearchOver}
     */
    SearchOver,

    /**
     * The SearchedArtifact model constructor.
     * @property {module:model/SearchedArtifact}
     */
    SearchedArtifact,

    /**
     * The SearchedVersion model constructor.
     * @property {module:model/SearchedVersion}
     */
    SearchedVersion,

    /**
     * The SortOrder model constructor.
     * @property {module:model/SortOrder}
     */
    SortOrder,

    /**
     * The UpdateState model constructor.
     * @property {module:model/UpdateState}
     */
    UpdateState,

    /**
     * The VersionMetaData model constructor.
     * @property {module:model/VersionMetaData}
     */
    VersionMetaData,

    /**
     * The VersionSearchResults model constructor.
     * @property {module:model/VersionSearchResults}
     */
    VersionSearchResults,

    /**
    * The ArtifactRulesApi service constructor.
    * @property {module:api/ArtifactRulesApi}
    */
    ArtifactRulesApi,

    /**
    * The ArtifactsApi service constructor.
    * @property {module:api/ArtifactsApi}
    */
    ArtifactsApi,

    /**
    * The GlobalRulesApi service constructor.
    * @property {module:api/GlobalRulesApi}
    */
    GlobalRulesApi,

    /**
    * The MetadataApi service constructor.
    * @property {module:api/MetadataApi}
    */
    MetadataApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi,

    /**
    * The VersionsApi service constructor.
    * @property {module:api/VersionsApi}
    */
    VersionsApi
};
