/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SearchedVersion from './SearchedVersion';

/**
 * The VersionSearchResults model module.
 * @module model/VersionSearchResults
 * @version 1.3.2.Final
 */
class VersionSearchResults {
    /**
     * Constructs a new <code>VersionSearchResults</code>.
     * Describes the response received when searching for artifacts.
     * @alias module:model/VersionSearchResults
     * @param count {Number} The total number of artifacts that matched the search criteria.
     * @param versions {Array.<module:model/SearchedVersion>} 
     */
    constructor(count, versions) { 
        
        VersionSearchResults.initialize(this, count, versions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, versions) { 
        obj['count'] = count;
        obj['versions'] = versions;
    }

    /**
     * Constructs a <code>VersionSearchResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionSearchResults} obj Optional instance to populate.
     * @return {module:model/VersionSearchResults} The populated <code>VersionSearchResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionSearchResults();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [SearchedVersion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionSearchResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionSearchResults</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VersionSearchResults.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                SearchedVersion.validateJSON(item);
            };
        }

        return true;
    }


}

VersionSearchResults.RequiredProperties = ["count", "versions"];

/**
 * The total number of artifacts that matched the search criteria.
 * @member {Number} count
 */
VersionSearchResults.prototype['count'] = undefined;

/**
 * 
 * @member {Array.<module:model/SearchedVersion>} versions
 */
VersionSearchResults.prototype['versions'] = undefined;






export default VersionSearchResults;

