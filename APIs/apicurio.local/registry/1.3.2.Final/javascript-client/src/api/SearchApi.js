/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactSearchResults from '../model/ArtifactSearchResults';
import Error from '../model/Error';
import VersionSearchResults from '../model/VersionSearchResults';

/**
* Search service.
* @module api/SearchApi
* @version 1.3.2.Final
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchArtifacts operation.
     * @callback module:api/SearchApi~searchArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided search criteria. 
     * @param {Number} offset The number of artifacts to skip before starting to collect the result set.
     * @param {Number} limit The number of artifacts to return.
     * @param {Object} opts Optional parameters
     * @param {String} [search] The text to search.
     * @param {module:model/String} [over] What fields to search.
     * @param {module:model/String} [order] Sort order, ascending or descending.
     * @param {module:api/SearchApi~searchArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    searchArtifacts(offset, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchArtifacts");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling searchArtifacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'offset': offset,
        'limit': limit,
        'over': opts['over'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersions operation.
     * @callback module:api/SearchApi~searchVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search artifact versions
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {Number} offset The number of versions to skip before starting to collect the result set.
     * @param {Number} limit The number of versions to return.
     * @param {module:api/SearchApi~searchVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionSearchResults}
     */
    searchVersions(artifactId, offset, limit, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling searchVersions");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchVersions");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling searchVersions");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
        'offset': offset,
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VersionSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts/{artifactId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
