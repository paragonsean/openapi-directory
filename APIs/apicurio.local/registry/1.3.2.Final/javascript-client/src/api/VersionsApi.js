/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import UpdateState from '../model/UpdateState';
import VersionMetaData from '../model/VersionMetaData';
import VersionSearchResults from '../model/VersionSearchResults';

/**
* Versions service.
* @module api/VersionsApi
* @version 1.3.2.Final
*/
export default class VersionsApi {

    /**
    * Constructs a new VersionsApi. 
    * @alias module:api/VersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createArtifactVersion operation.
     * @callback module:api/VersionsApi~createArtifactVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create artifact version
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request should be the raw content of the new artifact version.  This  is typically in JSON format for *most* of the supported types, but may be in another  format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * Protobuf File Descriptor (`PROTOBUF_FD`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can explicitly specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or by including a hint in the request's `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with this `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xRegistryArtifactType] This header parameter can be used to indicate the type of the artifact being added. Possible values include:  * Avro (`AVRO`)    * Protobuf (`PROTOBUF`)   * Protobuf File Descriptor (`PROTOBUF_FD`)    * JSON Schema (`JSON`)    * Kafka Connect (`KCONNECT`)    * OpenAPI (`OPENAPI`)    * AsyncAPI (`ASYNCAPI`)   * GraphQL (`GRAPHQL`)    * Web Services Description Language (`WSDL`)    * XML Schema (`XSD`)
     * @param {module:api/VersionsApi~createArtifactVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionMetaData}
     */
    createArtifactVersion(artifactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling createArtifactVersion");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Registry-ArtifactType': opts['xRegistryArtifactType']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VersionMetaData;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifactVersion operation.
     * @callback module:api/VersionsApi~getArtifactVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact version
     * Retrieves a single version of the artifact content.  Both the `artifactId` and the unique `version` number must be provided.  The `Content-Type` of the response depends  on the artifact type.  In most cases, this is `application/json`, but for some types  it may be different (for example, `PROTOBUF`).  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} version The unique identifier of a specific version of the artifact content.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/VersionsApi~getArtifactVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArtifactVersion(version, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getArtifactVersion");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getArtifactVersion");
      }

      let pathParams = {
        'version': version,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/graphql', 'application/json', 'application/x-protobuf', 'application/x-protobuffer'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifactVersions operation.
     * @callback module:api/VersionsApi~listArtifactVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifact versions
     * Returns a list of all version numbers for the artifact.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/VersionsApi~listArtifactVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    listArtifactVersions(artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling listArtifactVersions");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersions_0 operation.
     * @callback module:api/VersionsApi~searchVersions_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search artifact versions
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {Number} offset The number of versions to skip before starting to collect the result set.
     * @param {Number} limit The number of versions to return.
     * @param {module:api/VersionsApi~searchVersions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionSearchResults}
     */
    searchVersions_0(artifactId, offset, limit, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling searchVersions_0");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchVersions_0");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling searchVersions_0");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
        'offset': offset,
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VersionSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts/{artifactId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifactVersionState operation.
     * @callback module:api/VersionsApi~updateArtifactVersionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact version state
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  The following state changes are supported:  * Enabled -> Disabled * Enabled -> Deprecated * Enabled -> Deleted * Disabled -> Enabled * Disabled -> Deleted * Disabled -> Deprecated * Deprecated -> Deleted  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * Artifact version cannot transition to the given state (HTTP error `400`) * A server error occurred (HTTP error `500`) 
     * @param {Number} version The unique identifier of a specific version of the artifact content.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:model/UpdateState} updateState 
     * @param {module:api/VersionsApi~updateArtifactVersionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArtifactVersionState(version, artifactId, updateState, callback) {
      let postBody = updateState;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateArtifactVersionState");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifactVersionState");
      }
      // verify the required parameter 'updateState' is set
      if (updateState === undefined || updateState === null) {
        throw new Error("Missing the required parameter 'updateState' when calling updateArtifactVersionState");
      }

      let pathParams = {
        'version': version,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions/{version}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
