/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactMetaData from '../model/ArtifactMetaData';
import EditableMetaData from '../model/EditableMetaData';
import Error from '../model/Error';
import VersionMetaData from '../model/VersionMetaData';

/**
* Metadata service.
* @module api/MetadataApi
* @version 1.3.2.Final
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteArtifactVersionMetaData operation.
     * @callback module:api/MetadataApi~deleteArtifactVersionMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete artifact version metadata
     * Deletes the user-editable metadata properties of the artifact version.  Any properties that are not user-editable are preserved.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} version The unique identifier of a specific version of the artifact content.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/MetadataApi~deleteArtifactVersionMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArtifactVersionMetaData(version, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteArtifactVersionMetaData");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling deleteArtifactVersionMetaData");
      }

      let pathParams = {
        'version': version,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions/{version}/meta', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifactMetaData operation.
     * @callback module:api/MetadataApi~getArtifactMetaDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact metadata
     * Gets the metadata for an artifact in the registry, based on the latest version. If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used. The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/MetadataApi~getArtifactMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    getArtifactMetaData(artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getArtifactMetaData");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifactMetaDataByContent operation.
     * @callback module:api/MetadataApi~getArtifactMetaDataByContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact metadata by content
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry for a version of the given artifact matching the content provided in the body of the POST.  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * No artifact version matching the provided content exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/MetadataApi~getArtifactMetaDataByContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    getArtifactMetaDataByContent(artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getArtifactMetaDataByContent");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/meta', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifactMetaDataByGlobalId operation.
     * @callback module:api/MetadataApi~getArtifactMetaDataByGlobalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global artifact metadata
     * Gets the metadata for an artifact version in the registry using its globally unique identifier.  The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} globalId Global identifier for an artifact version.
     * @param {module:api/MetadataApi~getArtifactMetaDataByGlobalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    getArtifactMetaDataByGlobalId(globalId, callback) {
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling getArtifactMetaDataByGlobalId");
      }

      let pathParams = {
        'globalId': globalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/ids/{globalId}/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifactVersionMetaData operation.
     * @callback module:api/MetadataApi~getArtifactVersionMetaDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact version metadata
     * Retrieves the metadata for a single version of the artifact.  The version metadata is  a subset of the artifact metadata and only includes the metadata that is specific to the version (for example, this doesn't include `modifiedOn`).  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} version The unique identifier of a specific version of the artifact content.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/MetadataApi~getArtifactVersionMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionMetaData}
     */
    getArtifactVersionMetaData(version, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getArtifactVersionMetaData");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getArtifactVersionMetaData");
      }

      let pathParams = {
        'version': version,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VersionMetaData;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions/{version}/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifactMetaData operation.
     * @callback module:api/MetadataApi~updateArtifactMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact metadata
     * Updates the editable parts of the artifact's metadata.  Not all metadata fields can be updated.  For example, `createdOn` and `createdBy` are both read-only properties.  This operation can fail for the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:model/EditableMetaData} editableMetaData Updated artifact metadata.
     * @param {module:api/MetadataApi~updateArtifactMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArtifactMetaData(artifactId, editableMetaData, callback) {
      let postBody = editableMetaData;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifactMetaData");
      }
      // verify the required parameter 'editableMetaData' is set
      if (editableMetaData === undefined || editableMetaData === null) {
        throw new Error("Missing the required parameter 'editableMetaData' when calling updateArtifactMetaData");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/meta', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifactVersionMetaData operation.
     * @callback module:api/MetadataApi~updateArtifactVersionMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact version metadata
     * Updates the user-editable portion of the artifact version's metadata.  Only some of  the metadata fields are editable by the user.  For example, `description` is editable,  but `createdOn` is not.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} version The unique identifier of a specific version of the artifact content.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:model/EditableMetaData} editableMetaData 
     * @param {module:api/MetadataApi~updateArtifactVersionMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArtifactVersionMetaData(version, artifactId, editableMetaData, callback) {
      let postBody = editableMetaData;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateArtifactVersionMetaData");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifactVersionMetaData");
      }
      // verify the required parameter 'editableMetaData' is set
      if (editableMetaData === undefined || editableMetaData === null) {
        throw new Error("Missing the required parameter 'editableMetaData' when calling updateArtifactVersionMetaData");
      }

      let pathParams = {
        'version': version,
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/versions/{version}/meta', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
