/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactMetaData from '../model/ArtifactMetaData';
import ArtifactSearchResults from '../model/ArtifactSearchResults';
import Error from '../model/Error';
import UpdateState from '../model/UpdateState';

/**
* Artifacts service.
* @module api/ArtifactsApi
* @version 1.3.2.Final
*/
export default class ArtifactsApi {

    /**
    * Constructs a new ArtifactsApi. 
    * @alias module:api/ArtifactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createArtifact operation.
     * @callback module:api/ArtifactsApi~createArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create artifact
     * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * Protobuf File Descriptor (`PROTOBUF_FD`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request's `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xRegistryArtifactType] Specifies the type of the artifact being added. Possible values include:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * Protobuf File Descriptor (`PROTOBUF_FD`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)
     * @param {String} [xRegistryArtifactId] A client-provided, globally unique identifier for the new artifact.
     * @param {module:model/String} [ifExists] Set this option to instruct the server on what to do if the artifact already exists.
     * @param {module:api/ArtifactsApi~createArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    createArtifact(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ifExists': opts['ifExists']
      };
      let headerParams = {
        'X-Registry-ArtifactType': opts['xRegistryArtifactType'],
        'X-Registry-ArtifactId': opts['xRegistryArtifactId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArtifact operation.
     * @callback module:api/ArtifactsApi~deleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete artifact
     * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/ArtifactsApi~deleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArtifact(artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling deleteArtifact");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtifactByGlobalId operation.
     * @callback module:api/ArtifactsApi~getArtifactByGlobalIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artifact by global ID
     * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {Number} globalId Global identifier for an artifact version.
     * @param {module:api/ArtifactsApi~getArtifactByGlobalIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArtifactByGlobalId(globalId, callback) {
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling getArtifactByGlobalId");
      }

      let pathParams = {
        'globalId': globalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-protobuf', 'application/x-protobuffer'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ids/{globalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestArtifact operation.
     * @callback module:api/ArtifactsApi~getLatestArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest artifact
     * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but for some types it may be different (for example, `PROTOBUF`). If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:api/ArtifactsApi~getLatestArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLatestArtifact(artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling getLatestArtifact");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/graphql', 'application/json', 'application/x-protobuf', 'application/x-protobuffer'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifacts operation.
     * @callback module:api/ArtifactsApi~listArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all artifact IDs
     * Returns a list of IDs of all artifacts in the registry as a flat list.  Typically the server is configured to limit the number of artifact IDs returned when a large number  of artifacts exist. In this case, the result of this call may be non-deterministic. The  default limit is typically 1000 artifacts.
     * @param {module:api/ArtifactsApi~listArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listArtifacts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArtifacts_0 operation.
     * @callback module:api/ArtifactsApi~searchArtifacts_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided search criteria. 
     * @param {Number} offset The number of artifacts to skip before starting to collect the result set.
     * @param {Number} limit The number of artifacts to return.
     * @param {Object} opts Optional parameters
     * @param {String} [search] The text to search.
     * @param {module:model/String} [over] What fields to search.
     * @param {module:model/String} [order] Sort order, ascending or descending.
     * @param {module:api/ArtifactsApi~searchArtifacts_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactSearchResults}
     */
    searchArtifacts_0(offset, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchArtifacts_0");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling searchArtifacts_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'offset': offset,
        'limit': limit,
        'over': opts['over'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactSearchResults;
      return this.apiClient.callApi(
        '/search/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifact operation.
     * @callback module:api/ArtifactsApi~updateArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact
     * Updates an artifact by uploading new content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * Protobuf File Descriptor (`PROTOBUF_FD`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request's `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * The provided artifact type is not recognized (HTTP error `404`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xRegistryArtifactType] Specifies the type of the artifact being added.  Possible values include:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * Protobuf File Descriptor (`PROTOBUF_FD`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)
     * @param {module:api/ArtifactsApi~updateArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactMetaData}
     */
    updateArtifact(artifactId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifact");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Registry-ArtifactType': opts['xRegistryArtifactType']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactMetaData;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifactState operation.
     * @callback module:api/ArtifactsApi~updateArtifactStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update artifact state
     * Updates the state of the artifact. For example, you can use this to mark the latest version of an artifact as `DEPRECATED`. The operation changes the state of the latest version of the artifact, even if this version is `DISABLED`. If multiple versions exist, only the most recent is changed.  The following state changes are supported:  * Enabled -> Disabled * Enabled -> Deprecated * Enabled -> Deleted * Disabled -> Enabled * Disabled -> Deleted * Disabled -> Deprecated * Deprecated -> Deleted  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * Artifact cannot transition to the given state (HTTP error `400`) * A server error occurred (HTTP error `500`) 
     * @param {String} artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.
     * @param {module:model/UpdateState} updateState 
     * @param {module:api/ArtifactsApi~updateArtifactStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateArtifactState(artifactId, updateState, callback) {
      let postBody = updateState;
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling updateArtifactState");
      }
      // verify the required parameter 'updateState' is set
      if (updateState === undefined || updateState === null) {
        throw new Error("Missing the required parameter 'updateState' when calling updateArtifactState");
      }

      let pathParams = {
        'artifactId': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifacts/{artifactId}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
