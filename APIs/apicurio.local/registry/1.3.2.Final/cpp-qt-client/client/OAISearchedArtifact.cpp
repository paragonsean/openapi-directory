/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchedArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchedArtifact::OAISearchedArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchedArtifact::OAISearchedArtifact() {
    this->initializeModel();
}

OAISearchedArtifact::~OAISearchedArtifact() {}

void OAISearchedArtifact::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_modified_by_isSet = false;
    m_modified_by_isValid = false;

    m_modified_on_isSet = false;
    m_modified_on_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearchedArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchedArtifact::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_modified_by_isValid = ::OpenAPI::fromJsonValue(m_modified_by, json[QString("modifiedBy")]);
    m_modified_by_isSet = !json[QString("modifiedBy")].isNull() && m_modified_by_isValid;

    m_modified_on_isValid = ::OpenAPI::fromJsonValue(m_modified_on, json[QString("modifiedOn")]);
    m_modified_on_isSet = !json[QString("modifiedOn")].isNull() && m_modified_on_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISearchedArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchedArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_modified_by_isSet) {
        obj.insert(QString("modifiedBy"), ::OpenAPI::toJsonValue(m_modified_by));
    }
    if (m_modified_on_isSet) {
        obj.insert(QString("modifiedOn"), ::OpenAPI::toJsonValue(m_modified_on));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISearchedArtifact::getCreatedBy() const {
    return m_created_by;
}
void OAISearchedArtifact::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISearchedArtifact::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISearchedArtifact::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAISearchedArtifact::getCreatedOn() const {
    return m_created_on;
}
void OAISearchedArtifact::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAISearchedArtifact::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAISearchedArtifact::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAISearchedArtifact::getDescription() const {
    return m_description;
}
void OAISearchedArtifact::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchedArtifact::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchedArtifact::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISearchedArtifact::getId() const {
    return m_id;
}
void OAISearchedArtifact::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchedArtifact::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchedArtifact::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAISearchedArtifact::getLabels() const {
    return m_labels;
}
void OAISearchedArtifact::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISearchedArtifact::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISearchedArtifact::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISearchedArtifact::getModifiedBy() const {
    return m_modified_by;
}
void OAISearchedArtifact::setModifiedBy(const QString &modified_by) {
    m_modified_by = modified_by;
    m_modified_by_isSet = true;
}

bool OAISearchedArtifact::is_modified_by_Set() const{
    return m_modified_by_isSet;
}

bool OAISearchedArtifact::is_modified_by_Valid() const{
    return m_modified_by_isValid;
}

QDateTime OAISearchedArtifact::getModifiedOn() const {
    return m_modified_on;
}
void OAISearchedArtifact::setModifiedOn(const QDateTime &modified_on) {
    m_modified_on = modified_on;
    m_modified_on_isSet = true;
}

bool OAISearchedArtifact::is_modified_on_Set() const{
    return m_modified_on_isSet;
}

bool OAISearchedArtifact::is_modified_on_Valid() const{
    return m_modified_on_isValid;
}

QString OAISearchedArtifact::getName() const {
    return m_name;
}
void OAISearchedArtifact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchedArtifact::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchedArtifact::is_name_Valid() const{
    return m_name_isValid;
}

OAIArtifactState OAISearchedArtifact::getState() const {
    return m_state;
}
void OAISearchedArtifact::setState(const OAIArtifactState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISearchedArtifact::is_state_Set() const{
    return m_state_isSet;
}

bool OAISearchedArtifact::is_state_Valid() const{
    return m_state_isValid;
}

OAIArtifactType OAISearchedArtifact::getType() const {
    return m_type;
}
void OAISearchedArtifact::setType(const OAIArtifactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchedArtifact::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchedArtifact::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearchedArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchedArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_by_isValid && m_created_on_isValid && m_id_isValid && m_state_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
