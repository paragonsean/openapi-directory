/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtifactsApi_H
#define OAI_OAIArtifactsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifactMetaData.h"
#include "OAIArtifactSearchResults.h"
#include "OAIError.h"
#include "OAIUpdateState.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtifactsApi : public QObject {
    Q_OBJECT

public:
    OAIArtifactsApi(const int timeOut = 0);
    ~OAIArtifactsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_registry_artifact_type QString [optional]
    * @param[in]  x_registry_artifact_id QString [optional]
    * @param[in]  if_exists QString [optional]
    */
    virtual void createArtifact(const ::OpenAPI::OptionalParam<QString> &x_registry_artifact_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_registry_artifact_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_exists = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  artifact_id QString [required]
    */
    virtual void deleteArtifact(const QString &artifact_id);

    /**
    * @param[in]  global_id qint64 [required]
    */
    virtual void getArtifactByGlobalId(const qint64 &global_id);

    /**
    * @param[in]  artifact_id QString [required]
    */
    virtual void getLatestArtifact(const QString &artifact_id);


    virtual void listArtifacts();

    /**
    * @param[in]  offset qint32 [required]
    * @param[in]  limit qint32 [required]
    * @param[in]  search QString [optional]
    * @param[in]  over QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchArtifacts(const qint32 &offset, const qint32 &limit, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &over = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  artifact_id QString [required]
    * @param[in]  x_registry_artifact_type QString [optional]
    */
    virtual void updateArtifact(const QString &artifact_id, const ::OpenAPI::OptionalParam<QString> &x_registry_artifact_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  artifact_id QString [required]
    * @param[in]  oai_update_state OAIUpdateState [required]
    */
    virtual void updateArtifactState(const QString &artifact_id, const OAIUpdateState &oai_update_state);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createArtifactCallback(OAIHttpRequestWorker *worker);
    void deleteArtifactCallback(OAIHttpRequestWorker *worker);
    void getArtifactByGlobalIdCallback(OAIHttpRequestWorker *worker);
    void getLatestArtifactCallback(OAIHttpRequestWorker *worker);
    void listArtifactsCallback(OAIHttpRequestWorker *worker);
    void searchArtifactsCallback(OAIHttpRequestWorker *worker);
    void updateArtifactCallback(OAIHttpRequestWorker *worker);
    void updateArtifactStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createArtifactSignal(OAIArtifactMetaData summary);
    void deleteArtifactSignal();
    void getArtifactByGlobalIdSignal();
    void getLatestArtifactSignal();
    void listArtifactsSignal(QList<QString> summary);
    void searchArtifactsSignal(OAIArtifactSearchResults summary);
    void updateArtifactSignal(OAIArtifactMetaData summary);
    void updateArtifactStateSignal();


    void createArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifactMetaData summary);
    void deleteArtifactSignalFull(OAIHttpRequestWorker *worker);
    void getArtifactByGlobalIdSignalFull(OAIHttpRequestWorker *worker);
    void getLatestArtifactSignalFull(OAIHttpRequestWorker *worker);
    void listArtifactsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void searchArtifactsSignalFull(OAIHttpRequestWorker *worker, OAIArtifactSearchResults summary);
    void updateArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifactMetaData summary);
    void updateArtifactStateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createArtifactSignalError() instead")
    void createArtifactSignalE(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactSignalError(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactSignalError() instead")
    void deleteArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactByGlobalIdSignalError() instead")
    void getArtifactByGlobalIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactByGlobalIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestArtifactSignalError() instead")
    void getLatestArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactsSignalError() instead")
    void listArtifactsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchArtifactsSignalError() instead")
    void searchArtifactsSignalE(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchArtifactsSignalError(OAIArtifactSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactSignalError() instead")
    void updateArtifactSignalE(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactSignalError(OAIArtifactMetaData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactStateSignalError() instead")
    void updateArtifactStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createArtifactSignalErrorFull() instead")
    void createArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArtifactSignalErrorFull() instead")
    void deleteArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtifactByGlobalIdSignalErrorFull() instead")
    void getArtifactByGlobalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtifactByGlobalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestArtifactSignalErrorFull() instead")
    void getLatestArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArtifactsSignalErrorFull() instead")
    void listArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchArtifactsSignalErrorFull() instead")
    void searchArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactSignalErrorFull() instead")
    void updateArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateArtifactStateSignalErrorFull() instead")
    void updateArtifactStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateArtifactStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
