/**
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMetadataApi::OAIMetadataApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMetadataApi::~OAIMetadataApi() {
}

void OAIMetadataApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://apicurio.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteArtifactVersionMetaData", defaultConf);
    _serverIndices.insert("deleteArtifactVersionMetaData", 0);
    _serverConfigs.insert("getArtifactMetaData", defaultConf);
    _serverIndices.insert("getArtifactMetaData", 0);
    _serverConfigs.insert("getArtifactMetaDataByContent", defaultConf);
    _serverIndices.insert("getArtifactMetaDataByContent", 0);
    _serverConfigs.insert("getArtifactMetaDataByGlobalId", defaultConf);
    _serverIndices.insert("getArtifactMetaDataByGlobalId", 0);
    _serverConfigs.insert("getArtifactVersionMetaData", defaultConf);
    _serverIndices.insert("getArtifactVersionMetaData", 0);
    _serverConfigs.insert("updateArtifactMetaData", defaultConf);
    _serverIndices.insert("updateArtifactMetaData", 0);
    _serverConfigs.insert("updateArtifactVersionMetaData", defaultConf);
    _serverIndices.insert("updateArtifactVersionMetaData", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMetadataApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMetadataApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMetadataApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMetadataApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMetadataApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMetadataApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMetadataApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMetadataApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMetadataApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMetadataApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMetadataApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMetadataApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMetadataApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMetadataApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMetadataApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMetadataApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMetadataApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMetadataApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMetadataApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMetadataApi::deleteArtifactVersionMetaData(const qint32 &version, const QString &artifact_id) {
    QString fullPath = QString(_serverConfigs["deleteArtifactVersionMetaData"][_serverIndices.value("deleteArtifactVersionMetaData")].URL()+"/artifacts/{artifactId}/versions/{version}/meta");
    
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString artifact_idPathParam("{");
        artifact_idPathParam.append("artifactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "artifactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"artifactId"+pathSuffix : pathPrefix;
        fullPath.replace(artifact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(artifact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::deleteArtifactVersionMetaDataCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::deleteArtifactVersionMetaDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteArtifactVersionMetaDataSignal();
        Q_EMIT deleteArtifactVersionMetaDataSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteArtifactVersionMetaDataSignalE(error_type, error_str);
        Q_EMIT deleteArtifactVersionMetaDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteArtifactVersionMetaDataSignalError(error_type, error_str);
        Q_EMIT deleteArtifactVersionMetaDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::getArtifactMetaData(const QString &artifact_id) {
    QString fullPath = QString(_serverConfigs["getArtifactMetaData"][_serverIndices.value("getArtifactMetaData")].URL()+"/artifacts/{artifactId}/meta");
    
    
    {
        QString artifact_idPathParam("{");
        artifact_idPathParam.append("artifactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "artifactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"artifactId"+pathSuffix : pathPrefix;
        fullPath.replace(artifact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(artifact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::getArtifactMetaDataCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::getArtifactMetaDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIArtifactMetaData output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getArtifactMetaDataSignal(output);
        Q_EMIT getArtifactMetaDataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getArtifactMetaDataSignalE(output, error_type, error_str);
        Q_EMIT getArtifactMetaDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getArtifactMetaDataSignalError(output, error_type, error_str);
        Q_EMIT getArtifactMetaDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::getArtifactMetaDataByContent(const QString &artifact_id) {
    QString fullPath = QString(_serverConfigs["getArtifactMetaDataByContent"][_serverIndices.value("getArtifactMetaDataByContent")].URL()+"/artifacts/{artifactId}/meta");
    
    
    {
        QString artifact_idPathParam("{");
        artifact_idPathParam.append("artifactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "artifactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"artifactId"+pathSuffix : pathPrefix;
        fullPath.replace(artifact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(artifact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::getArtifactMetaDataByContentCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::getArtifactMetaDataByContentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIArtifactMetaData output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getArtifactMetaDataByContentSignal(output);
        Q_EMIT getArtifactMetaDataByContentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getArtifactMetaDataByContentSignalE(output, error_type, error_str);
        Q_EMIT getArtifactMetaDataByContentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getArtifactMetaDataByContentSignalError(output, error_type, error_str);
        Q_EMIT getArtifactMetaDataByContentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::getArtifactMetaDataByGlobalId(const qint64 &global_id) {
    QString fullPath = QString(_serverConfigs["getArtifactMetaDataByGlobalId"][_serverIndices.value("getArtifactMetaDataByGlobalId")].URL()+"/ids/{globalId}/meta");
    
    
    {
        QString global_idPathParam("{");
        global_idPathParam.append("globalId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "globalId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"globalId"+pathSuffix : pathPrefix;
        fullPath.replace(global_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(global_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::getArtifactMetaDataByGlobalIdCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::getArtifactMetaDataByGlobalIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIArtifactMetaData output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getArtifactMetaDataByGlobalIdSignal(output);
        Q_EMIT getArtifactMetaDataByGlobalIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getArtifactMetaDataByGlobalIdSignalE(output, error_type, error_str);
        Q_EMIT getArtifactMetaDataByGlobalIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getArtifactMetaDataByGlobalIdSignalError(output, error_type, error_str);
        Q_EMIT getArtifactMetaDataByGlobalIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::getArtifactVersionMetaData(const qint32 &version, const QString &artifact_id) {
    QString fullPath = QString(_serverConfigs["getArtifactVersionMetaData"][_serverIndices.value("getArtifactVersionMetaData")].URL()+"/artifacts/{artifactId}/versions/{version}/meta");
    
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString artifact_idPathParam("{");
        artifact_idPathParam.append("artifactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "artifactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"artifactId"+pathSuffix : pathPrefix;
        fullPath.replace(artifact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(artifact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::getArtifactVersionMetaDataCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::getArtifactVersionMetaDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVersionMetaData output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getArtifactVersionMetaDataSignal(output);
        Q_EMIT getArtifactVersionMetaDataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getArtifactVersionMetaDataSignalE(output, error_type, error_str);
        Q_EMIT getArtifactVersionMetaDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getArtifactVersionMetaDataSignalError(output, error_type, error_str);
        Q_EMIT getArtifactVersionMetaDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::updateArtifactMetaData(const QString &artifact_id, const OAIEditableMetaData &oai_editable_meta_data) {
    QString fullPath = QString(_serverConfigs["updateArtifactMetaData"][_serverIndices.value("updateArtifactMetaData")].URL()+"/artifacts/{artifactId}/meta");
    
    
    {
        QString artifact_idPathParam("{");
        artifact_idPathParam.append("artifactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "artifactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"artifactId"+pathSuffix : pathPrefix;
        fullPath.replace(artifact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(artifact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_editable_meta_data.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::updateArtifactMetaDataCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::updateArtifactMetaDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateArtifactMetaDataSignal();
        Q_EMIT updateArtifactMetaDataSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateArtifactMetaDataSignalE(error_type, error_str);
        Q_EMIT updateArtifactMetaDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateArtifactMetaDataSignalError(error_type, error_str);
        Q_EMIT updateArtifactMetaDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::updateArtifactVersionMetaData(const qint32 &version, const QString &artifact_id, const OAIEditableMetaData &oai_editable_meta_data) {
    QString fullPath = QString(_serverConfigs["updateArtifactVersionMetaData"][_serverIndices.value("updateArtifactVersionMetaData")].URL()+"/artifacts/{artifactId}/versions/{version}/meta");
    
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString artifact_idPathParam("{");
        artifact_idPathParam.append("artifactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "artifactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"artifactId"+pathSuffix : pathPrefix;
        fullPath.replace(artifact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(artifact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_editable_meta_data.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataApi::updateArtifactVersionMetaDataCallback);
    connect(this, &OAIMetadataApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataApi::updateArtifactVersionMetaDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateArtifactVersionMetaDataSignal();
        Q_EMIT updateArtifactVersionMetaDataSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateArtifactVersionMetaDataSignalE(error_type, error_str);
        Q_EMIT updateArtifactVersionMetaDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateArtifactVersionMetaDataSignalError(error_type, error_str);
        Q_EMIT updateArtifactVersionMetaDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
