/*
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArtifactSearchResults;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.VersionSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchArtifacts
     * @param offset The number of artifacts to skip before starting to collect the result set. (required)
     * @param limit The number of artifacts to return. (required)
     * @param search The text to search. (optional)
     * @param over What fields to search. (optional)
     * @param order Sort order, ascending or descending. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArtifactsCall(Integer offset, Integer limit, String search, String over, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/artifacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (over != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("over", over));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchArtifactsValidateBeforeCall(Integer offset, Integer limit, String search, String over, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling searchArtifacts(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling searchArtifacts(Async)");
        }

        return searchArtifactsCall(offset, limit, search, over, order, _callback);

    }

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided search criteria. 
     * @param offset The number of artifacts to skip before starting to collect the result set. (required)
     * @param limit The number of artifacts to return. (required)
     * @param search The text to search. (optional)
     * @param over What fields to search. (optional)
     * @param order Sort order, ascending or descending. (optional)
     * @return ArtifactSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactSearchResults searchArtifacts(Integer offset, Integer limit, String search, String over, String order) throws ApiException {
        ApiResponse<ArtifactSearchResults> localVarResp = searchArtifactsWithHttpInfo(offset, limit, search, over, order);
        return localVarResp.getData();
    }

    /**
     * Search for artifacts
     * Returns a paginated list of all artifacts that match the provided search criteria. 
     * @param offset The number of artifacts to skip before starting to collect the result set. (required)
     * @param limit The number of artifacts to return. (required)
     * @param search The text to search. (optional)
     * @param over What fields to search. (optional)
     * @param order Sort order, ascending or descending. (optional)
     * @return ApiResponse&lt;ArtifactSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactSearchResults> searchArtifactsWithHttpInfo(Integer offset, Integer limit, String search, String over, String order) throws ApiException {
        okhttp3.Call localVarCall = searchArtifactsValidateBeforeCall(offset, limit, search, over, order, null);
        Type localVarReturnType = new TypeToken<ArtifactSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for artifacts (asynchronously)
     * Returns a paginated list of all artifacts that match the provided search criteria. 
     * @param offset The number of artifacts to skip before starting to collect the result set. (required)
     * @param limit The number of artifacts to return. (required)
     * @param search The text to search. (optional)
     * @param over What fields to search. (optional)
     * @param order Sort order, ascending or descending. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of artifacts - one for each artifact in the registry that matches the criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchArtifactsAsync(Integer offset, Integer limit, String search, String over, String order, final ApiCallback<ArtifactSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchArtifactsValidateBeforeCall(offset, limit, search, over, order, _callback);
        Type localVarReturnType = new TypeToken<ArtifactSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersions
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionsCall(String artifactId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/artifacts/{artifactId}/versions"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionsValidateBeforeCall(String artifactId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling searchVersions(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling searchVersions(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling searchVersions(Async)");
        }

        return searchVersionsCall(artifactId, offset, limit, _callback);

    }

    /**
     * Search artifact versions
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @return VersionSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public VersionSearchResults searchVersions(String artifactId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<VersionSearchResults> localVarResp = searchVersionsWithHttpInfo(artifactId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Search artifact versions
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @return ApiResponse&lt;VersionSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionSearchResults> searchVersionsWithHttpInfo(String artifactId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchVersionsValidateBeforeCall(artifactId, offset, limit, null);
        Type localVarReturnType = new TypeToken<VersionSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search artifact versions (asynchronously)
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionsAsync(String artifactId, Integer offset, Integer limit, final ApiCallback<VersionSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionsValidateBeforeCall(artifactId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<VersionSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
