/*
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.UpdateState;
import org.openapitools.client.model.VersionMetaData;
import org.openapitools.client.model.VersionSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VersionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VersionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VersionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createArtifactVersion
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param xRegistryArtifactType This header parameter can be used to indicate the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;)    * Protobuf (&#x60;PROTOBUF&#x60;)   * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;)    * JSON Schema (&#x60;JSON&#x60;)    * Kafka Connect (&#x60;KCONNECT&#x60;)    * OpenAPI (&#x60;OPENAPI&#x60;)    * AsyncAPI (&#x60;ASYNCAPI&#x60;)   * GraphQL (&#x60;GRAPHQL&#x60;)    * Web Services Description Language (&#x60;WSDL&#x60;)    * XML Schema (&#x60;XSD&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version was successfully created. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactVersionCall(String artifactId, String xRegistryArtifactType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRegistryArtifactType != null) {
            localVarHeaderParams.put("X-Registry-ArtifactType", localVarApiClient.parameterToString(xRegistryArtifactType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArtifactVersionValidateBeforeCall(String artifactId, String xRegistryArtifactType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling createArtifactVersion(Async)");
        }

        return createArtifactVersionCall(artifactId, xRegistryArtifactType, _callback);

    }

    /**
     * Create artifact version
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request should be the raw content of the new artifact version.  This  is typically in JSON format for *most* of the supported types, but may be in another  format for a few (for example, &#x60;PROTOBUF&#x60;).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  Alternatively, you can explicitly specify the artifact type using the &#x60;X-Registry-ArtifactType&#x60;  HTTP request header, or by including a hint in the request&#39;s &#x60;Content-Type&#x60;.  For example:  &#x60;&#x60;&#x60; Content-Type: application/json; artifactType&#x3D;AVRO &#x60;&#x60;&#x60;  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param xRegistryArtifactType This header parameter can be used to indicate the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;)    * Protobuf (&#x60;PROTOBUF&#x60;)   * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;)    * JSON Schema (&#x60;JSON&#x60;)    * Kafka Connect (&#x60;KCONNECT&#x60;)    * OpenAPI (&#x60;OPENAPI&#x60;)    * AsyncAPI (&#x60;ASYNCAPI&#x60;)   * GraphQL (&#x60;GRAPHQL&#x60;)    * Web Services Description Language (&#x60;WSDL&#x60;)    * XML Schema (&#x60;XSD&#x60;) (optional)
     * @return VersionMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version was successfully created. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public VersionMetaData createArtifactVersion(String artifactId, String xRegistryArtifactType) throws ApiException {
        ApiResponse<VersionMetaData> localVarResp = createArtifactVersionWithHttpInfo(artifactId, xRegistryArtifactType);
        return localVarResp.getData();
    }

    /**
     * Create artifact version
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request should be the raw content of the new artifact version.  This  is typically in JSON format for *most* of the supported types, but may be in another  format for a few (for example, &#x60;PROTOBUF&#x60;).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  Alternatively, you can explicitly specify the artifact type using the &#x60;X-Registry-ArtifactType&#x60;  HTTP request header, or by including a hint in the request&#39;s &#x60;Content-Type&#x60;.  For example:  &#x60;&#x60;&#x60; Content-Type: application/json; artifactType&#x3D;AVRO &#x60;&#x60;&#x60;  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param xRegistryArtifactType This header parameter can be used to indicate the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;)    * Protobuf (&#x60;PROTOBUF&#x60;)   * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;)    * JSON Schema (&#x60;JSON&#x60;)    * Kafka Connect (&#x60;KCONNECT&#x60;)    * OpenAPI (&#x60;OPENAPI&#x60;)    * AsyncAPI (&#x60;ASYNCAPI&#x60;)   * GraphQL (&#x60;GRAPHQL&#x60;)    * Web Services Description Language (&#x60;WSDL&#x60;)    * XML Schema (&#x60;XSD&#x60;) (optional)
     * @return ApiResponse&lt;VersionMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version was successfully created. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionMetaData> createArtifactVersionWithHttpInfo(String artifactId, String xRegistryArtifactType) throws ApiException {
        okhttp3.Call localVarCall = createArtifactVersionValidateBeforeCall(artifactId, xRegistryArtifactType, null);
        Type localVarReturnType = new TypeToken<VersionMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create artifact version (asynchronously)
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request should be the raw content of the new artifact version.  This  is typically in JSON format for *most* of the supported types, but may be in another  format for a few (for example, &#x60;PROTOBUF&#x60;).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)  Alternatively, you can explicitly specify the artifact type using the &#x60;X-Registry-ArtifactType&#x60;  HTTP request header, or by including a hint in the request&#39;s &#x60;Content-Type&#x60;.  For example:  &#x60;&#x60;&#x60; Content-Type: application/json; artifactType&#x3D;AVRO &#x60;&#x60;&#x60;  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * The new content violates one of the rules configured for the artifact (HTTP error &#x60;409&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param xRegistryArtifactType This header parameter can be used to indicate the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;)    * Protobuf (&#x60;PROTOBUF&#x60;)   * Protobuf File Descriptor (&#x60;PROTOBUF_FD&#x60;)    * JSON Schema (&#x60;JSON&#x60;)    * Kafka Connect (&#x60;KCONNECT&#x60;)    * OpenAPI (&#x60;OPENAPI&#x60;)    * AsyncAPI (&#x60;ASYNCAPI&#x60;)   * GraphQL (&#x60;GRAPHQL&#x60;)    * Web Services Description Language (&#x60;WSDL&#x60;)    * XML Schema (&#x60;XSD&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version was successfully created. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Common response used when an input conflicts with existing data. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactVersionAsync(String artifactId, String xRegistryArtifactType, final ApiCallback<VersionMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArtifactVersionValidateBeforeCall(artifactId, xRegistryArtifactType, _callback);
        Type localVarReturnType = new TypeToken<VersionMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtifactVersion
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The content of the artifact version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactVersionCall(Integer version, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions/{version}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/graphql",
            "application/json",
            "application/x-protobuf",
            "application/x-protobuffer"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtifactVersionValidateBeforeCall(Integer version, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getArtifactVersion(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getArtifactVersion(Async)");
        }

        return getArtifactVersionCall(version, artifactId, _callback);

    }

    /**
     * Get artifact version
     * Retrieves a single version of the artifact content.  Both the &#x60;artifactId&#x60; and the unique &#x60;version&#x60; number must be provided.  The &#x60;Content-Type&#x60; of the response depends  on the artifact type.  In most cases, this is &#x60;application/json&#x60;, but for some types  it may be different (for example, &#x60;PROTOBUF&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The content of the artifact version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getArtifactVersion(Integer version, String artifactId) throws ApiException {
        getArtifactVersionWithHttpInfo(version, artifactId);
    }

    /**
     * Get artifact version
     * Retrieves a single version of the artifact content.  Both the &#x60;artifactId&#x60; and the unique &#x60;version&#x60; number must be provided.  The &#x60;Content-Type&#x60; of the response depends  on the artifact type.  In most cases, this is &#x60;application/json&#x60;, but for some types  it may be different (for example, &#x60;PROTOBUF&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The content of the artifact version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArtifactVersionWithHttpInfo(Integer version, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = getArtifactVersionValidateBeforeCall(version, artifactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get artifact version (asynchronously)
     * Retrieves a single version of the artifact content.  Both the &#x60;artifactId&#x60; and the unique &#x60;version&#x60; number must be provided.  The &#x60;Content-Type&#x60; of the response depends  on the artifact type.  In most cases, this is &#x60;application/json&#x60;, but for some types  it may be different (for example, &#x60;PROTOBUF&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The content of the artifact version. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactVersionAsync(Integer version, String artifactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtifactVersionValidateBeforeCall(version, artifactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listArtifactVersions
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all artifact versions (just the version IDs). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listArtifactVersionsCall(String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listArtifactVersionsValidateBeforeCall(String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling listArtifactVersions(Async)");
        }

        return listArtifactVersionsCall(artifactId, _callback);

    }

    /**
     * List artifact versions
     * Returns a list of all version numbers for the artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all artifact versions (just the version IDs). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<Long> listArtifactVersions(String artifactId) throws ApiException {
        ApiResponse<List<Long>> localVarResp = listArtifactVersionsWithHttpInfo(artifactId);
        return localVarResp.getData();
    }

    /**
     * List artifact versions
     * Returns a list of all version numbers for the artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all artifact versions (just the version IDs). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Long>> listArtifactVersionsWithHttpInfo(String artifactId) throws ApiException {
        okhttp3.Call localVarCall = listArtifactVersionsValidateBeforeCall(artifactId, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List artifact versions (asynchronously)
     * Returns a list of all version numbers for the artifact.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all artifact versions (just the version IDs). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listArtifactVersionsAsync(String artifactId, final ApiCallback<List<Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listArtifactVersionsValidateBeforeCall(artifactId, _callback);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersions_0
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersions_0Call(String artifactId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/artifacts/{artifactId}/versions"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersions_0ValidateBeforeCall(String artifactId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling searchVersions_0(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling searchVersions_0(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling searchVersions_0(Async)");
        }

        return searchVersions_0Call(artifactId, offset, limit, _callback);

    }

    /**
     * Search artifact versions
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @return VersionSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public VersionSearchResults searchVersions_0(String artifactId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<VersionSearchResults> localVarResp = searchVersions_0WithHttpInfo(artifactId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Search artifact versions
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @return ApiResponse&lt;VersionSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionSearchResults> searchVersions_0WithHttpInfo(String artifactId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchVersions_0ValidateBeforeCall(artifactId, offset, limit, null);
        Type localVarReturnType = new TypeToken<VersionSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search artifact versions (asynchronously)
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param offset The number of versions to skip before starting to collect the result set. (required)
     * @param limit The number of versions to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On a successful response, returns a result set of versions - one for each version of the artifact. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersions_0Async(String artifactId, Integer offset, Integer limit, final ApiCallback<VersionSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersions_0ValidateBeforeCall(artifactId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<VersionSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateArtifactVersionState
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param updateState  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactVersionStateCall(Integer version, String artifactId, UpdateState updateState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateState;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions/{version}/state"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArtifactVersionStateValidateBeforeCall(Integer version, String artifactId, UpdateState updateState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateArtifactVersionState(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling updateArtifactVersionState(Async)");
        }

        // verify the required parameter 'updateState' is set
        if (updateState == null) {
            throw new ApiException("Missing the required parameter 'updateState' when calling updateArtifactVersionState(Async)");
        }

        return updateArtifactVersionStateCall(version, artifactId, updateState, _callback);

    }

    /**
     * Update artifact version state
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  The following state changes are supported:  * Enabled -&gt; Disabled * Enabled -&gt; Deprecated * Enabled -&gt; Deleted * Disabled -&gt; Enabled * Disabled -&gt; Deleted * Disabled -&gt; Deprecated * Deprecated -&gt; Deleted  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * Artifact version cannot transition to the given state (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param updateState  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateArtifactVersionState(Integer version, String artifactId, UpdateState updateState) throws ApiException {
        updateArtifactVersionStateWithHttpInfo(version, artifactId, updateState);
    }

    /**
     * Update artifact version state
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  The following state changes are supported:  * Enabled -&gt; Disabled * Enabled -&gt; Deprecated * Enabled -&gt; Deleted * Disabled -&gt; Enabled * Disabled -&gt; Deleted * Disabled -&gt; Deprecated * Deprecated -&gt; Deleted  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * Artifact version cannot transition to the given state (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param updateState  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateArtifactVersionStateWithHttpInfo(Integer version, String artifactId, UpdateState updateState) throws ApiException {
        okhttp3.Call localVarCall = updateArtifactVersionStateValidateBeforeCall(version, artifactId, updateState, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update artifact version state (asynchronously)
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  The following state changes are supported:  * Enabled -&gt; Disabled * Enabled -&gt; Deprecated * Enabled -&gt; Deleted * Disabled -&gt; Enabled * Disabled -&gt; Deleted * Disabled -&gt; Deprecated * Deprecated -&gt; Deleted  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * Artifact version cannot transition to the given state (HTTP error &#x60;400&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param updateState  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned when the update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Common response for all operations that can return a &#x60;400&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactVersionStateAsync(Integer version, String artifactId, UpdateState updateState, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArtifactVersionStateValidateBeforeCall(version, artifactId, updateState, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
