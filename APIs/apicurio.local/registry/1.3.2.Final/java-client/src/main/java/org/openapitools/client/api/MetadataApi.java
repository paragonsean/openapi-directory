/*
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArtifactMetaData;
import org.openapitools.client.model.EditableMetaData;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.VersionMetaData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteArtifactVersionMetaData
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s user-editable metadata was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArtifactVersionMetaDataCall(Integer version, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions/{version}/meta"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteArtifactVersionMetaDataValidateBeforeCall(Integer version, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteArtifactVersionMetaData(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling deleteArtifactVersionMetaData(Async)");
        }

        return deleteArtifactVersionMetaDataCall(version, artifactId, _callback);

    }

    /**
     * Delete artifact version metadata
     * Deletes the user-editable metadata properties of the artifact version.  Any properties that are not user-editable are preserved.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s user-editable metadata was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteArtifactVersionMetaData(Integer version, String artifactId) throws ApiException {
        deleteArtifactVersionMetaDataWithHttpInfo(version, artifactId);
    }

    /**
     * Delete artifact version metadata
     * Deletes the user-editable metadata properties of the artifact version.  Any properties that are not user-editable are preserved.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s user-editable metadata was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteArtifactVersionMetaDataWithHttpInfo(Integer version, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = deleteArtifactVersionMetaDataValidateBeforeCall(version, artifactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete artifact version metadata (asynchronously)
     * Deletes the user-editable metadata properties of the artifact version.  Any properties that are not user-editable are preserved.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s user-editable metadata was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteArtifactVersionMetaDataAsync(Integer version, String artifactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteArtifactVersionMetaDataValidateBeforeCall(version, artifactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtifactMetaData
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactMetaDataCall(String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/meta"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtifactMetaDataValidateBeforeCall(String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getArtifactMetaData(Async)");
        }

        return getArtifactMetaDataCall(artifactId, _callback);

    }

    /**
     * Get artifact metadata
     * Gets the metadata for an artifact in the registry, based on the latest version. If the latest version of the artifact is marked as &#x60;DISABLED&#x60;, the next available non-disabled version will be used. The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists or all versions are &#x60;DISABLED&#x60; (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ArtifactMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactMetaData getArtifactMetaData(String artifactId) throws ApiException {
        ApiResponse<ArtifactMetaData> localVarResp = getArtifactMetaDataWithHttpInfo(artifactId);
        return localVarResp.getData();
    }

    /**
     * Get artifact metadata
     * Gets the metadata for an artifact in the registry, based on the latest version. If the latest version of the artifact is marked as &#x60;DISABLED&#x60;, the next available non-disabled version will be used. The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists or all versions are &#x60;DISABLED&#x60; (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;ArtifactMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactMetaData> getArtifactMetaDataWithHttpInfo(String artifactId) throws ApiException {
        okhttp3.Call localVarCall = getArtifactMetaDataValidateBeforeCall(artifactId, null);
        Type localVarReturnType = new TypeToken<ArtifactMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get artifact metadata (asynchronously)
     * Gets the metadata for an artifact in the registry, based on the latest version. If the latest version of the artifact is marked as &#x60;DISABLED&#x60;, the next available non-disabled version will be used. The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists or all versions are &#x60;DISABLED&#x60; (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactMetaDataAsync(String artifactId, final ApiCallback<ArtifactMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtifactMetaDataValidateBeforeCall(artifactId, _callback);
        Type localVarReturnType = new TypeToken<ArtifactMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtifactMetaDataByContent
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metadata of the artifact version matching the provided content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactMetaDataByContentCall(String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/meta"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtifactMetaDataByContentValidateBeforeCall(String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getArtifactMetaDataByContent(Async)");
        }

        return getArtifactMetaDataByContentCall(artifactId, _callback);

    }

    /**
     * Get artifact metadata by content
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry for a version of the given artifact matching the content provided in the body of the POST.  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No artifact version matching the provided content exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ArtifactMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metadata of the artifact version matching the provided content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactMetaData getArtifactMetaDataByContent(String artifactId) throws ApiException {
        ApiResponse<ArtifactMetaData> localVarResp = getArtifactMetaDataByContentWithHttpInfo(artifactId);
        return localVarResp.getData();
    }

    /**
     * Get artifact metadata by content
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry for a version of the given artifact matching the content provided in the body of the POST.  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No artifact version matching the provided content exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;ArtifactMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metadata of the artifact version matching the provided content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactMetaData> getArtifactMetaDataByContentWithHttpInfo(String artifactId) throws ApiException {
        okhttp3.Call localVarCall = getArtifactMetaDataByContentValidateBeforeCall(artifactId, null);
        Type localVarReturnType = new TypeToken<ArtifactMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get artifact metadata by content (asynchronously)
     * Gets the metadata for an artifact that matches the raw content.  Searches the registry for a version of the given artifact matching the content provided in the body of the POST.  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error &#x60;400&#x60;) * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No artifact version matching the provided content exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metadata of the artifact version matching the provided content. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactMetaDataByContentAsync(String artifactId, final ApiCallback<ArtifactMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtifactMetaDataByContentValidateBeforeCall(artifactId, _callback);
        Type localVarReturnType = new TypeToken<ArtifactMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtifactMetaDataByGlobalId
     * @param globalId Global identifier for an artifact version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactMetaDataByGlobalIdCall(Long globalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ids/{globalId}/meta"
            .replace("{" + "globalId" + "}", localVarApiClient.escapeString(globalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtifactMetaDataByGlobalIdValidateBeforeCall(Long globalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalId' is set
        if (globalId == null) {
            throw new ApiException("Missing the required parameter 'globalId' when calling getArtifactMetaDataByGlobalId(Async)");
        }

        return getArtifactMetaDataByGlobalIdCall(globalId, _callback);

    }

    /**
     * Get global artifact metadata
     * Gets the metadata for an artifact version in the registry using its globally unique identifier.  The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation may fail for one of the following reasons:  * No artifact version with this &#x60;globalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param globalId Global identifier for an artifact version. (required)
     * @return ArtifactMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactMetaData getArtifactMetaDataByGlobalId(Long globalId) throws ApiException {
        ApiResponse<ArtifactMetaData> localVarResp = getArtifactMetaDataByGlobalIdWithHttpInfo(globalId);
        return localVarResp.getData();
    }

    /**
     * Get global artifact metadata
     * Gets the metadata for an artifact version in the registry using its globally unique identifier.  The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation may fail for one of the following reasons:  * No artifact version with this &#x60;globalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param globalId Global identifier for an artifact version. (required)
     * @return ApiResponse&lt;ArtifactMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactMetaData> getArtifactMetaDataByGlobalIdWithHttpInfo(Long globalId) throws ApiException {
        okhttp3.Call localVarCall = getArtifactMetaDataByGlobalIdValidateBeforeCall(globalId, null);
        Type localVarReturnType = new TypeToken<ArtifactMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global artifact metadata (asynchronously)
     * Gets the metadata for an artifact version in the registry using its globally unique identifier.  The returned metadata includes both generated (read-only) and editable metadata (such as name and description).  This operation may fail for one of the following reasons:  * No artifact version with this &#x60;globalId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param globalId Global identifier for an artifact version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactMetaDataByGlobalIdAsync(Long globalId, final ApiCallback<ArtifactMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtifactMetaDataByGlobalIdValidateBeforeCall(globalId, _callback);
        Type localVarReturnType = new TypeToken<ArtifactMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArtifactVersionMetaData
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactVersionMetaDataCall(Integer version, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions/{version}/meta"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArtifactVersionMetaDataValidateBeforeCall(Integer version, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getArtifactVersionMetaData(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getArtifactVersionMetaData(Async)");
        }

        return getArtifactVersionMetaDataCall(version, artifactId, _callback);

    }

    /**
     * Get artifact version metadata
     * Retrieves the metadata for a single version of the artifact.  The version metadata is  a subset of the artifact metadata and only includes the metadata that is specific to the version (for example, this doesn&#39;t include &#x60;modifiedOn&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return VersionMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public VersionMetaData getArtifactVersionMetaData(Integer version, String artifactId) throws ApiException {
        ApiResponse<VersionMetaData> localVarResp = getArtifactVersionMetaDataWithHttpInfo(version, artifactId);
        return localVarResp.getData();
    }

    /**
     * Get artifact version metadata
     * Retrieves the metadata for a single version of the artifact.  The version metadata is  a subset of the artifact metadata and only includes the metadata that is specific to the version (for example, this doesn&#39;t include &#x60;modifiedOn&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @return ApiResponse&lt;VersionMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionMetaData> getArtifactVersionMetaDataWithHttpInfo(Integer version, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = getArtifactVersionMetaDataValidateBeforeCall(version, artifactId, null);
        Type localVarReturnType = new TypeToken<VersionMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get artifact version metadata (asynchronously)
     * Retrieves the metadata for a single version of the artifact.  The version metadata is  a subset of the artifact metadata and only includes the metadata that is specific to the version (for example, this doesn&#39;t include &#x60;modifiedOn&#x60;).  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The artifact version&#39;s metadata. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArtifactVersionMetaDataAsync(Integer version, String artifactId, final ApiCallback<VersionMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArtifactVersionMetaDataValidateBeforeCall(version, artifactId, _callback);
        Type localVarReturnType = new TypeToken<VersionMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateArtifactMetaData
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData Updated artifact metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact&#39;s metadata was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactMetaDataCall(String artifactId, EditableMetaData editableMetaData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editableMetaData;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/meta"
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArtifactMetaDataValidateBeforeCall(String artifactId, EditableMetaData editableMetaData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling updateArtifactMetaData(Async)");
        }

        // verify the required parameter 'editableMetaData' is set
        if (editableMetaData == null) {
            throw new ApiException("Missing the required parameter 'editableMetaData' when calling updateArtifactMetaData(Async)");
        }

        return updateArtifactMetaDataCall(artifactId, editableMetaData, _callback);

    }

    /**
     * Update artifact metadata
     * Updates the editable parts of the artifact&#39;s metadata.  Not all metadata fields can be updated.  For example, &#x60;createdOn&#x60; and &#x60;createdBy&#x60; are both read-only properties.  This operation can fail for the following reasons:  * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData Updated artifact metadata. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact&#39;s metadata was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateArtifactMetaData(String artifactId, EditableMetaData editableMetaData) throws ApiException {
        updateArtifactMetaDataWithHttpInfo(artifactId, editableMetaData);
    }

    /**
     * Update artifact metadata
     * Updates the editable parts of the artifact&#39;s metadata.  Not all metadata fields can be updated.  For example, &#x60;createdOn&#x60; and &#x60;createdBy&#x60; are both read-only properties.  This operation can fail for the following reasons:  * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData Updated artifact metadata. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact&#39;s metadata was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateArtifactMetaDataWithHttpInfo(String artifactId, EditableMetaData editableMetaData) throws ApiException {
        okhttp3.Call localVarCall = updateArtifactMetaDataValidateBeforeCall(artifactId, editableMetaData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update artifact metadata (asynchronously)
     * Updates the editable parts of the artifact&#39;s metadata.  Not all metadata fields can be updated.  For example, &#x60;createdOn&#x60; and &#x60;createdBy&#x60; are both read-only properties.  This operation can fail for the following reasons:  * No artifact with the &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData Updated artifact metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact&#39;s metadata was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactMetaDataAsync(String artifactId, EditableMetaData editableMetaData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArtifactMetaDataValidateBeforeCall(artifactId, editableMetaData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateArtifactVersionMetaData
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s metadata was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactVersionMetaDataCall(Integer version, String artifactId, EditableMetaData editableMetaData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editableMetaData;

        // create path and map variables
        String localVarPath = "/artifacts/{artifactId}/versions/{version}/meta"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "artifactId" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArtifactVersionMetaDataValidateBeforeCall(Integer version, String artifactId, EditableMetaData editableMetaData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateArtifactVersionMetaData(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling updateArtifactVersionMetaData(Async)");
        }

        // verify the required parameter 'editableMetaData' is set
        if (editableMetaData == null) {
            throw new ApiException("Missing the required parameter 'editableMetaData' when calling updateArtifactVersionMetaData(Async)");
        }

        return updateArtifactVersionMetaDataCall(version, artifactId, editableMetaData, _callback);

    }

    /**
     * Update artifact version metadata
     * Updates the user-editable portion of the artifact version&#39;s metadata.  Only some of  the metadata fields are editable by the user.  For example, &#x60;description&#x60; is editable,  but &#x60;createdOn&#x60; is not.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s metadata was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public void updateArtifactVersionMetaData(Integer version, String artifactId, EditableMetaData editableMetaData) throws ApiException {
        updateArtifactVersionMetaDataWithHttpInfo(version, artifactId, editableMetaData);
    }

    /**
     * Update artifact version metadata
     * Updates the user-editable portion of the artifact version&#39;s metadata.  Only some of  the metadata fields are editable by the user.  For example, &#x60;description&#x60; is editable,  but &#x60;createdOn&#x60; is not.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s metadata was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateArtifactVersionMetaDataWithHttpInfo(Integer version, String artifactId, EditableMetaData editableMetaData) throws ApiException {
        okhttp3.Call localVarCall = updateArtifactVersionMetaDataValidateBeforeCall(version, artifactId, editableMetaData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update artifact version metadata (asynchronously)
     * Updates the user-editable portion of the artifact version&#39;s metadata.  Only some of  the metadata fields are editable by the user.  For example, &#x60;description&#x60; is editable,  but &#x60;createdOn&#x60; is not.  This operation can fail for the following reasons:  * No artifact with this &#x60;artifactId&#x60; exists (HTTP error &#x60;404&#x60;) * No version with this &#x60;version&#x60; exists (HTTP error &#x60;404&#x60;) * A server error occurred (HTTP error &#x60;500&#x60;) 
     * @param version The unique identifier of a specific version of the artifact content. (required)
     * @param artifactId The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier. (required)
     * @param editableMetaData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The artifact version&#39;s metadata was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Common response for all operations that can return a &#x60;404&#x60; error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Common response for all operations that can fail with an unexpected server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactVersionMetaDataAsync(Integer version, String artifactId, EditableMetaData editableMetaData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArtifactVersionMetaDataValidateBeforeCall(version, artifactId, editableMetaData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
