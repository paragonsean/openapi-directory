/*
 * Apicurio Registry API
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 
 *
 * The version of the OpenAPI document: 1.3.2.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtifactSearchResults;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.VersionSearchResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Disabled
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    /**
     * Search for artifacts
     *
     * Returns a paginated list of all artifacts that match the provided search criteria. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchArtifactsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String search = null;
        String over = null;
        String order = null;
        ArtifactSearchResults response = api.searchArtifacts(offset, limit, search, over, order);
        // TODO: test validations
    }

    /**
     * Search artifact versions
     *
     * Searches for versions of a specific artifact.  This is typically used to get a listing of all versions of an artifact (for example, in a user interface).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVersionsTest() throws ApiException {
        String artifactId = null;
        Integer offset = null;
        Integer limit = null;
        VersionSearchResults response = api.searchVersions(artifactId, offset, limit);
        // TODO: test validations
    }

}
