/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError400.h"
#include "OAIError401.h"
#include "OAIError404.h"
#include "OAIError500.h"
#include "OAINHArtwork.h"
#include "OAINHBug.h"
#include "OAINHClothing.h"
#include "OAINHEvent.h"
#include "OAINHFish.h"
#include "OAINHFossilGroup.h"
#include "OAINHFossilGroupWithIndividualFossils.h"
#include "OAINHFossilGroupWithIndividualFossilsNoMatched.h"
#include "OAINHFurniture.h"
#include "OAINHIndividualFossil.h"
#include "OAINHInterior.h"
#include "OAINHItem.h"
#include "OAINHPhoto.h"
#include "OAINHRecipe.h"
#include "OAINHSeaCreature.h"
#include "OAINHTool.h"
#include "OAIVillager.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  artwork QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhArtArtworkGet(const QString &artwork, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  hasfake QString [optional]
    * @param[in]  excludedetails QString [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhArtGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &hasfake = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  bug QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhBugsBugGet(const QString &bug, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  month QString [optional]
    * @param[in]  excludedetails QString [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhBugsGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  clothing QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhClothingClothingGet(const QString &clothing, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  category QString [optional]
    * @param[in]  color QList<QString> [optional]
    * @param[in]  style QList<QString> [optional]
    * @param[in]  labeltheme QString [optional]
    * @param[in]  excludedetails QString [optional]
    */
    virtual void nhClothingGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &color = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &style = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &labeltheme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  date QString [optional]
    * @param[in]  year QString [optional]
    * @param[in]  month QString [optional]
    * @param[in]  day qint32 [optional]
    */
    virtual void nhEventsGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &day = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fish QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFishFishGet(const QString &fish, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  month QString [optional]
    * @param[in]  excludedetails QString [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFishGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fossil QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFossilsAllFossilGet(const QString &fossil, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFossilsAllGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fossil_group QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFossilsGroupsFossilGroupGet(const QString &fossil_group, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFossilsGroupsGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fossil QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFossilsIndividualsFossilGet(const QString &fossil, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFossilsIndividualsGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  furniture QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhFurnitureFurnitureGet(const QString &furniture, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  category QString [optional]
    * @param[in]  color QList<QString> [optional]
    * @param[in]  excludedetails QString [optional]
    */
    virtual void nhFurnitureGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &color = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  color QList<QString> [optional]
    * @param[in]  excludedetails QString [optional]
    */
    virtual void nhInteriorGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QList<QString>> &color = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  color QList<QString> [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhInteriorItemGet(const QString &item, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QList<QString>> &color = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  excludedetails QString [optional]
    */
    virtual void nhItemsGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhItemsItemGet(const QString &item, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  excludedetails QString [optional]
    */
    virtual void nhPhotosGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhPhotosItemGet(const QString &item, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  material QString [optional]
    * @param[in]  excludedetails QString [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhRecipesGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &material = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhRecipesItemGet(const QString &item, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  month QString [optional]
    * @param[in]  excludedetails QString [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhSeaGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  sea_creature QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhSeaSeaCreatureGet(const QString &sea_creature, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  excludedetails QString [optional]
    */
    virtual void nhToolsGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tool QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void nhToolsToolGet(const QString &tool, const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  accept_version QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  species QString [optional]
    * @param[in]  personality QString [optional]
    * @param[in]  game QList<QString> [optional]
    * @param[in]  birthmonth QString [optional]
    * @param[in]  birthday QString [optional]
    * @param[in]  nhdetails QString [optional]
    * @param[in]  excludedetails QString [optional]
    * @param[in]  thumbsize qint32 [optional]
    */
    virtual void villagersGet(const QString &x_api_key, const QString &accept_version, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &species = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &personality = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &game = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &birthmonth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &birthday = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nhdetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excludedetails = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &thumbsize = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void nhArtArtworkGetCallback(OAIHttpRequestWorker *worker);
    void nhArtGetCallback(OAIHttpRequestWorker *worker);
    void nhBugsBugGetCallback(OAIHttpRequestWorker *worker);
    void nhBugsGetCallback(OAIHttpRequestWorker *worker);
    void nhClothingClothingGetCallback(OAIHttpRequestWorker *worker);
    void nhClothingGetCallback(OAIHttpRequestWorker *worker);
    void nhEventsGetCallback(OAIHttpRequestWorker *worker);
    void nhFishFishGetCallback(OAIHttpRequestWorker *worker);
    void nhFishGetCallback(OAIHttpRequestWorker *worker);
    void nhFossilsAllFossilGetCallback(OAIHttpRequestWorker *worker);
    void nhFossilsAllGetCallback(OAIHttpRequestWorker *worker);
    void nhFossilsGroupsFossilGroupGetCallback(OAIHttpRequestWorker *worker);
    void nhFossilsGroupsGetCallback(OAIHttpRequestWorker *worker);
    void nhFossilsIndividualsFossilGetCallback(OAIHttpRequestWorker *worker);
    void nhFossilsIndividualsGetCallback(OAIHttpRequestWorker *worker);
    void nhFurnitureFurnitureGetCallback(OAIHttpRequestWorker *worker);
    void nhFurnitureGetCallback(OAIHttpRequestWorker *worker);
    void nhInteriorGetCallback(OAIHttpRequestWorker *worker);
    void nhInteriorItemGetCallback(OAIHttpRequestWorker *worker);
    void nhItemsGetCallback(OAIHttpRequestWorker *worker);
    void nhItemsItemGetCallback(OAIHttpRequestWorker *worker);
    void nhPhotosGetCallback(OAIHttpRequestWorker *worker);
    void nhPhotosItemGetCallback(OAIHttpRequestWorker *worker);
    void nhRecipesGetCallback(OAIHttpRequestWorker *worker);
    void nhRecipesItemGetCallback(OAIHttpRequestWorker *worker);
    void nhSeaGetCallback(OAIHttpRequestWorker *worker);
    void nhSeaSeaCreatureGetCallback(OAIHttpRequestWorker *worker);
    void nhToolsGetCallback(OAIHttpRequestWorker *worker);
    void nhToolsToolGetCallback(OAIHttpRequestWorker *worker);
    void villagersGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void nhArtArtworkGetSignal(OAINHArtwork summary);
    void nhArtGetSignal(QList<OAINHArtwork> summary);
    void nhBugsBugGetSignal(OAINHBug summary);
    void nhBugsGetSignal(QList<OAINHBug> summary);
    void nhClothingClothingGetSignal(OAINHClothing summary);
    void nhClothingGetSignal(QList<OAINHClothing> summary);
    void nhEventsGetSignal(QList<OAINHEvent> summary);
    void nhFishFishGetSignal(OAINHFish summary);
    void nhFishGetSignal(QList<OAINHFish> summary);
    void nhFossilsAllFossilGetSignal(OAINHFossilGroupWithIndividualFossils summary);
    void nhFossilsAllGetSignal(QList<OAINHFossilGroupWithIndividualFossilsNoMatched> summary);
    void nhFossilsGroupsFossilGroupGetSignal(OAINHFossilGroup summary);
    void nhFossilsGroupsGetSignal(QList<OAINHFossilGroup> summary);
    void nhFossilsIndividualsFossilGetSignal(OAINHIndividualFossil summary);
    void nhFossilsIndividualsGetSignal(QList<OAINHIndividualFossil> summary);
    void nhFurnitureFurnitureGetSignal(OAINHFurniture summary);
    void nhFurnitureGetSignal(QList<OAINHFurniture> summary);
    void nhInteriorGetSignal(QList<OAINHInterior> summary);
    void nhInteriorItemGetSignal(OAINHInterior summary);
    void nhItemsGetSignal(QList<OAINHItem> summary);
    void nhItemsItemGetSignal(OAINHItem summary);
    void nhPhotosGetSignal(QList<OAINHPhoto> summary);
    void nhPhotosItemGetSignal(OAINHPhoto summary);
    void nhRecipesGetSignal(QList<OAINHRecipe> summary);
    void nhRecipesItemGetSignal(OAINHRecipe summary);
    void nhSeaGetSignal(QList<OAINHSeaCreature> summary);
    void nhSeaSeaCreatureGetSignal(OAINHSeaCreature summary);
    void nhToolsGetSignal(QList<OAINHTool> summary);
    void nhToolsToolGetSignal(OAINHTool summary);
    void villagersGetSignal(QList<OAIVillager> summary);


    void nhArtArtworkGetSignalFull(OAIHttpRequestWorker *worker, OAINHArtwork summary);
    void nhArtGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHArtwork> summary);
    void nhBugsBugGetSignalFull(OAIHttpRequestWorker *worker, OAINHBug summary);
    void nhBugsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHBug> summary);
    void nhClothingClothingGetSignalFull(OAIHttpRequestWorker *worker, OAINHClothing summary);
    void nhClothingGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHClothing> summary);
    void nhEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHEvent> summary);
    void nhFishFishGetSignalFull(OAIHttpRequestWorker *worker, OAINHFish summary);
    void nhFishGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHFish> summary);
    void nhFossilsAllFossilGetSignalFull(OAIHttpRequestWorker *worker, OAINHFossilGroupWithIndividualFossils summary);
    void nhFossilsAllGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHFossilGroupWithIndividualFossilsNoMatched> summary);
    void nhFossilsGroupsFossilGroupGetSignalFull(OAIHttpRequestWorker *worker, OAINHFossilGroup summary);
    void nhFossilsGroupsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHFossilGroup> summary);
    void nhFossilsIndividualsFossilGetSignalFull(OAIHttpRequestWorker *worker, OAINHIndividualFossil summary);
    void nhFossilsIndividualsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHIndividualFossil> summary);
    void nhFurnitureFurnitureGetSignalFull(OAIHttpRequestWorker *worker, OAINHFurniture summary);
    void nhFurnitureGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHFurniture> summary);
    void nhInteriorGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHInterior> summary);
    void nhInteriorItemGetSignalFull(OAIHttpRequestWorker *worker, OAINHInterior summary);
    void nhItemsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHItem> summary);
    void nhItemsItemGetSignalFull(OAIHttpRequestWorker *worker, OAINHItem summary);
    void nhPhotosGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHPhoto> summary);
    void nhPhotosItemGetSignalFull(OAIHttpRequestWorker *worker, OAINHPhoto summary);
    void nhRecipesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHRecipe> summary);
    void nhRecipesItemGetSignalFull(OAIHttpRequestWorker *worker, OAINHRecipe summary);
    void nhSeaGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHSeaCreature> summary);
    void nhSeaSeaCreatureGetSignalFull(OAIHttpRequestWorker *worker, OAINHSeaCreature summary);
    void nhToolsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINHTool> summary);
    void nhToolsToolGetSignalFull(OAIHttpRequestWorker *worker, OAINHTool summary);
    void villagersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIVillager> summary);

    Q_DECL_DEPRECATED_X("Use nhArtArtworkGetSignalError() instead")
    void nhArtArtworkGetSignalE(OAINHArtwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhArtArtworkGetSignalError(OAINHArtwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhArtGetSignalError() instead")
    void nhArtGetSignalE(QList<OAINHArtwork> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhArtGetSignalError(QList<OAINHArtwork> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhBugsBugGetSignalError() instead")
    void nhBugsBugGetSignalE(OAINHBug summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhBugsBugGetSignalError(OAINHBug summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhBugsGetSignalError() instead")
    void nhBugsGetSignalE(QList<OAINHBug> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhBugsGetSignalError(QList<OAINHBug> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhClothingClothingGetSignalError() instead")
    void nhClothingClothingGetSignalE(OAINHClothing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhClothingClothingGetSignalError(OAINHClothing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhClothingGetSignalError() instead")
    void nhClothingGetSignalE(QList<OAINHClothing> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhClothingGetSignalError(QList<OAINHClothing> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhEventsGetSignalError() instead")
    void nhEventsGetSignalE(QList<OAINHEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhEventsGetSignalError(QList<OAINHEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFishFishGetSignalError() instead")
    void nhFishFishGetSignalE(OAINHFish summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFishFishGetSignalError(OAINHFish summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFishGetSignalError() instead")
    void nhFishGetSignalE(QList<OAINHFish> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFishGetSignalError(QList<OAINHFish> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsAllFossilGetSignalError() instead")
    void nhFossilsAllFossilGetSignalE(OAINHFossilGroupWithIndividualFossils summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsAllFossilGetSignalError(OAINHFossilGroupWithIndividualFossils summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsAllGetSignalError() instead")
    void nhFossilsAllGetSignalE(QList<OAINHFossilGroupWithIndividualFossilsNoMatched> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsAllGetSignalError(QList<OAINHFossilGroupWithIndividualFossilsNoMatched> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsGroupsFossilGroupGetSignalError() instead")
    void nhFossilsGroupsFossilGroupGetSignalE(OAINHFossilGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsGroupsFossilGroupGetSignalError(OAINHFossilGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsGroupsGetSignalError() instead")
    void nhFossilsGroupsGetSignalE(QList<OAINHFossilGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsGroupsGetSignalError(QList<OAINHFossilGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsIndividualsFossilGetSignalError() instead")
    void nhFossilsIndividualsFossilGetSignalE(OAINHIndividualFossil summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsIndividualsFossilGetSignalError(OAINHIndividualFossil summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsIndividualsGetSignalError() instead")
    void nhFossilsIndividualsGetSignalE(QList<OAINHIndividualFossil> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsIndividualsGetSignalError(QList<OAINHIndividualFossil> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFurnitureFurnitureGetSignalError() instead")
    void nhFurnitureFurnitureGetSignalE(OAINHFurniture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFurnitureFurnitureGetSignalError(OAINHFurniture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFurnitureGetSignalError() instead")
    void nhFurnitureGetSignalE(QList<OAINHFurniture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFurnitureGetSignalError(QList<OAINHFurniture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhInteriorGetSignalError() instead")
    void nhInteriorGetSignalE(QList<OAINHInterior> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhInteriorGetSignalError(QList<OAINHInterior> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhInteriorItemGetSignalError() instead")
    void nhInteriorItemGetSignalE(OAINHInterior summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhInteriorItemGetSignalError(OAINHInterior summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhItemsGetSignalError() instead")
    void nhItemsGetSignalE(QList<OAINHItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhItemsGetSignalError(QList<OAINHItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhItemsItemGetSignalError() instead")
    void nhItemsItemGetSignalE(OAINHItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhItemsItemGetSignalError(OAINHItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhPhotosGetSignalError() instead")
    void nhPhotosGetSignalE(QList<OAINHPhoto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhPhotosGetSignalError(QList<OAINHPhoto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhPhotosItemGetSignalError() instead")
    void nhPhotosItemGetSignalE(OAINHPhoto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhPhotosItemGetSignalError(OAINHPhoto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhRecipesGetSignalError() instead")
    void nhRecipesGetSignalE(QList<OAINHRecipe> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhRecipesGetSignalError(QList<OAINHRecipe> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhRecipesItemGetSignalError() instead")
    void nhRecipesItemGetSignalE(OAINHRecipe summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhRecipesItemGetSignalError(OAINHRecipe summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhSeaGetSignalError() instead")
    void nhSeaGetSignalE(QList<OAINHSeaCreature> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhSeaGetSignalError(QList<OAINHSeaCreature> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhSeaSeaCreatureGetSignalError() instead")
    void nhSeaSeaCreatureGetSignalE(OAINHSeaCreature summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhSeaSeaCreatureGetSignalError(OAINHSeaCreature summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhToolsGetSignalError() instead")
    void nhToolsGetSignalE(QList<OAINHTool> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhToolsGetSignalError(QList<OAINHTool> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhToolsToolGetSignalError() instead")
    void nhToolsToolGetSignalE(OAINHTool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nhToolsToolGetSignalError(OAINHTool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use villagersGetSignalError() instead")
    void villagersGetSignalE(QList<OAIVillager> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void villagersGetSignalError(QList<OAIVillager> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use nhArtArtworkGetSignalErrorFull() instead")
    void nhArtArtworkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhArtArtworkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhArtGetSignalErrorFull() instead")
    void nhArtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhArtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhBugsBugGetSignalErrorFull() instead")
    void nhBugsBugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhBugsBugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhBugsGetSignalErrorFull() instead")
    void nhBugsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhBugsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhClothingClothingGetSignalErrorFull() instead")
    void nhClothingClothingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhClothingClothingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhClothingGetSignalErrorFull() instead")
    void nhClothingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhClothingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhEventsGetSignalErrorFull() instead")
    void nhEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFishFishGetSignalErrorFull() instead")
    void nhFishFishGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFishFishGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFishGetSignalErrorFull() instead")
    void nhFishGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFishGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsAllFossilGetSignalErrorFull() instead")
    void nhFossilsAllFossilGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsAllFossilGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsAllGetSignalErrorFull() instead")
    void nhFossilsAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsGroupsFossilGroupGetSignalErrorFull() instead")
    void nhFossilsGroupsFossilGroupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsGroupsFossilGroupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsGroupsGetSignalErrorFull() instead")
    void nhFossilsGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsIndividualsFossilGetSignalErrorFull() instead")
    void nhFossilsIndividualsFossilGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsIndividualsFossilGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFossilsIndividualsGetSignalErrorFull() instead")
    void nhFossilsIndividualsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFossilsIndividualsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFurnitureFurnitureGetSignalErrorFull() instead")
    void nhFurnitureFurnitureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFurnitureFurnitureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhFurnitureGetSignalErrorFull() instead")
    void nhFurnitureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhFurnitureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhInteriorGetSignalErrorFull() instead")
    void nhInteriorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhInteriorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhInteriorItemGetSignalErrorFull() instead")
    void nhInteriorItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhInteriorItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhItemsGetSignalErrorFull() instead")
    void nhItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhItemsItemGetSignalErrorFull() instead")
    void nhItemsItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhItemsItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhPhotosGetSignalErrorFull() instead")
    void nhPhotosGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhPhotosGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhPhotosItemGetSignalErrorFull() instead")
    void nhPhotosItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhPhotosItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhRecipesGetSignalErrorFull() instead")
    void nhRecipesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhRecipesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhRecipesItemGetSignalErrorFull() instead")
    void nhRecipesItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhRecipesItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhSeaGetSignalErrorFull() instead")
    void nhSeaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhSeaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhSeaSeaCreatureGetSignalErrorFull() instead")
    void nhSeaSeaCreatureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhSeaSeaCreatureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhToolsGetSignalErrorFull() instead")
    void nhToolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhToolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nhToolsToolGetSignalErrorFull() instead")
    void nhToolsToolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nhToolsToolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use villagersGetSignalErrorFull() instead")
    void villagersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void villagersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
