/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHFish.h
 *
 * 
 */

#ifndef OAINHFish_H
#define OAINHFish_H

#include <QJsonObject>

#include "OAINHFish_north.h"
#include "OAINHFish_south.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINHFish_north;
class OAINHFish_south;

class OAINHFish : public OAIObject {
public:
    OAINHFish();
    OAINHFish(QString json);
    ~OAINHFish() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCatchphrases() const;
    void setCatchphrases(const QList<QString> &catchphrases);
    bool is_catchphrases_Set() const;
    bool is_catchphrases_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINHFish_north getNorth() const;
    void setNorth(const OAINHFish_north &north);
    bool is_north_Set() const;
    bool is_north_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getRarity() const;
    void setRarity(const QString &rarity);
    bool is_rarity_Set() const;
    bool is_rarity_Valid() const;

    QString getRenderUrl() const;
    void setRenderUrl(const QString &render_url);
    bool is_render_url_Set() const;
    bool is_render_url_Valid() const;

    qint32 getSellCj() const;
    void setSellCj(const qint32 &sell_cj);
    bool is_sell_cj_Set() const;
    bool is_sell_cj_Valid() const;

    qint32 getSellNook() const;
    void setSellNook(const qint32 &sell_nook);
    bool is_sell_nook_Set() const;
    bool is_sell_nook_Valid() const;

    QString getShadowSize() const;
    void setShadowSize(const QString &shadow_size);
    bool is_shadow_size_Set() const;
    bool is_shadow_size_Valid() const;

    OAINHFish_south getSouth() const;
    void setSouth(const OAINHFish_south &south);
    bool is_south_Set() const;
    bool is_south_Valid() const;

    float getTankLength() const;
    void setTankLength(const float &tank_length);
    bool is_tank_length_Set() const;
    bool is_tank_length_Valid() const;

    float getTankWidth() const;
    void setTankWidth(const float &tank_width);
    bool is_tank_width_Set() const;
    bool is_tank_width_Valid() const;

    qint32 getTotalCatch() const;
    void setTotalCatch(const qint32 &total_catch);
    bool is_total_catch_Set() const;
    bool is_total_catch_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_catchphrases;
    bool m_catchphrases_isSet;
    bool m_catchphrases_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINHFish_north m_north;
    bool m_north_isSet;
    bool m_north_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_rarity;
    bool m_rarity_isSet;
    bool m_rarity_isValid;

    QString m_render_url;
    bool m_render_url_isSet;
    bool m_render_url_isValid;

    qint32 m_sell_cj;
    bool m_sell_cj_isSet;
    bool m_sell_cj_isValid;

    qint32 m_sell_nook;
    bool m_sell_nook_isSet;
    bool m_sell_nook_isValid;

    QString m_shadow_size;
    bool m_shadow_size_isSet;
    bool m_shadow_size_isValid;

    OAINHFish_south m_south;
    bool m_south_isSet;
    bool m_south_isValid;

    float m_tank_length;
    bool m_tank_length_isSet;
    bool m_tank_length_isValid;

    float m_tank_width;
    bool m_tank_width_isSet;
    bool m_tank_width_isValid;

    qint32 m_total_catch;
    bool m_total_catch_isSet;
    bool m_total_catch_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHFish)

#endif // OAINHFish_H
