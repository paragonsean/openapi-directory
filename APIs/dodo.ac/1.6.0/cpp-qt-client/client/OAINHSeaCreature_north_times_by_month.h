/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHSeaCreature_north_times_by_month.h
 *
 * An object with twelve numerical keys, each representing a month (&#x60;\&quot;1\&quot;&#x60; for January, &#x60;\&quot;2\&quot;&#x60; for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be &#x60;\&quot;NA\&quot;&#x60;.
 */

#ifndef OAINHSeaCreature_north_times_by_month_H
#define OAINHSeaCreature_north_times_by_month_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINHSeaCreature_north_times_by_month : public OAIObject {
public:
    OAINHSeaCreature_north_times_by_month();
    OAINHSeaCreature_north_times_by_month(QString json);
    ~OAINHSeaCreature_north_times_by_month() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getR1() const;
    void setR1(const QString &r_1);
    bool is_r_1_Set() const;
    bool is_r_1_Valid() const;

    QString getR2() const;
    void setR2(const QString &r_2);
    bool is_r_2_Set() const;
    bool is_r_2_Valid() const;

    QString getR3() const;
    void setR3(const QString &r_3);
    bool is_r_3_Set() const;
    bool is_r_3_Valid() const;

    QString getR4() const;
    void setR4(const QString &r_4);
    bool is_r_4_Set() const;
    bool is_r_4_Valid() const;

    QString getR5() const;
    void setR5(const QString &r_5);
    bool is_r_5_Set() const;
    bool is_r_5_Valid() const;

    QString getR6() const;
    void setR6(const QString &r_6);
    bool is_r_6_Set() const;
    bool is_r_6_Valid() const;

    QString getR7() const;
    void setR7(const QString &r_7);
    bool is_r_7_Set() const;
    bool is_r_7_Valid() const;

    QString getR8() const;
    void setR8(const QString &r_8);
    bool is_r_8_Set() const;
    bool is_r_8_Valid() const;

    QString getR9() const;
    void setR9(const QString &r_9);
    bool is_r_9_Set() const;
    bool is_r_9_Valid() const;

    QString getR10() const;
    void setR10(const QString &r_10);
    bool is_r_10_Set() const;
    bool is_r_10_Valid() const;

    QString getR11() const;
    void setR11(const QString &r_11);
    bool is_r_11_Set() const;
    bool is_r_11_Valid() const;

    QString getR12() const;
    void setR12(const QString &r_12);
    bool is_r_12_Set() const;
    bool is_r_12_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_1;
    bool m_r_1_isSet;
    bool m_r_1_isValid;

    QString m_r_2;
    bool m_r_2_isSet;
    bool m_r_2_isValid;

    QString m_r_3;
    bool m_r_3_isSet;
    bool m_r_3_isValid;

    QString m_r_4;
    bool m_r_4_isSet;
    bool m_r_4_isValid;

    QString m_r_5;
    bool m_r_5_isSet;
    bool m_r_5_isValid;

    QString m_r_6;
    bool m_r_6_isSet;
    bool m_r_6_isValid;

    QString m_r_7;
    bool m_r_7_isSet;
    bool m_r_7_isValid;

    QString m_r_8;
    bool m_r_8_isSet;
    bool m_r_8_isValid;

    QString m_r_9;
    bool m_r_9_isSet;
    bool m_r_9_isValid;

    QString m_r_10;
    bool m_r_10_isSet;
    bool m_r_10_isValid;

    QString m_r_11;
    bool m_r_11_isSet;
    bool m_r_11_isValid;

    QString m_r_12;
    bool m_r_12_isSet;
    bool m_r_12_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHSeaCreature_north_times_by_month)

#endif // OAINHSeaCreature_north_times_by_month_H
