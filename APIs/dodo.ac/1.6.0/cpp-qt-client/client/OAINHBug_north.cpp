/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHBug_north.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHBug_north::OAINHBug_north(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHBug_north::OAINHBug_north() {
    this->initializeModel();
}

OAINHBug_north::~OAINHBug_north() {}

void OAINHBug_north::initializeModel() {

    m_availability_array_isSet = false;
    m_availability_array_isValid = false;

    m_months_isSet = false;
    m_months_isValid = false;

    m_months_array_isSet = false;
    m_months_array_isValid = false;

    m_times_by_month_isSet = false;
    m_times_by_month_isValid = false;
}

void OAINHBug_north::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHBug_north::fromJsonObject(QJsonObject json) {

    m_availability_array_isValid = ::OpenAPI::fromJsonValue(m_availability_array, json[QString("availability_array")]);
    m_availability_array_isSet = !json[QString("availability_array")].isNull() && m_availability_array_isValid;

    m_months_isValid = ::OpenAPI::fromJsonValue(m_months, json[QString("months")]);
    m_months_isSet = !json[QString("months")].isNull() && m_months_isValid;

    m_months_array_isValid = ::OpenAPI::fromJsonValue(m_months_array, json[QString("months_array")]);
    m_months_array_isSet = !json[QString("months_array")].isNull() && m_months_array_isValid;

    m_times_by_month_isValid = ::OpenAPI::fromJsonValue(m_times_by_month, json[QString("times_by_month")]);
    m_times_by_month_isSet = !json[QString("times_by_month")].isNull() && m_times_by_month_isValid;
}

QString OAINHBug_north::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHBug_north::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_array.size() > 0) {
        obj.insert(QString("availability_array"), ::OpenAPI::toJsonValue(m_availability_array));
    }
    if (m_months_isSet) {
        obj.insert(QString("months"), ::OpenAPI::toJsonValue(m_months));
    }
    if (m_months_array.size() > 0) {
        obj.insert(QString("months_array"), ::OpenAPI::toJsonValue(m_months_array));
    }
    if (m_times_by_month.isSet()) {
        obj.insert(QString("times_by_month"), ::OpenAPI::toJsonValue(m_times_by_month));
    }
    return obj;
}

QList<OAINHBug_north_availability_array_inner> OAINHBug_north::getAvailabilityArray() const {
    return m_availability_array;
}
void OAINHBug_north::setAvailabilityArray(const QList<OAINHBug_north_availability_array_inner> &availability_array) {
    m_availability_array = availability_array;
    m_availability_array_isSet = true;
}

bool OAINHBug_north::is_availability_array_Set() const{
    return m_availability_array_isSet;
}

bool OAINHBug_north::is_availability_array_Valid() const{
    return m_availability_array_isValid;
}

QString OAINHBug_north::getMonths() const {
    return m_months;
}
void OAINHBug_north::setMonths(const QString &months) {
    m_months = months;
    m_months_isSet = true;
}

bool OAINHBug_north::is_months_Set() const{
    return m_months_isSet;
}

bool OAINHBug_north::is_months_Valid() const{
    return m_months_isValid;
}

QList<qint32> OAINHBug_north::getMonthsArray() const {
    return m_months_array;
}
void OAINHBug_north::setMonthsArray(const QList<qint32> &months_array) {
    m_months_array = months_array;
    m_months_array_isSet = true;
}

bool OAINHBug_north::is_months_array_Set() const{
    return m_months_array_isSet;
}

bool OAINHBug_north::is_months_array_Valid() const{
    return m_months_array_isValid;
}

OAINHBug_north_times_by_month OAINHBug_north::getTimesByMonth() const {
    return m_times_by_month;
}
void OAINHBug_north::setTimesByMonth(const OAINHBug_north_times_by_month &times_by_month) {
    m_times_by_month = times_by_month;
    m_times_by_month_isSet = true;
}

bool OAINHBug_north::is_times_by_month_Set() const{
    return m_times_by_month_isSet;
}

bool OAINHBug_north::is_times_by_month_Valid() const{
    return m_times_by_month_isValid;
}

bool OAINHBug_north::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_months_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_by_month.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHBug_north::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
