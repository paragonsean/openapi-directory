/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHFurniture.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHFurniture::OAINHFurniture(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHFurniture::OAINHFurniture() {
    this->initializeModel();
}

OAINHFurniture::~OAINHFurniture() {}

void OAINHFurniture::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_custom_body_part_isSet = false;
    m_custom_body_part_isValid = false;

    m_custom_kit_type_isSet = false;
    m_custom_kit_type_isValid = false;

    m_custom_kits_isSet = false;
    m_custom_kits_isValid = false;

    m_custom_pattern_part_isSet = false;
    m_custom_pattern_part_isValid = false;

    m_customizable_isSet = false;
    m_customizable_isValid = false;

    m_door_decor_isSet = false;
    m_door_decor_isValid = false;

    m_functions_isSet = false;
    m_functions_isValid = false;

    m_grid_length_isSet = false;
    m_grid_length_isValid = false;

    m_grid_width_isSet = false;
    m_grid_width_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hha_base_isSet = false;
    m_hha_base_isValid = false;

    m_hha_category_isSet = false;
    m_hha_category_isValid = false;

    m_item_series_isSet = false;
    m_item_series_isValid = false;

    m_item_set_isSet = false;
    m_item_set_isValid = false;

    m_lucky_isSet = false;
    m_lucky_isValid = false;

    m_lucky_season_isSet = false;
    m_lucky_season_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_pattern_total_isSet = false;
    m_pattern_total_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_unlocked_isSet = false;
    m_unlocked_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_variation_total_isSet = false;
    m_variation_total_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;

    m_version_added_isSet = false;
    m_version_added_isValid = false;
}

void OAINHFurniture::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHFurniture::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_custom_body_part_isValid = ::OpenAPI::fromJsonValue(m_custom_body_part, json[QString("custom_body_part")]);
    m_custom_body_part_isSet = !json[QString("custom_body_part")].isNull() && m_custom_body_part_isValid;

    m_custom_kit_type_isValid = ::OpenAPI::fromJsonValue(m_custom_kit_type, json[QString("custom_kit_type")]);
    m_custom_kit_type_isSet = !json[QString("custom_kit_type")].isNull() && m_custom_kit_type_isValid;

    m_custom_kits_isValid = ::OpenAPI::fromJsonValue(m_custom_kits, json[QString("custom_kits")]);
    m_custom_kits_isSet = !json[QString("custom_kits")].isNull() && m_custom_kits_isValid;

    m_custom_pattern_part_isValid = ::OpenAPI::fromJsonValue(m_custom_pattern_part, json[QString("custom_pattern_part")]);
    m_custom_pattern_part_isSet = !json[QString("custom_pattern_part")].isNull() && m_custom_pattern_part_isValid;

    m_customizable_isValid = ::OpenAPI::fromJsonValue(m_customizable, json[QString("customizable")]);
    m_customizable_isSet = !json[QString("customizable")].isNull() && m_customizable_isValid;

    m_door_decor_isValid = ::OpenAPI::fromJsonValue(m_door_decor, json[QString("door_decor")]);
    m_door_decor_isSet = !json[QString("door_decor")].isNull() && m_door_decor_isValid;

    m_functions_isValid = ::OpenAPI::fromJsonValue(m_functions, json[QString("functions")]);
    m_functions_isSet = !json[QString("functions")].isNull() && m_functions_isValid;

    m_grid_length_isValid = ::OpenAPI::fromJsonValue(m_grid_length, json[QString("grid_length")]);
    m_grid_length_isSet = !json[QString("grid_length")].isNull() && m_grid_length_isValid;

    m_grid_width_isValid = ::OpenAPI::fromJsonValue(m_grid_width, json[QString("grid_width")]);
    m_grid_width_isSet = !json[QString("grid_width")].isNull() && m_grid_width_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_hha_base_isValid = ::OpenAPI::fromJsonValue(m_hha_base, json[QString("hha_base")]);
    m_hha_base_isSet = !json[QString("hha_base")].isNull() && m_hha_base_isValid;

    m_hha_category_isValid = ::OpenAPI::fromJsonValue(m_hha_category, json[QString("hha_category")]);
    m_hha_category_isSet = !json[QString("hha_category")].isNull() && m_hha_category_isValid;

    m_item_series_isValid = ::OpenAPI::fromJsonValue(m_item_series, json[QString("item_series")]);
    m_item_series_isSet = !json[QString("item_series")].isNull() && m_item_series_isValid;

    m_item_set_isValid = ::OpenAPI::fromJsonValue(m_item_set, json[QString("item_set")]);
    m_item_set_isSet = !json[QString("item_set")].isNull() && m_item_set_isValid;

    m_lucky_isValid = ::OpenAPI::fromJsonValue(m_lucky, json[QString("lucky")]);
    m_lucky_isSet = !json[QString("lucky")].isNull() && m_lucky_isValid;

    m_lucky_season_isValid = ::OpenAPI::fromJsonValue(m_lucky_season, json[QString("lucky_season")]);
    m_lucky_season_isSet = !json[QString("lucky_season")].isNull() && m_lucky_season_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_pattern_total_isValid = ::OpenAPI::fromJsonValue(m_pattern_total, json[QString("pattern_total")]);
    m_pattern_total_isSet = !json[QString("pattern_total")].isNull() && m_pattern_total_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_unlocked_isValid = ::OpenAPI::fromJsonValue(m_unlocked, json[QString("unlocked")]);
    m_unlocked_isSet = !json[QString("unlocked")].isNull() && m_unlocked_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_variation_total_isValid = ::OpenAPI::fromJsonValue(m_variation_total, json[QString("variation_total")]);
    m_variation_total_isSet = !json[QString("variation_total")].isNull() && m_variation_total_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;

    m_version_added_isValid = ::OpenAPI::fromJsonValue(m_version_added, json[QString("version_added")]);
    m_version_added_isSet = !json[QString("version_added")].isNull() && m_version_added_isValid;
}

QString OAINHFurniture::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHFurniture::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_custom_body_part_isSet) {
        obj.insert(QString("custom_body_part"), ::OpenAPI::toJsonValue(m_custom_body_part));
    }
    if (m_custom_kit_type_isSet) {
        obj.insert(QString("custom_kit_type"), ::OpenAPI::toJsonValue(m_custom_kit_type));
    }
    if (m_custom_kits_isSet) {
        obj.insert(QString("custom_kits"), ::OpenAPI::toJsonValue(m_custom_kits));
    }
    if (m_custom_pattern_part_isSet) {
        obj.insert(QString("custom_pattern_part"), ::OpenAPI::toJsonValue(m_custom_pattern_part));
    }
    if (m_customizable_isSet) {
        obj.insert(QString("customizable"), ::OpenAPI::toJsonValue(m_customizable));
    }
    if (m_door_decor_isSet) {
        obj.insert(QString("door_decor"), ::OpenAPI::toJsonValue(m_door_decor));
    }
    if (m_functions.size() > 0) {
        obj.insert(QString("functions"), ::OpenAPI::toJsonValue(m_functions));
    }
    if (m_grid_length_isSet) {
        obj.insert(QString("grid_length"), ::OpenAPI::toJsonValue(m_grid_length));
    }
    if (m_grid_width_isSet) {
        obj.insert(QString("grid_width"), ::OpenAPI::toJsonValue(m_grid_width));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hha_base_isSet) {
        obj.insert(QString("hha_base"), ::OpenAPI::toJsonValue(m_hha_base));
    }
    if (m_hha_category_isSet) {
        obj.insert(QString("hha_category"), ::OpenAPI::toJsonValue(m_hha_category));
    }
    if (m_item_series_isSet) {
        obj.insert(QString("item_series"), ::OpenAPI::toJsonValue(m_item_series));
    }
    if (m_item_set_isSet) {
        obj.insert(QString("item_set"), ::OpenAPI::toJsonValue(m_item_set));
    }
    if (m_lucky_isSet) {
        obj.insert(QString("lucky"), ::OpenAPI::toJsonValue(m_lucky));
    }
    if (m_lucky_season_isSet) {
        obj.insert(QString("lucky_season"), ::OpenAPI::toJsonValue(m_lucky_season));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_pattern_total_isSet) {
        obj.insert(QString("pattern_total"), ::OpenAPI::toJsonValue(m_pattern_total));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_unlocked_isSet) {
        obj.insert(QString("unlocked"), ::OpenAPI::toJsonValue(m_unlocked));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_variation_total_isSet) {
        obj.insert(QString("variation_total"), ::OpenAPI::toJsonValue(m_variation_total));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    if (m_version_added_isSet) {
        obj.insert(QString("version_added"), ::OpenAPI::toJsonValue(m_version_added));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHFurniture::getAvailability() const {
    return m_availability;
}
void OAINHFurniture::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHFurniture::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHFurniture::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHFurniture::getBuy() const {
    return m_buy;
}
void OAINHFurniture::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHFurniture::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHFurniture::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAINHFurniture::getCategory() const {
    return m_category;
}
void OAINHFurniture::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINHFurniture::is_category_Set() const{
    return m_category_isSet;
}

bool OAINHFurniture::is_category_Valid() const{
    return m_category_isValid;
}

QString OAINHFurniture::getCustomBodyPart() const {
    return m_custom_body_part;
}
void OAINHFurniture::setCustomBodyPart(const QString &custom_body_part) {
    m_custom_body_part = custom_body_part;
    m_custom_body_part_isSet = true;
}

bool OAINHFurniture::is_custom_body_part_Set() const{
    return m_custom_body_part_isSet;
}

bool OAINHFurniture::is_custom_body_part_Valid() const{
    return m_custom_body_part_isValid;
}

QString OAINHFurniture::getCustomKitType() const {
    return m_custom_kit_type;
}
void OAINHFurniture::setCustomKitType(const QString &custom_kit_type) {
    m_custom_kit_type = custom_kit_type;
    m_custom_kit_type_isSet = true;
}

bool OAINHFurniture::is_custom_kit_type_Set() const{
    return m_custom_kit_type_isSet;
}

bool OAINHFurniture::is_custom_kit_type_Valid() const{
    return m_custom_kit_type_isValid;
}

qint32 OAINHFurniture::getCustomKits() const {
    return m_custom_kits;
}
void OAINHFurniture::setCustomKits(const qint32 &custom_kits) {
    m_custom_kits = custom_kits;
    m_custom_kits_isSet = true;
}

bool OAINHFurniture::is_custom_kits_Set() const{
    return m_custom_kits_isSet;
}

bool OAINHFurniture::is_custom_kits_Valid() const{
    return m_custom_kits_isValid;
}

QString OAINHFurniture::getCustomPatternPart() const {
    return m_custom_pattern_part;
}
void OAINHFurniture::setCustomPatternPart(const QString &custom_pattern_part) {
    m_custom_pattern_part = custom_pattern_part;
    m_custom_pattern_part_isSet = true;
}

bool OAINHFurniture::is_custom_pattern_part_Set() const{
    return m_custom_pattern_part_isSet;
}

bool OAINHFurniture::is_custom_pattern_part_Valid() const{
    return m_custom_pattern_part_isValid;
}

bool OAINHFurniture::isCustomizable() const {
    return m_customizable;
}
void OAINHFurniture::setCustomizable(const bool &customizable) {
    m_customizable = customizable;
    m_customizable_isSet = true;
}

bool OAINHFurniture::is_customizable_Set() const{
    return m_customizable_isSet;
}

bool OAINHFurniture::is_customizable_Valid() const{
    return m_customizable_isValid;
}

bool OAINHFurniture::isDoorDecor() const {
    return m_door_decor;
}
void OAINHFurniture::setDoorDecor(const bool &door_decor) {
    m_door_decor = door_decor;
    m_door_decor_isSet = true;
}

bool OAINHFurniture::is_door_decor_Set() const{
    return m_door_decor_isSet;
}

bool OAINHFurniture::is_door_decor_Valid() const{
    return m_door_decor_isValid;
}

QList<QString> OAINHFurniture::getFunctions() const {
    return m_functions;
}
void OAINHFurniture::setFunctions(const QList<QString> &functions) {
    m_functions = functions;
    m_functions_isSet = true;
}

bool OAINHFurniture::is_functions_Set() const{
    return m_functions_isSet;
}

bool OAINHFurniture::is_functions_Valid() const{
    return m_functions_isValid;
}

float OAINHFurniture::getGridLength() const {
    return m_grid_length;
}
void OAINHFurniture::setGridLength(const float &grid_length) {
    m_grid_length = grid_length;
    m_grid_length_isSet = true;
}

bool OAINHFurniture::is_grid_length_Set() const{
    return m_grid_length_isSet;
}

bool OAINHFurniture::is_grid_length_Valid() const{
    return m_grid_length_isValid;
}

float OAINHFurniture::getGridWidth() const {
    return m_grid_width;
}
void OAINHFurniture::setGridWidth(const float &grid_width) {
    m_grid_width = grid_width;
    m_grid_width_isSet = true;
}

bool OAINHFurniture::is_grid_width_Set() const{
    return m_grid_width_isSet;
}

bool OAINHFurniture::is_grid_width_Valid() const{
    return m_grid_width_isValid;
}

float OAINHFurniture::getHeight() const {
    return m_height;
}
void OAINHFurniture::setHeight(const float &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAINHFurniture::is_height_Set() const{
    return m_height_isSet;
}

bool OAINHFurniture::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAINHFurniture::getHhaBase() const {
    return m_hha_base;
}
void OAINHFurniture::setHhaBase(const qint32 &hha_base) {
    m_hha_base = hha_base;
    m_hha_base_isSet = true;
}

bool OAINHFurniture::is_hha_base_Set() const{
    return m_hha_base_isSet;
}

bool OAINHFurniture::is_hha_base_Valid() const{
    return m_hha_base_isValid;
}

QString OAINHFurniture::getHhaCategory() const {
    return m_hha_category;
}
void OAINHFurniture::setHhaCategory(const QString &hha_category) {
    m_hha_category = hha_category;
    m_hha_category_isSet = true;
}

bool OAINHFurniture::is_hha_category_Set() const{
    return m_hha_category_isSet;
}

bool OAINHFurniture::is_hha_category_Valid() const{
    return m_hha_category_isValid;
}

QString OAINHFurniture::getItemSeries() const {
    return m_item_series;
}
void OAINHFurniture::setItemSeries(const QString &item_series) {
    m_item_series = item_series;
    m_item_series_isSet = true;
}

bool OAINHFurniture::is_item_series_Set() const{
    return m_item_series_isSet;
}

bool OAINHFurniture::is_item_series_Valid() const{
    return m_item_series_isValid;
}

QString OAINHFurniture::getItemSet() const {
    return m_item_set;
}
void OAINHFurniture::setItemSet(const QString &item_set) {
    m_item_set = item_set;
    m_item_set_isSet = true;
}

bool OAINHFurniture::is_item_set_Set() const{
    return m_item_set_isSet;
}

bool OAINHFurniture::is_item_set_Valid() const{
    return m_item_set_isValid;
}

bool OAINHFurniture::isLucky() const {
    return m_lucky;
}
void OAINHFurniture::setLucky(const bool &lucky) {
    m_lucky = lucky;
    m_lucky_isSet = true;
}

bool OAINHFurniture::is_lucky_Set() const{
    return m_lucky_isSet;
}

bool OAINHFurniture::is_lucky_Valid() const{
    return m_lucky_isValid;
}

QString OAINHFurniture::getLuckySeason() const {
    return m_lucky_season;
}
void OAINHFurniture::setLuckySeason(const QString &lucky_season) {
    m_lucky_season = lucky_season;
    m_lucky_season_isSet = true;
}

bool OAINHFurniture::is_lucky_season_Set() const{
    return m_lucky_season_isSet;
}

bool OAINHFurniture::is_lucky_season_Valid() const{
    return m_lucky_season_isValid;
}

QString OAINHFurniture::getName() const {
    return m_name;
}
void OAINHFurniture::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHFurniture::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHFurniture::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINHFurniture::getNotes() const {
    return m_notes;
}
void OAINHFurniture::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINHFurniture::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINHFurniture::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAINHFurniture::getPatternTotal() const {
    return m_pattern_total;
}
void OAINHFurniture::setPatternTotal(const qint32 &pattern_total) {
    m_pattern_total = pattern_total;
    m_pattern_total_isSet = true;
}

bool OAINHFurniture::is_pattern_total_Set() const{
    return m_pattern_total_isSet;
}

bool OAINHFurniture::is_pattern_total_Valid() const{
    return m_pattern_total_isValid;
}

qint32 OAINHFurniture::getSell() const {
    return m_sell;
}
void OAINHFurniture::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHFurniture::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHFurniture::is_sell_Valid() const{
    return m_sell_isValid;
}

QString OAINHFurniture::getTag() const {
    return m_tag;
}
void OAINHFurniture::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAINHFurniture::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAINHFurniture::is_tag_Valid() const{
    return m_tag_isValid;
}

QList<QString> OAINHFurniture::getThemes() const {
    return m_themes;
}
void OAINHFurniture::setThemes(const QList<QString> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAINHFurniture::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAINHFurniture::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAINHFurniture::isUnlocked() const {
    return m_unlocked;
}
void OAINHFurniture::setUnlocked(const bool &unlocked) {
    m_unlocked = unlocked;
    m_unlocked_isSet = true;
}

bool OAINHFurniture::is_unlocked_Set() const{
    return m_unlocked_isSet;
}

bool OAINHFurniture::is_unlocked_Valid() const{
    return m_unlocked_isValid;
}

QString OAINHFurniture::getUrl() const {
    return m_url;
}
void OAINHFurniture::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHFurniture::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHFurniture::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAINHFurniture::getVariationTotal() const {
    return m_variation_total;
}
void OAINHFurniture::setVariationTotal(const qint32 &variation_total) {
    m_variation_total = variation_total;
    m_variation_total_isSet = true;
}

bool OAINHFurniture::is_variation_total_Set() const{
    return m_variation_total_isSet;
}

bool OAINHFurniture::is_variation_total_Valid() const{
    return m_variation_total_isValid;
}

QList<OAINHFurniture_variations_inner> OAINHFurniture::getVariations() const {
    return m_variations;
}
void OAINHFurniture::setVariations(const QList<OAINHFurniture_variations_inner> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAINHFurniture::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAINHFurniture::is_variations_Valid() const{
    return m_variations_isValid;
}

QString OAINHFurniture::getVersionAdded() const {
    return m_version_added;
}
void OAINHFurniture::setVersionAdded(const QString &version_added) {
    m_version_added = version_added;
    m_version_added_isSet = true;
}

bool OAINHFurniture::is_version_added_Set() const{
    return m_version_added_isSet;
}

bool OAINHFurniture::is_version_added_Valid() const{
    return m_version_added_isValid;
}

bool OAINHFurniture::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_kit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_kits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_pattern_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_door_decor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lucky_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lucky_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_added_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHFurniture::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
