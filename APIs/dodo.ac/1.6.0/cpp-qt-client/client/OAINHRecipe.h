/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHRecipe.h
 *
 * 
 */

#ifndef OAINHRecipe_H
#define OAINHRecipe_H

#include <QJsonObject>

#include "OAINHClothing_availability_inner.h"
#include "OAINHClothing_buy_inner.h"
#include "OAINHRecipe_materials_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINHClothing_availability_inner;
class OAINHClothing_buy_inner;
class OAINHRecipe_materials_inner;

class OAINHRecipe : public OAIObject {
public:
    OAINHRecipe();
    OAINHRecipe(QString json);
    ~OAINHRecipe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAINHClothing_availability_inner> getAvailability() const;
    void setAvailability(const QList<OAINHClothing_availability_inner> &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    QList<OAINHClothing_buy_inner> getBuy() const;
    void setBuy(const QList<OAINHClothing_buy_inner> &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QList<OAINHRecipe_materials_inner> getMaterials() const;
    void setMaterials(const QList<OAINHRecipe_materials_inner> &materials);
    bool is_materials_Set() const;
    bool is_materials_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getRecipesToUnlock() const;
    void setRecipesToUnlock(const qint32 &recipes_to_unlock);
    bool is_recipes_to_unlock_Set() const;
    bool is_recipes_to_unlock_Valid() const;

    qint32 getSell() const;
    void setSell(const qint32 &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    qint32 getSerialId() const;
    void setSerialId(const qint32 &serial_id);
    bool is_serial_id_Set() const;
    bool is_serial_id_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAINHClothing_availability_inner> m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;

    QList<OAINHClothing_buy_inner> m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QList<OAINHRecipe_materials_inner> m_materials;
    bool m_materials_isSet;
    bool m_materials_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_recipes_to_unlock;
    bool m_recipes_to_unlock_isSet;
    bool m_recipes_to_unlock_isValid;

    qint32 m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    qint32 m_serial_id;
    bool m_serial_id_isSet;
    bool m_serial_id_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHRecipe)

#endif // OAINHRecipe_H
