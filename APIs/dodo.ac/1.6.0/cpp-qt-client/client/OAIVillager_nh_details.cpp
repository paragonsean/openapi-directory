/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVillager_nh_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVillager_nh_details::OAIVillager_nh_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVillager_nh_details::OAIVillager_nh_details() {
    this->initializeModel();
}

OAIVillager_nh_details::~OAIVillager_nh_details() {}

void OAIVillager_nh_details::initializeModel() {

    m_catchphrase_isSet = false;
    m_catchphrase_isValid = false;

    m_clothing_isSet = false;
    m_clothing_isValid = false;

    m_clothing_variation_isSet = false;
    m_clothing_variation_isValid = false;

    m_fav_colors_isSet = false;
    m_fav_colors_isValid = false;

    m_fav_styles_isSet = false;
    m_fav_styles_isValid = false;

    m_hobby_isSet = false;
    m_hobby_isValid = false;

    m_house_exterior_url_isSet = false;
    m_house_exterior_url_isValid = false;

    m_house_flooring_isSet = false;
    m_house_flooring_isValid = false;

    m_house_interior_url_isSet = false;
    m_house_interior_url_isValid = false;

    m_house_music_isSet = false;
    m_house_music_isValid = false;

    m_house_music_note_isSet = false;
    m_house_music_note_isValid = false;

    m_house_wallpaper_isSet = false;
    m_house_wallpaper_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_sub_personality_isSet = false;
    m_sub_personality_isValid = false;
}

void OAIVillager_nh_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVillager_nh_details::fromJsonObject(QJsonObject json) {

    m_catchphrase_isValid = ::OpenAPI::fromJsonValue(m_catchphrase, json[QString("catchphrase")]);
    m_catchphrase_isSet = !json[QString("catchphrase")].isNull() && m_catchphrase_isValid;

    m_clothing_isValid = ::OpenAPI::fromJsonValue(m_clothing, json[QString("clothing")]);
    m_clothing_isSet = !json[QString("clothing")].isNull() && m_clothing_isValid;

    m_clothing_variation_isValid = ::OpenAPI::fromJsonValue(m_clothing_variation, json[QString("clothing_variation")]);
    m_clothing_variation_isSet = !json[QString("clothing_variation")].isNull() && m_clothing_variation_isValid;

    m_fav_colors_isValid = ::OpenAPI::fromJsonValue(m_fav_colors, json[QString("fav_colors")]);
    m_fav_colors_isSet = !json[QString("fav_colors")].isNull() && m_fav_colors_isValid;

    m_fav_styles_isValid = ::OpenAPI::fromJsonValue(m_fav_styles, json[QString("fav_styles")]);
    m_fav_styles_isSet = !json[QString("fav_styles")].isNull() && m_fav_styles_isValid;

    m_hobby_isValid = ::OpenAPI::fromJsonValue(m_hobby, json[QString("hobby")]);
    m_hobby_isSet = !json[QString("hobby")].isNull() && m_hobby_isValid;

    m_house_exterior_url_isValid = ::OpenAPI::fromJsonValue(m_house_exterior_url, json[QString("house_exterior_url")]);
    m_house_exterior_url_isSet = !json[QString("house_exterior_url")].isNull() && m_house_exterior_url_isValid;

    m_house_flooring_isValid = ::OpenAPI::fromJsonValue(m_house_flooring, json[QString("house_flooring")]);
    m_house_flooring_isSet = !json[QString("house_flooring")].isNull() && m_house_flooring_isValid;

    m_house_interior_url_isValid = ::OpenAPI::fromJsonValue(m_house_interior_url, json[QString("house_interior_url")]);
    m_house_interior_url_isSet = !json[QString("house_interior_url")].isNull() && m_house_interior_url_isValid;

    m_house_music_isValid = ::OpenAPI::fromJsonValue(m_house_music, json[QString("house_music")]);
    m_house_music_isSet = !json[QString("house_music")].isNull() && m_house_music_isValid;

    m_house_music_note_isValid = ::OpenAPI::fromJsonValue(m_house_music_note, json[QString("house_music_note")]);
    m_house_music_note_isSet = !json[QString("house_music_note")].isNull() && m_house_music_note_isValid;

    m_house_wallpaper_isValid = ::OpenAPI::fromJsonValue(m_house_wallpaper, json[QString("house_wallpaper")]);
    m_house_wallpaper_isSet = !json[QString("house_wallpaper")].isNull() && m_house_wallpaper_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("icon_url")]);
    m_icon_url_isSet = !json[QString("icon_url")].isNull() && m_icon_url_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photo_url")]);
    m_photo_url_isSet = !json[QString("photo_url")].isNull() && m_photo_url_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_sub_personality_isValid = ::OpenAPI::fromJsonValue(m_sub_personality, json[QString("sub-personality")]);
    m_sub_personality_isSet = !json[QString("sub-personality")].isNull() && m_sub_personality_isValid;
}

QString OAIVillager_nh_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVillager_nh_details::asJsonObject() const {
    QJsonObject obj;
    if (m_catchphrase_isSet) {
        obj.insert(QString("catchphrase"), ::OpenAPI::toJsonValue(m_catchphrase));
    }
    if (m_clothing_isSet) {
        obj.insert(QString("clothing"), ::OpenAPI::toJsonValue(m_clothing));
    }
    if (m_clothing_variation_isSet) {
        obj.insert(QString("clothing_variation"), ::OpenAPI::toJsonValue(m_clothing_variation));
    }
    if (m_fav_colors.size() > 0) {
        obj.insert(QString("fav_colors"), ::OpenAPI::toJsonValue(m_fav_colors));
    }
    if (m_fav_styles.size() > 0) {
        obj.insert(QString("fav_styles"), ::OpenAPI::toJsonValue(m_fav_styles));
    }
    if (m_hobby_isSet) {
        obj.insert(QString("hobby"), ::OpenAPI::toJsonValue(m_hobby));
    }
    if (m_house_exterior_url_isSet) {
        obj.insert(QString("house_exterior_url"), ::OpenAPI::toJsonValue(m_house_exterior_url));
    }
    if (m_house_flooring_isSet) {
        obj.insert(QString("house_flooring"), ::OpenAPI::toJsonValue(m_house_flooring));
    }
    if (m_house_interior_url_isSet) {
        obj.insert(QString("house_interior_url"), ::OpenAPI::toJsonValue(m_house_interior_url));
    }
    if (m_house_music_isSet) {
        obj.insert(QString("house_music"), ::OpenAPI::toJsonValue(m_house_music));
    }
    if (m_house_music_note_isSet) {
        obj.insert(QString("house_music_note"), ::OpenAPI::toJsonValue(m_house_music_note));
    }
    if (m_house_wallpaper_isSet) {
        obj.insert(QString("house_wallpaper"), ::OpenAPI::toJsonValue(m_house_wallpaper));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("icon_url"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photo_url"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_sub_personality_isSet) {
        obj.insert(QString("sub-personality"), ::OpenAPI::toJsonValue(m_sub_personality));
    }
    return obj;
}

QString OAIVillager_nh_details::getCatchphrase() const {
    return m_catchphrase;
}
void OAIVillager_nh_details::setCatchphrase(const QString &catchphrase) {
    m_catchphrase = catchphrase;
    m_catchphrase_isSet = true;
}

bool OAIVillager_nh_details::is_catchphrase_Set() const{
    return m_catchphrase_isSet;
}

bool OAIVillager_nh_details::is_catchphrase_Valid() const{
    return m_catchphrase_isValid;
}

QString OAIVillager_nh_details::getClothing() const {
    return m_clothing;
}
void OAIVillager_nh_details::setClothing(const QString &clothing) {
    m_clothing = clothing;
    m_clothing_isSet = true;
}

bool OAIVillager_nh_details::is_clothing_Set() const{
    return m_clothing_isSet;
}

bool OAIVillager_nh_details::is_clothing_Valid() const{
    return m_clothing_isValid;
}

QString OAIVillager_nh_details::getClothingVariation() const {
    return m_clothing_variation;
}
void OAIVillager_nh_details::setClothingVariation(const QString &clothing_variation) {
    m_clothing_variation = clothing_variation;
    m_clothing_variation_isSet = true;
}

bool OAIVillager_nh_details::is_clothing_variation_Set() const{
    return m_clothing_variation_isSet;
}

bool OAIVillager_nh_details::is_clothing_variation_Valid() const{
    return m_clothing_variation_isValid;
}

QList<QString> OAIVillager_nh_details::getFavColors() const {
    return m_fav_colors;
}
void OAIVillager_nh_details::setFavColors(const QList<QString> &fav_colors) {
    m_fav_colors = fav_colors;
    m_fav_colors_isSet = true;
}

bool OAIVillager_nh_details::is_fav_colors_Set() const{
    return m_fav_colors_isSet;
}

bool OAIVillager_nh_details::is_fav_colors_Valid() const{
    return m_fav_colors_isValid;
}

QList<QString> OAIVillager_nh_details::getFavStyles() const {
    return m_fav_styles;
}
void OAIVillager_nh_details::setFavStyles(const QList<QString> &fav_styles) {
    m_fav_styles = fav_styles;
    m_fav_styles_isSet = true;
}

bool OAIVillager_nh_details::is_fav_styles_Set() const{
    return m_fav_styles_isSet;
}

bool OAIVillager_nh_details::is_fav_styles_Valid() const{
    return m_fav_styles_isValid;
}

QString OAIVillager_nh_details::getHobby() const {
    return m_hobby;
}
void OAIVillager_nh_details::setHobby(const QString &hobby) {
    m_hobby = hobby;
    m_hobby_isSet = true;
}

bool OAIVillager_nh_details::is_hobby_Set() const{
    return m_hobby_isSet;
}

bool OAIVillager_nh_details::is_hobby_Valid() const{
    return m_hobby_isValid;
}

QString OAIVillager_nh_details::getHouseExteriorUrl() const {
    return m_house_exterior_url;
}
void OAIVillager_nh_details::setHouseExteriorUrl(const QString &house_exterior_url) {
    m_house_exterior_url = house_exterior_url;
    m_house_exterior_url_isSet = true;
}

bool OAIVillager_nh_details::is_house_exterior_url_Set() const{
    return m_house_exterior_url_isSet;
}

bool OAIVillager_nh_details::is_house_exterior_url_Valid() const{
    return m_house_exterior_url_isValid;
}

QString OAIVillager_nh_details::getHouseFlooring() const {
    return m_house_flooring;
}
void OAIVillager_nh_details::setHouseFlooring(const QString &house_flooring) {
    m_house_flooring = house_flooring;
    m_house_flooring_isSet = true;
}

bool OAIVillager_nh_details::is_house_flooring_Set() const{
    return m_house_flooring_isSet;
}

bool OAIVillager_nh_details::is_house_flooring_Valid() const{
    return m_house_flooring_isValid;
}

QString OAIVillager_nh_details::getHouseInteriorUrl() const {
    return m_house_interior_url;
}
void OAIVillager_nh_details::setHouseInteriorUrl(const QString &house_interior_url) {
    m_house_interior_url = house_interior_url;
    m_house_interior_url_isSet = true;
}

bool OAIVillager_nh_details::is_house_interior_url_Set() const{
    return m_house_interior_url_isSet;
}

bool OAIVillager_nh_details::is_house_interior_url_Valid() const{
    return m_house_interior_url_isValid;
}

QString OAIVillager_nh_details::getHouseMusic() const {
    return m_house_music;
}
void OAIVillager_nh_details::setHouseMusic(const QString &house_music) {
    m_house_music = house_music;
    m_house_music_isSet = true;
}

bool OAIVillager_nh_details::is_house_music_Set() const{
    return m_house_music_isSet;
}

bool OAIVillager_nh_details::is_house_music_Valid() const{
    return m_house_music_isValid;
}

QString OAIVillager_nh_details::getHouseMusicNote() const {
    return m_house_music_note;
}
void OAIVillager_nh_details::setHouseMusicNote(const QString &house_music_note) {
    m_house_music_note = house_music_note;
    m_house_music_note_isSet = true;
}

bool OAIVillager_nh_details::is_house_music_note_Set() const{
    return m_house_music_note_isSet;
}

bool OAIVillager_nh_details::is_house_music_note_Valid() const{
    return m_house_music_note_isValid;
}

QString OAIVillager_nh_details::getHouseWallpaper() const {
    return m_house_wallpaper;
}
void OAIVillager_nh_details::setHouseWallpaper(const QString &house_wallpaper) {
    m_house_wallpaper = house_wallpaper;
    m_house_wallpaper_isSet = true;
}

bool OAIVillager_nh_details::is_house_wallpaper_Set() const{
    return m_house_wallpaper_isSet;
}

bool OAIVillager_nh_details::is_house_wallpaper_Valid() const{
    return m_house_wallpaper_isValid;
}

QString OAIVillager_nh_details::getIconUrl() const {
    return m_icon_url;
}
void OAIVillager_nh_details::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIVillager_nh_details::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIVillager_nh_details::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIVillager_nh_details::getImageUrl() const {
    return m_image_url;
}
void OAIVillager_nh_details::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIVillager_nh_details::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIVillager_nh_details::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIVillager_nh_details::getPhotoUrl() const {
    return m_photo_url;
}
void OAIVillager_nh_details::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIVillager_nh_details::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIVillager_nh_details::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIVillager_nh_details::getQuote() const {
    return m_quote;
}
void OAIVillager_nh_details::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIVillager_nh_details::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIVillager_nh_details::is_quote_Valid() const{
    return m_quote_isValid;
}

QString OAIVillager_nh_details::getSubPersonality() const {
    return m_sub_personality;
}
void OAIVillager_nh_details::setSubPersonality(const QString &sub_personality) {
    m_sub_personality = sub_personality;
    m_sub_personality_isSet = true;
}

bool OAIVillager_nh_details::is_sub_personality_Set() const{
    return m_sub_personality_isSet;
}

bool OAIVillager_nh_details::is_sub_personality_Valid() const{
    return m_sub_personality_isValid;
}

bool OAIVillager_nh_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catchphrase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clothing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clothing_variation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fav_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fav_styles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hobby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_exterior_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_flooring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_interior_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_music_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_music_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_wallpaper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_personality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVillager_nh_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
