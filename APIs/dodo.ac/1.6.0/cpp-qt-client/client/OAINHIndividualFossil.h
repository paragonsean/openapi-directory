/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHIndividualFossil.h
 *
 * 
 */

#ifndef OAINHIndividualFossil_H
#define OAINHIndividualFossil_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINHIndividualFossil : public OAIObject {
public:
    OAINHIndividualFossil();
    OAINHIndividualFossil(QString json);
    ~OAINHIndividualFossil() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getColors() const;
    void setColors(const QList<QString> &colors);
    bool is_colors_Set() const;
    bool is_colors_Valid() const;

    QString getFossilGroup() const;
    void setFossilGroup(const QString &fossil_group);
    bool is_fossil_group_Set() const;
    bool is_fossil_group_Valid() const;

    qint32 getHhaBase() const;
    void setHhaBase(const qint32 &hha_base);
    bool is_hha_base_Set() const;
    bool is_hha_base_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    bool isInteractable() const;
    void setInteractable(const bool &interactable);
    bool is_interactable_Set() const;
    bool is_interactable_Valid() const;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getSell() const;
    void setSell(const qint32 &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_colors;
    bool m_colors_isSet;
    bool m_colors_isValid;

    QString m_fossil_group;
    bool m_fossil_group_isSet;
    bool m_fossil_group_isValid;

    qint32 m_hha_base;
    bool m_hha_base_isSet;
    bool m_hha_base_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    bool m_interactable;
    bool m_interactable_isSet;
    bool m_interactable_isValid;

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHIndividualFossil)

#endif // OAINHIndividualFossil_H
