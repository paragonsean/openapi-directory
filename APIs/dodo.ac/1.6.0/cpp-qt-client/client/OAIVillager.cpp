/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVillager.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVillager::OAIVillager(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVillager::OAIVillager() {
    this->initializeModel();
}

OAIVillager::~OAIVillager() {}

void OAIVillager::initializeModel() {

    m_alt_name_isSet = false;
    m_alt_name_isValid = false;

    m_appearances_isSet = false;
    m_appearances_isValid = false;

    m_birthday_day_isSet = false;
    m_birthday_day_isValid = false;

    m_birthday_month_isSet = false;
    m_birthday_month_isValid = false;

    m_clothing_isSet = false;
    m_clothing_isValid = false;

    m_debut_isSet = false;
    m_debut_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_islander_isSet = false;
    m_islander_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nh_details_isSet = false;
    m_nh_details_isValid = false;

    m_personality_isSet = false;
    m_personality_isValid = false;

    m_phrase_isSet = false;
    m_phrase_isValid = false;

    m_prev_phrases_isSet = false;
    m_prev_phrases_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_sign_isSet = false;
    m_sign_isValid = false;

    m_species_isSet = false;
    m_species_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_title_color_isSet = false;
    m_title_color_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVillager::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVillager::fromJsonObject(QJsonObject json) {

    m_alt_name_isValid = ::OpenAPI::fromJsonValue(m_alt_name, json[QString("alt_name")]);
    m_alt_name_isSet = !json[QString("alt_name")].isNull() && m_alt_name_isValid;

    m_appearances_isValid = ::OpenAPI::fromJsonValue(m_appearances, json[QString("appearances")]);
    m_appearances_isSet = !json[QString("appearances")].isNull() && m_appearances_isValid;

    m_birthday_day_isValid = ::OpenAPI::fromJsonValue(m_birthday_day, json[QString("birthday_day")]);
    m_birthday_day_isSet = !json[QString("birthday_day")].isNull() && m_birthday_day_isValid;

    m_birthday_month_isValid = ::OpenAPI::fromJsonValue(m_birthday_month, json[QString("birthday_month")]);
    m_birthday_month_isSet = !json[QString("birthday_month")].isNull() && m_birthday_month_isValid;

    m_clothing_isValid = ::OpenAPI::fromJsonValue(m_clothing, json[QString("clothing")]);
    m_clothing_isSet = !json[QString("clothing")].isNull() && m_clothing_isValid;

    m_debut_isValid = ::OpenAPI::fromJsonValue(m_debut, json[QString("debut")]);
    m_debut_isSet = !json[QString("debut")].isNull() && m_debut_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_islander_isValid = ::OpenAPI::fromJsonValue(m_islander, json[QString("islander")]);
    m_islander_isSet = !json[QString("islander")].isNull() && m_islander_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nh_details_isValid = ::OpenAPI::fromJsonValue(m_nh_details, json[QString("nh_details")]);
    m_nh_details_isSet = !json[QString("nh_details")].isNull() && m_nh_details_isValid;

    m_personality_isValid = ::OpenAPI::fromJsonValue(m_personality, json[QString("personality")]);
    m_personality_isSet = !json[QString("personality")].isNull() && m_personality_isValid;

    m_phrase_isValid = ::OpenAPI::fromJsonValue(m_phrase, json[QString("phrase")]);
    m_phrase_isSet = !json[QString("phrase")].isNull() && m_phrase_isValid;

    m_prev_phrases_isValid = ::OpenAPI::fromJsonValue(m_prev_phrases, json[QString("prev_phrases")]);
    m_prev_phrases_isSet = !json[QString("prev_phrases")].isNull() && m_prev_phrases_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_sign_isValid = ::OpenAPI::fromJsonValue(m_sign, json[QString("sign")]);
    m_sign_isSet = !json[QString("sign")].isNull() && m_sign_isValid;

    m_species_isValid = ::OpenAPI::fromJsonValue(m_species, json[QString("species")]);
    m_species_isSet = !json[QString("species")].isNull() && m_species_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("text_color")]);
    m_text_color_isSet = !json[QString("text_color")].isNull() && m_text_color_isValid;

    m_title_color_isValid = ::OpenAPI::fromJsonValue(m_title_color, json[QString("title_color")]);
    m_title_color_isSet = !json[QString("title_color")].isNull() && m_title_color_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVillager::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVillager::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_name_isSet) {
        obj.insert(QString("alt_name"), ::OpenAPI::toJsonValue(m_alt_name));
    }
    if (m_appearances.size() > 0) {
        obj.insert(QString("appearances"), ::OpenAPI::toJsonValue(m_appearances));
    }
    if (m_birthday_day_isSet) {
        obj.insert(QString("birthday_day"), ::OpenAPI::toJsonValue(m_birthday_day));
    }
    if (m_birthday_month_isSet) {
        obj.insert(QString("birthday_month"), ::OpenAPI::toJsonValue(m_birthday_month));
    }
    if (m_clothing_isSet) {
        obj.insert(QString("clothing"), ::OpenAPI::toJsonValue(m_clothing));
    }
    if (m_debut_isSet) {
        obj.insert(QString("debut"), ::OpenAPI::toJsonValue(m_debut));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_islander_isSet) {
        obj.insert(QString("islander"), ::OpenAPI::toJsonValue(m_islander));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nh_details.isSet()) {
        obj.insert(QString("nh_details"), ::OpenAPI::toJsonValue(m_nh_details));
    }
    if (m_personality_isSet) {
        obj.insert(QString("personality"), ::OpenAPI::toJsonValue(m_personality));
    }
    if (m_phrase_isSet) {
        obj.insert(QString("phrase"), ::OpenAPI::toJsonValue(m_phrase));
    }
    if (m_prev_phrases.size() > 0) {
        obj.insert(QString("prev_phrases"), ::OpenAPI::toJsonValue(m_prev_phrases));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_sign_isSet) {
        obj.insert(QString("sign"), ::OpenAPI::toJsonValue(m_sign));
    }
    if (m_species_isSet) {
        obj.insert(QString("species"), ::OpenAPI::toJsonValue(m_species));
    }
    if (m_text_color_isSet) {
        obj.insert(QString("text_color"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_title_color_isSet) {
        obj.insert(QString("title_color"), ::OpenAPI::toJsonValue(m_title_color));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVillager::getAltName() const {
    return m_alt_name;
}
void OAIVillager::setAltName(const QString &alt_name) {
    m_alt_name = alt_name;
    m_alt_name_isSet = true;
}

bool OAIVillager::is_alt_name_Set() const{
    return m_alt_name_isSet;
}

bool OAIVillager::is_alt_name_Valid() const{
    return m_alt_name_isValid;
}

QList<QString> OAIVillager::getAppearances() const {
    return m_appearances;
}
void OAIVillager::setAppearances(const QList<QString> &appearances) {
    m_appearances = appearances;
    m_appearances_isSet = true;
}

bool OAIVillager::is_appearances_Set() const{
    return m_appearances_isSet;
}

bool OAIVillager::is_appearances_Valid() const{
    return m_appearances_isValid;
}

QString OAIVillager::getBirthdayDay() const {
    return m_birthday_day;
}
void OAIVillager::setBirthdayDay(const QString &birthday_day) {
    m_birthday_day = birthday_day;
    m_birthday_day_isSet = true;
}

bool OAIVillager::is_birthday_day_Set() const{
    return m_birthday_day_isSet;
}

bool OAIVillager::is_birthday_day_Valid() const{
    return m_birthday_day_isValid;
}

QString OAIVillager::getBirthdayMonth() const {
    return m_birthday_month;
}
void OAIVillager::setBirthdayMonth(const QString &birthday_month) {
    m_birthday_month = birthday_month;
    m_birthday_month_isSet = true;
}

bool OAIVillager::is_birthday_month_Set() const{
    return m_birthday_month_isSet;
}

bool OAIVillager::is_birthday_month_Valid() const{
    return m_birthday_month_isValid;
}

QString OAIVillager::getClothing() const {
    return m_clothing;
}
void OAIVillager::setClothing(const QString &clothing) {
    m_clothing = clothing;
    m_clothing_isSet = true;
}

bool OAIVillager::is_clothing_Set() const{
    return m_clothing_isSet;
}

bool OAIVillager::is_clothing_Valid() const{
    return m_clothing_isValid;
}

QString OAIVillager::getDebut() const {
    return m_debut;
}
void OAIVillager::setDebut(const QString &debut) {
    m_debut = debut;
    m_debut_isSet = true;
}

bool OAIVillager::is_debut_Set() const{
    return m_debut_isSet;
}

bool OAIVillager::is_debut_Valid() const{
    return m_debut_isValid;
}

QString OAIVillager::getGender() const {
    return m_gender;
}
void OAIVillager::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIVillager::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIVillager::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIVillager::getId() const {
    return m_id;
}
void OAIVillager::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVillager::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVillager::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVillager::getImageUrl() const {
    return m_image_url;
}
void OAIVillager::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIVillager::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIVillager::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIVillager::isIslander() const {
    return m_islander;
}
void OAIVillager::setIslander(const bool &islander) {
    m_islander = islander;
    m_islander_isSet = true;
}

bool OAIVillager::is_islander_Set() const{
    return m_islander_isSet;
}

bool OAIVillager::is_islander_Valid() const{
    return m_islander_isValid;
}

QString OAIVillager::getName() const {
    return m_name;
}
void OAIVillager::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVillager::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVillager::is_name_Valid() const{
    return m_name_isValid;
}

OAIVillager_nh_details OAIVillager::getNhDetails() const {
    return m_nh_details;
}
void OAIVillager::setNhDetails(const OAIVillager_nh_details &nh_details) {
    m_nh_details = nh_details;
    m_nh_details_isSet = true;
}

bool OAIVillager::is_nh_details_Set() const{
    return m_nh_details_isSet;
}

bool OAIVillager::is_nh_details_Valid() const{
    return m_nh_details_isValid;
}

QString OAIVillager::getPersonality() const {
    return m_personality;
}
void OAIVillager::setPersonality(const QString &personality) {
    m_personality = personality;
    m_personality_isSet = true;
}

bool OAIVillager::is_personality_Set() const{
    return m_personality_isSet;
}

bool OAIVillager::is_personality_Valid() const{
    return m_personality_isValid;
}

QString OAIVillager::getPhrase() const {
    return m_phrase;
}
void OAIVillager::setPhrase(const QString &phrase) {
    m_phrase = phrase;
    m_phrase_isSet = true;
}

bool OAIVillager::is_phrase_Set() const{
    return m_phrase_isSet;
}

bool OAIVillager::is_phrase_Valid() const{
    return m_phrase_isValid;
}

QList<QString> OAIVillager::getPrevPhrases() const {
    return m_prev_phrases;
}
void OAIVillager::setPrevPhrases(const QList<QString> &prev_phrases) {
    m_prev_phrases = prev_phrases;
    m_prev_phrases_isSet = true;
}

bool OAIVillager::is_prev_phrases_Set() const{
    return m_prev_phrases_isSet;
}

bool OAIVillager::is_prev_phrases_Valid() const{
    return m_prev_phrases_isValid;
}

QString OAIVillager::getQuote() const {
    return m_quote;
}
void OAIVillager::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIVillager::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIVillager::is_quote_Valid() const{
    return m_quote_isValid;
}

QString OAIVillager::getSign() const {
    return m_sign;
}
void OAIVillager::setSign(const QString &sign) {
    m_sign = sign;
    m_sign_isSet = true;
}

bool OAIVillager::is_sign_Set() const{
    return m_sign_isSet;
}

bool OAIVillager::is_sign_Valid() const{
    return m_sign_isValid;
}

QString OAIVillager::getSpecies() const {
    return m_species;
}
void OAIVillager::setSpecies(const QString &species) {
    m_species = species;
    m_species_isSet = true;
}

bool OAIVillager::is_species_Set() const{
    return m_species_isSet;
}

bool OAIVillager::is_species_Valid() const{
    return m_species_isValid;
}

QString OAIVillager::getTextColor() const {
    return m_text_color;
}
void OAIVillager::setTextColor(const QString &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIVillager::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIVillager::is_text_color_Valid() const{
    return m_text_color_isValid;
}

QString OAIVillager::getTitleColor() const {
    return m_title_color;
}
void OAIVillager::setTitleColor(const QString &title_color) {
    m_title_color = title_color;
    m_title_color_isSet = true;
}

bool OAIVillager::is_title_color_Set() const{
    return m_title_color_isSet;
}

bool OAIVillager::is_title_color_Valid() const{
    return m_title_color_isValid;
}

QString OAIVillager::getUrl() const {
    return m_url;
}
void OAIVillager::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVillager::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVillager::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVillager::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appearances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clothing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debut_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_islander_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nh_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_phrases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVillager::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
