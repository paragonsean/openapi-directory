/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHTool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHTool::OAINHTool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHTool::OAINHTool() {
    this->initializeModel();
}

OAINHTool::~OAINHTool() {}

void OAINHTool::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_custom_body_part_isSet = false;
    m_custom_body_part_isValid = false;

    m_custom_kits_isSet = false;
    m_custom_kits_isValid = false;

    m_customizable_isSet = false;
    m_customizable_isValid = false;

    m_hha_base_isSet = false;
    m_hha_base_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_unlocked_isSet = false;
    m_unlocked_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_uses_isSet = false;
    m_uses_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;

    m_version_added_isSet = false;
    m_version_added_isValid = false;
}

void OAINHTool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHTool::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_custom_body_part_isValid = ::OpenAPI::fromJsonValue(m_custom_body_part, json[QString("custom_body_part")]);
    m_custom_body_part_isSet = !json[QString("custom_body_part")].isNull() && m_custom_body_part_isValid;

    m_custom_kits_isValid = ::OpenAPI::fromJsonValue(m_custom_kits, json[QString("custom_kits")]);
    m_custom_kits_isSet = !json[QString("custom_kits")].isNull() && m_custom_kits_isValid;

    m_customizable_isValid = ::OpenAPI::fromJsonValue(m_customizable, json[QString("customizable")]);
    m_customizable_isSet = !json[QString("customizable")].isNull() && m_customizable_isValid;

    m_hha_base_isValid = ::OpenAPI::fromJsonValue(m_hha_base, json[QString("hha_base")]);
    m_hha_base_isSet = !json[QString("hha_base")].isNull() && m_hha_base_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_unlocked_isValid = ::OpenAPI::fromJsonValue(m_unlocked, json[QString("unlocked")]);
    m_unlocked_isSet = !json[QString("unlocked")].isNull() && m_unlocked_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_uses_isValid = ::OpenAPI::fromJsonValue(m_uses, json[QString("uses")]);
    m_uses_isSet = !json[QString("uses")].isNull() && m_uses_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;

    m_version_added_isValid = ::OpenAPI::fromJsonValue(m_version_added, json[QString("version_added")]);
    m_version_added_isSet = !json[QString("version_added")].isNull() && m_version_added_isValid;
}

QString OAINHTool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHTool::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_custom_body_part_isSet) {
        obj.insert(QString("custom_body_part"), ::OpenAPI::toJsonValue(m_custom_body_part));
    }
    if (m_custom_kits_isSet) {
        obj.insert(QString("custom_kits"), ::OpenAPI::toJsonValue(m_custom_kits));
    }
    if (m_customizable_isSet) {
        obj.insert(QString("customizable"), ::OpenAPI::toJsonValue(m_customizable));
    }
    if (m_hha_base_isSet) {
        obj.insert(QString("hha_base"), ::OpenAPI::toJsonValue(m_hha_base));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_unlocked_isSet) {
        obj.insert(QString("unlocked"), ::OpenAPI::toJsonValue(m_unlocked));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_uses_isSet) {
        obj.insert(QString("uses"), ::OpenAPI::toJsonValue(m_uses));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    if (m_version_added_isSet) {
        obj.insert(QString("version_added"), ::OpenAPI::toJsonValue(m_version_added));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHTool::getAvailability() const {
    return m_availability;
}
void OAINHTool::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHTool::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHTool::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHTool::getBuy() const {
    return m_buy;
}
void OAINHTool::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHTool::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHTool::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAINHTool::getCustomBodyPart() const {
    return m_custom_body_part;
}
void OAINHTool::setCustomBodyPart(const QString &custom_body_part) {
    m_custom_body_part = custom_body_part;
    m_custom_body_part_isSet = true;
}

bool OAINHTool::is_custom_body_part_Set() const{
    return m_custom_body_part_isSet;
}

bool OAINHTool::is_custom_body_part_Valid() const{
    return m_custom_body_part_isValid;
}

qint32 OAINHTool::getCustomKits() const {
    return m_custom_kits;
}
void OAINHTool::setCustomKits(const qint32 &custom_kits) {
    m_custom_kits = custom_kits;
    m_custom_kits_isSet = true;
}

bool OAINHTool::is_custom_kits_Set() const{
    return m_custom_kits_isSet;
}

bool OAINHTool::is_custom_kits_Valid() const{
    return m_custom_kits_isValid;
}

bool OAINHTool::isCustomizable() const {
    return m_customizable;
}
void OAINHTool::setCustomizable(const bool &customizable) {
    m_customizable = customizable;
    m_customizable_isSet = true;
}

bool OAINHTool::is_customizable_Set() const{
    return m_customizable_isSet;
}

bool OAINHTool::is_customizable_Valid() const{
    return m_customizable_isValid;
}

qint32 OAINHTool::getHhaBase() const {
    return m_hha_base;
}
void OAINHTool::setHhaBase(const qint32 &hha_base) {
    m_hha_base = hha_base;
    m_hha_base_isSet = true;
}

bool OAINHTool::is_hha_base_Set() const{
    return m_hha_base_isSet;
}

bool OAINHTool::is_hha_base_Valid() const{
    return m_hha_base_isValid;
}

QString OAINHTool::getName() const {
    return m_name;
}
void OAINHTool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHTool::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHTool::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINHTool::getNotes() const {
    return m_notes;
}
void OAINHTool::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINHTool::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINHTool::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAINHTool::getSell() const {
    return m_sell;
}
void OAINHTool::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHTool::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHTool::is_sell_Valid() const{
    return m_sell_isValid;
}

bool OAINHTool::isUnlocked() const {
    return m_unlocked;
}
void OAINHTool::setUnlocked(const bool &unlocked) {
    m_unlocked = unlocked;
    m_unlocked_isSet = true;
}

bool OAINHTool::is_unlocked_Set() const{
    return m_unlocked_isSet;
}

bool OAINHTool::is_unlocked_Valid() const{
    return m_unlocked_isValid;
}

QString OAINHTool::getUrl() const {
    return m_url;
}
void OAINHTool::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHTool::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHTool::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAINHTool::getUses() const {
    return m_uses;
}
void OAINHTool::setUses(const qint32 &uses) {
    m_uses = uses;
    m_uses_isSet = true;
}

bool OAINHTool::is_uses_Set() const{
    return m_uses_isSet;
}

bool OAINHTool::is_uses_Valid() const{
    return m_uses_isValid;
}

QList<OAINHTool_variations_inner> OAINHTool::getVariations() const {
    return m_variations;
}
void OAINHTool::setVariations(const QList<OAINHTool_variations_inner> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAINHTool::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAINHTool::is_variations_Valid() const{
    return m_variations_isValid;
}

QString OAINHTool::getVersionAdded() const {
    return m_version_added;
}
void OAINHTool::setVersionAdded(const QString &version_added) {
    m_version_added = version_added;
    m_version_added_isSet = true;
}

bool OAINHTool::is_version_added_Set() const{
    return m_version_added_isSet;
}

bool OAINHTool::is_version_added_Valid() const{
    return m_version_added_isValid;
}

bool OAINHTool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_kits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_added_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHTool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
