/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHFurniture_variations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHFurniture_variations_inner::OAINHFurniture_variations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHFurniture_variations_inner::OAINHFurniture_variations_inner() {
    this->initializeModel();
}

OAINHFurniture_variations_inner::~OAINHFurniture_variations_inner() {}

void OAINHFurniture_variations_inner::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_variation_isSet = false;
    m_variation_isValid = false;
}

void OAINHFurniture_variations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHFurniture_variations_inner::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_variation_isValid = ::OpenAPI::fromJsonValue(m_variation, json[QString("variation")]);
    m_variation_isSet = !json[QString("variation")].isNull() && m_variation_isValid;
}

QString OAINHFurniture_variations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHFurniture_variations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_variation_isSet) {
        obj.insert(QString("variation"), ::OpenAPI::toJsonValue(m_variation));
    }
    return obj;
}

QList<QString> OAINHFurniture_variations_inner::getColors() const {
    return m_colors;
}
void OAINHFurniture_variations_inner::setColors(const QList<QString> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAINHFurniture_variations_inner::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAINHFurniture_variations_inner::is_colors_Valid() const{
    return m_colors_isValid;
}

QString OAINHFurniture_variations_inner::getImageUrl() const {
    return m_image_url;
}
void OAINHFurniture_variations_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAINHFurniture_variations_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAINHFurniture_variations_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAINHFurniture_variations_inner::getPattern() const {
    return m_pattern;
}
void OAINHFurniture_variations_inner::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAINHFurniture_variations_inner::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAINHFurniture_variations_inner::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QString OAINHFurniture_variations_inner::getVariation() const {
    return m_variation;
}
void OAINHFurniture_variations_inner::setVariation(const QString &variation) {
    m_variation = variation;
    m_variation_isSet = true;
}

bool OAINHFurniture_variations_inner::is_variation_Set() const{
    return m_variation_isSet;
}

bool OAINHFurniture_variations_inner::is_variation_Valid() const{
    return m_variation_isValid;
}

bool OAINHFurniture_variations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHFurniture_variations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
