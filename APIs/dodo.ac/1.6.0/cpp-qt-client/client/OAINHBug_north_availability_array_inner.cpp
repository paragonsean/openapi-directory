/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHBug_north_availability_array_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHBug_north_availability_array_inner::OAINHBug_north_availability_array_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHBug_north_availability_array_inner::OAINHBug_north_availability_array_inner() {
    this->initializeModel();
}

OAINHBug_north_availability_array_inner::~OAINHBug_north_availability_array_inner() {}

void OAINHBug_north_availability_array_inner::initializeModel() {

    m_months_isSet = false;
    m_months_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAINHBug_north_availability_array_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHBug_north_availability_array_inner::fromJsonObject(QJsonObject json) {

    m_months_isValid = ::OpenAPI::fromJsonValue(m_months, json[QString("months")]);
    m_months_isSet = !json[QString("months")].isNull() && m_months_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAINHBug_north_availability_array_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHBug_north_availability_array_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_months_isSet) {
        obj.insert(QString("months"), ::OpenAPI::toJsonValue(m_months));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAINHBug_north_availability_array_inner::getMonths() const {
    return m_months;
}
void OAINHBug_north_availability_array_inner::setMonths(const QString &months) {
    m_months = months;
    m_months_isSet = true;
}

bool OAINHBug_north_availability_array_inner::is_months_Set() const{
    return m_months_isSet;
}

bool OAINHBug_north_availability_array_inner::is_months_Valid() const{
    return m_months_isValid;
}

QString OAINHBug_north_availability_array_inner::getTime() const {
    return m_time;
}
void OAINHBug_north_availability_array_inner::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAINHBug_north_availability_array_inner::is_time_Set() const{
    return m_time_isSet;
}

bool OAINHBug_north_availability_array_inner::is_time_Valid() const{
    return m_time_isValid;
}

bool OAINHBug_north_availability_array_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHBug_north_availability_array_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
