/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHFossilGroupWithIndividualFossils_fossils_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHFossilGroupWithIndividualFossils_fossils_inner::OAINHFossilGroupWithIndividualFossils_fossils_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHFossilGroupWithIndividualFossils_fossils_inner::OAINHFossilGroupWithIndividualFossils_fossils_inner() {
    this->initializeModel();
}

OAINHFossilGroupWithIndividualFossils_fossils_inner::~OAINHFossilGroupWithIndividualFossils_fossils_inner() {}

void OAINHFossilGroupWithIndividualFossils_fossils_inner::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_fossil_group_isSet = false;
    m_fossil_group_isValid = false;

    m_hha_base_isSet = false;
    m_hha_base_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_interactable_isSet = false;
    m_interactable_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAINHFossilGroupWithIndividualFossils_fossils_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHFossilGroupWithIndividualFossils_fossils_inner::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_fossil_group_isValid = ::OpenAPI::fromJsonValue(m_fossil_group, json[QString("fossil_group")]);
    m_fossil_group_isSet = !json[QString("fossil_group")].isNull() && m_fossil_group_isValid;

    m_hha_base_isValid = ::OpenAPI::fromJsonValue(m_hha_base, json[QString("hha_base")]);
    m_hha_base_isSet = !json[QString("hha_base")].isNull() && m_hha_base_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_interactable_isValid = ::OpenAPI::fromJsonValue(m_interactable, json[QString("interactable")]);
    m_interactable_isSet = !json[QString("interactable")].isNull() && m_interactable_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAINHFossilGroupWithIndividualFossils_fossils_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHFossilGroupWithIndividualFossils_fossils_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_fossil_group_isSet) {
        obj.insert(QString("fossil_group"), ::OpenAPI::toJsonValue(m_fossil_group));
    }
    if (m_hha_base_isSet) {
        obj.insert(QString("hha_base"), ::OpenAPI::toJsonValue(m_hha_base));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_interactable_isSet) {
        obj.insert(QString("interactable"), ::OpenAPI::toJsonValue(m_interactable));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<QString> OAINHFossilGroupWithIndividualFossils_fossils_inner::getColors() const {
    return m_colors;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setColors(const QList<QString> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_colors_Valid() const{
    return m_colors_isValid;
}

QString OAINHFossilGroupWithIndividualFossils_fossils_inner::getFossilGroup() const {
    return m_fossil_group;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setFossilGroup(const QString &fossil_group) {
    m_fossil_group = fossil_group;
    m_fossil_group_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_fossil_group_Set() const{
    return m_fossil_group_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_fossil_group_Valid() const{
    return m_fossil_group_isValid;
}

qint32 OAINHFossilGroupWithIndividualFossils_fossils_inner::getHhaBase() const {
    return m_hha_base;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setHhaBase(const qint32 &hha_base) {
    m_hha_base = hha_base;
    m_hha_base_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_hha_base_Set() const{
    return m_hha_base_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_hha_base_Valid() const{
    return m_hha_base_isValid;
}

QString OAINHFossilGroupWithIndividualFossils_fossils_inner::getImageUrl() const {
    return m_image_url;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::isInteractable() const {
    return m_interactable;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setInteractable(const bool &interactable) {
    m_interactable = interactable;
    m_interactable_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_interactable_Set() const{
    return m_interactable_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_interactable_Valid() const{
    return m_interactable_isValid;
}

qint32 OAINHFossilGroupWithIndividualFossils_fossils_inner::getLength() const {
    return m_length;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_length_Set() const{
    return m_length_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_length_Valid() const{
    return m_length_isValid;
}

QString OAINHFossilGroupWithIndividualFossils_fossils_inner::getName() const {
    return m_name;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAINHFossilGroupWithIndividualFossils_fossils_inner::getSell() const {
    return m_sell;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_sell_Valid() const{
    return m_sell_isValid;
}

QString OAINHFossilGroupWithIndividualFossils_fossils_inner::getUrl() const {
    return m_url;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAINHFossilGroupWithIndividualFossils_fossils_inner::getWidth() const {
    return m_width;
}
void OAINHFossilGroupWithIndividualFossils_fossils_inner::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_width_Set() const{
    return m_width_isSet;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::is_width_Valid() const{
    return m_width_isValid;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fossil_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHFossilGroupWithIndividualFossils_fossils_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
