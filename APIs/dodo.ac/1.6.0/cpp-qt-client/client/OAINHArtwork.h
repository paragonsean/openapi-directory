/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHArtwork.h
 *
 * 
 */

#ifndef OAINHArtwork_H
#define OAINHArtwork_H

#include <QJsonObject>

#include "OAINHArtwork_fake_info.h"
#include "OAINHArtwork_real_info.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINHArtwork_fake_info;
class OAINHArtwork_real_info;

class OAINHArtwork : public OAIObject {
public:
    OAINHArtwork();
    OAINHArtwork(QString json);
    ~OAINHArtwork() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArtName() const;
    void setArtName(const QString &art_name);
    bool is_art_name_Set() const;
    bool is_art_name_Valid() const;

    QString getArtStyle() const;
    void setArtStyle(const QString &art_style);
    bool is_art_style_Set() const;
    bool is_art_style_Valid() const;

    QString getArtType() const;
    void setArtType(const QString &art_type);
    bool is_art_type_Set() const;
    bool is_art_type_Valid() const;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    QString getAvailability() const;
    void setAvailability(const QString &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    qint32 getBuy() const;
    void setBuy(const qint32 &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    OAINHArtwork_fake_info getFakeInfo() const;
    void setFakeInfo(const OAINHArtwork_fake_info &fake_info);
    bool is_fake_info_Set() const;
    bool is_fake_info_Valid() const;

    bool isHasFake() const;
    void setHasFake(const bool &has_fake);
    bool is_has_fake_Set() const;
    bool is_has_fake_Valid() const;

    float getLength() const;
    void setLength(const float &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINHArtwork_real_info getRealInfo() const;
    void setRealInfo(const OAINHArtwork_real_info &real_info);
    bool is_real_info_Set() const;
    bool is_real_info_Valid() const;

    qint32 getSell() const;
    void setSell(const qint32 &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    float getWidth() const;
    void setWidth(const float &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    QString getYear() const;
    void setYear(const QString &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_art_name;
    bool m_art_name_isSet;
    bool m_art_name_isValid;

    QString m_art_style;
    bool m_art_style_isSet;
    bool m_art_style_isValid;

    QString m_art_type;
    bool m_art_type_isSet;
    bool m_art_type_isValid;

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    QString m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;

    qint32 m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    OAINHArtwork_fake_info m_fake_info;
    bool m_fake_info_isSet;
    bool m_fake_info_isValid;

    bool m_has_fake;
    bool m_has_fake_isSet;
    bool m_has_fake_isValid;

    float m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINHArtwork_real_info m_real_info;
    bool m_real_info_isSet;
    bool m_real_info_isValid;

    qint32 m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    float m_width;
    bool m_width_isSet;
    bool m_width_isValid;

    QString m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHArtwork)

#endif // OAINHArtwork_H
