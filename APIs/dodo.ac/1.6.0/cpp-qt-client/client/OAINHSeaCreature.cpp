/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHSeaCreature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHSeaCreature::OAINHSeaCreature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHSeaCreature::OAINHSeaCreature() {
    this->initializeModel();
}

OAINHSeaCreature::~OAINHSeaCreature() {}

void OAINHSeaCreature::initializeModel() {

    m_catchphrases_isSet = false;
    m_catchphrases_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_north_isSet = false;
    m_north_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_rarity_isSet = false;
    m_rarity_isValid = false;

    m_render_url_isSet = false;
    m_render_url_isValid = false;

    m_sell_nook_isSet = false;
    m_sell_nook_isValid = false;

    m_shadow_movement_isSet = false;
    m_shadow_movement_isValid = false;

    m_shadow_size_isSet = false;
    m_shadow_size_isValid = false;

    m_south_isSet = false;
    m_south_isValid = false;

    m_tank_length_isSet = false;
    m_tank_length_isValid = false;

    m_tank_width_isSet = false;
    m_tank_width_isValid = false;

    m_total_catch_isSet = false;
    m_total_catch_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINHSeaCreature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHSeaCreature::fromJsonObject(QJsonObject json) {

    m_catchphrases_isValid = ::OpenAPI::fromJsonValue(m_catchphrases, json[QString("catchphrases")]);
    m_catchphrases_isSet = !json[QString("catchphrases")].isNull() && m_catchphrases_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_north_isValid = ::OpenAPI::fromJsonValue(m_north, json[QString("north")]);
    m_north_isSet = !json[QString("north")].isNull() && m_north_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_rarity_isValid = ::OpenAPI::fromJsonValue(m_rarity, json[QString("rarity")]);
    m_rarity_isSet = !json[QString("rarity")].isNull() && m_rarity_isValid;

    m_render_url_isValid = ::OpenAPI::fromJsonValue(m_render_url, json[QString("render_url")]);
    m_render_url_isSet = !json[QString("render_url")].isNull() && m_render_url_isValid;

    m_sell_nook_isValid = ::OpenAPI::fromJsonValue(m_sell_nook, json[QString("sell_nook")]);
    m_sell_nook_isSet = !json[QString("sell_nook")].isNull() && m_sell_nook_isValid;

    m_shadow_movement_isValid = ::OpenAPI::fromJsonValue(m_shadow_movement, json[QString("shadow_movement")]);
    m_shadow_movement_isSet = !json[QString("shadow_movement")].isNull() && m_shadow_movement_isValid;

    m_shadow_size_isValid = ::OpenAPI::fromJsonValue(m_shadow_size, json[QString("shadow_size")]);
    m_shadow_size_isSet = !json[QString("shadow_size")].isNull() && m_shadow_size_isValid;

    m_south_isValid = ::OpenAPI::fromJsonValue(m_south, json[QString("south")]);
    m_south_isSet = !json[QString("south")].isNull() && m_south_isValid;

    m_tank_length_isValid = ::OpenAPI::fromJsonValue(m_tank_length, json[QString("tank_length")]);
    m_tank_length_isSet = !json[QString("tank_length")].isNull() && m_tank_length_isValid;

    m_tank_width_isValid = ::OpenAPI::fromJsonValue(m_tank_width, json[QString("tank_width")]);
    m_tank_width_isSet = !json[QString("tank_width")].isNull() && m_tank_width_isValid;

    m_total_catch_isValid = ::OpenAPI::fromJsonValue(m_total_catch, json[QString("total_catch")]);
    m_total_catch_isSet = !json[QString("total_catch")].isNull() && m_total_catch_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINHSeaCreature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHSeaCreature::asJsonObject() const {
    QJsonObject obj;
    if (m_catchphrases.size() > 0) {
        obj.insert(QString("catchphrases"), ::OpenAPI::toJsonValue(m_catchphrases));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_north.isSet()) {
        obj.insert(QString("north"), ::OpenAPI::toJsonValue(m_north));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_rarity_isSet) {
        obj.insert(QString("rarity"), ::OpenAPI::toJsonValue(m_rarity));
    }
    if (m_render_url_isSet) {
        obj.insert(QString("render_url"), ::OpenAPI::toJsonValue(m_render_url));
    }
    if (m_sell_nook_isSet) {
        obj.insert(QString("sell_nook"), ::OpenAPI::toJsonValue(m_sell_nook));
    }
    if (m_shadow_movement_isSet) {
        obj.insert(QString("shadow_movement"), ::OpenAPI::toJsonValue(m_shadow_movement));
    }
    if (m_shadow_size_isSet) {
        obj.insert(QString("shadow_size"), ::OpenAPI::toJsonValue(m_shadow_size));
    }
    if (m_south.isSet()) {
        obj.insert(QString("south"), ::OpenAPI::toJsonValue(m_south));
    }
    if (m_tank_length_isSet) {
        obj.insert(QString("tank_length"), ::OpenAPI::toJsonValue(m_tank_length));
    }
    if (m_tank_width_isSet) {
        obj.insert(QString("tank_width"), ::OpenAPI::toJsonValue(m_tank_width));
    }
    if (m_total_catch_isSet) {
        obj.insert(QString("total_catch"), ::OpenAPI::toJsonValue(m_total_catch));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAINHSeaCreature::getCatchphrases() const {
    return m_catchphrases;
}
void OAINHSeaCreature::setCatchphrases(const QList<QString> &catchphrases) {
    m_catchphrases = catchphrases;
    m_catchphrases_isSet = true;
}

bool OAINHSeaCreature::is_catchphrases_Set() const{
    return m_catchphrases_isSet;
}

bool OAINHSeaCreature::is_catchphrases_Valid() const{
    return m_catchphrases_isValid;
}

QString OAINHSeaCreature::getImageUrl() const {
    return m_image_url;
}
void OAINHSeaCreature::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAINHSeaCreature::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAINHSeaCreature::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAINHSeaCreature::getName() const {
    return m_name;
}
void OAINHSeaCreature::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHSeaCreature::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHSeaCreature::is_name_Valid() const{
    return m_name_isValid;
}

OAINHSeaCreature_north OAINHSeaCreature::getNorth() const {
    return m_north;
}
void OAINHSeaCreature::setNorth(const OAINHSeaCreature_north &north) {
    m_north = north;
    m_north_isSet = true;
}

bool OAINHSeaCreature::is_north_Set() const{
    return m_north_isSet;
}

bool OAINHSeaCreature::is_north_Valid() const{
    return m_north_isValid;
}

qint32 OAINHSeaCreature::getNumber() const {
    return m_number;
}
void OAINHSeaCreature::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAINHSeaCreature::is_number_Set() const{
    return m_number_isSet;
}

bool OAINHSeaCreature::is_number_Valid() const{
    return m_number_isValid;
}

QString OAINHSeaCreature::getRarity() const {
    return m_rarity;
}
void OAINHSeaCreature::setRarity(const QString &rarity) {
    m_rarity = rarity;
    m_rarity_isSet = true;
}

bool OAINHSeaCreature::is_rarity_Set() const{
    return m_rarity_isSet;
}

bool OAINHSeaCreature::is_rarity_Valid() const{
    return m_rarity_isValid;
}

QString OAINHSeaCreature::getRenderUrl() const {
    return m_render_url;
}
void OAINHSeaCreature::setRenderUrl(const QString &render_url) {
    m_render_url = render_url;
    m_render_url_isSet = true;
}

bool OAINHSeaCreature::is_render_url_Set() const{
    return m_render_url_isSet;
}

bool OAINHSeaCreature::is_render_url_Valid() const{
    return m_render_url_isValid;
}

qint32 OAINHSeaCreature::getSellNook() const {
    return m_sell_nook;
}
void OAINHSeaCreature::setSellNook(const qint32 &sell_nook) {
    m_sell_nook = sell_nook;
    m_sell_nook_isSet = true;
}

bool OAINHSeaCreature::is_sell_nook_Set() const{
    return m_sell_nook_isSet;
}

bool OAINHSeaCreature::is_sell_nook_Valid() const{
    return m_sell_nook_isValid;
}

QString OAINHSeaCreature::getShadowMovement() const {
    return m_shadow_movement;
}
void OAINHSeaCreature::setShadowMovement(const QString &shadow_movement) {
    m_shadow_movement = shadow_movement;
    m_shadow_movement_isSet = true;
}

bool OAINHSeaCreature::is_shadow_movement_Set() const{
    return m_shadow_movement_isSet;
}

bool OAINHSeaCreature::is_shadow_movement_Valid() const{
    return m_shadow_movement_isValid;
}

QString OAINHSeaCreature::getShadowSize() const {
    return m_shadow_size;
}
void OAINHSeaCreature::setShadowSize(const QString &shadow_size) {
    m_shadow_size = shadow_size;
    m_shadow_size_isSet = true;
}

bool OAINHSeaCreature::is_shadow_size_Set() const{
    return m_shadow_size_isSet;
}

bool OAINHSeaCreature::is_shadow_size_Valid() const{
    return m_shadow_size_isValid;
}

OAINHSeaCreature_south OAINHSeaCreature::getSouth() const {
    return m_south;
}
void OAINHSeaCreature::setSouth(const OAINHSeaCreature_south &south) {
    m_south = south;
    m_south_isSet = true;
}

bool OAINHSeaCreature::is_south_Set() const{
    return m_south_isSet;
}

bool OAINHSeaCreature::is_south_Valid() const{
    return m_south_isValid;
}

float OAINHSeaCreature::getTankLength() const {
    return m_tank_length;
}
void OAINHSeaCreature::setTankLength(const float &tank_length) {
    m_tank_length = tank_length;
    m_tank_length_isSet = true;
}

bool OAINHSeaCreature::is_tank_length_Set() const{
    return m_tank_length_isSet;
}

bool OAINHSeaCreature::is_tank_length_Valid() const{
    return m_tank_length_isValid;
}

float OAINHSeaCreature::getTankWidth() const {
    return m_tank_width;
}
void OAINHSeaCreature::setTankWidth(const float &tank_width) {
    m_tank_width = tank_width;
    m_tank_width_isSet = true;
}

bool OAINHSeaCreature::is_tank_width_Set() const{
    return m_tank_width_isSet;
}

bool OAINHSeaCreature::is_tank_width_Valid() const{
    return m_tank_width_isValid;
}

qint32 OAINHSeaCreature::getTotalCatch() const {
    return m_total_catch;
}
void OAINHSeaCreature::setTotalCatch(const qint32 &total_catch) {
    m_total_catch = total_catch;
    m_total_catch_isSet = true;
}

bool OAINHSeaCreature::is_total_catch_Set() const{
    return m_total_catch_isSet;
}

bool OAINHSeaCreature::is_total_catch_Valid() const{
    return m_total_catch_isValid;
}

QString OAINHSeaCreature::getUrl() const {
    return m_url;
}
void OAINHSeaCreature::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHSeaCreature::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHSeaCreature::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINHSeaCreature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catchphrases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_north.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_nook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_movement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_south.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tank_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tank_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_catch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHSeaCreature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
