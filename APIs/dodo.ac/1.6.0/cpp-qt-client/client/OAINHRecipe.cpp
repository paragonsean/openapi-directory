/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHRecipe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHRecipe::OAINHRecipe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHRecipe::OAINHRecipe() {
    this->initializeModel();
}

OAINHRecipe::~OAINHRecipe() {}

void OAINHRecipe::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recipes_to_unlock_isSet = false;
    m_recipes_to_unlock_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_serial_id_isSet = false;
    m_serial_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINHRecipe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHRecipe::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recipes_to_unlock_isValid = ::OpenAPI::fromJsonValue(m_recipes_to_unlock, json[QString("recipes_to_unlock")]);
    m_recipes_to_unlock_isSet = !json[QString("recipes_to_unlock")].isNull() && m_recipes_to_unlock_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_serial_id_isValid = ::OpenAPI::fromJsonValue(m_serial_id, json[QString("serial_id")]);
    m_serial_id_isSet = !json[QString("serial_id")].isNull() && m_serial_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINHRecipe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHRecipe::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recipes_to_unlock_isSet) {
        obj.insert(QString("recipes_to_unlock"), ::OpenAPI::toJsonValue(m_recipes_to_unlock));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_serial_id_isSet) {
        obj.insert(QString("serial_id"), ::OpenAPI::toJsonValue(m_serial_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHRecipe::getAvailability() const {
    return m_availability;
}
void OAINHRecipe::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHRecipe::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHRecipe::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHRecipe::getBuy() const {
    return m_buy;
}
void OAINHRecipe::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHRecipe::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHRecipe::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAINHRecipe::getImageUrl() const {
    return m_image_url;
}
void OAINHRecipe::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAINHRecipe::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAINHRecipe::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QList<OAINHRecipe_materials_inner> OAINHRecipe::getMaterials() const {
    return m_materials;
}
void OAINHRecipe::setMaterials(const QList<OAINHRecipe_materials_inner> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAINHRecipe::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAINHRecipe::is_materials_Valid() const{
    return m_materials_isValid;
}

QString OAINHRecipe::getName() const {
    return m_name;
}
void OAINHRecipe::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHRecipe::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHRecipe::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAINHRecipe::getRecipesToUnlock() const {
    return m_recipes_to_unlock;
}
void OAINHRecipe::setRecipesToUnlock(const qint32 &recipes_to_unlock) {
    m_recipes_to_unlock = recipes_to_unlock;
    m_recipes_to_unlock_isSet = true;
}

bool OAINHRecipe::is_recipes_to_unlock_Set() const{
    return m_recipes_to_unlock_isSet;
}

bool OAINHRecipe::is_recipes_to_unlock_Valid() const{
    return m_recipes_to_unlock_isValid;
}

qint32 OAINHRecipe::getSell() const {
    return m_sell;
}
void OAINHRecipe::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHRecipe::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHRecipe::is_sell_Valid() const{
    return m_sell_isValid;
}

qint32 OAINHRecipe::getSerialId() const {
    return m_serial_id;
}
void OAINHRecipe::setSerialId(const qint32 &serial_id) {
    m_serial_id = serial_id;
    m_serial_id_isSet = true;
}

bool OAINHRecipe::is_serial_id_Set() const{
    return m_serial_id_isSet;
}

bool OAINHRecipe::is_serial_id_Valid() const{
    return m_serial_id_isValid;
}

QString OAINHRecipe::getUrl() const {
    return m_url;
}
void OAINHRecipe::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHRecipe::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHRecipe::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINHRecipe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipes_to_unlock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHRecipe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
