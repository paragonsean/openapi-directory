/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHArtwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHArtwork::OAINHArtwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHArtwork::OAINHArtwork() {
    this->initializeModel();
}

OAINHArtwork::~OAINHArtwork() {}

void OAINHArtwork::initializeModel() {

    m_art_name_isSet = false;
    m_art_name_isValid = false;

    m_art_style_isSet = false;
    m_art_style_isValid = false;

    m_art_type_isSet = false;
    m_art_type_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_fake_info_isSet = false;
    m_fake_info_isValid = false;

    m_has_fake_isSet = false;
    m_has_fake_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_real_info_isSet = false;
    m_real_info_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAINHArtwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHArtwork::fromJsonObject(QJsonObject json) {

    m_art_name_isValid = ::OpenAPI::fromJsonValue(m_art_name, json[QString("art_name")]);
    m_art_name_isSet = !json[QString("art_name")].isNull() && m_art_name_isValid;

    m_art_style_isValid = ::OpenAPI::fromJsonValue(m_art_style, json[QString("art_style")]);
    m_art_style_isSet = !json[QString("art_style")].isNull() && m_art_style_isValid;

    m_art_type_isValid = ::OpenAPI::fromJsonValue(m_art_type, json[QString("art_type")]);
    m_art_type_isSet = !json[QString("art_type")].isNull() && m_art_type_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_fake_info_isValid = ::OpenAPI::fromJsonValue(m_fake_info, json[QString("fake_info")]);
    m_fake_info_isSet = !json[QString("fake_info")].isNull() && m_fake_info_isValid;

    m_has_fake_isValid = ::OpenAPI::fromJsonValue(m_has_fake, json[QString("has_fake")]);
    m_has_fake_isSet = !json[QString("has_fake")].isNull() && m_has_fake_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_real_info_isValid = ::OpenAPI::fromJsonValue(m_real_info, json[QString("real_info")]);
    m_real_info_isSet = !json[QString("real_info")].isNull() && m_real_info_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAINHArtwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHArtwork::asJsonObject() const {
    QJsonObject obj;
    if (m_art_name_isSet) {
        obj.insert(QString("art_name"), ::OpenAPI::toJsonValue(m_art_name));
    }
    if (m_art_style_isSet) {
        obj.insert(QString("art_style"), ::OpenAPI::toJsonValue(m_art_style));
    }
    if (m_art_type_isSet) {
        obj.insert(QString("art_type"), ::OpenAPI::toJsonValue(m_art_type));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy_isSet) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_fake_info.isSet()) {
        obj.insert(QString("fake_info"), ::OpenAPI::toJsonValue(m_fake_info));
    }
    if (m_has_fake_isSet) {
        obj.insert(QString("has_fake"), ::OpenAPI::toJsonValue(m_has_fake));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_real_info.isSet()) {
        obj.insert(QString("real_info"), ::OpenAPI::toJsonValue(m_real_info));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAINHArtwork::getArtName() const {
    return m_art_name;
}
void OAINHArtwork::setArtName(const QString &art_name) {
    m_art_name = art_name;
    m_art_name_isSet = true;
}

bool OAINHArtwork::is_art_name_Set() const{
    return m_art_name_isSet;
}

bool OAINHArtwork::is_art_name_Valid() const{
    return m_art_name_isValid;
}

QString OAINHArtwork::getArtStyle() const {
    return m_art_style;
}
void OAINHArtwork::setArtStyle(const QString &art_style) {
    m_art_style = art_style;
    m_art_style_isSet = true;
}

bool OAINHArtwork::is_art_style_Set() const{
    return m_art_style_isSet;
}

bool OAINHArtwork::is_art_style_Valid() const{
    return m_art_style_isValid;
}

QString OAINHArtwork::getArtType() const {
    return m_art_type;
}
void OAINHArtwork::setArtType(const QString &art_type) {
    m_art_type = art_type;
    m_art_type_isSet = true;
}

bool OAINHArtwork::is_art_type_Set() const{
    return m_art_type_isSet;
}

bool OAINHArtwork::is_art_type_Valid() const{
    return m_art_type_isValid;
}

QString OAINHArtwork::getAuthor() const {
    return m_author;
}
void OAINHArtwork::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAINHArtwork::is_author_Set() const{
    return m_author_isSet;
}

bool OAINHArtwork::is_author_Valid() const{
    return m_author_isValid;
}

QString OAINHArtwork::getAvailability() const {
    return m_availability;
}
void OAINHArtwork::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHArtwork::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHArtwork::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAINHArtwork::getBuy() const {
    return m_buy;
}
void OAINHArtwork::setBuy(const qint32 &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHArtwork::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHArtwork::is_buy_Valid() const{
    return m_buy_isValid;
}

OAINHArtwork_fake_info OAINHArtwork::getFakeInfo() const {
    return m_fake_info;
}
void OAINHArtwork::setFakeInfo(const OAINHArtwork_fake_info &fake_info) {
    m_fake_info = fake_info;
    m_fake_info_isSet = true;
}

bool OAINHArtwork::is_fake_info_Set() const{
    return m_fake_info_isSet;
}

bool OAINHArtwork::is_fake_info_Valid() const{
    return m_fake_info_isValid;
}

bool OAINHArtwork::isHasFake() const {
    return m_has_fake;
}
void OAINHArtwork::setHasFake(const bool &has_fake) {
    m_has_fake = has_fake;
    m_has_fake_isSet = true;
}

bool OAINHArtwork::is_has_fake_Set() const{
    return m_has_fake_isSet;
}

bool OAINHArtwork::is_has_fake_Valid() const{
    return m_has_fake_isValid;
}

float OAINHArtwork::getLength() const {
    return m_length;
}
void OAINHArtwork::setLength(const float &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAINHArtwork::is_length_Set() const{
    return m_length_isSet;
}

bool OAINHArtwork::is_length_Valid() const{
    return m_length_isValid;
}

QString OAINHArtwork::getName() const {
    return m_name;
}
void OAINHArtwork::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHArtwork::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHArtwork::is_name_Valid() const{
    return m_name_isValid;
}

OAINHArtwork_real_info OAINHArtwork::getRealInfo() const {
    return m_real_info;
}
void OAINHArtwork::setRealInfo(const OAINHArtwork_real_info &real_info) {
    m_real_info = real_info;
    m_real_info_isSet = true;
}

bool OAINHArtwork::is_real_info_Set() const{
    return m_real_info_isSet;
}

bool OAINHArtwork::is_real_info_Valid() const{
    return m_real_info_isValid;
}

qint32 OAINHArtwork::getSell() const {
    return m_sell;
}
void OAINHArtwork::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHArtwork::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHArtwork::is_sell_Valid() const{
    return m_sell_isValid;
}

QString OAINHArtwork::getUrl() const {
    return m_url;
}
void OAINHArtwork::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHArtwork::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHArtwork::is_url_Valid() const{
    return m_url_isValid;
}

float OAINHArtwork::getWidth() const {
    return m_width;
}
void OAINHArtwork::setWidth(const float &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAINHArtwork::is_width_Set() const{
    return m_width_isSet;
}

bool OAINHArtwork::is_width_Valid() const{
    return m_width_isValid;
}

QString OAINHArtwork::getYear() const {
    return m_year;
}
void OAINHArtwork::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAINHArtwork::is_year_Set() const{
    return m_year_isSet;
}

bool OAINHArtwork::is_year_Valid() const{
    return m_year_isValid;
}

bool OAINHArtwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_art_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_art_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_art_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fake_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHArtwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
