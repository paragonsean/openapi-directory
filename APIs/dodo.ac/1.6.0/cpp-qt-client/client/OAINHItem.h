/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHItem.h
 *
 * 
 */

#ifndef OAINHItem_H
#define OAINHItem_H

#include <QJsonObject>

#include "OAINHClothing_availability_inner.h"
#include "OAINHClothing_buy_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINHClothing_availability_inner;
class OAINHClothing_buy_inner;

class OAINHItem : public OAIObject {
public:
    OAINHItem();
    OAINHItem(QString json);
    ~OAINHItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAINHClothing_availability_inner> getAvailability() const;
    void setAvailability(const QList<OAINHClothing_availability_inner> &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    QList<OAINHClothing_buy_inner> getBuy() const;
    void setBuy(const QList<OAINHClothing_buy_inner> &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    bool isEdible() const;
    void setEdible(const bool &edible);
    bool is_edible_Set() const;
    bool is_edible_Valid() const;

    qint32 getHhaBase() const;
    void setHhaBase(const qint32 &hha_base);
    bool is_hha_base_Set() const;
    bool is_hha_base_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    bool isIsFence() const;
    void setIsFence(const bool &is_fence);
    bool is_is_fence_Set() const;
    bool is_is_fence_Valid() const;

    qint32 getMaterialNameSort() const;
    void setMaterialNameSort(const qint32 &material_name_sort);
    bool is_material_name_sort_Set() const;
    bool is_material_name_sort_Valid() const;

    QString getMaterialSeasonality() const;
    void setMaterialSeasonality(const QString &material_seasonality);
    bool is_material_seasonality_Set() const;
    bool is_material_seasonality_Valid() const;

    qint32 getMaterialSeasonalitySort() const;
    void setMaterialSeasonalitySort(const qint32 &material_seasonality_sort);
    bool is_material_seasonality_sort_Set() const;
    bool is_material_seasonality_sort_Valid() const;

    qint32 getMaterialSort() const;
    void setMaterialSort(const qint32 &material_sort);
    bool is_material_sort_Set() const;
    bool is_material_sort_Valid() const;

    QString getMaterialType() const;
    void setMaterialType(const QString &material_type);
    bool is_material_type_Set() const;
    bool is_material_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getPlantType() const;
    void setPlantType(const QString &plant_type);
    bool is_plant_type_Set() const;
    bool is_plant_type_Valid() const;

    qint32 getSell() const;
    void setSell(const qint32 &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    qint32 getStack() const;
    void setStack(const qint32 &stack);
    bool is_stack_Set() const;
    bool is_stack_Valid() const;

    bool isUnlocked() const;
    void setUnlocked(const bool &unlocked);
    bool is_unlocked_Set() const;
    bool is_unlocked_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getVersionAdded() const;
    void setVersionAdded(const QString &version_added);
    bool is_version_added_Set() const;
    bool is_version_added_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAINHClothing_availability_inner> m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;

    QList<OAINHClothing_buy_inner> m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    bool m_edible;
    bool m_edible_isSet;
    bool m_edible_isValid;

    qint32 m_hha_base;
    bool m_hha_base_isSet;
    bool m_hha_base_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    bool m_is_fence;
    bool m_is_fence_isSet;
    bool m_is_fence_isValid;

    qint32 m_material_name_sort;
    bool m_material_name_sort_isSet;
    bool m_material_name_sort_isValid;

    QString m_material_seasonality;
    bool m_material_seasonality_isSet;
    bool m_material_seasonality_isValid;

    qint32 m_material_seasonality_sort;
    bool m_material_seasonality_sort_isSet;
    bool m_material_seasonality_sort_isValid;

    qint32 m_material_sort;
    bool m_material_sort_isSet;
    bool m_material_sort_isValid;

    QString m_material_type;
    bool m_material_type_isSet;
    bool m_material_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_plant_type;
    bool m_plant_type_isSet;
    bool m_plant_type_isValid;

    qint32 m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    qint32 m_stack;
    bool m_stack_isSet;
    bool m_stack_isValid;

    bool m_unlocked;
    bool m_unlocked_isSet;
    bool m_unlocked_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_version_added;
    bool m_version_added_isSet;
    bool m_version_added_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHItem)

#endif // OAINHItem_H
