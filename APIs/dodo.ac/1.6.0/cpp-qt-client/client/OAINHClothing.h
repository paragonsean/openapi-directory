/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHClothing.h
 *
 * 
 */

#ifndef OAINHClothing_H
#define OAINHClothing_H

#include <QJsonObject>

#include "OAINHClothing_availability_inner.h"
#include "OAINHClothing_buy_inner.h"
#include "OAINHClothing_variations_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINHClothing_availability_inner;
class OAINHClothing_buy_inner;
class OAINHClothing_variations_inner;

class OAINHClothing : public OAIObject {
public:
    OAINHClothing();
    OAINHClothing(QString json);
    ~OAINHClothing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAINHClothing_availability_inner> getAvailability() const;
    void setAvailability(const QList<OAINHClothing_availability_inner> &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    QList<OAINHClothing_buy_inner> getBuy() const;
    void setBuy(const QList<OAINHClothing_buy_inner> &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QList<QString> getLabelThemes() const;
    void setLabelThemes(const QList<QString> &label_themes);
    bool is_label_themes_Set() const;
    bool is_label_themes_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getSeasonality() const;
    void setSeasonality(const QString &seasonality);
    bool is_seasonality_Set() const;
    bool is_seasonality_Valid() const;

    qint32 getSell() const;
    void setSell(const qint32 &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    QList<QString> getStyles() const;
    void setStyles(const QList<QString> &styles);
    bool is_styles_Set() const;
    bool is_styles_Valid() const;

    bool isUnlocked() const;
    void setUnlocked(const bool &unlocked);
    bool is_unlocked_Set() const;
    bool is_unlocked_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getVariationTotal() const;
    void setVariationTotal(const qint32 &variation_total);
    bool is_variation_total_Set() const;
    bool is_variation_total_Valid() const;

    QList<OAINHClothing_variations_inner> getVariations() const;
    void setVariations(const QList<OAINHClothing_variations_inner> &variations);
    bool is_variations_Set() const;
    bool is_variations_Valid() const;

    QString getVersionAdded() const;
    void setVersionAdded(const QString &version_added);
    bool is_version_added_Set() const;
    bool is_version_added_Valid() const;

    bool isVillEquip() const;
    void setVillEquip(const bool &vill_equip);
    bool is_vill_equip_Set() const;
    bool is_vill_equip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAINHClothing_availability_inner> m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;

    QList<OAINHClothing_buy_inner> m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QList<QString> m_label_themes;
    bool m_label_themes_isSet;
    bool m_label_themes_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_seasonality;
    bool m_seasonality_isSet;
    bool m_seasonality_isValid;

    qint32 m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    QList<QString> m_styles;
    bool m_styles_isSet;
    bool m_styles_isValid;

    bool m_unlocked;
    bool m_unlocked_isSet;
    bool m_unlocked_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_variation_total;
    bool m_variation_total_isSet;
    bool m_variation_total_isValid;

    QList<OAINHClothing_variations_inner> m_variations;
    bool m_variations_isSet;
    bool m_variations_isValid;

    QString m_version_added;
    bool m_version_added_isSet;
    bool m_version_added_isValid;

    bool m_vill_equip;
    bool m_vill_equip_isSet;
    bool m_vill_equip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHClothing)

#endif // OAINHClothing_H
