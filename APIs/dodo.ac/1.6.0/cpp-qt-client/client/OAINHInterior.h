/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINHInterior.h
 *
 * 
 */

#ifndef OAINHInterior_H
#define OAINHInterior_H

#include <QJsonObject>

#include "OAINHClothing_availability_inner.h"
#include "OAINHClothing_buy_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINHClothing_availability_inner;
class OAINHClothing_buy_inner;

class OAINHInterior : public OAIObject {
public:
    OAINHInterior();
    OAINHInterior(QString json);
    ~OAINHInterior() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAINHClothing_availability_inner> getAvailability() const;
    void setAvailability(const QList<OAINHClothing_availability_inner> &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    QList<OAINHClothing_buy_inner> getBuy() const;
    void setBuy(const QList<OAINHClothing_buy_inner> &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getColors() const;
    void setColors(const QString &colors);
    bool is_colors_Set() const;
    bool is_colors_Valid() const;

    float getGridLength() const;
    void setGridLength(const float &grid_length);
    bool is_grid_length_Set() const;
    bool is_grid_length_Valid() const;

    float getGridWidth() const;
    void setGridWidth(const float &grid_width);
    bool is_grid_width_Set() const;
    bool is_grid_width_Valid() const;

    qint32 getHhaBase() const;
    void setHhaBase(const qint32 &hha_base);
    bool is_hha_base_Set() const;
    bool is_hha_base_Valid() const;

    QString getHhaCategory() const;
    void setHhaCategory(const QString &hha_category);
    bool is_hha_category_Set() const;
    bool is_hha_category_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getItemSeries() const;
    void setItemSeries(const QString &item_series);
    bool is_item_series_Set() const;
    bool is_item_series_Valid() const;

    QString getItemSet() const;
    void setItemSet(const QString &item_set);
    bool is_item_set_Set() const;
    bool is_item_set_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint32 getSell() const;
    void setSell(const qint32 &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    QList<QString> getThemes() const;
    void setThemes(const QList<QString> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    bool isUnlocked() const;
    void setUnlocked(const bool &unlocked);
    bool is_unlocked_Set() const;
    bool is_unlocked_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getVersionAdded() const;
    void setVersionAdded(const QString &version_added);
    bool is_version_added_Set() const;
    bool is_version_added_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAINHClothing_availability_inner> m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;

    QList<OAINHClothing_buy_inner> m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_colors;
    bool m_colors_isSet;
    bool m_colors_isValid;

    float m_grid_length;
    bool m_grid_length_isSet;
    bool m_grid_length_isValid;

    float m_grid_width;
    bool m_grid_width_isSet;
    bool m_grid_width_isValid;

    qint32 m_hha_base;
    bool m_hha_base_isSet;
    bool m_hha_base_isValid;

    QString m_hha_category;
    bool m_hha_category_isSet;
    bool m_hha_category_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_item_series;
    bool m_item_series_isSet;
    bool m_item_series_isValid;

    QString m_item_set;
    bool m_item_set_isSet;
    bool m_item_set_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint32 m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    QList<QString> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    bool m_unlocked;
    bool m_unlocked_isSet;
    bool m_unlocked_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_version_added;
    bool m_version_added_isSet;
    bool m_version_added_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINHInterior)

#endif // OAINHInterior_H
