/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHPhoto::OAINHPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHPhoto::OAINHPhoto() {
    this->initializeModel();
}

OAINHPhoto::~OAINHPhoto() {}

void OAINHPhoto::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_custom_body_part_isSet = false;
    m_custom_body_part_isValid = false;

    m_custom_kits_isSet = false;
    m_custom_kits_isValid = false;

    m_customizable_isSet = false;
    m_customizable_isValid = false;

    m_grid_length_isSet = false;
    m_grid_length_isValid = false;

    m_grid_width_isSet = false;
    m_grid_width_isValid = false;

    m_interactable_isSet = false;
    m_interactable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_unlocked_isSet = false;
    m_unlocked_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;

    m_version_added_isSet = false;
    m_version_added_isValid = false;
}

void OAINHPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHPhoto::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_custom_body_part_isValid = ::OpenAPI::fromJsonValue(m_custom_body_part, json[QString("custom_body_part")]);
    m_custom_body_part_isSet = !json[QString("custom_body_part")].isNull() && m_custom_body_part_isValid;

    m_custom_kits_isValid = ::OpenAPI::fromJsonValue(m_custom_kits, json[QString("custom_kits")]);
    m_custom_kits_isSet = !json[QString("custom_kits")].isNull() && m_custom_kits_isValid;

    m_customizable_isValid = ::OpenAPI::fromJsonValue(m_customizable, json[QString("customizable")]);
    m_customizable_isSet = !json[QString("customizable")].isNull() && m_customizable_isValid;

    m_grid_length_isValid = ::OpenAPI::fromJsonValue(m_grid_length, json[QString("grid_length")]);
    m_grid_length_isSet = !json[QString("grid_length")].isNull() && m_grid_length_isValid;

    m_grid_width_isValid = ::OpenAPI::fromJsonValue(m_grid_width, json[QString("grid_width")]);
    m_grid_width_isSet = !json[QString("grid_width")].isNull() && m_grid_width_isValid;

    m_interactable_isValid = ::OpenAPI::fromJsonValue(m_interactable, json[QString("interactable")]);
    m_interactable_isSet = !json[QString("interactable")].isNull() && m_interactable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_unlocked_isValid = ::OpenAPI::fromJsonValue(m_unlocked, json[QString("unlocked")]);
    m_unlocked_isSet = !json[QString("unlocked")].isNull() && m_unlocked_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;

    m_version_added_isValid = ::OpenAPI::fromJsonValue(m_version_added, json[QString("version_added")]);
    m_version_added_isSet = !json[QString("version_added")].isNull() && m_version_added_isValid;
}

QString OAINHPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_custom_body_part_isSet) {
        obj.insert(QString("custom_body_part"), ::OpenAPI::toJsonValue(m_custom_body_part));
    }
    if (m_custom_kits_isSet) {
        obj.insert(QString("custom_kits"), ::OpenAPI::toJsonValue(m_custom_kits));
    }
    if (m_customizable_isSet) {
        obj.insert(QString("customizable"), ::OpenAPI::toJsonValue(m_customizable));
    }
    if (m_grid_length_isSet) {
        obj.insert(QString("grid_length"), ::OpenAPI::toJsonValue(m_grid_length));
    }
    if (m_grid_width_isSet) {
        obj.insert(QString("grid_width"), ::OpenAPI::toJsonValue(m_grid_width));
    }
    if (m_interactable_isSet) {
        obj.insert(QString("interactable"), ::OpenAPI::toJsonValue(m_interactable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_unlocked_isSet) {
        obj.insert(QString("unlocked"), ::OpenAPI::toJsonValue(m_unlocked));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    if (m_version_added_isSet) {
        obj.insert(QString("version_added"), ::OpenAPI::toJsonValue(m_version_added));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHPhoto::getAvailability() const {
    return m_availability;
}
void OAINHPhoto::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHPhoto::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHPhoto::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHPhoto::getBuy() const {
    return m_buy;
}
void OAINHPhoto::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHPhoto::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHPhoto::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAINHPhoto::getCategory() const {
    return m_category;
}
void OAINHPhoto::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINHPhoto::is_category_Set() const{
    return m_category_isSet;
}

bool OAINHPhoto::is_category_Valid() const{
    return m_category_isValid;
}

QString OAINHPhoto::getCustomBodyPart() const {
    return m_custom_body_part;
}
void OAINHPhoto::setCustomBodyPart(const QString &custom_body_part) {
    m_custom_body_part = custom_body_part;
    m_custom_body_part_isSet = true;
}

bool OAINHPhoto::is_custom_body_part_Set() const{
    return m_custom_body_part_isSet;
}

bool OAINHPhoto::is_custom_body_part_Valid() const{
    return m_custom_body_part_isValid;
}

qint32 OAINHPhoto::getCustomKits() const {
    return m_custom_kits;
}
void OAINHPhoto::setCustomKits(const qint32 &custom_kits) {
    m_custom_kits = custom_kits;
    m_custom_kits_isSet = true;
}

bool OAINHPhoto::is_custom_kits_Set() const{
    return m_custom_kits_isSet;
}

bool OAINHPhoto::is_custom_kits_Valid() const{
    return m_custom_kits_isValid;
}

bool OAINHPhoto::isCustomizable() const {
    return m_customizable;
}
void OAINHPhoto::setCustomizable(const bool &customizable) {
    m_customizable = customizable;
    m_customizable_isSet = true;
}

bool OAINHPhoto::is_customizable_Set() const{
    return m_customizable_isSet;
}

bool OAINHPhoto::is_customizable_Valid() const{
    return m_customizable_isValid;
}

float OAINHPhoto::getGridLength() const {
    return m_grid_length;
}
void OAINHPhoto::setGridLength(const float &grid_length) {
    m_grid_length = grid_length;
    m_grid_length_isSet = true;
}

bool OAINHPhoto::is_grid_length_Set() const{
    return m_grid_length_isSet;
}

bool OAINHPhoto::is_grid_length_Valid() const{
    return m_grid_length_isValid;
}

float OAINHPhoto::getGridWidth() const {
    return m_grid_width;
}
void OAINHPhoto::setGridWidth(const float &grid_width) {
    m_grid_width = grid_width;
    m_grid_width_isSet = true;
}

bool OAINHPhoto::is_grid_width_Set() const{
    return m_grid_width_isSet;
}

bool OAINHPhoto::is_grid_width_Valid() const{
    return m_grid_width_isValid;
}

bool OAINHPhoto::isInteractable() const {
    return m_interactable;
}
void OAINHPhoto::setInteractable(const bool &interactable) {
    m_interactable = interactable;
    m_interactable_isSet = true;
}

bool OAINHPhoto::is_interactable_Set() const{
    return m_interactable_isSet;
}

bool OAINHPhoto::is_interactable_Valid() const{
    return m_interactable_isValid;
}

QString OAINHPhoto::getName() const {
    return m_name;
}
void OAINHPhoto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHPhoto::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHPhoto::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAINHPhoto::getSell() const {
    return m_sell;
}
void OAINHPhoto::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHPhoto::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHPhoto::is_sell_Valid() const{
    return m_sell_isValid;
}

bool OAINHPhoto::isUnlocked() const {
    return m_unlocked;
}
void OAINHPhoto::setUnlocked(const bool &unlocked) {
    m_unlocked = unlocked;
    m_unlocked_isSet = true;
}

bool OAINHPhoto::is_unlocked_Set() const{
    return m_unlocked_isSet;
}

bool OAINHPhoto::is_unlocked_Valid() const{
    return m_unlocked_isValid;
}

QString OAINHPhoto::getUrl() const {
    return m_url;
}
void OAINHPhoto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHPhoto::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHPhoto::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAINHClothing_variations_inner> OAINHPhoto::getVariations() const {
    return m_variations;
}
void OAINHPhoto::setVariations(const QList<OAINHClothing_variations_inner> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAINHPhoto::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAINHPhoto::is_variations_Valid() const{
    return m_variations_isValid;
}

QString OAINHPhoto::getVersionAdded() const {
    return m_version_added;
}
void OAINHPhoto::setVersionAdded(const QString &version_added) {
    m_version_added = version_added;
    m_version_added_isSet = true;
}

bool OAINHPhoto::is_version_added_Set() const{
    return m_version_added_isSet;
}

bool OAINHPhoto::is_version_added_Valid() const{
    return m_version_added_isValid;
}

bool OAINHPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_kits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_added_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
