/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHInterior.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHInterior::OAINHInterior(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHInterior::OAINHInterior() {
    this->initializeModel();
}

OAINHInterior::~OAINHInterior() {}

void OAINHInterior::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_grid_length_isSet = false;
    m_grid_length_isValid = false;

    m_grid_width_isSet = false;
    m_grid_width_isValid = false;

    m_hha_base_isSet = false;
    m_hha_base_isValid = false;

    m_hha_category_isSet = false;
    m_hha_category_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_item_series_isSet = false;
    m_item_series_isValid = false;

    m_item_set_isSet = false;
    m_item_set_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_unlocked_isSet = false;
    m_unlocked_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_added_isSet = false;
    m_version_added_isValid = false;
}

void OAINHInterior::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHInterior::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_grid_length_isValid = ::OpenAPI::fromJsonValue(m_grid_length, json[QString("grid_length")]);
    m_grid_length_isSet = !json[QString("grid_length")].isNull() && m_grid_length_isValid;

    m_grid_width_isValid = ::OpenAPI::fromJsonValue(m_grid_width, json[QString("grid_width")]);
    m_grid_width_isSet = !json[QString("grid_width")].isNull() && m_grid_width_isValid;

    m_hha_base_isValid = ::OpenAPI::fromJsonValue(m_hha_base, json[QString("hha_base")]);
    m_hha_base_isSet = !json[QString("hha_base")].isNull() && m_hha_base_isValid;

    m_hha_category_isValid = ::OpenAPI::fromJsonValue(m_hha_category, json[QString("hha_category")]);
    m_hha_category_isSet = !json[QString("hha_category")].isNull() && m_hha_category_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_item_series_isValid = ::OpenAPI::fromJsonValue(m_item_series, json[QString("item_series")]);
    m_item_series_isSet = !json[QString("item_series")].isNull() && m_item_series_isValid;

    m_item_set_isValid = ::OpenAPI::fromJsonValue(m_item_set, json[QString("item_set")]);
    m_item_set_isSet = !json[QString("item_set")].isNull() && m_item_set_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_unlocked_isValid = ::OpenAPI::fromJsonValue(m_unlocked, json[QString("unlocked")]);
    m_unlocked_isSet = !json[QString("unlocked")].isNull() && m_unlocked_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_added_isValid = ::OpenAPI::fromJsonValue(m_version_added, json[QString("version_added")]);
    m_version_added_isSet = !json[QString("version_added")].isNull() && m_version_added_isValid;
}

QString OAINHInterior::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHInterior::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_colors_isSet) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_grid_length_isSet) {
        obj.insert(QString("grid_length"), ::OpenAPI::toJsonValue(m_grid_length));
    }
    if (m_grid_width_isSet) {
        obj.insert(QString("grid_width"), ::OpenAPI::toJsonValue(m_grid_width));
    }
    if (m_hha_base_isSet) {
        obj.insert(QString("hha_base"), ::OpenAPI::toJsonValue(m_hha_base));
    }
    if (m_hha_category_isSet) {
        obj.insert(QString("hha_category"), ::OpenAPI::toJsonValue(m_hha_category));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_item_series_isSet) {
        obj.insert(QString("item_series"), ::OpenAPI::toJsonValue(m_item_series));
    }
    if (m_item_set_isSet) {
        obj.insert(QString("item_set"), ::OpenAPI::toJsonValue(m_item_set));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_unlocked_isSet) {
        obj.insert(QString("unlocked"), ::OpenAPI::toJsonValue(m_unlocked));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_added_isSet) {
        obj.insert(QString("version_added"), ::OpenAPI::toJsonValue(m_version_added));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHInterior::getAvailability() const {
    return m_availability;
}
void OAINHInterior::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHInterior::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHInterior::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHInterior::getBuy() const {
    return m_buy;
}
void OAINHInterior::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHInterior::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHInterior::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAINHInterior::getCategory() const {
    return m_category;
}
void OAINHInterior::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINHInterior::is_category_Set() const{
    return m_category_isSet;
}

bool OAINHInterior::is_category_Valid() const{
    return m_category_isValid;
}

QString OAINHInterior::getColors() const {
    return m_colors;
}
void OAINHInterior::setColors(const QString &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAINHInterior::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAINHInterior::is_colors_Valid() const{
    return m_colors_isValid;
}

float OAINHInterior::getGridLength() const {
    return m_grid_length;
}
void OAINHInterior::setGridLength(const float &grid_length) {
    m_grid_length = grid_length;
    m_grid_length_isSet = true;
}

bool OAINHInterior::is_grid_length_Set() const{
    return m_grid_length_isSet;
}

bool OAINHInterior::is_grid_length_Valid() const{
    return m_grid_length_isValid;
}

float OAINHInterior::getGridWidth() const {
    return m_grid_width;
}
void OAINHInterior::setGridWidth(const float &grid_width) {
    m_grid_width = grid_width;
    m_grid_width_isSet = true;
}

bool OAINHInterior::is_grid_width_Set() const{
    return m_grid_width_isSet;
}

bool OAINHInterior::is_grid_width_Valid() const{
    return m_grid_width_isValid;
}

qint32 OAINHInterior::getHhaBase() const {
    return m_hha_base;
}
void OAINHInterior::setHhaBase(const qint32 &hha_base) {
    m_hha_base = hha_base;
    m_hha_base_isSet = true;
}

bool OAINHInterior::is_hha_base_Set() const{
    return m_hha_base_isSet;
}

bool OAINHInterior::is_hha_base_Valid() const{
    return m_hha_base_isValid;
}

QString OAINHInterior::getHhaCategory() const {
    return m_hha_category;
}
void OAINHInterior::setHhaCategory(const QString &hha_category) {
    m_hha_category = hha_category;
    m_hha_category_isSet = true;
}

bool OAINHInterior::is_hha_category_Set() const{
    return m_hha_category_isSet;
}

bool OAINHInterior::is_hha_category_Valid() const{
    return m_hha_category_isValid;
}

QString OAINHInterior::getImageUrl() const {
    return m_image_url;
}
void OAINHInterior::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAINHInterior::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAINHInterior::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAINHInterior::getItemSeries() const {
    return m_item_series;
}
void OAINHInterior::setItemSeries(const QString &item_series) {
    m_item_series = item_series;
    m_item_series_isSet = true;
}

bool OAINHInterior::is_item_series_Set() const{
    return m_item_series_isSet;
}

bool OAINHInterior::is_item_series_Valid() const{
    return m_item_series_isValid;
}

QString OAINHInterior::getItemSet() const {
    return m_item_set;
}
void OAINHInterior::setItemSet(const QString &item_set) {
    m_item_set = item_set;
    m_item_set_isSet = true;
}

bool OAINHInterior::is_item_set_Set() const{
    return m_item_set_isSet;
}

bool OAINHInterior::is_item_set_Valid() const{
    return m_item_set_isValid;
}

QString OAINHInterior::getName() const {
    return m_name;
}
void OAINHInterior::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHInterior::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHInterior::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINHInterior::getNotes() const {
    return m_notes;
}
void OAINHInterior::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINHInterior::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINHInterior::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAINHInterior::getSell() const {
    return m_sell;
}
void OAINHInterior::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHInterior::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHInterior::is_sell_Valid() const{
    return m_sell_isValid;
}

QString OAINHInterior::getTag() const {
    return m_tag;
}
void OAINHInterior::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAINHInterior::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAINHInterior::is_tag_Valid() const{
    return m_tag_isValid;
}

QList<QString> OAINHInterior::getThemes() const {
    return m_themes;
}
void OAINHInterior::setThemes(const QList<QString> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAINHInterior::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAINHInterior::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAINHInterior::isUnlocked() const {
    return m_unlocked;
}
void OAINHInterior::setUnlocked(const bool &unlocked) {
    m_unlocked = unlocked;
    m_unlocked_isSet = true;
}

bool OAINHInterior::is_unlocked_Set() const{
    return m_unlocked_isSet;
}

bool OAINHInterior::is_unlocked_Valid() const{
    return m_unlocked_isValid;
}

QString OAINHInterior::getUrl() const {
    return m_url;
}
void OAINHInterior::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHInterior::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHInterior::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINHInterior::getVersionAdded() const {
    return m_version_added;
}
void OAINHInterior::setVersionAdded(const QString &version_added) {
    m_version_added = version_added;
    m_version_added_isSet = true;
}

bool OAINHInterior::is_version_added_Set() const{
    return m_version_added_isSet;
}

bool OAINHInterior::is_version_added_Valid() const{
    return m_version_added_isValid;
}

bool OAINHInterior::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_added_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHInterior::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
