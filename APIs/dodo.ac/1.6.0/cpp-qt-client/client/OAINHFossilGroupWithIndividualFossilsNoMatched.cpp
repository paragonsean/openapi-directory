/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHFossilGroupWithIndividualFossilsNoMatched.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHFossilGroupWithIndividualFossilsNoMatched::OAINHFossilGroupWithIndividualFossilsNoMatched(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHFossilGroupWithIndividualFossilsNoMatched::OAINHFossilGroupWithIndividualFossilsNoMatched() {
    this->initializeModel();
}

OAINHFossilGroupWithIndividualFossilsNoMatched::~OAINHFossilGroupWithIndividualFossilsNoMatched() {}

void OAINHFossilGroupWithIndividualFossilsNoMatched::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_fossils_isSet = false;
    m_fossils_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINHFossilGroupWithIndividualFossilsNoMatched::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHFossilGroupWithIndividualFossilsNoMatched::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fossils_isValid = ::OpenAPI::fromJsonValue(m_fossils, json[QString("fossils")]);
    m_fossils_isSet = !json[QString("fossils")].isNull() && m_fossils_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINHFossilGroupWithIndividualFossilsNoMatched::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHFossilGroupWithIndividualFossilsNoMatched::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fossils.size() > 0) {
        obj.insert(QString("fossils"), ::OpenAPI::toJsonValue(m_fossils));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_room_isSet) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINHFossilGroupWithIndividualFossilsNoMatched::getDescription() const {
    return m_description;
}
void OAINHFossilGroupWithIndividualFossilsNoMatched::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_description_Set() const{
    return m_description_isSet;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAINHFossilGroupWithIndividualFossils_fossils_inner> OAINHFossilGroupWithIndividualFossilsNoMatched::getFossils() const {
    return m_fossils;
}
void OAINHFossilGroupWithIndividualFossilsNoMatched::setFossils(const QList<OAINHFossilGroupWithIndividualFossils_fossils_inner> &fossils) {
    m_fossils = fossils;
    m_fossils_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_fossils_Set() const{
    return m_fossils_isSet;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_fossils_Valid() const{
    return m_fossils_isValid;
}

QString OAINHFossilGroupWithIndividualFossilsNoMatched::getName() const {
    return m_name;
}
void OAINHFossilGroupWithIndividualFossilsNoMatched::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAINHFossilGroupWithIndividualFossilsNoMatched::getRoom() const {
    return m_room;
}
void OAINHFossilGroupWithIndividualFossilsNoMatched::setRoom(const qint32 &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_room_Set() const{
    return m_room_isSet;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_room_Valid() const{
    return m_room_isValid;
}

QString OAINHFossilGroupWithIndividualFossilsNoMatched::getUrl() const {
    return m_url;
}
void OAINHFossilGroupWithIndividualFossilsNoMatched::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fossils.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHFossilGroupWithIndividualFossilsNoMatched::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
