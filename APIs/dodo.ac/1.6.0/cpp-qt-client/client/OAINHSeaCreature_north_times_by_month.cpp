/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHSeaCreature_north_times_by_month.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHSeaCreature_north_times_by_month::OAINHSeaCreature_north_times_by_month(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHSeaCreature_north_times_by_month::OAINHSeaCreature_north_times_by_month() {
    this->initializeModel();
}

OAINHSeaCreature_north_times_by_month::~OAINHSeaCreature_north_times_by_month() {}

void OAINHSeaCreature_north_times_by_month::initializeModel() {

    m_r_1_isSet = false;
    m_r_1_isValid = false;

    m_r_2_isSet = false;
    m_r_2_isValid = false;

    m_r_3_isSet = false;
    m_r_3_isValid = false;

    m_r_4_isSet = false;
    m_r_4_isValid = false;

    m_r_5_isSet = false;
    m_r_5_isValid = false;

    m_r_6_isSet = false;
    m_r_6_isValid = false;

    m_r_7_isSet = false;
    m_r_7_isValid = false;

    m_r_8_isSet = false;
    m_r_8_isValid = false;

    m_r_9_isSet = false;
    m_r_9_isValid = false;

    m_r_10_isSet = false;
    m_r_10_isValid = false;

    m_r_11_isSet = false;
    m_r_11_isValid = false;

    m_r_12_isSet = false;
    m_r_12_isValid = false;
}

void OAINHSeaCreature_north_times_by_month::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHSeaCreature_north_times_by_month::fromJsonObject(QJsonObject json) {

    m_r_1_isValid = ::OpenAPI::fromJsonValue(m_r_1, json[QString("1")]);
    m_r_1_isSet = !json[QString("1")].isNull() && m_r_1_isValid;

    m_r_2_isValid = ::OpenAPI::fromJsonValue(m_r_2, json[QString("2")]);
    m_r_2_isSet = !json[QString("2")].isNull() && m_r_2_isValid;

    m_r_3_isValid = ::OpenAPI::fromJsonValue(m_r_3, json[QString("3")]);
    m_r_3_isSet = !json[QString("3")].isNull() && m_r_3_isValid;

    m_r_4_isValid = ::OpenAPI::fromJsonValue(m_r_4, json[QString("4")]);
    m_r_4_isSet = !json[QString("4")].isNull() && m_r_4_isValid;

    m_r_5_isValid = ::OpenAPI::fromJsonValue(m_r_5, json[QString("5")]);
    m_r_5_isSet = !json[QString("5")].isNull() && m_r_5_isValid;

    m_r_6_isValid = ::OpenAPI::fromJsonValue(m_r_6, json[QString("6")]);
    m_r_6_isSet = !json[QString("6")].isNull() && m_r_6_isValid;

    m_r_7_isValid = ::OpenAPI::fromJsonValue(m_r_7, json[QString("7")]);
    m_r_7_isSet = !json[QString("7")].isNull() && m_r_7_isValid;

    m_r_8_isValid = ::OpenAPI::fromJsonValue(m_r_8, json[QString("8")]);
    m_r_8_isSet = !json[QString("8")].isNull() && m_r_8_isValid;

    m_r_9_isValid = ::OpenAPI::fromJsonValue(m_r_9, json[QString("9")]);
    m_r_9_isSet = !json[QString("9")].isNull() && m_r_9_isValid;

    m_r_10_isValid = ::OpenAPI::fromJsonValue(m_r_10, json[QString("10")]);
    m_r_10_isSet = !json[QString("10")].isNull() && m_r_10_isValid;

    m_r_11_isValid = ::OpenAPI::fromJsonValue(m_r_11, json[QString("11")]);
    m_r_11_isSet = !json[QString("11")].isNull() && m_r_11_isValid;

    m_r_12_isValid = ::OpenAPI::fromJsonValue(m_r_12, json[QString("12")]);
    m_r_12_isSet = !json[QString("12")].isNull() && m_r_12_isValid;
}

QString OAINHSeaCreature_north_times_by_month::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHSeaCreature_north_times_by_month::asJsonObject() const {
    QJsonObject obj;
    if (m_r_1_isSet) {
        obj.insert(QString("1"), ::OpenAPI::toJsonValue(m_r_1));
    }
    if (m_r_2_isSet) {
        obj.insert(QString("2"), ::OpenAPI::toJsonValue(m_r_2));
    }
    if (m_r_3_isSet) {
        obj.insert(QString("3"), ::OpenAPI::toJsonValue(m_r_3));
    }
    if (m_r_4_isSet) {
        obj.insert(QString("4"), ::OpenAPI::toJsonValue(m_r_4));
    }
    if (m_r_5_isSet) {
        obj.insert(QString("5"), ::OpenAPI::toJsonValue(m_r_5));
    }
    if (m_r_6_isSet) {
        obj.insert(QString("6"), ::OpenAPI::toJsonValue(m_r_6));
    }
    if (m_r_7_isSet) {
        obj.insert(QString("7"), ::OpenAPI::toJsonValue(m_r_7));
    }
    if (m_r_8_isSet) {
        obj.insert(QString("8"), ::OpenAPI::toJsonValue(m_r_8));
    }
    if (m_r_9_isSet) {
        obj.insert(QString("9"), ::OpenAPI::toJsonValue(m_r_9));
    }
    if (m_r_10_isSet) {
        obj.insert(QString("10"), ::OpenAPI::toJsonValue(m_r_10));
    }
    if (m_r_11_isSet) {
        obj.insert(QString("11"), ::OpenAPI::toJsonValue(m_r_11));
    }
    if (m_r_12_isSet) {
        obj.insert(QString("12"), ::OpenAPI::toJsonValue(m_r_12));
    }
    return obj;
}

QString OAINHSeaCreature_north_times_by_month::getR1() const {
    return m_r_1;
}
void OAINHSeaCreature_north_times_by_month::setR1(const QString &r_1) {
    m_r_1 = r_1;
    m_r_1_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_1_Set() const{
    return m_r_1_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_1_Valid() const{
    return m_r_1_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR2() const {
    return m_r_2;
}
void OAINHSeaCreature_north_times_by_month::setR2(const QString &r_2) {
    m_r_2 = r_2;
    m_r_2_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_2_Set() const{
    return m_r_2_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_2_Valid() const{
    return m_r_2_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR3() const {
    return m_r_3;
}
void OAINHSeaCreature_north_times_by_month::setR3(const QString &r_3) {
    m_r_3 = r_3;
    m_r_3_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_3_Set() const{
    return m_r_3_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_3_Valid() const{
    return m_r_3_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR4() const {
    return m_r_4;
}
void OAINHSeaCreature_north_times_by_month::setR4(const QString &r_4) {
    m_r_4 = r_4;
    m_r_4_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_4_Set() const{
    return m_r_4_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_4_Valid() const{
    return m_r_4_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR5() const {
    return m_r_5;
}
void OAINHSeaCreature_north_times_by_month::setR5(const QString &r_5) {
    m_r_5 = r_5;
    m_r_5_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_5_Set() const{
    return m_r_5_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_5_Valid() const{
    return m_r_5_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR6() const {
    return m_r_6;
}
void OAINHSeaCreature_north_times_by_month::setR6(const QString &r_6) {
    m_r_6 = r_6;
    m_r_6_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_6_Set() const{
    return m_r_6_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_6_Valid() const{
    return m_r_6_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR7() const {
    return m_r_7;
}
void OAINHSeaCreature_north_times_by_month::setR7(const QString &r_7) {
    m_r_7 = r_7;
    m_r_7_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_7_Set() const{
    return m_r_7_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_7_Valid() const{
    return m_r_7_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR8() const {
    return m_r_8;
}
void OAINHSeaCreature_north_times_by_month::setR8(const QString &r_8) {
    m_r_8 = r_8;
    m_r_8_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_8_Set() const{
    return m_r_8_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_8_Valid() const{
    return m_r_8_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR9() const {
    return m_r_9;
}
void OAINHSeaCreature_north_times_by_month::setR9(const QString &r_9) {
    m_r_9 = r_9;
    m_r_9_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_9_Set() const{
    return m_r_9_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_9_Valid() const{
    return m_r_9_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR10() const {
    return m_r_10;
}
void OAINHSeaCreature_north_times_by_month::setR10(const QString &r_10) {
    m_r_10 = r_10;
    m_r_10_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_10_Set() const{
    return m_r_10_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_10_Valid() const{
    return m_r_10_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR11() const {
    return m_r_11;
}
void OAINHSeaCreature_north_times_by_month::setR11(const QString &r_11) {
    m_r_11 = r_11;
    m_r_11_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_11_Set() const{
    return m_r_11_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_11_Valid() const{
    return m_r_11_isValid;
}

QString OAINHSeaCreature_north_times_by_month::getR12() const {
    return m_r_12;
}
void OAINHSeaCreature_north_times_by_month::setR12(const QString &r_12) {
    m_r_12 = r_12;
    m_r_12_isSet = true;
}

bool OAINHSeaCreature_north_times_by_month::is_r_12_Set() const{
    return m_r_12_isSet;
}

bool OAINHSeaCreature_north_times_by_month::is_r_12_Valid() const{
    return m_r_12_isValid;
}

bool OAINHSeaCreature_north_times_by_month::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_9_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_11_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_12_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHSeaCreature_north_times_by_month::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
