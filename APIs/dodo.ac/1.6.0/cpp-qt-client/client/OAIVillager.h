/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVillager.h
 *
 * 
 */

#ifndef OAIVillager_H
#define OAIVillager_H

#include <QJsonObject>

#include "OAIVillager_nh_details.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVillager_nh_details;

class OAIVillager : public OAIObject {
public:
    OAIVillager();
    OAIVillager(QString json);
    ~OAIVillager() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAltName() const;
    void setAltName(const QString &alt_name);
    bool is_alt_name_Set() const;
    bool is_alt_name_Valid() const;

    QList<QString> getAppearances() const;
    void setAppearances(const QList<QString> &appearances);
    bool is_appearances_Set() const;
    bool is_appearances_Valid() const;

    QString getBirthdayDay() const;
    void setBirthdayDay(const QString &birthday_day);
    bool is_birthday_day_Set() const;
    bool is_birthday_day_Valid() const;

    QString getBirthdayMonth() const;
    void setBirthdayMonth(const QString &birthday_month);
    bool is_birthday_month_Set() const;
    bool is_birthday_month_Valid() const;

    QString getClothing() const;
    void setClothing(const QString &clothing);
    bool is_clothing_Set() const;
    bool is_clothing_Valid() const;

    QString getDebut() const;
    void setDebut(const QString &debut);
    bool is_debut_Set() const;
    bool is_debut_Valid() const;

    QString getGender() const;
    void setGender(const QString &gender);
    bool is_gender_Set() const;
    bool is_gender_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    bool isIslander() const;
    void setIslander(const bool &islander);
    bool is_islander_Set() const;
    bool is_islander_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIVillager_nh_details getNhDetails() const;
    void setNhDetails(const OAIVillager_nh_details &nh_details);
    bool is_nh_details_Set() const;
    bool is_nh_details_Valid() const;

    QString getPersonality() const;
    void setPersonality(const QString &personality);
    bool is_personality_Set() const;
    bool is_personality_Valid() const;

    QString getPhrase() const;
    void setPhrase(const QString &phrase);
    bool is_phrase_Set() const;
    bool is_phrase_Valid() const;

    QList<QString> getPrevPhrases() const;
    void setPrevPhrases(const QList<QString> &prev_phrases);
    bool is_prev_phrases_Set() const;
    bool is_prev_phrases_Valid() const;

    QString getQuote() const;
    void setQuote(const QString &quote);
    bool is_quote_Set() const;
    bool is_quote_Valid() const;

    QString getSign() const;
    void setSign(const QString &sign);
    bool is_sign_Set() const;
    bool is_sign_Valid() const;

    QString getSpecies() const;
    void setSpecies(const QString &species);
    bool is_species_Set() const;
    bool is_species_Valid() const;

    QString getTextColor() const;
    void setTextColor(const QString &text_color);
    bool is_text_color_Set() const;
    bool is_text_color_Valid() const;

    QString getTitleColor() const;
    void setTitleColor(const QString &title_color);
    bool is_title_color_Set() const;
    bool is_title_color_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alt_name;
    bool m_alt_name_isSet;
    bool m_alt_name_isValid;

    QList<QString> m_appearances;
    bool m_appearances_isSet;
    bool m_appearances_isValid;

    QString m_birthday_day;
    bool m_birthday_day_isSet;
    bool m_birthday_day_isValid;

    QString m_birthday_month;
    bool m_birthday_month_isSet;
    bool m_birthday_month_isValid;

    QString m_clothing;
    bool m_clothing_isSet;
    bool m_clothing_isValid;

    QString m_debut;
    bool m_debut_isSet;
    bool m_debut_isValid;

    QString m_gender;
    bool m_gender_isSet;
    bool m_gender_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    bool m_islander;
    bool m_islander_isSet;
    bool m_islander_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIVillager_nh_details m_nh_details;
    bool m_nh_details_isSet;
    bool m_nh_details_isValid;

    QString m_personality;
    bool m_personality_isSet;
    bool m_personality_isValid;

    QString m_phrase;
    bool m_phrase_isSet;
    bool m_phrase_isValid;

    QList<QString> m_prev_phrases;
    bool m_prev_phrases_isSet;
    bool m_prev_phrases_isValid;

    QString m_quote;
    bool m_quote_isSet;
    bool m_quote_isValid;

    QString m_sign;
    bool m_sign_isSet;
    bool m_sign_isValid;

    QString m_species;
    bool m_species_isSet;
    bool m_species_isValid;

    QString m_text_color;
    bool m_text_color_isSet;
    bool m_text_color_isValid;

    QString m_title_color;
    bool m_title_color_isSet;
    bool m_title_color_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVillager)

#endif // OAIVillager_H
