/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVillager_nh_details.h
 *
 * An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.
 */

#ifndef OAIVillager_nh_details_H
#define OAIVillager_nh_details_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVillager_nh_details : public OAIObject {
public:
    OAIVillager_nh_details();
    OAIVillager_nh_details(QString json);
    ~OAIVillager_nh_details() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCatchphrase() const;
    void setCatchphrase(const QString &catchphrase);
    bool is_catchphrase_Set() const;
    bool is_catchphrase_Valid() const;

    QString getClothing() const;
    void setClothing(const QString &clothing);
    bool is_clothing_Set() const;
    bool is_clothing_Valid() const;

    QString getClothingVariation() const;
    void setClothingVariation(const QString &clothing_variation);
    bool is_clothing_variation_Set() const;
    bool is_clothing_variation_Valid() const;

    QList<QString> getFavColors() const;
    void setFavColors(const QList<QString> &fav_colors);
    bool is_fav_colors_Set() const;
    bool is_fav_colors_Valid() const;

    QList<QString> getFavStyles() const;
    void setFavStyles(const QList<QString> &fav_styles);
    bool is_fav_styles_Set() const;
    bool is_fav_styles_Valid() const;

    QString getHobby() const;
    void setHobby(const QString &hobby);
    bool is_hobby_Set() const;
    bool is_hobby_Valid() const;

    QString getHouseExteriorUrl() const;
    void setHouseExteriorUrl(const QString &house_exterior_url);
    bool is_house_exterior_url_Set() const;
    bool is_house_exterior_url_Valid() const;

    QString getHouseFlooring() const;
    void setHouseFlooring(const QString &house_flooring);
    bool is_house_flooring_Set() const;
    bool is_house_flooring_Valid() const;

    QString getHouseInteriorUrl() const;
    void setHouseInteriorUrl(const QString &house_interior_url);
    bool is_house_interior_url_Set() const;
    bool is_house_interior_url_Valid() const;

    QString getHouseMusic() const;
    void setHouseMusic(const QString &house_music);
    bool is_house_music_Set() const;
    bool is_house_music_Valid() const;

    QString getHouseMusicNote() const;
    void setHouseMusicNote(const QString &house_music_note);
    bool is_house_music_note_Set() const;
    bool is_house_music_note_Valid() const;

    QString getHouseWallpaper() const;
    void setHouseWallpaper(const QString &house_wallpaper);
    bool is_house_wallpaper_Set() const;
    bool is_house_wallpaper_Valid() const;

    QString getIconUrl() const;
    void setIconUrl(const QString &icon_url);
    bool is_icon_url_Set() const;
    bool is_icon_url_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getPhotoUrl() const;
    void setPhotoUrl(const QString &photo_url);
    bool is_photo_url_Set() const;
    bool is_photo_url_Valid() const;

    QString getQuote() const;
    void setQuote(const QString &quote);
    bool is_quote_Set() const;
    bool is_quote_Valid() const;

    QString getSubPersonality() const;
    void setSubPersonality(const QString &sub_personality);
    bool is_sub_personality_Set() const;
    bool is_sub_personality_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_catchphrase;
    bool m_catchphrase_isSet;
    bool m_catchphrase_isValid;

    QString m_clothing;
    bool m_clothing_isSet;
    bool m_clothing_isValid;

    QString m_clothing_variation;
    bool m_clothing_variation_isSet;
    bool m_clothing_variation_isValid;

    QList<QString> m_fav_colors;
    bool m_fav_colors_isSet;
    bool m_fav_colors_isValid;

    QList<QString> m_fav_styles;
    bool m_fav_styles_isSet;
    bool m_fav_styles_isValid;

    QString m_hobby;
    bool m_hobby_isSet;
    bool m_hobby_isValid;

    QString m_house_exterior_url;
    bool m_house_exterior_url_isSet;
    bool m_house_exterior_url_isValid;

    QString m_house_flooring;
    bool m_house_flooring_isSet;
    bool m_house_flooring_isValid;

    QString m_house_interior_url;
    bool m_house_interior_url_isSet;
    bool m_house_interior_url_isValid;

    QString m_house_music;
    bool m_house_music_isSet;
    bool m_house_music_isValid;

    QString m_house_music_note;
    bool m_house_music_note_isSet;
    bool m_house_music_note_isValid;

    QString m_house_wallpaper;
    bool m_house_wallpaper_isSet;
    bool m_house_wallpaper_isValid;

    QString m_icon_url;
    bool m_icon_url_isSet;
    bool m_icon_url_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_photo_url;
    bool m_photo_url_isSet;
    bool m_photo_url_isValid;

    QString m_quote;
    bool m_quote_isSet;
    bool m_quote_isValid;

    QString m_sub_personality;
    bool m_sub_personality_isSet;
    bool m_sub_personality_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVillager_nh_details)

#endif // OAIVillager_nh_details_H
