/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHItem::OAINHItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHItem::OAINHItem() {
    this->initializeModel();
}

OAINHItem::~OAINHItem() {}

void OAINHItem::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_edible_isSet = false;
    m_edible_isValid = false;

    m_hha_base_isSet = false;
    m_hha_base_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_is_fence_isSet = false;
    m_is_fence_isValid = false;

    m_material_name_sort_isSet = false;
    m_material_name_sort_isValid = false;

    m_material_seasonality_isSet = false;
    m_material_seasonality_isValid = false;

    m_material_seasonality_sort_isSet = false;
    m_material_seasonality_sort_isValid = false;

    m_material_sort_isSet = false;
    m_material_sort_isValid = false;

    m_material_type_isSet = false;
    m_material_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_plant_type_isSet = false;
    m_plant_type_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_stack_isSet = false;
    m_stack_isValid = false;

    m_unlocked_isSet = false;
    m_unlocked_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_added_isSet = false;
    m_version_added_isValid = false;
}

void OAINHItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHItem::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_edible_isValid = ::OpenAPI::fromJsonValue(m_edible, json[QString("edible")]);
    m_edible_isSet = !json[QString("edible")].isNull() && m_edible_isValid;

    m_hha_base_isValid = ::OpenAPI::fromJsonValue(m_hha_base, json[QString("hha_base")]);
    m_hha_base_isSet = !json[QString("hha_base")].isNull() && m_hha_base_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_is_fence_isValid = ::OpenAPI::fromJsonValue(m_is_fence, json[QString("is_fence")]);
    m_is_fence_isSet = !json[QString("is_fence")].isNull() && m_is_fence_isValid;

    m_material_name_sort_isValid = ::OpenAPI::fromJsonValue(m_material_name_sort, json[QString("material_name_sort")]);
    m_material_name_sort_isSet = !json[QString("material_name_sort")].isNull() && m_material_name_sort_isValid;

    m_material_seasonality_isValid = ::OpenAPI::fromJsonValue(m_material_seasonality, json[QString("material_seasonality")]);
    m_material_seasonality_isSet = !json[QString("material_seasonality")].isNull() && m_material_seasonality_isValid;

    m_material_seasonality_sort_isValid = ::OpenAPI::fromJsonValue(m_material_seasonality_sort, json[QString("material_seasonality_sort")]);
    m_material_seasonality_sort_isSet = !json[QString("material_seasonality_sort")].isNull() && m_material_seasonality_sort_isValid;

    m_material_sort_isValid = ::OpenAPI::fromJsonValue(m_material_sort, json[QString("material_sort")]);
    m_material_sort_isSet = !json[QString("material_sort")].isNull() && m_material_sort_isValid;

    m_material_type_isValid = ::OpenAPI::fromJsonValue(m_material_type, json[QString("material_type")]);
    m_material_type_isSet = !json[QString("material_type")].isNull() && m_material_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_plant_type_isValid = ::OpenAPI::fromJsonValue(m_plant_type, json[QString("plant_type")]);
    m_plant_type_isSet = !json[QString("plant_type")].isNull() && m_plant_type_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_stack_isValid = ::OpenAPI::fromJsonValue(m_stack, json[QString("stack")]);
    m_stack_isSet = !json[QString("stack")].isNull() && m_stack_isValid;

    m_unlocked_isValid = ::OpenAPI::fromJsonValue(m_unlocked, json[QString("unlocked")]);
    m_unlocked_isSet = !json[QString("unlocked")].isNull() && m_unlocked_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_added_isValid = ::OpenAPI::fromJsonValue(m_version_added, json[QString("version_added")]);
    m_version_added_isSet = !json[QString("version_added")].isNull() && m_version_added_isValid;
}

QString OAINHItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHItem::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_edible_isSet) {
        obj.insert(QString("edible"), ::OpenAPI::toJsonValue(m_edible));
    }
    if (m_hha_base_isSet) {
        obj.insert(QString("hha_base"), ::OpenAPI::toJsonValue(m_hha_base));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_is_fence_isSet) {
        obj.insert(QString("is_fence"), ::OpenAPI::toJsonValue(m_is_fence));
    }
    if (m_material_name_sort_isSet) {
        obj.insert(QString("material_name_sort"), ::OpenAPI::toJsonValue(m_material_name_sort));
    }
    if (m_material_seasonality_isSet) {
        obj.insert(QString("material_seasonality"), ::OpenAPI::toJsonValue(m_material_seasonality));
    }
    if (m_material_seasonality_sort_isSet) {
        obj.insert(QString("material_seasonality_sort"), ::OpenAPI::toJsonValue(m_material_seasonality_sort));
    }
    if (m_material_sort_isSet) {
        obj.insert(QString("material_sort"), ::OpenAPI::toJsonValue(m_material_sort));
    }
    if (m_material_type_isSet) {
        obj.insert(QString("material_type"), ::OpenAPI::toJsonValue(m_material_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_plant_type_isSet) {
        obj.insert(QString("plant_type"), ::OpenAPI::toJsonValue(m_plant_type));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_stack_isSet) {
        obj.insert(QString("stack"), ::OpenAPI::toJsonValue(m_stack));
    }
    if (m_unlocked_isSet) {
        obj.insert(QString("unlocked"), ::OpenAPI::toJsonValue(m_unlocked));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_added_isSet) {
        obj.insert(QString("version_added"), ::OpenAPI::toJsonValue(m_version_added));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHItem::getAvailability() const {
    return m_availability;
}
void OAINHItem::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHItem::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHItem::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHItem::getBuy() const {
    return m_buy;
}
void OAINHItem::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHItem::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHItem::is_buy_Valid() const{
    return m_buy_isValid;
}

bool OAINHItem::isEdible() const {
    return m_edible;
}
void OAINHItem::setEdible(const bool &edible) {
    m_edible = edible;
    m_edible_isSet = true;
}

bool OAINHItem::is_edible_Set() const{
    return m_edible_isSet;
}

bool OAINHItem::is_edible_Valid() const{
    return m_edible_isValid;
}

qint32 OAINHItem::getHhaBase() const {
    return m_hha_base;
}
void OAINHItem::setHhaBase(const qint32 &hha_base) {
    m_hha_base = hha_base;
    m_hha_base_isSet = true;
}

bool OAINHItem::is_hha_base_Set() const{
    return m_hha_base_isSet;
}

bool OAINHItem::is_hha_base_Valid() const{
    return m_hha_base_isValid;
}

QString OAINHItem::getImageUrl() const {
    return m_image_url;
}
void OAINHItem::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAINHItem::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAINHItem::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAINHItem::isIsFence() const {
    return m_is_fence;
}
void OAINHItem::setIsFence(const bool &is_fence) {
    m_is_fence = is_fence;
    m_is_fence_isSet = true;
}

bool OAINHItem::is_is_fence_Set() const{
    return m_is_fence_isSet;
}

bool OAINHItem::is_is_fence_Valid() const{
    return m_is_fence_isValid;
}

qint32 OAINHItem::getMaterialNameSort() const {
    return m_material_name_sort;
}
void OAINHItem::setMaterialNameSort(const qint32 &material_name_sort) {
    m_material_name_sort = material_name_sort;
    m_material_name_sort_isSet = true;
}

bool OAINHItem::is_material_name_sort_Set() const{
    return m_material_name_sort_isSet;
}

bool OAINHItem::is_material_name_sort_Valid() const{
    return m_material_name_sort_isValid;
}

QString OAINHItem::getMaterialSeasonality() const {
    return m_material_seasonality;
}
void OAINHItem::setMaterialSeasonality(const QString &material_seasonality) {
    m_material_seasonality = material_seasonality;
    m_material_seasonality_isSet = true;
}

bool OAINHItem::is_material_seasonality_Set() const{
    return m_material_seasonality_isSet;
}

bool OAINHItem::is_material_seasonality_Valid() const{
    return m_material_seasonality_isValid;
}

qint32 OAINHItem::getMaterialSeasonalitySort() const {
    return m_material_seasonality_sort;
}
void OAINHItem::setMaterialSeasonalitySort(const qint32 &material_seasonality_sort) {
    m_material_seasonality_sort = material_seasonality_sort;
    m_material_seasonality_sort_isSet = true;
}

bool OAINHItem::is_material_seasonality_sort_Set() const{
    return m_material_seasonality_sort_isSet;
}

bool OAINHItem::is_material_seasonality_sort_Valid() const{
    return m_material_seasonality_sort_isValid;
}

qint32 OAINHItem::getMaterialSort() const {
    return m_material_sort;
}
void OAINHItem::setMaterialSort(const qint32 &material_sort) {
    m_material_sort = material_sort;
    m_material_sort_isSet = true;
}

bool OAINHItem::is_material_sort_Set() const{
    return m_material_sort_isSet;
}

bool OAINHItem::is_material_sort_Valid() const{
    return m_material_sort_isValid;
}

QString OAINHItem::getMaterialType() const {
    return m_material_type;
}
void OAINHItem::setMaterialType(const QString &material_type) {
    m_material_type = material_type;
    m_material_type_isSet = true;
}

bool OAINHItem::is_material_type_Set() const{
    return m_material_type_isSet;
}

bool OAINHItem::is_material_type_Valid() const{
    return m_material_type_isValid;
}

QString OAINHItem::getName() const {
    return m_name;
}
void OAINHItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINHItem::getNotes() const {
    return m_notes;
}
void OAINHItem::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINHItem::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINHItem::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAINHItem::getPlantType() const {
    return m_plant_type;
}
void OAINHItem::setPlantType(const QString &plant_type) {
    m_plant_type = plant_type;
    m_plant_type_isSet = true;
}

bool OAINHItem::is_plant_type_Set() const{
    return m_plant_type_isSet;
}

bool OAINHItem::is_plant_type_Valid() const{
    return m_plant_type_isValid;
}

qint32 OAINHItem::getSell() const {
    return m_sell;
}
void OAINHItem::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHItem::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHItem::is_sell_Valid() const{
    return m_sell_isValid;
}

qint32 OAINHItem::getStack() const {
    return m_stack;
}
void OAINHItem::setStack(const qint32 &stack) {
    m_stack = stack;
    m_stack_isSet = true;
}

bool OAINHItem::is_stack_Set() const{
    return m_stack_isSet;
}

bool OAINHItem::is_stack_Valid() const{
    return m_stack_isValid;
}

bool OAINHItem::isUnlocked() const {
    return m_unlocked;
}
void OAINHItem::setUnlocked(const bool &unlocked) {
    m_unlocked = unlocked;
    m_unlocked_isSet = true;
}

bool OAINHItem::is_unlocked_Set() const{
    return m_unlocked_isSet;
}

bool OAINHItem::is_unlocked_Valid() const{
    return m_unlocked_isValid;
}

QString OAINHItem::getUrl() const {
    return m_url;
}
void OAINHItem::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHItem::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHItem::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINHItem::getVersionAdded() const {
    return m_version_added;
}
void OAINHItem::setVersionAdded(const QString &version_added) {
    m_version_added = version_added;
    m_version_added_isSet = true;
}

bool OAINHItem::is_version_added_Set() const{
    return m_version_added_isSet;
}

bool OAINHItem::is_version_added_Valid() const{
    return m_version_added_isValid;
}

bool OAINHItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_edible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hha_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_fence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_name_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_seasonality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_seasonality_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_added_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
