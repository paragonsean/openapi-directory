/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError401.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError401::OAIError401(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError401::OAIError401() {
    this->initializeModel();
}

OAIError401::~OAIError401() {}

void OAIError401::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIError401::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError401::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIError401::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError401::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIError401::getDetails() const {
    return m_details;
}
void OAIError401::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIError401::is_details_Set() const{
    return m_details_isSet;
}

bool OAIError401::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIError401::getTitle() const {
    return m_title;
}
void OAIError401::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIError401::is_title_Set() const{
    return m_title_isSet;
}

bool OAIError401::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIError401::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError401::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
