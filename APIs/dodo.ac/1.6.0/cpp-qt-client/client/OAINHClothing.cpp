/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINHClothing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINHClothing::OAINHClothing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINHClothing::OAINHClothing() {
    this->initializeModel();
}

OAINHClothing::~OAINHClothing() {}

void OAINHClothing::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_label_themes_isSet = false;
    m_label_themes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_seasonality_isSet = false;
    m_seasonality_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_styles_isSet = false;
    m_styles_isValid = false;

    m_unlocked_isSet = false;
    m_unlocked_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_variation_total_isSet = false;
    m_variation_total_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;

    m_version_added_isSet = false;
    m_version_added_isValid = false;

    m_vill_equip_isSet = false;
    m_vill_equip_isValid = false;
}

void OAINHClothing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINHClothing::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_label_themes_isValid = ::OpenAPI::fromJsonValue(m_label_themes, json[QString("label_themes")]);
    m_label_themes_isSet = !json[QString("label_themes")].isNull() && m_label_themes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_seasonality_isValid = ::OpenAPI::fromJsonValue(m_seasonality, json[QString("seasonality")]);
    m_seasonality_isSet = !json[QString("seasonality")].isNull() && m_seasonality_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_styles_isValid = ::OpenAPI::fromJsonValue(m_styles, json[QString("styles")]);
    m_styles_isSet = !json[QString("styles")].isNull() && m_styles_isValid;

    m_unlocked_isValid = ::OpenAPI::fromJsonValue(m_unlocked, json[QString("unlocked")]);
    m_unlocked_isSet = !json[QString("unlocked")].isNull() && m_unlocked_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_variation_total_isValid = ::OpenAPI::fromJsonValue(m_variation_total, json[QString("variation_total")]);
    m_variation_total_isSet = !json[QString("variation_total")].isNull() && m_variation_total_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;

    m_version_added_isValid = ::OpenAPI::fromJsonValue(m_version_added, json[QString("version_added")]);
    m_version_added_isSet = !json[QString("version_added")].isNull() && m_version_added_isValid;

    m_vill_equip_isValid = ::OpenAPI::fromJsonValue(m_vill_equip, json[QString("vill_equip")]);
    m_vill_equip_isSet = !json[QString("vill_equip")].isNull() && m_vill_equip_isValid;
}

QString OAINHClothing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINHClothing::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.size() > 0) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_buy.size() > 0) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_label_themes.size() > 0) {
        obj.insert(QString("label_themes"), ::OpenAPI::toJsonValue(m_label_themes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_seasonality_isSet) {
        obj.insert(QString("seasonality"), ::OpenAPI::toJsonValue(m_seasonality));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_styles.size() > 0) {
        obj.insert(QString("styles"), ::OpenAPI::toJsonValue(m_styles));
    }
    if (m_unlocked_isSet) {
        obj.insert(QString("unlocked"), ::OpenAPI::toJsonValue(m_unlocked));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_variation_total_isSet) {
        obj.insert(QString("variation_total"), ::OpenAPI::toJsonValue(m_variation_total));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    if (m_version_added_isSet) {
        obj.insert(QString("version_added"), ::OpenAPI::toJsonValue(m_version_added));
    }
    if (m_vill_equip_isSet) {
        obj.insert(QString("vill_equip"), ::OpenAPI::toJsonValue(m_vill_equip));
    }
    return obj;
}

QList<OAINHClothing_availability_inner> OAINHClothing::getAvailability() const {
    return m_availability;
}
void OAINHClothing::setAvailability(const QList<OAINHClothing_availability_inner> &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAINHClothing::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAINHClothing::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAINHClothing_buy_inner> OAINHClothing::getBuy() const {
    return m_buy;
}
void OAINHClothing::setBuy(const QList<OAINHClothing_buy_inner> &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAINHClothing::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAINHClothing::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAINHClothing::getCategory() const {
    return m_category;
}
void OAINHClothing::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINHClothing::is_category_Set() const{
    return m_category_isSet;
}

bool OAINHClothing::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAINHClothing::getLabelThemes() const {
    return m_label_themes;
}
void OAINHClothing::setLabelThemes(const QList<QString> &label_themes) {
    m_label_themes = label_themes;
    m_label_themes_isSet = true;
}

bool OAINHClothing::is_label_themes_Set() const{
    return m_label_themes_isSet;
}

bool OAINHClothing::is_label_themes_Valid() const{
    return m_label_themes_isValid;
}

QString OAINHClothing::getName() const {
    return m_name;
}
void OAINHClothing::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINHClothing::is_name_Set() const{
    return m_name_isSet;
}

bool OAINHClothing::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINHClothing::getNotes() const {
    return m_notes;
}
void OAINHClothing::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINHClothing::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINHClothing::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAINHClothing::getSeasonality() const {
    return m_seasonality;
}
void OAINHClothing::setSeasonality(const QString &seasonality) {
    m_seasonality = seasonality;
    m_seasonality_isSet = true;
}

bool OAINHClothing::is_seasonality_Set() const{
    return m_seasonality_isSet;
}

bool OAINHClothing::is_seasonality_Valid() const{
    return m_seasonality_isValid;
}

qint32 OAINHClothing::getSell() const {
    return m_sell;
}
void OAINHClothing::setSell(const qint32 &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAINHClothing::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAINHClothing::is_sell_Valid() const{
    return m_sell_isValid;
}

QList<QString> OAINHClothing::getStyles() const {
    return m_styles;
}
void OAINHClothing::setStyles(const QList<QString> &styles) {
    m_styles = styles;
    m_styles_isSet = true;
}

bool OAINHClothing::is_styles_Set() const{
    return m_styles_isSet;
}

bool OAINHClothing::is_styles_Valid() const{
    return m_styles_isValid;
}

bool OAINHClothing::isUnlocked() const {
    return m_unlocked;
}
void OAINHClothing::setUnlocked(const bool &unlocked) {
    m_unlocked = unlocked;
    m_unlocked_isSet = true;
}

bool OAINHClothing::is_unlocked_Set() const{
    return m_unlocked_isSet;
}

bool OAINHClothing::is_unlocked_Valid() const{
    return m_unlocked_isValid;
}

QString OAINHClothing::getUrl() const {
    return m_url;
}
void OAINHClothing::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINHClothing::is_url_Set() const{
    return m_url_isSet;
}

bool OAINHClothing::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAINHClothing::getVariationTotal() const {
    return m_variation_total;
}
void OAINHClothing::setVariationTotal(const qint32 &variation_total) {
    m_variation_total = variation_total;
    m_variation_total_isSet = true;
}

bool OAINHClothing::is_variation_total_Set() const{
    return m_variation_total_isSet;
}

bool OAINHClothing::is_variation_total_Valid() const{
    return m_variation_total_isValid;
}

QList<OAINHClothing_variations_inner> OAINHClothing::getVariations() const {
    return m_variations;
}
void OAINHClothing::setVariations(const QList<OAINHClothing_variations_inner> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAINHClothing::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAINHClothing::is_variations_Valid() const{
    return m_variations_isValid;
}

QString OAINHClothing::getVersionAdded() const {
    return m_version_added;
}
void OAINHClothing::setVersionAdded(const QString &version_added) {
    m_version_added = version_added;
    m_version_added_isSet = true;
}

bool OAINHClothing::is_version_added_Set() const{
    return m_version_added_isSet;
}

bool OAINHClothing::is_version_added_Valid() const{
    return m_version_added_isValid;
}

bool OAINHClothing::isVillEquip() const {
    return m_vill_equip;
}
void OAINHClothing::setVillEquip(const bool &vill_equip) {
    m_vill_equip = vill_equip;
    m_vill_equip_isSet = true;
}

bool OAINHClothing::is_vill_equip_Set() const{
    return m_vill_equip_isSet;
}

bool OAINHClothing::is_vill_equip_Valid() const{
    return m_vill_equip_isValid;
}

bool OAINHClothing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_styles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vill_equip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINHClothing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
