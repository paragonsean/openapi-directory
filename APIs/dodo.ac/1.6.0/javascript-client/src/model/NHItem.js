/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHClothingAvailabilityInner from './NHClothingAvailabilityInner';
import NHClothingBuyInner from './NHClothingBuyInner';

/**
 * The NHItem model module.
 * @module model/NHItem
 * @version 1.6.0
 */
class NHItem {
    /**
     * Constructs a new <code>NHItem</code>.
     * @alias module:model/NHItem
     */
    constructor() { 
        
        NHItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHItem} obj Optional instance to populate.
     * @return {module:model/NHItem} The populated <code>NHItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHItem();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], [NHClothingAvailabilityInner]);
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], [NHClothingBuyInner]);
            }
            if (data.hasOwnProperty('edible')) {
                obj['edible'] = ApiClient.convertToType(data['edible'], 'Boolean');
            }
            if (data.hasOwnProperty('hha_base')) {
                obj['hha_base'] = ApiClient.convertToType(data['hha_base'], 'Number');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('is_fence')) {
                obj['is_fence'] = ApiClient.convertToType(data['is_fence'], 'Boolean');
            }
            if (data.hasOwnProperty('material_name_sort')) {
                obj['material_name_sort'] = ApiClient.convertToType(data['material_name_sort'], 'Number');
            }
            if (data.hasOwnProperty('material_seasonality')) {
                obj['material_seasonality'] = ApiClient.convertToType(data['material_seasonality'], 'String');
            }
            if (data.hasOwnProperty('material_seasonality_sort')) {
                obj['material_seasonality_sort'] = ApiClient.convertToType(data['material_seasonality_sort'], 'Number');
            }
            if (data.hasOwnProperty('material_sort')) {
                obj['material_sort'] = ApiClient.convertToType(data['material_sort'], 'Number');
            }
            if (data.hasOwnProperty('material_type')) {
                obj['material_type'] = ApiClient.convertToType(data['material_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('plant_type')) {
                obj['plant_type'] = ApiClient.convertToType(data['plant_type'], 'String');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'Number');
            }
            if (data.hasOwnProperty('stack')) {
                obj['stack'] = ApiClient.convertToType(data['stack'], 'Number');
            }
            if (data.hasOwnProperty('unlocked')) {
                obj['unlocked'] = ApiClient.convertToType(data['unlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version_added')) {
                obj['version_added'] = ApiClient.convertToType(data['version_added'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHItem</code>.
     */
    static validateJSON(data) {
        if (data['availability']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability'])) {
                throw new Error("Expected the field `availability` to be an array in the JSON data but got " + data['availability']);
            }
            // validate the optional field `availability` (array)
            for (const item of data['availability']) {
                NHClothingAvailabilityInner.validateJSON(item);
            };
        }
        if (data['buy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buy'])) {
                throw new Error("Expected the field `buy` to be an array in the JSON data but got " + data['buy']);
            }
            // validate the optional field `buy` (array)
            for (const item of data['buy']) {
                NHClothingBuyInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['material_seasonality'] && !(typeof data['material_seasonality'] === 'string' || data['material_seasonality'] instanceof String)) {
            throw new Error("Expected the field `material_seasonality` to be a primitive type in the JSON string but got " + data['material_seasonality']);
        }
        // ensure the json data is a string
        if (data['material_type'] && !(typeof data['material_type'] === 'string' || data['material_type'] instanceof String)) {
            throw new Error("Expected the field `material_type` to be a primitive type in the JSON string but got " + data['material_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['plant_type'] && !(typeof data['plant_type'] === 'string' || data['plant_type'] instanceof String)) {
            throw new Error("Expected the field `plant_type` to be a primitive type in the JSON string but got " + data['plant_type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['version_added'] && !(typeof data['version_added'] === 'string' || data['version_added'] instanceof String)) {
            throw new Error("Expected the field `version_added` to be a primitive type in the JSON string but got " + data['version_added']);
        }

        return true;
    }


}



/**
 * Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
 * @member {Array.<module:model/NHClothingAvailabilityInner>} availability
 */
NHItem.prototype['availability'] = undefined;

/**
 * An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
 * @member {Array.<module:model/NHClothingBuyInner>} buy
 */
NHItem.prototype['buy'] = undefined;

/**
 * Whether the item is edible or not.
 * @member {Boolean} edible
 */
NHItem.prototype['edible'] = undefined;

/**
 * The base value that the item provides to a player's Happy Home Academy score when placed in their home.
 * @member {Number} hha_base
 */
NHItem.prototype['hha_base'] = undefined;

/**
 * Image of the interior.
 * @member {String} image_url
 */
NHItem.prototype['image_url'] = undefined;

/**
 * Whether or not the item is a fence or not.
 * @member {Boolean} is_fence
 */
NHItem.prototype['is_fence'] = undefined;

/**
 * (WIP)
 * @member {Number} material_name_sort
 */
NHItem.prototype['material_name_sort'] = undefined;

/**
 * (WIP)
 * @member {String} material_seasonality
 */
NHItem.prototype['material_seasonality'] = undefined;

/**
 * (WIP)
 * @member {Number} material_seasonality_sort
 */
NHItem.prototype['material_seasonality_sort'] = undefined;

/**
 * (WIP)
 * @member {Number} material_sort
 */
NHItem.prototype['material_sort'] = undefined;

/**
 * (WIP)
 * @member {module:model/NHItem.MaterialTypeEnum} material_type
 */
NHItem.prototype['material_type'] = undefined;

/**
 * The name of the item.
 * @member {String} name
 */
NHItem.prototype['name'] = undefined;

/**
 * Any additional miscellaneous information about the item, such as a name change from a past update.
 * @member {String} notes
 */
NHItem.prototype['notes'] = undefined;

/**
 * (WIP)
 * @member {module:model/NHItem.PlantTypeEnum} plant_type
 */
NHItem.prototype['plant_type'] = undefined;

/**
 * The number of bells the item can be sold to Nook's store for.
 * @member {Number} sell
 */
NHItem.prototype['sell'] = undefined;

/**
 * How much the item can stack up to in a single inventory slot.
 * @member {Number} stack
 */
NHItem.prototype['stack'] = undefined;

/**
 * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
 * @member {Boolean} unlocked
 */
NHItem.prototype['unlocked'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHItem.prototype['url'] = undefined;

/**
 * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".
 * @member {String} version_added
 */
NHItem.prototype['version_added'] = undefined;





/**
 * Allowed values for the <code>material_type</code> property.
 * @enum {String}
 * @readonly
 */
NHItem['MaterialTypeEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "Bamboo"
     * @const
     */
    "Bamboo": "Bamboo",

    /**
     * value: "Mushroom"
     * @const
     */
    "Mushroom": "Mushroom",

    /**
     * value: "Trash"
     * @const
     */
    "Trash": "Trash",

    /**
     * value: "Wood"
     * @const
     */
    "Wood": "Wood",

    /**
     * value: "Ore"
     * @const
     */
    "Ore": "Ore",

    /**
     * value: "Snowflake"
     * @const
     */
    "Snowflake": "Snowflake",

    /**
     * value: "Tree"
     * @const
     */
    "Tree": "Tree",

    /**
     * value: "Ornament"
     * @const
     */
    "Ornament": "Ornament",

    /**
     * value: "Fruit"
     * @const
     */
    "Fruit": "Fruit",

    /**
     * value: "Underwater"
     * @const
     */
    "Underwater": "Underwater",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Leaf"
     * @const
     */
    "Leaf": "Leaf",

    /**
     * value: "Shell"
     * @const
     */
    "Shell": "Shell",

    /**
     * value: "Flower"
     * @const
     */
    "Flower": "Flower",

    /**
     * value: "Star Fragment"
     * @const
     */
    "Star Fragment": "Star Fragment",

    /**
     * value: "Feather"
     * @const
     */
    "Feather": "Feather",

    /**
     * value: "Egg"
     * @const
     */
    "Egg": "Egg",

    /**
     * value: "Plant"
     * @const
     */
    "Plant": "Plant"
};


/**
 * Allowed values for the <code>plant_type</code> property.
 * @enum {String}
 * @readonly
 */
NHItem['PlantTypeEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "Pumpkin"
     * @const
     */
    "Pumpkin": "Pumpkin",

    /**
     * value: "Flower"
     * @const
     */
    "Flower": "Flower",

    /**
     * value: "Bush"
     * @const
     */
    "Bush": "Bush",

    /**
     * value: "Tree"
     * @const
     */
    "Tree": "Tree"
};



export default NHItem;

