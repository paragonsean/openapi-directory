/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHClothingAvailabilityInner from './NHClothingAvailabilityInner';
import NHClothingBuyInner from './NHClothingBuyInner';
import NHClothingVariationsInner from './NHClothingVariationsInner';

/**
 * The NHPhoto model module.
 * @module model/NHPhoto
 * @version 1.6.0
 */
class NHPhoto {
    /**
     * Constructs a new <code>NHPhoto</code>.
     * @alias module:model/NHPhoto
     */
    constructor() { 
        
        NHPhoto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHPhoto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHPhoto} obj Optional instance to populate.
     * @return {module:model/NHPhoto} The populated <code>NHPhoto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHPhoto();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], [NHClothingAvailabilityInner]);
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], [NHClothingBuyInner]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('custom_body_part')) {
                obj['custom_body_part'] = ApiClient.convertToType(data['custom_body_part'], 'String');
            }
            if (data.hasOwnProperty('custom_kits')) {
                obj['custom_kits'] = ApiClient.convertToType(data['custom_kits'], 'Number');
            }
            if (data.hasOwnProperty('customizable')) {
                obj['customizable'] = ApiClient.convertToType(data['customizable'], 'Boolean');
            }
            if (data.hasOwnProperty('grid_length')) {
                obj['grid_length'] = ApiClient.convertToType(data['grid_length'], 'Number');
            }
            if (data.hasOwnProperty('grid_width')) {
                obj['grid_width'] = ApiClient.convertToType(data['grid_width'], 'Number');
            }
            if (data.hasOwnProperty('interactable')) {
                obj['interactable'] = ApiClient.convertToType(data['interactable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'Number');
            }
            if (data.hasOwnProperty('unlocked')) {
                obj['unlocked'] = ApiClient.convertToType(data['unlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('variations')) {
                obj['variations'] = ApiClient.convertToType(data['variations'], [NHClothingVariationsInner]);
            }
            if (data.hasOwnProperty('version_added')) {
                obj['version_added'] = ApiClient.convertToType(data['version_added'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHPhoto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHPhoto</code>.
     */
    static validateJSON(data) {
        if (data['availability']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability'])) {
                throw new Error("Expected the field `availability` to be an array in the JSON data but got " + data['availability']);
            }
            // validate the optional field `availability` (array)
            for (const item of data['availability']) {
                NHClothingAvailabilityInner.validateJSON(item);
            };
        }
        if (data['buy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buy'])) {
                throw new Error("Expected the field `buy` to be an array in the JSON data but got " + data['buy']);
            }
            // validate the optional field `buy` (array)
            for (const item of data['buy']) {
                NHClothingBuyInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['custom_body_part'] && !(typeof data['custom_body_part'] === 'string' || data['custom_body_part'] instanceof String)) {
            throw new Error("Expected the field `custom_body_part` to be a primitive type in the JSON string but got " + data['custom_body_part']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['variations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variations'])) {
                throw new Error("Expected the field `variations` to be an array in the JSON data but got " + data['variations']);
            }
            // validate the optional field `variations` (array)
            for (const item of data['variations']) {
                NHClothingVariationsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version_added'] && !(typeof data['version_added'] === 'string' || data['version_added'] instanceof String)) {
            throw new Error("Expected the field `version_added` to be a primitive type in the JSON string but got " + data['version_added']);
        }

        return true;
    }


}



/**
 * Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
 * @member {Array.<module:model/NHClothingAvailabilityInner>} availability
 */
NHPhoto.prototype['availability'] = undefined;

/**
 * An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
 * @member {Array.<module:model/NHClothingBuyInner>} buy
 */
NHPhoto.prototype['buy'] = undefined;

/**
 * The category of item as shown in the player's inventory.
 * @member {module:model/NHPhoto.CategoryEnum} category
 */
NHPhoto.prototype['category'] = undefined;

/**
 * If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.
 * @member {String} custom_body_part
 */
NHPhoto.prototype['custom_body_part'] = undefined;

/**
 * The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
 * @member {Number} custom_kits
 */
NHPhoto.prototype['custom_kits'] = undefined;

/**
 * Whether or not the item is customizable via a crafting table.
 * @member {Boolean} customizable
 */
NHPhoto.prototype['customizable'] = undefined;

/**
 * The number of lengthwise grid spaces this item takes up.
 * @member {Number} grid_length
 */
NHPhoto.prototype['grid_length'] = undefined;

/**
 * The number of widthwise grid spaces this item takes up.
 * @member {Number} grid_width
 */
NHPhoto.prototype['grid_width'] = undefined;

/**
 * Whether or not the item can be interacted with. This field is true for all photos and false for all posters.
 * @member {Boolean} interactable
 */
NHPhoto.prototype['interactable'] = undefined;

/**
 * The name of the photo.
 * @member {String} name
 */
NHPhoto.prototype['name'] = undefined;

/**
 * The number of Bells the photo can be sold to the store for.
 * @member {Number} sell
 */
NHPhoto.prototype['sell'] = undefined;

/**
 * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
 * @member {Boolean} unlocked
 */
NHPhoto.prototype['unlocked'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHPhoto.prototype['url'] = undefined;

/**
 * An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.
 * @member {Array.<module:model/NHClothingVariationsInner>} variations
 */
NHPhoto.prototype['variations'] = undefined;

/**
 * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".
 * @member {String} version_added
 */
NHPhoto.prototype['version_added'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
NHPhoto['CategoryEnum'] = {

    /**
     * value: "Photos"
     * @const
     */
    "Photos": "Photos",

    /**
     * value: "Posters"
     * @const
     */
    "Posters": "Posters"
};



export default NHPhoto;

