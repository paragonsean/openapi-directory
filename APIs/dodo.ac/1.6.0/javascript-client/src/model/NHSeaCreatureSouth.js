/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHBugNorthAvailabilityArrayInner from './NHBugNorthAvailabilityArrayInner';
import NHSeaCreatureNorthTimesByMonth from './NHSeaCreatureNorthTimesByMonth';

/**
 * The NHSeaCreatureSouth model module.
 * @module model/NHSeaCreatureSouth
 * @version 1.6.0
 */
class NHSeaCreatureSouth {
    /**
     * Constructs a new <code>NHSeaCreatureSouth</code>.
     * When you can catch the sea creature in the Southern hemisphere.
     * @alias module:model/NHSeaCreatureSouth
     */
    constructor() { 
        
        NHSeaCreatureSouth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHSeaCreatureSouth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHSeaCreatureSouth} obj Optional instance to populate.
     * @return {module:model/NHSeaCreatureSouth} The populated <code>NHSeaCreatureSouth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHSeaCreatureSouth();

            if (data.hasOwnProperty('availability_array')) {
                obj['availability_array'] = ApiClient.convertToType(data['availability_array'], [NHBugNorthAvailabilityArrayInner]);
            }
            if (data.hasOwnProperty('months')) {
                obj['months'] = ApiClient.convertToType(data['months'], 'String');
            }
            if (data.hasOwnProperty('months_array')) {
                obj['months_array'] = ApiClient.convertToType(data['months_array'], ['Number']);
            }
            if (data.hasOwnProperty('times_by_month')) {
                obj['times_by_month'] = NHSeaCreatureNorthTimesByMonth.constructFromObject(data['times_by_month']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHSeaCreatureSouth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHSeaCreatureSouth</code>.
     */
    static validateJSON(data) {
        if (data['availability_array']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability_array'])) {
                throw new Error("Expected the field `availability_array` to be an array in the JSON data but got " + data['availability_array']);
            }
            // validate the optional field `availability_array` (array)
            for (const item of data['availability_array']) {
                NHBugNorthAvailabilityArrayInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['months'] && !(typeof data['months'] === 'string' || data['months'] instanceof String)) {
            throw new Error("Expected the field `months` to be a primitive type in the JSON string but got " + data['months']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['months_array'])) {
            throw new Error("Expected the field `months_array` to be an array in the JSON data but got " + data['months_array']);
        }
        // validate the optional field `times_by_month`
        if (data['times_by_month']) { // data not null
          NHSeaCreatureNorthTimesByMonth.validateJSON(data['times_by_month']);
        }

        return true;
    }


}



/**
 * An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
 * @member {Array.<module:model/NHBugNorthAvailabilityArrayInner>} availability_array
 */
NHSeaCreatureSouth.prototype['availability_array'] = undefined;

/**
 * The months the sea creature is available for in the Southern hemisphere. If all year, value will be `\"All year\"`.
 * @member {String} months
 */
NHSeaCreatureSouth.prototype['months'] = undefined;

/**
 * An array of integers representing the months the sea creature is available in the Southern hemisphere.
 * @member {Array.<Number>} months_array
 */
NHSeaCreatureSouth.prototype['months_array'] = undefined;

/**
 * @member {module:model/NHSeaCreatureNorthTimesByMonth} times_by_month
 */
NHSeaCreatureSouth.prototype['times_by_month'] = undefined;






export default NHSeaCreatureSouth;

