/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHArtworkFakeInfo from './NHArtworkFakeInfo';
import NHArtworkRealInfo from './NHArtworkRealInfo';

/**
 * The NHArtwork model module.
 * @module model/NHArtwork
 * @version 1.6.0
 */
class NHArtwork {
    /**
     * Constructs a new <code>NHArtwork</code>.
     * @alias module:model/NHArtwork
     */
    constructor() { 
        
        NHArtwork.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHArtwork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHArtwork} obj Optional instance to populate.
     * @return {module:model/NHArtwork} The populated <code>NHArtwork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHArtwork();

            if (data.hasOwnProperty('art_name')) {
                obj['art_name'] = ApiClient.convertToType(data['art_name'], 'String');
            }
            if (data.hasOwnProperty('art_style')) {
                obj['art_style'] = ApiClient.convertToType(data['art_style'], 'String');
            }
            if (data.hasOwnProperty('art_type')) {
                obj['art_type'] = ApiClient.convertToType(data['art_type'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], 'Number');
            }
            if (data.hasOwnProperty('fake_info')) {
                obj['fake_info'] = NHArtworkFakeInfo.constructFromObject(data['fake_info']);
            }
            if (data.hasOwnProperty('has_fake')) {
                obj['has_fake'] = ApiClient.convertToType(data['has_fake'], 'Boolean');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('real_info')) {
                obj['real_info'] = NHArtworkRealInfo.constructFromObject(data['real_info']);
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHArtwork</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHArtwork</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['art_name'] && !(typeof data['art_name'] === 'string' || data['art_name'] instanceof String)) {
            throw new Error("Expected the field `art_name` to be a primitive type in the JSON string but got " + data['art_name']);
        }
        // ensure the json data is a string
        if (data['art_style'] && !(typeof data['art_style'] === 'string' || data['art_style'] instanceof String)) {
            throw new Error("Expected the field `art_style` to be a primitive type in the JSON string but got " + data['art_style']);
        }
        // ensure the json data is a string
        if (data['art_type'] && !(typeof data['art_type'] === 'string' || data['art_type'] instanceof String)) {
            throw new Error("Expected the field `art_type` to be a primitive type in the JSON string but got " + data['art_type']);
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        // validate the optional field `fake_info`
        if (data['fake_info']) { // data not null
          NHArtworkFakeInfo.validateJSON(data['fake_info']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `real_info`
        if (data['real_info']) { // data not null
          NHArtworkRealInfo.validateJSON(data['real_info']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['year'] && !(typeof data['year'] === 'string' || data['year'] instanceof String)) {
            throw new Error("Expected the field `year` to be a primitive type in the JSON string but got " + data['year']);
        }

        return true;
    }


}



/**
 * The name of the real-life analog to the artwork.
 * @member {String} art_name
 */
NHArtwork.prototype['art_name'] = undefined;

/**
 * The art style of the artwork.
 * @member {String} art_style
 */
NHArtwork.prototype['art_style'] = undefined;

/**
 * The type of artwork (either a painting or statue).
 * @member {module:model/NHArtwork.ArtTypeEnum} art_type
 */
NHArtwork.prototype['art_type'] = undefined;

/**
 * The author of the real-life analog to the artwork.
 * @member {String} author
 */
NHArtwork.prototype['author'] = undefined;

/**
 * The availability of the artwork.
 * @member {String} availability
 */
NHArtwork.prototype['availability'] = undefined;

/**
 * The number of Bells the artwork may be purchased for.
 * @member {Number} buy
 */
NHArtwork.prototype['buy'] = undefined;

/**
 * @member {module:model/NHArtworkFakeInfo} fake_info
 */
NHArtwork.prototype['fake_info'] = undefined;

/**
 * Whether the artwork has a fake or not.
 * @member {Boolean} has_fake
 */
NHArtwork.prototype['has_fake'] = undefined;

/**
 * The length of the artwork.
 * @member {Number} length
 */
NHArtwork.prototype['length'] = undefined;

/**
 * Name of the artwork.
 * @member {String} name
 */
NHArtwork.prototype['name'] = undefined;

/**
 * @member {module:model/NHArtworkRealInfo} real_info
 */
NHArtwork.prototype['real_info'] = undefined;

/**
 * The number of Bells the artwork can be sold to Nook's store for, when it is genuine.
 * @member {Number} sell
 */
NHArtwork.prototype['sell'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHArtwork.prototype['url'] = undefined;

/**
 * The width of the artwork.
 * @member {Number} width
 */
NHArtwork.prototype['width'] = undefined;

/**
 * The year that the real-life analog was made. May be an exact year, an estimate (\"circa\"), or a range.
 * @member {String} year
 */
NHArtwork.prototype['year'] = undefined;





/**
 * Allowed values for the <code>art_type</code> property.
 * @enum {String}
 * @readonly
 */
NHArtwork['ArtTypeEnum'] = {

    /**
     * value: "Painting"
     * @const
     */
    "Painting": "Painting",

    /**
     * value: "Statue"
     * @const
     */
    "Statue": "Statue"
};



export default NHArtwork;

