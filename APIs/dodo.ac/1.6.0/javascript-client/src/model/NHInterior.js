/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHClothingAvailabilityInner from './NHClothingAvailabilityInner';
import NHClothingBuyInner from './NHClothingBuyInner';

/**
 * The NHInterior model module.
 * @module model/NHInterior
 * @version 1.6.0
 */
class NHInterior {
    /**
     * Constructs a new <code>NHInterior</code>.
     * @alias module:model/NHInterior
     */
    constructor() { 
        
        NHInterior.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHInterior</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHInterior} obj Optional instance to populate.
     * @return {module:model/NHInterior} The populated <code>NHInterior</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHInterior();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], [NHClothingAvailabilityInner]);
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], [NHClothingBuyInner]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], 'String');
            }
            if (data.hasOwnProperty('grid_length')) {
                obj['grid_length'] = ApiClient.convertToType(data['grid_length'], 'Number');
            }
            if (data.hasOwnProperty('grid_width')) {
                obj['grid_width'] = ApiClient.convertToType(data['grid_width'], 'Number');
            }
            if (data.hasOwnProperty('hha_base')) {
                obj['hha_base'] = ApiClient.convertToType(data['hha_base'], 'Number');
            }
            if (data.hasOwnProperty('hha_category')) {
                obj['hha_category'] = ApiClient.convertToType(data['hha_category'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('item_series')) {
                obj['item_series'] = ApiClient.convertToType(data['item_series'], 'String');
            }
            if (data.hasOwnProperty('item_set')) {
                obj['item_set'] = ApiClient.convertToType(data['item_set'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'Number');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], ['String']);
            }
            if (data.hasOwnProperty('unlocked')) {
                obj['unlocked'] = ApiClient.convertToType(data['unlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version_added')) {
                obj['version_added'] = ApiClient.convertToType(data['version_added'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHInterior</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHInterior</code>.
     */
    static validateJSON(data) {
        if (data['availability']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability'])) {
                throw new Error("Expected the field `availability` to be an array in the JSON data but got " + data['availability']);
            }
            // validate the optional field `availability` (array)
            for (const item of data['availability']) {
                NHClothingAvailabilityInner.validateJSON(item);
            };
        }
        if (data['buy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buy'])) {
                throw new Error("Expected the field `buy` to be an array in the JSON data but got " + data['buy']);
            }
            // validate the optional field `buy` (array)
            for (const item of data['buy']) {
                NHClothingBuyInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['colors'] && !(typeof data['colors'] === 'string' || data['colors'] instanceof String)) {
            throw new Error("Expected the field `colors` to be a primitive type in the JSON string but got " + data['colors']);
        }
        // ensure the json data is a string
        if (data['hha_category'] && !(typeof data['hha_category'] === 'string' || data['hha_category'] instanceof String)) {
            throw new Error("Expected the field `hha_category` to be a primitive type in the JSON string but got " + data['hha_category']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['item_series'] && !(typeof data['item_series'] === 'string' || data['item_series'] instanceof String)) {
            throw new Error("Expected the field `item_series` to be a primitive type in the JSON string but got " + data['item_series']);
        }
        // ensure the json data is a string
        if (data['item_set'] && !(typeof data['item_set'] === 'string' || data['item_set'] instanceof String)) {
            throw new Error("Expected the field `item_set` to be a primitive type in the JSON string but got " + data['item_set']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['themes'])) {
            throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['version_added'] && !(typeof data['version_added'] === 'string' || data['version_added'] instanceof String)) {
            throw new Error("Expected the field `version_added` to be a primitive type in the JSON string but got " + data['version_added']);
        }

        return true;
    }


}



/**
 * Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
 * @member {Array.<module:model/NHClothingAvailabilityInner>} availability
 */
NHInterior.prototype['availability'] = undefined;

/**
 * An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
 * @member {Array.<module:model/NHClothingBuyInner>} buy
 */
NHInterior.prototype['buy'] = undefined;

/**
 * The category of item as shown in the player's inventory.
 * @member {module:model/NHInterior.CategoryEnum} category
 */
NHInterior.prototype['category'] = undefined;

/**
 * (WIP)
 * @member {module:model/NHInterior.ColorsEnum} colors
 */
NHInterior.prototype['colors'] = undefined;

/**
 * The number of lengthwise grid spaces this item takes up.
 * @member {Number} grid_length
 */
NHInterior.prototype['grid_length'] = undefined;

/**
 * The number of widthwise grid spaces this item takes up.
 * @member {Number} grid_width
 */
NHInterior.prototype['grid_width'] = undefined;

/**
 * The base value that the item provides to a player's Happy Home Academy score when placed in their home.
 * @member {Number} hha_base
 */
NHInterior.prototype['hha_base'] = undefined;

/**
 * The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
 * @member {String} hha_category
 */
NHInterior.prototype['hha_category'] = undefined;

/**
 * Image of the interior.
 * @member {String} image_url
 */
NHInterior.prototype['image_url'] = undefined;

/**
 * The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
 * @member {String} item_series
 */
NHInterior.prototype['item_series'] = undefined;

/**
 * The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
 * @member {String} item_set
 */
NHInterior.prototype['item_set'] = undefined;

/**
 * The name of the interior.
 * @member {String} name
 */
NHInterior.prototype['name'] = undefined;

/**
 * Any additional miscellaneous information about the item, such as a name change from a past update.
 * @member {String} notes
 */
NHInterior.prototype['notes'] = undefined;

/**
 * The number of Bells the interior can be sold to Nook's store for.
 * @member {Number} sell
 */
NHInterior.prototype['sell'] = undefined;

/**
 * The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.
 * @member {String} tag
 */
NHInterior.prototype['tag'] = undefined;

/**
 * A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
 * @member {Array.<String>} themes
 */
NHInterior.prototype['themes'] = undefined;

/**
 * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
 * @member {Boolean} unlocked
 */
NHInterior.prototype['unlocked'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHInterior.prototype['url'] = undefined;

/**
 * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".
 * @member {String} version_added
 */
NHInterior.prototype['version_added'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
NHInterior['CategoryEnum'] = {

    /**
     * value: "Floors"
     * @const
     */
    "Floors": "Floors",

    /**
     * value: "Wallpaper"
     * @const
     */
    "Wallpaper": "Wallpaper",

    /**
     * value: "Rugs"
     * @const
     */
    "Rugs": "Rugs"
};


/**
 * Allowed values for the <code>colors</code> property.
 * @enum {String}
 * @readonly
 */
NHInterior['ColorsEnum'] = {

    /**
     * value: "Aqua"
     * @const
     */
    "Aqua": "Aqua",

    /**
     * value: "Beige"
     * @const
     */
    "Beige": "Beige",

    /**
     * value: "Black"
     * @const
     */
    "Black": "Black",

    /**
     * value: "Blue"
     * @const
     */
    "Blue": "Blue",

    /**
     * value: "Brown"
     * @const
     */
    "Brown": "Brown",

    /**
     * value: "Colorful"
     * @const
     */
    "Colorful": "Colorful",

    /**
     * value: "Gray"
     * @const
     */
    "Gray": "Gray",

    /**
     * value: "Green"
     * @const
     */
    "Green": "Green",

    /**
     * value: "Orange"
     * @const
     */
    "Orange": "Orange",

    /**
     * value: "Pink"
     * @const
     */
    "Pink": "Pink",

    /**
     * value: "Purple"
     * @const
     */
    "Purple": "Purple",

    /**
     * value: "Red"
     * @const
     */
    "Red": "Red",

    /**
     * value: "White"
     * @const
     */
    "White": "White",

    /**
     * value: "Yellow"
     * @const
     */
    "Yellow": "Yellow"
};



export default NHInterior;

