/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHClothingAvailabilityInner from './NHClothingAvailabilityInner';
import NHClothingBuyInner from './NHClothingBuyInner';
import NHClothingVariationsInner from './NHClothingVariationsInner';

/**
 * The NHClothing model module.
 * @module model/NHClothing
 * @version 1.6.0
 */
class NHClothing {
    /**
     * Constructs a new <code>NHClothing</code>.
     * @alias module:model/NHClothing
     */
    constructor() { 
        
        NHClothing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHClothing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHClothing} obj Optional instance to populate.
     * @return {module:model/NHClothing} The populated <code>NHClothing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHClothing();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], [NHClothingAvailabilityInner]);
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], [NHClothingBuyInner]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('label_themes')) {
                obj['label_themes'] = ApiClient.convertToType(data['label_themes'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('seasonality')) {
                obj['seasonality'] = ApiClient.convertToType(data['seasonality'], 'String');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'Number');
            }
            if (data.hasOwnProperty('styles')) {
                obj['styles'] = ApiClient.convertToType(data['styles'], ['String']);
            }
            if (data.hasOwnProperty('unlocked')) {
                obj['unlocked'] = ApiClient.convertToType(data['unlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('variation_total')) {
                obj['variation_total'] = ApiClient.convertToType(data['variation_total'], 'Number');
            }
            if (data.hasOwnProperty('variations')) {
                obj['variations'] = ApiClient.convertToType(data['variations'], [NHClothingVariationsInner]);
            }
            if (data.hasOwnProperty('version_added')) {
                obj['version_added'] = ApiClient.convertToType(data['version_added'], 'String');
            }
            if (data.hasOwnProperty('vill_equip')) {
                obj['vill_equip'] = ApiClient.convertToType(data['vill_equip'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHClothing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHClothing</code>.
     */
    static validateJSON(data) {
        if (data['availability']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability'])) {
                throw new Error("Expected the field `availability` to be an array in the JSON data but got " + data['availability']);
            }
            // validate the optional field `availability` (array)
            for (const item of data['availability']) {
                NHClothingAvailabilityInner.validateJSON(item);
            };
        }
        if (data['buy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buy'])) {
                throw new Error("Expected the field `buy` to be an array in the JSON data but got " + data['buy']);
            }
            // validate the optional field `buy` (array)
            for (const item of data['buy']) {
                NHClothingBuyInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['label_themes'])) {
            throw new Error("Expected the field `label_themes` to be an array in the JSON data but got " + data['label_themes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['seasonality'] && !(typeof data['seasonality'] === 'string' || data['seasonality'] instanceof String)) {
            throw new Error("Expected the field `seasonality` to be a primitive type in the JSON string but got " + data['seasonality']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['styles'])) {
            throw new Error("Expected the field `styles` to be an array in the JSON data but got " + data['styles']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['variations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variations'])) {
                throw new Error("Expected the field `variations` to be an array in the JSON data but got " + data['variations']);
            }
            // validate the optional field `variations` (array)
            for (const item of data['variations']) {
                NHClothingVariationsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version_added'] && !(typeof data['version_added'] === 'string' || data['version_added'] instanceof String)) {
            throw new Error("Expected the field `version_added` to be a primitive type in the JSON string but got " + data['version_added']);
        }

        return true;
    }


}



/**
 * Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
 * @member {Array.<module:model/NHClothingAvailabilityInner>} availability
 */
NHClothing.prototype['availability'] = undefined;

/**
 * An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
 * @member {Array.<module:model/NHClothingBuyInner>} buy
 */
NHClothing.prototype['buy'] = undefined;

/**
 * The category of item as shown in the player's inventory.
 * @member {module:model/NHClothing.CategoryEnum} category
 */
NHClothing.prototype['category'] = undefined;

/**
 * The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
 * @member {Array.<module:model/NHClothing.LabelThemesEnum>} label_themes
 */
NHClothing.prototype['label_themes'] = undefined;

/**
 * The name of the clothing.
 * @member {String} name
 */
NHClothing.prototype['name'] = undefined;

/**
 * Any additional miscellaneous information about the clothing, such as a name change from a past update.
 * @member {String} notes
 */
NHClothing.prototype['notes'] = undefined;

/**
 * The time of the year that the clothing is available.
 * @member {String} seasonality
 */
NHClothing.prototype['seasonality'] = undefined;

/**
 * The number of Bells the clothing can be sold to the store for.
 * @member {Number} sell
 */
NHClothing.prototype['sell'] = undefined;

/**
 * The clothing's style(s). Styles are used for gifting villagers.
 * @member {Array.<module:model/NHClothing.StylesEnum>} styles
 */
NHClothing.prototype['styles'] = undefined;

/**
 * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
 * @member {Boolean} unlocked
 */
NHClothing.prototype['unlocked'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHClothing.prototype['url'] = undefined;

/**
 * The total number of variations the clothing has, between 0 and 8.
 * @member {module:model/NHClothing.VariationTotalEnum} variation_total
 */
NHClothing.prototype['variation_total'] = undefined;

/**
 * An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.
 * @member {Array.<module:model/NHClothingVariationsInner>} variations
 */
NHClothing.prototype['variations'] = undefined;

/**
 * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".
 * @member {String} version_added
 */
NHClothing.prototype['version_added'] = undefined;

/**
 * Whether villagers may equip this item.
 * @member {Boolean} vill_equip
 */
NHClothing.prototype['vill_equip'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
NHClothing['CategoryEnum'] = {

    /**
     * value: "Tops"
     * @const
     */
    "Tops": "Tops",

    /**
     * value: "Bottoms"
     * @const
     */
    "Bottoms": "Bottoms",

    /**
     * value: "Dress-up"
     * @const
     */
    "Dress-up": "Dress-up",

    /**
     * value: "Headwear"
     * @const
     */
    "Headwear": "Headwear",

    /**
     * value: "Accessories"
     * @const
     */
    "Accessories": "Accessories",

    /**
     * value: "Socks"
     * @const
     */
    "Socks": "Socks",

    /**
     * value: "Shoes"
     * @const
     */
    "Shoes": "Shoes",

    /**
     * value: "Bags"
     * @const
     */
    "Bags": "Bags",

    /**
     * value: "Umbrellas"
     * @const
     */
    "Umbrellas": "Umbrellas"
};


/**
 * Allowed values for the <code>labelThemes</code> property.
 * @enum {String}
 * @readonly
 */
NHClothing['LabelThemesEnum'] = {

    /**
     * value: "Comfy"
     * @const
     */
    "Comfy": "Comfy",

    /**
     * value: "Everyday"
     * @const
     */
    "Everyday": "Everyday",

    /**
     * value: "Fairy tale"
     * @const
     */
    "Fairy tale": "Fairy tale",

    /**
     * value: "Formal"
     * @const
     */
    "Formal": "Formal",

    /**
     * value: "Goth"
     * @const
     */
    "Goth": "Goth",

    /**
     * value: "Outdoorsy"
     * @const
     */
    "Outdoorsy": "Outdoorsy",

    /**
     * value: "Party"
     * @const
     */
    "Party": "Party",

    /**
     * value: "Sporty"
     * @const
     */
    "Sporty": "Sporty",

    /**
     * value: "Theatrical"
     * @const
     */
    "Theatrical": "Theatrical",

    /**
     * value: "Vacation"
     * @const
     */
    "Vacation": "Vacation",

    /**
     * value: "Work"
     * @const
     */
    "Work": "Work"
};


/**
 * Allowed values for the <code>styles</code> property.
 * @enum {String}
 * @readonly
 */
NHClothing['StylesEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Cool"
     * @const
     */
    "Cool": "Cool",

    /**
     * value: "Cute"
     * @const
     */
    "Cute": "Cute",

    /**
     * value: "Elegant"
     * @const
     */
    "Elegant": "Elegant",

    /**
     * value: "Gorgeous"
     * @const
     */
    "Gorgeous": "Gorgeous",

    /**
     * value: "Simple"
     * @const
     */
    "Simple": "Simple"
};


/**
 * Allowed values for the <code>variation_total</code> property.
 * @enum {Number}
 * @readonly
 */
NHClothing['VariationTotalEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8
};



export default NHClothing;

