/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHBugNorth from './NHBugNorth';
import NHBugSouth from './NHBugSouth';

/**
 * The NHBug model module.
 * @module model/NHBug
 * @version 1.6.0
 */
class NHBug {
    /**
     * Constructs a new <code>NHBug</code>.
     * @alias module:model/NHBug
     */
    constructor() { 
        
        NHBug.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHBug</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHBug} obj Optional instance to populate.
     * @return {module:model/NHBug} The populated <code>NHBug</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHBug();

            if (data.hasOwnProperty('catchphrases')) {
                obj['catchphrases'] = ApiClient.convertToType(data['catchphrases'], ['String']);
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('north')) {
                obj['north'] = NHBugNorth.constructFromObject(data['north']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('rarity')) {
                obj['rarity'] = ApiClient.convertToType(data['rarity'], 'String');
            }
            if (data.hasOwnProperty('render_url')) {
                obj['render_url'] = ApiClient.convertToType(data['render_url'], 'String');
            }
            if (data.hasOwnProperty('sell_flick')) {
                obj['sell_flick'] = ApiClient.convertToType(data['sell_flick'], 'Number');
            }
            if (data.hasOwnProperty('sell_nook')) {
                obj['sell_nook'] = ApiClient.convertToType(data['sell_nook'], 'Number');
            }
            if (data.hasOwnProperty('south')) {
                obj['south'] = NHBugSouth.constructFromObject(data['south']);
            }
            if (data.hasOwnProperty('tank_length')) {
                obj['tank_length'] = ApiClient.convertToType(data['tank_length'], 'Number');
            }
            if (data.hasOwnProperty('tank_width')) {
                obj['tank_width'] = ApiClient.convertToType(data['tank_width'], 'Number');
            }
            if (data.hasOwnProperty('total_catch')) {
                obj['total_catch'] = ApiClient.convertToType(data['total_catch'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHBug</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHBug</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['catchphrases'])) {
            throw new Error("Expected the field `catchphrases` to be an array in the JSON data but got " + data['catchphrases']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `north`
        if (data['north']) { // data not null
          NHBugNorth.validateJSON(data['north']);
        }
        // ensure the json data is a string
        if (data['rarity'] && !(typeof data['rarity'] === 'string' || data['rarity'] instanceof String)) {
            throw new Error("Expected the field `rarity` to be a primitive type in the JSON string but got " + data['rarity']);
        }
        // ensure the json data is a string
        if (data['render_url'] && !(typeof data['render_url'] === 'string' || data['render_url'] instanceof String)) {
            throw new Error("Expected the field `render_url` to be a primitive type in the JSON string but got " + data['render_url']);
        }
        // validate the optional field `south`
        if (data['south']) { // data not null
          NHBugSouth.validateJSON(data['south']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.
 * @member {Array.<String>} catchphrases
 */
NHBug.prototype['catchphrases'] = undefined;

/**
 * Image of the bug.
 * @member {String} image_url
 */
NHBug.prototype['image_url'] = undefined;

/**
 * Short descriptor of where the bug can be found.
 * @member {String} location
 */
NHBug.prototype['location'] = undefined;

/**
 * Name of the bug.
 * @member {String} name
 */
NHBug.prototype['name'] = undefined;

/**
 * @member {module:model/NHBugNorth} north
 */
NHBug.prototype['north'] = undefined;

/**
 * In-game bug number, marking position in the Critterpedia.
 * @member {Number} number
 */
NHBug.prototype['number'] = undefined;

/**
 * How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
 * @member {String} rarity
 */
NHBug.prototype['rarity'] = undefined;

/**
 * Render of the bug.
 * @member {String} render_url
 */
NHBug.prototype['render_url'] = undefined;

/**
 * The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.
 * @member {Number} sell_flick
 */
NHBug.prototype['sell_flick'] = undefined;

/**
 * The number of Bells the bug can be sold to Nook's store for.
 * @member {Number} sell_nook
 */
NHBug.prototype['sell_nook'] = undefined;

/**
 * @member {module:model/NHBugSouth} south
 */
NHBug.prototype['south'] = undefined;

/**
 * The length of the tank when the bug is placed as a furniture item.
 * @member {Number} tank_length
 */
NHBug.prototype['tank_length'] = undefined;

/**
 * The width of the tank when the bug is placed as a furniture item.
 * @member {Number} tank_width
 */
NHBug.prototype['tank_width'] = undefined;

/**
 * The total number of bug the player has to have caught before this bug will start spawning.
 * @member {Number} total_catch
 */
NHBug.prototype['total_catch'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHBug.prototype['url'] = undefined;






export default NHBug;

