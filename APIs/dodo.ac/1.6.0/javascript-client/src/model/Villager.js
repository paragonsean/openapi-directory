/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VillagerNhDetails from './VillagerNhDetails';

/**
 * The Villager model module.
 * @module model/Villager
 * @version 1.6.0
 */
class Villager {
    /**
     * Constructs a new <code>Villager</code>.
     * @alias module:model/Villager
     */
    constructor() { 
        
        Villager.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Villager</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Villager} obj Optional instance to populate.
     * @return {module:model/Villager} The populated <code>Villager</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Villager();

            if (data.hasOwnProperty('alt_name')) {
                obj['alt_name'] = ApiClient.convertToType(data['alt_name'], 'String');
            }
            if (data.hasOwnProperty('appearances')) {
                obj['appearances'] = ApiClient.convertToType(data['appearances'], ['String']);
            }
            if (data.hasOwnProperty('birthday_day')) {
                obj['birthday_day'] = ApiClient.convertToType(data['birthday_day'], 'String');
            }
            if (data.hasOwnProperty('birthday_month')) {
                obj['birthday_month'] = ApiClient.convertToType(data['birthday_month'], 'String');
            }
            if (data.hasOwnProperty('clothing')) {
                obj['clothing'] = ApiClient.convertToType(data['clothing'], 'String');
            }
            if (data.hasOwnProperty('debut')) {
                obj['debut'] = ApiClient.convertToType(data['debut'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('islander')) {
                obj['islander'] = ApiClient.convertToType(data['islander'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nh_details')) {
                obj['nh_details'] = VillagerNhDetails.constructFromObject(data['nh_details']);
            }
            if (data.hasOwnProperty('personality')) {
                obj['personality'] = ApiClient.convertToType(data['personality'], 'String');
            }
            if (data.hasOwnProperty('phrase')) {
                obj['phrase'] = ApiClient.convertToType(data['phrase'], 'String');
            }
            if (data.hasOwnProperty('prev_phrases')) {
                obj['prev_phrases'] = ApiClient.convertToType(data['prev_phrases'], ['String']);
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], 'String');
            }
            if (data.hasOwnProperty('sign')) {
                obj['sign'] = ApiClient.convertToType(data['sign'], 'String');
            }
            if (data.hasOwnProperty('species')) {
                obj['species'] = ApiClient.convertToType(data['species'], 'String');
            }
            if (data.hasOwnProperty('text_color')) {
                obj['text_color'] = ApiClient.convertToType(data['text_color'], 'String');
            }
            if (data.hasOwnProperty('title_color')) {
                obj['title_color'] = ApiClient.convertToType(data['title_color'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Villager</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Villager</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alt_name'] && !(typeof data['alt_name'] === 'string' || data['alt_name'] instanceof String)) {
            throw new Error("Expected the field `alt_name` to be a primitive type in the JSON string but got " + data['alt_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['appearances'])) {
            throw new Error("Expected the field `appearances` to be an array in the JSON data but got " + data['appearances']);
        }
        // ensure the json data is a string
        if (data['birthday_day'] && !(typeof data['birthday_day'] === 'string' || data['birthday_day'] instanceof String)) {
            throw new Error("Expected the field `birthday_day` to be a primitive type in the JSON string but got " + data['birthday_day']);
        }
        // ensure the json data is a string
        if (data['birthday_month'] && !(typeof data['birthday_month'] === 'string' || data['birthday_month'] instanceof String)) {
            throw new Error("Expected the field `birthday_month` to be a primitive type in the JSON string but got " + data['birthday_month']);
        }
        // ensure the json data is a string
        if (data['clothing'] && !(typeof data['clothing'] === 'string' || data['clothing'] instanceof String)) {
            throw new Error("Expected the field `clothing` to be a primitive type in the JSON string but got " + data['clothing']);
        }
        // ensure the json data is a string
        if (data['debut'] && !(typeof data['debut'] === 'string' || data['debut'] instanceof String)) {
            throw new Error("Expected the field `debut` to be a primitive type in the JSON string but got " + data['debut']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nh_details`
        if (data['nh_details']) { // data not null
          VillagerNhDetails.validateJSON(data['nh_details']);
        }
        // ensure the json data is a string
        if (data['personality'] && !(typeof data['personality'] === 'string' || data['personality'] instanceof String)) {
            throw new Error("Expected the field `personality` to be a primitive type in the JSON string but got " + data['personality']);
        }
        // ensure the json data is a string
        if (data['phrase'] && !(typeof data['phrase'] === 'string' || data['phrase'] instanceof String)) {
            throw new Error("Expected the field `phrase` to be a primitive type in the JSON string but got " + data['phrase']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prev_phrases'])) {
            throw new Error("Expected the field `prev_phrases` to be an array in the JSON data but got " + data['prev_phrases']);
        }
        // ensure the json data is a string
        if (data['quote'] && !(typeof data['quote'] === 'string' || data['quote'] instanceof String)) {
            throw new Error("Expected the field `quote` to be a primitive type in the JSON string but got " + data['quote']);
        }
        // ensure the json data is a string
        if (data['sign'] && !(typeof data['sign'] === 'string' || data['sign'] instanceof String)) {
            throw new Error("Expected the field `sign` to be a primitive type in the JSON string but got " + data['sign']);
        }
        // ensure the json data is a string
        if (data['species'] && !(typeof data['species'] === 'string' || data['species'] instanceof String)) {
            throw new Error("Expected the field `species` to be a primitive type in the JSON string but got " + data['species']);
        }
        // ensure the json data is a string
        if (data['text_color'] && !(typeof data['text_color'] === 'string' || data['text_color'] instanceof String)) {
            throw new Error("Expected the field `text_color` to be a primitive type in the JSON string but got " + data['text_color']);
        }
        // ensure the json data is a string
        if (data['title_color'] && !(typeof data['title_color'] === 'string' || data['title_color'] instanceof String)) {
            throw new Error("Expected the field `title_color` to be a primitive type in the JSON string but got " + data['title_color']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.
 * @member {String} alt_name
 */
Villager.prototype['alt_name'] = undefined;

/**
 * List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
 * @member {Array.<module:model/Villager.AppearancesEnum>} appearances
 */
Villager.prototype['appearances'] = undefined;

/**
 * Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
 * @member {String} birthday_day
 */
Villager.prototype['birthday_day'] = undefined;

/**
 * Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
 * @member {String} birthday_month
 */
Villager.prototype['birthday_month'] = undefined;

/**
 * The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).
 * @member {String} clothing
 */
Villager.prototype['clothing'] = undefined;

/**
 * The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
 * @member {module:model/Villager.DebutEnum} debut
 */
Villager.prototype['debut'] = undefined;

/**
 * Gender of the villager. In *Animal Crossing*, only male and female are used.
 * @member {module:model/Villager.GenderEnum} gender
 */
Villager.prototype['gender'] = undefined;

/**
 * The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.
 * @member {String} id
 */
Villager.prototype['id'] = undefined;

/**
 * Image of the villager from the latest game the villager appeared in.
 * @member {String} image_url
 */
Villager.prototype['image_url'] = undefined;

/**
 * Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.
 * @member {Boolean} islander
 */
Villager.prototype['islander'] = undefined;

/**
 * Name of the villager.
 * @member {String} name
 */
Villager.prototype['name'] = undefined;

/**
 * @member {module:model/VillagerNhDetails} nh_details
 */
Villager.prototype['nh_details'] = undefined;

/**
 * The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.
 * @member {module:model/Villager.PersonalityEnum} personality
 */
Villager.prototype['personality'] = undefined;

/**
 * The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).
 * @member {String} phrase
 */
Villager.prototype['phrase'] = undefined;

/**
 * Any phrases used in previous *Animal Crossing* installations. May be empty.
 * @member {Array.<String>} prev_phrases
 */
Villager.prototype['prev_phrases'] = undefined;

/**
 * The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.
 * @member {String} quote
 */
Villager.prototype['quote'] = undefined;

/**
 * The villager's astrological star sign.
 * @member {module:model/Villager.SignEnum} sign
 */
Villager.prototype['sign'] = undefined;

/**
 * The villager's species.
 * @member {module:model/Villager.SpeciesEnum} species
 */
Villager.prototype['species'] = undefined;

/**
 * The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.
 * @member {String} text_color
 */
Villager.prototype['text_color'] = undefined;

/**
 * The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.
 * @member {String} title_color
 */
Villager.prototype['title_color'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
Villager.prototype['url'] = undefined;





/**
 * Allowed values for the <code>appearances</code> property.
 * @enum {String}
 * @readonly
 */
Villager['AppearancesEnum'] = {

    /**
     * value: "DNM"
     * @const
     */
    "DNM": "DNM",

    /**
     * value: "AC"
     * @const
     */
    "AC": "AC",

    /**
     * value: "E_PLUS"
     * @const
     */
    "E_PLUS": "E_PLUS",

    /**
     * value: "WW"
     * @const
     */
    "WW": "WW",

    /**
     * value: "CF"
     * @const
     */
    "CF": "CF",

    /**
     * value: "NL"
     * @const
     */
    "NL": "NL",

    /**
     * value: "WA"
     * @const
     */
    "WA": "WA",

    /**
     * value: "NH"
     * @const
     */
    "NH": "NH",

    /**
     * value: "FILM"
     * @const
     */
    "FILM": "FILM",

    /**
     * value: "HHD"
     * @const
     */
    "HHD": "HHD",

    /**
     * value: "PC"
     * @const
     */
    "PC": "PC"
};


/**
 * Allowed values for the <code>debut</code> property.
 * @enum {String}
 * @readonly
 */
Villager['DebutEnum'] = {

    /**
     * value: "DNM"
     * @const
     */
    "DNM": "DNM",

    /**
     * value: "AC"
     * @const
     */
    "AC": "AC",

    /**
     * value: "E_PLUS"
     * @const
     */
    "E_PLUS": "E_PLUS",

    /**
     * value: "WW"
     * @const
     */
    "WW": "WW",

    /**
     * value: "CF"
     * @const
     */
    "CF": "CF",

    /**
     * value: "NL"
     * @const
     */
    "NL": "NL",

    /**
     * value: "WA"
     * @const
     */
    "WA": "WA",

    /**
     * value: "NH"
     * @const
     */
    "NH": "NH",

    /**
     * value: "FILM"
     * @const
     */
    "FILM": "FILM",

    /**
     * value: "HHD"
     * @const
     */
    "HHD": "HHD",

    /**
     * value: "PC"
     * @const
     */
    "PC": "PC"
};


/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Villager['GenderEnum'] = {

    /**
     * value: "Male"
     * @const
     */
    "Male": "Male",

    /**
     * value: "Female"
     * @const
     */
    "Female": "Female"
};


/**
 * Allowed values for the <code>personality</code> property.
 * @enum {String}
 * @readonly
 */
Villager['PersonalityEnum'] = {

    /**
     * value: "Big sister"
     * @const
     */
    "Big sister": "Big sister",

    /**
     * value: "Cranky"
     * @const
     */
    "Cranky": "Cranky",

    /**
     * value: "Jock"
     * @const
     */
    "Jock": "Jock",

    /**
     * value: "Lazy"
     * @const
     */
    "Lazy": "Lazy",

    /**
     * value: "Normal"
     * @const
     */
    "Normal": "Normal",

    /**
     * value: "Peppy"
     * @const
     */
    "Peppy": "Peppy",

    /**
     * value: "Smug"
     * @const
     */
    "Smug": "Smug",

    /**
     * value: "Snooty"
     * @const
     */
    "Snooty": "Snooty"
};


/**
 * Allowed values for the <code>sign</code> property.
 * @enum {String}
 * @readonly
 */
Villager['SignEnum'] = {

    /**
     * value: "Aries"
     * @const
     */
    "Aries": "Aries",

    /**
     * value: "Taurus"
     * @const
     */
    "Taurus": "Taurus",

    /**
     * value: "Gemini"
     * @const
     */
    "Gemini": "Gemini",

    /**
     * value: "Cancer"
     * @const
     */
    "Cancer": "Cancer",

    /**
     * value: "Leo"
     * @const
     */
    "Leo": "Leo",

    /**
     * value: "Virgo"
     * @const
     */
    "Virgo": "Virgo",

    /**
     * value: "Libra"
     * @const
     */
    "Libra": "Libra",

    /**
     * value: "Scorpio"
     * @const
     */
    "Scorpio": "Scorpio",

    /**
     * value: "Sagittarius"
     * @const
     */
    "Sagittarius": "Sagittarius",

    /**
     * value: "Capricorn"
     * @const
     */
    "Capricorn": "Capricorn",

    /**
     * value: "Aquarius"
     * @const
     */
    "Aquarius": "Aquarius",

    /**
     * value: "Pisces"
     * @const
     */
    "Pisces": "Pisces"
};


/**
 * Allowed values for the <code>species</code> property.
 * @enum {String}
 * @readonly
 */
Villager['SpeciesEnum'] = {

    /**
     * value: "Alligator"
     * @const
     */
    "Alligator": "Alligator",

    /**
     * value: "Anteater"
     * @const
     */
    "Anteater": "Anteater",

    /**
     * value: "Bear"
     * @const
     */
    "Bear": "Bear",

    /**
     * value: "Bear cub"
     * @const
     */
    "Bear cub": "Bear cub",

    /**
     * value: "Bird"
     * @const
     */
    "Bird": "Bird",

    /**
     * value: "Bull"
     * @const
     */
    "Bull": "Bull",

    /**
     * value: "Cat"
     * @const
     */
    "Cat": "Cat",

    /**
     * value: "Chicken"
     * @const
     */
    "Chicken": "Chicken",

    /**
     * value: "Cow"
     * @const
     */
    "Cow": "Cow",

    /**
     * value: "Deer"
     * @const
     */
    "Deer": "Deer",

    /**
     * value: "Dog"
     * @const
     */
    "Dog": "Dog",

    /**
     * value: "Duck"
     * @const
     */
    "Duck": "Duck",

    /**
     * value: "Eagle"
     * @const
     */
    "Eagle": "Eagle",

    /**
     * value: "Elephant"
     * @const
     */
    "Elephant": "Elephant",

    /**
     * value: "Frog"
     * @const
     */
    "Frog": "Frog",

    /**
     * value: "Goat"
     * @const
     */
    "Goat": "Goat",

    /**
     * value: "Gorilla"
     * @const
     */
    "Gorilla": "Gorilla",

    /**
     * value: "Hamster"
     * @const
     */
    "Hamster": "Hamster",

    /**
     * value: "Hippo"
     * @const
     */
    "Hippo": "Hippo",

    /**
     * value: "Horse"
     * @const
     */
    "Horse": "Horse",

    /**
     * value: "Koala"
     * @const
     */
    "Koala": "Koala",

    /**
     * value: "Kangaroo"
     * @const
     */
    "Kangaroo": "Kangaroo",

    /**
     * value: "Lion"
     * @const
     */
    "Lion": "Lion",

    /**
     * value: "Monkey"
     * @const
     */
    "Monkey": "Monkey",

    /**
     * value: "Mouse"
     * @const
     */
    "Mouse": "Mouse",

    /**
     * value: "Octopus"
     * @const
     */
    "Octopus": "Octopus",

    /**
     * value: "Ostrich"
     * @const
     */
    "Ostrich": "Ostrich",

    /**
     * value: "Penguin"
     * @const
     */
    "Penguin": "Penguin",

    /**
     * value: "Pig"
     * @const
     */
    "Pig": "Pig",

    /**
     * value: "Rabbit"
     * @const
     */
    "Rabbit": "Rabbit",

    /**
     * value: "Rhinoceros"
     * @const
     */
    "Rhinoceros": "Rhinoceros",

    /**
     * value: "Sheep"
     * @const
     */
    "Sheep": "Sheep",

    /**
     * value: "Squirrel"
     * @const
     */
    "Squirrel": "Squirrel",

    /**
     * value: "Tiger"
     * @const
     */
    "Tiger": "Tiger",

    /**
     * value: "Wolf"
     * @const
     */
    "Wolf": "Wolf"
};



export default Villager;

