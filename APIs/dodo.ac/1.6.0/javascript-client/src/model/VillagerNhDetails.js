/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VillagerNhDetails model module.
 * @module model/VillagerNhDetails
 * @version 1.6.0
 */
class VillagerNhDetails {
    /**
     * Constructs a new <code>VillagerNhDetails</code>.
     * An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.
     * @alias module:model/VillagerNhDetails
     */
    constructor() { 
        
        VillagerNhDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VillagerNhDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VillagerNhDetails} obj Optional instance to populate.
     * @return {module:model/VillagerNhDetails} The populated <code>VillagerNhDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VillagerNhDetails();

            if (data.hasOwnProperty('catchphrase')) {
                obj['catchphrase'] = ApiClient.convertToType(data['catchphrase'], 'String');
            }
            if (data.hasOwnProperty('clothing')) {
                obj['clothing'] = ApiClient.convertToType(data['clothing'], 'String');
            }
            if (data.hasOwnProperty('clothing_variation')) {
                obj['clothing_variation'] = ApiClient.convertToType(data['clothing_variation'], 'String');
            }
            if (data.hasOwnProperty('fav_colors')) {
                obj['fav_colors'] = ApiClient.convertToType(data['fav_colors'], ['String']);
            }
            if (data.hasOwnProperty('fav_styles')) {
                obj['fav_styles'] = ApiClient.convertToType(data['fav_styles'], ['String']);
            }
            if (data.hasOwnProperty('hobby')) {
                obj['hobby'] = ApiClient.convertToType(data['hobby'], 'String');
            }
            if (data.hasOwnProperty('house_exterior_url')) {
                obj['house_exterior_url'] = ApiClient.convertToType(data['house_exterior_url'], 'String');
            }
            if (data.hasOwnProperty('house_flooring')) {
                obj['house_flooring'] = ApiClient.convertToType(data['house_flooring'], 'String');
            }
            if (data.hasOwnProperty('house_interior_url')) {
                obj['house_interior_url'] = ApiClient.convertToType(data['house_interior_url'], 'String');
            }
            if (data.hasOwnProperty('house_music')) {
                obj['house_music'] = ApiClient.convertToType(data['house_music'], 'String');
            }
            if (data.hasOwnProperty('house_music_note')) {
                obj['house_music_note'] = ApiClient.convertToType(data['house_music_note'], 'String');
            }
            if (data.hasOwnProperty('house_wallpaper')) {
                obj['house_wallpaper'] = ApiClient.convertToType(data['house_wallpaper'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('photo_url')) {
                obj['photo_url'] = ApiClient.convertToType(data['photo_url'], 'String');
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], 'String');
            }
            if (data.hasOwnProperty('sub-personality')) {
                obj['sub-personality'] = ApiClient.convertToType(data['sub-personality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VillagerNhDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VillagerNhDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['catchphrase'] && !(typeof data['catchphrase'] === 'string' || data['catchphrase'] instanceof String)) {
            throw new Error("Expected the field `catchphrase` to be a primitive type in the JSON string but got " + data['catchphrase']);
        }
        // ensure the json data is a string
        if (data['clothing'] && !(typeof data['clothing'] === 'string' || data['clothing'] instanceof String)) {
            throw new Error("Expected the field `clothing` to be a primitive type in the JSON string but got " + data['clothing']);
        }
        // ensure the json data is a string
        if (data['clothing_variation'] && !(typeof data['clothing_variation'] === 'string' || data['clothing_variation'] instanceof String)) {
            throw new Error("Expected the field `clothing_variation` to be a primitive type in the JSON string but got " + data['clothing_variation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fav_colors'])) {
            throw new Error("Expected the field `fav_colors` to be an array in the JSON data but got " + data['fav_colors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fav_styles'])) {
            throw new Error("Expected the field `fav_styles` to be an array in the JSON data but got " + data['fav_styles']);
        }
        // ensure the json data is a string
        if (data['hobby'] && !(typeof data['hobby'] === 'string' || data['hobby'] instanceof String)) {
            throw new Error("Expected the field `hobby` to be a primitive type in the JSON string but got " + data['hobby']);
        }
        // ensure the json data is a string
        if (data['house_exterior_url'] && !(typeof data['house_exterior_url'] === 'string' || data['house_exterior_url'] instanceof String)) {
            throw new Error("Expected the field `house_exterior_url` to be a primitive type in the JSON string but got " + data['house_exterior_url']);
        }
        // ensure the json data is a string
        if (data['house_flooring'] && !(typeof data['house_flooring'] === 'string' || data['house_flooring'] instanceof String)) {
            throw new Error("Expected the field `house_flooring` to be a primitive type in the JSON string but got " + data['house_flooring']);
        }
        // ensure the json data is a string
        if (data['house_interior_url'] && !(typeof data['house_interior_url'] === 'string' || data['house_interior_url'] instanceof String)) {
            throw new Error("Expected the field `house_interior_url` to be a primitive type in the JSON string but got " + data['house_interior_url']);
        }
        // ensure the json data is a string
        if (data['house_music'] && !(typeof data['house_music'] === 'string' || data['house_music'] instanceof String)) {
            throw new Error("Expected the field `house_music` to be a primitive type in the JSON string but got " + data['house_music']);
        }
        // ensure the json data is a string
        if (data['house_music_note'] && !(typeof data['house_music_note'] === 'string' || data['house_music_note'] instanceof String)) {
            throw new Error("Expected the field `house_music_note` to be a primitive type in the JSON string but got " + data['house_music_note']);
        }
        // ensure the json data is a string
        if (data['house_wallpaper'] && !(typeof data['house_wallpaper'] === 'string' || data['house_wallpaper'] instanceof String)) {
            throw new Error("Expected the field `house_wallpaper` to be a primitive type in the JSON string but got " + data['house_wallpaper']);
        }
        // ensure the json data is a string
        if (data['icon_url'] && !(typeof data['icon_url'] === 'string' || data['icon_url'] instanceof String)) {
            throw new Error("Expected the field `icon_url` to be a primitive type in the JSON string but got " + data['icon_url']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['photo_url'] && !(typeof data['photo_url'] === 'string' || data['photo_url'] instanceof String)) {
            throw new Error("Expected the field `photo_url` to be a primitive type in the JSON string but got " + data['photo_url']);
        }
        // ensure the json data is a string
        if (data['quote'] && !(typeof data['quote'] === 'string' || data['quote'] instanceof String)) {
            throw new Error("Expected the field `quote` to be a primitive type in the JSON string but got " + data['quote']);
        }
        // ensure the json data is a string
        if (data['sub-personality'] && !(typeof data['sub-personality'] === 'string' || data['sub-personality'] instanceof String)) {
            throw new Error("Expected the field `sub-personality` to be a primitive type in the JSON string but got " + data['sub-personality']);
        }

        return true;
    }


}



/**
 * The default phrase a villager will use when speaking to the player.
 * @member {String} catchphrase
 */
VillagerNhDetails.prototype['catchphrase'] = undefined;

/**
 * The default clothing that the villager wears.
 * @member {String} clothing
 */
VillagerNhDetails.prototype['clothing'] = undefined;

/**
 * The variation of the clothing (usually a color).
 * @member {String} clothing_variation
 */
VillagerNhDetails.prototype['clothing_variation'] = undefined;

/**
 * The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).
 * @member {Array.<String>} fav_colors
 */
VillagerNhDetails.prototype['fav_colors'] = undefined;

/**
 * The villager's favorite clothing styles.
 * @member {Array.<String>} fav_styles
 */
VillagerNhDetails.prototype['fav_styles'] = undefined;

/**
 * The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
 * @member {module:model/VillagerNhDetails.HobbyEnum} hobby
 */
VillagerNhDetails.prototype['hobby'] = undefined;

/**
 * A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.
 * @member {String} house_exterior_url
 */
VillagerNhDetails.prototype['house_exterior_url'] = undefined;

/**
 * The flooring in the villager's house.
 * @member {String} house_flooring
 */
VillagerNhDetails.prototype['house_flooring'] = undefined;

/**
 * A screenshot of the villager's house interior.
 * @member {String} house_interior_url
 */
VillagerNhDetails.prototype['house_interior_url'] = undefined;

/**
 * The music in the villager's house.
 * @member {String} house_music
 */
VillagerNhDetails.prototype['house_music'] = undefined;

/**
 * Any notes about the villager's music. If populated, this is usually \"Does not contain a stereo initially\", meaning that the villager's house will not play music unless provided with a stereo.
 * @member {String} house_music_note
 */
VillagerNhDetails.prototype['house_music_note'] = undefined;

/**
 * The wallpaper in the villager's house.
 * @member {String} house_wallpaper
 */
VillagerNhDetails.prototype['house_wallpaper'] = undefined;

/**
 * The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.
 * @member {String} icon_url
 */
VillagerNhDetails.prototype['icon_url'] = undefined;

/**
 * Image of the villager from *New Horizons*.
 * @member {String} image_url
 */
VillagerNhDetails.prototype['image_url'] = undefined;

/**
 * The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.
 * @member {String} photo_url
 */
VillagerNhDetails.prototype['photo_url'] = undefined;

/**
 * The villager's quote, as found on the back of their in-game photo.
 * @member {String} quote
 */
VillagerNhDetails.prototype['quote'] = undefined;

/**
 * Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
 * @member {module:model/VillagerNhDetails.SubPersonalityEnum} sub-personality
 */
VillagerNhDetails.prototype['sub-personality'] = undefined;





/**
 * Allowed values for the <code>hobby</code> property.
 * @enum {String}
 * @readonly
 */
VillagerNhDetails['HobbyEnum'] = {

    /**
     * value: "Education"
     * @const
     */
    "Education": "Education",

    /**
     * value: "Fashion"
     * @const
     */
    "Fashion": "Fashion",

    /**
     * value: "Fitness"
     * @const
     */
    "Fitness": "Fitness",

    /**
     * value: "Music"
     * @const
     */
    "Music": "Music",

    /**
     * value: "Nature"
     * @const
     */
    "Nature": "Nature",

    /**
     * value: "Play"
     * @const
     */
    "Play": "Play"
};


/**
 * Allowed values for the <code>sub-personality</code> property.
 * @enum {String}
 * @readonly
 */
VillagerNhDetails['SubPersonalityEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B"
};



export default VillagerNhDetails;

