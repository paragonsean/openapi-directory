/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NHClothingAvailabilityInner from './NHClothingAvailabilityInner';
import NHClothingBuyInner from './NHClothingBuyInner';
import NHRecipeMaterialsInner from './NHRecipeMaterialsInner';

/**
 * The NHRecipe model module.
 * @module model/NHRecipe
 * @version 1.6.0
 */
class NHRecipe {
    /**
     * Constructs a new <code>NHRecipe</code>.
     * @alias module:model/NHRecipe
     */
    constructor() { 
        
        NHRecipe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NHRecipe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NHRecipe} obj Optional instance to populate.
     * @return {module:model/NHRecipe} The populated <code>NHRecipe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NHRecipe();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], [NHClothingAvailabilityInner]);
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], [NHClothingBuyInner]);
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('materials')) {
                obj['materials'] = ApiClient.convertToType(data['materials'], [NHRecipeMaterialsInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recipes_to_unlock')) {
                obj['recipes_to_unlock'] = ApiClient.convertToType(data['recipes_to_unlock'], 'Number');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'Number');
            }
            if (data.hasOwnProperty('serial_id')) {
                obj['serial_id'] = ApiClient.convertToType(data['serial_id'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NHRecipe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NHRecipe</code>.
     */
    static validateJSON(data) {
        if (data['availability']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availability'])) {
                throw new Error("Expected the field `availability` to be an array in the JSON data but got " + data['availability']);
            }
            // validate the optional field `availability` (array)
            for (const item of data['availability']) {
                NHClothingAvailabilityInner.validateJSON(item);
            };
        }
        if (data['buy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buy'])) {
                throw new Error("Expected the field `buy` to be an array in the JSON data but got " + data['buy']);
            }
            // validate the optional field `buy` (array)
            for (const item of data['buy']) {
                NHClothingBuyInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        if (data['materials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['materials'])) {
                throw new Error("Expected the field `materials` to be an array in the JSON data but got " + data['materials']);
            }
            // validate the optional field `materials` (array)
            for (const item of data['materials']) {
                NHRecipeMaterialsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.
 * @member {Array.<module:model/NHClothingAvailabilityInner>} availability
 */
NHRecipe.prototype['availability'] = undefined;

/**
 * An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).
 * @member {Array.<module:model/NHClothingBuyInner>} buy
 */
NHRecipe.prototype['buy'] = undefined;

/**
 * Image of the item the recipe crafts.
 * @member {String} image_url
 */
NHRecipe.prototype['image_url'] = undefined;

/**
 * The list of materials required to craft the item.
 * @member {Array.<module:model/NHRecipeMaterialsInner>} materials
 */
NHRecipe.prototype['materials'] = undefined;

/**
 * The name of the recipe.
 * @member {String} name
 */
NHRecipe.prototype['name'] = undefined;

/**
 * How many recipes the player has to have learned to unlock this one.
 * @member {Number} recipes_to_unlock
 */
NHRecipe.prototype['recipes_to_unlock'] = undefined;

/**
 * The number of Bells the sea creature can be sold to Nook's store for.
 * @member {Number} sell
 */
NHRecipe.prototype['sell'] = undefined;

/**
 * The unique in-game ID of the recipe.
 * @member {Number} serial_id
 */
NHRecipe.prototype['serial_id'] = undefined;

/**
 * Link to the respective Nookipedia article.
 * @member {String} url
 */
NHRecipe.prototype['url'] = undefined;






export default NHRecipe;

