/**
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Nookipedia);
  }
}(this, function(expect, Nookipedia) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Nookipedia.VillagerNhDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VillagerNhDetails', function() {
    it('should create an instance of VillagerNhDetails', function() {
      // uncomment below and update the code to test VillagerNhDetails
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be.a(Nookipedia.VillagerNhDetails);
    });

    it('should have the property catchphrase (base name: "catchphrase")', function() {
      // uncomment below and update the code to test the property catchphrase
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property clothing (base name: "clothing")', function() {
      // uncomment below and update the code to test the property clothing
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property clothingVariation (base name: "clothing_variation")', function() {
      // uncomment below and update the code to test the property clothingVariation
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property favColors (base name: "fav_colors")', function() {
      // uncomment below and update the code to test the property favColors
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property favStyles (base name: "fav_styles")', function() {
      // uncomment below and update the code to test the property favStyles
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property hobby (base name: "hobby")', function() {
      // uncomment below and update the code to test the property hobby
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property houseExteriorUrl (base name: "house_exterior_url")', function() {
      // uncomment below and update the code to test the property houseExteriorUrl
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property houseFlooring (base name: "house_flooring")', function() {
      // uncomment below and update the code to test the property houseFlooring
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property houseInteriorUrl (base name: "house_interior_url")', function() {
      // uncomment below and update the code to test the property houseInteriorUrl
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property houseMusic (base name: "house_music")', function() {
      // uncomment below and update the code to test the property houseMusic
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property houseMusicNote (base name: "house_music_note")', function() {
      // uncomment below and update the code to test the property houseMusicNote
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property houseWallpaper (base name: "house_wallpaper")', function() {
      // uncomment below and update the code to test the property houseWallpaper
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property iconUrl (base name: "icon_url")', function() {
      // uncomment below and update the code to test the property iconUrl
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "image_url")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property photoUrl (base name: "photo_url")', function() {
      // uncomment below and update the code to test the property photoUrl
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property quote (base name: "quote")', function() {
      // uncomment below and update the code to test the property quote
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

    it('should have the property subPersonality (base name: "sub-personality")', function() {
      // uncomment below and update the code to test the property subPersonality
      //var instance = new Nookipedia.VillagerNhDetails();
      //expect(instance).to.be();
    });

  });

}));
