/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHClothingAvailabilityInner;
import org.openapitools.client.model.NHClothingBuyInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHItem {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private List<NHClothingAvailabilityInner> availability = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private List<NHClothingBuyInner> buy = new ArrayList<>();

  public static final String SERIALIZED_NAME_EDIBLE = "edible";
  @SerializedName(SERIALIZED_NAME_EDIBLE)
  private Boolean edible;

  public static final String SERIALIZED_NAME_HHA_BASE = "hha_base";
  @SerializedName(SERIALIZED_NAME_HHA_BASE)
  private Integer hhaBase;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_FENCE = "is_fence";
  @SerializedName(SERIALIZED_NAME_IS_FENCE)
  private Boolean isFence;

  public static final String SERIALIZED_NAME_MATERIAL_NAME_SORT = "material_name_sort";
  @SerializedName(SERIALIZED_NAME_MATERIAL_NAME_SORT)
  private Integer materialNameSort;

  public static final String SERIALIZED_NAME_MATERIAL_SEASONALITY = "material_seasonality";
  @SerializedName(SERIALIZED_NAME_MATERIAL_SEASONALITY)
  private String materialSeasonality;

  public static final String SERIALIZED_NAME_MATERIAL_SEASONALITY_SORT = "material_seasonality_sort";
  @SerializedName(SERIALIZED_NAME_MATERIAL_SEASONALITY_SORT)
  private Integer materialSeasonalitySort;

  public static final String SERIALIZED_NAME_MATERIAL_SORT = "material_sort";
  @SerializedName(SERIALIZED_NAME_MATERIAL_SORT)
  private Integer materialSort;

  /**
   * (WIP)
   */
  @JsonAdapter(MaterialTypeEnum.Adapter.class)
  public enum MaterialTypeEnum {
    EMPTY(""),
    
    BAMBOO("Bamboo"),
    
    MUSHROOM("Mushroom"),
    
    TRASH("Trash"),
    
    WOOD("Wood"),
    
    ORE("Ore"),
    
    SNOWFLAKE("Snowflake"),
    
    TREE("Tree"),
    
    ORNAMENT("Ornament"),
    
    FRUIT("Fruit"),
    
    UNDERWATER("Underwater"),
    
    OTHER("Other"),
    
    LEAF("Leaf"),
    
    SHELL("Shell"),
    
    FLOWER("Flower"),
    
    STAR_FRAGMENT("Star Fragment"),
    
    FEATHER("Feather"),
    
    EGG("Egg"),
    
    PLANT("Plant");

    private String value;

    MaterialTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaterialTypeEnum fromValue(String value) {
      for (MaterialTypeEnum b : MaterialTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaterialTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaterialTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaterialTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaterialTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaterialTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATERIAL_TYPE = "material_type";
  @SerializedName(SERIALIZED_NAME_MATERIAL_TYPE)
  private MaterialTypeEnum materialType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  /**
   * (WIP)
   */
  @JsonAdapter(PlantTypeEnum.Adapter.class)
  public enum PlantTypeEnum {
    EMPTY(""),
    
    PUMPKIN("Pumpkin"),
    
    FLOWER("Flower"),
    
    BUSH("Bush"),
    
    TREE("Tree");

    private String value;

    PlantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlantTypeEnum fromValue(String value) {
      for (PlantTypeEnum b : PlantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLANT_TYPE = "plant_type";
  @SerializedName(SERIALIZED_NAME_PLANT_TYPE)
  private PlantTypeEnum plantType;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_STACK = "stack";
  @SerializedName(SERIALIZED_NAME_STACK)
  private Integer stack;

  public static final String SERIALIZED_NAME_UNLOCKED = "unlocked";
  @SerializedName(SERIALIZED_NAME_UNLOCKED)
  private Boolean unlocked;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION_ADDED = "version_added";
  @SerializedName(SERIALIZED_NAME_VERSION_ADDED)
  private String versionAdded;

  public NHItem() {
  }

  public NHItem availability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
    return this;
  }

  public NHItem addAvailabilityItem(NHClothingAvailabilityInner availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

  /**
   * Where the clothing may be obtained from (could be multiple sources). &#x60;from&#x60; is a brief description of the source; &#x60;note&#x60;, when provided, provides additional details.
   * @return availability
   */
  @javax.annotation.Nullable
  public List<NHClothingAvailabilityInner> getAvailability() {
    return availability;
  }

  public void setAvailability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
  }


  public NHItem buy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
    return this;
  }

  public NHItem addBuyItem(NHClothingBuyInner buyItem) {
    if (this.buy == null) {
      this.buy = new ArrayList<>();
    }
    this.buy.add(buyItem);
    return this;
  }

  /**
   * An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
   * @return buy
   */
  @javax.annotation.Nullable
  public List<NHClothingBuyInner> getBuy() {
    return buy;
  }

  public void setBuy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
  }


  public NHItem edible(Boolean edible) {
    this.edible = edible;
    return this;
  }

  /**
   * Whether the item is edible or not.
   * @return edible
   */
  @javax.annotation.Nullable
  public Boolean getEdible() {
    return edible;
  }

  public void setEdible(Boolean edible) {
    this.edible = edible;
  }


  public NHItem hhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
    return this;
  }

  /**
   * The base value that the item provides to a player&#39;s Happy Home Academy score when placed in their home.
   * @return hhaBase
   */
  @javax.annotation.Nullable
  public Integer getHhaBase() {
    return hhaBase;
  }

  public void setHhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
  }


  public NHItem imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the interior.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public NHItem isFence(Boolean isFence) {
    this.isFence = isFence;
    return this;
  }

  /**
   * Whether or not the item is a fence or not.
   * @return isFence
   */
  @javax.annotation.Nullable
  public Boolean getIsFence() {
    return isFence;
  }

  public void setIsFence(Boolean isFence) {
    this.isFence = isFence;
  }


  public NHItem materialNameSort(Integer materialNameSort) {
    this.materialNameSort = materialNameSort;
    return this;
  }

  /**
   * (WIP)
   * @return materialNameSort
   */
  @javax.annotation.Nullable
  public Integer getMaterialNameSort() {
    return materialNameSort;
  }

  public void setMaterialNameSort(Integer materialNameSort) {
    this.materialNameSort = materialNameSort;
  }


  public NHItem materialSeasonality(String materialSeasonality) {
    this.materialSeasonality = materialSeasonality;
    return this;
  }

  /**
   * (WIP)
   * @return materialSeasonality
   */
  @javax.annotation.Nullable
  public String getMaterialSeasonality() {
    return materialSeasonality;
  }

  public void setMaterialSeasonality(String materialSeasonality) {
    this.materialSeasonality = materialSeasonality;
  }


  public NHItem materialSeasonalitySort(Integer materialSeasonalitySort) {
    this.materialSeasonalitySort = materialSeasonalitySort;
    return this;
  }

  /**
   * (WIP)
   * @return materialSeasonalitySort
   */
  @javax.annotation.Nullable
  public Integer getMaterialSeasonalitySort() {
    return materialSeasonalitySort;
  }

  public void setMaterialSeasonalitySort(Integer materialSeasonalitySort) {
    this.materialSeasonalitySort = materialSeasonalitySort;
  }


  public NHItem materialSort(Integer materialSort) {
    this.materialSort = materialSort;
    return this;
  }

  /**
   * (WIP)
   * @return materialSort
   */
  @javax.annotation.Nullable
  public Integer getMaterialSort() {
    return materialSort;
  }

  public void setMaterialSort(Integer materialSort) {
    this.materialSort = materialSort;
  }


  public NHItem materialType(MaterialTypeEnum materialType) {
    this.materialType = materialType;
    return this;
  }

  /**
   * (WIP)
   * @return materialType
   */
  @javax.annotation.Nullable
  public MaterialTypeEnum getMaterialType() {
    return materialType;
  }

  public void setMaterialType(MaterialTypeEnum materialType) {
    this.materialType = materialType;
  }


  public NHItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the item.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHItem notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Any additional miscellaneous information about the item, such as a name change from a past update.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public NHItem plantType(PlantTypeEnum plantType) {
    this.plantType = plantType;
    return this;
  }

  /**
   * (WIP)
   * @return plantType
   */
  @javax.annotation.Nullable
  public PlantTypeEnum getPlantType() {
    return plantType;
  }

  public void setPlantType(PlantTypeEnum plantType) {
    this.plantType = plantType;
  }


  public NHItem sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * The number of bells the item can be sold to Nook&#39;s store for.
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHItem stack(Integer stack) {
    this.stack = stack;
    return this;
  }

  /**
   * How much the item can stack up to in a single inventory slot.
   * @return stack
   */
  @javax.annotation.Nullable
  public Integer getStack() {
    return stack;
  }

  public void setStack(Integer stack) {
    this.stack = stack;
  }


  public NHItem unlocked(Boolean unlocked) {
    this.unlocked = unlocked;
    return this;
  }

  /**
   * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren&#39;t actually made available until a subsequent update unlocks them.
   * @return unlocked
   */
  @javax.annotation.Nullable
  public Boolean getUnlocked() {
    return unlocked;
  }

  public void setUnlocked(Boolean unlocked) {
    this.unlocked = unlocked;
  }


  public NHItem url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NHItem versionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
    return this;
  }

  /**
   * The version of *New Horizons* that the item was added. Items that were included at the game&#39;s launch have version \&quot;1.0.0\&quot;.
   * @return versionAdded
   */
  @javax.annotation.Nullable
  public String getVersionAdded() {
    return versionAdded;
  }

  public void setVersionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHItem nhItem = (NHItem) o;
    return Objects.equals(this.availability, nhItem.availability) &&
        Objects.equals(this.buy, nhItem.buy) &&
        Objects.equals(this.edible, nhItem.edible) &&
        Objects.equals(this.hhaBase, nhItem.hhaBase) &&
        Objects.equals(this.imageUrl, nhItem.imageUrl) &&
        Objects.equals(this.isFence, nhItem.isFence) &&
        Objects.equals(this.materialNameSort, nhItem.materialNameSort) &&
        Objects.equals(this.materialSeasonality, nhItem.materialSeasonality) &&
        Objects.equals(this.materialSeasonalitySort, nhItem.materialSeasonalitySort) &&
        Objects.equals(this.materialSort, nhItem.materialSort) &&
        Objects.equals(this.materialType, nhItem.materialType) &&
        Objects.equals(this.name, nhItem.name) &&
        Objects.equals(this.notes, nhItem.notes) &&
        Objects.equals(this.plantType, nhItem.plantType) &&
        Objects.equals(this.sell, nhItem.sell) &&
        Objects.equals(this.stack, nhItem.stack) &&
        Objects.equals(this.unlocked, nhItem.unlocked) &&
        Objects.equals(this.url, nhItem.url) &&
        Objects.equals(this.versionAdded, nhItem.versionAdded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, buy, edible, hhaBase, imageUrl, isFence, materialNameSort, materialSeasonality, materialSeasonalitySort, materialSort, materialType, name, notes, plantType, sell, stack, unlocked, url, versionAdded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHItem {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    edible: ").append(toIndentedString(edible)).append("\n");
    sb.append("    hhaBase: ").append(toIndentedString(hhaBase)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isFence: ").append(toIndentedString(isFence)).append("\n");
    sb.append("    materialNameSort: ").append(toIndentedString(materialNameSort)).append("\n");
    sb.append("    materialSeasonality: ").append(toIndentedString(materialSeasonality)).append("\n");
    sb.append("    materialSeasonalitySort: ").append(toIndentedString(materialSeasonalitySort)).append("\n");
    sb.append("    materialSort: ").append(toIndentedString(materialSort)).append("\n");
    sb.append("    materialType: ").append(toIndentedString(materialType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    plantType: ").append(toIndentedString(plantType)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    stack: ").append(toIndentedString(stack)).append("\n");
    sb.append("    unlocked: ").append(toIndentedString(unlocked)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    versionAdded: ").append(toIndentedString(versionAdded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("buy");
    openapiFields.add("edible");
    openapiFields.add("hha_base");
    openapiFields.add("image_url");
    openapiFields.add("is_fence");
    openapiFields.add("material_name_sort");
    openapiFields.add("material_seasonality");
    openapiFields.add("material_seasonality_sort");
    openapiFields.add("material_sort");
    openapiFields.add("material_type");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("plant_type");
    openapiFields.add("sell");
    openapiFields.add("stack");
    openapiFields.add("unlocked");
    openapiFields.add("url");
    openapiFields.add("version_added");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHItem is not found in the empty JSON string", NHItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        JsonArray jsonArrayavailability = jsonObj.getAsJsonArray("availability");
        if (jsonArrayavailability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability` to be an array in the JSON string but got `%s`", jsonObj.get("availability").toString()));
          }

          // validate the optional field `availability` (array)
          for (int i = 0; i < jsonArrayavailability.size(); i++) {
            NHClothingAvailabilityInner.validateJsonElement(jsonArrayavailability.get(i));
          };
        }
      }
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        JsonArray jsonArraybuy = jsonObj.getAsJsonArray("buy");
        if (jsonArraybuy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buy` to be an array in the JSON string but got `%s`", jsonObj.get("buy").toString()));
          }

          // validate the optional field `buy` (array)
          for (int i = 0; i < jsonArraybuy.size(); i++) {
            NHClothingBuyInner.validateJsonElement(jsonArraybuy.get(i));
          };
        }
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("material_seasonality") != null && !jsonObj.get("material_seasonality").isJsonNull()) && !jsonObj.get("material_seasonality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material_seasonality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material_seasonality").toString()));
      }
      if ((jsonObj.get("material_type") != null && !jsonObj.get("material_type").isJsonNull()) && !jsonObj.get("material_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material_type").toString()));
      }
      // validate the optional field `material_type`
      if (jsonObj.get("material_type") != null && !jsonObj.get("material_type").isJsonNull()) {
        MaterialTypeEnum.validateJsonElement(jsonObj.get("material_type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("plant_type") != null && !jsonObj.get("plant_type").isJsonNull()) && !jsonObj.get("plant_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plant_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plant_type").toString()));
      }
      // validate the optional field `plant_type`
      if (jsonObj.get("plant_type") != null && !jsonObj.get("plant_type").isJsonNull()) {
        PlantTypeEnum.validateJsonElement(jsonObj.get("plant_type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version_added") != null && !jsonObj.get("version_added").isJsonNull()) && !jsonObj.get("version_added").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_added` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_added").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHItem.class));

       return (TypeAdapter<T>) new TypeAdapter<NHItem>() {
           @Override
           public void write(JsonWriter out, NHItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHItem
   * @throws IOException if the JSON string is invalid with respect to NHItem
   */
  public static NHItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHItem.class);
  }

  /**
   * Convert an instance of NHItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

