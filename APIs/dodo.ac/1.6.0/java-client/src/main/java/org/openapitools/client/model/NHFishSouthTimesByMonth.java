/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object with twelve numerical keys, each representing a month (&#x60;\&quot;1\&quot;&#x60; for January, &#x60;\&quot;2\&quot;&#x60; for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be &#x60;\&quot;NA\&quot;&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHFishSouthTimesByMonth {
  public static final String SERIALIZED_NAME_1 = "1";
  @SerializedName(SERIALIZED_NAME_1)
  private String _1;

  public static final String SERIALIZED_NAME_4 = "4";
  @SerializedName(SERIALIZED_NAME_4)
  private String _4;

  public static final String SERIALIZED_NAME_5 = "5";
  @SerializedName(SERIALIZED_NAME_5)
  private String _5;

  public static final String SERIALIZED_NAME_6 = "6";
  @SerializedName(SERIALIZED_NAME_6)
  private String _6;

  public static final String SERIALIZED_NAME_7 = "7";
  @SerializedName(SERIALIZED_NAME_7)
  private String _7;

  public static final String SERIALIZED_NAME_8 = "8";
  @SerializedName(SERIALIZED_NAME_8)
  private String _8;

  public static final String SERIALIZED_NAME_9 = "9";
  @SerializedName(SERIALIZED_NAME_9)
  private String _9;

  public static final String SERIALIZED_NAME_10 = "10";
  @SerializedName(SERIALIZED_NAME_10)
  private String _10;

  public static final String SERIALIZED_NAME_11 = "11";
  @SerializedName(SERIALIZED_NAME_11)
  private String _11;

  public static final String SERIALIZED_NAME_12 = "12";
  @SerializedName(SERIALIZED_NAME_12)
  private String _12;

  public static final String SERIALIZED_NAME_2QUOTE = "2&#39;";
  @SerializedName(SERIALIZED_NAME_2QUOTE)
  private String _2quote;

  public static final String SERIALIZED_NAME_3QUOTE = "3&#39;";
  @SerializedName(SERIALIZED_NAME_3QUOTE)
  private String _3quote;

  public NHFishSouthTimesByMonth() {
  }

  public NHFishSouthTimesByMonth _1(String _1) {
    this._1 = _1;
    return this;
  }

  /**
   * Get _1
   * @return _1
   */
  @javax.annotation.Nullable
  public String get1() {
    return _1;
  }

  public void set1(String _1) {
    this._1 = _1;
  }


  public NHFishSouthTimesByMonth _4(String _4) {
    this._4 = _4;
    return this;
  }

  /**
   * Get _4
   * @return _4
   */
  @javax.annotation.Nullable
  public String get4() {
    return _4;
  }

  public void set4(String _4) {
    this._4 = _4;
  }


  public NHFishSouthTimesByMonth _5(String _5) {
    this._5 = _5;
    return this;
  }

  /**
   * Get _5
   * @return _5
   */
  @javax.annotation.Nullable
  public String get5() {
    return _5;
  }

  public void set5(String _5) {
    this._5 = _5;
  }


  public NHFishSouthTimesByMonth _6(String _6) {
    this._6 = _6;
    return this;
  }

  /**
   * Get _6
   * @return _6
   */
  @javax.annotation.Nullable
  public String get6() {
    return _6;
  }

  public void set6(String _6) {
    this._6 = _6;
  }


  public NHFishSouthTimesByMonth _7(String _7) {
    this._7 = _7;
    return this;
  }

  /**
   * Get _7
   * @return _7
   */
  @javax.annotation.Nullable
  public String get7() {
    return _7;
  }

  public void set7(String _7) {
    this._7 = _7;
  }


  public NHFishSouthTimesByMonth _8(String _8) {
    this._8 = _8;
    return this;
  }

  /**
   * Get _8
   * @return _8
   */
  @javax.annotation.Nullable
  public String get8() {
    return _8;
  }

  public void set8(String _8) {
    this._8 = _8;
  }


  public NHFishSouthTimesByMonth _9(String _9) {
    this._9 = _9;
    return this;
  }

  /**
   * Get _9
   * @return _9
   */
  @javax.annotation.Nullable
  public String get9() {
    return _9;
  }

  public void set9(String _9) {
    this._9 = _9;
  }


  public NHFishSouthTimesByMonth _10(String _10) {
    this._10 = _10;
    return this;
  }

  /**
   * Get _10
   * @return _10
   */
  @javax.annotation.Nullable
  public String get10() {
    return _10;
  }

  public void set10(String _10) {
    this._10 = _10;
  }


  public NHFishSouthTimesByMonth _11(String _11) {
    this._11 = _11;
    return this;
  }

  /**
   * Get _11
   * @return _11
   */
  @javax.annotation.Nullable
  public String get11() {
    return _11;
  }

  public void set11(String _11) {
    this._11 = _11;
  }


  public NHFishSouthTimesByMonth _12(String _12) {
    this._12 = _12;
    return this;
  }

  /**
   * Get _12
   * @return _12
   */
  @javax.annotation.Nullable
  public String get12() {
    return _12;
  }

  public void set12(String _12) {
    this._12 = _12;
  }


  public NHFishSouthTimesByMonth _2quote(String _2quote) {
    this._2quote = _2quote;
    return this;
  }

  /**
   * Get _2quote
   * @return _2quote
   */
  @javax.annotation.Nullable
  public String get2quote() {
    return _2quote;
  }

  public void set2quote(String _2quote) {
    this._2quote = _2quote;
  }


  public NHFishSouthTimesByMonth _3quote(String _3quote) {
    this._3quote = _3quote;
    return this;
  }

  /**
   * Get _3quote
   * @return _3quote
   */
  @javax.annotation.Nullable
  public String get3quote() {
    return _3quote;
  }

  public void set3quote(String _3quote) {
    this._3quote = _3quote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHFishSouthTimesByMonth nhFishSouthTimesByMonth = (NHFishSouthTimesByMonth) o;
    return Objects.equals(this._1, nhFishSouthTimesByMonth._1) &&
        Objects.equals(this._4, nhFishSouthTimesByMonth._4) &&
        Objects.equals(this._5, nhFishSouthTimesByMonth._5) &&
        Objects.equals(this._6, nhFishSouthTimesByMonth._6) &&
        Objects.equals(this._7, nhFishSouthTimesByMonth._7) &&
        Objects.equals(this._8, nhFishSouthTimesByMonth._8) &&
        Objects.equals(this._9, nhFishSouthTimesByMonth._9) &&
        Objects.equals(this._10, nhFishSouthTimesByMonth._10) &&
        Objects.equals(this._11, nhFishSouthTimesByMonth._11) &&
        Objects.equals(this._12, nhFishSouthTimesByMonth._12) &&
        Objects.equals(this._2quote, nhFishSouthTimesByMonth._2quote) &&
        Objects.equals(this._3quote, nhFishSouthTimesByMonth._3quote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_1, _4, _5, _6, _7, _8, _9, _10, _11, _12, _2quote, _3quote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHFishSouthTimesByMonth {\n");
    sb.append("    _1: ").append(toIndentedString(_1)).append("\n");
    sb.append("    _4: ").append(toIndentedString(_4)).append("\n");
    sb.append("    _5: ").append(toIndentedString(_5)).append("\n");
    sb.append("    _6: ").append(toIndentedString(_6)).append("\n");
    sb.append("    _7: ").append(toIndentedString(_7)).append("\n");
    sb.append("    _8: ").append(toIndentedString(_8)).append("\n");
    sb.append("    _9: ").append(toIndentedString(_9)).append("\n");
    sb.append("    _10: ").append(toIndentedString(_10)).append("\n");
    sb.append("    _11: ").append(toIndentedString(_11)).append("\n");
    sb.append("    _12: ").append(toIndentedString(_12)).append("\n");
    sb.append("    _2quote: ").append(toIndentedString(_2quote)).append("\n");
    sb.append("    _3quote: ").append(toIndentedString(_3quote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("1");
    openapiFields.add("4");
    openapiFields.add("5");
    openapiFields.add("6");
    openapiFields.add("7");
    openapiFields.add("8");
    openapiFields.add("9");
    openapiFields.add("10");
    openapiFields.add("11");
    openapiFields.add("12");
    openapiFields.add("2&#39;");
    openapiFields.add("3&#39;");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHFishSouthTimesByMonth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHFishSouthTimesByMonth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHFishSouthTimesByMonth is not found in the empty JSON string", NHFishSouthTimesByMonth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHFishSouthTimesByMonth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHFishSouthTimesByMonth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("1") != null && !jsonObj.get("1").isJsonNull()) && !jsonObj.get("1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("1").toString()));
      }
      if ((jsonObj.get("4") != null && !jsonObj.get("4").isJsonNull()) && !jsonObj.get("4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("4").toString()));
      }
      if ((jsonObj.get("5") != null && !jsonObj.get("5").isJsonNull()) && !jsonObj.get("5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("5").toString()));
      }
      if ((jsonObj.get("6") != null && !jsonObj.get("6").isJsonNull()) && !jsonObj.get("6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("6").toString()));
      }
      if ((jsonObj.get("7") != null && !jsonObj.get("7").isJsonNull()) && !jsonObj.get("7").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `7` to be a primitive type in the JSON string but got `%s`", jsonObj.get("7").toString()));
      }
      if ((jsonObj.get("8") != null && !jsonObj.get("8").isJsonNull()) && !jsonObj.get("8").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `8` to be a primitive type in the JSON string but got `%s`", jsonObj.get("8").toString()));
      }
      if ((jsonObj.get("9") != null && !jsonObj.get("9").isJsonNull()) && !jsonObj.get("9").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `9` to be a primitive type in the JSON string but got `%s`", jsonObj.get("9").toString()));
      }
      if ((jsonObj.get("10") != null && !jsonObj.get("10").isJsonNull()) && !jsonObj.get("10").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `10` to be a primitive type in the JSON string but got `%s`", jsonObj.get("10").toString()));
      }
      if ((jsonObj.get("11") != null && !jsonObj.get("11").isJsonNull()) && !jsonObj.get("11").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `11` to be a primitive type in the JSON string but got `%s`", jsonObj.get("11").toString()));
      }
      if ((jsonObj.get("12") != null && !jsonObj.get("12").isJsonNull()) && !jsonObj.get("12").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `12` to be a primitive type in the JSON string but got `%s`", jsonObj.get("12").toString()));
      }
      if ((jsonObj.get("2'") != null && !jsonObj.get("2'").isJsonNull()) && !jsonObj.get("2'").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `2'` to be a primitive type in the JSON string but got `%s`", jsonObj.get("2'").toString()));
      }
      if ((jsonObj.get("3'") != null && !jsonObj.get("3'").isJsonNull()) && !jsonObj.get("3'").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `3'` to be a primitive type in the JSON string but got `%s`", jsonObj.get("3'").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHFishSouthTimesByMonth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHFishSouthTimesByMonth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHFishSouthTimesByMonth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHFishSouthTimesByMonth.class));

       return (TypeAdapter<T>) new TypeAdapter<NHFishSouthTimesByMonth>() {
           @Override
           public void write(JsonWriter out, NHFishSouthTimesByMonth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHFishSouthTimesByMonth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHFishSouthTimesByMonth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHFishSouthTimesByMonth
   * @throws IOException if the JSON string is invalid with respect to NHFishSouthTimesByMonth
   */
  public static NHFishSouthTimesByMonth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHFishSouthTimesByMonth.class);
  }

  /**
   * Convert an instance of NHFishSouthTimesByMonth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

