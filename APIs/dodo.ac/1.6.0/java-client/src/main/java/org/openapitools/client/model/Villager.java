/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VillagerNhDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Villager
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Villager {
  public static final String SERIALIZED_NAME_ALT_NAME = "alt_name";
  @SerializedName(SERIALIZED_NAME_ALT_NAME)
  private String altName;

  /**
   * Gets or Sets appearances
   */
  @JsonAdapter(AppearancesEnum.Adapter.class)
  public enum AppearancesEnum {
    DNM("DNM"),
    
    AC("AC"),
    
    E_PLUS("E_PLUS"),
    
    WW("WW"),
    
    CF("CF"),
    
    NL("NL"),
    
    WA("WA"),
    
    NH("NH"),
    
    FILM("FILM"),
    
    HHD("HHD"),
    
    PC("PC");

    private String value;

    AppearancesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppearancesEnum fromValue(String value) {
      for (AppearancesEnum b : AppearancesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppearancesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppearancesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppearancesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppearancesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppearancesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPEARANCES = "appearances";
  @SerializedName(SERIALIZED_NAME_APPEARANCES)
  private List<AppearancesEnum> appearances = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIRTHDAY_DAY = "birthday_day";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY_DAY)
  private String birthdayDay;

  public static final String SERIALIZED_NAME_BIRTHDAY_MONTH = "birthday_month";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY_MONTH)
  private String birthdayMonth;

  public static final String SERIALIZED_NAME_CLOTHING = "clothing";
  @SerializedName(SERIALIZED_NAME_CLOTHING)
  private String clothing;

  /**
   * The first *Animal Crossing* game the villager appeared in. &#x60;DNM&#x60; is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); &#x60;AC&#x60; is *Animal Crossing* for GameCube; &#x60;E_PLUS&#x60; is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); &#x60;WW&#x60; is *Wild World* for the DS; &#x60;CF&#x60; is *City Folk* for Wii; &#x60;NL&#x60; is *New Leaf* for 3DS; &#x60;WA&#x60; is *Welcome amiibo*, the *New Leaf* expansion; &#x60;NH&#x60; is *New Horizons* for Switch; &#x60;FILM&#x60; is the *Doubutsu no Mori* Japan-exclusive film; &#x60;HHD&#x60; is *Happy Home Designer* for the Wii; and &#x60;PC&#x60; is *Pocket Camp* for mobile.
   */
  @JsonAdapter(DebutEnum.Adapter.class)
  public enum DebutEnum {
    DNM("DNM"),
    
    AC("AC"),
    
    E_PLUS("E_PLUS"),
    
    WW("WW"),
    
    CF("CF"),
    
    NL("NL"),
    
    WA("WA"),
    
    NH("NH"),
    
    FILM("FILM"),
    
    HHD("HHD"),
    
    PC("PC");

    private String value;

    DebutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DebutEnum fromValue(String value) {
      for (DebutEnum b : DebutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DebutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DebutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DebutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DebutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DebutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEBUT = "debut";
  @SerializedName(SERIALIZED_NAME_DEBUT)
  private DebutEnum debut;

  /**
   * Gender of the villager. In *Animal Crossing*, only male and female are used.
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    MALE("Male"),
    
    FEMALE("Female");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_ISLANDER = "islander";
  @SerializedName(SERIALIZED_NAME_ISLANDER)
  private Boolean islander;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NH_DETAILS = "nh_details";
  @SerializedName(SERIALIZED_NAME_NH_DETAILS)
  private VillagerNhDetails nhDetails;

  /**
   * The villager&#39;s personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of &#39;sisterly&#39;, other common names include &#39;big sis&#39; and &#39;uchi&#39;.
   */
  @JsonAdapter(PersonalityEnum.Adapter.class)
  public enum PersonalityEnum {
    BIG_SISTER("Big sister"),
    
    CRANKY("Cranky"),
    
    JOCK("Jock"),
    
    LAZY("Lazy"),
    
    NORMAL("Normal"),
    
    PEPPY("Peppy"),
    
    SMUG("Smug"),
    
    SNOOTY("Snooty");

    private String value;

    PersonalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersonalityEnum fromValue(String value) {
      for (PersonalityEnum b : PersonalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PersonalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersonalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersonalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PersonalityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PersonalityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSONALITY = "personality";
  @SerializedName(SERIALIZED_NAME_PERSONALITY)
  private PersonalityEnum personality;

  public static final String SERIALIZED_NAME_PHRASE = "phrase";
  @SerializedName(SERIALIZED_NAME_PHRASE)
  private String phrase;

  public static final String SERIALIZED_NAME_PREV_PHRASES = "prev_phrases";
  @SerializedName(SERIALIZED_NAME_PREV_PHRASES)
  private List<String> prevPhrases = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private String quote;

  /**
   * The villager&#39;s astrological star sign.
   */
  @JsonAdapter(SignEnum.Adapter.class)
  public enum SignEnum {
    ARIES("Aries"),
    
    TAURUS("Taurus"),
    
    GEMINI("Gemini"),
    
    CANCER("Cancer"),
    
    LEO("Leo"),
    
    VIRGO("Virgo"),
    
    LIBRA("Libra"),
    
    SCORPIO("Scorpio"),
    
    SAGITTARIUS("Sagittarius"),
    
    CAPRICORN("Capricorn"),
    
    AQUARIUS("Aquarius"),
    
    PISCES("Pisces");

    private String value;

    SignEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignEnum fromValue(String value) {
      for (SignEnum b : SignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGN = "sign";
  @SerializedName(SERIALIZED_NAME_SIGN)
  private SignEnum sign;

  /**
   * The villager&#39;s species.
   */
  @JsonAdapter(SpeciesEnum.Adapter.class)
  public enum SpeciesEnum {
    ALLIGATOR("Alligator"),
    
    ANTEATER("Anteater"),
    
    BEAR("Bear"),
    
    BEAR_CUB("Bear cub"),
    
    BIRD("Bird"),
    
    BULL("Bull"),
    
    CAT("Cat"),
    
    CHICKEN("Chicken"),
    
    COW("Cow"),
    
    DEER("Deer"),
    
    DOG("Dog"),
    
    DUCK("Duck"),
    
    EAGLE("Eagle"),
    
    ELEPHANT("Elephant"),
    
    FROG("Frog"),
    
    GOAT("Goat"),
    
    GORILLA("Gorilla"),
    
    HAMSTER("Hamster"),
    
    HIPPO("Hippo"),
    
    HORSE("Horse"),
    
    KOALA("Koala"),
    
    KANGAROO("Kangaroo"),
    
    LION("Lion"),
    
    MONKEY("Monkey"),
    
    MOUSE("Mouse"),
    
    OCTOPUS("Octopus"),
    
    OSTRICH("Ostrich"),
    
    PENGUIN("Penguin"),
    
    PIG("Pig"),
    
    RABBIT("Rabbit"),
    
    RHINOCEROS("Rhinoceros"),
    
    SHEEP("Sheep"),
    
    SQUIRREL("Squirrel"),
    
    TIGER("Tiger"),
    
    WOLF("Wolf");

    private String value;

    SpeciesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpeciesEnum fromValue(String value) {
      for (SpeciesEnum b : SpeciesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpeciesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpeciesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpeciesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpeciesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpeciesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPECIES = "species";
  @SerializedName(SERIALIZED_NAME_SPECIES)
  private SpeciesEnum species;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "text_color";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor;

  public static final String SERIALIZED_NAME_TITLE_COLOR = "title_color";
  @SerializedName(SERIALIZED_NAME_TITLE_COLOR)
  private String titleColor;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Villager() {
  }

  public Villager altName(String altName) {
    this.altName = altName;
    return this;
  }

  /**
   * A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.
   * @return altName
   */
  @javax.annotation.Nullable
  public String getAltName() {
    return altName;
  }

  public void setAltName(String altName) {
    this.altName = altName;
  }


  public Villager appearances(List<AppearancesEnum> appearances) {
    this.appearances = appearances;
    return this;
  }

  public Villager addAppearancesItem(AppearancesEnum appearancesItem) {
    if (this.appearances == null) {
      this.appearances = new ArrayList<>();
    }
    this.appearances.add(appearancesItem);
    return this;
  }

  /**
   * List of official media the villager appeared in. &#x60;DNM&#x60; is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); &#x60;AC&#x60; is *Animal Crossing* for GameCube; &#x60;E_PLUS&#x60; is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); &#x60;WW&#x60; is *Wild World* for the DS; &#x60;CF&#x60; is *City Folk* for Wii; &#x60;NL&#x60; is *New Leaf* for 3DS; &#x60;WA&#x60; is *Welcome amiibo*, the *New Leaf* expansion; &#x60;NH&#x60; is *New Horizons* for Switch; &#x60;FILM&#x60; is the *Doubutsu no Mori* Japan-exclusive film; &#x60;HHD&#x60; is *Happy Home Designer* for the Wii; and &#x60;PC&#x60; is *Pocket Camp* for mobile.
   * @return appearances
   */
  @javax.annotation.Nullable
  public List<AppearancesEnum> getAppearances() {
    return appearances;
  }

  public void setAppearances(List<AppearancesEnum> appearances) {
    this.appearances = appearances;
  }


  public Villager birthdayDay(String birthdayDay) {
    this.birthdayDay = birthdayDay;
    return this;
  }

  /**
   * Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn&#39;t appear in *Wild World* or any later games, this field will be an empty string.
   * @return birthdayDay
   */
  @javax.annotation.Nullable
  public String getBirthdayDay() {
    return birthdayDay;
  }

  public void setBirthdayDay(String birthdayDay) {
    this.birthdayDay = birthdayDay;
  }


  public Villager birthdayMonth(String birthdayMonth) {
    this.birthdayMonth = birthdayMonth;
    return this;
  }

  /**
   * Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn&#39;t appear in *Wild World* or any later games, this field will be an empty string.
   * @return birthdayMonth
   */
  @javax.annotation.Nullable
  public String getBirthdayMonth() {
    return birthdayMonth;
  }

  public void setBirthdayMonth(String birthdayMonth) {
    this.birthdayMonth = birthdayMonth;
  }


  public Villager clothing(String clothing) {
    this.clothing = clothing;
    return this;
  }

  /**
   * The villager&#39;s default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).
   * @return clothing
   */
  @javax.annotation.Nullable
  public String getClothing() {
    return clothing;
  }

  public void setClothing(String clothing) {
    this.clothing = clothing;
  }


  public Villager debut(DebutEnum debut) {
    this.debut = debut;
    return this;
  }

  /**
   * The first *Animal Crossing* game the villager appeared in. &#x60;DNM&#x60; is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); &#x60;AC&#x60; is *Animal Crossing* for GameCube; &#x60;E_PLUS&#x60; is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); &#x60;WW&#x60; is *Wild World* for the DS; &#x60;CF&#x60; is *City Folk* for Wii; &#x60;NL&#x60; is *New Leaf* for 3DS; &#x60;WA&#x60; is *Welcome amiibo*, the *New Leaf* expansion; &#x60;NH&#x60; is *New Horizons* for Switch; &#x60;FILM&#x60; is the *Doubutsu no Mori* Japan-exclusive film; &#x60;HHD&#x60; is *Happy Home Designer* for the Wii; and &#x60;PC&#x60; is *Pocket Camp* for mobile.
   * @return debut
   */
  @javax.annotation.Nullable
  public DebutEnum getDebut() {
    return debut;
  }

  public void setDebut(DebutEnum debut) {
    this.debut = debut;
  }


  public Villager gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Gender of the villager. In *Animal Crossing*, only male and female are used.
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public Villager id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The game&#39;s internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Villager imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the villager from the latest game the villager appeared in.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Villager islander(Boolean islander) {
    this.islander = islander;
    return this;
  }

  /**
   * Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.
   * @return islander
   */
  @javax.annotation.Nullable
  public Boolean getIslander() {
    return islander;
  }

  public void setIslander(Boolean islander) {
    this.islander = islander;
  }


  public Villager name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the villager.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Villager nhDetails(VillagerNhDetails nhDetails) {
    this.nhDetails = nhDetails;
    return this;
  }

  /**
   * Get nhDetails
   * @return nhDetails
   */
  @javax.annotation.Nullable
  public VillagerNhDetails getNhDetails() {
    return nhDetails;
  }

  public void setNhDetails(VillagerNhDetails nhDetails) {
    this.nhDetails = nhDetails;
  }


  public Villager personality(PersonalityEnum personality) {
    this.personality = personality;
    return this;
  }

  /**
   * The villager&#39;s personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of &#39;sisterly&#39;, other common names include &#39;big sis&#39; and &#39;uchi&#39;.
   * @return personality
   */
  @javax.annotation.Nullable
  public PersonalityEnum getPersonality() {
    return personality;
  }

  public void setPersonality(PersonalityEnum personality) {
    this.personality = personality;
  }


  public Villager phrase(String phrase) {
    this.phrase = phrase;
    return this;
  }

  /**
   * The villager&#39;s default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).
   * @return phrase
   */
  @javax.annotation.Nullable
  public String getPhrase() {
    return phrase;
  }

  public void setPhrase(String phrase) {
    this.phrase = phrase;
  }


  public Villager prevPhrases(List<String> prevPhrases) {
    this.prevPhrases = prevPhrases;
    return this;
  }

  public Villager addPrevPhrasesItem(String prevPhrasesItem) {
    if (this.prevPhrases == null) {
      this.prevPhrases = new ArrayList<>();
    }
    this.prevPhrases.add(prevPhrasesItem);
    return this;
  }

  /**
   * Any phrases used in previous *Animal Crossing* installations. May be empty.
   * @return prevPhrases
   */
  @javax.annotation.Nullable
  public List<String> getPrevPhrases() {
    return prevPhrases;
  }

  public void setPrevPhrases(List<String> prevPhrases) {
    this.prevPhrases = prevPhrases;
  }


  public Villager quote(String quote) {
    this.quote = quote;
    return this;
  }

  /**
   * The villager&#39;s quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.
   * @return quote
   */
  @javax.annotation.Nullable
  public String getQuote() {
    return quote;
  }

  public void setQuote(String quote) {
    this.quote = quote;
  }


  public Villager sign(SignEnum sign) {
    this.sign = sign;
    return this;
  }

  /**
   * The villager&#39;s astrological star sign.
   * @return sign
   */
  @javax.annotation.Nullable
  public SignEnum getSign() {
    return sign;
  }

  public void setSign(SignEnum sign) {
    this.sign = sign;
  }


  public Villager species(SpeciesEnum species) {
    this.species = species;
    return this;
  }

  /**
   * The villager&#39;s species.
   * @return species
   */
  @javax.annotation.Nullable
  public SpeciesEnum getSpecies() {
    return species;
  }

  public void setSpecies(SpeciesEnum species) {
    this.species = species;
  }


  public Villager textColor(String textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * The HTML color code of the text of the villager&#39;s name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.
   * @return textColor
   */
  @javax.annotation.Nullable
  public String getTextColor() {
    return textColor;
  }

  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }


  public Villager titleColor(String titleColor) {
    this.titleColor = titleColor;
    return this;
  }

  /**
   * The HTML color code of the background of the villager&#39;s name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.
   * @return titleColor
   */
  @javax.annotation.Nullable
  public String getTitleColor() {
    return titleColor;
  }

  public void setTitleColor(String titleColor) {
    this.titleColor = titleColor;
  }


  public Villager url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Villager villager = (Villager) o;
    return Objects.equals(this.altName, villager.altName) &&
        Objects.equals(this.appearances, villager.appearances) &&
        Objects.equals(this.birthdayDay, villager.birthdayDay) &&
        Objects.equals(this.birthdayMonth, villager.birthdayMonth) &&
        Objects.equals(this.clothing, villager.clothing) &&
        Objects.equals(this.debut, villager.debut) &&
        Objects.equals(this.gender, villager.gender) &&
        Objects.equals(this.id, villager.id) &&
        Objects.equals(this.imageUrl, villager.imageUrl) &&
        Objects.equals(this.islander, villager.islander) &&
        Objects.equals(this.name, villager.name) &&
        Objects.equals(this.nhDetails, villager.nhDetails) &&
        Objects.equals(this.personality, villager.personality) &&
        Objects.equals(this.phrase, villager.phrase) &&
        Objects.equals(this.prevPhrases, villager.prevPhrases) &&
        Objects.equals(this.quote, villager.quote) &&
        Objects.equals(this.sign, villager.sign) &&
        Objects.equals(this.species, villager.species) &&
        Objects.equals(this.textColor, villager.textColor) &&
        Objects.equals(this.titleColor, villager.titleColor) &&
        Objects.equals(this.url, villager.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altName, appearances, birthdayDay, birthdayMonth, clothing, debut, gender, id, imageUrl, islander, name, nhDetails, personality, phrase, prevPhrases, quote, sign, species, textColor, titleColor, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Villager {\n");
    sb.append("    altName: ").append(toIndentedString(altName)).append("\n");
    sb.append("    appearances: ").append(toIndentedString(appearances)).append("\n");
    sb.append("    birthdayDay: ").append(toIndentedString(birthdayDay)).append("\n");
    sb.append("    birthdayMonth: ").append(toIndentedString(birthdayMonth)).append("\n");
    sb.append("    clothing: ").append(toIndentedString(clothing)).append("\n");
    sb.append("    debut: ").append(toIndentedString(debut)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    islander: ").append(toIndentedString(islander)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nhDetails: ").append(toIndentedString(nhDetails)).append("\n");
    sb.append("    personality: ").append(toIndentedString(personality)).append("\n");
    sb.append("    phrase: ").append(toIndentedString(phrase)).append("\n");
    sb.append("    prevPhrases: ").append(toIndentedString(prevPhrases)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    sign: ").append(toIndentedString(sign)).append("\n");
    sb.append("    species: ").append(toIndentedString(species)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    titleColor: ").append(toIndentedString(titleColor)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alt_name");
    openapiFields.add("appearances");
    openapiFields.add("birthday_day");
    openapiFields.add("birthday_month");
    openapiFields.add("clothing");
    openapiFields.add("debut");
    openapiFields.add("gender");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("islander");
    openapiFields.add("name");
    openapiFields.add("nh_details");
    openapiFields.add("personality");
    openapiFields.add("phrase");
    openapiFields.add("prev_phrases");
    openapiFields.add("quote");
    openapiFields.add("sign");
    openapiFields.add("species");
    openapiFields.add("text_color");
    openapiFields.add("title_color");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Villager
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Villager.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Villager is not found in the empty JSON string", Villager.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Villager.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Villager` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alt_name") != null && !jsonObj.get("alt_name").isJsonNull()) && !jsonObj.get("alt_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("appearances") != null && !jsonObj.get("appearances").isJsonNull() && !jsonObj.get("appearances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appearances` to be an array in the JSON string but got `%s`", jsonObj.get("appearances").toString()));
      }
      if ((jsonObj.get("birthday_day") != null && !jsonObj.get("birthday_day").isJsonNull()) && !jsonObj.get("birthday_day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday_day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday_day").toString()));
      }
      if ((jsonObj.get("birthday_month") != null && !jsonObj.get("birthday_month").isJsonNull()) && !jsonObj.get("birthday_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday_month").toString()));
      }
      if ((jsonObj.get("clothing") != null && !jsonObj.get("clothing").isJsonNull()) && !jsonObj.get("clothing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clothing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clothing").toString()));
      }
      if ((jsonObj.get("debut") != null && !jsonObj.get("debut").isJsonNull()) && !jsonObj.get("debut").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debut` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debut").toString()));
      }
      // validate the optional field `debut`
      if (jsonObj.get("debut") != null && !jsonObj.get("debut").isJsonNull()) {
        DebutEnum.validateJsonElement(jsonObj.get("debut"));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nh_details`
      if (jsonObj.get("nh_details") != null && !jsonObj.get("nh_details").isJsonNull()) {
        VillagerNhDetails.validateJsonElement(jsonObj.get("nh_details"));
      }
      if ((jsonObj.get("personality") != null && !jsonObj.get("personality").isJsonNull()) && !jsonObj.get("personality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personality").toString()));
      }
      // validate the optional field `personality`
      if (jsonObj.get("personality") != null && !jsonObj.get("personality").isJsonNull()) {
        PersonalityEnum.validateJsonElement(jsonObj.get("personality"));
      }
      if ((jsonObj.get("phrase") != null && !jsonObj.get("phrase").isJsonNull()) && !jsonObj.get("phrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phrase").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prev_phrases") != null && !jsonObj.get("prev_phrases").isJsonNull() && !jsonObj.get("prev_phrases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev_phrases` to be an array in the JSON string but got `%s`", jsonObj.get("prev_phrases").toString()));
      }
      if ((jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) && !jsonObj.get("quote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote").toString()));
      }
      if ((jsonObj.get("sign") != null && !jsonObj.get("sign").isJsonNull()) && !jsonObj.get("sign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sign").toString()));
      }
      // validate the optional field `sign`
      if (jsonObj.get("sign") != null && !jsonObj.get("sign").isJsonNull()) {
        SignEnum.validateJsonElement(jsonObj.get("sign"));
      }
      if ((jsonObj.get("species") != null && !jsonObj.get("species").isJsonNull()) && !jsonObj.get("species").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `species` to be a primitive type in the JSON string but got `%s`", jsonObj.get("species").toString()));
      }
      // validate the optional field `species`
      if (jsonObj.get("species") != null && !jsonObj.get("species").isJsonNull()) {
        SpeciesEnum.validateJsonElement(jsonObj.get("species"));
      }
      if ((jsonObj.get("text_color") != null && !jsonObj.get("text_color").isJsonNull()) && !jsonObj.get("text_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_color").toString()));
      }
      if ((jsonObj.get("title_color") != null && !jsonObj.get("title_color").isJsonNull()) && !jsonObj.get("title_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_color").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Villager.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Villager' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Villager> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Villager.class));

       return (TypeAdapter<T>) new TypeAdapter<Villager>() {
           @Override
           public void write(JsonWriter out, Villager value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Villager read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Villager given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Villager
   * @throws IOException if the JSON string is invalid with respect to Villager
   */
  public static Villager fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Villager.class);
  }

  /**
   * Convert an instance of Villager to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

