/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHFishNorth;
import org.openapitools.client.model.NHFishSouth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHFish
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHFish {
  public static final String SERIALIZED_NAME_CATCHPHRASES = "catchphrases";
  @SerializedName(SERIALIZED_NAME_CATCHPHRASES)
  private List<String> catchphrases = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORTH = "north";
  @SerializedName(SERIALIZED_NAME_NORTH)
  private NHFishNorth north;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private String rarity;

  public static final String SERIALIZED_NAME_RENDER_URL = "render_url";
  @SerializedName(SERIALIZED_NAME_RENDER_URL)
  private String renderUrl;

  public static final String SERIALIZED_NAME_SELL_CJ = "sell_cj";
  @SerializedName(SERIALIZED_NAME_SELL_CJ)
  private Integer sellCj;

  public static final String SERIALIZED_NAME_SELL_NOOK = "sell_nook";
  @SerializedName(SERIALIZED_NAME_SELL_NOOK)
  private Integer sellNook;

  /**
   * The size of the fish&#39;s shadow.
   */
  @JsonAdapter(ShadowSizeEnum.Adapter.class)
  public enum ShadowSizeEnum {
    X_SMALL("X-Small"),
    
    SMALL("Small"),
    
    MEDIUM("Medium"),
    
    MEDIUM_W_FIN("Medium w/Fin"),
    
    LARGE("Large"),
    
    LARGE_W_FIN("Large w/Fin"),
    
    X_LARGE("X-Large"),
    
    XX_LARGE("XX-Large"),
    
    LONG("Long");

    private String value;

    ShadowSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShadowSizeEnum fromValue(String value) {
      for (ShadowSizeEnum b : ShadowSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShadowSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShadowSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShadowSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShadowSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShadowSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHADOW_SIZE = "shadow_size";
  @SerializedName(SERIALIZED_NAME_SHADOW_SIZE)
  private ShadowSizeEnum shadowSize;

  public static final String SERIALIZED_NAME_SOUTH = "south";
  @SerializedName(SERIALIZED_NAME_SOUTH)
  private NHFishSouth south;

  public static final String SERIALIZED_NAME_TANK_LENGTH = "tank_length";
  @SerializedName(SERIALIZED_NAME_TANK_LENGTH)
  private Float tankLength;

  public static final String SERIALIZED_NAME_TANK_WIDTH = "tank_width";
  @SerializedName(SERIALIZED_NAME_TANK_WIDTH)
  private Float tankWidth;

  public static final String SERIALIZED_NAME_TOTAL_CATCH = "total_catch";
  @SerializedName(SERIALIZED_NAME_TOTAL_CATCH)
  private Integer totalCatch;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public NHFish() {
  }

  public NHFish catchphrases(List<String> catchphrases) {
    this.catchphrases = catchphrases;
    return this;
  }

  public NHFish addCatchphrasesItem(String catchphrasesItem) {
    if (this.catchphrases == null) {
      this.catchphrases = new ArrayList<>();
    }
    this.catchphrases.add(catchphrasesItem);
    return this;
  }

  /**
   * An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.
   * @return catchphrases
   */
  @javax.annotation.Nullable
  public List<String> getCatchphrases() {
    return catchphrases;
  }

  public void setCatchphrases(List<String> catchphrases) {
    this.catchphrases = catchphrases;
  }


  public NHFish imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the fish.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public NHFish location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Short descriptor of where the fish can be found.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public NHFish name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the fish.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHFish north(NHFishNorth north) {
    this.north = north;
    return this;
  }

  /**
   * Get north
   * @return north
   */
  @javax.annotation.Nullable
  public NHFishNorth getNorth() {
    return north;
  }

  public void setNorth(NHFishNorth north) {
    this.north = north;
  }


  public NHFish number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * In-game fish number, marking position in the Critterpedia.
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public NHFish rarity(String rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.
   * @return rarity
   */
  @javax.annotation.Nullable
  public String getRarity() {
    return rarity;
  }

  public void setRarity(String rarity) {
    this.rarity = rarity;
  }


  public NHFish renderUrl(String renderUrl) {
    this.renderUrl = renderUrl;
    return this;
  }

  /**
   * Render of the fish.
   * @return renderUrl
   */
  @javax.annotation.Nullable
  public String getRenderUrl() {
    return renderUrl;
  }

  public void setRenderUrl(String renderUrl) {
    this.renderUrl = renderUrl;
  }


  public NHFish sellCj(Integer sellCj) {
    this.sellCj = sellCj;
    return this;
  }

  /**
   * The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of &#x60;sell_nook&#x60;.
   * @return sellCj
   */
  @javax.annotation.Nullable
  public Integer getSellCj() {
    return sellCj;
  }

  public void setSellCj(Integer sellCj) {
    this.sellCj = sellCj;
  }


  public NHFish sellNook(Integer sellNook) {
    this.sellNook = sellNook;
    return this;
  }

  /**
   * The number of Bells the fish can be sold to Nook&#39;s store for.
   * @return sellNook
   */
  @javax.annotation.Nullable
  public Integer getSellNook() {
    return sellNook;
  }

  public void setSellNook(Integer sellNook) {
    this.sellNook = sellNook;
  }


  public NHFish shadowSize(ShadowSizeEnum shadowSize) {
    this.shadowSize = shadowSize;
    return this;
  }

  /**
   * The size of the fish&#39;s shadow.
   * @return shadowSize
   */
  @javax.annotation.Nullable
  public ShadowSizeEnum getShadowSize() {
    return shadowSize;
  }

  public void setShadowSize(ShadowSizeEnum shadowSize) {
    this.shadowSize = shadowSize;
  }


  public NHFish south(NHFishSouth south) {
    this.south = south;
    return this;
  }

  /**
   * Get south
   * @return south
   */
  @javax.annotation.Nullable
  public NHFishSouth getSouth() {
    return south;
  }

  public void setSouth(NHFishSouth south) {
    this.south = south;
  }


  public NHFish tankLength(Float tankLength) {
    this.tankLength = tankLength;
    return this;
  }

  /**
   * The length of the tank when the fish is placed as a furniture item.
   * @return tankLength
   */
  @javax.annotation.Nullable
  public Float getTankLength() {
    return tankLength;
  }

  public void setTankLength(Float tankLength) {
    this.tankLength = tankLength;
  }


  public NHFish tankWidth(Float tankWidth) {
    this.tankWidth = tankWidth;
    return this;
  }

  /**
   * The width of the tank when the fish is placed as a furniture item.
   * @return tankWidth
   */
  @javax.annotation.Nullable
  public Float getTankWidth() {
    return tankWidth;
  }

  public void setTankWidth(Float tankWidth) {
    this.tankWidth = tankWidth;
  }


  public NHFish totalCatch(Integer totalCatch) {
    this.totalCatch = totalCatch;
    return this;
  }

  /**
   * The total number of fish the player has to have caught before this fish will start spawning.
   * @return totalCatch
   */
  @javax.annotation.Nullable
  public Integer getTotalCatch() {
    return totalCatch;
  }

  public void setTotalCatch(Integer totalCatch) {
    this.totalCatch = totalCatch;
  }


  public NHFish url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHFish nhFish = (NHFish) o;
    return Objects.equals(this.catchphrases, nhFish.catchphrases) &&
        Objects.equals(this.imageUrl, nhFish.imageUrl) &&
        Objects.equals(this.location, nhFish.location) &&
        Objects.equals(this.name, nhFish.name) &&
        Objects.equals(this.north, nhFish.north) &&
        Objects.equals(this.number, nhFish.number) &&
        Objects.equals(this.rarity, nhFish.rarity) &&
        Objects.equals(this.renderUrl, nhFish.renderUrl) &&
        Objects.equals(this.sellCj, nhFish.sellCj) &&
        Objects.equals(this.sellNook, nhFish.sellNook) &&
        Objects.equals(this.shadowSize, nhFish.shadowSize) &&
        Objects.equals(this.south, nhFish.south) &&
        Objects.equals(this.tankLength, nhFish.tankLength) &&
        Objects.equals(this.tankWidth, nhFish.tankWidth) &&
        Objects.equals(this.totalCatch, nhFish.totalCatch) &&
        Objects.equals(this.url, nhFish.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catchphrases, imageUrl, location, name, north, number, rarity, renderUrl, sellCj, sellNook, shadowSize, south, tankLength, tankWidth, totalCatch, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHFish {\n");
    sb.append("    catchphrases: ").append(toIndentedString(catchphrases)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    north: ").append(toIndentedString(north)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    renderUrl: ").append(toIndentedString(renderUrl)).append("\n");
    sb.append("    sellCj: ").append(toIndentedString(sellCj)).append("\n");
    sb.append("    sellNook: ").append(toIndentedString(sellNook)).append("\n");
    sb.append("    shadowSize: ").append(toIndentedString(shadowSize)).append("\n");
    sb.append("    south: ").append(toIndentedString(south)).append("\n");
    sb.append("    tankLength: ").append(toIndentedString(tankLength)).append("\n");
    sb.append("    tankWidth: ").append(toIndentedString(tankWidth)).append("\n");
    sb.append("    totalCatch: ").append(toIndentedString(totalCatch)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catchphrases");
    openapiFields.add("image_url");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("north");
    openapiFields.add("number");
    openapiFields.add("rarity");
    openapiFields.add("render_url");
    openapiFields.add("sell_cj");
    openapiFields.add("sell_nook");
    openapiFields.add("shadow_size");
    openapiFields.add("south");
    openapiFields.add("tank_length");
    openapiFields.add("tank_width");
    openapiFields.add("total_catch");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHFish
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHFish.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHFish is not found in the empty JSON string", NHFish.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHFish.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHFish` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("catchphrases") != null && !jsonObj.get("catchphrases").isJsonNull() && !jsonObj.get("catchphrases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `catchphrases` to be an array in the JSON string but got `%s`", jsonObj.get("catchphrases").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `north`
      if (jsonObj.get("north") != null && !jsonObj.get("north").isJsonNull()) {
        NHFishNorth.validateJsonElement(jsonObj.get("north"));
      }
      if ((jsonObj.get("rarity") != null && !jsonObj.get("rarity").isJsonNull()) && !jsonObj.get("rarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rarity").toString()));
      }
      if ((jsonObj.get("render_url") != null && !jsonObj.get("render_url").isJsonNull()) && !jsonObj.get("render_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `render_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("render_url").toString()));
      }
      if ((jsonObj.get("shadow_size") != null && !jsonObj.get("shadow_size").isJsonNull()) && !jsonObj.get("shadow_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shadow_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shadow_size").toString()));
      }
      // validate the optional field `shadow_size`
      if (jsonObj.get("shadow_size") != null && !jsonObj.get("shadow_size").isJsonNull()) {
        ShadowSizeEnum.validateJsonElement(jsonObj.get("shadow_size"));
      }
      // validate the optional field `south`
      if (jsonObj.get("south") != null && !jsonObj.get("south").isJsonNull()) {
        NHFishSouth.validateJsonElement(jsonObj.get("south"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHFish.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHFish' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHFish> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHFish.class));

       return (TypeAdapter<T>) new TypeAdapter<NHFish>() {
           @Override
           public void write(JsonWriter out, NHFish value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHFish read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHFish given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHFish
   * @throws IOException if the JSON string is invalid with respect to NHFish
   */
  public static NHFish fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHFish.class);
  }

  /**
   * Convert an instance of NHFish to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

