/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHClothingAvailabilityInner;
import org.openapitools.client.model.NHClothingBuyInner;
import org.openapitools.client.model.NHFurnitureVariationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHFurniture
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHFurniture {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private List<NHClothingAvailabilityInner> availability = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private List<NHClothingBuyInner> buy = new ArrayList<>();

  /**
   * The category of item as shown in the player&#39;s inventory.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    HOUSEWARES("Housewares"),
    
    MISCELLANEOUS("Miscellaneous"),
    
    WALL_MOUNTED("Wall-mounted");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CUSTOM_BODY_PART = "custom_body_part";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BODY_PART)
  private String customBodyPart;

  public static final String SERIALIZED_NAME_CUSTOM_KIT_TYPE = "custom_kit_type";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KIT_TYPE)
  private String customKitType;

  public static final String SERIALIZED_NAME_CUSTOM_KITS = "custom_kits";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KITS)
  private Integer customKits;

  public static final String SERIALIZED_NAME_CUSTOM_PATTERN_PART = "custom_pattern_part";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PATTERN_PART)
  private String customPatternPart;

  public static final String SERIALIZED_NAME_CUSTOMIZABLE = "customizable";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZABLE)
  private Boolean customizable;

  public static final String SERIALIZED_NAME_DOOR_DECOR = "door_decor";
  @SerializedName(SERIALIZED_NAME_DOOR_DECOR)
  private Boolean doorDecor;

  /**
   * Gets or Sets functions
   */
  @JsonAdapter(FunctionsEnum.Adapter.class)
  public enum FunctionsEnum {
    TRASH("Trash"),
    
    TOILET("Toilet"),
    
    TABLE("Table"),
    
    STORAGE("Storage"),
    
    STEREO("Stereo"),
    
    SEATING("Seating"),
    
    LIGHTING("Lighting"),
    
    INSTRUMENT("Instrument"),
    
    DRESSER("Dresser"),
    
    BED("Bed"),
    
    AUDIO("Audio");

    private String value;

    FunctionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunctionsEnum fromValue(String value) {
      for (FunctionsEnum b : FunctionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FunctionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunctionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunctionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunctionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FunctionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNCTIONS = "functions";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS)
  private List<FunctionsEnum> functions = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRID_LENGTH = "grid_length";
  @SerializedName(SERIALIZED_NAME_GRID_LENGTH)
  private Float gridLength;

  public static final String SERIALIZED_NAME_GRID_WIDTH = "grid_width";
  @SerializedName(SERIALIZED_NAME_GRID_WIDTH)
  private Float gridWidth;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Float height;

  public static final String SERIALIZED_NAME_HHA_BASE = "hha_base";
  @SerializedName(SERIALIZED_NAME_HHA_BASE)
  private Integer hhaBase;

  public static final String SERIALIZED_NAME_HHA_CATEGORY = "hha_category";
  @SerializedName(SERIALIZED_NAME_HHA_CATEGORY)
  private String hhaCategory;

  public static final String SERIALIZED_NAME_ITEM_SERIES = "item_series";
  @SerializedName(SERIALIZED_NAME_ITEM_SERIES)
  private String itemSeries;

  public static final String SERIALIZED_NAME_ITEM_SET = "item_set";
  @SerializedName(SERIALIZED_NAME_ITEM_SET)
  private String itemSet;

  public static final String SERIALIZED_NAME_LUCKY = "lucky";
  @SerializedName(SERIALIZED_NAME_LUCKY)
  private Boolean lucky;

  /**
   * The season in which the item is lucky (or \&quot;All year\&quot; if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.
   */
  @JsonAdapter(LuckySeasonEnum.Adapter.class)
  public enum LuckySeasonEnum {
    EMPTY(""),
    
    ALL_YEAR("All year"),
    
    SPRING("Spring"),
    
    SUMMER("Summer"),
    
    AUTUMN("Autumn"),
    
    WINTER("Winter");

    private String value;

    LuckySeasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LuckySeasonEnum fromValue(String value) {
      for (LuckySeasonEnum b : LuckySeasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LuckySeasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LuckySeasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LuckySeasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LuckySeasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LuckySeasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LUCKY_SEASON = "lucky_season";
  @SerializedName(SERIALIZED_NAME_LUCKY_SEASON)
  private LuckySeasonEnum luckySeason;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  /**
   * The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.
   */
  @JsonAdapter(PatternTotalEnum.Adapter.class)
  public enum PatternTotalEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8);

    private Integer value;

    PatternTotalEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PatternTotalEnum fromValue(Integer value) {
      for (PatternTotalEnum b : PatternTotalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PatternTotalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PatternTotalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PatternTotalEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PatternTotalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PatternTotalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PATTERN_TOTAL = "pattern_total";
  @SerializedName(SERIALIZED_NAME_PATTERN_TOTAL)
  private PatternTotalEnum patternTotal;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<String> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNLOCKED = "unlocked";
  @SerializedName(SERIALIZED_NAME_UNLOCKED)
  private Boolean unlocked;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  /**
   * The number of variations, between 0 and 8.
   */
  @JsonAdapter(VariationTotalEnum.Adapter.class)
  public enum VariationTotalEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8);

    private Integer value;

    VariationTotalEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariationTotalEnum fromValue(Integer value) {
      for (VariationTotalEnum b : VariationTotalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariationTotalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariationTotalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariationTotalEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return VariationTotalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      VariationTotalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VARIATION_TOTAL = "variation_total";
  @SerializedName(SERIALIZED_NAME_VARIATION_TOTAL)
  private VariationTotalEnum variationTotal;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<NHFurnitureVariationsInner> variations = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_ADDED = "version_added";
  @SerializedName(SERIALIZED_NAME_VERSION_ADDED)
  private String versionAdded;

  public NHFurniture() {
  }

  public NHFurniture availability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
    return this;
  }

  public NHFurniture addAvailabilityItem(NHClothingAvailabilityInner availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

  /**
   * Where the furniture may be obtained from (could be multiple sources). &#x60;from&#x60; is a brief description of the source; &#x60;note&#x60;, when provided, provides additional details.
   * @return availability
   */
  @javax.annotation.Nullable
  public List<NHClothingAvailabilityInner> getAvailability() {
    return availability;
  }

  public void setAvailability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
  }


  public NHFurniture buy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
    return this;
  }

  public NHFurniture addBuyItem(NHClothingBuyInner buyItem) {
    if (this.buy == null) {
      this.buy = new ArrayList<>();
    }
    this.buy.add(buyItem);
    return this;
  }

  /**
   * An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
   * @return buy
   */
  @javax.annotation.Nullable
  public List<NHClothingBuyInner> getBuy() {
    return buy;
  }

  public void setBuy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
  }


  public NHFurniture category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of item as shown in the player&#39;s inventory.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public NHFurniture customBodyPart(String customBodyPart) {
    this.customBodyPart = customBodyPart;
    return this;
  }

  /**
   * If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \&quot;Bamboo\&quot; as the bamboo color is able to be customized.
   * @return customBodyPart
   */
  @javax.annotation.Nullable
  public String getCustomBodyPart() {
    return customBodyPart;
  }

  public void setCustomBodyPart(String customBodyPart) {
    this.customBodyPart = customBodyPart;
  }


  public NHFurniture customKitType(String customKitType) {
    this.customKitType = customKitType;
    return this;
  }

  /**
   * The item that needs to be consumed to customize this item. The vast majority are \&quot;Customization Kit\&quot;, but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.
   * @return customKitType
   */
  @javax.annotation.Nullable
  public String getCustomKitType() {
    return customKitType;
  }

  public void setCustomKitType(String customKitType) {
    this.customKitType = customKitType;
  }


  public NHFurniture customKits(Integer customKits) {
    this.customKits = customKits;
    return this;
  }

  /**
   * The number of &#x60;custom_kit_type&#x60;s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
   * @return customKits
   */
  @javax.annotation.Nullable
  public Integer getCustomKits() {
    return customKits;
  }

  public void setCustomKits(Integer customKits) {
    this.customKits = customKits;
  }


  public NHFurniture customPatternPart(String customPatternPart) {
    this.customPatternPart = customPatternPart;
    return this;
  }

  /**
   * If the item&#39;s pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is \&quot;Cushion\&quot; as the cushion on the chair may have a pattern applied.
   * @return customPatternPart
   */
  @javax.annotation.Nullable
  public String getCustomPatternPart() {
    return customPatternPart;
  }

  public void setCustomPatternPart(String customPatternPart) {
    this.customPatternPart = customPatternPart;
  }


  public NHFurniture customizable(Boolean customizable) {
    this.customizable = customizable;
    return this;
  }

  /**
   * Whether or not the item is customizable via a crafting table.
   * @return customizable
   */
  @javax.annotation.Nullable
  public Boolean getCustomizable() {
    return customizable;
  }

  public void setCustomizable(Boolean customizable) {
    this.customizable = customizable;
  }


  public NHFurniture doorDecor(Boolean doorDecor) {
    this.doorDecor = doorDecor;
    return this;
  }

  /**
   * Whether this item may be placed on the exterior door of the player&#39;s house.
   * @return doorDecor
   */
  @javax.annotation.Nullable
  public Boolean getDoorDecor() {
    return doorDecor;
  }

  public void setDoorDecor(Boolean doorDecor) {
    this.doorDecor = doorDecor;
  }


  public NHFurniture functions(List<FunctionsEnum> functions) {
    this.functions = functions;
    return this;
  }

  public NHFurniture addFunctionsItem(FunctionsEnum functionsItem) {
    if (this.functions == null) {
      this.functions = new ArrayList<>();
    }
    this.functions.add(functionsItem);
    return this;
  }

  /**
   * A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have \&quot;Table\&quot; as a function..
   * @return functions
   */
  @javax.annotation.Nullable
  public List<FunctionsEnum> getFunctions() {
    return functions;
  }

  public void setFunctions(List<FunctionsEnum> functions) {
    this.functions = functions;
  }


  public NHFurniture gridLength(Float gridLength) {
    this.gridLength = gridLength;
    return this;
  }

  /**
   * The number of lengthwise grid spaces this item takes up.
   * @return gridLength
   */
  @javax.annotation.Nullable
  public Float getGridLength() {
    return gridLength;
  }

  public void setGridLength(Float gridLength) {
    this.gridLength = gridLength;
  }


  public NHFurniture gridWidth(Float gridWidth) {
    this.gridWidth = gridWidth;
    return this;
  }

  /**
   * The number of widthwise grid spaces this item takes up.
   * @return gridWidth
   */
  @javax.annotation.Nullable
  public Float getGridWidth() {
    return gridWidth;
  }

  public void setGridWidth(Float gridWidth) {
    this.gridWidth = gridWidth;
  }


  public NHFurniture height(Float height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.
   * @return height
   */
  @javax.annotation.Nullable
  public Float getHeight() {
    return height;
  }

  public void setHeight(Float height) {
    this.height = height;
  }


  public NHFurniture hhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
    return this;
  }

  /**
   * The base value that the item provides to a player&#39;s Happy Home Academy score when placed in their home.
   * @return hhaBase
   */
  @javax.annotation.Nullable
  public Integer getHhaBase() {
    return hhaBase;
  }

  public void setHhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
  }


  public NHFurniture hhaCategory(String hhaCategory) {
    this.hhaCategory = hhaCategory;
    return this;
  }

  /**
   * The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
   * @return hhaCategory
   */
  @javax.annotation.Nullable
  public String getHhaCategory() {
    return hhaCategory;
  }

  public void setHhaCategory(String hhaCategory) {
    this.hhaCategory = hhaCategory;
  }


  public NHFurniture itemSeries(String itemSeries) {
    this.itemSeries = itemSeries;
    return this;
  }

  /**
   * The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
   * @return itemSeries
   */
  @javax.annotation.Nullable
  public String getItemSeries() {
    return itemSeries;
  }

  public void setItemSeries(String itemSeries) {
    this.itemSeries = itemSeries;
  }


  public NHFurniture itemSet(String itemSet) {
    this.itemSet = itemSet;
    return this;
  }

  /**
   * The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
   * @return itemSet
   */
  @javax.annotation.Nullable
  public String getItemSet() {
    return itemSet;
  }

  public void setItemSet(String itemSet) {
    this.itemSet = itemSet;
  }


  public NHFurniture lucky(Boolean lucky) {
    this.lucky = lucky;
    return this;
  }

  /**
   * Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the &#x60;lucky_season&#x60; field.
   * @return lucky
   */
  @javax.annotation.Nullable
  public Boolean getLucky() {
    return lucky;
  }

  public void setLucky(Boolean lucky) {
    this.lucky = lucky;
  }


  public NHFurniture luckySeason(LuckySeasonEnum luckySeason) {
    this.luckySeason = luckySeason;
    return this;
  }

  /**
   * The season in which the item is lucky (or \&quot;All year\&quot; if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.
   * @return luckySeason
   */
  @javax.annotation.Nullable
  public LuckySeasonEnum getLuckySeason() {
    return luckySeason;
  }

  public void setLuckySeason(LuckySeasonEnum luckySeason) {
    this.luckySeason = luckySeason;
  }


  public NHFurniture name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the furniture.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHFurniture notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Any additional miscellaneous information about the item, such as a name change from a past update.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public NHFurniture patternTotal(PatternTotalEnum patternTotal) {
    this.patternTotal = patternTotal;
    return this;
  }

  /**
   * The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.
   * @return patternTotal
   */
  @javax.annotation.Nullable
  public PatternTotalEnum getPatternTotal() {
    return patternTotal;
  }

  public void setPatternTotal(PatternTotalEnum patternTotal) {
    this.patternTotal = patternTotal;
  }


  public NHFurniture sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * The number of Bells the item can be sold to Nook&#39;s store for.
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHFurniture tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \&quot;Chair\&quot;, \&quot;Musical Instrument\&quot;, and \&quot;Mario\&quot;. If the item does not have a tag, this will be an empty string.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public NHFurniture themes(List<String> themes) {
    this.themes = themes;
    return this;
  }

  public NHFurniture addThemesItem(String themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
   * @return themes
   */
  @javax.annotation.Nullable
  public List<String> getThemes() {
    return themes;
  }

  public void setThemes(List<String> themes) {
    this.themes = themes;
  }


  public NHFurniture unlocked(Boolean unlocked) {
    this.unlocked = unlocked;
    return this;
  }

  /**
   * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren&#39;t actually made available until a subsequent update unlocks them.
   * @return unlocked
   */
  @javax.annotation.Nullable
  public Boolean getUnlocked() {
    return unlocked;
  }

  public void setUnlocked(Boolean unlocked) {
    this.unlocked = unlocked;
  }


  public NHFurniture url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NHFurniture variationTotal(VariationTotalEnum variationTotal) {
    this.variationTotal = variationTotal;
    return this;
  }

  /**
   * The number of variations, between 0 and 8.
   * @return variationTotal
   */
  @javax.annotation.Nullable
  public VariationTotalEnum getVariationTotal() {
    return variationTotal;
  }

  public void setVariationTotal(VariationTotalEnum variationTotal) {
    this.variationTotal = variationTotal;
  }


  public NHFurniture variations(List<NHFurnitureVariationsInner> variations) {
    this.variations = variations;
    return this;
  }

  public NHFurniture addVariationsItem(NHFurnitureVariationsInner variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

  /**
   * An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the &#x60;variation&#x60; or &#x60;pattern&#x60; fields will be empty strings. Furniture with multiple variations will have the &#x60;variation&#x60; and/or &#x60;pattern&#x60; fields defined depending on whether the furniture varies by body variety, pattern, or both.
   * @return variations
   */
  @javax.annotation.Nullable
  public List<NHFurnitureVariationsInner> getVariations() {
    return variations;
  }

  public void setVariations(List<NHFurnitureVariationsInner> variations) {
    this.variations = variations;
  }


  public NHFurniture versionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
    return this;
  }

  /**
   * The version of *New Horizons* that the item was added. Items that were included at the game&#39;s launch have version \&quot;1.0.0\&quot;.
   * @return versionAdded
   */
  @javax.annotation.Nullable
  public String getVersionAdded() {
    return versionAdded;
  }

  public void setVersionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHFurniture nhFurniture = (NHFurniture) o;
    return Objects.equals(this.availability, nhFurniture.availability) &&
        Objects.equals(this.buy, nhFurniture.buy) &&
        Objects.equals(this.category, nhFurniture.category) &&
        Objects.equals(this.customBodyPart, nhFurniture.customBodyPart) &&
        Objects.equals(this.customKitType, nhFurniture.customKitType) &&
        Objects.equals(this.customKits, nhFurniture.customKits) &&
        Objects.equals(this.customPatternPart, nhFurniture.customPatternPart) &&
        Objects.equals(this.customizable, nhFurniture.customizable) &&
        Objects.equals(this.doorDecor, nhFurniture.doorDecor) &&
        Objects.equals(this.functions, nhFurniture.functions) &&
        Objects.equals(this.gridLength, nhFurniture.gridLength) &&
        Objects.equals(this.gridWidth, nhFurniture.gridWidth) &&
        Objects.equals(this.height, nhFurniture.height) &&
        Objects.equals(this.hhaBase, nhFurniture.hhaBase) &&
        Objects.equals(this.hhaCategory, nhFurniture.hhaCategory) &&
        Objects.equals(this.itemSeries, nhFurniture.itemSeries) &&
        Objects.equals(this.itemSet, nhFurniture.itemSet) &&
        Objects.equals(this.lucky, nhFurniture.lucky) &&
        Objects.equals(this.luckySeason, nhFurniture.luckySeason) &&
        Objects.equals(this.name, nhFurniture.name) &&
        Objects.equals(this.notes, nhFurniture.notes) &&
        Objects.equals(this.patternTotal, nhFurniture.patternTotal) &&
        Objects.equals(this.sell, nhFurniture.sell) &&
        Objects.equals(this.tag, nhFurniture.tag) &&
        Objects.equals(this.themes, nhFurniture.themes) &&
        Objects.equals(this.unlocked, nhFurniture.unlocked) &&
        Objects.equals(this.url, nhFurniture.url) &&
        Objects.equals(this.variationTotal, nhFurniture.variationTotal) &&
        Objects.equals(this.variations, nhFurniture.variations) &&
        Objects.equals(this.versionAdded, nhFurniture.versionAdded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, buy, category, customBodyPart, customKitType, customKits, customPatternPart, customizable, doorDecor, functions, gridLength, gridWidth, height, hhaBase, hhaCategory, itemSeries, itemSet, lucky, luckySeason, name, notes, patternTotal, sell, tag, themes, unlocked, url, variationTotal, variations, versionAdded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHFurniture {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    customBodyPart: ").append(toIndentedString(customBodyPart)).append("\n");
    sb.append("    customKitType: ").append(toIndentedString(customKitType)).append("\n");
    sb.append("    customKits: ").append(toIndentedString(customKits)).append("\n");
    sb.append("    customPatternPart: ").append(toIndentedString(customPatternPart)).append("\n");
    sb.append("    customizable: ").append(toIndentedString(customizable)).append("\n");
    sb.append("    doorDecor: ").append(toIndentedString(doorDecor)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    gridLength: ").append(toIndentedString(gridLength)).append("\n");
    sb.append("    gridWidth: ").append(toIndentedString(gridWidth)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hhaBase: ").append(toIndentedString(hhaBase)).append("\n");
    sb.append("    hhaCategory: ").append(toIndentedString(hhaCategory)).append("\n");
    sb.append("    itemSeries: ").append(toIndentedString(itemSeries)).append("\n");
    sb.append("    itemSet: ").append(toIndentedString(itemSet)).append("\n");
    sb.append("    lucky: ").append(toIndentedString(lucky)).append("\n");
    sb.append("    luckySeason: ").append(toIndentedString(luckySeason)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    patternTotal: ").append(toIndentedString(patternTotal)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    unlocked: ").append(toIndentedString(unlocked)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    variationTotal: ").append(toIndentedString(variationTotal)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("    versionAdded: ").append(toIndentedString(versionAdded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("buy");
    openapiFields.add("category");
    openapiFields.add("custom_body_part");
    openapiFields.add("custom_kit_type");
    openapiFields.add("custom_kits");
    openapiFields.add("custom_pattern_part");
    openapiFields.add("customizable");
    openapiFields.add("door_decor");
    openapiFields.add("functions");
    openapiFields.add("grid_length");
    openapiFields.add("grid_width");
    openapiFields.add("height");
    openapiFields.add("hha_base");
    openapiFields.add("hha_category");
    openapiFields.add("item_series");
    openapiFields.add("item_set");
    openapiFields.add("lucky");
    openapiFields.add("lucky_season");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("pattern_total");
    openapiFields.add("sell");
    openapiFields.add("tag");
    openapiFields.add("themes");
    openapiFields.add("unlocked");
    openapiFields.add("url");
    openapiFields.add("variation_total");
    openapiFields.add("variations");
    openapiFields.add("version_added");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHFurniture
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHFurniture.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHFurniture is not found in the empty JSON string", NHFurniture.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHFurniture.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHFurniture` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        JsonArray jsonArrayavailability = jsonObj.getAsJsonArray("availability");
        if (jsonArrayavailability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability` to be an array in the JSON string but got `%s`", jsonObj.get("availability").toString()));
          }

          // validate the optional field `availability` (array)
          for (int i = 0; i < jsonArrayavailability.size(); i++) {
            NHClothingAvailabilityInner.validateJsonElement(jsonArrayavailability.get(i));
          };
        }
      }
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        JsonArray jsonArraybuy = jsonObj.getAsJsonArray("buy");
        if (jsonArraybuy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buy` to be an array in the JSON string but got `%s`", jsonObj.get("buy").toString()));
          }

          // validate the optional field `buy` (array)
          for (int i = 0; i < jsonArraybuy.size(); i++) {
            NHClothingBuyInner.validateJsonElement(jsonArraybuy.get(i));
          };
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("custom_body_part") != null && !jsonObj.get("custom_body_part").isJsonNull()) && !jsonObj.get("custom_body_part").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_body_part` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_body_part").toString()));
      }
      if ((jsonObj.get("custom_kit_type") != null && !jsonObj.get("custom_kit_type").isJsonNull()) && !jsonObj.get("custom_kit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_kit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_kit_type").toString()));
      }
      if ((jsonObj.get("custom_pattern_part") != null && !jsonObj.get("custom_pattern_part").isJsonNull()) && !jsonObj.get("custom_pattern_part").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_pattern_part` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_pattern_part").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("functions") != null && !jsonObj.get("functions").isJsonNull() && !jsonObj.get("functions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `functions` to be an array in the JSON string but got `%s`", jsonObj.get("functions").toString()));
      }
      if ((jsonObj.get("hha_category") != null && !jsonObj.get("hha_category").isJsonNull()) && !jsonObj.get("hha_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hha_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hha_category").toString()));
      }
      if ((jsonObj.get("item_series") != null && !jsonObj.get("item_series").isJsonNull()) && !jsonObj.get("item_series").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_series` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_series").toString()));
      }
      if ((jsonObj.get("item_set") != null && !jsonObj.get("item_set").isJsonNull()) && !jsonObj.get("item_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_set").toString()));
      }
      if ((jsonObj.get("lucky_season") != null && !jsonObj.get("lucky_season").isJsonNull()) && !jsonObj.get("lucky_season").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lucky_season` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lucky_season").toString()));
      }
      // validate the optional field `lucky_season`
      if (jsonObj.get("lucky_season") != null && !jsonObj.get("lucky_season").isJsonNull()) {
        LuckySeasonEnum.validateJsonElement(jsonObj.get("lucky_season"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `pattern_total`
      if (jsonObj.get("pattern_total") != null && !jsonObj.get("pattern_total").isJsonNull()) {
        PatternTotalEnum.validateJsonElement(jsonObj.get("pattern_total"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("themes") != null && !jsonObj.get("themes").isJsonNull() && !jsonObj.get("themes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `variation_total`
      if (jsonObj.get("variation_total") != null && !jsonObj.get("variation_total").isJsonNull()) {
        VariationTotalEnum.validateJsonElement(jsonObj.get("variation_total"));
      }
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonNull()) {
        JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
        if (jsonArrayvariations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
          }

          // validate the optional field `variations` (array)
          for (int i = 0; i < jsonArrayvariations.size(); i++) {
            NHFurnitureVariationsInner.validateJsonElement(jsonArrayvariations.get(i));
          };
        }
      }
      if ((jsonObj.get("version_added") != null && !jsonObj.get("version_added").isJsonNull()) && !jsonObj.get("version_added").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_added` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_added").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHFurniture.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHFurniture' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHFurniture> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHFurniture.class));

       return (TypeAdapter<T>) new TypeAdapter<NHFurniture>() {
           @Override
           public void write(JsonWriter out, NHFurniture value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHFurniture read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHFurniture given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHFurniture
   * @throws IOException if the JSON string is invalid with respect to NHFurniture
   */
  public static NHFurniture fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHFurniture.class);
  }

  /**
   * Convert an instance of NHFurniture to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

