/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.NHArtwork;
import org.openapitools.client.model.NHBug;
import org.openapitools.client.model.NHClothing;
import org.openapitools.client.model.NHEvent;
import org.openapitools.client.model.NHFish;
import org.openapitools.client.model.NHFossilGroup;
import org.openapitools.client.model.NHFossilGroupWithIndividualFossils;
import org.openapitools.client.model.NHFossilGroupWithIndividualFossilsNoMatched;
import org.openapitools.client.model.NHFurniture;
import org.openapitools.client.model.NHIndividualFossil;
import org.openapitools.client.model.NHInterior;
import org.openapitools.client.model.NHItem;
import org.openapitools.client.model.NHPhoto;
import org.openapitools.client.model.NHRecipe;
import org.openapitools.client.model.NHSeaCreature;
import org.openapitools.client.model.NHTool;
import java.util.UUID;
import org.openapitools.client.model.Villager;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for nhArtArtworkGet
     * @param artwork The name of the artwork you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhArtArtworkGetCall(String artwork, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/art/{artwork}"
            .replace("{" + "artwork" + "}", localVarApiClient.escapeString(artwork.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhArtArtworkGetValidateBeforeCall(String artwork, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artwork' is set
        if (artwork == null) {
            throw new ApiException("Missing the required parameter 'artwork' when calling nhArtArtworkGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhArtArtworkGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhArtArtworkGet(Async)");
        }

        return nhArtArtworkGetCall(artwork, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons artwork
     * Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
     * @param artwork The name of the artwork you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHArtwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHArtwork nhArtArtworkGet(String artwork, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHArtwork> localVarResp = nhArtArtworkGetWithHttpInfo(artwork, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons artwork
     * Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
     * @param artwork The name of the artwork you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHArtwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHArtwork> nhArtArtworkGetWithHttpInfo(String artwork, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhArtArtworkGetValidateBeforeCall(artwork, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHArtwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons artwork (asynchronously)
     * Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
     * @param artwork The name of the artwork you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhArtArtworkGetAsync(String artwork, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHArtwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhArtArtworkGetValidateBeforeCall(artwork, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHArtwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhArtGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param hasfake When set to &#x60;true&#x60;, only artwork that has a fake will be returned. When set to &#x60;false&#x60;, only artwork without fakes will be returned. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhArtGetCall(UUID X_API_KEY, String acceptVersion, String hasfake, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/art";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasfake != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasfake", hasfake));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhArtGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String hasfake, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhArtGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhArtGet(Async)");
        }

        return nhArtGetCall(X_API_KEY, acceptVersion, hasfake, excludedetails, thumbsize, _callback);

    }

    /**
     * All New Horizons artwork
     * Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param hasfake When set to &#x60;true&#x60;, only artwork that has a fake will be returned. When set to &#x60;false&#x60;, only artwork without fakes will be returned. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return List&lt;NHArtwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHArtwork> nhArtGet(UUID X_API_KEY, String acceptVersion, String hasfake, String excludedetails, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHArtwork>> localVarResp = nhArtGetWithHttpInfo(X_API_KEY, acceptVersion, hasfake, excludedetails, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons artwork
     * Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param hasfake When set to &#x60;true&#x60;, only artwork that has a fake will be returned. When set to &#x60;false&#x60;, only artwork without fakes will be returned. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return ApiResponse&lt;List&lt;NHArtwork&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHArtwork>> nhArtGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String hasfake, String excludedetails, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhArtGetValidateBeforeCall(X_API_KEY, acceptVersion, hasfake, excludedetails, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHArtwork>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons artwork (asynchronously)
     * Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param hasfake When set to &#x60;true&#x60;, only artwork that has a fake will be returned. When set to &#x60;false&#x60;, only artwork without fakes will be returned. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of artwork. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhArtGetAsync(UUID X_API_KEY, String acceptVersion, String hasfake, String excludedetails, Integer thumbsize, final ApiCallback<List<NHArtwork>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhArtGetValidateBeforeCall(X_API_KEY, acceptVersion, hasfake, excludedetails, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHArtwork>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhBugsBugGet
     * @param bug The name of the bug you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the bug. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified bug. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhBugsBugGetCall(String bug, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/bugs/{bug}"
            .replace("{" + "bug" + "}", localVarApiClient.escapeString(bug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhBugsBugGetValidateBeforeCall(String bug, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bug' is set
        if (bug == null) {
            throw new ApiException("Missing the required parameter 'bug' when calling nhBugsBugGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhBugsBugGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhBugsBugGet(Async)");
        }

        return nhBugsBugGetCall(bug, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons bug
     * Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
     * @param bug The name of the bug you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHBug
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the bug. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified bug. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHBug nhBugsBugGet(String bug, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHBug> localVarResp = nhBugsBugGetWithHttpInfo(bug, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons bug
     * Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
     * @param bug The name of the bug you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHBug&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the bug. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified bug. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHBug> nhBugsBugGetWithHttpInfo(String bug, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhBugsBugGetValidateBeforeCall(bug, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHBug>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons bug (asynchronously)
     * Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
     * @param bug The name of the bug you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the bug. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified bug. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhBugsBugGetAsync(String bug, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHBug> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhBugsBugGetValidateBeforeCall(bug, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHBug>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhBugsGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the bug that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of bugs in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of bugs. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhBugsGetCall(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/bugs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhBugsGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhBugsGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhBugsGet(Async)");
        }

        return nhBugsGetCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, _callback);

    }

    /**
     * All New Horizons bugs
     * Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the bug that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of bugs in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return List&lt;NHBug&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of bugs. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHBug> nhBugsGet(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHBug>> localVarResp = nhBugsGetWithHttpInfo(X_API_KEY, acceptVersion, month, excludedetails, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons bugs
     * Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the bug that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of bugs in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return ApiResponse&lt;List&lt;NHBug&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of bugs. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHBug>> nhBugsGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhBugsGetValidateBeforeCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHBug>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons bugs (asynchronously)
     * Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the bug that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of bugs in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of bugs. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhBugsGetAsync(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback<List<NHBug>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhBugsGetValidateBeforeCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHBug>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhClothingClothingGet
     * @param clothing The name of the clothing you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhClothingClothingGetCall(String clothing, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/clothing/{clothing}"
            .replace("{" + "clothing" + "}", localVarApiClient.escapeString(clothing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhClothingClothingGetValidateBeforeCall(String clothing, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clothing' is set
        if (clothing == null) {
            throw new ApiException("Missing the required parameter 'clothing' when calling nhClothingClothingGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhClothingClothingGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhClothingClothingGet(Async)");
        }

        return nhClothingClothingGetCall(clothing, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons clothing
     * Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
     * @param clothing The name of the clothing you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHClothing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHClothing nhClothingClothingGet(String clothing, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHClothing> localVarResp = nhClothingClothingGetWithHttpInfo(clothing, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons clothing
     * Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
     * @param clothing The name of the clothing you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHClothing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHClothing> nhClothingClothingGetWithHttpInfo(String clothing, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhClothingClothingGetValidateBeforeCall(clothing, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHClothing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons clothing (asynchronously)
     * Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
     * @param clothing The name of the clothing you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhClothingClothingGetAsync(String clothing, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHClothing> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhClothingClothingGetValidateBeforeCall(clothing, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHClothing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhClothingGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of clothing to return. (optional)
     * @param color Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers. (optional)
     * @param style Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers. (optional)
     * @param labeltheme Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player&#39;s island. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhClothingGetCall(UUID X_API_KEY, String acceptVersion, String category, List<String> color, List<String> style, String labeltheme, String excludedetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/clothing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (color != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "color", color));
        }

        if (style != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "style", style));
        }

        if (labeltheme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labeltheme", labeltheme));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhClothingGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String category, List<String> color, List<String> style, String labeltheme, String excludedetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhClothingGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhClothingGet(Async)");
        }

        return nhClothingGetCall(X_API_KEY, acceptVersion, category, color, style, labeltheme, excludedetails, _callback);

    }

    /**
     * All New Horizons clothing
     * Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of clothing to return. (optional)
     * @param color Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers. (optional)
     * @param style Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers. (optional)
     * @param labeltheme Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player&#39;s island. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return List&lt;NHClothing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHClothing> nhClothingGet(UUID X_API_KEY, String acceptVersion, String category, List<String> color, List<String> style, String labeltheme, String excludedetails) throws ApiException {
        ApiResponse<List<NHClothing>> localVarResp = nhClothingGetWithHttpInfo(X_API_KEY, acceptVersion, category, color, style, labeltheme, excludedetails);
        return localVarResp.getData();
    }

    /**
     * All New Horizons clothing
     * Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of clothing to return. (optional)
     * @param color Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers. (optional)
     * @param style Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers. (optional)
     * @param labeltheme Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player&#39;s island. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return ApiResponse&lt;List&lt;NHClothing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHClothing>> nhClothingGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String category, List<String> color, List<String> style, String labeltheme, String excludedetails) throws ApiException {
        okhttp3.Call localVarCall = nhClothingGetValidateBeforeCall(X_API_KEY, acceptVersion, category, color, style, labeltheme, excludedetails, null);
        Type localVarReturnType = new TypeToken<List<NHClothing>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons clothing (asynchronously)
     * Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of clothing to return. (optional)
     * @param color Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers. (optional)
     * @param style Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers. (optional)
     * @param labeltheme Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player&#39;s island. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clothing. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhClothingGetAsync(UUID X_API_KEY, String acceptVersion, String category, List<String> color, List<String> style, String labeltheme, String excludedetails, final ApiCallback<List<NHClothing>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhClothingGetValidateBeforeCall(X_API_KEY, acceptVersion, category, color, style, labeltheme, excludedetails, _callback);
        Type localVarReturnType = new TypeToken<List<NHClothing>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhEventsGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param date Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as &#x60;YYYY-MM-DD&#x60; or &#x60;Month Day, Year&#x60;, as well as &#x60;today&#x60; to retrieve the current day&#39;s events (UTC time). (optional)
     * @param year Specify the year to retrieve events for. Must be the current or next year. (optional)
     * @param month Specify the month to retrieve events for (accepts multiple formats, such as &#x60;Oct&#x60;, &#x60;October&#x60;, or &#x60;10&#x60;). Most likely want to use alongside &#x60;year&#x60;, otherwise events in both the current and next year are returned. (optional)
     * @param day Specify the day of the month to retrieve events for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhEventsGetCall(UUID X_API_KEY, String acceptVersion, String date, String year, String month, Integer day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhEventsGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String date, String year, String month, Integer day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhEventsGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhEventsGet(Async)");
        }

        return nhEventsGetCall(X_API_KEY, acceptVersion, date, year, month, day, _callback);

    }

    /**
     * All New Horizons events
     * Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param date Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as &#x60;YYYY-MM-DD&#x60; or &#x60;Month Day, Year&#x60;, as well as &#x60;today&#x60; to retrieve the current day&#39;s events (UTC time). (optional)
     * @param year Specify the year to retrieve events for. Must be the current or next year. (optional)
     * @param month Specify the month to retrieve events for (accepts multiple formats, such as &#x60;Oct&#x60;, &#x60;October&#x60;, or &#x60;10&#x60;). Most likely want to use alongside &#x60;year&#x60;, otherwise events in both the current and next year are returned. (optional)
     * @param day Specify the day of the month to retrieve events for. (optional)
     * @return List&lt;NHEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHEvent> nhEventsGet(UUID X_API_KEY, String acceptVersion, String date, String year, String month, Integer day) throws ApiException {
        ApiResponse<List<NHEvent>> localVarResp = nhEventsGetWithHttpInfo(X_API_KEY, acceptVersion, date, year, month, day);
        return localVarResp.getData();
    }

    /**
     * All New Horizons events
     * Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param date Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as &#x60;YYYY-MM-DD&#x60; or &#x60;Month Day, Year&#x60;, as well as &#x60;today&#x60; to retrieve the current day&#39;s events (UTC time). (optional)
     * @param year Specify the year to retrieve events for. Must be the current or next year. (optional)
     * @param month Specify the month to retrieve events for (accepts multiple formats, such as &#x60;Oct&#x60;, &#x60;October&#x60;, or &#x60;10&#x60;). Most likely want to use alongside &#x60;year&#x60;, otherwise events in both the current and next year are returned. (optional)
     * @param day Specify the day of the month to retrieve events for. (optional)
     * @return ApiResponse&lt;List&lt;NHEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHEvent>> nhEventsGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String date, String year, String month, Integer day) throws ApiException {
        okhttp3.Call localVarCall = nhEventsGetValidateBeforeCall(X_API_KEY, acceptVersion, date, year, month, day, null);
        Type localVarReturnType = new TypeToken<List<NHEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons events (asynchronously)
     * Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param date Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as &#x60;YYYY-MM-DD&#x60; or &#x60;Month Day, Year&#x60;, as well as &#x60;today&#x60; to retrieve the current day&#39;s events (UTC time). (optional)
     * @param year Specify the year to retrieve events for. Must be the current or next year. (optional)
     * @param month Specify the month to retrieve events for (accepts multiple formats, such as &#x60;Oct&#x60;, &#x60;October&#x60;, or &#x60;10&#x60;). Most likely want to use alongside &#x60;year&#x60;, otherwise events in both the current and next year are returned. (optional)
     * @param day Specify the day of the month to retrieve events for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of events. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhEventsGetAsync(UUID X_API_KEY, String acceptVersion, String date, String year, String month, Integer day, final ApiCallback<List<NHEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhEventsGetValidateBeforeCall(X_API_KEY, acceptVersion, date, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<List<NHEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFishFishGet
     * @param fish The name of the fish you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified fish. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFishFishGetCall(String fish, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fish/{fish}"
            .replace("{" + "fish" + "}", localVarApiClient.escapeString(fish.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFishFishGetValidateBeforeCall(String fish, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fish' is set
        if (fish == null) {
            throw new ApiException("Missing the required parameter 'fish' when calling nhFishFishGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFishFishGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFishFishGet(Async)");
        }

        return nhFishFishGetCall(fish, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons fish
     * Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
     * @param fish The name of the fish you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHFish
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified fish. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHFish nhFishFishGet(String fish, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHFish> localVarResp = nhFishFishGetWithHttpInfo(fish, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons fish
     * Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
     * @param fish The name of the fish you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHFish&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified fish. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHFish> nhFishFishGetWithHttpInfo(String fish, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFishFishGetValidateBeforeCall(fish, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHFish>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons fish (asynchronously)
     * Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
     * @param fish The name of the fish you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified fish. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFishFishGetAsync(String fish, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHFish> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFishFishGetValidateBeforeCall(fish, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHFish>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFishGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the fish that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of fish in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFishGetCall(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFishGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFishGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFishGet(Async)");
        }

        return nhFishGetCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, _callback);

    }

    /**
     * All New Horizons fish
     * Get a list of all fish and their details in *New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the fish that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of fish in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return List&lt;NHFish&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHFish> nhFishGet(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHFish>> localVarResp = nhFishGetWithHttpInfo(X_API_KEY, acceptVersion, month, excludedetails, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons fish
     * Get a list of all fish and their details in *New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the fish that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of fish in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return ApiResponse&lt;List&lt;NHFish&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHFish>> nhFishGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFishGetValidateBeforeCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHFish>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons fish (asynchronously)
     * Get a list of all fish and their details in *New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the fish that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of fish in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fish. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFishGetAsync(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback<List<NHFish>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFishGetValidateBeforeCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHFish>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFossilsAllFossilGet
     * @param fossil The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsAllFossilGetCall(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fossils/all/{fossil}"
            .replace("{" + "fossil" + "}", localVarApiClient.escapeString(fossil.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFossilsAllFossilGetValidateBeforeCall(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fossil' is set
        if (fossil == null) {
            throw new ApiException("Missing the required parameter 'fossil' when calling nhFossilsAllFossilGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFossilsAllFossilGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFossilsAllFossilGet(Async)");
        }

        return nhFossilsAllFossilGetCall(fossil, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons fossil group with individual fossils
     * Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
     * @param fossil The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHFossilGroupWithIndividualFossils
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHFossilGroupWithIndividualFossils nhFossilsAllFossilGet(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHFossilGroupWithIndividualFossils> localVarResp = nhFossilsAllFossilGetWithHttpInfo(fossil, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons fossil group with individual fossils
     * Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
     * @param fossil The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHFossilGroupWithIndividualFossils&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHFossilGroupWithIndividualFossils> nhFossilsAllFossilGetWithHttpInfo(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFossilsAllFossilGetValidateBeforeCall(fossil, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHFossilGroupWithIndividualFossils>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons fossil group with individual fossils (asynchronously)
     * Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
     * @param fossil The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsAllFossilGetAsync(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHFossilGroupWithIndividualFossils> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFossilsAllFossilGetValidateBeforeCall(fossil, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHFossilGroupWithIndividualFossils>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFossilsAllGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsAllGetCall(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fossils/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFossilsAllGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFossilsAllGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFossilsAllGet(Async)");
        }

        return nhFossilsAllGetCall(X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * All New Horizons fossil groups or individual fossil
     * Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return List&lt;NHFossilGroupWithIndividualFossilsNoMatched&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHFossilGroupWithIndividualFossilsNoMatched> nhFossilsAllGet(UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHFossilGroupWithIndividualFossilsNoMatched>> localVarResp = nhFossilsAllGetWithHttpInfo(X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons fossil groups or individual fossil
     * Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;List&lt;NHFossilGroupWithIndividualFossilsNoMatched&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHFossilGroupWithIndividualFossilsNoMatched>> nhFossilsAllGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFossilsAllGetValidateBeforeCall(X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHFossilGroupWithIndividualFossilsNoMatched>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons fossil groups or individual fossil (asynchronously)
     * Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsAllGetAsync(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<List<NHFossilGroupWithIndividualFossilsNoMatched>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFossilsAllGetValidateBeforeCall(X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHFossilGroupWithIndividualFossilsNoMatched>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFossilsGroupsFossilGroupGet
     * @param fossilGroup The name of the fossil group you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsGroupsFossilGroupGetCall(String fossilGroup, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fossils/groups/{fossil_group}"
            .replace("{" + "fossil_group" + "}", localVarApiClient.escapeString(fossilGroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFossilsGroupsFossilGroupGetValidateBeforeCall(String fossilGroup, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fossilGroup' is set
        if (fossilGroup == null) {
            throw new ApiException("Missing the required parameter 'fossilGroup' when calling nhFossilsGroupsFossilGroupGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFossilsGroupsFossilGroupGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFossilsGroupsFossilGroupGet(Async)");
        }

        return nhFossilsGroupsFossilGroupGetCall(fossilGroup, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons fossil group
     * Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
     * @param fossilGroup The name of the fossil group you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHFossilGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHFossilGroup nhFossilsGroupsFossilGroupGet(String fossilGroup, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHFossilGroup> localVarResp = nhFossilsGroupsFossilGroupGetWithHttpInfo(fossilGroup, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons fossil group
     * Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
     * @param fossilGroup The name of the fossil group you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHFossilGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHFossilGroup> nhFossilsGroupsFossilGroupGetWithHttpInfo(String fossilGroup, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFossilsGroupsFossilGroupGetValidateBeforeCall(fossilGroup, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHFossilGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons fossil group (asynchronously)
     * Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
     * @param fossilGroup The name of the fossil group you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the fossil group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsGroupsFossilGroupGetAsync(String fossilGroup, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHFossilGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFossilsGroupsFossilGroupGetValidateBeforeCall(fossilGroup, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHFossilGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFossilsGroupsGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsGroupsGetCall(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fossils/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFossilsGroupsGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFossilsGroupsGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFossilsGroupsGet(Async)");
        }

        return nhFossilsGroupsGetCall(X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * All New Horizons fossil groups
     * Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return List&lt;NHFossilGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHFossilGroup> nhFossilsGroupsGet(UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHFossilGroup>> localVarResp = nhFossilsGroupsGetWithHttpInfo(X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons fossil groups
     * Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;List&lt;NHFossilGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHFossilGroup>> nhFossilsGroupsGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFossilsGroupsGetValidateBeforeCall(X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHFossilGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons fossil groups (asynchronously)
     * Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of fossil groups. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsGroupsGetAsync(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<List<NHFossilGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFossilsGroupsGetValidateBeforeCall(X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHFossilGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFossilsIndividualsFossilGet
     * @param fossil The name of the individual fossil you wish to retrieve fossil information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the individual fossil. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsIndividualsFossilGetCall(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fossils/individuals/{fossil}"
            .replace("{" + "fossil" + "}", localVarApiClient.escapeString(fossil.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFossilsIndividualsFossilGetValidateBeforeCall(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fossil' is set
        if (fossil == null) {
            throw new ApiException("Missing the required parameter 'fossil' when calling nhFossilsIndividualsFossilGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFossilsIndividualsFossilGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFossilsIndividualsFossilGet(Async)");
        }

        return nhFossilsIndividualsFossilGetCall(fossil, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons fossil
     * Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
     * @param fossil The name of the individual fossil you wish to retrieve fossil information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHIndividualFossil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the individual fossil. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHIndividualFossil nhFossilsIndividualsFossilGet(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHIndividualFossil> localVarResp = nhFossilsIndividualsFossilGetWithHttpInfo(fossil, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons fossil
     * Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
     * @param fossil The name of the individual fossil you wish to retrieve fossil information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHIndividualFossil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the individual fossil. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHIndividualFossil> nhFossilsIndividualsFossilGetWithHttpInfo(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFossilsIndividualsFossilGetValidateBeforeCall(fossil, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHIndividualFossil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons fossil (asynchronously)
     * Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
     * @param fossil The name of the individual fossil you wish to retrieve fossil information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the individual fossil. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsIndividualsFossilGetAsync(String fossil, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHIndividualFossil> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFossilsIndividualsFossilGetValidateBeforeCall(fossil, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHIndividualFossil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFossilsIndividualsGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of individual fossils. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsIndividualsGetCall(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/fossils/individuals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFossilsIndividualsGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFossilsIndividualsGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFossilsIndividualsGet(Async)");
        }

        return nhFossilsIndividualsGetCall(X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * All New Horizons fossils
     * Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return List&lt;NHIndividualFossil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of individual fossils. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHIndividualFossil> nhFossilsIndividualsGet(UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHIndividualFossil>> localVarResp = nhFossilsIndividualsGetWithHttpInfo(X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons fossils
     * Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;List&lt;NHIndividualFossil&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of individual fossils. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHIndividualFossil>> nhFossilsIndividualsGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFossilsIndividualsGetValidateBeforeCall(X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHIndividualFossil>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons fossils (asynchronously)
     * Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of individual fossils. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFossilsIndividualsGetAsync(UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<List<NHIndividualFossil>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFossilsIndividualsGetValidateBeforeCall(X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHIndividualFossil>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFurnitureFurnitureGet
     * @param furniture The name of the furniture you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFurnitureFurnitureGetCall(String furniture, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/furniture/{furniture}"
            .replace("{" + "furniture" + "}", localVarApiClient.escapeString(furniture.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFurnitureFurnitureGetValidateBeforeCall(String furniture, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'furniture' is set
        if (furniture == null) {
            throw new ApiException("Missing the required parameter 'furniture' when calling nhFurnitureFurnitureGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFurnitureFurnitureGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFurnitureFurnitureGet(Async)");
        }

        return nhFurnitureFurnitureGetCall(furniture, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons furniture
     * Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
     * @param furniture The name of the furniture you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHFurniture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHFurniture nhFurnitureFurnitureGet(String furniture, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHFurniture> localVarResp = nhFurnitureFurnitureGetWithHttpInfo(furniture, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons furniture
     * Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
     * @param furniture The name of the furniture you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHFurniture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHFurniture> nhFurnitureFurnitureGetWithHttpInfo(String furniture, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhFurnitureFurnitureGetValidateBeforeCall(furniture, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHFurniture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons furniture (asynchronously)
     * Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
     * @param furniture The name of the furniture you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFurnitureFurnitureGetAsync(String furniture, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHFurniture> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFurnitureFurnitureGetValidateBeforeCall(furniture, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHFurniture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhFurnitureGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted). (optional)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFurnitureGetCall(UUID X_API_KEY, String acceptVersion, String category, List<String> color, String excludedetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/furniture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (color != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "color", color));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhFurnitureGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String category, List<String> color, String excludedetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhFurnitureGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhFurnitureGet(Async)");
        }

        return nhFurnitureGetCall(X_API_KEY, acceptVersion, category, color, excludedetails, _callback);

    }

    /**
     * All New Horizons furniture
     * Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted). (optional)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return List&lt;NHFurniture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHFurniture> nhFurnitureGet(UUID X_API_KEY, String acceptVersion, String category, List<String> color, String excludedetails) throws ApiException {
        ApiResponse<List<NHFurniture>> localVarResp = nhFurnitureGetWithHttpInfo(X_API_KEY, acceptVersion, category, color, excludedetails);
        return localVarResp.getData();
    }

    /**
     * All New Horizons furniture
     * Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted). (optional)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return ApiResponse&lt;List&lt;NHFurniture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHFurniture>> nhFurnitureGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String category, List<String> color, String excludedetails) throws ApiException {
        okhttp3.Call localVarCall = nhFurnitureGetValidateBeforeCall(X_API_KEY, acceptVersion, category, color, excludedetails, null);
        Type localVarReturnType = new TypeToken<List<NHFurniture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons furniture (asynchronously)
     * Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param category Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted). (optional)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of furniture. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhFurnitureGetAsync(UUID X_API_KEY, String acceptVersion, String category, List<String> color, String excludedetails, final ApiCallback<List<NHFurniture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhFurnitureGetValidateBeforeCall(X_API_KEY, acceptVersion, category, color, excludedetails, _callback);
        Type localVarReturnType = new TypeToken<List<NHFurniture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhInteriorGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhInteriorGetCall(UUID X_API_KEY, String acceptVersion, List<String> color, String excludedetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/interior";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (color != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "color", color));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhInteriorGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, List<String> color, String excludedetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhInteriorGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhInteriorGet(Async)");
        }

        return nhInteriorGetCall(X_API_KEY, acceptVersion, color, excludedetails, _callback);

    }

    /**
     * All New Horizons interior items
     * Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return List&lt;NHInterior&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHInterior> nhInteriorGet(UUID X_API_KEY, String acceptVersion, List<String> color, String excludedetails) throws ApiException {
        ApiResponse<List<NHInterior>> localVarResp = nhInteriorGetWithHttpInfo(X_API_KEY, acceptVersion, color, excludedetails);
        return localVarResp.getData();
    }

    /**
     * All New Horizons interior items
     * Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return ApiResponse&lt;List&lt;NHInterior&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHInterior>> nhInteriorGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, List<String> color, String excludedetails) throws ApiException {
        okhttp3.Call localVarCall = nhInteriorGetValidateBeforeCall(X_API_KEY, acceptVersion, color, excludedetails, null);
        Type localVarReturnType = new TypeToken<List<NHInterior>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons interior items (asynchronously)
     * Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhInteriorGetAsync(UUID X_API_KEY, String acceptVersion, List<String> color, String excludedetails, final ApiCallback<List<NHInterior>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhInteriorGetValidateBeforeCall(X_API_KEY, acceptVersion, color, excludedetails, _callback);
        Type localVarReturnType = new TypeToken<List<NHInterior>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhInteriorItemGet
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the interior item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhInteriorItemGetCall(String item, UUID X_API_KEY, String acceptVersion, List<String> color, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/interior/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (color != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "color", color));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhInteriorItemGetValidateBeforeCall(String item, UUID X_API_KEY, String acceptVersion, List<String> color, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling nhInteriorItemGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhInteriorItemGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhInteriorItemGet(Async)");
        }

        return nhInteriorItemGetCall(item, X_API_KEY, acceptVersion, color, thumbsize, _callback);

    }

    /**
     * Single New Horizons interior item
     * Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHInterior
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the interior item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHInterior nhInteriorItemGet(String item, UUID X_API_KEY, String acceptVersion, List<String> color, Integer thumbsize) throws ApiException {
        ApiResponse<NHInterior> localVarResp = nhInteriorItemGetWithHttpInfo(item, X_API_KEY, acceptVersion, color, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons interior item
     * Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHInterior&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the interior item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHInterior> nhInteriorItemGetWithHttpInfo(String item, UUID X_API_KEY, String acceptVersion, List<String> color, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhInteriorItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, color, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHInterior>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons interior item (asynchronously)
     * Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param color Return furniture that matches the provided colors (may specify one or two colors). (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the interior item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhInteriorItemGetAsync(String item, UUID X_API_KEY, String acceptVersion, List<String> color, Integer thumbsize, final ApiCallback<NHInterior> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhInteriorItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, color, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHInterior>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhItemsGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhItemsGetCall(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhItemsGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhItemsGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhItemsGet(Async)");
        }

        return nhItemsGetCall(X_API_KEY, acceptVersion, excludedetails, _callback);

    }

    /**
     * Miscellaneous New Horizons items
     * Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return List&lt;NHItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHItem> nhItemsGet(UUID X_API_KEY, String acceptVersion, String excludedetails) throws ApiException {
        ApiResponse<List<NHItem>> localVarResp = nhItemsGetWithHttpInfo(X_API_KEY, acceptVersion, excludedetails);
        return localVarResp.getData();
    }

    /**
     * Miscellaneous New Horizons items
     * Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return ApiResponse&lt;List&lt;NHItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHItem>> nhItemsGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String excludedetails) throws ApiException {
        okhttp3.Call localVarCall = nhItemsGetValidateBeforeCall(X_API_KEY, acceptVersion, excludedetails, null);
        Type localVarReturnType = new TypeToken<List<NHItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Miscellaneous New Horizons items (asynchronously)
     * Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhItemsGetAsync(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback<List<NHItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhItemsGetValidateBeforeCall(X_API_KEY, acceptVersion, excludedetails, _callback);
        Type localVarReturnType = new TypeToken<List<NHItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhItemsItemGet
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhItemsItemGetCall(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/items/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhItemsItemGetValidateBeforeCall(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling nhItemsItemGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhItemsItemGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhItemsItemGet(Async)");
        }

        return nhItemsItemGetCall(item, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons miscellaneous item
     * Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHItem nhItemsItemGet(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHItem> localVarResp = nhItemsItemGetWithHttpInfo(item, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons miscellaneous item
     * Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHItem> nhItemsItemGetWithHttpInfo(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhItemsItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons miscellaneous item (asynchronously)
     * Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
     * @param item The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the item. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhItemsItemGetAsync(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhItemsItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhPhotosGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of photos and posters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhPhotosGetCall(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/photos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhPhotosGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhPhotosGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhPhotosGet(Async)");
        }

        return nhPhotosGetCall(X_API_KEY, acceptVersion, excludedetails, _callback);

    }

    /**
     * All New Horizons photos and posters
     * Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return List&lt;NHPhoto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of photos and posters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHPhoto> nhPhotosGet(UUID X_API_KEY, String acceptVersion, String excludedetails) throws ApiException {
        ApiResponse<List<NHPhoto>> localVarResp = nhPhotosGetWithHttpInfo(X_API_KEY, acceptVersion, excludedetails);
        return localVarResp.getData();
    }

    /**
     * All New Horizons photos and posters
     * Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return ApiResponse&lt;List&lt;NHPhoto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of photos and posters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHPhoto>> nhPhotosGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String excludedetails) throws ApiException {
        okhttp3.Call localVarCall = nhPhotosGetValidateBeforeCall(X_API_KEY, acceptVersion, excludedetails, null);
        Type localVarReturnType = new TypeToken<List<NHPhoto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons photos and posters (asynchronously)
     * Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of photos and posters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhPhotosGetAsync(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback<List<NHPhoto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhPhotosGetValidateBeforeCall(X_API_KEY, acceptVersion, excludedetails, _callback);
        Type localVarReturnType = new TypeToken<List<NHPhoto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhPhotosItemGet
     * @param item The name of the photo or poster you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the photo or poster. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhPhotosItemGetCall(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/photos/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhPhotosItemGetValidateBeforeCall(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling nhPhotosItemGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhPhotosItemGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhPhotosItemGet(Async)");
        }

        return nhPhotosItemGetCall(item, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons photo or poster
     * Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
     * @param item The name of the photo or poster you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHPhoto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the photo or poster. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHPhoto nhPhotosItemGet(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHPhoto> localVarResp = nhPhotosItemGetWithHttpInfo(item, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons photo or poster
     * Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
     * @param item The name of the photo or poster you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHPhoto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the photo or poster. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHPhoto> nhPhotosItemGetWithHttpInfo(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhPhotosItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHPhoto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons photo or poster (asynchronously)
     * Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
     * @param item The name of the photo or poster you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the photo or poster. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhPhotosItemGetAsync(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHPhoto> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhPhotosItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHPhoto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhRecipesGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param material Specify a material to only get recipes that use that material. You can specify &#x60;material&#x60; up to six times (no recipe uses more than six materials). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of recipes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhRecipesGetCall(UUID X_API_KEY, String acceptVersion, String material, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/recipes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (material != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("material", material));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhRecipesGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String material, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhRecipesGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhRecipesGet(Async)");
        }

        return nhRecipesGetCall(X_API_KEY, acceptVersion, material, excludedetails, thumbsize, _callback);

    }

    /**
     * All New Horizons recipes
     * Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param material Specify a material to only get recipes that use that material. You can specify &#x60;material&#x60; up to six times (no recipe uses more than six materials). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return List&lt;NHRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of recipes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHRecipe> nhRecipesGet(UUID X_API_KEY, String acceptVersion, String material, String excludedetails, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHRecipe>> localVarResp = nhRecipesGetWithHttpInfo(X_API_KEY, acceptVersion, material, excludedetails, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons recipes
     * Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param material Specify a material to only get recipes that use that material. You can specify &#x60;material&#x60; up to six times (no recipe uses more than six materials). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return ApiResponse&lt;List&lt;NHRecipe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of recipes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHRecipe>> nhRecipesGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String material, String excludedetails, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhRecipesGetValidateBeforeCall(X_API_KEY, acceptVersion, material, excludedetails, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHRecipe>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons recipes (asynchronously)
     * Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param material Specify a material to only get recipes that use that material. You can specify &#x60;material&#x60; up to six times (no recipe uses more than six materials). (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of recipes. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhRecipesGetAsync(UUID X_API_KEY, String acceptVersion, String material, String excludedetails, Integer thumbsize, final ApiCallback<List<NHRecipe>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhRecipesGetValidateBeforeCall(X_API_KEY, acceptVersion, material, excludedetails, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHRecipe>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhRecipesItemGet
     * @param item The name of the item you wish to retrieve recipe information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the recipe. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhRecipesItemGetCall(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/recipes/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhRecipesItemGetValidateBeforeCall(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling nhRecipesItemGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhRecipesItemGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhRecipesItemGet(Async)");
        }

        return nhRecipesItemGetCall(item, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons recipe
     * Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
     * @param item The name of the item you wish to retrieve recipe information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHRecipe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the recipe. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHRecipe nhRecipesItemGet(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHRecipe> localVarResp = nhRecipesItemGetWithHttpInfo(item, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons recipe
     * Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
     * @param item The name of the item you wish to retrieve recipe information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHRecipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the recipe. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHRecipe> nhRecipesItemGetWithHttpInfo(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhRecipesItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHRecipe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons recipe (asynchronously)
     * Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
     * @param item The name of the item you wish to retrieve recipe information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the recipe. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhRecipesItemGetAsync(String item, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHRecipe> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhRecipesItemGetValidateBeforeCall(item, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHRecipe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhSeaGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the sea creature that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of sea creatures in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of sea creatures. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhSeaGetCall(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/sea";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhSeaGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhSeaGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhSeaGet(Async)");
        }

        return nhSeaGetCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, _callback);

    }

    /**
     * All New Horizons sea creatures
     * Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the sea creature that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of sea creatures in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return List&lt;NHSeaCreature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of sea creatures. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHSeaCreature> nhSeaGet(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize) throws ApiException {
        ApiResponse<List<NHSeaCreature>> localVarResp = nhSeaGetWithHttpInfo(X_API_KEY, acceptVersion, month, excludedetails, thumbsize);
        return localVarResp.getData();
    }

    /**
     * All New Horizons sea creatures
     * Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the sea creature that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of sea creatures in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return ApiResponse&lt;List&lt;NHSeaCreature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of sea creatures. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHSeaCreature>> nhSeaGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhSeaGetValidateBeforeCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<NHSeaCreature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons sea creatures (asynchronously)
     * Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param month Retrive only the sea creature that are available in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;), the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;), or &#x60;current&#x60; for the current month. When &#x60;current&#x60; is specified, the return body will be an object with two arrays inside, one called &#x60;north&#x60; and the other &#x60;south&#x60; containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server&#39;s time, so it may be slightly off for you at the beginning or end of the month. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the &#x60;month&#x60; filter, for users who want just a list of sea creatures in a given month but not all their respective details. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of sea creatures. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhSeaGetAsync(UUID X_API_KEY, String acceptVersion, String month, String excludedetails, Integer thumbsize, final ApiCallback<List<NHSeaCreature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhSeaGetValidateBeforeCall(X_API_KEY, acceptVersion, month, excludedetails, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<NHSeaCreature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhSeaSeaCreatureGet
     * @param seaCreature The name of the sea creature you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the sea creature. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified sea creature. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhSeaSeaCreatureGetCall(String seaCreature, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/sea/{sea_creature}"
            .replace("{" + "sea_creature" + "}", localVarApiClient.escapeString(seaCreature.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhSeaSeaCreatureGetValidateBeforeCall(String seaCreature, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seaCreature' is set
        if (seaCreature == null) {
            throw new ApiException("Missing the required parameter 'seaCreature' when calling nhSeaSeaCreatureGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhSeaSeaCreatureGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhSeaSeaCreatureGet(Async)");
        }

        return nhSeaSeaCreatureGetCall(seaCreature, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons sea creature
     * Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
     * @param seaCreature The name of the sea creature you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHSeaCreature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the sea creature. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified sea creature. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHSeaCreature nhSeaSeaCreatureGet(String seaCreature, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHSeaCreature> localVarResp = nhSeaSeaCreatureGetWithHttpInfo(seaCreature, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons sea creature
     * Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
     * @param seaCreature The name of the sea creature you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHSeaCreature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the sea creature. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified sea creature. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHSeaCreature> nhSeaSeaCreatureGetWithHttpInfo(String seaCreature, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhSeaSeaCreatureGetValidateBeforeCall(seaCreature, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHSeaCreature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons sea creature (asynchronously)
     * Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
     * @param seaCreature The name of the sea creature you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the sea creature. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the specified sea creature. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhSeaSeaCreatureGetAsync(String seaCreature, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHSeaCreature> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhSeaSeaCreatureGetValidateBeforeCall(seaCreature, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHSeaCreature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhToolsGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhToolsGetCall(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/tools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhToolsGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhToolsGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhToolsGet(Async)");
        }

        return nhToolsGetCall(X_API_KEY, acceptVersion, excludedetails, _callback);

    }

    /**
     * All New Horizons tools
     * Get a list of all tools and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return List&lt;NHTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<NHTool> nhToolsGet(UUID X_API_KEY, String acceptVersion, String excludedetails) throws ApiException {
        ApiResponse<List<NHTool>> localVarResp = nhToolsGetWithHttpInfo(X_API_KEY, acceptVersion, excludedetails);
        return localVarResp.getData();
    }

    /**
     * All New Horizons tools
     * Get a list of all tools and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @return ApiResponse&lt;List&lt;NHTool&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NHTool>> nhToolsGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String excludedetails) throws ApiException {
        okhttp3.Call localVarCall = nhToolsGetValidateBeforeCall(X_API_KEY, acceptVersion, excludedetails, null);
        Type localVarReturnType = new TypeToken<List<NHTool>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All New Horizons tools (asynchronously)
     * Get a list of all tools and their details in *Animal Crossing: New Horizons*.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param excludedetails When set to &#x60;true&#x60;, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of interior items. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhToolsGetAsync(UUID X_API_KEY, String acceptVersion, String excludedetails, final ApiCallback<List<NHTool>> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhToolsGetValidateBeforeCall(X_API_KEY, acceptVersion, excludedetails, _callback);
        Type localVarReturnType = new TypeToken<List<NHTool>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nhToolsToolGet
     * @param tool The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the tool. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhToolsToolGetCall(String tool, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nh/tools/{tool}"
            .replace("{" + "tool" + "}", localVarApiClient.escapeString(tool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nhToolsToolGetValidateBeforeCall(String tool, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling nhToolsToolGet(Async)");
        }

        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling nhToolsToolGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling nhToolsToolGet(Async)");
        }

        return nhToolsToolGetCall(tool, X_API_KEY, acceptVersion, thumbsize, _callback);

    }

    /**
     * Single New Horizons tool
     * Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
     * @param tool The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return NHTool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the tool. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public NHTool nhToolsToolGet(String tool, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        ApiResponse<NHTool> localVarResp = nhToolsToolGetWithHttpInfo(tool, X_API_KEY, acceptVersion, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Single New Horizons tool
     * Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
     * @param tool The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @return ApiResponse&lt;NHTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the tool. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NHTool> nhToolsToolGetWithHttpInfo(String tool, UUID X_API_KEY, String acceptVersion, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = nhToolsToolGetValidateBeforeCall(tool, X_API_KEY, acceptVersion, thumbsize, null);
        Type localVarReturnType = new TypeToken<NHTool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single New Horizons tool (asynchronously)
     * Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
     * @param tool The name of the interior item you wish to retrieve information about. (required)
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON object describing the tool. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nhToolsToolGetAsync(String tool, UUID X_API_KEY, String acceptVersion, Integer thumbsize, final ApiCallback<NHTool> _callback) throws ApiException {

        okhttp3.Call localVarCall = nhToolsToolGetValidateBeforeCall(tool, X_API_KEY, acceptVersion, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<NHTool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for villagersGet
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param name Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you. (optional)
     * @param species Retrieve villagers of a certain species. (optional)
     * @param personality Retrieve villagers with a certain personality. For &#39;sisterly&#39;, note that the community often also calls it &#39;uchi&#39; or &#39;big sister&#39;. (optional)
     * @param game Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in &#x60;?game&#x3D;nh&amp;game&#x3D;pc&#x60;. (optional)
     * @param birthmonth Retrieve villagers born in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;) or the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;). (optional)
     * @param birthday Use with &#x60;birthmonth&#x60; to get villager(s) born on a specific day. Value should be an int, 1 through 31. (optional)
     * @param nhdetails When set to &#x60;true&#x60;, an &#x60;nh_details&#x60; object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned &#x60;nh_details&#x60; field will be set to null. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of villagers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the inputs (usually query parameters) has an invalid value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call villagersGetCall(UUID X_API_KEY, String acceptVersion, String name, String species, String personality, List<String> game, String birthmonth, String birthday, String nhdetails, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/villagers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (species != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("species", species));
        }

        if (personality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personality", personality));
        }

        if (game != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "game", game));
        }

        if (birthmonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthmonth", birthmonth));
        }

        if (birthday != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("birthday", birthday));
        }

        if (nhdetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nhdetails", nhdetails));
        }

        if (excludedetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedetails", excludedetails));
        }

        if (thumbsize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbsize", thumbsize));
        }

        if (X_API_KEY != null) {
            localVarHeaderParams.put("X-API-KEY", localVarApiClient.parameterToString(X_API_KEY));
        }

        if (acceptVersion != null) {
            localVarHeaderParams.put("Accept-Version", localVarApiClient.parameterToString(acceptVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call villagersGetValidateBeforeCall(UUID X_API_KEY, String acceptVersion, String name, String species, String personality, List<String> game, String birthmonth, String birthday, String nhdetails, String excludedetails, Integer thumbsize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling villagersGet(Async)");
        }

        // verify the required parameter 'acceptVersion' is set
        if (acceptVersion == null) {
            throw new ApiException("Missing the required parameter 'acceptVersion' when calling villagersGet(Async)");
        }

        return villagersGetCall(X_API_KEY, acceptVersion, name, species, personality, game, birthmonth, birthday, nhdetails, excludedetails, thumbsize, _callback);

    }

    /**
     * Villagers
     * This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species &#x60;frog&#x60; and personality &#x60;smug&#x60; will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param name Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you. (optional)
     * @param species Retrieve villagers of a certain species. (optional)
     * @param personality Retrieve villagers with a certain personality. For &#39;sisterly&#39;, note that the community often also calls it &#39;uchi&#39; or &#39;big sister&#39;. (optional)
     * @param game Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in &#x60;?game&#x3D;nh&amp;game&#x3D;pc&#x60;. (optional)
     * @param birthmonth Retrieve villagers born in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;) or the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;). (optional)
     * @param birthday Use with &#x60;birthmonth&#x60; to get villager(s) born on a specific day. Value should be an int, 1 through 31. (optional)
     * @param nhdetails When set to &#x60;true&#x60;, an &#x60;nh_details&#x60; object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned &#x60;nh_details&#x60; field will be set to null. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return List&lt;Villager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of villagers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the inputs (usually query parameters) has an invalid value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public List<Villager> villagersGet(UUID X_API_KEY, String acceptVersion, String name, String species, String personality, List<String> game, String birthmonth, String birthday, String nhdetails, String excludedetails, Integer thumbsize) throws ApiException {
        ApiResponse<List<Villager>> localVarResp = villagersGetWithHttpInfo(X_API_KEY, acceptVersion, name, species, personality, game, birthmonth, birthday, nhdetails, excludedetails, thumbsize);
        return localVarResp.getData();
    }

    /**
     * Villagers
     * This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species &#x60;frog&#x60; and personality &#x60;smug&#x60; will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param name Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you. (optional)
     * @param species Retrieve villagers of a certain species. (optional)
     * @param personality Retrieve villagers with a certain personality. For &#39;sisterly&#39;, note that the community often also calls it &#39;uchi&#39; or &#39;big sister&#39;. (optional)
     * @param game Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in &#x60;?game&#x3D;nh&amp;game&#x3D;pc&#x60;. (optional)
     * @param birthmonth Retrieve villagers born in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;) or the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;). (optional)
     * @param birthday Use with &#x60;birthmonth&#x60; to get villager(s) born on a specific day. Value should be an int, 1 through 31. (optional)
     * @param nhdetails When set to &#x60;true&#x60;, an &#x60;nh_details&#x60; object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned &#x60;nh_details&#x60; field will be set to null. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @return ApiResponse&lt;List&lt;Villager&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of villagers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the inputs (usually query parameters) has an invalid value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Villager>> villagersGetWithHttpInfo(UUID X_API_KEY, String acceptVersion, String name, String species, String personality, List<String> game, String birthmonth, String birthday, String nhdetails, String excludedetails, Integer thumbsize) throws ApiException {
        okhttp3.Call localVarCall = villagersGetValidateBeforeCall(X_API_KEY, acceptVersion, name, species, personality, game, birthmonth, birthday, nhdetails, excludedetails, thumbsize, null);
        Type localVarReturnType = new TypeToken<List<Villager>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Villagers (asynchronously)
     * This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species &#x60;frog&#x60; and personality &#x60;smug&#x60; will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
     * @param X_API_KEY Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API. (required)
     * @param acceptVersion The version of the API you are calling, written as &#x60;1.0.0&#x60;. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes. (required)
     * @param name Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you. (optional)
     * @param species Retrieve villagers of a certain species. (optional)
     * @param personality Retrieve villagers with a certain personality. For &#39;sisterly&#39;, note that the community often also calls it &#39;uchi&#39; or &#39;big sister&#39;. (optional)
     * @param game Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in &#x60;?game&#x3D;nh&amp;game&#x3D;pc&#x60;. (optional)
     * @param birthmonth Retrieve villagers born in a specific month. Value may be the month&#39;s name (&#x60;jan&#x60;, &#x60;january&#x60;) or the integer representing the month (&#x60;01&#x60;, &#x60;1&#x60;). (optional)
     * @param birthday Use with &#x60;birthmonth&#x60; to get villager(s) born on a specific day. Value should be an int, 1 through 31. (optional)
     * @param nhdetails When set to &#x60;true&#x60;, an &#x60;nh_details&#x60; object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned &#x60;nh_details&#x60; field will be set to null. (optional)
     * @param excludedetails When set to &#x60;true&#x60;, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings. (optional)
     * @param thumbsize Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of villagers. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of the inputs (usually query parameters) has an invalid value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Failed to authenticate user from &#x60;X-API-KEY&#x60;. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was an error fetching the requested data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call villagersGetAsync(UUID X_API_KEY, String acceptVersion, String name, String species, String personality, List<String> game, String birthmonth, String birthday, String nhdetails, String excludedetails, Integer thumbsize, final ApiCallback<List<Villager>> _callback) throws ApiException {

        okhttp3.Call localVarCall = villagersGetValidateBeforeCall(X_API_KEY, acceptVersion, name, species, personality, game, birthmonth, birthday, nhdetails, excludedetails, thumbsize, _callback);
        Type localVarReturnType = new TypeToken<List<Villager>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
