/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VillagerNhDetails {
  public static final String SERIALIZED_NAME_CATCHPHRASE = "catchphrase";
  @SerializedName(SERIALIZED_NAME_CATCHPHRASE)
  private String catchphrase;

  public static final String SERIALIZED_NAME_CLOTHING = "clothing";
  @SerializedName(SERIALIZED_NAME_CLOTHING)
  private String clothing;

  public static final String SERIALIZED_NAME_CLOTHING_VARIATION = "clothing_variation";
  @SerializedName(SERIALIZED_NAME_CLOTHING_VARIATION)
  private String clothingVariation;

  public static final String SERIALIZED_NAME_FAV_COLORS = "fav_colors";
  @SerializedName(SERIALIZED_NAME_FAV_COLORS)
  private List<String> favColors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAV_STYLES = "fav_styles";
  @SerializedName(SERIALIZED_NAME_FAV_STYLES)
  private List<String> favStyles = new ArrayList<>();

  /**
   * The villager&#39;s primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
   */
  @JsonAdapter(HobbyEnum.Adapter.class)
  public enum HobbyEnum {
    EDUCATION("Education"),
    
    FASHION("Fashion"),
    
    FITNESS("Fitness"),
    
    MUSIC("Music"),
    
    NATURE("Nature"),
    
    PLAY("Play");

    private String value;

    HobbyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HobbyEnum fromValue(String value) {
      for (HobbyEnum b : HobbyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HobbyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HobbyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HobbyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HobbyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HobbyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOBBY = "hobby";
  @SerializedName(SERIALIZED_NAME_HOBBY)
  private HobbyEnum hobby;

  public static final String SERIALIZED_NAME_HOUSE_EXTERIOR_URL = "house_exterior_url";
  @SerializedName(SERIALIZED_NAME_HOUSE_EXTERIOR_URL)
  private String houseExteriorUrl;

  public static final String SERIALIZED_NAME_HOUSE_FLOORING = "house_flooring";
  @SerializedName(SERIALIZED_NAME_HOUSE_FLOORING)
  private String houseFlooring;

  public static final String SERIALIZED_NAME_HOUSE_INTERIOR_URL = "house_interior_url";
  @SerializedName(SERIALIZED_NAME_HOUSE_INTERIOR_URL)
  private String houseInteriorUrl;

  public static final String SERIALIZED_NAME_HOUSE_MUSIC = "house_music";
  @SerializedName(SERIALIZED_NAME_HOUSE_MUSIC)
  private String houseMusic;

  public static final String SERIALIZED_NAME_HOUSE_MUSIC_NOTE = "house_music_note";
  @SerializedName(SERIALIZED_NAME_HOUSE_MUSIC_NOTE)
  private String houseMusicNote;

  public static final String SERIALIZED_NAME_HOUSE_WALLPAPER = "house_wallpaper";
  @SerializedName(SERIALIZED_NAME_HOUSE_WALLPAPER)
  private String houseWallpaper;

  public static final String SERIALIZED_NAME_ICON_URL = "icon_url";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photo_url";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private String quote;

  /**
   * Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
   */
  @JsonAdapter(SubPersonalityEnum.Adapter.class)
  public enum SubPersonalityEnum {
    A("A"),
    
    B("B");

    private String value;

    SubPersonalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubPersonalityEnum fromValue(String value) {
      for (SubPersonalityEnum b : SubPersonalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubPersonalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubPersonalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubPersonalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubPersonalityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubPersonalityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_PERSONALITY = "sub-personality";
  @SerializedName(SERIALIZED_NAME_SUB_PERSONALITY)
  private SubPersonalityEnum subPersonality;

  public VillagerNhDetails() {
  }

  public VillagerNhDetails catchphrase(String catchphrase) {
    this.catchphrase = catchphrase;
    return this;
  }

  /**
   * The default phrase a villager will use when speaking to the player.
   * @return catchphrase
   */
  @javax.annotation.Nullable
  public String getCatchphrase() {
    return catchphrase;
  }

  public void setCatchphrase(String catchphrase) {
    this.catchphrase = catchphrase;
  }


  public VillagerNhDetails clothing(String clothing) {
    this.clothing = clothing;
    return this;
  }

  /**
   * The default clothing that the villager wears.
   * @return clothing
   */
  @javax.annotation.Nullable
  public String getClothing() {
    return clothing;
  }

  public void setClothing(String clothing) {
    this.clothing = clothing;
  }


  public VillagerNhDetails clothingVariation(String clothingVariation) {
    this.clothingVariation = clothingVariation;
    return this;
  }

  /**
   * The variation of the clothing (usually a color).
   * @return clothingVariation
   */
  @javax.annotation.Nullable
  public String getClothingVariation() {
    return clothingVariation;
  }

  public void setClothingVariation(String clothingVariation) {
    this.clothingVariation = clothingVariation;
  }


  public VillagerNhDetails favColors(List<String> favColors) {
    this.favColors = favColors;
    return this;
  }

  public VillagerNhDetails addFavColorsItem(String favColorsItem) {
    if (this.favColors == null) {
      this.favColors = new ArrayList<>();
    }
    this.favColors.add(favColorsItem);
    return this;
  }

  /**
   * The villager&#39;s favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).
   * @return favColors
   */
  @javax.annotation.Nullable
  public List<String> getFavColors() {
    return favColors;
  }

  public void setFavColors(List<String> favColors) {
    this.favColors = favColors;
  }


  public VillagerNhDetails favStyles(List<String> favStyles) {
    this.favStyles = favStyles;
    return this;
  }

  public VillagerNhDetails addFavStylesItem(String favStylesItem) {
    if (this.favStyles == null) {
      this.favStyles = new ArrayList<>();
    }
    this.favStyles.add(favStylesItem);
    return this;
  }

  /**
   * The villager&#39;s favorite clothing styles.
   * @return favStyles
   */
  @javax.annotation.Nullable
  public List<String> getFavStyles() {
    return favStyles;
  }

  public void setFavStyles(List<String> favStyles) {
    this.favStyles = favStyles;
  }


  public VillagerNhDetails hobby(HobbyEnum hobby) {
    this.hobby = hobby;
    return this;
  }

  /**
   * The villager&#39;s primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
   * @return hobby
   */
  @javax.annotation.Nullable
  public HobbyEnum getHobby() {
    return hobby;
  }

  public void setHobby(HobbyEnum hobby) {
    this.hobby = hobby;
  }


  public VillagerNhDetails houseExteriorUrl(String houseExteriorUrl) {
    this.houseExteriorUrl = houseExteriorUrl;
    return this;
  }

  /**
   * A rendered model of the villager&#39;s house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.
   * @return houseExteriorUrl
   */
  @javax.annotation.Nullable
  public String getHouseExteriorUrl() {
    return houseExteriorUrl;
  }

  public void setHouseExteriorUrl(String houseExteriorUrl) {
    this.houseExteriorUrl = houseExteriorUrl;
  }


  public VillagerNhDetails houseFlooring(String houseFlooring) {
    this.houseFlooring = houseFlooring;
    return this;
  }

  /**
   * The flooring in the villager&#39;s house.
   * @return houseFlooring
   */
  @javax.annotation.Nullable
  public String getHouseFlooring() {
    return houseFlooring;
  }

  public void setHouseFlooring(String houseFlooring) {
    this.houseFlooring = houseFlooring;
  }


  public VillagerNhDetails houseInteriorUrl(String houseInteriorUrl) {
    this.houseInteriorUrl = houseInteriorUrl;
    return this;
  }

  /**
   * A screenshot of the villager&#39;s house interior.
   * @return houseInteriorUrl
   */
  @javax.annotation.Nullable
  public String getHouseInteriorUrl() {
    return houseInteriorUrl;
  }

  public void setHouseInteriorUrl(String houseInteriorUrl) {
    this.houseInteriorUrl = houseInteriorUrl;
  }


  public VillagerNhDetails houseMusic(String houseMusic) {
    this.houseMusic = houseMusic;
    return this;
  }

  /**
   * The music in the villager&#39;s house.
   * @return houseMusic
   */
  @javax.annotation.Nullable
  public String getHouseMusic() {
    return houseMusic;
  }

  public void setHouseMusic(String houseMusic) {
    this.houseMusic = houseMusic;
  }


  public VillagerNhDetails houseMusicNote(String houseMusicNote) {
    this.houseMusicNote = houseMusicNote;
    return this;
  }

  /**
   * Any notes about the villager&#39;s music. If populated, this is usually \&quot;Does not contain a stereo initially\&quot;, meaning that the villager&#39;s house will not play music unless provided with a stereo.
   * @return houseMusicNote
   */
  @javax.annotation.Nullable
  public String getHouseMusicNote() {
    return houseMusicNote;
  }

  public void setHouseMusicNote(String houseMusicNote) {
    this.houseMusicNote = houseMusicNote;
  }


  public VillagerNhDetails houseWallpaper(String houseWallpaper) {
    this.houseWallpaper = houseWallpaper;
    return this;
  }

  /**
   * The wallpaper in the villager&#39;s house.
   * @return houseWallpaper
   */
  @javax.annotation.Nullable
  public String getHouseWallpaper() {
    return houseWallpaper;
  }

  public void setHouseWallpaper(String houseWallpaper) {
    this.houseWallpaper = houseWallpaper;
  }


  public VillagerNhDetails iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The villager&#39;s icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public VillagerNhDetails imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the villager from *New Horizons*.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public VillagerNhDetails photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The villager&#39;s photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public VillagerNhDetails quote(String quote) {
    this.quote = quote;
    return this;
  }

  /**
   * The villager&#39;s quote, as found on the back of their in-game photo.
   * @return quote
   */
  @javax.annotation.Nullable
  public String getQuote() {
    return quote;
  }

  public void setQuote(String quote) {
    this.quote = quote;
  }


  public VillagerNhDetails subPersonality(SubPersonalityEnum subPersonality) {
    this.subPersonality = subPersonality;
    return this;
  }

  /**
   * Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
   * @return subPersonality
   */
  @javax.annotation.Nullable
  public SubPersonalityEnum getSubPersonality() {
    return subPersonality;
  }

  public void setSubPersonality(SubPersonalityEnum subPersonality) {
    this.subPersonality = subPersonality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VillagerNhDetails villagerNhDetails = (VillagerNhDetails) o;
    return Objects.equals(this.catchphrase, villagerNhDetails.catchphrase) &&
        Objects.equals(this.clothing, villagerNhDetails.clothing) &&
        Objects.equals(this.clothingVariation, villagerNhDetails.clothingVariation) &&
        Objects.equals(this.favColors, villagerNhDetails.favColors) &&
        Objects.equals(this.favStyles, villagerNhDetails.favStyles) &&
        Objects.equals(this.hobby, villagerNhDetails.hobby) &&
        Objects.equals(this.houseExteriorUrl, villagerNhDetails.houseExteriorUrl) &&
        Objects.equals(this.houseFlooring, villagerNhDetails.houseFlooring) &&
        Objects.equals(this.houseInteriorUrl, villagerNhDetails.houseInteriorUrl) &&
        Objects.equals(this.houseMusic, villagerNhDetails.houseMusic) &&
        Objects.equals(this.houseMusicNote, villagerNhDetails.houseMusicNote) &&
        Objects.equals(this.houseWallpaper, villagerNhDetails.houseWallpaper) &&
        Objects.equals(this.iconUrl, villagerNhDetails.iconUrl) &&
        Objects.equals(this.imageUrl, villagerNhDetails.imageUrl) &&
        Objects.equals(this.photoUrl, villagerNhDetails.photoUrl) &&
        Objects.equals(this.quote, villagerNhDetails.quote) &&
        Objects.equals(this.subPersonality, villagerNhDetails.subPersonality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catchphrase, clothing, clothingVariation, favColors, favStyles, hobby, houseExteriorUrl, houseFlooring, houseInteriorUrl, houseMusic, houseMusicNote, houseWallpaper, iconUrl, imageUrl, photoUrl, quote, subPersonality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VillagerNhDetails {\n");
    sb.append("    catchphrase: ").append(toIndentedString(catchphrase)).append("\n");
    sb.append("    clothing: ").append(toIndentedString(clothing)).append("\n");
    sb.append("    clothingVariation: ").append(toIndentedString(clothingVariation)).append("\n");
    sb.append("    favColors: ").append(toIndentedString(favColors)).append("\n");
    sb.append("    favStyles: ").append(toIndentedString(favStyles)).append("\n");
    sb.append("    hobby: ").append(toIndentedString(hobby)).append("\n");
    sb.append("    houseExteriorUrl: ").append(toIndentedString(houseExteriorUrl)).append("\n");
    sb.append("    houseFlooring: ").append(toIndentedString(houseFlooring)).append("\n");
    sb.append("    houseInteriorUrl: ").append(toIndentedString(houseInteriorUrl)).append("\n");
    sb.append("    houseMusic: ").append(toIndentedString(houseMusic)).append("\n");
    sb.append("    houseMusicNote: ").append(toIndentedString(houseMusicNote)).append("\n");
    sb.append("    houseWallpaper: ").append(toIndentedString(houseWallpaper)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    subPersonality: ").append(toIndentedString(subPersonality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catchphrase");
    openapiFields.add("clothing");
    openapiFields.add("clothing_variation");
    openapiFields.add("fav_colors");
    openapiFields.add("fav_styles");
    openapiFields.add("hobby");
    openapiFields.add("house_exterior_url");
    openapiFields.add("house_flooring");
    openapiFields.add("house_interior_url");
    openapiFields.add("house_music");
    openapiFields.add("house_music_note");
    openapiFields.add("house_wallpaper");
    openapiFields.add("icon_url");
    openapiFields.add("image_url");
    openapiFields.add("photo_url");
    openapiFields.add("quote");
    openapiFields.add("sub-personality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VillagerNhDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VillagerNhDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VillagerNhDetails is not found in the empty JSON string", VillagerNhDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VillagerNhDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VillagerNhDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catchphrase") != null && !jsonObj.get("catchphrase").isJsonNull()) && !jsonObj.get("catchphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catchphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catchphrase").toString()));
      }
      if ((jsonObj.get("clothing") != null && !jsonObj.get("clothing").isJsonNull()) && !jsonObj.get("clothing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clothing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clothing").toString()));
      }
      if ((jsonObj.get("clothing_variation") != null && !jsonObj.get("clothing_variation").isJsonNull()) && !jsonObj.get("clothing_variation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clothing_variation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clothing_variation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fav_colors") != null && !jsonObj.get("fav_colors").isJsonNull() && !jsonObj.get("fav_colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fav_colors` to be an array in the JSON string but got `%s`", jsonObj.get("fav_colors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fav_styles") != null && !jsonObj.get("fav_styles").isJsonNull() && !jsonObj.get("fav_styles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fav_styles` to be an array in the JSON string but got `%s`", jsonObj.get("fav_styles").toString()));
      }
      if ((jsonObj.get("hobby") != null && !jsonObj.get("hobby").isJsonNull()) && !jsonObj.get("hobby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hobby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hobby").toString()));
      }
      // validate the optional field `hobby`
      if (jsonObj.get("hobby") != null && !jsonObj.get("hobby").isJsonNull()) {
        HobbyEnum.validateJsonElement(jsonObj.get("hobby"));
      }
      if ((jsonObj.get("house_exterior_url") != null && !jsonObj.get("house_exterior_url").isJsonNull()) && !jsonObj.get("house_exterior_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_exterior_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_exterior_url").toString()));
      }
      if ((jsonObj.get("house_flooring") != null && !jsonObj.get("house_flooring").isJsonNull()) && !jsonObj.get("house_flooring").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_flooring` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_flooring").toString()));
      }
      if ((jsonObj.get("house_interior_url") != null && !jsonObj.get("house_interior_url").isJsonNull()) && !jsonObj.get("house_interior_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_interior_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_interior_url").toString()));
      }
      if ((jsonObj.get("house_music") != null && !jsonObj.get("house_music").isJsonNull()) && !jsonObj.get("house_music").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_music` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_music").toString()));
      }
      if ((jsonObj.get("house_music_note") != null && !jsonObj.get("house_music_note").isJsonNull()) && !jsonObj.get("house_music_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_music_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_music_note").toString()));
      }
      if ((jsonObj.get("house_wallpaper") != null && !jsonObj.get("house_wallpaper").isJsonNull()) && !jsonObj.get("house_wallpaper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house_wallpaper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house_wallpaper").toString()));
      }
      if ((jsonObj.get("icon_url") != null && !jsonObj.get("icon_url").isJsonNull()) && !jsonObj.get("icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_url").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("photo_url") != null && !jsonObj.get("photo_url").isJsonNull()) && !jsonObj.get("photo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photo_url").toString()));
      }
      if ((jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) && !jsonObj.get("quote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote").toString()));
      }
      if ((jsonObj.get("sub-personality") != null && !jsonObj.get("sub-personality").isJsonNull()) && !jsonObj.get("sub-personality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub-personality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub-personality").toString()));
      }
      // validate the optional field `sub-personality`
      if (jsonObj.get("sub-personality") != null && !jsonObj.get("sub-personality").isJsonNull()) {
        SubPersonalityEnum.validateJsonElement(jsonObj.get("sub-personality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VillagerNhDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VillagerNhDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VillagerNhDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VillagerNhDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VillagerNhDetails>() {
           @Override
           public void write(JsonWriter out, VillagerNhDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VillagerNhDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VillagerNhDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VillagerNhDetails
   * @throws IOException if the JSON string is invalid with respect to VillagerNhDetails
   */
  public static VillagerNhDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VillagerNhDetails.class);
  }

  /**
   * Convert an instance of VillagerNhDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

