/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHClothingAvailabilityInner;
import org.openapitools.client.model.NHClothingBuyInner;
import org.openapitools.client.model.NHRecipeMaterialsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHRecipe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHRecipe {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private List<NHClothingAvailabilityInner> availability = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private List<NHClothingBuyInner> buy = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<NHRecipeMaterialsInner> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECIPES_TO_UNLOCK = "recipes_to_unlock";
  @SerializedName(SERIALIZED_NAME_RECIPES_TO_UNLOCK)
  private Integer recipesToUnlock;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_SERIAL_ID = "serial_id";
  @SerializedName(SERIALIZED_NAME_SERIAL_ID)
  private Integer serialId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public NHRecipe() {
  }

  public NHRecipe availability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
    return this;
  }

  public NHRecipe addAvailabilityItem(NHClothingAvailabilityInner availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

  /**
   * Where the recipe may be obtained from. &#x60;from&#x60; is a brief description of the source; &#x60;note&#x60;, when provided, provides additional details.
   * @return availability
   */
  @javax.annotation.Nullable
  public List<NHClothingAvailabilityInner> getAvailability() {
    return availability;
  }

  public void setAvailability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
  }


  public NHRecipe buy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
    return this;
  }

  public NHRecipe addBuyItem(NHClothingBuyInner buyItem) {
    if (this.buy == null) {
      this.buy = new ArrayList<>();
    }
    this.buy.add(buyItem);
    return this;
  }

  /**
   * An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).
   * @return buy
   */
  @javax.annotation.Nullable
  public List<NHClothingBuyInner> getBuy() {
    return buy;
  }

  public void setBuy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
  }


  public NHRecipe imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the item the recipe crafts.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public NHRecipe materials(List<NHRecipeMaterialsInner> materials) {
    this.materials = materials;
    return this;
  }

  public NHRecipe addMaterialsItem(NHRecipeMaterialsInner materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

  /**
   * The list of materials required to craft the item.
   * @return materials
   */
  @javax.annotation.Nullable
  public List<NHRecipeMaterialsInner> getMaterials() {
    return materials;
  }

  public void setMaterials(List<NHRecipeMaterialsInner> materials) {
    this.materials = materials;
  }


  public NHRecipe name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the recipe.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHRecipe recipesToUnlock(Integer recipesToUnlock) {
    this.recipesToUnlock = recipesToUnlock;
    return this;
  }

  /**
   * How many recipes the player has to have learned to unlock this one.
   * @return recipesToUnlock
   */
  @javax.annotation.Nullable
  public Integer getRecipesToUnlock() {
    return recipesToUnlock;
  }

  public void setRecipesToUnlock(Integer recipesToUnlock) {
    this.recipesToUnlock = recipesToUnlock;
  }


  public NHRecipe sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * The number of Bells the sea creature can be sold to Nook&#39;s store for.
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHRecipe serialId(Integer serialId) {
    this.serialId = serialId;
    return this;
  }

  /**
   * The unique in-game ID of the recipe.
   * @return serialId
   */
  @javax.annotation.Nullable
  public Integer getSerialId() {
    return serialId;
  }

  public void setSerialId(Integer serialId) {
    this.serialId = serialId;
  }


  public NHRecipe url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHRecipe nhRecipe = (NHRecipe) o;
    return Objects.equals(this.availability, nhRecipe.availability) &&
        Objects.equals(this.buy, nhRecipe.buy) &&
        Objects.equals(this.imageUrl, nhRecipe.imageUrl) &&
        Objects.equals(this.materials, nhRecipe.materials) &&
        Objects.equals(this.name, nhRecipe.name) &&
        Objects.equals(this.recipesToUnlock, nhRecipe.recipesToUnlock) &&
        Objects.equals(this.sell, nhRecipe.sell) &&
        Objects.equals(this.serialId, nhRecipe.serialId) &&
        Objects.equals(this.url, nhRecipe.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, buy, imageUrl, materials, name, recipesToUnlock, sell, serialId, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHRecipe {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recipesToUnlock: ").append(toIndentedString(recipesToUnlock)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    serialId: ").append(toIndentedString(serialId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("buy");
    openapiFields.add("image_url");
    openapiFields.add("materials");
    openapiFields.add("name");
    openapiFields.add("recipes_to_unlock");
    openapiFields.add("sell");
    openapiFields.add("serial_id");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHRecipe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHRecipe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHRecipe is not found in the empty JSON string", NHRecipe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHRecipe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHRecipe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        JsonArray jsonArrayavailability = jsonObj.getAsJsonArray("availability");
        if (jsonArrayavailability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability` to be an array in the JSON string but got `%s`", jsonObj.get("availability").toString()));
          }

          // validate the optional field `availability` (array)
          for (int i = 0; i < jsonArrayavailability.size(); i++) {
            NHClothingAvailabilityInner.validateJsonElement(jsonArrayavailability.get(i));
          };
        }
      }
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        JsonArray jsonArraybuy = jsonObj.getAsJsonArray("buy");
        if (jsonArraybuy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buy` to be an array in the JSON string but got `%s`", jsonObj.get("buy").toString()));
          }

          // validate the optional field `buy` (array)
          for (int i = 0; i < jsonArraybuy.size(); i++) {
            NHClothingBuyInner.validateJsonElement(jsonArraybuy.get(i));
          };
        }
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull()) {
        JsonArray jsonArraymaterials = jsonObj.getAsJsonArray("materials");
        if (jsonArraymaterials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("materials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
          }

          // validate the optional field `materials` (array)
          for (int i = 0; i < jsonArraymaterials.size(); i++) {
            NHRecipeMaterialsInner.validateJsonElement(jsonArraymaterials.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHRecipe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHRecipe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHRecipe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHRecipe.class));

       return (TypeAdapter<T>) new TypeAdapter<NHRecipe>() {
           @Override
           public void write(JsonWriter out, NHRecipe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHRecipe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHRecipe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHRecipe
   * @throws IOException if the JSON string is invalid with respect to NHRecipe
   */
  public static NHRecipe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHRecipe.class);
  }

  /**
   * Convert an instance of NHRecipe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

