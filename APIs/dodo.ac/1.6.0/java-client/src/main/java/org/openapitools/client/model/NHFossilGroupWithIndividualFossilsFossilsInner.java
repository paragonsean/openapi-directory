/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHFossilGroupWithIndividualFossilsFossilsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHFossilGroupWithIndividualFossilsFossilsInner {
  /**
   * Gets or Sets colors
   */
  @JsonAdapter(ColorsEnum.Adapter.class)
  public enum ColorsEnum {
    AQUA("Aqua"),
    
    BEIGE("Beige"),
    
    BLACK("Black"),
    
    BLUE("Blue"),
    
    BROWN("Brown"),
    
    COLORFUL("Colorful"),
    
    GRAY("Gray"),
    
    GREEN("Green"),
    
    ORANGE("Orange"),
    
    PINK("Pink"),
    
    PURPLE("Purple"),
    
    RED("Red"),
    
    WHITE("White"),
    
    YELLOW("Yellow");

    private String value;

    ColorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorsEnum fromValue(String value) {
      for (ColorsEnum b : ColorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<ColorsEnum> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOSSIL_GROUP = "fossil_group";
  @SerializedName(SERIALIZED_NAME_FOSSIL_GROUP)
  private String fossilGroup;

  public static final String SERIALIZED_NAME_HHA_BASE = "hha_base";
  @SerializedName(SERIALIZED_NAME_HHA_BASE)
  private Integer hhaBase;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_INTERACTABLE = "interactable";
  @SerializedName(SERIALIZED_NAME_INTERACTABLE)
  private Boolean interactable;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public NHFossilGroupWithIndividualFossilsFossilsInner() {
  }

  public NHFossilGroupWithIndividualFossilsFossilsInner colors(List<ColorsEnum> colors) {
    this.colors = colors;
    return this;
  }

  public NHFossilGroupWithIndividualFossilsFossilsInner addColorsItem(ColorsEnum colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Get colors
   * @return colors
   */
  @javax.annotation.Nullable
  public List<ColorsEnum> getColors() {
    return colors;
  }

  public void setColors(List<ColorsEnum> colors) {
    this.colors = colors;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner fossilGroup(String fossilGroup) {
    this.fossilGroup = fossilGroup;
    return this;
  }

  /**
   * Get fossilGroup
   * @return fossilGroup
   */
  @javax.annotation.Nullable
  public String getFossilGroup() {
    return fossilGroup;
  }

  public void setFossilGroup(String fossilGroup) {
    this.fossilGroup = fossilGroup;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner hhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
    return this;
  }

  /**
   * Get hhaBase
   * @return hhaBase
   */
  @javax.annotation.Nullable
  public Integer getHhaBase() {
    return hhaBase;
  }

  public void setHhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner interactable(Boolean interactable) {
    this.interactable = interactable;
    return this;
  }

  /**
   * Get interactable
   * @return interactable
   */
  @javax.annotation.Nullable
  public Boolean getInteractable() {
    return interactable;
  }

  public void setInteractable(Boolean interactable) {
    this.interactable = interactable;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * Get sell
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NHFossilGroupWithIndividualFossilsFossilsInner width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHFossilGroupWithIndividualFossilsFossilsInner nhFossilGroupWithIndividualFossilsFossilsInner = (NHFossilGroupWithIndividualFossilsFossilsInner) o;
    return Objects.equals(this.colors, nhFossilGroupWithIndividualFossilsFossilsInner.colors) &&
        Objects.equals(this.fossilGroup, nhFossilGroupWithIndividualFossilsFossilsInner.fossilGroup) &&
        Objects.equals(this.hhaBase, nhFossilGroupWithIndividualFossilsFossilsInner.hhaBase) &&
        Objects.equals(this.imageUrl, nhFossilGroupWithIndividualFossilsFossilsInner.imageUrl) &&
        Objects.equals(this.interactable, nhFossilGroupWithIndividualFossilsFossilsInner.interactable) &&
        Objects.equals(this.length, nhFossilGroupWithIndividualFossilsFossilsInner.length) &&
        Objects.equals(this.name, nhFossilGroupWithIndividualFossilsFossilsInner.name) &&
        Objects.equals(this.sell, nhFossilGroupWithIndividualFossilsFossilsInner.sell) &&
        Objects.equals(this.url, nhFossilGroupWithIndividualFossilsFossilsInner.url) &&
        Objects.equals(this.width, nhFossilGroupWithIndividualFossilsFossilsInner.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colors, fossilGroup, hhaBase, imageUrl, interactable, length, name, sell, url, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHFossilGroupWithIndividualFossilsFossilsInner {\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    fossilGroup: ").append(toIndentedString(fossilGroup)).append("\n");
    sb.append("    hhaBase: ").append(toIndentedString(hhaBase)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    interactable: ").append(toIndentedString(interactable)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colors");
    openapiFields.add("fossil_group");
    openapiFields.add("hha_base");
    openapiFields.add("image_url");
    openapiFields.add("interactable");
    openapiFields.add("length");
    openapiFields.add("name");
    openapiFields.add("sell");
    openapiFields.add("url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHFossilGroupWithIndividualFossilsFossilsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHFossilGroupWithIndividualFossilsFossilsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHFossilGroupWithIndividualFossilsFossilsInner is not found in the empty JSON string", NHFossilGroupWithIndividualFossilsFossilsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHFossilGroupWithIndividualFossilsFossilsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHFossilGroupWithIndividualFossilsFossilsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull() && !jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
      if ((jsonObj.get("fossil_group") != null && !jsonObj.get("fossil_group").isJsonNull()) && !jsonObj.get("fossil_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fossil_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fossil_group").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHFossilGroupWithIndividualFossilsFossilsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHFossilGroupWithIndividualFossilsFossilsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHFossilGroupWithIndividualFossilsFossilsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHFossilGroupWithIndividualFossilsFossilsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<NHFossilGroupWithIndividualFossilsFossilsInner>() {
           @Override
           public void write(JsonWriter out, NHFossilGroupWithIndividualFossilsFossilsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHFossilGroupWithIndividualFossilsFossilsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHFossilGroupWithIndividualFossilsFossilsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHFossilGroupWithIndividualFossilsFossilsInner
   * @throws IOException if the JSON string is invalid with respect to NHFossilGroupWithIndividualFossilsFossilsInner
   */
  public static NHFossilGroupWithIndividualFossilsFossilsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHFossilGroupWithIndividualFossilsFossilsInner.class);
  }

  /**
   * Convert an instance of NHFossilGroupWithIndividualFossilsFossilsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

