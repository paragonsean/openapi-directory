/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHClothingAvailabilityInner;
import org.openapitools.client.model.NHClothingBuyInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHInterior
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHInterior {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private List<NHClothingAvailabilityInner> availability = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private List<NHClothingBuyInner> buy = new ArrayList<>();

  /**
   * The category of item as shown in the player&#39;s inventory.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    FLOORS("Floors"),
    
    WALLPAPER("Wallpaper"),
    
    RUGS("Rugs");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  /**
   * (WIP)
   */
  @JsonAdapter(ColorsEnum.Adapter.class)
  public enum ColorsEnum {
    AQUA("Aqua"),
    
    BEIGE("Beige"),
    
    BLACK("Black"),
    
    BLUE("Blue"),
    
    BROWN("Brown"),
    
    COLORFUL("Colorful"),
    
    GRAY("Gray"),
    
    GREEN("Green"),
    
    ORANGE("Orange"),
    
    PINK("Pink"),
    
    PURPLE("Purple"),
    
    RED("Red"),
    
    WHITE("White"),
    
    YELLOW("Yellow");

    private String value;

    ColorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorsEnum fromValue(String value) {
      for (ColorsEnum b : ColorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private ColorsEnum colors;

  public static final String SERIALIZED_NAME_GRID_LENGTH = "grid_length";
  @SerializedName(SERIALIZED_NAME_GRID_LENGTH)
  private Float gridLength;

  public static final String SERIALIZED_NAME_GRID_WIDTH = "grid_width";
  @SerializedName(SERIALIZED_NAME_GRID_WIDTH)
  private Float gridWidth;

  public static final String SERIALIZED_NAME_HHA_BASE = "hha_base";
  @SerializedName(SERIALIZED_NAME_HHA_BASE)
  private Integer hhaBase;

  public static final String SERIALIZED_NAME_HHA_CATEGORY = "hha_category";
  @SerializedName(SERIALIZED_NAME_HHA_CATEGORY)
  private String hhaCategory;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_ITEM_SERIES = "item_series";
  @SerializedName(SERIALIZED_NAME_ITEM_SERIES)
  private String itemSeries;

  public static final String SERIALIZED_NAME_ITEM_SET = "item_set";
  @SerializedName(SERIALIZED_NAME_ITEM_SET)
  private String itemSet;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<String> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNLOCKED = "unlocked";
  @SerializedName(SERIALIZED_NAME_UNLOCKED)
  private Boolean unlocked;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION_ADDED = "version_added";
  @SerializedName(SERIALIZED_NAME_VERSION_ADDED)
  private String versionAdded;

  public NHInterior() {
  }

  public NHInterior availability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
    return this;
  }

  public NHInterior addAvailabilityItem(NHClothingAvailabilityInner availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

  /**
   * Where the clothing may be obtained from (could be multiple sources). &#x60;from&#x60; is a brief description of the source; &#x60;note&#x60;, when provided, provides additional details.
   * @return availability
   */
  @javax.annotation.Nullable
  public List<NHClothingAvailabilityInner> getAvailability() {
    return availability;
  }

  public void setAvailability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
  }


  public NHInterior buy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
    return this;
  }

  public NHInterior addBuyItem(NHClothingBuyInner buyItem) {
    if (this.buy == null) {
      this.buy = new ArrayList<>();
    }
    this.buy.add(buyItem);
    return this;
  }

  /**
   * An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
   * @return buy
   */
  @javax.annotation.Nullable
  public List<NHClothingBuyInner> getBuy() {
    return buy;
  }

  public void setBuy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
  }


  public NHInterior category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of item as shown in the player&#39;s inventory.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public NHInterior colors(ColorsEnum colors) {
    this.colors = colors;
    return this;
  }

  /**
   * (WIP)
   * @return colors
   */
  @javax.annotation.Nullable
  public ColorsEnum getColors() {
    return colors;
  }

  public void setColors(ColorsEnum colors) {
    this.colors = colors;
  }


  public NHInterior gridLength(Float gridLength) {
    this.gridLength = gridLength;
    return this;
  }

  /**
   * The number of lengthwise grid spaces this item takes up.
   * @return gridLength
   */
  @javax.annotation.Nullable
  public Float getGridLength() {
    return gridLength;
  }

  public void setGridLength(Float gridLength) {
    this.gridLength = gridLength;
  }


  public NHInterior gridWidth(Float gridWidth) {
    this.gridWidth = gridWidth;
    return this;
  }

  /**
   * The number of widthwise grid spaces this item takes up.
   * @return gridWidth
   */
  @javax.annotation.Nullable
  public Float getGridWidth() {
    return gridWidth;
  }

  public void setGridWidth(Float gridWidth) {
    this.gridWidth = gridWidth;
  }


  public NHInterior hhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
    return this;
  }

  /**
   * The base value that the item provides to a player&#39;s Happy Home Academy score when placed in their home.
   * @return hhaBase
   */
  @javax.annotation.Nullable
  public Integer getHhaBase() {
    return hhaBase;
  }

  public void setHhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
  }


  public NHInterior hhaCategory(String hhaCategory) {
    this.hhaCategory = hhaCategory;
    return this;
  }

  /**
   * The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
   * @return hhaCategory
   */
  @javax.annotation.Nullable
  public String getHhaCategory() {
    return hhaCategory;
  }

  public void setHhaCategory(String hhaCategory) {
    this.hhaCategory = hhaCategory;
  }


  public NHInterior imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the interior.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public NHInterior itemSeries(String itemSeries) {
    this.itemSeries = itemSeries;
    return this;
  }

  /**
   * The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
   * @return itemSeries
   */
  @javax.annotation.Nullable
  public String getItemSeries() {
    return itemSeries;
  }

  public void setItemSeries(String itemSeries) {
    this.itemSeries = itemSeries;
  }


  public NHInterior itemSet(String itemSet) {
    this.itemSet = itemSet;
    return this;
  }

  /**
   * The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
   * @return itemSet
   */
  @javax.annotation.Nullable
  public String getItemSet() {
    return itemSet;
  }

  public void setItemSet(String itemSet) {
    this.itemSet = itemSet;
  }


  public NHInterior name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the interior.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHInterior notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Any additional miscellaneous information about the item, such as a name change from a past update.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public NHInterior sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * The number of Bells the interior can be sold to Nook&#39;s store for.
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHInterior tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \&quot;Chair\&quot;, \&quot;Musical Instrument\&quot;, and \&quot;Mario\&quot;. If the item does not have a tag, this will be an empty string.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public NHInterior themes(List<String> themes) {
    this.themes = themes;
    return this;
  }

  public NHInterior addThemesItem(String themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
   * @return themes
   */
  @javax.annotation.Nullable
  public List<String> getThemes() {
    return themes;
  }

  public void setThemes(List<String> themes) {
    this.themes = themes;
  }


  public NHInterior unlocked(Boolean unlocked) {
    this.unlocked = unlocked;
    return this;
  }

  /**
   * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren&#39;t actually made available until a subsequent update unlocks them.
   * @return unlocked
   */
  @javax.annotation.Nullable
  public Boolean getUnlocked() {
    return unlocked;
  }

  public void setUnlocked(Boolean unlocked) {
    this.unlocked = unlocked;
  }


  public NHInterior url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NHInterior versionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
    return this;
  }

  /**
   * The version of *New Horizons* that the item was added. Items that were included at the game&#39;s launch have version \&quot;1.0.0\&quot;.
   * @return versionAdded
   */
  @javax.annotation.Nullable
  public String getVersionAdded() {
    return versionAdded;
  }

  public void setVersionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHInterior nhInterior = (NHInterior) o;
    return Objects.equals(this.availability, nhInterior.availability) &&
        Objects.equals(this.buy, nhInterior.buy) &&
        Objects.equals(this.category, nhInterior.category) &&
        Objects.equals(this.colors, nhInterior.colors) &&
        Objects.equals(this.gridLength, nhInterior.gridLength) &&
        Objects.equals(this.gridWidth, nhInterior.gridWidth) &&
        Objects.equals(this.hhaBase, nhInterior.hhaBase) &&
        Objects.equals(this.hhaCategory, nhInterior.hhaCategory) &&
        Objects.equals(this.imageUrl, nhInterior.imageUrl) &&
        Objects.equals(this.itemSeries, nhInterior.itemSeries) &&
        Objects.equals(this.itemSet, nhInterior.itemSet) &&
        Objects.equals(this.name, nhInterior.name) &&
        Objects.equals(this.notes, nhInterior.notes) &&
        Objects.equals(this.sell, nhInterior.sell) &&
        Objects.equals(this.tag, nhInterior.tag) &&
        Objects.equals(this.themes, nhInterior.themes) &&
        Objects.equals(this.unlocked, nhInterior.unlocked) &&
        Objects.equals(this.url, nhInterior.url) &&
        Objects.equals(this.versionAdded, nhInterior.versionAdded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, buy, category, colors, gridLength, gridWidth, hhaBase, hhaCategory, imageUrl, itemSeries, itemSet, name, notes, sell, tag, themes, unlocked, url, versionAdded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHInterior {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    gridLength: ").append(toIndentedString(gridLength)).append("\n");
    sb.append("    gridWidth: ").append(toIndentedString(gridWidth)).append("\n");
    sb.append("    hhaBase: ").append(toIndentedString(hhaBase)).append("\n");
    sb.append("    hhaCategory: ").append(toIndentedString(hhaCategory)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    itemSeries: ").append(toIndentedString(itemSeries)).append("\n");
    sb.append("    itemSet: ").append(toIndentedString(itemSet)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    unlocked: ").append(toIndentedString(unlocked)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    versionAdded: ").append(toIndentedString(versionAdded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("buy");
    openapiFields.add("category");
    openapiFields.add("colors");
    openapiFields.add("grid_length");
    openapiFields.add("grid_width");
    openapiFields.add("hha_base");
    openapiFields.add("hha_category");
    openapiFields.add("image_url");
    openapiFields.add("item_series");
    openapiFields.add("item_set");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("sell");
    openapiFields.add("tag");
    openapiFields.add("themes");
    openapiFields.add("unlocked");
    openapiFields.add("url");
    openapiFields.add("version_added");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHInterior
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHInterior.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHInterior is not found in the empty JSON string", NHInterior.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHInterior.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHInterior` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        JsonArray jsonArrayavailability = jsonObj.getAsJsonArray("availability");
        if (jsonArrayavailability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability` to be an array in the JSON string but got `%s`", jsonObj.get("availability").toString()));
          }

          // validate the optional field `availability` (array)
          for (int i = 0; i < jsonArrayavailability.size(); i++) {
            NHClothingAvailabilityInner.validateJsonElement(jsonArrayavailability.get(i));
          };
        }
      }
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        JsonArray jsonArraybuy = jsonObj.getAsJsonArray("buy");
        if (jsonArraybuy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buy` to be an array in the JSON string but got `%s`", jsonObj.get("buy").toString()));
          }

          // validate the optional field `buy` (array)
          for (int i = 0; i < jsonArraybuy.size(); i++) {
            NHClothingBuyInner.validateJsonElement(jsonArraybuy.get(i));
          };
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull()) && !jsonObj.get("colors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
      // validate the optional field `colors`
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull()) {
        ColorsEnum.validateJsonElement(jsonObj.get("colors"));
      }
      if ((jsonObj.get("hha_category") != null && !jsonObj.get("hha_category").isJsonNull()) && !jsonObj.get("hha_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hha_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hha_category").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("item_series") != null && !jsonObj.get("item_series").isJsonNull()) && !jsonObj.get("item_series").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_series` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_series").toString()));
      }
      if ((jsonObj.get("item_set") != null && !jsonObj.get("item_set").isJsonNull()) && !jsonObj.get("item_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_set").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("themes") != null && !jsonObj.get("themes").isJsonNull() && !jsonObj.get("themes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version_added") != null && !jsonObj.get("version_added").isJsonNull()) && !jsonObj.get("version_added").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_added` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_added").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHInterior.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHInterior' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHInterior> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHInterior.class));

       return (TypeAdapter<T>) new TypeAdapter<NHInterior>() {
           @Override
           public void write(JsonWriter out, NHInterior value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHInterior read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHInterior given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHInterior
   * @throws IOException if the JSON string is invalid with respect to NHInterior
   */
  public static NHInterior fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHInterior.class);
  }

  /**
   * Convert an instance of NHInterior to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

