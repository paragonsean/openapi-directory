/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHClothingAvailabilityInner;
import org.openapitools.client.model.NHClothingBuyInner;
import org.openapitools.client.model.NHToolVariationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHTool
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHTool {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private List<NHClothingAvailabilityInner> availability = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private List<NHClothingBuyInner> buy = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_BODY_PART = "custom_body_part";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BODY_PART)
  private String customBodyPart;

  public static final String SERIALIZED_NAME_CUSTOM_KITS = "custom_kits";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KITS)
  private Integer customKits;

  public static final String SERIALIZED_NAME_CUSTOMIZABLE = "customizable";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZABLE)
  private Boolean customizable;

  public static final String SERIALIZED_NAME_HHA_BASE = "hha_base";
  @SerializedName(SERIALIZED_NAME_HHA_BASE)
  private Integer hhaBase;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_UNLOCKED = "unlocked";
  @SerializedName(SERIALIZED_NAME_UNLOCKED)
  private Boolean unlocked;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USES = "uses";
  @SerializedName(SERIALIZED_NAME_USES)
  private Integer uses;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<NHToolVariationsInner> variations = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_ADDED = "version_added";
  @SerializedName(SERIALIZED_NAME_VERSION_ADDED)
  private String versionAdded;

  public NHTool() {
  }

  public NHTool availability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
    return this;
  }

  public NHTool addAvailabilityItem(NHClothingAvailabilityInner availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

  /**
   * Where the tool may be obtained from (could be multiple sources). &#x60;from&#x60; is a brief description of the source; &#x60;note&#x60;, when provided, provides additional details.
   * @return availability
   */
  @javax.annotation.Nullable
  public List<NHClothingAvailabilityInner> getAvailability() {
    return availability;
  }

  public void setAvailability(List<NHClothingAvailabilityInner> availability) {
    this.availability = availability;
  }


  public NHTool buy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
    return this;
  }

  public NHTool addBuyItem(NHClothingBuyInner buyItem) {
    if (this.buy == null) {
      this.buy = new ArrayList<>();
    }
    this.buy.add(buyItem);
    return this;
  }

  /**
   * An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
   * @return buy
   */
  @javax.annotation.Nullable
  public List<NHClothingBuyInner> getBuy() {
    return buy;
  }

  public void setBuy(List<NHClothingBuyInner> buy) {
    this.buy = buy;
  }


  public NHTool customBodyPart(String customBodyPart) {
    this.customBodyPart = customBodyPart;
    return this;
  }

  /**
   * If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \&quot;Bamboo\&quot; as the bamboo color is able to be customized.
   * @return customBodyPart
   */
  @javax.annotation.Nullable
  public String getCustomBodyPart() {
    return customBodyPart;
  }

  public void setCustomBodyPart(String customBodyPart) {
    this.customBodyPart = customBodyPart;
  }


  public NHTool customKits(Integer customKits) {
    this.customKits = customKits;
    return this;
  }

  /**
   * The number of &#x60;custom_kit_type&#x60;s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
   * @return customKits
   */
  @javax.annotation.Nullable
  public Integer getCustomKits() {
    return customKits;
  }

  public void setCustomKits(Integer customKits) {
    this.customKits = customKits;
  }


  public NHTool customizable(Boolean customizable) {
    this.customizable = customizable;
    return this;
  }

  /**
   * Whether or not the item is customizable via a crafting table.
   * @return customizable
   */
  @javax.annotation.Nullable
  public Boolean getCustomizable() {
    return customizable;
  }

  public void setCustomizable(Boolean customizable) {
    this.customizable = customizable;
  }


  public NHTool hhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
    return this;
  }

  /**
   * The base value that the item provides to a player&#39;s Happy Home Academy score when placed in their home.
   * @return hhaBase
   */
  @javax.annotation.Nullable
  public Integer getHhaBase() {
    return hhaBase;
  }

  public void setHhaBase(Integer hhaBase) {
    this.hhaBase = hhaBase;
  }


  public NHTool name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the tool.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHTool notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Any additional miscellaneous information about the item, such as a name change from a past update.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public NHTool sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * The number of bells the tool can be sold to the store for.
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHTool unlocked(Boolean unlocked) {
    this.unlocked = unlocked;
    return this;
  }

  /**
   * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren&#39;t actually made available until a subsequent update unlocks them.
   * @return unlocked
   */
  @javax.annotation.Nullable
  public Boolean getUnlocked() {
    return unlocked;
  }

  public void setUnlocked(Boolean unlocked) {
    this.unlocked = unlocked;
  }


  public NHTool url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link the the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NHTool uses(Integer uses) {
    this.uses = uses;
    return this;
  }

  /**
   * How many times the tool can be used before breaking.
   * @return uses
   */
  @javax.annotation.Nullable
  public Integer getUses() {
    return uses;
  }

  public void setUses(Integer uses) {
    this.uses = uses;
  }


  public NHTool variations(List<NHToolVariationsInner> variations) {
    this.variations = variations;
    return this;
  }

  public NHTool addVariationsItem(NHToolVariationsInner variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

  /**
   * An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the &#x60;variation&#x60; field will be empty. Tools with multiple variations will have the &#x60;variation&#x60; fields defined with the name of each variation.
   * @return variations
   */
  @javax.annotation.Nullable
  public List<NHToolVariationsInner> getVariations() {
    return variations;
  }

  public void setVariations(List<NHToolVariationsInner> variations) {
    this.variations = variations;
  }


  public NHTool versionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
    return this;
  }

  /**
   * The version of *New Horizons* that the item was added. Items that were included at the game&#39;s launch have version \&quot;1.0.0\&quot;.
   * @return versionAdded
   */
  @javax.annotation.Nullable
  public String getVersionAdded() {
    return versionAdded;
  }

  public void setVersionAdded(String versionAdded) {
    this.versionAdded = versionAdded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHTool nhTool = (NHTool) o;
    return Objects.equals(this.availability, nhTool.availability) &&
        Objects.equals(this.buy, nhTool.buy) &&
        Objects.equals(this.customBodyPart, nhTool.customBodyPart) &&
        Objects.equals(this.customKits, nhTool.customKits) &&
        Objects.equals(this.customizable, nhTool.customizable) &&
        Objects.equals(this.hhaBase, nhTool.hhaBase) &&
        Objects.equals(this.name, nhTool.name) &&
        Objects.equals(this.notes, nhTool.notes) &&
        Objects.equals(this.sell, nhTool.sell) &&
        Objects.equals(this.unlocked, nhTool.unlocked) &&
        Objects.equals(this.url, nhTool.url) &&
        Objects.equals(this.uses, nhTool.uses) &&
        Objects.equals(this.variations, nhTool.variations) &&
        Objects.equals(this.versionAdded, nhTool.versionAdded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, buy, customBodyPart, customKits, customizable, hhaBase, name, notes, sell, unlocked, url, uses, variations, versionAdded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHTool {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    customBodyPart: ").append(toIndentedString(customBodyPart)).append("\n");
    sb.append("    customKits: ").append(toIndentedString(customKits)).append("\n");
    sb.append("    customizable: ").append(toIndentedString(customizable)).append("\n");
    sb.append("    hhaBase: ").append(toIndentedString(hhaBase)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    unlocked: ").append(toIndentedString(unlocked)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uses: ").append(toIndentedString(uses)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("    versionAdded: ").append(toIndentedString(versionAdded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("buy");
    openapiFields.add("custom_body_part");
    openapiFields.add("custom_kits");
    openapiFields.add("customizable");
    openapiFields.add("hha_base");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("sell");
    openapiFields.add("unlocked");
    openapiFields.add("url");
    openapiFields.add("uses");
    openapiFields.add("variations");
    openapiFields.add("version_added");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHTool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHTool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHTool is not found in the empty JSON string", NHTool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHTool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHTool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        JsonArray jsonArrayavailability = jsonObj.getAsJsonArray("availability");
        if (jsonArrayavailability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability` to be an array in the JSON string but got `%s`", jsonObj.get("availability").toString()));
          }

          // validate the optional field `availability` (array)
          for (int i = 0; i < jsonArrayavailability.size(); i++) {
            NHClothingAvailabilityInner.validateJsonElement(jsonArrayavailability.get(i));
          };
        }
      }
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        JsonArray jsonArraybuy = jsonObj.getAsJsonArray("buy");
        if (jsonArraybuy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buy` to be an array in the JSON string but got `%s`", jsonObj.get("buy").toString()));
          }

          // validate the optional field `buy` (array)
          for (int i = 0; i < jsonArraybuy.size(); i++) {
            NHClothingBuyInner.validateJsonElement(jsonArraybuy.get(i));
          };
        }
      }
      if ((jsonObj.get("custom_body_part") != null && !jsonObj.get("custom_body_part").isJsonNull()) && !jsonObj.get("custom_body_part").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_body_part` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_body_part").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonNull()) {
        JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
        if (jsonArrayvariations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
          }

          // validate the optional field `variations` (array)
          for (int i = 0; i < jsonArrayvariations.size(); i++) {
            NHToolVariationsInner.validateJsonElement(jsonArrayvariations.get(i));
          };
        }
      }
      if ((jsonObj.get("version_added") != null && !jsonObj.get("version_added").isJsonNull()) && !jsonObj.get("version_added").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_added` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_added").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHTool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHTool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHTool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHTool.class));

       return (TypeAdapter<T>) new TypeAdapter<NHTool>() {
           @Override
           public void write(JsonWriter out, NHTool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHTool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHTool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHTool
   * @throws IOException if the JSON string is invalid with respect to NHTool
   */
  public static NHTool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHTool.class);
  }

  /**
   * Convert an instance of NHTool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

