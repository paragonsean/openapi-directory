/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHBugNorth;
import org.openapitools.client.model.NHBugSouth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHBug
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHBug {
  public static final String SERIALIZED_NAME_CATCHPHRASES = "catchphrases";
  @SerializedName(SERIALIZED_NAME_CATCHPHRASES)
  private List<String> catchphrases = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORTH = "north";
  @SerializedName(SERIALIZED_NAME_NORTH)
  private NHBugNorth north;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private String rarity;

  public static final String SERIALIZED_NAME_RENDER_URL = "render_url";
  @SerializedName(SERIALIZED_NAME_RENDER_URL)
  private String renderUrl;

  public static final String SERIALIZED_NAME_SELL_FLICK = "sell_flick";
  @SerializedName(SERIALIZED_NAME_SELL_FLICK)
  private Integer sellFlick;

  public static final String SERIALIZED_NAME_SELL_NOOK = "sell_nook";
  @SerializedName(SERIALIZED_NAME_SELL_NOOK)
  private Integer sellNook;

  public static final String SERIALIZED_NAME_SOUTH = "south";
  @SerializedName(SERIALIZED_NAME_SOUTH)
  private NHBugSouth south;

  public static final String SERIALIZED_NAME_TANK_LENGTH = "tank_length";
  @SerializedName(SERIALIZED_NAME_TANK_LENGTH)
  private Float tankLength;

  public static final String SERIALIZED_NAME_TANK_WIDTH = "tank_width";
  @SerializedName(SERIALIZED_NAME_TANK_WIDTH)
  private Float tankWidth;

  public static final String SERIALIZED_NAME_TOTAL_CATCH = "total_catch";
  @SerializedName(SERIALIZED_NAME_TOTAL_CATCH)
  private Integer totalCatch;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public NHBug() {
  }

  public NHBug catchphrases(List<String> catchphrases) {
    this.catchphrases = catchphrases;
    return this;
  }

  public NHBug addCatchphrasesItem(String catchphrasesItem) {
    if (this.catchphrases == null) {
      this.catchphrases = new ArrayList<>();
    }
    this.catchphrases.add(catchphrasesItem);
    return this;
  }

  /**
   * An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.
   * @return catchphrases
   */
  @javax.annotation.Nullable
  public List<String> getCatchphrases() {
    return catchphrases;
  }

  public void setCatchphrases(List<String> catchphrases) {
    this.catchphrases = catchphrases;
  }


  public NHBug imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image of the bug.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public NHBug location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Short descriptor of where the bug can be found.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public NHBug name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the bug.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHBug north(NHBugNorth north) {
    this.north = north;
    return this;
  }

  /**
   * Get north
   * @return north
   */
  @javax.annotation.Nullable
  public NHBugNorth getNorth() {
    return north;
  }

  public void setNorth(NHBugNorth north) {
    this.north = north;
  }


  public NHBug number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * In-game bug number, marking position in the Critterpedia.
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public NHBug rarity(String rarity) {
    this.rarity = rarity;
    return this;
  }

  /**
   * How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
   * @return rarity
   */
  @javax.annotation.Nullable
  public String getRarity() {
    return rarity;
  }

  public void setRarity(String rarity) {
    this.rarity = rarity;
  }


  public NHBug renderUrl(String renderUrl) {
    this.renderUrl = renderUrl;
    return this;
  }

  /**
   * Render of the bug.
   * @return renderUrl
   */
  @javax.annotation.Nullable
  public String getRenderUrl() {
    return renderUrl;
  }

  public void setRenderUrl(String renderUrl) {
    this.renderUrl = renderUrl;
  }


  public NHBug sellFlick(Integer sellFlick) {
    this.sellFlick = sellFlick;
    return this;
  }

  /**
   * The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of &#x60;sell_nook&#x60;.
   * @return sellFlick
   */
  @javax.annotation.Nullable
  public Integer getSellFlick() {
    return sellFlick;
  }

  public void setSellFlick(Integer sellFlick) {
    this.sellFlick = sellFlick;
  }


  public NHBug sellNook(Integer sellNook) {
    this.sellNook = sellNook;
    return this;
  }

  /**
   * The number of Bells the bug can be sold to Nook&#39;s store for.
   * @return sellNook
   */
  @javax.annotation.Nullable
  public Integer getSellNook() {
    return sellNook;
  }

  public void setSellNook(Integer sellNook) {
    this.sellNook = sellNook;
  }


  public NHBug south(NHBugSouth south) {
    this.south = south;
    return this;
  }

  /**
   * Get south
   * @return south
   */
  @javax.annotation.Nullable
  public NHBugSouth getSouth() {
    return south;
  }

  public void setSouth(NHBugSouth south) {
    this.south = south;
  }


  public NHBug tankLength(Float tankLength) {
    this.tankLength = tankLength;
    return this;
  }

  /**
   * The length of the tank when the bug is placed as a furniture item.
   * @return tankLength
   */
  @javax.annotation.Nullable
  public Float getTankLength() {
    return tankLength;
  }

  public void setTankLength(Float tankLength) {
    this.tankLength = tankLength;
  }


  public NHBug tankWidth(Float tankWidth) {
    this.tankWidth = tankWidth;
    return this;
  }

  /**
   * The width of the tank when the bug is placed as a furniture item.
   * @return tankWidth
   */
  @javax.annotation.Nullable
  public Float getTankWidth() {
    return tankWidth;
  }

  public void setTankWidth(Float tankWidth) {
    this.tankWidth = tankWidth;
  }


  public NHBug totalCatch(Integer totalCatch) {
    this.totalCatch = totalCatch;
    return this;
  }

  /**
   * The total number of bug the player has to have caught before this bug will start spawning.
   * @return totalCatch
   */
  @javax.annotation.Nullable
  public Integer getTotalCatch() {
    return totalCatch;
  }

  public void setTotalCatch(Integer totalCatch) {
    this.totalCatch = totalCatch;
  }


  public NHBug url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHBug nhBug = (NHBug) o;
    return Objects.equals(this.catchphrases, nhBug.catchphrases) &&
        Objects.equals(this.imageUrl, nhBug.imageUrl) &&
        Objects.equals(this.location, nhBug.location) &&
        Objects.equals(this.name, nhBug.name) &&
        Objects.equals(this.north, nhBug.north) &&
        Objects.equals(this.number, nhBug.number) &&
        Objects.equals(this.rarity, nhBug.rarity) &&
        Objects.equals(this.renderUrl, nhBug.renderUrl) &&
        Objects.equals(this.sellFlick, nhBug.sellFlick) &&
        Objects.equals(this.sellNook, nhBug.sellNook) &&
        Objects.equals(this.south, nhBug.south) &&
        Objects.equals(this.tankLength, nhBug.tankLength) &&
        Objects.equals(this.tankWidth, nhBug.tankWidth) &&
        Objects.equals(this.totalCatch, nhBug.totalCatch) &&
        Objects.equals(this.url, nhBug.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catchphrases, imageUrl, location, name, north, number, rarity, renderUrl, sellFlick, sellNook, south, tankLength, tankWidth, totalCatch, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHBug {\n");
    sb.append("    catchphrases: ").append(toIndentedString(catchphrases)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    north: ").append(toIndentedString(north)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    renderUrl: ").append(toIndentedString(renderUrl)).append("\n");
    sb.append("    sellFlick: ").append(toIndentedString(sellFlick)).append("\n");
    sb.append("    sellNook: ").append(toIndentedString(sellNook)).append("\n");
    sb.append("    south: ").append(toIndentedString(south)).append("\n");
    sb.append("    tankLength: ").append(toIndentedString(tankLength)).append("\n");
    sb.append("    tankWidth: ").append(toIndentedString(tankWidth)).append("\n");
    sb.append("    totalCatch: ").append(toIndentedString(totalCatch)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catchphrases");
    openapiFields.add("image_url");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("north");
    openapiFields.add("number");
    openapiFields.add("rarity");
    openapiFields.add("render_url");
    openapiFields.add("sell_flick");
    openapiFields.add("sell_nook");
    openapiFields.add("south");
    openapiFields.add("tank_length");
    openapiFields.add("tank_width");
    openapiFields.add("total_catch");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHBug
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHBug.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHBug is not found in the empty JSON string", NHBug.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHBug.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHBug` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("catchphrases") != null && !jsonObj.get("catchphrases").isJsonNull() && !jsonObj.get("catchphrases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `catchphrases` to be an array in the JSON string but got `%s`", jsonObj.get("catchphrases").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `north`
      if (jsonObj.get("north") != null && !jsonObj.get("north").isJsonNull()) {
        NHBugNorth.validateJsonElement(jsonObj.get("north"));
      }
      if ((jsonObj.get("rarity") != null && !jsonObj.get("rarity").isJsonNull()) && !jsonObj.get("rarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rarity").toString()));
      }
      if ((jsonObj.get("render_url") != null && !jsonObj.get("render_url").isJsonNull()) && !jsonObj.get("render_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `render_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("render_url").toString()));
      }
      // validate the optional field `south`
      if (jsonObj.get("south") != null && !jsonObj.get("south").isJsonNull()) {
        NHBugSouth.validateJsonElement(jsonObj.get("south"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHBug.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHBug' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHBug> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHBug.class));

       return (TypeAdapter<T>) new TypeAdapter<NHBug>() {
           @Override
           public void write(JsonWriter out, NHBug value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHBug read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHBug given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHBug
   * @throws IOException if the JSON string is invalid with respect to NHBug
   */
  public static NHBug fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHBug.class);
  }

  /**
   * Convert an instance of NHBug to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

