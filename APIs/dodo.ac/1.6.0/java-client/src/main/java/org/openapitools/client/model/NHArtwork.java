/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NHArtworkFakeInfo;
import org.openapitools.client.model.NHArtworkRealInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHArtwork
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHArtwork {
  public static final String SERIALIZED_NAME_ART_NAME = "art_name";
  @SerializedName(SERIALIZED_NAME_ART_NAME)
  private String artName;

  public static final String SERIALIZED_NAME_ART_STYLE = "art_style";
  @SerializedName(SERIALIZED_NAME_ART_STYLE)
  private String artStyle;

  /**
   * The type of artwork (either a painting or statue).
   */
  @JsonAdapter(ArtTypeEnum.Adapter.class)
  public enum ArtTypeEnum {
    PAINTING("Painting"),
    
    STATUE("Statue");

    private String value;

    ArtTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArtTypeEnum fromValue(String value) {
      for (ArtTypeEnum b : ArtTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArtTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArtTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArtTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArtTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArtTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ART_TYPE = "art_type";
  @SerializedName(SERIALIZED_NAME_ART_TYPE)
  private ArtTypeEnum artType;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability;

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private Integer buy;

  public static final String SERIALIZED_NAME_FAKE_INFO = "fake_info";
  @SerializedName(SERIALIZED_NAME_FAKE_INFO)
  private NHArtworkFakeInfo fakeInfo;

  public static final String SERIALIZED_NAME_HAS_FAKE = "has_fake";
  @SerializedName(SERIALIZED_NAME_HAS_FAKE)
  private Boolean hasFake;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Float length;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REAL_INFO = "real_info";
  @SerializedName(SERIALIZED_NAME_REAL_INFO)
  private NHArtworkRealInfo realInfo;

  public static final String SERIALIZED_NAME_SELL = "sell";
  @SerializedName(SERIALIZED_NAME_SELL)
  private Integer sell;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Float width;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public NHArtwork() {
  }

  public NHArtwork artName(String artName) {
    this.artName = artName;
    return this;
  }

  /**
   * The name of the real-life analog to the artwork.
   * @return artName
   */
  @javax.annotation.Nullable
  public String getArtName() {
    return artName;
  }

  public void setArtName(String artName) {
    this.artName = artName;
  }


  public NHArtwork artStyle(String artStyle) {
    this.artStyle = artStyle;
    return this;
  }

  /**
   * The art style of the artwork.
   * @return artStyle
   */
  @javax.annotation.Nullable
  public String getArtStyle() {
    return artStyle;
  }

  public void setArtStyle(String artStyle) {
    this.artStyle = artStyle;
  }


  public NHArtwork artType(ArtTypeEnum artType) {
    this.artType = artType;
    return this;
  }

  /**
   * The type of artwork (either a painting or statue).
   * @return artType
   */
  @javax.annotation.Nullable
  public ArtTypeEnum getArtType() {
    return artType;
  }

  public void setArtType(ArtTypeEnum artType) {
    this.artType = artType;
  }


  public NHArtwork author(String author) {
    this.author = author;
    return this;
  }

  /**
   * The author of the real-life analog to the artwork.
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public NHArtwork availability(String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * The availability of the artwork.
   * @return availability
   */
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }

  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public NHArtwork buy(Integer buy) {
    this.buy = buy;
    return this;
  }

  /**
   * The number of Bells the artwork may be purchased for.
   * @return buy
   */
  @javax.annotation.Nullable
  public Integer getBuy() {
    return buy;
  }

  public void setBuy(Integer buy) {
    this.buy = buy;
  }


  public NHArtwork fakeInfo(NHArtworkFakeInfo fakeInfo) {
    this.fakeInfo = fakeInfo;
    return this;
  }

  /**
   * Get fakeInfo
   * @return fakeInfo
   */
  @javax.annotation.Nullable
  public NHArtworkFakeInfo getFakeInfo() {
    return fakeInfo;
  }

  public void setFakeInfo(NHArtworkFakeInfo fakeInfo) {
    this.fakeInfo = fakeInfo;
  }


  public NHArtwork hasFake(Boolean hasFake) {
    this.hasFake = hasFake;
    return this;
  }

  /**
   * Whether the artwork has a fake or not.
   * @return hasFake
   */
  @javax.annotation.Nullable
  public Boolean getHasFake() {
    return hasFake;
  }

  public void setHasFake(Boolean hasFake) {
    this.hasFake = hasFake;
  }


  public NHArtwork length(Float length) {
    this.length = length;
    return this;
  }

  /**
   * The length of the artwork.
   * @return length
   */
  @javax.annotation.Nullable
  public Float getLength() {
    return length;
  }

  public void setLength(Float length) {
    this.length = length;
  }


  public NHArtwork name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the artwork.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHArtwork realInfo(NHArtworkRealInfo realInfo) {
    this.realInfo = realInfo;
    return this;
  }

  /**
   * Get realInfo
   * @return realInfo
   */
  @javax.annotation.Nullable
  public NHArtworkRealInfo getRealInfo() {
    return realInfo;
  }

  public void setRealInfo(NHArtworkRealInfo realInfo) {
    this.realInfo = realInfo;
  }


  public NHArtwork sell(Integer sell) {
    this.sell = sell;
    return this;
  }

  /**
   * The number of Bells the artwork can be sold to Nook&#39;s store for, when it is genuine.
   * @return sell
   */
  @javax.annotation.Nullable
  public Integer getSell() {
    return sell;
  }

  public void setSell(Integer sell) {
    this.sell = sell;
  }


  public NHArtwork url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NHArtwork width(Float width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the artwork.
   * @return width
   */
  @javax.annotation.Nullable
  public Float getWidth() {
    return width;
  }

  public void setWidth(Float width) {
    this.width = width;
  }


  public NHArtwork year(String year) {
    this.year = year;
    return this;
  }

  /**
   * The year that the real-life analog was made. May be an exact year, an estimate (\&quot;circa\&quot;), or a range.
   * @return year
   */
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHArtwork nhArtwork = (NHArtwork) o;
    return Objects.equals(this.artName, nhArtwork.artName) &&
        Objects.equals(this.artStyle, nhArtwork.artStyle) &&
        Objects.equals(this.artType, nhArtwork.artType) &&
        Objects.equals(this.author, nhArtwork.author) &&
        Objects.equals(this.availability, nhArtwork.availability) &&
        Objects.equals(this.buy, nhArtwork.buy) &&
        Objects.equals(this.fakeInfo, nhArtwork.fakeInfo) &&
        Objects.equals(this.hasFake, nhArtwork.hasFake) &&
        Objects.equals(this.length, nhArtwork.length) &&
        Objects.equals(this.name, nhArtwork.name) &&
        Objects.equals(this.realInfo, nhArtwork.realInfo) &&
        Objects.equals(this.sell, nhArtwork.sell) &&
        Objects.equals(this.url, nhArtwork.url) &&
        Objects.equals(this.width, nhArtwork.width) &&
        Objects.equals(this.year, nhArtwork.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artName, artStyle, artType, author, availability, buy, fakeInfo, hasFake, length, name, realInfo, sell, url, width, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHArtwork {\n");
    sb.append("    artName: ").append(toIndentedString(artName)).append("\n");
    sb.append("    artStyle: ").append(toIndentedString(artStyle)).append("\n");
    sb.append("    artType: ").append(toIndentedString(artType)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    fakeInfo: ").append(toIndentedString(fakeInfo)).append("\n");
    sb.append("    hasFake: ").append(toIndentedString(hasFake)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    realInfo: ").append(toIndentedString(realInfo)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("art_name");
    openapiFields.add("art_style");
    openapiFields.add("art_type");
    openapiFields.add("author");
    openapiFields.add("availability");
    openapiFields.add("buy");
    openapiFields.add("fake_info");
    openapiFields.add("has_fake");
    openapiFields.add("length");
    openapiFields.add("name");
    openapiFields.add("real_info");
    openapiFields.add("sell");
    openapiFields.add("url");
    openapiFields.add("width");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHArtwork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHArtwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHArtwork is not found in the empty JSON string", NHArtwork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHArtwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHArtwork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("art_name") != null && !jsonObj.get("art_name").isJsonNull()) && !jsonObj.get("art_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `art_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("art_name").toString()));
      }
      if ((jsonObj.get("art_style") != null && !jsonObj.get("art_style").isJsonNull()) && !jsonObj.get("art_style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `art_style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("art_style").toString()));
      }
      if ((jsonObj.get("art_type") != null && !jsonObj.get("art_type").isJsonNull()) && !jsonObj.get("art_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `art_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("art_type").toString()));
      }
      // validate the optional field `art_type`
      if (jsonObj.get("art_type") != null && !jsonObj.get("art_type").isJsonNull()) {
        ArtTypeEnum.validateJsonElement(jsonObj.get("art_type"));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      // validate the optional field `fake_info`
      if (jsonObj.get("fake_info") != null && !jsonObj.get("fake_info").isJsonNull()) {
        NHArtworkFakeInfo.validateJsonElement(jsonObj.get("fake_info"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `real_info`
      if (jsonObj.get("real_info") != null && !jsonObj.get("real_info").isJsonNull()) {
        NHArtworkRealInfo.validateJsonElement(jsonObj.get("real_info"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) && !jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHArtwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHArtwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHArtwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHArtwork.class));

       return (TypeAdapter<T>) new TypeAdapter<NHArtwork>() {
           @Override
           public void write(JsonWriter out, NHArtwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHArtwork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHArtwork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHArtwork
   * @throws IOException if the JSON string is invalid with respect to NHArtwork
   */
  public static NHArtwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHArtwork.class);
  }

  /**
   * Convert an instance of NHArtwork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

