/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHFossilGroupWithIndividualFossilsFossilsInner;
import org.openapitools.client.model.NHFossilGroupWithIndividualFossilsMatched;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NHFossilGroupWithIndividualFossils
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHFossilGroupWithIndividualFossils {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FOSSILS = "fossils";
  @SerializedName(SERIALIZED_NAME_FOSSILS)
  private List<NHFossilGroupWithIndividualFossilsFossilsInner> fossils = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCHED = "matched";
  @SerializedName(SERIALIZED_NAME_MATCHED)
  private NHFossilGroupWithIndividualFossilsMatched matched;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private Integer room;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public NHFossilGroupWithIndividualFossils() {
  }

  public NHFossilGroupWithIndividualFossils description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the fossil group.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NHFossilGroupWithIndividualFossils fossils(List<NHFossilGroupWithIndividualFossilsFossilsInner> fossils) {
    this.fossils = fossils;
    return this;
  }

  public NHFossilGroupWithIndividualFossils addFossilsItem(NHFossilGroupWithIndividualFossilsFossilsInner fossilsItem) {
    if (this.fossils == null) {
      this.fossils = new ArrayList<>();
    }
    this.fossils.add(fossilsItem);
    return this;
  }

  /**
   * An array of objects, each object representing a fossil that belongs to the given group.
   * @return fossils
   */
  @javax.annotation.Nullable
  public List<NHFossilGroupWithIndividualFossilsFossilsInner> getFossils() {
    return fossils;
  }

  public void setFossils(List<NHFossilGroupWithIndividualFossilsFossilsInner> fossils) {
    this.fossils = fossils;
  }


  public NHFossilGroupWithIndividualFossils matched(NHFossilGroupWithIndividualFossilsMatched matched) {
    this.matched = matched;
    return this;
  }

  /**
   * Get matched
   * @return matched
   */
  @javax.annotation.Nullable
  public NHFossilGroupWithIndividualFossilsMatched getMatched() {
    return matched;
  }

  public void setMatched(NHFossilGroupWithIndividualFossilsMatched matched) {
    this.matched = matched;
  }


  public NHFossilGroupWithIndividualFossils name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the fossil group.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NHFossilGroupWithIndividualFossils room(Integer room) {
    this.room = room;
    return this;
  }

  /**
   * The room where the fossil group can be found in the museum&#39;s fossil section.
   * @return room
   */
  @javax.annotation.Nullable
  public Integer getRoom() {
    return room;
  }

  public void setRoom(Integer room) {
    this.room = room;
  }


  public NHFossilGroupWithIndividualFossils url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to the respective Nookipedia article.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHFossilGroupWithIndividualFossils nhFossilGroupWithIndividualFossils = (NHFossilGroupWithIndividualFossils) o;
    return Objects.equals(this.description, nhFossilGroupWithIndividualFossils.description) &&
        Objects.equals(this.fossils, nhFossilGroupWithIndividualFossils.fossils) &&
        Objects.equals(this.matched, nhFossilGroupWithIndividualFossils.matched) &&
        Objects.equals(this.name, nhFossilGroupWithIndividualFossils.name) &&
        Objects.equals(this.room, nhFossilGroupWithIndividualFossils.room) &&
        Objects.equals(this.url, nhFossilGroupWithIndividualFossils.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, fossils, matched, name, room, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHFossilGroupWithIndividualFossils {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fossils: ").append(toIndentedString(fossils)).append("\n");
    sb.append("    matched: ").append(toIndentedString(matched)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("fossils");
    openapiFields.add("matched");
    openapiFields.add("name");
    openapiFields.add("room");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHFossilGroupWithIndividualFossils
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHFossilGroupWithIndividualFossils.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHFossilGroupWithIndividualFossils is not found in the empty JSON string", NHFossilGroupWithIndividualFossils.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHFossilGroupWithIndividualFossils.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHFossilGroupWithIndividualFossils` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("fossils") != null && !jsonObj.get("fossils").isJsonNull()) {
        JsonArray jsonArrayfossils = jsonObj.getAsJsonArray("fossils");
        if (jsonArrayfossils != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fossils").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fossils` to be an array in the JSON string but got `%s`", jsonObj.get("fossils").toString()));
          }

          // validate the optional field `fossils` (array)
          for (int i = 0; i < jsonArrayfossils.size(); i++) {
            NHFossilGroupWithIndividualFossilsFossilsInner.validateJsonElement(jsonArrayfossils.get(i));
          };
        }
      }
      // validate the optional field `matched`
      if (jsonObj.get("matched") != null && !jsonObj.get("matched").isJsonNull()) {
        NHFossilGroupWithIndividualFossilsMatched.validateJsonElement(jsonObj.get("matched"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHFossilGroupWithIndividualFossils.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHFossilGroupWithIndividualFossils' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHFossilGroupWithIndividualFossils> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHFossilGroupWithIndividualFossils.class));

       return (TypeAdapter<T>) new TypeAdapter<NHFossilGroupWithIndividualFossils>() {
           @Override
           public void write(JsonWriter out, NHFossilGroupWithIndividualFossils value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHFossilGroupWithIndividualFossils read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHFossilGroupWithIndividualFossils given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHFossilGroupWithIndividualFossils
   * @throws IOException if the JSON string is invalid with respect to NHFossilGroupWithIndividualFossils
   */
  public static NHFossilGroupWithIndividualFossils fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHFossilGroupWithIndividualFossils.class);
  }

  /**
   * Convert an instance of NHFossilGroupWithIndividualFossils to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

