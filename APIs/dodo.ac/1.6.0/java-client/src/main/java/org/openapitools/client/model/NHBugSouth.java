/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NHBugNorthAvailabilityArrayInner;
import org.openapitools.client.model.NHBugSouthTimesByMonth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When you can catch the bug in the Southern hemisphere.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:55.934165-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NHBugSouth {
  public static final String SERIALIZED_NAME_AVAILABILITY_ARRAY = "availability_array";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ARRAY)
  private List<NHBugNorthAvailabilityArrayInner> availabilityArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTHS = "months";
  @SerializedName(SERIALIZED_NAME_MONTHS)
  private String months;

  public static final String SERIALIZED_NAME_MONTHS_ARRAY = "months_array";
  @SerializedName(SERIALIZED_NAME_MONTHS_ARRAY)
  private List<Integer> monthsArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMES_BY_MONTH = "times_by_month";
  @SerializedName(SERIALIZED_NAME_TIMES_BY_MONTH)
  private NHBugSouthTimesByMonth timesByMonth;

  public NHBugSouth() {
  }

  public NHBugSouth availabilityArray(List<NHBugNorthAvailabilityArrayInner> availabilityArray) {
    this.availabilityArray = availabilityArray;
    return this;
  }

  public NHBugSouth addAvailabilityArrayItem(NHBugNorthAvailabilityArrayInner availabilityArrayItem) {
    if (this.availabilityArray == null) {
      this.availabilityArray = new ArrayList<>();
    }
    this.availabilityArray.add(availabilityArrayItem);
    return this;
  }

  /**
   * An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
   * @return availabilityArray
   */
  @javax.annotation.Nullable
  public List<NHBugNorthAvailabilityArrayInner> getAvailabilityArray() {
    return availabilityArray;
  }

  public void setAvailabilityArray(List<NHBugNorthAvailabilityArrayInner> availabilityArray) {
    this.availabilityArray = availabilityArray;
  }


  public NHBugSouth months(String months) {
    this.months = months;
    return this;
  }

  /**
   * The months the bug is available for in the Southern hemisphere. If all year, value will be &#x60;\&quot;All year\&quot;&#x60;.
   * @return months
   */
  @javax.annotation.Nullable
  public String getMonths() {
    return months;
  }

  public void setMonths(String months) {
    this.months = months;
  }


  public NHBugSouth monthsArray(List<Integer> monthsArray) {
    this.monthsArray = monthsArray;
    return this;
  }

  public NHBugSouth addMonthsArrayItem(Integer monthsArrayItem) {
    if (this.monthsArray == null) {
      this.monthsArray = new ArrayList<>();
    }
    this.monthsArray.add(monthsArrayItem);
    return this;
  }

  /**
   * An array of integers representing the months the bug is available in the Southern hemisphere.
   * @return monthsArray
   */
  @javax.annotation.Nullable
  public List<Integer> getMonthsArray() {
    return monthsArray;
  }

  public void setMonthsArray(List<Integer> monthsArray) {
    this.monthsArray = monthsArray;
  }


  public NHBugSouth timesByMonth(NHBugSouthTimesByMonth timesByMonth) {
    this.timesByMonth = timesByMonth;
    return this;
  }

  /**
   * Get timesByMonth
   * @return timesByMonth
   */
  @javax.annotation.Nullable
  public NHBugSouthTimesByMonth getTimesByMonth() {
    return timesByMonth;
  }

  public void setTimesByMonth(NHBugSouthTimesByMonth timesByMonth) {
    this.timesByMonth = timesByMonth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NHBugSouth nhBugSouth = (NHBugSouth) o;
    return Objects.equals(this.availabilityArray, nhBugSouth.availabilityArray) &&
        Objects.equals(this.months, nhBugSouth.months) &&
        Objects.equals(this.monthsArray, nhBugSouth.monthsArray) &&
        Objects.equals(this.timesByMonth, nhBugSouth.timesByMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityArray, months, monthsArray, timesByMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NHBugSouth {\n");
    sb.append("    availabilityArray: ").append(toIndentedString(availabilityArray)).append("\n");
    sb.append("    months: ").append(toIndentedString(months)).append("\n");
    sb.append("    monthsArray: ").append(toIndentedString(monthsArray)).append("\n");
    sb.append("    timesByMonth: ").append(toIndentedString(timesByMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability_array");
    openapiFields.add("months");
    openapiFields.add("months_array");
    openapiFields.add("times_by_month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NHBugSouth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NHBugSouth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NHBugSouth is not found in the empty JSON string", NHBugSouth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NHBugSouth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NHBugSouth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availability_array") != null && !jsonObj.get("availability_array").isJsonNull()) {
        JsonArray jsonArrayavailabilityArray = jsonObj.getAsJsonArray("availability_array");
        if (jsonArrayavailabilityArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availability_array").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availability_array` to be an array in the JSON string but got `%s`", jsonObj.get("availability_array").toString()));
          }

          // validate the optional field `availability_array` (array)
          for (int i = 0; i < jsonArrayavailabilityArray.size(); i++) {
            NHBugNorthAvailabilityArrayInner.validateJsonElement(jsonArrayavailabilityArray.get(i));
          };
        }
      }
      if ((jsonObj.get("months") != null && !jsonObj.get("months").isJsonNull()) && !jsonObj.get("months").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `months` to be a primitive type in the JSON string but got `%s`", jsonObj.get("months").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("months_array") != null && !jsonObj.get("months_array").isJsonNull() && !jsonObj.get("months_array").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `months_array` to be an array in the JSON string but got `%s`", jsonObj.get("months_array").toString()));
      }
      // validate the optional field `times_by_month`
      if (jsonObj.get("times_by_month") != null && !jsonObj.get("times_by_month").isJsonNull()) {
        NHBugSouthTimesByMonth.validateJsonElement(jsonObj.get("times_by_month"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NHBugSouth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NHBugSouth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NHBugSouth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NHBugSouth.class));

       return (TypeAdapter<T>) new TypeAdapter<NHBugSouth>() {
           @Override
           public void write(JsonWriter out, NHBugSouth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NHBugSouth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NHBugSouth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NHBugSouth
   * @throws IOException if the JSON string is invalid with respect to NHBugSouth
   */
  public static NHBugSouth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NHBugSouth.class);
  }

  /**
   * Convert an instance of NHBugSouth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

