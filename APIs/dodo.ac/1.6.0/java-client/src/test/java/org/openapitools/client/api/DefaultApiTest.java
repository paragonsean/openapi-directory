/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error400;
import org.openapitools.client.model.Error401;
import org.openapitools.client.model.Error404;
import org.openapitools.client.model.Error500;
import org.openapitools.client.model.NHArtwork;
import org.openapitools.client.model.NHBug;
import org.openapitools.client.model.NHClothing;
import org.openapitools.client.model.NHEvent;
import org.openapitools.client.model.NHFish;
import org.openapitools.client.model.NHFossilGroup;
import org.openapitools.client.model.NHFossilGroupWithIndividualFossils;
import org.openapitools.client.model.NHFossilGroupWithIndividualFossilsNoMatched;
import org.openapitools.client.model.NHFurniture;
import org.openapitools.client.model.NHIndividualFossil;
import org.openapitools.client.model.NHInterior;
import org.openapitools.client.model.NHItem;
import org.openapitools.client.model.NHPhoto;
import org.openapitools.client.model.NHRecipe;
import org.openapitools.client.model.NHSeaCreature;
import org.openapitools.client.model.NHTool;
import java.util.UUID;
import org.openapitools.client.model.Villager;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Single New Horizons artwork
     *
     * Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhArtArtworkGetTest() throws ApiException {
        String artwork = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHArtwork response = api.nhArtArtworkGet(artwork, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons artwork
     *
     * Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhArtGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String hasfake = null;
        String excludedetails = null;
        Integer thumbsize = null;
        List<NHArtwork> response = api.nhArtGet(X_API_KEY, acceptVersion, hasfake, excludedetails, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons bug
     *
     * Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhBugsBugGetTest() throws ApiException {
        String bug = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHBug response = api.nhBugsBugGet(bug, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons bugs
     *
     * Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhBugsGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String month = null;
        String excludedetails = null;
        Integer thumbsize = null;
        List<NHBug> response = api.nhBugsGet(X_API_KEY, acceptVersion, month, excludedetails, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons clothing
     *
     * Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhClothingClothingGetTest() throws ApiException {
        String clothing = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHClothing response = api.nhClothingClothingGet(clothing, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons clothing
     *
     * Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhClothingGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String category = null;
        List<String> color = null;
        List<String> style = null;
        String labeltheme = null;
        String excludedetails = null;
        List<NHClothing> response = api.nhClothingGet(X_API_KEY, acceptVersion, category, color, style, labeltheme, excludedetails);
        // TODO: test validations
    }

    /**
     * All New Horizons events
     *
     * Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhEventsGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String date = null;
        String year = null;
        String month = null;
        Integer day = null;
        List<NHEvent> response = api.nhEventsGet(X_API_KEY, acceptVersion, date, year, month, day);
        // TODO: test validations
    }

    /**
     * Single New Horizons fish
     *
     * Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFishFishGetTest() throws ApiException {
        String fish = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHFish response = api.nhFishFishGet(fish, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons fish
     *
     * Get a list of all fish and their details in *New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFishGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String month = null;
        String excludedetails = null;
        Integer thumbsize = null;
        List<NHFish> response = api.nhFishGet(X_API_KEY, acceptVersion, month, excludedetails, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons fossil group with individual fossils
     *
     * Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFossilsAllFossilGetTest() throws ApiException {
        String fossil = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHFossilGroupWithIndividualFossils response = api.nhFossilsAllFossilGet(fossil, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons fossil groups or individual fossil
     *
     * Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFossilsAllGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        List<NHFossilGroupWithIndividualFossilsNoMatched> response = api.nhFossilsAllGet(X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons fossil group
     *
     * Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFossilsGroupsFossilGroupGetTest() throws ApiException {
        String fossilGroup = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHFossilGroup response = api.nhFossilsGroupsFossilGroupGet(fossilGroup, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons fossil groups
     *
     * Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFossilsGroupsGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        List<NHFossilGroup> response = api.nhFossilsGroupsGet(X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons fossil
     *
     * Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFossilsIndividualsFossilGetTest() throws ApiException {
        String fossil = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHIndividualFossil response = api.nhFossilsIndividualsFossilGet(fossil, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons fossils
     *
     * Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFossilsIndividualsGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        List<NHIndividualFossil> response = api.nhFossilsIndividualsGet(X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons furniture
     *
     * Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFurnitureFurnitureGetTest() throws ApiException {
        String furniture = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHFurniture response = api.nhFurnitureFurnitureGet(furniture, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons furniture
     *
     * Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhFurnitureGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String category = null;
        List<String> color = null;
        String excludedetails = null;
        List<NHFurniture> response = api.nhFurnitureGet(X_API_KEY, acceptVersion, category, color, excludedetails);
        // TODO: test validations
    }

    /**
     * All New Horizons interior items
     *
     * Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhInteriorGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        List<String> color = null;
        String excludedetails = null;
        List<NHInterior> response = api.nhInteriorGet(X_API_KEY, acceptVersion, color, excludedetails);
        // TODO: test validations
    }

    /**
     * Single New Horizons interior item
     *
     * Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhInteriorItemGetTest() throws ApiException {
        String item = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        List<String> color = null;
        Integer thumbsize = null;
        NHInterior response = api.nhInteriorItemGet(item, X_API_KEY, acceptVersion, color, thumbsize);
        // TODO: test validations
    }

    /**
     * Miscellaneous New Horizons items
     *
     * Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhItemsGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String excludedetails = null;
        List<NHItem> response = api.nhItemsGet(X_API_KEY, acceptVersion, excludedetails);
        // TODO: test validations
    }

    /**
     * Single New Horizons miscellaneous item
     *
     * Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhItemsItemGetTest() throws ApiException {
        String item = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHItem response = api.nhItemsItemGet(item, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons photos and posters
     *
     * Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhPhotosGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String excludedetails = null;
        List<NHPhoto> response = api.nhPhotosGet(X_API_KEY, acceptVersion, excludedetails);
        // TODO: test validations
    }

    /**
     * Single New Horizons photo or poster
     *
     * Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhPhotosItemGetTest() throws ApiException {
        String item = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHPhoto response = api.nhPhotosItemGet(item, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons recipes
     *
     * Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhRecipesGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String material = null;
        String excludedetails = null;
        Integer thumbsize = null;
        List<NHRecipe> response = api.nhRecipesGet(X_API_KEY, acceptVersion, material, excludedetails, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons recipe
     *
     * Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhRecipesItemGetTest() throws ApiException {
        String item = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHRecipe response = api.nhRecipesItemGet(item, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons sea creatures
     *
     * Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhSeaGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String month = null;
        String excludedetails = null;
        Integer thumbsize = null;
        List<NHSeaCreature> response = api.nhSeaGet(X_API_KEY, acceptVersion, month, excludedetails, thumbsize);
        // TODO: test validations
    }

    /**
     * Single New Horizons sea creature
     *
     * Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhSeaSeaCreatureGetTest() throws ApiException {
        String seaCreature = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHSeaCreature response = api.nhSeaSeaCreatureGet(seaCreature, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * All New Horizons tools
     *
     * Get a list of all tools and their details in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhToolsGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String excludedetails = null;
        List<NHTool> response = api.nhToolsGet(X_API_KEY, acceptVersion, excludedetails);
        // TODO: test validations
    }

    /**
     * Single New Horizons tool
     *
     * Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nhToolsToolGetTest() throws ApiException {
        String tool = null;
        UUID X_API_KEY = null;
        String acceptVersion = null;
        Integer thumbsize = null;
        NHTool response = api.nhToolsToolGet(tool, X_API_KEY, acceptVersion, thumbsize);
        // TODO: test validations
    }

    /**
     * Villagers
     *
     * This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species &#x60;frog&#x60; and personality &#x60;smug&#x60; will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void villagersGetTest() throws ApiException {
        UUID X_API_KEY = null;
        String acceptVersion = null;
        String name = null;
        String species = null;
        String personality = null;
        List<String> game = null;
        String birthmonth = null;
        String birthday = null;
        String nhdetails = null;
        String excludedetails = null;
        Integer thumbsize = null;
        List<Villager> response = api.villagersGet(X_API_KEY, acceptVersion, name, species, personality, game, birthmonth, birthday, nhdetails, excludedetails, thumbsize);
        // TODO: test validations
    }

}
