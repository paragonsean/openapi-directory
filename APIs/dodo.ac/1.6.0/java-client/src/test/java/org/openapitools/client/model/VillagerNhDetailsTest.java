/*
 * Nookipedia
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VillagerNhDetails
 */
public class VillagerNhDetailsTest {
    private final VillagerNhDetails model = new VillagerNhDetails();

    /**
     * Model tests for VillagerNhDetails
     */
    @Test
    public void testVillagerNhDetails() {
        // TODO: test VillagerNhDetails
    }

    /**
     * Test the property 'catchphrase'
     */
    @Test
    public void catchphraseTest() {
        // TODO: test catchphrase
    }

    /**
     * Test the property 'clothing'
     */
    @Test
    public void clothingTest() {
        // TODO: test clothing
    }

    /**
     * Test the property 'clothingVariation'
     */
    @Test
    public void clothingVariationTest() {
        // TODO: test clothingVariation
    }

    /**
     * Test the property 'favColors'
     */
    @Test
    public void favColorsTest() {
        // TODO: test favColors
    }

    /**
     * Test the property 'favStyles'
     */
    @Test
    public void favStylesTest() {
        // TODO: test favStyles
    }

    /**
     * Test the property 'hobby'
     */
    @Test
    public void hobbyTest() {
        // TODO: test hobby
    }

    /**
     * Test the property 'houseExteriorUrl'
     */
    @Test
    public void houseExteriorUrlTest() {
        // TODO: test houseExteriorUrl
    }

    /**
     * Test the property 'houseFlooring'
     */
    @Test
    public void houseFlooringTest() {
        // TODO: test houseFlooring
    }

    /**
     * Test the property 'houseInteriorUrl'
     */
    @Test
    public void houseInteriorUrlTest() {
        // TODO: test houseInteriorUrl
    }

    /**
     * Test the property 'houseMusic'
     */
    @Test
    public void houseMusicTest() {
        // TODO: test houseMusic
    }

    /**
     * Test the property 'houseMusicNote'
     */
    @Test
    public void houseMusicNoteTest() {
        // TODO: test houseMusicNote
    }

    /**
     * Test the property 'houseWallpaper'
     */
    @Test
    public void houseWallpaperTest() {
        // TODO: test houseWallpaper
    }

    /**
     * Test the property 'iconUrl'
     */
    @Test
    public void iconUrlTest() {
        // TODO: test iconUrl
    }

    /**
     * Test the property 'imageUrl'
     */
    @Test
    public void imageUrlTest() {
        // TODO: test imageUrl
    }

    /**
     * Test the property 'photoUrl'
     */
    @Test
    public void photoUrlTest() {
        // TODO: test photoUrl
    }

    /**
     * Test the property 'quote'
     */
    @Test
    public void quoteTest() {
        // TODO: test quote
    }

    /**
     * Test the property 'subPersonality'
     */
    @Test
    public void subPersonalityTest() {
        // TODO: test subPersonality
    }

}
