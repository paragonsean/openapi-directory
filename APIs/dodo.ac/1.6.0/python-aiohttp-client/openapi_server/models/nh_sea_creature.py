# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_sea_creature_north import NHSeaCreatureNorth
from openapi_server.models.nh_sea_creature_south import NHSeaCreatureSouth
from openapi_server import util


class NHSeaCreature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catchphrases: List[str]=None, image_url: str=None, name: str=None, north: NHSeaCreatureNorth=None, number: int=None, rarity: str=None, render_url: str=None, sell_nook: int=None, shadow_movement: str=None, shadow_size: str=None, south: NHSeaCreatureSouth=None, tank_length: float=None, tank_width: float=None, total_catch: int=None, url: str=None):
        """NHSeaCreature - a model defined in OpenAPI

        :param catchphrases: The catchphrases of this NHSeaCreature.
        :param image_url: The image_url of this NHSeaCreature.
        :param name: The name of this NHSeaCreature.
        :param north: The north of this NHSeaCreature.
        :param number: The number of this NHSeaCreature.
        :param rarity: The rarity of this NHSeaCreature.
        :param render_url: The render_url of this NHSeaCreature.
        :param sell_nook: The sell_nook of this NHSeaCreature.
        :param shadow_movement: The shadow_movement of this NHSeaCreature.
        :param shadow_size: The shadow_size of this NHSeaCreature.
        :param south: The south of this NHSeaCreature.
        :param tank_length: The tank_length of this NHSeaCreature.
        :param tank_width: The tank_width of this NHSeaCreature.
        :param total_catch: The total_catch of this NHSeaCreature.
        :param url: The url of this NHSeaCreature.
        """
        self.openapi_types = {
            'catchphrases': List[str],
            'image_url': str,
            'name': str,
            'north': NHSeaCreatureNorth,
            'number': int,
            'rarity': str,
            'render_url': str,
            'sell_nook': int,
            'shadow_movement': str,
            'shadow_size': str,
            'south': NHSeaCreatureSouth,
            'tank_length': float,
            'tank_width': float,
            'total_catch': int,
            'url': str
        }

        self.attribute_map = {
            'catchphrases': 'catchphrases',
            'image_url': 'image_url',
            'name': 'name',
            'north': 'north',
            'number': 'number',
            'rarity': 'rarity',
            'render_url': 'render_url',
            'sell_nook': 'sell_nook',
            'shadow_movement': 'shadow_movement',
            'shadow_size': 'shadow_size',
            'south': 'south',
            'tank_length': 'tank_length',
            'tank_width': 'tank_width',
            'total_catch': 'total_catch',
            'url': 'url'
        }

        self._catchphrases = catchphrases
        self._image_url = image_url
        self._name = name
        self._north = north
        self._number = number
        self._rarity = rarity
        self._render_url = render_url
        self._sell_nook = sell_nook
        self._shadow_movement = shadow_movement
        self._shadow_size = shadow_size
        self._south = south
        self._tank_length = tank_length
        self._tank_width = tank_width
        self._total_catch = total_catch
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHSeaCreature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHSeaCreature of this NHSeaCreature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catchphrases(self):
        """Gets the catchphrases of this NHSeaCreature.

        An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.

        :return: The catchphrases of this NHSeaCreature.
        :rtype: List[str]
        """
        return self._catchphrases

    @catchphrases.setter
    def catchphrases(self, catchphrases):
        """Sets the catchphrases of this NHSeaCreature.

        An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.

        :param catchphrases: The catchphrases of this NHSeaCreature.
        :type catchphrases: List[str]
        """

        self._catchphrases = catchphrases

    @property
    def image_url(self):
        """Gets the image_url of this NHSeaCreature.

        Image of the sea creature.

        :return: The image_url of this NHSeaCreature.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHSeaCreature.

        Image of the sea creature.

        :param image_url: The image_url of this NHSeaCreature.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this NHSeaCreature.

        Name of the sea creature.

        :return: The name of this NHSeaCreature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHSeaCreature.

        Name of the sea creature.

        :param name: The name of this NHSeaCreature.
        :type name: str
        """

        self._name = name

    @property
    def north(self):
        """Gets the north of this NHSeaCreature.


        :return: The north of this NHSeaCreature.
        :rtype: NHSeaCreatureNorth
        """
        return self._north

    @north.setter
    def north(self, north):
        """Sets the north of this NHSeaCreature.


        :param north: The north of this NHSeaCreature.
        :type north: NHSeaCreatureNorth
        """

        self._north = north

    @property
    def number(self):
        """Gets the number of this NHSeaCreature.

        In-game sea creature number, marking position in the Critterpedia.

        :return: The number of this NHSeaCreature.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NHSeaCreature.

        In-game sea creature number, marking position in the Critterpedia.

        :param number: The number of this NHSeaCreature.
        :type number: int
        """

        self._number = number

    @property
    def rarity(self):
        """Gets the rarity of this NHSeaCreature.

        How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.

        :return: The rarity of this NHSeaCreature.
        :rtype: str
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity):
        """Sets the rarity of this NHSeaCreature.

        How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.

        :param rarity: The rarity of this NHSeaCreature.
        :type rarity: str
        """

        self._rarity = rarity

    @property
    def render_url(self):
        """Gets the render_url of this NHSeaCreature.

        Render of the sea creature.

        :return: The render_url of this NHSeaCreature.
        :rtype: str
        """
        return self._render_url

    @render_url.setter
    def render_url(self, render_url):
        """Sets the render_url of this NHSeaCreature.

        Render of the sea creature.

        :param render_url: The render_url of this NHSeaCreature.
        :type render_url: str
        """

        self._render_url = render_url

    @property
    def sell_nook(self):
        """Gets the sell_nook of this NHSeaCreature.

        The number of Bells the sea creature can be sold to Nook's store for.

        :return: The sell_nook of this NHSeaCreature.
        :rtype: int
        """
        return self._sell_nook

    @sell_nook.setter
    def sell_nook(self, sell_nook):
        """Sets the sell_nook of this NHSeaCreature.

        The number of Bells the sea creature can be sold to Nook's store for.

        :param sell_nook: The sell_nook of this NHSeaCreature.
        :type sell_nook: int
        """

        self._sell_nook = sell_nook

    @property
    def shadow_movement(self):
        """Gets the shadow_movement of this NHSeaCreature.

        Short descriptor of where the sea creature can be found.

        :return: The shadow_movement of this NHSeaCreature.
        :rtype: str
        """
        return self._shadow_movement

    @shadow_movement.setter
    def shadow_movement(self, shadow_movement):
        """Sets the shadow_movement of this NHSeaCreature.

        Short descriptor of where the sea creature can be found.

        :param shadow_movement: The shadow_movement of this NHSeaCreature.
        :type shadow_movement: str
        """
        allowed_values = ["Stationary", "Very slow", "Slow", "Medium", "Fast", "Very fast"]  # noqa: E501
        if shadow_movement not in allowed_values:
            raise ValueError(
                "Invalid value for `shadow_movement` ({0}), must be one of {1}"
                .format(shadow_movement, allowed_values)
            )

        self._shadow_movement = shadow_movement

    @property
    def shadow_size(self):
        """Gets the shadow_size of this NHSeaCreature.

        Short descriptor of where the sea creature can be found.

        :return: The shadow_size of this NHSeaCreature.
        :rtype: str
        """
        return self._shadow_size

    @shadow_size.setter
    def shadow_size(self, shadow_size):
        """Sets the shadow_size of this NHSeaCreature.

        Short descriptor of where the sea creature can be found.

        :param shadow_size: The shadow_size of this NHSeaCreature.
        :type shadow_size: str
        """
        allowed_values = ["X-Small", "Small", "Medium", "Large", "X-Large"]  # noqa: E501
        if shadow_size not in allowed_values:
            raise ValueError(
                "Invalid value for `shadow_size` ({0}), must be one of {1}"
                .format(shadow_size, allowed_values)
            )

        self._shadow_size = shadow_size

    @property
    def south(self):
        """Gets the south of this NHSeaCreature.


        :return: The south of this NHSeaCreature.
        :rtype: NHSeaCreatureSouth
        """
        return self._south

    @south.setter
    def south(self, south):
        """Sets the south of this NHSeaCreature.


        :param south: The south of this NHSeaCreature.
        :type south: NHSeaCreatureSouth
        """

        self._south = south

    @property
    def tank_length(self):
        """Gets the tank_length of this NHSeaCreature.

        The length of the tank when the sea creature is placed as a furniture item.

        :return: The tank_length of this NHSeaCreature.
        :rtype: float
        """
        return self._tank_length

    @tank_length.setter
    def tank_length(self, tank_length):
        """Sets the tank_length of this NHSeaCreature.

        The length of the tank when the sea creature is placed as a furniture item.

        :param tank_length: The tank_length of this NHSeaCreature.
        :type tank_length: float
        """

        self._tank_length = tank_length

    @property
    def tank_width(self):
        """Gets the tank_width of this NHSeaCreature.

        The width of the tank when the sea creature is placed as a furniture item.

        :return: The tank_width of this NHSeaCreature.
        :rtype: float
        """
        return self._tank_width

    @tank_width.setter
    def tank_width(self, tank_width):
        """Sets the tank_width of this NHSeaCreature.

        The width of the tank when the sea creature is placed as a furniture item.

        :param tank_width: The tank_width of this NHSeaCreature.
        :type tank_width: float
        """

        self._tank_width = tank_width

    @property
    def total_catch(self):
        """Gets the total_catch of this NHSeaCreature.

        The total number of sea creatures the player has to have caught before this sea creature will start spawning.

        :return: The total_catch of this NHSeaCreature.
        :rtype: int
        """
        return self._total_catch

    @total_catch.setter
    def total_catch(self, total_catch):
        """Sets the total_catch of this NHSeaCreature.

        The total number of sea creatures the player has to have caught before this sea creature will start spawning.

        :param total_catch: The total_catch of this NHSeaCreature.
        :type total_catch: int
        """

        self._total_catch = total_catch

    @property
    def url(self):
        """Gets the url of this NHSeaCreature.

        Link to the respective Nookipedia article.

        :return: The url of this NHSeaCreature.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHSeaCreature.

        Link to the respective Nookipedia article.

        :param url: The url of this NHSeaCreature.
        :type url: str
        """

        self._url = url
