# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server import util


class NHInterior(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, category: str=None, colors: str=None, grid_length: float=None, grid_width: float=None, hha_base: int=None, hha_category: str=None, image_url: str=None, item_series: str=None, item_set: str=None, name: str=None, notes: str=None, sell: int=None, tag: str=None, themes: List[str]=None, unlocked: bool=None, url: str=None, version_added: str=None):
        """NHInterior - a model defined in OpenAPI

        :param availability: The availability of this NHInterior.
        :param buy: The buy of this NHInterior.
        :param category: The category of this NHInterior.
        :param colors: The colors of this NHInterior.
        :param grid_length: The grid_length of this NHInterior.
        :param grid_width: The grid_width of this NHInterior.
        :param hha_base: The hha_base of this NHInterior.
        :param hha_category: The hha_category of this NHInterior.
        :param image_url: The image_url of this NHInterior.
        :param item_series: The item_series of this NHInterior.
        :param item_set: The item_set of this NHInterior.
        :param name: The name of this NHInterior.
        :param notes: The notes of this NHInterior.
        :param sell: The sell of this NHInterior.
        :param tag: The tag of this NHInterior.
        :param themes: The themes of this NHInterior.
        :param unlocked: The unlocked of this NHInterior.
        :param url: The url of this NHInterior.
        :param version_added: The version_added of this NHInterior.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'category': str,
            'colors': str,
            'grid_length': float,
            'grid_width': float,
            'hha_base': int,
            'hha_category': str,
            'image_url': str,
            'item_series': str,
            'item_set': str,
            'name': str,
            'notes': str,
            'sell': int,
            'tag': str,
            'themes': List[str],
            'unlocked': bool,
            'url': str,
            'version_added': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'category': 'category',
            'colors': 'colors',
            'grid_length': 'grid_length',
            'grid_width': 'grid_width',
            'hha_base': 'hha_base',
            'hha_category': 'hha_category',
            'image_url': 'image_url',
            'item_series': 'item_series',
            'item_set': 'item_set',
            'name': 'name',
            'notes': 'notes',
            'sell': 'sell',
            'tag': 'tag',
            'themes': 'themes',
            'unlocked': 'unlocked',
            'url': 'url',
            'version_added': 'version_added'
        }

        self._availability = availability
        self._buy = buy
        self._category = category
        self._colors = colors
        self._grid_length = grid_length
        self._grid_width = grid_width
        self._hha_base = hha_base
        self._hha_category = hha_category
        self._image_url = image_url
        self._item_series = item_series
        self._item_set = item_set
        self._name = name
        self._notes = notes
        self._sell = sell
        self._tag = tag
        self._themes = themes
        self._unlocked = unlocked
        self._url = url
        self._version_added = version_added

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHInterior':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHInterior of this NHInterior.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHInterior.

        Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHInterior.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHInterior.

        Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHInterior.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHInterior.

        An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..

        :return: The buy of this NHInterior.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHInterior.

        An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..

        :param buy: The buy of this NHInterior.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def category(self):
        """Gets the category of this NHInterior.

        The category of item as shown in the player's inventory.

        :return: The category of this NHInterior.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NHInterior.

        The category of item as shown in the player's inventory.

        :param category: The category of this NHInterior.
        :type category: str
        """
        allowed_values = ["Floors", "Wallpaper", "Rugs"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def colors(self):
        """Gets the colors of this NHInterior.

        (WIP)

        :return: The colors of this NHInterior.
        :rtype: str
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this NHInterior.

        (WIP)

        :param colors: The colors of this NHInterior.
        :type colors: str
        """
        allowed_values = ["Aqua", "Beige", "Black", "Blue", "Brown", "Colorful", "Gray", "Green", "Orange", "Pink", "Purple", "Red", "White", "Yellow"]  # noqa: E501
        if colors not in allowed_values:
            raise ValueError(
                "Invalid value for `colors` ({0}), must be one of {1}"
                .format(colors, allowed_values)
            )

        self._colors = colors

    @property
    def grid_length(self):
        """Gets the grid_length of this NHInterior.

        The number of lengthwise grid spaces this item takes up.

        :return: The grid_length of this NHInterior.
        :rtype: float
        """
        return self._grid_length

    @grid_length.setter
    def grid_length(self, grid_length):
        """Sets the grid_length of this NHInterior.

        The number of lengthwise grid spaces this item takes up.

        :param grid_length: The grid_length of this NHInterior.
        :type grid_length: float
        """

        self._grid_length = grid_length

    @property
    def grid_width(self):
        """Gets the grid_width of this NHInterior.

        The number of widthwise grid spaces this item takes up.

        :return: The grid_width of this NHInterior.
        :rtype: float
        """
        return self._grid_width

    @grid_width.setter
    def grid_width(self, grid_width):
        """Sets the grid_width of this NHInterior.

        The number of widthwise grid spaces this item takes up.

        :param grid_width: The grid_width of this NHInterior.
        :type grid_width: float
        """

        self._grid_width = grid_width

    @property
    def hha_base(self):
        """Gets the hha_base of this NHInterior.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :return: The hha_base of this NHInterior.
        :rtype: int
        """
        return self._hha_base

    @hha_base.setter
    def hha_base(self, hha_base):
        """Sets the hha_base of this NHInterior.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :param hha_base: The hha_base of this NHInterior.
        :type hha_base: int
        """

        self._hha_base = hha_base

    @property
    def hha_category(self):
        """Gets the hha_category of this NHInterior.

        The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.

        :return: The hha_category of this NHInterior.
        :rtype: str
        """
        return self._hha_category

    @hha_category.setter
    def hha_category(self, hha_category):
        """Sets the hha_category of this NHInterior.

        The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.

        :param hha_category: The hha_category of this NHInterior.
        :type hha_category: str
        """

        self._hha_category = hha_category

    @property
    def image_url(self):
        """Gets the image_url of this NHInterior.

        Image of the interior.

        :return: The image_url of this NHInterior.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHInterior.

        Image of the interior.

        :param image_url: The image_url of this NHInterior.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def item_series(self):
        """Gets the item_series of this NHInterior.

        The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.

        :return: The item_series of this NHInterior.
        :rtype: str
        """
        return self._item_series

    @item_series.setter
    def item_series(self, item_series):
        """Sets the item_series of this NHInterior.

        The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.

        :param item_series: The item_series of this NHInterior.
        :type item_series: str
        """

        self._item_series = item_series

    @property
    def item_set(self):
        """Gets the item_set of this NHInterior.

        The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.

        :return: The item_set of this NHInterior.
        :rtype: str
        """
        return self._item_set

    @item_set.setter
    def item_set(self, item_set):
        """Sets the item_set of this NHInterior.

        The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.

        :param item_set: The item_set of this NHInterior.
        :type item_set: str
        """

        self._item_set = item_set

    @property
    def name(self):
        """Gets the name of this NHInterior.

        The name of the interior.

        :return: The name of this NHInterior.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHInterior.

        The name of the interior.

        :param name: The name of this NHInterior.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this NHInterior.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :return: The notes of this NHInterior.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NHInterior.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :param notes: The notes of this NHInterior.
        :type notes: str
        """

        self._notes = notes

    @property
    def sell(self):
        """Gets the sell of this NHInterior.

        The number of Bells the interior can be sold to Nook's store for.

        :return: The sell of this NHInterior.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHInterior.

        The number of Bells the interior can be sold to Nook's store for.

        :param sell: The sell of this NHInterior.
        :type sell: int
        """

        self._sell = sell

    @property
    def tag(self):
        """Gets the tag of this NHInterior.

        The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.

        :return: The tag of this NHInterior.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this NHInterior.

        The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.

        :param tag: The tag of this NHInterior.
        :type tag: str
        """

        self._tag = tag

    @property
    def themes(self):
        """Gets the themes of this NHInterior.

        A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.

        :return: The themes of this NHInterior.
        :rtype: List[str]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this NHInterior.

        A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.

        :param themes: The themes of this NHInterior.
        :type themes: List[str]
        """

        self._themes = themes

    @property
    def unlocked(self):
        """Gets the unlocked of this NHInterior.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :return: The unlocked of this NHInterior.
        :rtype: bool
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this NHInterior.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :param unlocked: The unlocked of this NHInterior.
        :type unlocked: bool
        """

        self._unlocked = unlocked

    @property
    def url(self):
        """Gets the url of this NHInterior.

        Link to the respective Nookipedia article.

        :return: The url of this NHInterior.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHInterior.

        Link to the respective Nookipedia article.

        :param url: The url of this NHInterior.
        :type url: str
        """

        self._url = url

    @property
    def version_added(self):
        """Gets the version_added of this NHInterior.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :return: The version_added of this NHInterior.
        :rtype: str
        """
        return self._version_added

    @version_added.setter
    def version_added(self, version_added):
        """Sets the version_added of this NHInterior.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :param version_added: The version_added of this NHInterior.
        :type version_added: str
        """

        self._version_added = version_added
