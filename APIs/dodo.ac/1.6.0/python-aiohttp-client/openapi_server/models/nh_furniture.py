# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server.models.nh_furniture_variations_inner import NHFurnitureVariationsInner
from openapi_server import util


class NHFurniture(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, category: str=None, custom_body_part: str=None, custom_kit_type: str=None, custom_kits: int=None, custom_pattern_part: str=None, customizable: bool=None, door_decor: bool=None, functions: List[str]=None, grid_length: float=None, grid_width: float=None, height: float=None, hha_base: int=None, hha_category: str=None, item_series: str=None, item_set: str=None, lucky: bool=None, lucky_season: str=None, name: str=None, notes: str=None, pattern_total: int=None, sell: int=None, tag: str=None, themes: List[str]=None, unlocked: bool=None, url: str=None, variation_total: int=None, variations: List[NHFurnitureVariationsInner]=None, version_added: str=None):
        """NHFurniture - a model defined in OpenAPI

        :param availability: The availability of this NHFurniture.
        :param buy: The buy of this NHFurniture.
        :param category: The category of this NHFurniture.
        :param custom_body_part: The custom_body_part of this NHFurniture.
        :param custom_kit_type: The custom_kit_type of this NHFurniture.
        :param custom_kits: The custom_kits of this NHFurniture.
        :param custom_pattern_part: The custom_pattern_part of this NHFurniture.
        :param customizable: The customizable of this NHFurniture.
        :param door_decor: The door_decor of this NHFurniture.
        :param functions: The functions of this NHFurniture.
        :param grid_length: The grid_length of this NHFurniture.
        :param grid_width: The grid_width of this NHFurniture.
        :param height: The height of this NHFurniture.
        :param hha_base: The hha_base of this NHFurniture.
        :param hha_category: The hha_category of this NHFurniture.
        :param item_series: The item_series of this NHFurniture.
        :param item_set: The item_set of this NHFurniture.
        :param lucky: The lucky of this NHFurniture.
        :param lucky_season: The lucky_season of this NHFurniture.
        :param name: The name of this NHFurniture.
        :param notes: The notes of this NHFurniture.
        :param pattern_total: The pattern_total of this NHFurniture.
        :param sell: The sell of this NHFurniture.
        :param tag: The tag of this NHFurniture.
        :param themes: The themes of this NHFurniture.
        :param unlocked: The unlocked of this NHFurniture.
        :param url: The url of this NHFurniture.
        :param variation_total: The variation_total of this NHFurniture.
        :param variations: The variations of this NHFurniture.
        :param version_added: The version_added of this NHFurniture.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'category': str,
            'custom_body_part': str,
            'custom_kit_type': str,
            'custom_kits': int,
            'custom_pattern_part': str,
            'customizable': bool,
            'door_decor': bool,
            'functions': List[str],
            'grid_length': float,
            'grid_width': float,
            'height': float,
            'hha_base': int,
            'hha_category': str,
            'item_series': str,
            'item_set': str,
            'lucky': bool,
            'lucky_season': str,
            'name': str,
            'notes': str,
            'pattern_total': int,
            'sell': int,
            'tag': str,
            'themes': List[str],
            'unlocked': bool,
            'url': str,
            'variation_total': int,
            'variations': List[NHFurnitureVariationsInner],
            'version_added': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'category': 'category',
            'custom_body_part': 'custom_body_part',
            'custom_kit_type': 'custom_kit_type',
            'custom_kits': 'custom_kits',
            'custom_pattern_part': 'custom_pattern_part',
            'customizable': 'customizable',
            'door_decor': 'door_decor',
            'functions': 'functions',
            'grid_length': 'grid_length',
            'grid_width': 'grid_width',
            'height': 'height',
            'hha_base': 'hha_base',
            'hha_category': 'hha_category',
            'item_series': 'item_series',
            'item_set': 'item_set',
            'lucky': 'lucky',
            'lucky_season': 'lucky_season',
            'name': 'name',
            'notes': 'notes',
            'pattern_total': 'pattern_total',
            'sell': 'sell',
            'tag': 'tag',
            'themes': 'themes',
            'unlocked': 'unlocked',
            'url': 'url',
            'variation_total': 'variation_total',
            'variations': 'variations',
            'version_added': 'version_added'
        }

        self._availability = availability
        self._buy = buy
        self._category = category
        self._custom_body_part = custom_body_part
        self._custom_kit_type = custom_kit_type
        self._custom_kits = custom_kits
        self._custom_pattern_part = custom_pattern_part
        self._customizable = customizable
        self._door_decor = door_decor
        self._functions = functions
        self._grid_length = grid_length
        self._grid_width = grid_width
        self._height = height
        self._hha_base = hha_base
        self._hha_category = hha_category
        self._item_series = item_series
        self._item_set = item_set
        self._lucky = lucky
        self._lucky_season = lucky_season
        self._name = name
        self._notes = notes
        self._pattern_total = pattern_total
        self._sell = sell
        self._tag = tag
        self._themes = themes
        self._unlocked = unlocked
        self._url = url
        self._variation_total = variation_total
        self._variations = variations
        self._version_added = version_added

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHFurniture':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHFurniture of this NHFurniture.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHFurniture.

        Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHFurniture.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHFurniture.

        Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHFurniture.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHFurniture.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :return: The buy of this NHFurniture.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHFurniture.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :param buy: The buy of this NHFurniture.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def category(self):
        """Gets the category of this NHFurniture.

        The category of item as shown in the player's inventory.

        :return: The category of this NHFurniture.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NHFurniture.

        The category of item as shown in the player's inventory.

        :param category: The category of this NHFurniture.
        :type category: str
        """
        allowed_values = ["Housewares", "Miscellaneous", "Wall-mounted"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def custom_body_part(self):
        """Gets the custom_body_part of this NHFurniture.

        If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.

        :return: The custom_body_part of this NHFurniture.
        :rtype: str
        """
        return self._custom_body_part

    @custom_body_part.setter
    def custom_body_part(self, custom_body_part):
        """Sets the custom_body_part of this NHFurniture.

        If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.

        :param custom_body_part: The custom_body_part of this NHFurniture.
        :type custom_body_part: str
        """

        self._custom_body_part = custom_body_part

    @property
    def custom_kit_type(self):
        """Gets the custom_kit_type of this NHFurniture.

        The item that needs to be consumed to customize this item. The vast majority are \"Customization Kit\", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.

        :return: The custom_kit_type of this NHFurniture.
        :rtype: str
        """
        return self._custom_kit_type

    @custom_kit_type.setter
    def custom_kit_type(self, custom_kit_type):
        """Sets the custom_kit_type of this NHFurniture.

        The item that needs to be consumed to customize this item. The vast majority are \"Customization Kit\", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.

        :param custom_kit_type: The custom_kit_type of this NHFurniture.
        :type custom_kit_type: str
        """

        self._custom_kit_type = custom_kit_type

    @property
    def custom_kits(self):
        """Gets the custom_kits of this NHFurniture.

        The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.

        :return: The custom_kits of this NHFurniture.
        :rtype: int
        """
        return self._custom_kits

    @custom_kits.setter
    def custom_kits(self, custom_kits):
        """Sets the custom_kits of this NHFurniture.

        The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.

        :param custom_kits: The custom_kits of this NHFurniture.
        :type custom_kits: int
        """

        self._custom_kits = custom_kits

    @property
    def custom_pattern_part(self):
        """Gets the custom_pattern_part of this NHFurniture.

        If the item's pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is \"Cushion\" as the cushion on the chair may have a pattern applied.

        :return: The custom_pattern_part of this NHFurniture.
        :rtype: str
        """
        return self._custom_pattern_part

    @custom_pattern_part.setter
    def custom_pattern_part(self, custom_pattern_part):
        """Sets the custom_pattern_part of this NHFurniture.

        If the item's pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is \"Cushion\" as the cushion on the chair may have a pattern applied.

        :param custom_pattern_part: The custom_pattern_part of this NHFurniture.
        :type custom_pattern_part: str
        """

        self._custom_pattern_part = custom_pattern_part

    @property
    def customizable(self):
        """Gets the customizable of this NHFurniture.

        Whether or not the item is customizable via a crafting table.

        :return: The customizable of this NHFurniture.
        :rtype: bool
        """
        return self._customizable

    @customizable.setter
    def customizable(self, customizable):
        """Sets the customizable of this NHFurniture.

        Whether or not the item is customizable via a crafting table.

        :param customizable: The customizable of this NHFurniture.
        :type customizable: bool
        """

        self._customizable = customizable

    @property
    def door_decor(self):
        """Gets the door_decor of this NHFurniture.

        Whether this item may be placed on the exterior door of the player's house.

        :return: The door_decor of this NHFurniture.
        :rtype: bool
        """
        return self._door_decor

    @door_decor.setter
    def door_decor(self, door_decor):
        """Sets the door_decor of this NHFurniture.

        Whether this item may be placed on the exterior door of the player's house.

        :param door_decor: The door_decor of this NHFurniture.
        :type door_decor: bool
        """

        self._door_decor = door_decor

    @property
    def functions(self):
        """Gets the functions of this NHFurniture.

        A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have \"Table\" as a function..

        :return: The functions of this NHFurniture.
        :rtype: List[str]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this NHFurniture.

        A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have \"Table\" as a function..

        :param functions: The functions of this NHFurniture.
        :type functions: List[str]
        """
        allowed_values = ["Trash", "Toilet", "Table", "Storage", "Stereo", "Seating", "Lighting", "Instrument", "Dresser", "Bed", "Audio"]  # noqa: E501
        if not set(functions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `functions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(functions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._functions = functions

    @property
    def grid_length(self):
        """Gets the grid_length of this NHFurniture.

        The number of lengthwise grid spaces this item takes up.

        :return: The grid_length of this NHFurniture.
        :rtype: float
        """
        return self._grid_length

    @grid_length.setter
    def grid_length(self, grid_length):
        """Sets the grid_length of this NHFurniture.

        The number of lengthwise grid spaces this item takes up.

        :param grid_length: The grid_length of this NHFurniture.
        :type grid_length: float
        """

        self._grid_length = grid_length

    @property
    def grid_width(self):
        """Gets the grid_width of this NHFurniture.

        The number of widthwise grid spaces this item takes up.

        :return: The grid_width of this NHFurniture.
        :rtype: float
        """
        return self._grid_width

    @grid_width.setter
    def grid_width(self, grid_width):
        """Sets the grid_width of this NHFurniture.

        The number of widthwise grid spaces this item takes up.

        :param grid_width: The grid_width of this NHFurniture.
        :type grid_width: float
        """

        self._grid_width = grid_width

    @property
    def height(self):
        """Gets the height of this NHFurniture.

        The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.

        :return: The height of this NHFurniture.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this NHFurniture.

        The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.

        :param height: The height of this NHFurniture.
        :type height: float
        """

        self._height = height

    @property
    def hha_base(self):
        """Gets the hha_base of this NHFurniture.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :return: The hha_base of this NHFurniture.
        :rtype: int
        """
        return self._hha_base

    @hha_base.setter
    def hha_base(self, hha_base):
        """Sets the hha_base of this NHFurniture.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :param hha_base: The hha_base of this NHFurniture.
        :type hha_base: int
        """

        self._hha_base = hha_base

    @property
    def hha_category(self):
        """Gets the hha_category of this NHFurniture.

        The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.

        :return: The hha_category of this NHFurniture.
        :rtype: str
        """
        return self._hha_category

    @hha_category.setter
    def hha_category(self, hha_category):
        """Sets the hha_category of this NHFurniture.

        The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.

        :param hha_category: The hha_category of this NHFurniture.
        :type hha_category: str
        """

        self._hha_category = hha_category

    @property
    def item_series(self):
        """Gets the item_series of this NHFurniture.

        The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.

        :return: The item_series of this NHFurniture.
        :rtype: str
        """
        return self._item_series

    @item_series.setter
    def item_series(self, item_series):
        """Sets the item_series of this NHFurniture.

        The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.

        :param item_series: The item_series of this NHFurniture.
        :type item_series: str
        """

        self._item_series = item_series

    @property
    def item_set(self):
        """Gets the item_set of this NHFurniture.

        The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.

        :return: The item_set of this NHFurniture.
        :rtype: str
        """
        return self._item_set

    @item_set.setter
    def item_set(self, item_set):
        """Sets the item_set of this NHFurniture.

        The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.

        :param item_set: The item_set of this NHFurniture.
        :type item_set: str
        """

        self._item_set = item_set

    @property
    def lucky(self):
        """Gets the lucky of this NHFurniture.

        Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.

        :return: The lucky of this NHFurniture.
        :rtype: bool
        """
        return self._lucky

    @lucky.setter
    def lucky(self, lucky):
        """Sets the lucky of this NHFurniture.

        Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.

        :param lucky: The lucky of this NHFurniture.
        :type lucky: bool
        """

        self._lucky = lucky

    @property
    def lucky_season(self):
        """Gets the lucky_season of this NHFurniture.

        The season in which the item is lucky (or \"All year\" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.

        :return: The lucky_season of this NHFurniture.
        :rtype: str
        """
        return self._lucky_season

    @lucky_season.setter
    def lucky_season(self, lucky_season):
        """Sets the lucky_season of this NHFurniture.

        The season in which the item is lucky (or \"All year\" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.

        :param lucky_season: The lucky_season of this NHFurniture.
        :type lucky_season: str
        """
        allowed_values = ["", "All year", "Spring", "Summer", "Autumn", "Winter"]  # noqa: E501
        if lucky_season not in allowed_values:
            raise ValueError(
                "Invalid value for `lucky_season` ({0}), must be one of {1}"
                .format(lucky_season, allowed_values)
            )

        self._lucky_season = lucky_season

    @property
    def name(self):
        """Gets the name of this NHFurniture.

        The name of the furniture.

        :return: The name of this NHFurniture.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHFurniture.

        The name of the furniture.

        :param name: The name of this NHFurniture.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this NHFurniture.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :return: The notes of this NHFurniture.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NHFurniture.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :param notes: The notes of this NHFurniture.
        :type notes: str
        """

        self._notes = notes

    @property
    def pattern_total(self):
        """Gets the pattern_total of this NHFurniture.

        The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.

        :return: The pattern_total of this NHFurniture.
        :rtype: int
        """
        return self._pattern_total

    @pattern_total.setter
    def pattern_total(self, pattern_total):
        """Sets the pattern_total of this NHFurniture.

        The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.

        :param pattern_total: The pattern_total of this NHFurniture.
        :type pattern_total: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if pattern_total not in allowed_values:
            raise ValueError(
                "Invalid value for `pattern_total` ({0}), must be one of {1}"
                .format(pattern_total, allowed_values)
            )

        self._pattern_total = pattern_total

    @property
    def sell(self):
        """Gets the sell of this NHFurniture.

        The number of Bells the item can be sold to Nook's store for.

        :return: The sell of this NHFurniture.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHFurniture.

        The number of Bells the item can be sold to Nook's store for.

        :param sell: The sell of this NHFurniture.
        :type sell: int
        """

        self._sell = sell

    @property
    def tag(self):
        """Gets the tag of this NHFurniture.

        The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.

        :return: The tag of this NHFurniture.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this NHFurniture.

        The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include \"Chair\", \"Musical Instrument\", and \"Mario\". If the item does not have a tag, this will be an empty string.

        :param tag: The tag of this NHFurniture.
        :type tag: str
        """

        self._tag = tag

    @property
    def themes(self):
        """Gets the themes of this NHFurniture.

        A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.

        :return: The themes of this NHFurniture.
        :rtype: List[str]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this NHFurniture.

        A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.

        :param themes: The themes of this NHFurniture.
        :type themes: List[str]
        """

        self._themes = themes

    @property
    def unlocked(self):
        """Gets the unlocked of this NHFurniture.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :return: The unlocked of this NHFurniture.
        :rtype: bool
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this NHFurniture.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :param unlocked: The unlocked of this NHFurniture.
        :type unlocked: bool
        """

        self._unlocked = unlocked

    @property
    def url(self):
        """Gets the url of this NHFurniture.

        Link to the respective Nookipedia article.

        :return: The url of this NHFurniture.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHFurniture.

        Link to the respective Nookipedia article.

        :param url: The url of this NHFurniture.
        :type url: str
        """

        self._url = url

    @property
    def variation_total(self):
        """Gets the variation_total of this NHFurniture.

        The number of variations, between 0 and 8.

        :return: The variation_total of this NHFurniture.
        :rtype: int
        """
        return self._variation_total

    @variation_total.setter
    def variation_total(self, variation_total):
        """Sets the variation_total of this NHFurniture.

        The number of variations, between 0 and 8.

        :param variation_total: The variation_total of this NHFurniture.
        :type variation_total: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if variation_total not in allowed_values:
            raise ValueError(
                "Invalid value for `variation_total` ({0}), must be one of {1}"
                .format(variation_total, allowed_values)
            )

        self._variation_total = variation_total

    @property
    def variations(self):
        """Gets the variations of this NHFurniture.

        An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.

        :return: The variations of this NHFurniture.
        :rtype: List[NHFurnitureVariationsInner]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this NHFurniture.

        An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.

        :param variations: The variations of this NHFurniture.
        :type variations: List[NHFurnitureVariationsInner]
        """

        self._variations = variations

    @property
    def version_added(self):
        """Gets the version_added of this NHFurniture.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :return: The version_added of this NHFurniture.
        :rtype: str
        """
        return self._version_added

    @version_added.setter
    def version_added(self, version_added):
        """Sets the version_added of this NHFurniture.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :param version_added: The version_added of this NHFurniture.
        :type version_added: str
        """

        self._version_added = version_added
