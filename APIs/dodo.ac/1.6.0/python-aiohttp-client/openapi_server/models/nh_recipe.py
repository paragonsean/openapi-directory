# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server.models.nh_recipe_materials_inner import NHRecipeMaterialsInner
from openapi_server import util


class NHRecipe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, image_url: str=None, materials: List[NHRecipeMaterialsInner]=None, name: str=None, recipes_to_unlock: int=None, sell: int=None, serial_id: int=None, url: str=None):
        """NHRecipe - a model defined in OpenAPI

        :param availability: The availability of this NHRecipe.
        :param buy: The buy of this NHRecipe.
        :param image_url: The image_url of this NHRecipe.
        :param materials: The materials of this NHRecipe.
        :param name: The name of this NHRecipe.
        :param recipes_to_unlock: The recipes_to_unlock of this NHRecipe.
        :param sell: The sell of this NHRecipe.
        :param serial_id: The serial_id of this NHRecipe.
        :param url: The url of this NHRecipe.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'image_url': str,
            'materials': List[NHRecipeMaterialsInner],
            'name': str,
            'recipes_to_unlock': int,
            'sell': int,
            'serial_id': int,
            'url': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'image_url': 'image_url',
            'materials': 'materials',
            'name': 'name',
            'recipes_to_unlock': 'recipes_to_unlock',
            'sell': 'sell',
            'serial_id': 'serial_id',
            'url': 'url'
        }

        self._availability = availability
        self._buy = buy
        self._image_url = image_url
        self._materials = materials
        self._name = name
        self._recipes_to_unlock = recipes_to_unlock
        self._sell = sell
        self._serial_id = serial_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHRecipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHRecipe of this NHRecipe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHRecipe.

        Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHRecipe.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHRecipe.

        Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHRecipe.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHRecipe.

        An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).

        :return: The buy of this NHRecipe.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHRecipe.

        An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).

        :param buy: The buy of this NHRecipe.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def image_url(self):
        """Gets the image_url of this NHRecipe.

        Image of the item the recipe crafts.

        :return: The image_url of this NHRecipe.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHRecipe.

        Image of the item the recipe crafts.

        :param image_url: The image_url of this NHRecipe.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def materials(self):
        """Gets the materials of this NHRecipe.

        The list of materials required to craft the item.

        :return: The materials of this NHRecipe.
        :rtype: List[NHRecipeMaterialsInner]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this NHRecipe.

        The list of materials required to craft the item.

        :param materials: The materials of this NHRecipe.
        :type materials: List[NHRecipeMaterialsInner]
        """

        self._materials = materials

    @property
    def name(self):
        """Gets the name of this NHRecipe.

        The name of the recipe.

        :return: The name of this NHRecipe.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHRecipe.

        The name of the recipe.

        :param name: The name of this NHRecipe.
        :type name: str
        """

        self._name = name

    @property
    def recipes_to_unlock(self):
        """Gets the recipes_to_unlock of this NHRecipe.

        How many recipes the player has to have learned to unlock this one.

        :return: The recipes_to_unlock of this NHRecipe.
        :rtype: int
        """
        return self._recipes_to_unlock

    @recipes_to_unlock.setter
    def recipes_to_unlock(self, recipes_to_unlock):
        """Sets the recipes_to_unlock of this NHRecipe.

        How many recipes the player has to have learned to unlock this one.

        :param recipes_to_unlock: The recipes_to_unlock of this NHRecipe.
        :type recipes_to_unlock: int
        """

        self._recipes_to_unlock = recipes_to_unlock

    @property
    def sell(self):
        """Gets the sell of this NHRecipe.

        The number of Bells the sea creature can be sold to Nook's store for.

        :return: The sell of this NHRecipe.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHRecipe.

        The number of Bells the sea creature can be sold to Nook's store for.

        :param sell: The sell of this NHRecipe.
        :type sell: int
        """

        self._sell = sell

    @property
    def serial_id(self):
        """Gets the serial_id of this NHRecipe.

        The unique in-game ID of the recipe.

        :return: The serial_id of this NHRecipe.
        :rtype: int
        """
        return self._serial_id

    @serial_id.setter
    def serial_id(self, serial_id):
        """Sets the serial_id of this NHRecipe.

        The unique in-game ID of the recipe.

        :param serial_id: The serial_id of this NHRecipe.
        :type serial_id: int
        """

        self._serial_id = serial_id

    @property
    def url(self):
        """Gets the url of this NHRecipe.

        Link to the respective Nookipedia article.

        :return: The url of this NHRecipe.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHRecipe.

        Link to the respective Nookipedia article.

        :param url: The url of this NHRecipe.
        :type url: str
        """

        self._url = url
