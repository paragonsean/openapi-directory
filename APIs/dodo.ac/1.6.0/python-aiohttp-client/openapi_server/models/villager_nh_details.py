# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VillagerNhDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catchphrase: str=None, clothing: str=None, clothing_variation: str=None, fav_colors: List[str]=None, fav_styles: List[str]=None, hobby: str=None, house_exterior_url: str=None, house_flooring: str=None, house_interior_url: str=None, house_music: str=None, house_music_note: str=None, house_wallpaper: str=None, icon_url: str=None, image_url: str=None, photo_url: str=None, quote: str=None, sub_personality: str=None):
        """VillagerNhDetails - a model defined in OpenAPI

        :param catchphrase: The catchphrase of this VillagerNhDetails.
        :param clothing: The clothing of this VillagerNhDetails.
        :param clothing_variation: The clothing_variation of this VillagerNhDetails.
        :param fav_colors: The fav_colors of this VillagerNhDetails.
        :param fav_styles: The fav_styles of this VillagerNhDetails.
        :param hobby: The hobby of this VillagerNhDetails.
        :param house_exterior_url: The house_exterior_url of this VillagerNhDetails.
        :param house_flooring: The house_flooring of this VillagerNhDetails.
        :param house_interior_url: The house_interior_url of this VillagerNhDetails.
        :param house_music: The house_music of this VillagerNhDetails.
        :param house_music_note: The house_music_note of this VillagerNhDetails.
        :param house_wallpaper: The house_wallpaper of this VillagerNhDetails.
        :param icon_url: The icon_url of this VillagerNhDetails.
        :param image_url: The image_url of this VillagerNhDetails.
        :param photo_url: The photo_url of this VillagerNhDetails.
        :param quote: The quote of this VillagerNhDetails.
        :param sub_personality: The sub_personality of this VillagerNhDetails.
        """
        self.openapi_types = {
            'catchphrase': str,
            'clothing': str,
            'clothing_variation': str,
            'fav_colors': List[str],
            'fav_styles': List[str],
            'hobby': str,
            'house_exterior_url': str,
            'house_flooring': str,
            'house_interior_url': str,
            'house_music': str,
            'house_music_note': str,
            'house_wallpaper': str,
            'icon_url': str,
            'image_url': str,
            'photo_url': str,
            'quote': str,
            'sub_personality': str
        }

        self.attribute_map = {
            'catchphrase': 'catchphrase',
            'clothing': 'clothing',
            'clothing_variation': 'clothing_variation',
            'fav_colors': 'fav_colors',
            'fav_styles': 'fav_styles',
            'hobby': 'hobby',
            'house_exterior_url': 'house_exterior_url',
            'house_flooring': 'house_flooring',
            'house_interior_url': 'house_interior_url',
            'house_music': 'house_music',
            'house_music_note': 'house_music_note',
            'house_wallpaper': 'house_wallpaper',
            'icon_url': 'icon_url',
            'image_url': 'image_url',
            'photo_url': 'photo_url',
            'quote': 'quote',
            'sub_personality': 'sub-personality'
        }

        self._catchphrase = catchphrase
        self._clothing = clothing
        self._clothing_variation = clothing_variation
        self._fav_colors = fav_colors
        self._fav_styles = fav_styles
        self._hobby = hobby
        self._house_exterior_url = house_exterior_url
        self._house_flooring = house_flooring
        self._house_interior_url = house_interior_url
        self._house_music = house_music
        self._house_music_note = house_music_note
        self._house_wallpaper = house_wallpaper
        self._icon_url = icon_url
        self._image_url = image_url
        self._photo_url = photo_url
        self._quote = quote
        self._sub_personality = sub_personality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VillagerNhDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Villager_nh_details of this VillagerNhDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catchphrase(self):
        """Gets the catchphrase of this VillagerNhDetails.

        The default phrase a villager will use when speaking to the player.

        :return: The catchphrase of this VillagerNhDetails.
        :rtype: str
        """
        return self._catchphrase

    @catchphrase.setter
    def catchphrase(self, catchphrase):
        """Sets the catchphrase of this VillagerNhDetails.

        The default phrase a villager will use when speaking to the player.

        :param catchphrase: The catchphrase of this VillagerNhDetails.
        :type catchphrase: str
        """

        self._catchphrase = catchphrase

    @property
    def clothing(self):
        """Gets the clothing of this VillagerNhDetails.

        The default clothing that the villager wears.

        :return: The clothing of this VillagerNhDetails.
        :rtype: str
        """
        return self._clothing

    @clothing.setter
    def clothing(self, clothing):
        """Sets the clothing of this VillagerNhDetails.

        The default clothing that the villager wears.

        :param clothing: The clothing of this VillagerNhDetails.
        :type clothing: str
        """

        self._clothing = clothing

    @property
    def clothing_variation(self):
        """Gets the clothing_variation of this VillagerNhDetails.

        The variation of the clothing (usually a color).

        :return: The clothing_variation of this VillagerNhDetails.
        :rtype: str
        """
        return self._clothing_variation

    @clothing_variation.setter
    def clothing_variation(self, clothing_variation):
        """Sets the clothing_variation of this VillagerNhDetails.

        The variation of the clothing (usually a color).

        :param clothing_variation: The clothing_variation of this VillagerNhDetails.
        :type clothing_variation: str
        """

        self._clothing_variation = clothing_variation

    @property
    def fav_colors(self):
        """Gets the fav_colors of this VillagerNhDetails.

        The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).

        :return: The fav_colors of this VillagerNhDetails.
        :rtype: List[str]
        """
        return self._fav_colors

    @fav_colors.setter
    def fav_colors(self, fav_colors):
        """Sets the fav_colors of this VillagerNhDetails.

        The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).

        :param fav_colors: The fav_colors of this VillagerNhDetails.
        :type fav_colors: List[str]
        """

        self._fav_colors = fav_colors

    @property
    def fav_styles(self):
        """Gets the fav_styles of this VillagerNhDetails.

        The villager's favorite clothing styles.

        :return: The fav_styles of this VillagerNhDetails.
        :rtype: List[str]
        """
        return self._fav_styles

    @fav_styles.setter
    def fav_styles(self, fav_styles):
        """Sets the fav_styles of this VillagerNhDetails.

        The villager's favorite clothing styles.

        :param fav_styles: The fav_styles of this VillagerNhDetails.
        :type fav_styles: List[str]
        """

        self._fav_styles = fav_styles

    @property
    def hobby(self):
        """Gets the hobby of this VillagerNhDetails.

        The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies

        :return: The hobby of this VillagerNhDetails.
        :rtype: str
        """
        return self._hobby

    @hobby.setter
    def hobby(self, hobby):
        """Sets the hobby of this VillagerNhDetails.

        The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies

        :param hobby: The hobby of this VillagerNhDetails.
        :type hobby: str
        """
        allowed_values = ["Education", "Fashion", "Fitness", "Music", "Nature", "Play"]  # noqa: E501
        if hobby not in allowed_values:
            raise ValueError(
                "Invalid value for `hobby` ({0}), must be one of {1}"
                .format(hobby, allowed_values)
            )

        self._hobby = hobby

    @property
    def house_exterior_url(self):
        """Gets the house_exterior_url of this VillagerNhDetails.

        A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.

        :return: The house_exterior_url of this VillagerNhDetails.
        :rtype: str
        """
        return self._house_exterior_url

    @house_exterior_url.setter
    def house_exterior_url(self, house_exterior_url):
        """Sets the house_exterior_url of this VillagerNhDetails.

        A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.

        :param house_exterior_url: The house_exterior_url of this VillagerNhDetails.
        :type house_exterior_url: str
        """

        self._house_exterior_url = house_exterior_url

    @property
    def house_flooring(self):
        """Gets the house_flooring of this VillagerNhDetails.

        The flooring in the villager's house.

        :return: The house_flooring of this VillagerNhDetails.
        :rtype: str
        """
        return self._house_flooring

    @house_flooring.setter
    def house_flooring(self, house_flooring):
        """Sets the house_flooring of this VillagerNhDetails.

        The flooring in the villager's house.

        :param house_flooring: The house_flooring of this VillagerNhDetails.
        :type house_flooring: str
        """

        self._house_flooring = house_flooring

    @property
    def house_interior_url(self):
        """Gets the house_interior_url of this VillagerNhDetails.

        A screenshot of the villager's house interior.

        :return: The house_interior_url of this VillagerNhDetails.
        :rtype: str
        """
        return self._house_interior_url

    @house_interior_url.setter
    def house_interior_url(self, house_interior_url):
        """Sets the house_interior_url of this VillagerNhDetails.

        A screenshot of the villager's house interior.

        :param house_interior_url: The house_interior_url of this VillagerNhDetails.
        :type house_interior_url: str
        """

        self._house_interior_url = house_interior_url

    @property
    def house_music(self):
        """Gets the house_music of this VillagerNhDetails.

        The music in the villager's house.

        :return: The house_music of this VillagerNhDetails.
        :rtype: str
        """
        return self._house_music

    @house_music.setter
    def house_music(self, house_music):
        """Sets the house_music of this VillagerNhDetails.

        The music in the villager's house.

        :param house_music: The house_music of this VillagerNhDetails.
        :type house_music: str
        """

        self._house_music = house_music

    @property
    def house_music_note(self):
        """Gets the house_music_note of this VillagerNhDetails.

        Any notes about the villager's music. If populated, this is usually \"Does not contain a stereo initially\", meaning that the villager's house will not play music unless provided with a stereo.

        :return: The house_music_note of this VillagerNhDetails.
        :rtype: str
        """
        return self._house_music_note

    @house_music_note.setter
    def house_music_note(self, house_music_note):
        """Sets the house_music_note of this VillagerNhDetails.

        Any notes about the villager's music. If populated, this is usually \"Does not contain a stereo initially\", meaning that the villager's house will not play music unless provided with a stereo.

        :param house_music_note: The house_music_note of this VillagerNhDetails.
        :type house_music_note: str
        """

        self._house_music_note = house_music_note

    @property
    def house_wallpaper(self):
        """Gets the house_wallpaper of this VillagerNhDetails.

        The wallpaper in the villager's house.

        :return: The house_wallpaper of this VillagerNhDetails.
        :rtype: str
        """
        return self._house_wallpaper

    @house_wallpaper.setter
    def house_wallpaper(self, house_wallpaper):
        """Sets the house_wallpaper of this VillagerNhDetails.

        The wallpaper in the villager's house.

        :param house_wallpaper: The house_wallpaper of this VillagerNhDetails.
        :type house_wallpaper: str
        """

        self._house_wallpaper = house_wallpaper

    @property
    def icon_url(self):
        """Gets the icon_url of this VillagerNhDetails.

        The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.

        :return: The icon_url of this VillagerNhDetails.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this VillagerNhDetails.

        The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.

        :param icon_url: The icon_url of this VillagerNhDetails.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def image_url(self):
        """Gets the image_url of this VillagerNhDetails.

        Image of the villager from *New Horizons*.

        :return: The image_url of this VillagerNhDetails.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this VillagerNhDetails.

        Image of the villager from *New Horizons*.

        :param image_url: The image_url of this VillagerNhDetails.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def photo_url(self):
        """Gets the photo_url of this VillagerNhDetails.

        The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.

        :return: The photo_url of this VillagerNhDetails.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this VillagerNhDetails.

        The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.

        :param photo_url: The photo_url of this VillagerNhDetails.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def quote(self):
        """Gets the quote of this VillagerNhDetails.

        The villager's quote, as found on the back of their in-game photo.

        :return: The quote of this VillagerNhDetails.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this VillagerNhDetails.

        The villager's quote, as found on the back of their in-game photo.

        :param quote: The quote of this VillagerNhDetails.
        :type quote: str
        """

        self._quote = quote

    @property
    def sub_personality(self):
        """Gets the sub_personality of this VillagerNhDetails.

        Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.

        :return: The sub_personality of this VillagerNhDetails.
        :rtype: str
        """
        return self._sub_personality

    @sub_personality.setter
    def sub_personality(self, sub_personality):
        """Sets the sub_personality of this VillagerNhDetails.

        Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.

        :param sub_personality: The sub_personality of this VillagerNhDetails.
        :type sub_personality: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if sub_personality not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_personality` ({0}), must be one of {1}"
                .format(sub_personality, allowed_values)
            )

        self._sub_personality = sub_personality
