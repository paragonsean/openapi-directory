# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NHFurnitureVariationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colors: List[str]=None, image_url: str=None, pattern: str=None, variation: str=None):
        """NHFurnitureVariationsInner - a model defined in OpenAPI

        :param colors: The colors of this NHFurnitureVariationsInner.
        :param image_url: The image_url of this NHFurnitureVariationsInner.
        :param pattern: The pattern of this NHFurnitureVariationsInner.
        :param variation: The variation of this NHFurnitureVariationsInner.
        """
        self.openapi_types = {
            'colors': List[str],
            'image_url': str,
            'pattern': str,
            'variation': str
        }

        self.attribute_map = {
            'colors': 'colors',
            'image_url': 'image_url',
            'pattern': 'pattern',
            'variation': 'variation'
        }

        self._colors = colors
        self._image_url = image_url
        self._pattern = pattern
        self._variation = variation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHFurnitureVariationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHFurniture_variations_inner of this NHFurnitureVariationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colors(self):
        """Gets the colors of this NHFurnitureVariationsInner.


        :return: The colors of this NHFurnitureVariationsInner.
        :rtype: List[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this NHFurnitureVariationsInner.


        :param colors: The colors of this NHFurnitureVariationsInner.
        :type colors: List[str]
        """
        allowed_values = ["Aqua", "Beige", "Black", "Blue", "Brown", "Colorful", "Gray", "Green", "Orange", "Pink", "Purple", "Red", "White", "Yellow"]  # noqa: E501
        if not set(colors).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `colors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(colors) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._colors = colors

    @property
    def image_url(self):
        """Gets the image_url of this NHFurnitureVariationsInner.


        :return: The image_url of this NHFurnitureVariationsInner.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHFurnitureVariationsInner.


        :param image_url: The image_url of this NHFurnitureVariationsInner.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def pattern(self):
        """Gets the pattern of this NHFurnitureVariationsInner.


        :return: The pattern of this NHFurnitureVariationsInner.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this NHFurnitureVariationsInner.


        :param pattern: The pattern of this NHFurnitureVariationsInner.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def variation(self):
        """Gets the variation of this NHFurnitureVariationsInner.


        :return: The variation of this NHFurnitureVariationsInner.
        :rtype: str
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation of this NHFurnitureVariationsInner.


        :param variation: The variation of this NHFurnitureVariationsInner.
        :type variation: str
        """

        self._variation = variation
