# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.villager_nh_details import VillagerNhDetails
from openapi_server import util


class Villager(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alt_name: str=None, appearances: List[str]=None, birthday_day: str=None, birthday_month: str=None, clothing: str=None, debut: str=None, gender: str=None, id: str=None, image_url: str=None, islander: bool=None, name: str=None, nh_details: VillagerNhDetails=None, personality: str=None, phrase: str=None, prev_phrases: List[str]=None, quote: str=None, sign: str=None, species: str=None, text_color: str=None, title_color: str=None, url: str=None):
        """Villager - a model defined in OpenAPI

        :param alt_name: The alt_name of this Villager.
        :param appearances: The appearances of this Villager.
        :param birthday_day: The birthday_day of this Villager.
        :param birthday_month: The birthday_month of this Villager.
        :param clothing: The clothing of this Villager.
        :param debut: The debut of this Villager.
        :param gender: The gender of this Villager.
        :param id: The id of this Villager.
        :param image_url: The image_url of this Villager.
        :param islander: The islander of this Villager.
        :param name: The name of this Villager.
        :param nh_details: The nh_details of this Villager.
        :param personality: The personality of this Villager.
        :param phrase: The phrase of this Villager.
        :param prev_phrases: The prev_phrases of this Villager.
        :param quote: The quote of this Villager.
        :param sign: The sign of this Villager.
        :param species: The species of this Villager.
        :param text_color: The text_color of this Villager.
        :param title_color: The title_color of this Villager.
        :param url: The url of this Villager.
        """
        self.openapi_types = {
            'alt_name': str,
            'appearances': List[str],
            'birthday_day': str,
            'birthday_month': str,
            'clothing': str,
            'debut': str,
            'gender': str,
            'id': str,
            'image_url': str,
            'islander': bool,
            'name': str,
            'nh_details': VillagerNhDetails,
            'personality': str,
            'phrase': str,
            'prev_phrases': List[str],
            'quote': str,
            'sign': str,
            'species': str,
            'text_color': str,
            'title_color': str,
            'url': str
        }

        self.attribute_map = {
            'alt_name': 'alt_name',
            'appearances': 'appearances',
            'birthday_day': 'birthday_day',
            'birthday_month': 'birthday_month',
            'clothing': 'clothing',
            'debut': 'debut',
            'gender': 'gender',
            'id': 'id',
            'image_url': 'image_url',
            'islander': 'islander',
            'name': 'name',
            'nh_details': 'nh_details',
            'personality': 'personality',
            'phrase': 'phrase',
            'prev_phrases': 'prev_phrases',
            'quote': 'quote',
            'sign': 'sign',
            'species': 'species',
            'text_color': 'text_color',
            'title_color': 'title_color',
            'url': 'url'
        }

        self._alt_name = alt_name
        self._appearances = appearances
        self._birthday_day = birthday_day
        self._birthday_month = birthday_month
        self._clothing = clothing
        self._debut = debut
        self._gender = gender
        self._id = id
        self._image_url = image_url
        self._islander = islander
        self._name = name
        self._nh_details = nh_details
        self._personality = personality
        self._phrase = phrase
        self._prev_phrases = prev_phrases
        self._quote = quote
        self._sign = sign
        self._species = species
        self._text_color = text_color
        self._title_color = title_color
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Villager':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Villager of this Villager.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alt_name(self):
        """Gets the alt_name of this Villager.

        A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.

        :return: The alt_name of this Villager.
        :rtype: str
        """
        return self._alt_name

    @alt_name.setter
    def alt_name(self, alt_name):
        """Sets the alt_name of this Villager.

        A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.

        :param alt_name: The alt_name of this Villager.
        :type alt_name: str
        """

        self._alt_name = alt_name

    @property
    def appearances(self):
        """Gets the appearances of this Villager.

        List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.

        :return: The appearances of this Villager.
        :rtype: List[str]
        """
        return self._appearances

    @appearances.setter
    def appearances(self, appearances):
        """Sets the appearances of this Villager.

        List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.

        :param appearances: The appearances of this Villager.
        :type appearances: List[str]
        """
        allowed_values = ["DNM", "AC", "E_PLUS", "WW", "CF", "NL", "WA", "NH", "FILM", "HHD", "PC"]  # noqa: E501
        if not set(appearances).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `appearances` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(appearances) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._appearances = appearances

    @property
    def birthday_day(self):
        """Gets the birthday_day of this Villager.

        Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.

        :return: The birthday_day of this Villager.
        :rtype: str
        """
        return self._birthday_day

    @birthday_day.setter
    def birthday_day(self, birthday_day):
        """Sets the birthday_day of this Villager.

        Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.

        :param birthday_day: The birthday_day of this Villager.
        :type birthday_day: str
        """

        self._birthday_day = birthday_day

    @property
    def birthday_month(self):
        """Gets the birthday_month of this Villager.

        Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.

        :return: The birthday_month of this Villager.
        :rtype: str
        """
        return self._birthday_month

    @birthday_month.setter
    def birthday_month(self, birthday_month):
        """Sets the birthday_month of this Villager.

        Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.

        :param birthday_month: The birthday_month of this Villager.
        :type birthday_month: str
        """

        self._birthday_month = birthday_month

    @property
    def clothing(self):
        """Gets the clothing of this Villager.

        The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).

        :return: The clothing of this Villager.
        :rtype: str
        """
        return self._clothing

    @clothing.setter
    def clothing(self, clothing):
        """Sets the clothing of this Villager.

        The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).

        :param clothing: The clothing of this Villager.
        :type clothing: str
        """

        self._clothing = clothing

    @property
    def debut(self):
        """Gets the debut of this Villager.

        The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.

        :return: The debut of this Villager.
        :rtype: str
        """
        return self._debut

    @debut.setter
    def debut(self, debut):
        """Sets the debut of this Villager.

        The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.

        :param debut: The debut of this Villager.
        :type debut: str
        """
        allowed_values = ["DNM", "AC", "E_PLUS", "WW", "CF", "NL", "WA", "NH", "FILM", "HHD", "PC"]  # noqa: E501
        if debut not in allowed_values:
            raise ValueError(
                "Invalid value for `debut` ({0}), must be one of {1}"
                .format(debut, allowed_values)
            )

        self._debut = debut

    @property
    def gender(self):
        """Gets the gender of this Villager.

        Gender of the villager. In *Animal Crossing*, only male and female are used.

        :return: The gender of this Villager.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Villager.

        Gender of the villager. In *Animal Crossing*, only male and female are used.

        :param gender: The gender of this Villager.
        :type gender: str
        """
        allowed_values = ["Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Villager.

        The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.

        :return: The id of this Villager.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Villager.

        The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.

        :param id: The id of this Villager.
        :type id: str
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this Villager.

        Image of the villager from the latest game the villager appeared in.

        :return: The image_url of this Villager.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Villager.

        Image of the villager from the latest game the villager appeared in.

        :param image_url: The image_url of this Villager.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def islander(self):
        """Gets the islander of this Villager.

        Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.

        :return: The islander of this Villager.
        :rtype: bool
        """
        return self._islander

    @islander.setter
    def islander(self, islander):
        """Sets the islander of this Villager.

        Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.

        :param islander: The islander of this Villager.
        :type islander: bool
        """

        self._islander = islander

    @property
    def name(self):
        """Gets the name of this Villager.

        Name of the villager.

        :return: The name of this Villager.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Villager.

        Name of the villager.

        :param name: The name of this Villager.
        :type name: str
        """

        self._name = name

    @property
    def nh_details(self):
        """Gets the nh_details of this Villager.


        :return: The nh_details of this Villager.
        :rtype: VillagerNhDetails
        """
        return self._nh_details

    @nh_details.setter
    def nh_details(self, nh_details):
        """Sets the nh_details of this Villager.


        :param nh_details: The nh_details of this Villager.
        :type nh_details: VillagerNhDetails
        """

        self._nh_details = nh_details

    @property
    def personality(self):
        """Gets the personality of this Villager.

        The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.

        :return: The personality of this Villager.
        :rtype: str
        """
        return self._personality

    @personality.setter
    def personality(self, personality):
        """Sets the personality of this Villager.

        The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.

        :param personality: The personality of this Villager.
        :type personality: str
        """
        allowed_values = ["Big sister", "Cranky", "Jock", "Lazy", "Normal", "Peppy", "Smug", "Snooty"]  # noqa: E501
        if personality not in allowed_values:
            raise ValueError(
                "Invalid value for `personality` ({0}), must be one of {1}"
                .format(personality, allowed_values)
            )

        self._personality = personality

    @property
    def phrase(self):
        """Gets the phrase of this Villager.

        The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).

        :return: The phrase of this Villager.
        :rtype: str
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this Villager.

        The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).

        :param phrase: The phrase of this Villager.
        :type phrase: str
        """

        self._phrase = phrase

    @property
    def prev_phrases(self):
        """Gets the prev_phrases of this Villager.

        Any phrases used in previous *Animal Crossing* installations. May be empty.

        :return: The prev_phrases of this Villager.
        :rtype: List[str]
        """
        return self._prev_phrases

    @prev_phrases.setter
    def prev_phrases(self, prev_phrases):
        """Sets the prev_phrases of this Villager.

        Any phrases used in previous *Animal Crossing* installations. May be empty.

        :param prev_phrases: The prev_phrases of this Villager.
        :type prev_phrases: List[str]
        """

        self._prev_phrases = prev_phrases

    @property
    def quote(self):
        """Gets the quote of this Villager.

        The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.

        :return: The quote of this Villager.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this Villager.

        The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.

        :param quote: The quote of this Villager.
        :type quote: str
        """

        self._quote = quote

    @property
    def sign(self):
        """Gets the sign of this Villager.

        The villager's astrological star sign.

        :return: The sign of this Villager.
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this Villager.

        The villager's astrological star sign.

        :param sign: The sign of this Villager.
        :type sign: str
        """
        allowed_values = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]  # noqa: E501
        if sign not in allowed_values:
            raise ValueError(
                "Invalid value for `sign` ({0}), must be one of {1}"
                .format(sign, allowed_values)
            )

        self._sign = sign

    @property
    def species(self):
        """Gets the species of this Villager.

        The villager's species.

        :return: The species of this Villager.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this Villager.

        The villager's species.

        :param species: The species of this Villager.
        :type species: str
        """
        allowed_values = ["Alligator", "Anteater", "Bear", "Bear cub", "Bird", "Bull", "Cat", "Chicken", "Cow", "Deer", "Dog", "Duck", "Eagle", "Elephant", "Frog", "Goat", "Gorilla", "Hamster", "Hippo", "Horse", "Koala", "Kangaroo", "Lion", "Monkey", "Mouse", "Octopus", "Ostrich", "Penguin", "Pig", "Rabbit", "Rhinoceros", "Sheep", "Squirrel", "Tiger", "Wolf"]  # noqa: E501
        if species not in allowed_values:
            raise ValueError(
                "Invalid value for `species` ({0}), must be one of {1}"
                .format(species, allowed_values)
            )

        self._species = species

    @property
    def text_color(self):
        """Gets the text_color of this Villager.

        The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.

        :return: The text_color of this Villager.
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this Villager.

        The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.

        :param text_color: The text_color of this Villager.
        :type text_color: str
        """

        self._text_color = text_color

    @property
    def title_color(self):
        """Gets the title_color of this Villager.

        The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.

        :return: The title_color of this Villager.
        :rtype: str
        """
        return self._title_color

    @title_color.setter
    def title_color(self, title_color):
        """Sets the title_color of this Villager.

        The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.

        :param title_color: The title_color of this Villager.
        :type title_color: str
        """

        self._title_color = title_color

    @property
    def url(self):
        """Gets the url of this Villager.

        Link to the respective Nookipedia article.

        :return: The url of this Villager.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Villager.

        Link to the respective Nookipedia article.

        :param url: The url of this Villager.
        :type url: str
        """

        self._url = url
