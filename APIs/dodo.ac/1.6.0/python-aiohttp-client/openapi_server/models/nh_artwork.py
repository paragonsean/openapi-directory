# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_artwork_fake_info import NHArtworkFakeInfo
from openapi_server.models.nh_artwork_real_info import NHArtworkRealInfo
from openapi_server import util


class NHArtwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, art_name: str=None, art_style: str=None, art_type: str=None, author: str=None, availability: str=None, buy: int=None, fake_info: NHArtworkFakeInfo=None, has_fake: bool=None, length: float=None, name: str=None, real_info: NHArtworkRealInfo=None, sell: int=None, url: str=None, width: float=None, year: str=None):
        """NHArtwork - a model defined in OpenAPI

        :param art_name: The art_name of this NHArtwork.
        :param art_style: The art_style of this NHArtwork.
        :param art_type: The art_type of this NHArtwork.
        :param author: The author of this NHArtwork.
        :param availability: The availability of this NHArtwork.
        :param buy: The buy of this NHArtwork.
        :param fake_info: The fake_info of this NHArtwork.
        :param has_fake: The has_fake of this NHArtwork.
        :param length: The length of this NHArtwork.
        :param name: The name of this NHArtwork.
        :param real_info: The real_info of this NHArtwork.
        :param sell: The sell of this NHArtwork.
        :param url: The url of this NHArtwork.
        :param width: The width of this NHArtwork.
        :param year: The year of this NHArtwork.
        """
        self.openapi_types = {
            'art_name': str,
            'art_style': str,
            'art_type': str,
            'author': str,
            'availability': str,
            'buy': int,
            'fake_info': NHArtworkFakeInfo,
            'has_fake': bool,
            'length': float,
            'name': str,
            'real_info': NHArtworkRealInfo,
            'sell': int,
            'url': str,
            'width': float,
            'year': str
        }

        self.attribute_map = {
            'art_name': 'art_name',
            'art_style': 'art_style',
            'art_type': 'art_type',
            'author': 'author',
            'availability': 'availability',
            'buy': 'buy',
            'fake_info': 'fake_info',
            'has_fake': 'has_fake',
            'length': 'length',
            'name': 'name',
            'real_info': 'real_info',
            'sell': 'sell',
            'url': 'url',
            'width': 'width',
            'year': 'year'
        }

        self._art_name = art_name
        self._art_style = art_style
        self._art_type = art_type
        self._author = author
        self._availability = availability
        self._buy = buy
        self._fake_info = fake_info
        self._has_fake = has_fake
        self._length = length
        self._name = name
        self._real_info = real_info
        self._sell = sell
        self._url = url
        self._width = width
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHArtwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHArtwork of this NHArtwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def art_name(self):
        """Gets the art_name of this NHArtwork.

        The name of the real-life analog to the artwork.

        :return: The art_name of this NHArtwork.
        :rtype: str
        """
        return self._art_name

    @art_name.setter
    def art_name(self, art_name):
        """Sets the art_name of this NHArtwork.

        The name of the real-life analog to the artwork.

        :param art_name: The art_name of this NHArtwork.
        :type art_name: str
        """

        self._art_name = art_name

    @property
    def art_style(self):
        """Gets the art_style of this NHArtwork.

        The art style of the artwork.

        :return: The art_style of this NHArtwork.
        :rtype: str
        """
        return self._art_style

    @art_style.setter
    def art_style(self, art_style):
        """Sets the art_style of this NHArtwork.

        The art style of the artwork.

        :param art_style: The art_style of this NHArtwork.
        :type art_style: str
        """

        self._art_style = art_style

    @property
    def art_type(self):
        """Gets the art_type of this NHArtwork.

        The type of artwork (either a painting or statue).

        :return: The art_type of this NHArtwork.
        :rtype: str
        """
        return self._art_type

    @art_type.setter
    def art_type(self, art_type):
        """Sets the art_type of this NHArtwork.

        The type of artwork (either a painting or statue).

        :param art_type: The art_type of this NHArtwork.
        :type art_type: str
        """
        allowed_values = ["Painting", "Statue"]  # noqa: E501
        if art_type not in allowed_values:
            raise ValueError(
                "Invalid value for `art_type` ({0}), must be one of {1}"
                .format(art_type, allowed_values)
            )

        self._art_type = art_type

    @property
    def author(self):
        """Gets the author of this NHArtwork.

        The author of the real-life analog to the artwork.

        :return: The author of this NHArtwork.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this NHArtwork.

        The author of the real-life analog to the artwork.

        :param author: The author of this NHArtwork.
        :type author: str
        """

        self._author = author

    @property
    def availability(self):
        """Gets the availability of this NHArtwork.

        The availability of the artwork.

        :return: The availability of this NHArtwork.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHArtwork.

        The availability of the artwork.

        :param availability: The availability of this NHArtwork.
        :type availability: str
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHArtwork.

        The number of Bells the artwork may be purchased for.

        :return: The buy of this NHArtwork.
        :rtype: int
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHArtwork.

        The number of Bells the artwork may be purchased for.

        :param buy: The buy of this NHArtwork.
        :type buy: int
        """

        self._buy = buy

    @property
    def fake_info(self):
        """Gets the fake_info of this NHArtwork.


        :return: The fake_info of this NHArtwork.
        :rtype: NHArtworkFakeInfo
        """
        return self._fake_info

    @fake_info.setter
    def fake_info(self, fake_info):
        """Sets the fake_info of this NHArtwork.


        :param fake_info: The fake_info of this NHArtwork.
        :type fake_info: NHArtworkFakeInfo
        """

        self._fake_info = fake_info

    @property
    def has_fake(self):
        """Gets the has_fake of this NHArtwork.

        Whether the artwork has a fake or not.

        :return: The has_fake of this NHArtwork.
        :rtype: bool
        """
        return self._has_fake

    @has_fake.setter
    def has_fake(self, has_fake):
        """Sets the has_fake of this NHArtwork.

        Whether the artwork has a fake or not.

        :param has_fake: The has_fake of this NHArtwork.
        :type has_fake: bool
        """

        self._has_fake = has_fake

    @property
    def length(self):
        """Gets the length of this NHArtwork.

        The length of the artwork.

        :return: The length of this NHArtwork.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this NHArtwork.

        The length of the artwork.

        :param length: The length of this NHArtwork.
        :type length: float
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this NHArtwork.

        Name of the artwork.

        :return: The name of this NHArtwork.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHArtwork.

        Name of the artwork.

        :param name: The name of this NHArtwork.
        :type name: str
        """

        self._name = name

    @property
    def real_info(self):
        """Gets the real_info of this NHArtwork.


        :return: The real_info of this NHArtwork.
        :rtype: NHArtworkRealInfo
        """
        return self._real_info

    @real_info.setter
    def real_info(self, real_info):
        """Sets the real_info of this NHArtwork.


        :param real_info: The real_info of this NHArtwork.
        :type real_info: NHArtworkRealInfo
        """

        self._real_info = real_info

    @property
    def sell(self):
        """Gets the sell of this NHArtwork.

        The number of Bells the artwork can be sold to Nook's store for, when it is genuine.

        :return: The sell of this NHArtwork.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHArtwork.

        The number of Bells the artwork can be sold to Nook's store for, when it is genuine.

        :param sell: The sell of this NHArtwork.
        :type sell: int
        """

        self._sell = sell

    @property
    def url(self):
        """Gets the url of this NHArtwork.

        Link to the respective Nookipedia article.

        :return: The url of this NHArtwork.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHArtwork.

        Link to the respective Nookipedia article.

        :param url: The url of this NHArtwork.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this NHArtwork.

        The width of the artwork.

        :return: The width of this NHArtwork.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this NHArtwork.

        The width of the artwork.

        :param width: The width of this NHArtwork.
        :type width: float
        """

        self._width = width

    @property
    def year(self):
        """Gets the year of this NHArtwork.

        The year that the real-life analog was made. May be an exact year, an estimate (\"circa\"), or a range.

        :return: The year of this NHArtwork.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this NHArtwork.

        The year that the real-life analog was made. May be an exact year, an estimate (\"circa\"), or a range.

        :param year: The year of this NHArtwork.
        :type year: str
        """

        self._year = year
