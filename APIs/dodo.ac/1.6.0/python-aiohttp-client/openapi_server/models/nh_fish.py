# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_fish_north import NHFishNorth
from openapi_server.models.nh_fish_south import NHFishSouth
from openapi_server import util


class NHFish(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catchphrases: List[str]=None, image_url: str=None, location: str=None, name: str=None, north: NHFishNorth=None, number: int=None, rarity: str=None, render_url: str=None, sell_cj: int=None, sell_nook: int=None, shadow_size: str=None, south: NHFishSouth=None, tank_length: float=None, tank_width: float=None, total_catch: int=None, url: str=None):
        """NHFish - a model defined in OpenAPI

        :param catchphrases: The catchphrases of this NHFish.
        :param image_url: The image_url of this NHFish.
        :param location: The location of this NHFish.
        :param name: The name of this NHFish.
        :param north: The north of this NHFish.
        :param number: The number of this NHFish.
        :param rarity: The rarity of this NHFish.
        :param render_url: The render_url of this NHFish.
        :param sell_cj: The sell_cj of this NHFish.
        :param sell_nook: The sell_nook of this NHFish.
        :param shadow_size: The shadow_size of this NHFish.
        :param south: The south of this NHFish.
        :param tank_length: The tank_length of this NHFish.
        :param tank_width: The tank_width of this NHFish.
        :param total_catch: The total_catch of this NHFish.
        :param url: The url of this NHFish.
        """
        self.openapi_types = {
            'catchphrases': List[str],
            'image_url': str,
            'location': str,
            'name': str,
            'north': NHFishNorth,
            'number': int,
            'rarity': str,
            'render_url': str,
            'sell_cj': int,
            'sell_nook': int,
            'shadow_size': str,
            'south': NHFishSouth,
            'tank_length': float,
            'tank_width': float,
            'total_catch': int,
            'url': str
        }

        self.attribute_map = {
            'catchphrases': 'catchphrases',
            'image_url': 'image_url',
            'location': 'location',
            'name': 'name',
            'north': 'north',
            'number': 'number',
            'rarity': 'rarity',
            'render_url': 'render_url',
            'sell_cj': 'sell_cj',
            'sell_nook': 'sell_nook',
            'shadow_size': 'shadow_size',
            'south': 'south',
            'tank_length': 'tank_length',
            'tank_width': 'tank_width',
            'total_catch': 'total_catch',
            'url': 'url'
        }

        self._catchphrases = catchphrases
        self._image_url = image_url
        self._location = location
        self._name = name
        self._north = north
        self._number = number
        self._rarity = rarity
        self._render_url = render_url
        self._sell_cj = sell_cj
        self._sell_nook = sell_nook
        self._shadow_size = shadow_size
        self._south = south
        self._tank_length = tank_length
        self._tank_width = tank_width
        self._total_catch = total_catch
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHFish':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHFish of this NHFish.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catchphrases(self):
        """Gets the catchphrases of this NHFish.

        An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.

        :return: The catchphrases of this NHFish.
        :rtype: List[str]
        """
        return self._catchphrases

    @catchphrases.setter
    def catchphrases(self, catchphrases):
        """Sets the catchphrases of this NHFish.

        An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.

        :param catchphrases: The catchphrases of this NHFish.
        :type catchphrases: List[str]
        """

        self._catchphrases = catchphrases

    @property
    def image_url(self):
        """Gets the image_url of this NHFish.

        Image of the fish.

        :return: The image_url of this NHFish.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHFish.

        Image of the fish.

        :param image_url: The image_url of this NHFish.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def location(self):
        """Gets the location of this NHFish.

        Short descriptor of where the fish can be found.

        :return: The location of this NHFish.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NHFish.

        Short descriptor of where the fish can be found.

        :param location: The location of this NHFish.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this NHFish.

        Name of the fish.

        :return: The name of this NHFish.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHFish.

        Name of the fish.

        :param name: The name of this NHFish.
        :type name: str
        """

        self._name = name

    @property
    def north(self):
        """Gets the north of this NHFish.


        :return: The north of this NHFish.
        :rtype: NHFishNorth
        """
        return self._north

    @north.setter
    def north(self, north):
        """Sets the north of this NHFish.


        :param north: The north of this NHFish.
        :type north: NHFishNorth
        """

        self._north = north

    @property
    def number(self):
        """Gets the number of this NHFish.

        In-game fish number, marking position in the Critterpedia.

        :return: The number of this NHFish.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NHFish.

        In-game fish number, marking position in the Critterpedia.

        :param number: The number of this NHFish.
        :type number: int
        """

        self._number = number

    @property
    def rarity(self):
        """Gets the rarity of this NHFish.

        How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.

        :return: The rarity of this NHFish.
        :rtype: str
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity):
        """Sets the rarity of this NHFish.

        How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.

        :param rarity: The rarity of this NHFish.
        :type rarity: str
        """

        self._rarity = rarity

    @property
    def render_url(self):
        """Gets the render_url of this NHFish.

        Render of the fish.

        :return: The render_url of this NHFish.
        :rtype: str
        """
        return self._render_url

    @render_url.setter
    def render_url(self, render_url):
        """Sets the render_url of this NHFish.

        Render of the fish.

        :param render_url: The render_url of this NHFish.
        :type render_url: str
        """

        self._render_url = render_url

    @property
    def sell_cj(self):
        """Gets the sell_cj of this NHFish.

        The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.

        :return: The sell_cj of this NHFish.
        :rtype: int
        """
        return self._sell_cj

    @sell_cj.setter
    def sell_cj(self, sell_cj):
        """Sets the sell_cj of this NHFish.

        The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.

        :param sell_cj: The sell_cj of this NHFish.
        :type sell_cj: int
        """

        self._sell_cj = sell_cj

    @property
    def sell_nook(self):
        """Gets the sell_nook of this NHFish.

        The number of Bells the fish can be sold to Nook's store for.

        :return: The sell_nook of this NHFish.
        :rtype: int
        """
        return self._sell_nook

    @sell_nook.setter
    def sell_nook(self, sell_nook):
        """Sets the sell_nook of this NHFish.

        The number of Bells the fish can be sold to Nook's store for.

        :param sell_nook: The sell_nook of this NHFish.
        :type sell_nook: int
        """

        self._sell_nook = sell_nook

    @property
    def shadow_size(self):
        """Gets the shadow_size of this NHFish.

        The size of the fish's shadow.

        :return: The shadow_size of this NHFish.
        :rtype: str
        """
        return self._shadow_size

    @shadow_size.setter
    def shadow_size(self, shadow_size):
        """Sets the shadow_size of this NHFish.

        The size of the fish's shadow.

        :param shadow_size: The shadow_size of this NHFish.
        :type shadow_size: str
        """
        allowed_values = ["X-Small", "Small", "Medium", "Medium w/Fin", "Large", "Large w/Fin", "X-Large", "XX-Large", "Long"]  # noqa: E501
        if shadow_size not in allowed_values:
            raise ValueError(
                "Invalid value for `shadow_size` ({0}), must be one of {1}"
                .format(shadow_size, allowed_values)
            )

        self._shadow_size = shadow_size

    @property
    def south(self):
        """Gets the south of this NHFish.


        :return: The south of this NHFish.
        :rtype: NHFishSouth
        """
        return self._south

    @south.setter
    def south(self, south):
        """Sets the south of this NHFish.


        :param south: The south of this NHFish.
        :type south: NHFishSouth
        """

        self._south = south

    @property
    def tank_length(self):
        """Gets the tank_length of this NHFish.

        The length of the tank when the fish is placed as a furniture item.

        :return: The tank_length of this NHFish.
        :rtype: float
        """
        return self._tank_length

    @tank_length.setter
    def tank_length(self, tank_length):
        """Sets the tank_length of this NHFish.

        The length of the tank when the fish is placed as a furniture item.

        :param tank_length: The tank_length of this NHFish.
        :type tank_length: float
        """

        self._tank_length = tank_length

    @property
    def tank_width(self):
        """Gets the tank_width of this NHFish.

        The width of the tank when the fish is placed as a furniture item.

        :return: The tank_width of this NHFish.
        :rtype: float
        """
        return self._tank_width

    @tank_width.setter
    def tank_width(self, tank_width):
        """Sets the tank_width of this NHFish.

        The width of the tank when the fish is placed as a furniture item.

        :param tank_width: The tank_width of this NHFish.
        :type tank_width: float
        """

        self._tank_width = tank_width

    @property
    def total_catch(self):
        """Gets the total_catch of this NHFish.

        The total number of fish the player has to have caught before this fish will start spawning.

        :return: The total_catch of this NHFish.
        :rtype: int
        """
        return self._total_catch

    @total_catch.setter
    def total_catch(self, total_catch):
        """Sets the total_catch of this NHFish.

        The total number of fish the player has to have caught before this fish will start spawning.

        :param total_catch: The total_catch of this NHFish.
        :type total_catch: int
        """

        self._total_catch = total_catch

    @property
    def url(self):
        """Gets the url of this NHFish.

        Link to the respective Nookipedia article.

        :return: The url of this NHFish.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHFish.

        Link to the respective Nookipedia article.

        :param url: The url of this NHFish.
        :type url: str
        """

        self._url = url
