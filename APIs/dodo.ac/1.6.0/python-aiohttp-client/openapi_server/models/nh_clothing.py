# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server.models.nh_clothing_variations_inner import NHClothingVariationsInner
from openapi_server import util


class NHClothing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, category: str=None, label_themes: List[str]=None, name: str=None, notes: str=None, seasonality: str=None, sell: int=None, styles: List[str]=None, unlocked: bool=None, url: str=None, variation_total: int=None, variations: List[NHClothingVariationsInner]=None, version_added: str=None, vill_equip: bool=None):
        """NHClothing - a model defined in OpenAPI

        :param availability: The availability of this NHClothing.
        :param buy: The buy of this NHClothing.
        :param category: The category of this NHClothing.
        :param label_themes: The label_themes of this NHClothing.
        :param name: The name of this NHClothing.
        :param notes: The notes of this NHClothing.
        :param seasonality: The seasonality of this NHClothing.
        :param sell: The sell of this NHClothing.
        :param styles: The styles of this NHClothing.
        :param unlocked: The unlocked of this NHClothing.
        :param url: The url of this NHClothing.
        :param variation_total: The variation_total of this NHClothing.
        :param variations: The variations of this NHClothing.
        :param version_added: The version_added of this NHClothing.
        :param vill_equip: The vill_equip of this NHClothing.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'category': str,
            'label_themes': List[str],
            'name': str,
            'notes': str,
            'seasonality': str,
            'sell': int,
            'styles': List[str],
            'unlocked': bool,
            'url': str,
            'variation_total': int,
            'variations': List[NHClothingVariationsInner],
            'version_added': str,
            'vill_equip': bool
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'category': 'category',
            'label_themes': 'label_themes',
            'name': 'name',
            'notes': 'notes',
            'seasonality': 'seasonality',
            'sell': 'sell',
            'styles': 'styles',
            'unlocked': 'unlocked',
            'url': 'url',
            'variation_total': 'variation_total',
            'variations': 'variations',
            'version_added': 'version_added',
            'vill_equip': 'vill_equip'
        }

        self._availability = availability
        self._buy = buy
        self._category = category
        self._label_themes = label_themes
        self._name = name
        self._notes = notes
        self._seasonality = seasonality
        self._sell = sell
        self._styles = styles
        self._unlocked = unlocked
        self._url = url
        self._variation_total = variation_total
        self._variations = variations
        self._version_added = version_added
        self._vill_equip = vill_equip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHClothing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHClothing of this NHClothing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHClothing.

        Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHClothing.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHClothing.

        Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHClothing.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHClothing.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :return: The buy of this NHClothing.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHClothing.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :param buy: The buy of this NHClothing.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def category(self):
        """Gets the category of this NHClothing.

        The category of item as shown in the player's inventory.

        :return: The category of this NHClothing.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NHClothing.

        The category of item as shown in the player's inventory.

        :param category: The category of this NHClothing.
        :type category: str
        """
        allowed_values = ["Tops", "Bottoms", "Dress-up", "Headwear", "Accessories", "Socks", "Shoes", "Bags", "Umbrellas"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def label_themes(self):
        """Gets the label_themes of this NHClothing.

        The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.

        :return: The label_themes of this NHClothing.
        :rtype: List[str]
        """
        return self._label_themes

    @label_themes.setter
    def label_themes(self, label_themes):
        """Sets the label_themes of this NHClothing.

        The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.

        :param label_themes: The label_themes of this NHClothing.
        :type label_themes: List[str]
        """
        allowed_values = ["Comfy", "Everyday", "Fairy tale", "Formal", "Goth", "Outdoorsy", "Party", "Sporty", "Theatrical", "Vacation", "Work"]  # noqa: E501
        if not set(label_themes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `label_themes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(label_themes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._label_themes = label_themes

    @property
    def name(self):
        """Gets the name of this NHClothing.

        The name of the clothing.

        :return: The name of this NHClothing.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHClothing.

        The name of the clothing.

        :param name: The name of this NHClothing.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this NHClothing.

        Any additional miscellaneous information about the clothing, such as a name change from a past update.

        :return: The notes of this NHClothing.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NHClothing.

        Any additional miscellaneous information about the clothing, such as a name change from a past update.

        :param notes: The notes of this NHClothing.
        :type notes: str
        """

        self._notes = notes

    @property
    def seasonality(self):
        """Gets the seasonality of this NHClothing.

        The time of the year that the clothing is available.

        :return: The seasonality of this NHClothing.
        :rtype: str
        """
        return self._seasonality

    @seasonality.setter
    def seasonality(self, seasonality):
        """Sets the seasonality of this NHClothing.

        The time of the year that the clothing is available.

        :param seasonality: The seasonality of this NHClothing.
        :type seasonality: str
        """

        self._seasonality = seasonality

    @property
    def sell(self):
        """Gets the sell of this NHClothing.

        The number of Bells the clothing can be sold to the store for.

        :return: The sell of this NHClothing.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHClothing.

        The number of Bells the clothing can be sold to the store for.

        :param sell: The sell of this NHClothing.
        :type sell: int
        """

        self._sell = sell

    @property
    def styles(self):
        """Gets the styles of this NHClothing.

        The clothing's style(s). Styles are used for gifting villagers.

        :return: The styles of this NHClothing.
        :rtype: List[str]
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this NHClothing.

        The clothing's style(s). Styles are used for gifting villagers.

        :param styles: The styles of this NHClothing.
        :type styles: List[str]
        """
        allowed_values = ["Active", "Cool", "Cute", "Elegant", "Gorgeous", "Simple"]  # noqa: E501
        if not set(styles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `styles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(styles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._styles = styles

    @property
    def unlocked(self):
        """Gets the unlocked of this NHClothing.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :return: The unlocked of this NHClothing.
        :rtype: bool
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this NHClothing.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :param unlocked: The unlocked of this NHClothing.
        :type unlocked: bool
        """

        self._unlocked = unlocked

    @property
    def url(self):
        """Gets the url of this NHClothing.

        Link to the respective Nookipedia article.

        :return: The url of this NHClothing.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHClothing.

        Link to the respective Nookipedia article.

        :param url: The url of this NHClothing.
        :type url: str
        """

        self._url = url

    @property
    def variation_total(self):
        """Gets the variation_total of this NHClothing.

        The total number of variations the clothing has, between 0 and 8.

        :return: The variation_total of this NHClothing.
        :rtype: int
        """
        return self._variation_total

    @variation_total.setter
    def variation_total(self, variation_total):
        """Sets the variation_total of this NHClothing.

        The total number of variations the clothing has, between 0 and 8.

        :param variation_total: The variation_total of this NHClothing.
        :type variation_total: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if variation_total not in allowed_values:
            raise ValueError(
                "Invalid value for `variation_total` ({0}), must be one of {1}"
                .format(variation_total, allowed_values)
            )

        self._variation_total = variation_total

    @property
    def variations(self):
        """Gets the variations of this NHClothing.

        An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.

        :return: The variations of this NHClothing.
        :rtype: List[NHClothingVariationsInner]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this NHClothing.

        An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.

        :param variations: The variations of this NHClothing.
        :type variations: List[NHClothingVariationsInner]
        """

        self._variations = variations

    @property
    def version_added(self):
        """Gets the version_added of this NHClothing.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :return: The version_added of this NHClothing.
        :rtype: str
        """
        return self._version_added

    @version_added.setter
    def version_added(self, version_added):
        """Sets the version_added of this NHClothing.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :param version_added: The version_added of this NHClothing.
        :type version_added: str
        """

        self._version_added = version_added

    @property
    def vill_equip(self):
        """Gets the vill_equip of this NHClothing.

        Whether villagers may equip this item.

        :return: The vill_equip of this NHClothing.
        :rtype: bool
        """
        return self._vill_equip

    @vill_equip.setter
    def vill_equip(self, vill_equip):
        """Sets the vill_equip of this NHClothing.

        Whether villagers may equip this item.

        :param vill_equip: The vill_equip of this NHClothing.
        :type vill_equip: bool
        """

        self._vill_equip = vill_equip
