# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server import util


class NHItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, edible: bool=None, hha_base: int=None, image_url: str=None, is_fence: bool=None, material_name_sort: int=None, material_seasonality: str=None, material_seasonality_sort: int=None, material_sort: int=None, material_type: str=None, name: str=None, notes: str=None, plant_type: str=None, sell: int=None, stack: int=None, unlocked: bool=None, url: str=None, version_added: str=None):
        """NHItem - a model defined in OpenAPI

        :param availability: The availability of this NHItem.
        :param buy: The buy of this NHItem.
        :param edible: The edible of this NHItem.
        :param hha_base: The hha_base of this NHItem.
        :param image_url: The image_url of this NHItem.
        :param is_fence: The is_fence of this NHItem.
        :param material_name_sort: The material_name_sort of this NHItem.
        :param material_seasonality: The material_seasonality of this NHItem.
        :param material_seasonality_sort: The material_seasonality_sort of this NHItem.
        :param material_sort: The material_sort of this NHItem.
        :param material_type: The material_type of this NHItem.
        :param name: The name of this NHItem.
        :param notes: The notes of this NHItem.
        :param plant_type: The plant_type of this NHItem.
        :param sell: The sell of this NHItem.
        :param stack: The stack of this NHItem.
        :param unlocked: The unlocked of this NHItem.
        :param url: The url of this NHItem.
        :param version_added: The version_added of this NHItem.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'edible': bool,
            'hha_base': int,
            'image_url': str,
            'is_fence': bool,
            'material_name_sort': int,
            'material_seasonality': str,
            'material_seasonality_sort': int,
            'material_sort': int,
            'material_type': str,
            'name': str,
            'notes': str,
            'plant_type': str,
            'sell': int,
            'stack': int,
            'unlocked': bool,
            'url': str,
            'version_added': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'edible': 'edible',
            'hha_base': 'hha_base',
            'image_url': 'image_url',
            'is_fence': 'is_fence',
            'material_name_sort': 'material_name_sort',
            'material_seasonality': 'material_seasonality',
            'material_seasonality_sort': 'material_seasonality_sort',
            'material_sort': 'material_sort',
            'material_type': 'material_type',
            'name': 'name',
            'notes': 'notes',
            'plant_type': 'plant_type',
            'sell': 'sell',
            'stack': 'stack',
            'unlocked': 'unlocked',
            'url': 'url',
            'version_added': 'version_added'
        }

        self._availability = availability
        self._buy = buy
        self._edible = edible
        self._hha_base = hha_base
        self._image_url = image_url
        self._is_fence = is_fence
        self._material_name_sort = material_name_sort
        self._material_seasonality = material_seasonality
        self._material_seasonality_sort = material_seasonality_sort
        self._material_sort = material_sort
        self._material_type = material_type
        self._name = name
        self._notes = notes
        self._plant_type = plant_type
        self._sell = sell
        self._stack = stack
        self._unlocked = unlocked
        self._url = url
        self._version_added = version_added

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHItem of this NHItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHItem.

        Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHItem.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHItem.

        Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHItem.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHItem.

        An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..

        :return: The buy of this NHItem.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHItem.

        An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..

        :param buy: The buy of this NHItem.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def edible(self):
        """Gets the edible of this NHItem.

        Whether the item is edible or not.

        :return: The edible of this NHItem.
        :rtype: bool
        """
        return self._edible

    @edible.setter
    def edible(self, edible):
        """Sets the edible of this NHItem.

        Whether the item is edible or not.

        :param edible: The edible of this NHItem.
        :type edible: bool
        """

        self._edible = edible

    @property
    def hha_base(self):
        """Gets the hha_base of this NHItem.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :return: The hha_base of this NHItem.
        :rtype: int
        """
        return self._hha_base

    @hha_base.setter
    def hha_base(self, hha_base):
        """Sets the hha_base of this NHItem.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :param hha_base: The hha_base of this NHItem.
        :type hha_base: int
        """

        self._hha_base = hha_base

    @property
    def image_url(self):
        """Gets the image_url of this NHItem.

        Image of the interior.

        :return: The image_url of this NHItem.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHItem.

        Image of the interior.

        :param image_url: The image_url of this NHItem.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def is_fence(self):
        """Gets the is_fence of this NHItem.

        Whether or not the item is a fence or not.

        :return: The is_fence of this NHItem.
        :rtype: bool
        """
        return self._is_fence

    @is_fence.setter
    def is_fence(self, is_fence):
        """Sets the is_fence of this NHItem.

        Whether or not the item is a fence or not.

        :param is_fence: The is_fence of this NHItem.
        :type is_fence: bool
        """

        self._is_fence = is_fence

    @property
    def material_name_sort(self):
        """Gets the material_name_sort of this NHItem.

        (WIP)

        :return: The material_name_sort of this NHItem.
        :rtype: int
        """
        return self._material_name_sort

    @material_name_sort.setter
    def material_name_sort(self, material_name_sort):
        """Sets the material_name_sort of this NHItem.

        (WIP)

        :param material_name_sort: The material_name_sort of this NHItem.
        :type material_name_sort: int
        """

        self._material_name_sort = material_name_sort

    @property
    def material_seasonality(self):
        """Gets the material_seasonality of this NHItem.

        (WIP)

        :return: The material_seasonality of this NHItem.
        :rtype: str
        """
        return self._material_seasonality

    @material_seasonality.setter
    def material_seasonality(self, material_seasonality):
        """Sets the material_seasonality of this NHItem.

        (WIP)

        :param material_seasonality: The material_seasonality of this NHItem.
        :type material_seasonality: str
        """

        self._material_seasonality = material_seasonality

    @property
    def material_seasonality_sort(self):
        """Gets the material_seasonality_sort of this NHItem.

        (WIP)

        :return: The material_seasonality_sort of this NHItem.
        :rtype: int
        """
        return self._material_seasonality_sort

    @material_seasonality_sort.setter
    def material_seasonality_sort(self, material_seasonality_sort):
        """Sets the material_seasonality_sort of this NHItem.

        (WIP)

        :param material_seasonality_sort: The material_seasonality_sort of this NHItem.
        :type material_seasonality_sort: int
        """

        self._material_seasonality_sort = material_seasonality_sort

    @property
    def material_sort(self):
        """Gets the material_sort of this NHItem.

        (WIP)

        :return: The material_sort of this NHItem.
        :rtype: int
        """
        return self._material_sort

    @material_sort.setter
    def material_sort(self, material_sort):
        """Sets the material_sort of this NHItem.

        (WIP)

        :param material_sort: The material_sort of this NHItem.
        :type material_sort: int
        """

        self._material_sort = material_sort

    @property
    def material_type(self):
        """Gets the material_type of this NHItem.

        (WIP)

        :return: The material_type of this NHItem.
        :rtype: str
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this NHItem.

        (WIP)

        :param material_type: The material_type of this NHItem.
        :type material_type: str
        """
        allowed_values = ["", "Bamboo", "Mushroom", "Trash", "Wood", "Ore", "Snowflake", "Tree", "Ornament", "Fruit", "Underwater", "Other", "Leaf", "Shell", "Flower", "Star Fragment", "Feather", "Egg", "Plant"]  # noqa: E501
        if material_type not in allowed_values:
            raise ValueError(
                "Invalid value for `material_type` ({0}), must be one of {1}"
                .format(material_type, allowed_values)
            )

        self._material_type = material_type

    @property
    def name(self):
        """Gets the name of this NHItem.

        The name of the item.

        :return: The name of this NHItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHItem.

        The name of the item.

        :param name: The name of this NHItem.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this NHItem.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :return: The notes of this NHItem.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NHItem.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :param notes: The notes of this NHItem.
        :type notes: str
        """

        self._notes = notes

    @property
    def plant_type(self):
        """Gets the plant_type of this NHItem.

        (WIP)

        :return: The plant_type of this NHItem.
        :rtype: str
        """
        return self._plant_type

    @plant_type.setter
    def plant_type(self, plant_type):
        """Sets the plant_type of this NHItem.

        (WIP)

        :param plant_type: The plant_type of this NHItem.
        :type plant_type: str
        """
        allowed_values = ["", "Pumpkin", "Flower", "Bush", "Tree"]  # noqa: E501
        if plant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plant_type` ({0}), must be one of {1}"
                .format(plant_type, allowed_values)
            )

        self._plant_type = plant_type

    @property
    def sell(self):
        """Gets the sell of this NHItem.

        The number of bells the item can be sold to Nook's store for.

        :return: The sell of this NHItem.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHItem.

        The number of bells the item can be sold to Nook's store for.

        :param sell: The sell of this NHItem.
        :type sell: int
        """

        self._sell = sell

    @property
    def stack(self):
        """Gets the stack of this NHItem.

        How much the item can stack up to in a single inventory slot.

        :return: The stack of this NHItem.
        :rtype: int
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this NHItem.

        How much the item can stack up to in a single inventory slot.

        :param stack: The stack of this NHItem.
        :type stack: int
        """

        self._stack = stack

    @property
    def unlocked(self):
        """Gets the unlocked of this NHItem.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :return: The unlocked of this NHItem.
        :rtype: bool
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this NHItem.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :param unlocked: The unlocked of this NHItem.
        :type unlocked: bool
        """

        self._unlocked = unlocked

    @property
    def url(self):
        """Gets the url of this NHItem.

        Link to the respective Nookipedia article.

        :return: The url of this NHItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHItem.

        Link to the respective Nookipedia article.

        :param url: The url of this NHItem.
        :type url: str
        """

        self._url = url

    @property
    def version_added(self):
        """Gets the version_added of this NHItem.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :return: The version_added of this NHItem.
        :rtype: str
        """
        return self._version_added

    @version_added.setter
    def version_added(self, version_added):
        """Sets the version_added of this NHItem.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :param version_added: The version_added of this NHItem.
        :type version_added: str
        """

        self._version_added = version_added
