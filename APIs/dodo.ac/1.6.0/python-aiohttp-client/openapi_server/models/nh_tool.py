# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server.models.nh_tool_variations_inner import NHToolVariationsInner
from openapi_server import util


class NHTool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, custom_body_part: str=None, custom_kits: int=None, customizable: bool=None, hha_base: int=None, name: str=None, notes: str=None, sell: int=None, unlocked: bool=None, url: str=None, uses: int=None, variations: List[NHToolVariationsInner]=None, version_added: str=None):
        """NHTool - a model defined in OpenAPI

        :param availability: The availability of this NHTool.
        :param buy: The buy of this NHTool.
        :param custom_body_part: The custom_body_part of this NHTool.
        :param custom_kits: The custom_kits of this NHTool.
        :param customizable: The customizable of this NHTool.
        :param hha_base: The hha_base of this NHTool.
        :param name: The name of this NHTool.
        :param notes: The notes of this NHTool.
        :param sell: The sell of this NHTool.
        :param unlocked: The unlocked of this NHTool.
        :param url: The url of this NHTool.
        :param uses: The uses of this NHTool.
        :param variations: The variations of this NHTool.
        :param version_added: The version_added of this NHTool.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'custom_body_part': str,
            'custom_kits': int,
            'customizable': bool,
            'hha_base': int,
            'name': str,
            'notes': str,
            'sell': int,
            'unlocked': bool,
            'url': str,
            'uses': int,
            'variations': List[NHToolVariationsInner],
            'version_added': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'custom_body_part': 'custom_body_part',
            'custom_kits': 'custom_kits',
            'customizable': 'customizable',
            'hha_base': 'hha_base',
            'name': 'name',
            'notes': 'notes',
            'sell': 'sell',
            'unlocked': 'unlocked',
            'url': 'url',
            'uses': 'uses',
            'variations': 'variations',
            'version_added': 'version_added'
        }

        self._availability = availability
        self._buy = buy
        self._custom_body_part = custom_body_part
        self._custom_kits = custom_kits
        self._customizable = customizable
        self._hha_base = hha_base
        self._name = name
        self._notes = notes
        self._sell = sell
        self._unlocked = unlocked
        self._url = url
        self._uses = uses
        self._variations = variations
        self._version_added = version_added

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHTool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHTool of this NHTool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHTool.

        Where the tool may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHTool.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHTool.

        Where the tool may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHTool.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHTool.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :return: The buy of this NHTool.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHTool.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :param buy: The buy of this NHTool.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def custom_body_part(self):
        """Gets the custom_body_part of this NHTool.

        If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.

        :return: The custom_body_part of this NHTool.
        :rtype: str
        """
        return self._custom_body_part

    @custom_body_part.setter
    def custom_body_part(self, custom_body_part):
        """Sets the custom_body_part of this NHTool.

        If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.

        :param custom_body_part: The custom_body_part of this NHTool.
        :type custom_body_part: str
        """

        self._custom_body_part = custom_body_part

    @property
    def custom_kits(self):
        """Gets the custom_kits of this NHTool.

        The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.

        :return: The custom_kits of this NHTool.
        :rtype: int
        """
        return self._custom_kits

    @custom_kits.setter
    def custom_kits(self, custom_kits):
        """Sets the custom_kits of this NHTool.

        The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.

        :param custom_kits: The custom_kits of this NHTool.
        :type custom_kits: int
        """

        self._custom_kits = custom_kits

    @property
    def customizable(self):
        """Gets the customizable of this NHTool.

        Whether or not the item is customizable via a crafting table.

        :return: The customizable of this NHTool.
        :rtype: bool
        """
        return self._customizable

    @customizable.setter
    def customizable(self, customizable):
        """Sets the customizable of this NHTool.

        Whether or not the item is customizable via a crafting table.

        :param customizable: The customizable of this NHTool.
        :type customizable: bool
        """

        self._customizable = customizable

    @property
    def hha_base(self):
        """Gets the hha_base of this NHTool.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :return: The hha_base of this NHTool.
        :rtype: int
        """
        return self._hha_base

    @hha_base.setter
    def hha_base(self, hha_base):
        """Sets the hha_base of this NHTool.

        The base value that the item provides to a player's Happy Home Academy score when placed in their home.

        :param hha_base: The hha_base of this NHTool.
        :type hha_base: int
        """

        self._hha_base = hha_base

    @property
    def name(self):
        """Gets the name of this NHTool.

        The name of the tool.

        :return: The name of this NHTool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHTool.

        The name of the tool.

        :param name: The name of this NHTool.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this NHTool.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :return: The notes of this NHTool.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NHTool.

        Any additional miscellaneous information about the item, such as a name change from a past update.

        :param notes: The notes of this NHTool.
        :type notes: str
        """

        self._notes = notes

    @property
    def sell(self):
        """Gets the sell of this NHTool.

        The number of bells the tool can be sold to the store for.

        :return: The sell of this NHTool.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHTool.

        The number of bells the tool can be sold to the store for.

        :param sell: The sell of this NHTool.
        :type sell: int
        """

        self._sell = sell

    @property
    def unlocked(self):
        """Gets the unlocked of this NHTool.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :return: The unlocked of this NHTool.
        :rtype: bool
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this NHTool.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :param unlocked: The unlocked of this NHTool.
        :type unlocked: bool
        """

        self._unlocked = unlocked

    @property
    def url(self):
        """Gets the url of this NHTool.

        Link the the respective Nookipedia article.

        :return: The url of this NHTool.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHTool.

        Link the the respective Nookipedia article.

        :param url: The url of this NHTool.
        :type url: str
        """

        self._url = url

    @property
    def uses(self):
        """Gets the uses of this NHTool.

        How many times the tool can be used before breaking.

        :return: The uses of this NHTool.
        :rtype: int
        """
        return self._uses

    @uses.setter
    def uses(self, uses):
        """Sets the uses of this NHTool.

        How many times the tool can be used before breaking.

        :param uses: The uses of this NHTool.
        :type uses: int
        """

        self._uses = uses

    @property
    def variations(self):
        """Gets the variations of this NHTool.

        An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Tools with multiple variations will have the `variation` fields defined with the name of each variation.

        :return: The variations of this NHTool.
        :rtype: List[NHToolVariationsInner]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this NHTool.

        An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Tools with multiple variations will have the `variation` fields defined with the name of each variation.

        :param variations: The variations of this NHTool.
        :type variations: List[NHToolVariationsInner]
        """

        self._variations = variations

    @property
    def version_added(self):
        """Gets the version_added of this NHTool.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :return: The version_added of this NHTool.
        :rtype: str
        """
        return self._version_added

    @version_added.setter
    def version_added(self, version_added):
        """Sets the version_added of this NHTool.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :param version_added: The version_added of this NHTool.
        :type version_added: str
        """

        self._version_added = version_added
