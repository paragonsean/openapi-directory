# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NHFossilGroupWithIndividualFossilsFossilsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colors: List[str]=None, fossil_group: str=None, hha_base: int=None, image_url: str=None, interactable: bool=None, length: int=None, name: str=None, sell: int=None, url: str=None, width: int=None):
        """NHFossilGroupWithIndividualFossilsFossilsInner - a model defined in OpenAPI

        :param colors: The colors of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param fossil_group: The fossil_group of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param hha_base: The hha_base of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param image_url: The image_url of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param interactable: The interactable of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param length: The length of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param name: The name of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param sell: The sell of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param url: The url of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :param width: The width of this NHFossilGroupWithIndividualFossilsFossilsInner.
        """
        self.openapi_types = {
            'colors': List[str],
            'fossil_group': str,
            'hha_base': int,
            'image_url': str,
            'interactable': bool,
            'length': int,
            'name': str,
            'sell': int,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'colors': 'colors',
            'fossil_group': 'fossil_group',
            'hha_base': 'hha_base',
            'image_url': 'image_url',
            'interactable': 'interactable',
            'length': 'length',
            'name': 'name',
            'sell': 'sell',
            'url': 'url',
            'width': 'width'
        }

        self._colors = colors
        self._fossil_group = fossil_group
        self._hha_base = hha_base
        self._image_url = image_url
        self._interactable = interactable
        self._length = length
        self._name = name
        self._sell = sell
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHFossilGroupWithIndividualFossilsFossilsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHFossilGroupWithIndividualFossils_fossils_inner of this NHFossilGroupWithIndividualFossilsFossilsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colors(self):
        """Gets the colors of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The colors of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: List[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param colors: The colors of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type colors: List[str]
        """
        allowed_values = ["Aqua", "Beige", "Black", "Blue", "Brown", "Colorful", "Gray", "Green", "Orange", "Pink", "Purple", "Red", "White", "Yellow"]  # noqa: E501
        if not set(colors).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `colors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(colors) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._colors = colors

    @property
    def fossil_group(self):
        """Gets the fossil_group of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The fossil_group of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: str
        """
        return self._fossil_group

    @fossil_group.setter
    def fossil_group(self, fossil_group):
        """Sets the fossil_group of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param fossil_group: The fossil_group of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type fossil_group: str
        """

        self._fossil_group = fossil_group

    @property
    def hha_base(self):
        """Gets the hha_base of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The hha_base of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: int
        """
        return self._hha_base

    @hha_base.setter
    def hha_base(self, hha_base):
        """Sets the hha_base of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param hha_base: The hha_base of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type hha_base: int
        """

        self._hha_base = hha_base

    @property
    def image_url(self):
        """Gets the image_url of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The image_url of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param image_url: The image_url of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def interactable(self):
        """Gets the interactable of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The interactable of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: bool
        """
        return self._interactable

    @interactable.setter
    def interactable(self, interactable):
        """Sets the interactable of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param interactable: The interactable of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type interactable: bool
        """

        self._interactable = interactable

    @property
    def length(self):
        """Gets the length of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The length of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param length: The length of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type length: int
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The name of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param name: The name of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type name: str
        """

        self._name = name

    @property
    def sell(self):
        """Gets the sell of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The sell of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param sell: The sell of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type sell: int
        """

        self._sell = sell

    @property
    def url(self):
        """Gets the url of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The url of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param url: The url of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :return: The width of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this NHFossilGroupWithIndividualFossilsFossilsInner.


        :param width: The width of this NHFossilGroupWithIndividualFossilsFossilsInner.
        :type width: int
        """

        self._width = width
