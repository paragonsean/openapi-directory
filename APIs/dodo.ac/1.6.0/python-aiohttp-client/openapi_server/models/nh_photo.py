# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_clothing_availability_inner import NHClothingAvailabilityInner
from openapi_server.models.nh_clothing_buy_inner import NHClothingBuyInner
from openapi_server.models.nh_clothing_variations_inner import NHClothingVariationsInner
from openapi_server import util


class NHPhoto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: List[NHClothingAvailabilityInner]=None, buy: List[NHClothingBuyInner]=None, category: str=None, custom_body_part: str=None, custom_kits: int=None, customizable: bool=None, grid_length: float=None, grid_width: float=None, interactable: bool=None, name: str=None, sell: int=None, unlocked: bool=None, url: str=None, variations: List[NHClothingVariationsInner]=None, version_added: str=None):
        """NHPhoto - a model defined in OpenAPI

        :param availability: The availability of this NHPhoto.
        :param buy: The buy of this NHPhoto.
        :param category: The category of this NHPhoto.
        :param custom_body_part: The custom_body_part of this NHPhoto.
        :param custom_kits: The custom_kits of this NHPhoto.
        :param customizable: The customizable of this NHPhoto.
        :param grid_length: The grid_length of this NHPhoto.
        :param grid_width: The grid_width of this NHPhoto.
        :param interactable: The interactable of this NHPhoto.
        :param name: The name of this NHPhoto.
        :param sell: The sell of this NHPhoto.
        :param unlocked: The unlocked of this NHPhoto.
        :param url: The url of this NHPhoto.
        :param variations: The variations of this NHPhoto.
        :param version_added: The version_added of this NHPhoto.
        """
        self.openapi_types = {
            'availability': List[NHClothingAvailabilityInner],
            'buy': List[NHClothingBuyInner],
            'category': str,
            'custom_body_part': str,
            'custom_kits': int,
            'customizable': bool,
            'grid_length': float,
            'grid_width': float,
            'interactable': bool,
            'name': str,
            'sell': int,
            'unlocked': bool,
            'url': str,
            'variations': List[NHClothingVariationsInner],
            'version_added': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'buy': 'buy',
            'category': 'category',
            'custom_body_part': 'custom_body_part',
            'custom_kits': 'custom_kits',
            'customizable': 'customizable',
            'grid_length': 'grid_length',
            'grid_width': 'grid_width',
            'interactable': 'interactable',
            'name': 'name',
            'sell': 'sell',
            'unlocked': 'unlocked',
            'url': 'url',
            'variations': 'variations',
            'version_added': 'version_added'
        }

        self._availability = availability
        self._buy = buy
        self._category = category
        self._custom_body_part = custom_body_part
        self._custom_kits = custom_kits
        self._customizable = customizable
        self._grid_length = grid_length
        self._grid_width = grid_width
        self._interactable = interactable
        self._name = name
        self._sell = sell
        self._unlocked = unlocked
        self._url = url
        self._variations = variations
        self._version_added = version_added

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHPhoto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHPhoto of this NHPhoto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this NHPhoto.

        Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :return: The availability of this NHPhoto.
        :rtype: List[NHClothingAvailabilityInner]
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this NHPhoto.

        Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.

        :param availability: The availability of this NHPhoto.
        :type availability: List[NHClothingAvailabilityInner]
        """

        self._availability = availability

    @property
    def buy(self):
        """Gets the buy of this NHPhoto.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :return: The buy of this NHPhoto.
        :rtype: List[NHClothingBuyInner]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this NHPhoto.

        An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..

        :param buy: The buy of this NHPhoto.
        :type buy: List[NHClothingBuyInner]
        """

        self._buy = buy

    @property
    def category(self):
        """Gets the category of this NHPhoto.

        The category of item as shown in the player's inventory.

        :return: The category of this NHPhoto.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NHPhoto.

        The category of item as shown in the player's inventory.

        :param category: The category of this NHPhoto.
        :type category: str
        """
        allowed_values = ["Photos", "Posters"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def custom_body_part(self):
        """Gets the custom_body_part of this NHPhoto.

        If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.

        :return: The custom_body_part of this NHPhoto.
        :rtype: str
        """
        return self._custom_body_part

    @custom_body_part.setter
    def custom_body_part(self, custom_body_part):
        """Sets the custom_body_part of this NHPhoto.

        If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is \"Bamboo\" as the bamboo color is able to be customized.

        :param custom_body_part: The custom_body_part of this NHPhoto.
        :type custom_body_part: str
        """

        self._custom_body_part = custom_body_part

    @property
    def custom_kits(self):
        """Gets the custom_kits of this NHPhoto.

        The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.

        :return: The custom_kits of this NHPhoto.
        :rtype: int
        """
        return self._custom_kits

    @custom_kits.setter
    def custom_kits(self, custom_kits):
        """Sets the custom_kits of this NHPhoto.

        The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.

        :param custom_kits: The custom_kits of this NHPhoto.
        :type custom_kits: int
        """

        self._custom_kits = custom_kits

    @property
    def customizable(self):
        """Gets the customizable of this NHPhoto.

        Whether or not the item is customizable via a crafting table.

        :return: The customizable of this NHPhoto.
        :rtype: bool
        """
        return self._customizable

    @customizable.setter
    def customizable(self, customizable):
        """Sets the customizable of this NHPhoto.

        Whether or not the item is customizable via a crafting table.

        :param customizable: The customizable of this NHPhoto.
        :type customizable: bool
        """

        self._customizable = customizable

    @property
    def grid_length(self):
        """Gets the grid_length of this NHPhoto.

        The number of lengthwise grid spaces this item takes up.

        :return: The grid_length of this NHPhoto.
        :rtype: float
        """
        return self._grid_length

    @grid_length.setter
    def grid_length(self, grid_length):
        """Sets the grid_length of this NHPhoto.

        The number of lengthwise grid spaces this item takes up.

        :param grid_length: The grid_length of this NHPhoto.
        :type grid_length: float
        """

        self._grid_length = grid_length

    @property
    def grid_width(self):
        """Gets the grid_width of this NHPhoto.

        The number of widthwise grid spaces this item takes up.

        :return: The grid_width of this NHPhoto.
        :rtype: float
        """
        return self._grid_width

    @grid_width.setter
    def grid_width(self, grid_width):
        """Sets the grid_width of this NHPhoto.

        The number of widthwise grid spaces this item takes up.

        :param grid_width: The grid_width of this NHPhoto.
        :type grid_width: float
        """

        self._grid_width = grid_width

    @property
    def interactable(self):
        """Gets the interactable of this NHPhoto.

        Whether or not the item can be interacted with. This field is true for all photos and false for all posters.

        :return: The interactable of this NHPhoto.
        :rtype: bool
        """
        return self._interactable

    @interactable.setter
    def interactable(self, interactable):
        """Sets the interactable of this NHPhoto.

        Whether or not the item can be interacted with. This field is true for all photos and false for all posters.

        :param interactable: The interactable of this NHPhoto.
        :type interactable: bool
        """

        self._interactable = interactable

    @property
    def name(self):
        """Gets the name of this NHPhoto.

        The name of the photo.

        :return: The name of this NHPhoto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHPhoto.

        The name of the photo.

        :param name: The name of this NHPhoto.
        :type name: str
        """

        self._name = name

    @property
    def sell(self):
        """Gets the sell of this NHPhoto.

        The number of Bells the photo can be sold to the store for.

        :return: The sell of this NHPhoto.
        :rtype: int
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this NHPhoto.

        The number of Bells the photo can be sold to the store for.

        :param sell: The sell of this NHPhoto.
        :type sell: int
        """

        self._sell = sell

    @property
    def unlocked(self):
        """Gets the unlocked of this NHPhoto.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :return: The unlocked of this NHPhoto.
        :rtype: bool
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this NHPhoto.

        Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.

        :param unlocked: The unlocked of this NHPhoto.
        :type unlocked: bool
        """

        self._unlocked = unlocked

    @property
    def url(self):
        """Gets the url of this NHPhoto.

        Link to the respective Nookipedia article.

        :return: The url of this NHPhoto.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHPhoto.

        Link to the respective Nookipedia article.

        :param url: The url of this NHPhoto.
        :type url: str
        """

        self._url = url

    @property
    def variations(self):
        """Gets the variations of this NHPhoto.

        An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.

        :return: The variations of this NHPhoto.
        :rtype: List[NHClothingVariationsInner]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this NHPhoto.

        An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.

        :param variations: The variations of this NHPhoto.
        :type variations: List[NHClothingVariationsInner]
        """

        self._variations = variations

    @property
    def version_added(self):
        """Gets the version_added of this NHPhoto.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :return: The version_added of this NHPhoto.
        :rtype: str
        """
        return self._version_added

    @version_added.setter
    def version_added(self, version_added):
        """Sets the version_added of this NHPhoto.

        The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \"1.0.0\".

        :param version_added: The version_added of this NHPhoto.
        :type version_added: str
        """

        self._version_added = version_added
