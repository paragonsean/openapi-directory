# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NHEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, event: str=None, type: str=None, url: str=None):
        """NHEvent - a model defined in OpenAPI

        :param _date: The _date of this NHEvent.
        :param event: The event of this NHEvent.
        :param type: The type of this NHEvent.
        :param url: The url of this NHEvent.
        """
        self.openapi_types = {
            '_date': str,
            'event': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            '_date': 'date',
            'event': 'event',
            'type': 'type',
            'url': 'url'
        }

        self.__date = _date
        self._event = event
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHEvent of this NHEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this NHEvent.

        The date of the event in YYYY-MM-DD format.

        :return: The _date of this NHEvent.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NHEvent.

        The date of the event in YYYY-MM-DD format.

        :param _date: The _date of this NHEvent.
        :type _date: str
        """

        self.__date = _date

    @property
    def event(self):
        """Gets the event of this NHEvent.

        The description of the event.

        :return: The event of this NHEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this NHEvent.

        The description of the event.

        :param event: The event of this NHEvent.
        :type event: str
        """

        self._event = event

    @property
    def type(self):
        """Gets the type of this NHEvent.

        The type of event. \"Event\" is a festivity the player can take part in. \"Nook Shopping\" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). \"Recipes\" refers to the start or end of certain recipes being available. \"Birthday\" refers to the birthday of a villager or special character.

        :return: The type of this NHEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NHEvent.

        The type of event. \"Event\" is a festivity the player can take part in. \"Nook Shopping\" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). \"Recipes\" refers to the start or end of certain recipes being available. \"Birthday\" refers to the birthday of a villager or special character.

        :param type: The type of this NHEvent.
        :type type: str
        """
        allowed_values = ["Event", "Nook Shopping", "Recipes", "Birthday"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this NHEvent.

        Link to the respective Nookipedia article for the event.

        :return: The url of this NHEvent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHEvent.

        Link to the respective Nookipedia article for the event.

        :param url: The url of this NHEvent.
        :type url: str
        """

        self._url = url
