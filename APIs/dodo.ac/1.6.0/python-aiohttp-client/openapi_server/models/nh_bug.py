# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nh_bug_north import NHBugNorth
from openapi_server.models.nh_bug_south import NHBugSouth
from openapi_server import util


class NHBug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catchphrases: List[str]=None, image_url: str=None, location: str=None, name: str=None, north: NHBugNorth=None, number: int=None, rarity: str=None, render_url: str=None, sell_flick: int=None, sell_nook: int=None, south: NHBugSouth=None, tank_length: float=None, tank_width: float=None, total_catch: int=None, url: str=None):
        """NHBug - a model defined in OpenAPI

        :param catchphrases: The catchphrases of this NHBug.
        :param image_url: The image_url of this NHBug.
        :param location: The location of this NHBug.
        :param name: The name of this NHBug.
        :param north: The north of this NHBug.
        :param number: The number of this NHBug.
        :param rarity: The rarity of this NHBug.
        :param render_url: The render_url of this NHBug.
        :param sell_flick: The sell_flick of this NHBug.
        :param sell_nook: The sell_nook of this NHBug.
        :param south: The south of this NHBug.
        :param tank_length: The tank_length of this NHBug.
        :param tank_width: The tank_width of this NHBug.
        :param total_catch: The total_catch of this NHBug.
        :param url: The url of this NHBug.
        """
        self.openapi_types = {
            'catchphrases': List[str],
            'image_url': str,
            'location': str,
            'name': str,
            'north': NHBugNorth,
            'number': int,
            'rarity': str,
            'render_url': str,
            'sell_flick': int,
            'sell_nook': int,
            'south': NHBugSouth,
            'tank_length': float,
            'tank_width': float,
            'total_catch': int,
            'url': str
        }

        self.attribute_map = {
            'catchphrases': 'catchphrases',
            'image_url': 'image_url',
            'location': 'location',
            'name': 'name',
            'north': 'north',
            'number': 'number',
            'rarity': 'rarity',
            'render_url': 'render_url',
            'sell_flick': 'sell_flick',
            'sell_nook': 'sell_nook',
            'south': 'south',
            'tank_length': 'tank_length',
            'tank_width': 'tank_width',
            'total_catch': 'total_catch',
            'url': 'url'
        }

        self._catchphrases = catchphrases
        self._image_url = image_url
        self._location = location
        self._name = name
        self._north = north
        self._number = number
        self._rarity = rarity
        self._render_url = render_url
        self._sell_flick = sell_flick
        self._sell_nook = sell_nook
        self._south = south
        self._tank_length = tank_length
        self._tank_width = tank_width
        self._total_catch = total_catch
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NHBug':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NHBug of this NHBug.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catchphrases(self):
        """Gets the catchphrases of this NHBug.

        An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.

        :return: The catchphrases of this NHBug.
        :rtype: List[str]
        """
        return self._catchphrases

    @catchphrases.setter
    def catchphrases(self, catchphrases):
        """Sets the catchphrases of this NHBug.

        An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.

        :param catchphrases: The catchphrases of this NHBug.
        :type catchphrases: List[str]
        """

        self._catchphrases = catchphrases

    @property
    def image_url(self):
        """Gets the image_url of this NHBug.

        Image of the bug.

        :return: The image_url of this NHBug.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this NHBug.

        Image of the bug.

        :param image_url: The image_url of this NHBug.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def location(self):
        """Gets the location of this NHBug.

        Short descriptor of where the bug can be found.

        :return: The location of this NHBug.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NHBug.

        Short descriptor of where the bug can be found.

        :param location: The location of this NHBug.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this NHBug.

        Name of the bug.

        :return: The name of this NHBug.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NHBug.

        Name of the bug.

        :param name: The name of this NHBug.
        :type name: str
        """

        self._name = name

    @property
    def north(self):
        """Gets the north of this NHBug.


        :return: The north of this NHBug.
        :rtype: NHBugNorth
        """
        return self._north

    @north.setter
    def north(self, north):
        """Sets the north of this NHBug.


        :param north: The north of this NHBug.
        :type north: NHBugNorth
        """

        self._north = north

    @property
    def number(self):
        """Gets the number of this NHBug.

        In-game bug number, marking position in the Critterpedia.

        :return: The number of this NHBug.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NHBug.

        In-game bug number, marking position in the Critterpedia.

        :param number: The number of this NHBug.
        :type number: int
        """

        self._number = number

    @property
    def rarity(self):
        """Gets the rarity of this NHBug.

        How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.

        :return: The rarity of this NHBug.
        :rtype: str
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity):
        """Sets the rarity of this NHBug.

        How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.

        :param rarity: The rarity of this NHBug.
        :type rarity: str
        """

        self._rarity = rarity

    @property
    def render_url(self):
        """Gets the render_url of this NHBug.

        Render of the bug.

        :return: The render_url of this NHBug.
        :rtype: str
        """
        return self._render_url

    @render_url.setter
    def render_url(self, render_url):
        """Sets the render_url of this NHBug.

        Render of the bug.

        :param render_url: The render_url of this NHBug.
        :type render_url: str
        """

        self._render_url = render_url

    @property
    def sell_flick(self):
        """Gets the sell_flick of this NHBug.

        The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.

        :return: The sell_flick of this NHBug.
        :rtype: int
        """
        return self._sell_flick

    @sell_flick.setter
    def sell_flick(self, sell_flick):
        """Sets the sell_flick of this NHBug.

        The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.

        :param sell_flick: The sell_flick of this NHBug.
        :type sell_flick: int
        """

        self._sell_flick = sell_flick

    @property
    def sell_nook(self):
        """Gets the sell_nook of this NHBug.

        The number of Bells the bug can be sold to Nook's store for.

        :return: The sell_nook of this NHBug.
        :rtype: int
        """
        return self._sell_nook

    @sell_nook.setter
    def sell_nook(self, sell_nook):
        """Sets the sell_nook of this NHBug.

        The number of Bells the bug can be sold to Nook's store for.

        :param sell_nook: The sell_nook of this NHBug.
        :type sell_nook: int
        """

        self._sell_nook = sell_nook

    @property
    def south(self):
        """Gets the south of this NHBug.


        :return: The south of this NHBug.
        :rtype: NHBugSouth
        """
        return self._south

    @south.setter
    def south(self, south):
        """Sets the south of this NHBug.


        :param south: The south of this NHBug.
        :type south: NHBugSouth
        """

        self._south = south

    @property
    def tank_length(self):
        """Gets the tank_length of this NHBug.

        The length of the tank when the bug is placed as a furniture item.

        :return: The tank_length of this NHBug.
        :rtype: float
        """
        return self._tank_length

    @tank_length.setter
    def tank_length(self, tank_length):
        """Sets the tank_length of this NHBug.

        The length of the tank when the bug is placed as a furniture item.

        :param tank_length: The tank_length of this NHBug.
        :type tank_length: float
        """

        self._tank_length = tank_length

    @property
    def tank_width(self):
        """Gets the tank_width of this NHBug.

        The width of the tank when the bug is placed as a furniture item.

        :return: The tank_width of this NHBug.
        :rtype: float
        """
        return self._tank_width

    @tank_width.setter
    def tank_width(self, tank_width):
        """Sets the tank_width of this NHBug.

        The width of the tank when the bug is placed as a furniture item.

        :param tank_width: The tank_width of this NHBug.
        :type tank_width: float
        """

        self._tank_width = tank_width

    @property
    def total_catch(self):
        """Gets the total_catch of this NHBug.

        The total number of bug the player has to have caught before this bug will start spawning.

        :return: The total_catch of this NHBug.
        :rtype: int
        """
        return self._total_catch

    @total_catch.setter
    def total_catch(self, total_catch):
        """Sets the total_catch of this NHBug.

        The total number of bug the player has to have caught before this bug will start spawning.

        :param total_catch: The total_catch of this NHBug.
        :type total_catch: int
        """

        self._total_catch = total_catch

    @property
    def url(self):
        """Gets the url of this NHBug.

        Link to the respective Nookipedia article.

        :return: The url of this NHBug.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NHBug.

        Link to the respective Nookipedia article.

        :param url: The url of this NHBug.
        :type url: str
        """

        self._url = url
