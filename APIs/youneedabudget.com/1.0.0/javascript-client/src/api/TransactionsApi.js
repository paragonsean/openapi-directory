/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HybridTransactionsResponse from '../model/HybridTransactionsResponse';
import PatchTransactionsWrapper from '../model/PatchTransactionsWrapper';
import PostTransactionsWrapper from '../model/PostTransactionsWrapper';
import PutTransactionWrapper from '../model/PutTransactionWrapper';
import SaveTransactionsResponse from '../model/SaveTransactionsResponse';
import TransactionResponse from '../model/TransactionResponse';
import TransactionsImportResponse from '../model/TransactionsImportResponse';
import TransactionsResponse from '../model/TransactionsResponse';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.0.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:api/TransactionsApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a single transaction or multiple transactions
     * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {module:model/PostTransactionsWrapper} postTransactionsWrapper The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
     * @param {module:api/TransactionsApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveTransactionsResponse}
     */
    createTransaction(budgetId, postTransactionsWrapper, callback) {
      let postBody = postTransactionsWrapper;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling createTransaction");
      }
      // verify the required parameter 'postTransactionsWrapper' is set
      if (postTransactionsWrapper === undefined || postTransactionsWrapper === null) {
        throw new Error("Missing the required parameter 'postTransactionsWrapper' when calling createTransaction");
      }

      let pathParams = {
        'budget_id': budgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaveTransactionsResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransaction operation.
     * @callback module:api/TransactionsApi~deleteTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing transaction
     * Deletes a transaction
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {String} transactionId The id of the transaction
     * @param {module:api/TransactionsApi~deleteTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResponse}
     */
    deleteTransaction(budgetId, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling deleteTransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling deleteTransaction");
      }

      let pathParams = {
        'budget_id': budgetId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions/{transaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionById operation.
     * @callback module:api/TransactionsApi~getTransactionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single transaction
     * Returns a single transaction
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {String} transactionId The id of the transaction
     * @param {module:api/TransactionsApi~getTransactionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResponse}
     */
    getTransactionById(budgetId, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling getTransactionById");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionById");
      }

      let pathParams = {
        'budget_id': budgetId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/TransactionsApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions
     * Returns budget transactions
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {Object} opts Optional parameters
     * @param {Date} [sinceDate] If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {module:model/String} [type] If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {Number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {module:api/TransactionsApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsResponse}
     */
    getTransactions(budgetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling getTransactions");
      }

      let pathParams = {
        'budget_id': budgetId
      };
      let queryParams = {
        'since_date': opts['sinceDate'],
        'type': opts['type'],
        'last_knowledge_of_server': opts['lastKnowledgeOfServer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionsResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsByAccount operation.
     * @callback module:api/TransactionsApi~getTransactionsByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List account transactions
     * Returns all transactions for a specified account
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {String} accountId The id of the account
     * @param {Object} opts Optional parameters
     * @param {Date} [sinceDate] If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {module:model/String} [type] If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {Number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {module:api/TransactionsApi~getTransactionsByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsResponse}
     */
    getTransactionsByAccount(budgetId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling getTransactionsByAccount");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactionsByAccount");
      }

      let pathParams = {
        'budget_id': budgetId,
        'account_id': accountId
      };
      let queryParams = {
        'since_date': opts['sinceDate'],
        'type': opts['type'],
        'last_knowledge_of_server': opts['lastKnowledgeOfServer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionsResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/accounts/{account_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsByCategory operation.
     * @callback module:api/TransactionsApi~getTransactionsByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HybridTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List category transactions
     * Returns all transactions for a specified category
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {String} categoryId The id of the category
     * @param {Object} opts Optional parameters
     * @param {Date} [sinceDate] If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {module:model/String} [type] If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {Number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {module:api/TransactionsApi~getTransactionsByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HybridTransactionsResponse}
     */
    getTransactionsByCategory(budgetId, categoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling getTransactionsByCategory");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getTransactionsByCategory");
      }

      let pathParams = {
        'budget_id': budgetId,
        'category_id': categoryId
      };
      let queryParams = {
        'since_date': opts['sinceDate'],
        'type': opts['type'],
        'last_knowledge_of_server': opts['lastKnowledgeOfServer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HybridTransactionsResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/categories/{category_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsByPayee operation.
     * @callback module:api/TransactionsApi~getTransactionsByPayeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HybridTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List payee transactions
     * Returns all transactions for a specified payee
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {String} payeeId The id of the payee
     * @param {Object} opts Optional parameters
     * @param {Date} [sinceDate] If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
     * @param {module:model/String} [type] If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
     * @param {Number} [lastKnowledgeOfServer] The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
     * @param {module:api/TransactionsApi~getTransactionsByPayeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HybridTransactionsResponse}
     */
    getTransactionsByPayee(budgetId, payeeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling getTransactionsByPayee");
      }
      // verify the required parameter 'payeeId' is set
      if (payeeId === undefined || payeeId === null) {
        throw new Error("Missing the required parameter 'payeeId' when calling getTransactionsByPayee");
      }

      let pathParams = {
        'budget_id': budgetId,
        'payee_id': payeeId
      };
      let queryParams = {
        'since_date': opts['sinceDate'],
        'type': opts['type'],
        'last_knowledge_of_server': opts['lastKnowledgeOfServer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HybridTransactionsResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/payees/{payee_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importTransactions operation.
     * @callback module:api/TransactionsApi~importTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import transactions
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {module:api/TransactionsApi~importTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsImportResponse}
     */
    importTransactions(budgetId, callback) {
      let postBody = null;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling importTransactions");
      }

      let pathParams = {
        'budget_id': budgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionsImportResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransaction operation.
     * @callback module:api/TransactionsApi~updateTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing transaction
     * Updates a single transaction
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {String} transactionId The id of the transaction
     * @param {module:model/PutTransactionWrapper} putTransactionWrapper The transaction to update
     * @param {module:api/TransactionsApi~updateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResponse}
     */
    updateTransaction(budgetId, transactionId, putTransactionWrapper, callback) {
      let postBody = putTransactionWrapper;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling updateTransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling updateTransaction");
      }
      // verify the required parameter 'putTransactionWrapper' is set
      if (putTransactionWrapper === undefined || putTransactionWrapper === null) {
        throw new Error("Missing the required parameter 'putTransactionWrapper' when calling updateTransaction");
      }

      let pathParams = {
        'budget_id': budgetId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions/{transaction_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactions operation.
     * @callback module:api/TransactionsApi~updateTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multiple transactions
     * Updates multiple transactions, by `id` or `import_id`.
     * @param {String} budgetId The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
     * @param {module:model/PatchTransactionsWrapper} patchTransactionsWrapper The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.
     * @param {module:api/TransactionsApi~updateTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveTransactionsResponse}
     */
    updateTransactions(budgetId, patchTransactionsWrapper, callback) {
      let postBody = patchTransactionsWrapper;
      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling updateTransactions");
      }
      // verify the required parameter 'patchTransactionsWrapper' is set
      if (patchTransactionsWrapper === undefined || patchTransactionsWrapper === null) {
        throw new Error("Missing the required parameter 'patchTransactionsWrapper' when calling updateTransactions");
      }

      let pathParams = {
        'budget_id': budgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaveTransactionsResponse;
      return this.apiClient.callApi(
        '/budgets/{budget_id}/transactions', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
