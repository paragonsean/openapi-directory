/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import CategoryGroup from './CategoryGroup';

/**
 * The CategoryGroupWithCategories model module.
 * @module model/CategoryGroupWithCategories
 * @version 1.0.0
 */
class CategoryGroupWithCategories {
    /**
     * Constructs a new <code>CategoryGroupWithCategories</code>.
     * @alias module:model/CategoryGroupWithCategories
     * @implements module:model/CategoryGroup
     * @param deleted {Boolean} Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
     * @param hidden {Boolean} Whether or not the category group is hidden
     * @param id {String} 
     * @param name {String} 
     * @param categories {Array.<module:model/Category>} Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     */
    constructor(deleted, hidden, id, name, categories) { 
        CategoryGroup.initialize(this, deleted, hidden, id, name);
        CategoryGroupWithCategories.initialize(this, deleted, hidden, id, name, categories);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deleted, hidden, id, name, categories) { 
        obj['deleted'] = deleted;
        obj['hidden'] = hidden;
        obj['id'] = id;
        obj['name'] = name;
        obj['categories'] = categories;
    }

    /**
     * Constructs a <code>CategoryGroupWithCategories</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryGroupWithCategories} obj Optional instance to populate.
     * @return {module:model/CategoryGroupWithCategories} The populated <code>CategoryGroupWithCategories</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryGroupWithCategories();
            CategoryGroup.constructFromObject(data, obj);

            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryGroupWithCategories</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryGroupWithCategories</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CategoryGroupWithCategories.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }

        return true;
    }


}

CategoryGroupWithCategories.RequiredProperties = ["deleted", "hidden", "id", "name", "categories"];

/**
 * Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
 * @member {Boolean} deleted
 */
CategoryGroupWithCategories.prototype['deleted'] = undefined;

/**
 * Whether or not the category group is hidden
 * @member {Boolean} hidden
 */
CategoryGroupWithCategories.prototype['hidden'] = undefined;

/**
 * @member {String} id
 */
CategoryGroupWithCategories.prototype['id'] = undefined;

/**
 * @member {String} name
 */
CategoryGroupWithCategories.prototype['name'] = undefined;

/**
 * Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
 * @member {Array.<module:model/Category>} categories
 */
CategoryGroupWithCategories.prototype['categories'] = undefined;


// Implement CategoryGroup interface:
/**
 * Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
 * @member {Boolean} deleted
 */
CategoryGroup.prototype['deleted'] = undefined;
/**
 * Whether or not the category group is hidden
 * @member {Boolean} hidden
 */
CategoryGroup.prototype['hidden'] = undefined;
/**
 * @member {String} id
 */
CategoryGroup.prototype['id'] = undefined;
/**
 * @member {String} name
 */
CategoryGroup.prototype['name'] = undefined;




export default CategoryGroupWithCategories;

