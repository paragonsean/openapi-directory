/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version 1.0.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param activity {Number} Activity amount in milliunits format
     * @param balance {Number} Balance in milliunits format
     * @param budgeted {Number} Budgeted amount in milliunits format
     * @param categoryGroupId {String} 
     * @param deleted {Boolean} Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
     * @param hidden {Boolean} Whether or not the category is hidden
     * @param id {String} 
     * @param name {String} 
     */
    constructor(activity, balance, budgeted, categoryGroupId, deleted, hidden, id, name) { 
        
        Category.initialize(this, activity, balance, budgeted, categoryGroupId, deleted, hidden, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activity, balance, budgeted, categoryGroupId, deleted, hidden, id, name) { 
        obj['activity'] = activity;
        obj['balance'] = balance;
        obj['budgeted'] = budgeted;
        obj['category_group_id'] = categoryGroupId;
        obj['deleted'] = deleted;
        obj['hidden'] = hidden;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('budgeted')) {
                obj['budgeted'] = ApiClient.convertToType(data['budgeted'], 'Number');
            }
            if (data.hasOwnProperty('category_group_id')) {
                obj['category_group_id'] = ApiClient.convertToType(data['category_group_id'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('goal_cadence')) {
                obj['goal_cadence'] = ApiClient.convertToType(data['goal_cadence'], 'Number');
            }
            if (data.hasOwnProperty('goal_cadence_frequency')) {
                obj['goal_cadence_frequency'] = ApiClient.convertToType(data['goal_cadence_frequency'], 'Number');
            }
            if (data.hasOwnProperty('goal_creation_month')) {
                obj['goal_creation_month'] = ApiClient.convertToType(data['goal_creation_month'], 'Date');
            }
            if (data.hasOwnProperty('goal_day')) {
                obj['goal_day'] = ApiClient.convertToType(data['goal_day'], 'Number');
            }
            if (data.hasOwnProperty('goal_months_to_budget')) {
                obj['goal_months_to_budget'] = ApiClient.convertToType(data['goal_months_to_budget'], 'Number');
            }
            if (data.hasOwnProperty('goal_overall_funded')) {
                obj['goal_overall_funded'] = ApiClient.convertToType(data['goal_overall_funded'], 'Number');
            }
            if (data.hasOwnProperty('goal_overall_left')) {
                obj['goal_overall_left'] = ApiClient.convertToType(data['goal_overall_left'], 'Number');
            }
            if (data.hasOwnProperty('goal_percentage_complete')) {
                obj['goal_percentage_complete'] = ApiClient.convertToType(data['goal_percentage_complete'], 'Number');
            }
            if (data.hasOwnProperty('goal_target')) {
                obj['goal_target'] = ApiClient.convertToType(data['goal_target'], 'Number');
            }
            if (data.hasOwnProperty('goal_target_month')) {
                obj['goal_target_month'] = ApiClient.convertToType(data['goal_target_month'], 'Date');
            }
            if (data.hasOwnProperty('goal_type')) {
                obj['goal_type'] = ApiClient.convertToType(data['goal_type'], 'String');
            }
            if (data.hasOwnProperty('goal_under_funded')) {
                obj['goal_under_funded'] = ApiClient.convertToType(data['goal_under_funded'], 'Number');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('original_category_group_id')) {
                obj['original_category_group_id'] = ApiClient.convertToType(data['original_category_group_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category_group_id'] && !(typeof data['category_group_id'] === 'string' || data['category_group_id'] instanceof String)) {
            throw new Error("Expected the field `category_group_id` to be a primitive type in the JSON string but got " + data['category_group_id']);
        }
        // ensure the json data is a string
        if (data['goal_type'] && !(typeof data['goal_type'] === 'string' || data['goal_type'] instanceof String)) {
            throw new Error("Expected the field `goal_type` to be a primitive type in the JSON string but got " + data['goal_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['original_category_group_id'] && !(typeof data['original_category_group_id'] === 'string' || data['original_category_group_id'] instanceof String)) {
            throw new Error("Expected the field `original_category_group_id` to be a primitive type in the JSON string but got " + data['original_category_group_id']);
        }

        return true;
    }


}

Category.RequiredProperties = ["activity", "balance", "budgeted", "category_group_id", "deleted", "hidden", "id", "name"];

/**
 * Activity amount in milliunits format
 * @member {Number} activity
 */
Category.prototype['activity'] = undefined;

/**
 * Balance in milliunits format
 * @member {Number} balance
 */
Category.prototype['balance'] = undefined;

/**
 * Budgeted amount in milliunits format
 * @member {Number} budgeted
 */
Category.prototype['budgeted'] = undefined;

/**
 * @member {String} category_group_id
 */
Category.prototype['category_group_id'] = undefined;

/**
 * Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
 * @member {Boolean} deleted
 */
Category.prototype['deleted'] = undefined;

/**
 * The goal cadence
 * @member {Number} goal_cadence
 */
Category.prototype['goal_cadence'] = undefined;

/**
 * The goal cadence frequency
 * @member {Number} goal_cadence_frequency
 */
Category.prototype['goal_cadence_frequency'] = undefined;

/**
 * The month a goal was created
 * @member {Date} goal_creation_month
 */
Category.prototype['goal_creation_month'] = undefined;

/**
 * The day of the goal
 * @member {Number} goal_day
 */
Category.prototype['goal_day'] = undefined;

/**
 * The number of months, including the current month, left in the current goal period.
 * @member {Number} goal_months_to_budget
 */
Category.prototype['goal_months_to_budget'] = undefined;

/**
 * The total amount funded towards the goal within the current goal period.
 * @member {Number} goal_overall_funded
 */
Category.prototype['goal_overall_funded'] = undefined;

/**
 * The amount of funding still needed to complete the goal within the current goal period.
 * @member {Number} goal_overall_left
 */
Category.prototype['goal_overall_left'] = undefined;

/**
 * The percentage completion of the goal
 * @member {Number} goal_percentage_complete
 */
Category.prototype['goal_percentage_complete'] = undefined;

/**
 * The goal target amount in milliunits
 * @member {Number} goal_target
 */
Category.prototype['goal_target'] = undefined;

/**
 * The original target month for the goal to be completed.  Only some goal types specify this date.
 * @member {Date} goal_target_month
 */
Category.prototype['goal_target_month'] = undefined;

/**
 * The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
 * @member {module:model/Category.GoalTypeEnum} goal_type
 */
Category.prototype['goal_type'] = undefined;

/**
 * The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period.  This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
 * @member {Number} goal_under_funded
 */
Category.prototype['goal_under_funded'] = undefined;

/**
 * Whether or not the category is hidden
 * @member {Boolean} hidden
 */
Category.prototype['hidden'] = undefined;

/**
 * @member {String} id
 */
Category.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Category.prototype['name'] = undefined;

/**
 * @member {String} note
 */
Category.prototype['note'] = undefined;

/**
 * DEPRECATED: No longer used.  Value will always be null.
 * @member {String} original_category_group_id
 */
Category.prototype['original_category_group_id'] = undefined;





/**
 * Allowed values for the <code>goal_type</code> property.
 * @enum {String}
 * @readonly
 */
Category['GoalTypeEnum'] = {

    /**
     * value: "TB"
     * @const
     */
    "TB": "TB",

    /**
     * value: "TBD"
     * @const
     */
    "TBD": "TBD",

    /**
     * value: "MF"
     * @const
     */
    "MF": "MF",

    /**
     * value: "NEED"
     * @const
     */
    "NEED": "NEED",

    /**
     * value: "DEBT"
     * @const
     */
    "DEBT": "DEBT"
};



export default Category;

