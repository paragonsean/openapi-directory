/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import MonthSummary from './MonthSummary';

/**
 * The MonthDetail model module.
 * @module model/MonthDetail
 * @version 1.0.0
 */
class MonthDetail {
    /**
     * Constructs a new <code>MonthDetail</code>.
     * @alias module:model/MonthDetail
     * @implements module:model/MonthSummary
     * @param activity {Number} The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
     * @param budgeted {Number} The total amount budgeted in the month
     * @param deleted {Boolean} Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
     * @param income {Number} The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
     * @param month {Date} 
     * @param toBeBudgeted {Number} The available amount for 'Ready to Assign'
     * @param categories {Array.<module:model/Category>} The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
     */
    constructor(activity, budgeted, deleted, income, month, toBeBudgeted, categories) { 
        MonthSummary.initialize(this, activity, budgeted, deleted, income, month, toBeBudgeted);
        MonthDetail.initialize(this, activity, budgeted, deleted, income, month, toBeBudgeted, categories);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activity, budgeted, deleted, income, month, toBeBudgeted, categories) { 
        obj['activity'] = activity;
        obj['budgeted'] = budgeted;
        obj['deleted'] = deleted;
        obj['income'] = income;
        obj['month'] = month;
        obj['to_be_budgeted'] = toBeBudgeted;
        obj['categories'] = categories;
    }

    /**
     * Constructs a <code>MonthDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonthDetail} obj Optional instance to populate.
     * @return {module:model/MonthDetail} The populated <code>MonthDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonthDetail();
            MonthSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'Number');
            }
            if (data.hasOwnProperty('age_of_money')) {
                obj['age_of_money'] = ApiClient.convertToType(data['age_of_money'], 'Number');
            }
            if (data.hasOwnProperty('budgeted')) {
                obj['budgeted'] = ApiClient.convertToType(data['budgeted'], 'Number');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('income')) {
                obj['income'] = ApiClient.convertToType(data['income'], 'Number');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Date');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('to_be_budgeted')) {
                obj['to_be_budgeted'] = ApiClient.convertToType(data['to_be_budgeted'], 'Number');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonthDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonthDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MonthDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }

        return true;
    }


}

MonthDetail.RequiredProperties = ["activity", "budgeted", "deleted", "income", "month", "to_be_budgeted", "categories"];

/**
 * The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
 * @member {Number} activity
 */
MonthDetail.prototype['activity'] = undefined;

/**
 * The Age of Money as of the month
 * @member {Number} age_of_money
 */
MonthDetail.prototype['age_of_money'] = undefined;

/**
 * The total amount budgeted in the month
 * @member {Number} budgeted
 */
MonthDetail.prototype['budgeted'] = undefined;

/**
 * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
 * @member {Boolean} deleted
 */
MonthDetail.prototype['deleted'] = undefined;

/**
 * The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
 * @member {Number} income
 */
MonthDetail.prototype['income'] = undefined;

/**
 * @member {Date} month
 */
MonthDetail.prototype['month'] = undefined;

/**
 * @member {String} note
 */
MonthDetail.prototype['note'] = undefined;

/**
 * The available amount for 'Ready to Assign'
 * @member {Number} to_be_budgeted
 */
MonthDetail.prototype['to_be_budgeted'] = undefined;

/**
 * The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
 * @member {Array.<module:model/Category>} categories
 */
MonthDetail.prototype['categories'] = undefined;


// Implement MonthSummary interface:
/**
 * The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
 * @member {Number} activity
 */
MonthSummary.prototype['activity'] = undefined;
/**
 * The Age of Money as of the month
 * @member {Number} age_of_money
 */
MonthSummary.prototype['age_of_money'] = undefined;
/**
 * The total amount budgeted in the month
 * @member {Number} budgeted
 */
MonthSummary.prototype['budgeted'] = undefined;
/**
 * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
 * @member {Boolean} deleted
 */
MonthSummary.prototype['deleted'] = undefined;
/**
 * The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
 * @member {Number} income
 */
MonthSummary.prototype['income'] = undefined;
/**
 * @member {Date} month
 */
MonthSummary.prototype['month'] = undefined;
/**
 * @member {String} note
 */
MonthSummary.prototype['note'] = undefined;
/**
 * The available amount for 'Ready to Assign'
 * @member {Number} to_be_budgeted
 */
MonthSummary.prototype['to_be_budgeted'] = undefined;




export default MonthDetail;

