/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import BudgetSummary from './BudgetSummary';
import Category from './Category';
import CategoryGroup from './CategoryGroup';
import CurrencyFormat from './CurrencyFormat';
import DateFormat from './DateFormat';
import MonthDetail from './MonthDetail';
import Payee from './Payee';
import PayeeLocation from './PayeeLocation';
import ScheduledSubTransaction from './ScheduledSubTransaction';
import ScheduledTransactionSummary from './ScheduledTransactionSummary';
import SubTransaction from './SubTransaction';
import TransactionSummary from './TransactionSummary';

/**
 * The BudgetDetail model module.
 * @module model/BudgetDetail
 * @version 1.0.0
 */
class BudgetDetail {
    /**
     * Constructs a new <code>BudgetDetail</code>.
     * @alias module:model/BudgetDetail
     * @implements module:model/BudgetSummary
     * @param id {String} 
     * @param name {String} 
     */
    constructor(id, name) { 
        BudgetSummary.initialize(this, id, name);
        BudgetDetail.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>BudgetDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BudgetDetail} obj Optional instance to populate.
     * @return {module:model/BudgetDetail} The populated <code>BudgetDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BudgetDetail();
            BudgetSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [Account]);
            }
            if (data.hasOwnProperty('currency_format')) {
                obj['currency_format'] = CurrencyFormat.constructFromObject(data['currency_format']);
            }
            if (data.hasOwnProperty('date_format')) {
                obj['date_format'] = DateFormat.constructFromObject(data['date_format']);
            }
            if (data.hasOwnProperty('first_month')) {
                obj['first_month'] = ApiClient.convertToType(data['first_month'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_modified_on')) {
                obj['last_modified_on'] = ApiClient.convertToType(data['last_modified_on'], 'Date');
            }
            if (data.hasOwnProperty('last_month')) {
                obj['last_month'] = ApiClient.convertToType(data['last_month'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('category_groups')) {
                obj['category_groups'] = ApiClient.convertToType(data['category_groups'], [CategoryGroup]);
            }
            if (data.hasOwnProperty('months')) {
                obj['months'] = ApiClient.convertToType(data['months'], [MonthDetail]);
            }
            if (data.hasOwnProperty('payee_locations')) {
                obj['payee_locations'] = ApiClient.convertToType(data['payee_locations'], [PayeeLocation]);
            }
            if (data.hasOwnProperty('payees')) {
                obj['payees'] = ApiClient.convertToType(data['payees'], [Payee]);
            }
            if (data.hasOwnProperty('scheduled_subtransactions')) {
                obj['scheduled_subtransactions'] = ApiClient.convertToType(data['scheduled_subtransactions'], [ScheduledSubTransaction]);
            }
            if (data.hasOwnProperty('scheduled_transactions')) {
                obj['scheduled_transactions'] = ApiClient.convertToType(data['scheduled_transactions'], [ScheduledTransactionSummary]);
            }
            if (data.hasOwnProperty('subtransactions')) {
                obj['subtransactions'] = ApiClient.convertToType(data['subtransactions'], [SubTransaction]);
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [TransactionSummary]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BudgetDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BudgetDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BudgetDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                Account.validateJSON(item);
            };
        }
        // validate the optional field `currency_format`
        if (data['currency_format']) { // data not null
          CurrencyFormat.validateJSON(data['currency_format']);
        }
        // validate the optional field `date_format`
        if (data['date_format']) { // data not null
          DateFormat.validateJSON(data['date_format']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        if (data['category_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category_groups'])) {
                throw new Error("Expected the field `category_groups` to be an array in the JSON data but got " + data['category_groups']);
            }
            // validate the optional field `category_groups` (array)
            for (const item of data['category_groups']) {
                CategoryGroup.validateJSON(item);
            };
        }
        if (data['months']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['months'])) {
                throw new Error("Expected the field `months` to be an array in the JSON data but got " + data['months']);
            }
            // validate the optional field `months` (array)
            for (const item of data['months']) {
                MonthDetail.validateJSON(item);
            };
        }
        if (data['payee_locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payee_locations'])) {
                throw new Error("Expected the field `payee_locations` to be an array in the JSON data but got " + data['payee_locations']);
            }
            // validate the optional field `payee_locations` (array)
            for (const item of data['payee_locations']) {
                PayeeLocation.validateJSON(item);
            };
        }
        if (data['payees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payees'])) {
                throw new Error("Expected the field `payees` to be an array in the JSON data but got " + data['payees']);
            }
            // validate the optional field `payees` (array)
            for (const item of data['payees']) {
                Payee.validateJSON(item);
            };
        }
        if (data['scheduled_subtransactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scheduled_subtransactions'])) {
                throw new Error("Expected the field `scheduled_subtransactions` to be an array in the JSON data but got " + data['scheduled_subtransactions']);
            }
            // validate the optional field `scheduled_subtransactions` (array)
            for (const item of data['scheduled_subtransactions']) {
                ScheduledSubTransaction.validateJSON(item);
            };
        }
        if (data['scheduled_transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scheduled_transactions'])) {
                throw new Error("Expected the field `scheduled_transactions` to be an array in the JSON data but got " + data['scheduled_transactions']);
            }
            // validate the optional field `scheduled_transactions` (array)
            for (const item of data['scheduled_transactions']) {
                ScheduledTransactionSummary.validateJSON(item);
            };
        }
        if (data['subtransactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subtransactions'])) {
                throw new Error("Expected the field `subtransactions` to be an array in the JSON data but got " + data['subtransactions']);
            }
            // validate the optional field `subtransactions` (array)
            for (const item of data['subtransactions']) {
                SubTransaction.validateJSON(item);
            };
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                TransactionSummary.validateJSON(item);
            };
        }

        return true;
    }


}

BudgetDetail.RequiredProperties = ["id", "name"];

/**
 * @member {Array.<module:model/Account>} accounts
 */
BudgetDetail.prototype['accounts'] = undefined;

/**
 * @member {module:model/CurrencyFormat} currency_format
 */
BudgetDetail.prototype['currency_format'] = undefined;

/**
 * @member {module:model/DateFormat} date_format
 */
BudgetDetail.prototype['date_format'] = undefined;

/**
 * The earliest budget month
 * @member {Date} first_month
 */
BudgetDetail.prototype['first_month'] = undefined;

/**
 * @member {String} id
 */
BudgetDetail.prototype['id'] = undefined;

/**
 * The last time any changes were made to the budget from either a web or mobile client
 * @member {Date} last_modified_on
 */
BudgetDetail.prototype['last_modified_on'] = undefined;

/**
 * The latest budget month
 * @member {Date} last_month
 */
BudgetDetail.prototype['last_month'] = undefined;

/**
 * @member {String} name
 */
BudgetDetail.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Category>} categories
 */
BudgetDetail.prototype['categories'] = undefined;

/**
 * @member {Array.<module:model/CategoryGroup>} category_groups
 */
BudgetDetail.prototype['category_groups'] = undefined;

/**
 * @member {Array.<module:model/MonthDetail>} months
 */
BudgetDetail.prototype['months'] = undefined;

/**
 * @member {Array.<module:model/PayeeLocation>} payee_locations
 */
BudgetDetail.prototype['payee_locations'] = undefined;

/**
 * @member {Array.<module:model/Payee>} payees
 */
BudgetDetail.prototype['payees'] = undefined;

/**
 * @member {Array.<module:model/ScheduledSubTransaction>} scheduled_subtransactions
 */
BudgetDetail.prototype['scheduled_subtransactions'] = undefined;

/**
 * @member {Array.<module:model/ScheduledTransactionSummary>} scheduled_transactions
 */
BudgetDetail.prototype['scheduled_transactions'] = undefined;

/**
 * @member {Array.<module:model/SubTransaction>} subtransactions
 */
BudgetDetail.prototype['subtransactions'] = undefined;

/**
 * @member {Array.<module:model/TransactionSummary>} transactions
 */
BudgetDetail.prototype['transactions'] = undefined;


// Implement BudgetSummary interface:
/**
 * The budget accounts (only included if `include_accounts=true` specified as query parameter)
 * @member {Array.<module:model/Account>} accounts
 */
BudgetSummary.prototype['accounts'] = undefined;
/**
 * @member {module:model/CurrencyFormat} currency_format
 */
BudgetSummary.prototype['currency_format'] = undefined;
/**
 * @member {module:model/DateFormat} date_format
 */
BudgetSummary.prototype['date_format'] = undefined;
/**
 * The earliest budget month
 * @member {Date} first_month
 */
BudgetSummary.prototype['first_month'] = undefined;
/**
 * @member {String} id
 */
BudgetSummary.prototype['id'] = undefined;
/**
 * The last time any changes were made to the budget from either a web or mobile client
 * @member {Date} last_modified_on
 */
BudgetSummary.prototype['last_modified_on'] = undefined;
/**
 * The latest budget month
 * @member {Date} last_month
 */
BudgetSummary.prototype['last_month'] = undefined;
/**
 * @member {String} name
 */
BudgetSummary.prototype['name'] = undefined;




export default BudgetDetail;

