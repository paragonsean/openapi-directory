/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SaveSubTransaction from './SaveSubTransaction';
import SaveTransactionWithOptionalFields from './SaveTransactionWithOptionalFields';

/**
 * The SaveTransactionWithId model module.
 * @module model/SaveTransactionWithId
 * @version 1.0.0
 */
class SaveTransactionWithId {
    /**
     * Constructs a new <code>SaveTransactionWithId</code>.
     * @alias module:model/SaveTransactionWithId
     * @implements module:model/SaveTransactionWithOptionalFields
     */
    constructor() { 
        SaveTransactionWithOptionalFields.initialize(this);
        SaveTransactionWithId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SaveTransactionWithId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SaveTransactionWithId} obj Optional instance to populate.
     * @return {module:model/SaveTransactionWithId} The populated <code>SaveTransactionWithId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SaveTransactionWithId();
            SaveTransactionWithOptionalFields.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('cleared')) {
                obj['cleared'] = ApiClient.convertToType(data['cleared'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('flag_color')) {
                obj['flag_color'] = ApiClient.convertToType(data['flag_color'], 'String');
            }
            if (data.hasOwnProperty('import_id')) {
                obj['import_id'] = ApiClient.convertToType(data['import_id'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('payee_id')) {
                obj['payee_id'] = ApiClient.convertToType(data['payee_id'], 'String');
            }
            if (data.hasOwnProperty('payee_name')) {
                obj['payee_name'] = ApiClient.convertToType(data['payee_name'], 'String');
            }
            if (data.hasOwnProperty('subtransactions')) {
                obj['subtransactions'] = ApiClient.convertToType(data['subtransactions'], [SaveSubTransaction]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SaveTransactionWithId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SaveTransactionWithId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        // ensure the json data is a string
        if (data['cleared'] && !(typeof data['cleared'] === 'string' || data['cleared'] instanceof String)) {
            throw new Error("Expected the field `cleared` to be a primitive type in the JSON string but got " + data['cleared']);
        }
        // ensure the json data is a string
        if (data['flag_color'] && !(typeof data['flag_color'] === 'string' || data['flag_color'] instanceof String)) {
            throw new Error("Expected the field `flag_color` to be a primitive type in the JSON string but got " + data['flag_color']);
        }
        // ensure the json data is a string
        if (data['import_id'] && !(typeof data['import_id'] === 'string' || data['import_id'] instanceof String)) {
            throw new Error("Expected the field `import_id` to be a primitive type in the JSON string but got " + data['import_id']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['payee_id'] && !(typeof data['payee_id'] === 'string' || data['payee_id'] instanceof String)) {
            throw new Error("Expected the field `payee_id` to be a primitive type in the JSON string but got " + data['payee_id']);
        }
        // ensure the json data is a string
        if (data['payee_name'] && !(typeof data['payee_name'] === 'string' || data['payee_name'] instanceof String)) {
            throw new Error("Expected the field `payee_name` to be a primitive type in the JSON string but got " + data['payee_name']);
        }
        if (data['subtransactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subtransactions'])) {
                throw new Error("Expected the field `subtransactions` to be an array in the JSON data but got " + data['subtransactions']);
            }
            // validate the optional field `subtransactions` (array)
            for (const item of data['subtransactions']) {
                SaveSubTransaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * @member {String} account_id
 */
SaveTransactionWithId.prototype['account_id'] = undefined;

/**
 * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
 * @member {Number} amount
 */
SaveTransactionWithId.prototype['amount'] = undefined;

/**
 * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
 * @member {Boolean} approved
 */
SaveTransactionWithId.prototype['approved'] = undefined;

/**
 * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
 * @member {String} category_id
 */
SaveTransactionWithId.prototype['category_id'] = undefined;

/**
 * The cleared status of the transaction
 * @member {module:model/SaveTransactionWithId.ClearedEnum} cleared
 */
SaveTransactionWithId.prototype['cleared'] = undefined;

/**
 * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
 * @member {Date} date
 */
SaveTransactionWithId.prototype['date'] = undefined;

/**
 * The transaction flag
 * @member {module:model/SaveTransactionWithId.FlagColorEnum} flag_color
 */
SaveTransactionWithId.prototype['flag_color'] = undefined;

/**
 * If specified, the new transaction will be assigned this `import_id` and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
 * @member {String} import_id
 */
SaveTransactionWithId.prototype['import_id'] = undefined;

/**
 * @member {String} memo
 */
SaveTransactionWithId.prototype['memo'] = undefined;

/**
 * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
 * @member {String} payee_id
 */
SaveTransactionWithId.prototype['payee_id'] = undefined;

/**
 * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
 * @member {String} payee_name
 */
SaveTransactionWithId.prototype['payee_name'] = undefined;

/**
 * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
 * @member {Array.<module:model/SaveSubTransaction>} subtransactions
 */
SaveTransactionWithId.prototype['subtransactions'] = undefined;

/**
 * @member {String} id
 */
SaveTransactionWithId.prototype['id'] = undefined;


// Implement SaveTransactionWithOptionalFields interface:
/**
 * @member {String} account_id
 */
SaveTransactionWithOptionalFields.prototype['account_id'] = undefined;
/**
 * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
 * @member {Number} amount
 */
SaveTransactionWithOptionalFields.prototype['amount'] = undefined;
/**
 * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
 * @member {Boolean} approved
 */
SaveTransactionWithOptionalFields.prototype['approved'] = undefined;
/**
 * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
 * @member {String} category_id
 */
SaveTransactionWithOptionalFields.prototype['category_id'] = undefined;
/**
 * The cleared status of the transaction
 * @member {module:model/SaveTransactionWithOptionalFields.ClearedEnum} cleared
 */
SaveTransactionWithOptionalFields.prototype['cleared'] = undefined;
/**
 * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
 * @member {Date} date
 */
SaveTransactionWithOptionalFields.prototype['date'] = undefined;
/**
 * The transaction flag
 * @member {module:model/SaveTransactionWithOptionalFields.FlagColorEnum} flag_color
 */
SaveTransactionWithOptionalFields.prototype['flag_color'] = undefined;
/**
 * If specified, the new transaction will be assigned this `import_id` and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
 * @member {String} import_id
 */
SaveTransactionWithOptionalFields.prototype['import_id'] = undefined;
/**
 * @member {String} memo
 */
SaveTransactionWithOptionalFields.prototype['memo'] = undefined;
/**
 * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
 * @member {String} payee_id
 */
SaveTransactionWithOptionalFields.prototype['payee_id'] = undefined;
/**
 * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
 * @member {String} payee_name
 */
SaveTransactionWithOptionalFields.prototype['payee_name'] = undefined;
/**
 * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
 * @member {Array.<module:model/SaveSubTransaction>} subtransactions
 */
SaveTransactionWithOptionalFields.prototype['subtransactions'] = undefined;



/**
 * Allowed values for the <code>cleared</code> property.
 * @enum {String}
 * @readonly
 */
SaveTransactionWithId['ClearedEnum'] = {

    /**
     * value: "cleared"
     * @const
     */
    "cleared": "cleared",

    /**
     * value: "uncleared"
     * @const
     */
    "uncleared": "uncleared",

    /**
     * value: "reconciled"
     * @const
     */
    "reconciled": "reconciled"
};


/**
 * Allowed values for the <code>flag_color</code> property.
 * @enum {String}
 * @readonly
 */
SaveTransactionWithId['FlagColorEnum'] = {

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "orange"
     * @const
     */
    "orange": "orange",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow",

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue",

    /**
     * value: "purple"
     * @const
     */
    "purple": "purple"
};



export default SaveTransactionWithId;

