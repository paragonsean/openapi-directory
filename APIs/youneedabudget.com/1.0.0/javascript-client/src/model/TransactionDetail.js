/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubTransaction from './SubTransaction';
import TransactionSummary from './TransactionSummary';

/**
 * The TransactionDetail model module.
 * @module model/TransactionDetail
 * @version 1.0.0
 */
class TransactionDetail {
    /**
     * Constructs a new <code>TransactionDetail</code>.
     * @alias module:model/TransactionDetail
     * @implements module:model/TransactionSummary
     * @param accountId {String} 
     * @param amount {Number} The transaction amount in milliunits format
     * @param approved {Boolean} Whether or not the transaction is approved
     * @param cleared {module:model/TransactionDetail.ClearedEnum} The cleared status of the transaction
     * @param date {Date} The transaction date in ISO format (e.g. 2016-12-01)
     * @param deleted {Boolean} Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
     * @param id {String} 
     * @param accountName {String} 
     * @param subtransactions {Array.<module:model/SubTransaction>} If a split transaction, the subtransactions.
     */
    constructor(accountId, amount, approved, cleared, date, deleted, id, accountName, subtransactions) { 
        TransactionSummary.initialize(this, accountId, amount, approved, cleared, date, deleted, id);
        TransactionDetail.initialize(this, accountId, amount, approved, cleared, date, deleted, id, accountName, subtransactions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, approved, cleared, date, deleted, id, accountName, subtransactions) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['approved'] = approved;
        obj['cleared'] = cleared;
        obj['date'] = date;
        obj['deleted'] = deleted;
        obj['id'] = id;
        obj['account_name'] = accountName;
        obj['subtransactions'] = subtransactions;
    }

    /**
     * Constructs a <code>TransactionDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionDetail} obj Optional instance to populate.
     * @return {module:model/TransactionDetail} The populated <code>TransactionDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionDetail();
            TransactionSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('cleared')) {
                obj['cleared'] = ApiClient.convertToType(data['cleared'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('debt_transaction_type')) {
                obj['debt_transaction_type'] = ApiClient.convertToType(data['debt_transaction_type'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('flag_color')) {
                obj['flag_color'] = ApiClient.convertToType(data['flag_color'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('import_id')) {
                obj['import_id'] = ApiClient.convertToType(data['import_id'], 'String');
            }
            if (data.hasOwnProperty('import_payee_name')) {
                obj['import_payee_name'] = ApiClient.convertToType(data['import_payee_name'], 'String');
            }
            if (data.hasOwnProperty('import_payee_name_original')) {
                obj['import_payee_name_original'] = ApiClient.convertToType(data['import_payee_name_original'], 'String');
            }
            if (data.hasOwnProperty('matched_transaction_id')) {
                obj['matched_transaction_id'] = ApiClient.convertToType(data['matched_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('payee_id')) {
                obj['payee_id'] = ApiClient.convertToType(data['payee_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_account_id')) {
                obj['transfer_account_id'] = ApiClient.convertToType(data['transfer_account_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_transaction_id')) {
                obj['transfer_transaction_id'] = ApiClient.convertToType(data['transfer_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('account_name')) {
                obj['account_name'] = ApiClient.convertToType(data['account_name'], 'String');
            }
            if (data.hasOwnProperty('category_name')) {
                obj['category_name'] = ApiClient.convertToType(data['category_name'], 'String');
            }
            if (data.hasOwnProperty('payee_name')) {
                obj['payee_name'] = ApiClient.convertToType(data['payee_name'], 'String');
            }
            if (data.hasOwnProperty('subtransactions')) {
                obj['subtransactions'] = ApiClient.convertToType(data['subtransactions'], [SubTransaction]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        // ensure the json data is a string
        if (data['cleared'] && !(typeof data['cleared'] === 'string' || data['cleared'] instanceof String)) {
            throw new Error("Expected the field `cleared` to be a primitive type in the JSON string but got " + data['cleared']);
        }
        // ensure the json data is a string
        if (data['debt_transaction_type'] && !(typeof data['debt_transaction_type'] === 'string' || data['debt_transaction_type'] instanceof String)) {
            throw new Error("Expected the field `debt_transaction_type` to be a primitive type in the JSON string but got " + data['debt_transaction_type']);
        }
        // ensure the json data is a string
        if (data['flag_color'] && !(typeof data['flag_color'] === 'string' || data['flag_color'] instanceof String)) {
            throw new Error("Expected the field `flag_color` to be a primitive type in the JSON string but got " + data['flag_color']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['import_id'] && !(typeof data['import_id'] === 'string' || data['import_id'] instanceof String)) {
            throw new Error("Expected the field `import_id` to be a primitive type in the JSON string but got " + data['import_id']);
        }
        // ensure the json data is a string
        if (data['import_payee_name'] && !(typeof data['import_payee_name'] === 'string' || data['import_payee_name'] instanceof String)) {
            throw new Error("Expected the field `import_payee_name` to be a primitive type in the JSON string but got " + data['import_payee_name']);
        }
        // ensure the json data is a string
        if (data['import_payee_name_original'] && !(typeof data['import_payee_name_original'] === 'string' || data['import_payee_name_original'] instanceof String)) {
            throw new Error("Expected the field `import_payee_name_original` to be a primitive type in the JSON string but got " + data['import_payee_name_original']);
        }
        // ensure the json data is a string
        if (data['matched_transaction_id'] && !(typeof data['matched_transaction_id'] === 'string' || data['matched_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `matched_transaction_id` to be a primitive type in the JSON string but got " + data['matched_transaction_id']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['payee_id'] && !(typeof data['payee_id'] === 'string' || data['payee_id'] instanceof String)) {
            throw new Error("Expected the field `payee_id` to be a primitive type in the JSON string but got " + data['payee_id']);
        }
        // ensure the json data is a string
        if (data['transfer_account_id'] && !(typeof data['transfer_account_id'] === 'string' || data['transfer_account_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_account_id` to be a primitive type in the JSON string but got " + data['transfer_account_id']);
        }
        // ensure the json data is a string
        if (data['transfer_transaction_id'] && !(typeof data['transfer_transaction_id'] === 'string' || data['transfer_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_transaction_id` to be a primitive type in the JSON string but got " + data['transfer_transaction_id']);
        }
        // ensure the json data is a string
        if (data['account_name'] && !(typeof data['account_name'] === 'string' || data['account_name'] instanceof String)) {
            throw new Error("Expected the field `account_name` to be a primitive type in the JSON string but got " + data['account_name']);
        }
        // ensure the json data is a string
        if (data['category_name'] && !(typeof data['category_name'] === 'string' || data['category_name'] instanceof String)) {
            throw new Error("Expected the field `category_name` to be a primitive type in the JSON string but got " + data['category_name']);
        }
        // ensure the json data is a string
        if (data['payee_name'] && !(typeof data['payee_name'] === 'string' || data['payee_name'] instanceof String)) {
            throw new Error("Expected the field `payee_name` to be a primitive type in the JSON string but got " + data['payee_name']);
        }
        if (data['subtransactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subtransactions'])) {
                throw new Error("Expected the field `subtransactions` to be an array in the JSON data but got " + data['subtransactions']);
            }
            // validate the optional field `subtransactions` (array)
            for (const item of data['subtransactions']) {
                SubTransaction.validateJSON(item);
            };
        }

        return true;
    }


}

TransactionDetail.RequiredProperties = ["account_id", "amount", "approved", "cleared", "date", "deleted", "id", "account_name", "subtransactions"];

/**
 * @member {String} account_id
 */
TransactionDetail.prototype['account_id'] = undefined;

/**
 * The transaction amount in milliunits format
 * @member {Number} amount
 */
TransactionDetail.prototype['amount'] = undefined;

/**
 * Whether or not the transaction is approved
 * @member {Boolean} approved
 */
TransactionDetail.prototype['approved'] = undefined;

/**
 * @member {String} category_id
 */
TransactionDetail.prototype['category_id'] = undefined;

/**
 * The cleared status of the transaction
 * @member {module:model/TransactionDetail.ClearedEnum} cleared
 */
TransactionDetail.prototype['cleared'] = undefined;

/**
 * The transaction date in ISO format (e.g. 2016-12-01)
 * @member {Date} date
 */
TransactionDetail.prototype['date'] = undefined;

/**
 * If the transaction is a debt/loan account transaction, the type of transaction
 * @member {module:model/TransactionDetail.DebtTransactionTypeEnum} debt_transaction_type
 */
TransactionDetail.prototype['debt_transaction_type'] = undefined;

/**
 * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
 * @member {Boolean} deleted
 */
TransactionDetail.prototype['deleted'] = undefined;

/**
 * The transaction flag
 * @member {module:model/TransactionDetail.FlagColorEnum} flag_color
 */
TransactionDetail.prototype['flag_color'] = undefined;

/**
 * @member {String} id
 */
TransactionDetail.prototype['id'] = undefined;

/**
 * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
 * @member {String} import_id
 */
TransactionDetail.prototype['import_id'] = undefined;

/**
 * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
 * @member {String} import_payee_name
 */
TransactionDetail.prototype['import_payee_name'] = undefined;

/**
 * If the transaction was imported, the original payee name as it appeared on the statement
 * @member {String} import_payee_name_original
 */
TransactionDetail.prototype['import_payee_name_original'] = undefined;

/**
 * If transaction is matched, the id of the matched transaction
 * @member {String} matched_transaction_id
 */
TransactionDetail.prototype['matched_transaction_id'] = undefined;

/**
 * @member {String} memo
 */
TransactionDetail.prototype['memo'] = undefined;

/**
 * @member {String} payee_id
 */
TransactionDetail.prototype['payee_id'] = undefined;

/**
 * If a transfer transaction, the account to which it transfers
 * @member {String} transfer_account_id
 */
TransactionDetail.prototype['transfer_account_id'] = undefined;

/**
 * If a transfer transaction, the id of transaction on the other side of the transfer
 * @member {String} transfer_transaction_id
 */
TransactionDetail.prototype['transfer_transaction_id'] = undefined;

/**
 * @member {String} account_name
 */
TransactionDetail.prototype['account_name'] = undefined;

/**
 * The name of the category.  If a split transaction, this will be 'Split'.
 * @member {String} category_name
 */
TransactionDetail.prototype['category_name'] = undefined;

/**
 * @member {String} payee_name
 */
TransactionDetail.prototype['payee_name'] = undefined;

/**
 * If a split transaction, the subtransactions.
 * @member {Array.<module:model/SubTransaction>} subtransactions
 */
TransactionDetail.prototype['subtransactions'] = undefined;


// Implement TransactionSummary interface:
/**
 * @member {String} account_id
 */
TransactionSummary.prototype['account_id'] = undefined;
/**
 * The transaction amount in milliunits format
 * @member {Number} amount
 */
TransactionSummary.prototype['amount'] = undefined;
/**
 * Whether or not the transaction is approved
 * @member {Boolean} approved
 */
TransactionSummary.prototype['approved'] = undefined;
/**
 * @member {String} category_id
 */
TransactionSummary.prototype['category_id'] = undefined;
/**
 * The cleared status of the transaction
 * @member {module:model/TransactionSummary.ClearedEnum} cleared
 */
TransactionSummary.prototype['cleared'] = undefined;
/**
 * The transaction date in ISO format (e.g. 2016-12-01)
 * @member {Date} date
 */
TransactionSummary.prototype['date'] = undefined;
/**
 * If the transaction is a debt/loan account transaction, the type of transaction
 * @member {module:model/TransactionSummary.DebtTransactionTypeEnum} debt_transaction_type
 */
TransactionSummary.prototype['debt_transaction_type'] = undefined;
/**
 * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
 * @member {Boolean} deleted
 */
TransactionSummary.prototype['deleted'] = undefined;
/**
 * The transaction flag
 * @member {module:model/TransactionSummary.FlagColorEnum} flag_color
 */
TransactionSummary.prototype['flag_color'] = undefined;
/**
 * @member {String} id
 */
TransactionSummary.prototype['id'] = undefined;
/**
 * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
 * @member {String} import_id
 */
TransactionSummary.prototype['import_id'] = undefined;
/**
 * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
 * @member {String} import_payee_name
 */
TransactionSummary.prototype['import_payee_name'] = undefined;
/**
 * If the transaction was imported, the original payee name as it appeared on the statement
 * @member {String} import_payee_name_original
 */
TransactionSummary.prototype['import_payee_name_original'] = undefined;
/**
 * If transaction is matched, the id of the matched transaction
 * @member {String} matched_transaction_id
 */
TransactionSummary.prototype['matched_transaction_id'] = undefined;
/**
 * @member {String} memo
 */
TransactionSummary.prototype['memo'] = undefined;
/**
 * @member {String} payee_id
 */
TransactionSummary.prototype['payee_id'] = undefined;
/**
 * If a transfer transaction, the account to which it transfers
 * @member {String} transfer_account_id
 */
TransactionSummary.prototype['transfer_account_id'] = undefined;
/**
 * If a transfer transaction, the id of transaction on the other side of the transfer
 * @member {String} transfer_transaction_id
 */
TransactionSummary.prototype['transfer_transaction_id'] = undefined;



/**
 * Allowed values for the <code>cleared</code> property.
 * @enum {String}
 * @readonly
 */
TransactionDetail['ClearedEnum'] = {

    /**
     * value: "cleared"
     * @const
     */
    "cleared": "cleared",

    /**
     * value: "uncleared"
     * @const
     */
    "uncleared": "uncleared",

    /**
     * value: "reconciled"
     * @const
     */
    "reconciled": "reconciled"
};


/**
 * Allowed values for the <code>debt_transaction_type</code> property.
 * @enum {String}
 * @readonly
 */
TransactionDetail['DebtTransactionTypeEnum'] = {

    /**
     * value: "payment"
     * @const
     */
    "payment": "payment",

    /**
     * value: "refund"
     * @const
     */
    "refund": "refund",

    /**
     * value: "fee"
     * @const
     */
    "fee": "fee",

    /**
     * value: "interest"
     * @const
     */
    "interest": "interest",

    /**
     * value: "escrow"
     * @const
     */
    "escrow": "escrow",

    /**
     * value: "balancedAdjustment"
     * @const
     */
    "balancedAdjustment": "balancedAdjustment",

    /**
     * value: "credit"
     * @const
     */
    "credit": "credit",

    /**
     * value: "charge"
     * @const
     */
    "charge": "charge"
};


/**
 * Allowed values for the <code>flag_color</code> property.
 * @enum {String}
 * @readonly
 */
TransactionDetail['FlagColorEnum'] = {

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "orange"
     * @const
     */
    "orange": "orange",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow",

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue",

    /**
     * value: "purple"
     * @const
     */
    "purple": "purple"
};



export default TransactionDetail;

