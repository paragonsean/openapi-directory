/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountType from './AccountType';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.0.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     * @param balance {Number} The current balance of the account in milliunits format
     * @param clearedBalance {Number} The current cleared balance of the account in milliunits format
     * @param closed {Boolean} Whether this account is closed or not
     * @param deleted {Boolean} Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
     * @param id {String} 
     * @param name {String} 
     * @param onBudget {Boolean} Whether this account is on budget or not
     * @param transferPayeeId {String} The payee id which should be used when transferring to this account
     * @param type {module:model/AccountType} 
     * @param unclearedBalance {Number} The current uncleared balance of the account in milliunits format
     */
    constructor(balance, clearedBalance, closed, deleted, id, name, onBudget, transferPayeeId, type, unclearedBalance) { 
        
        Account.initialize(this, balance, clearedBalance, closed, deleted, id, name, onBudget, transferPayeeId, type, unclearedBalance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balance, clearedBalance, closed, deleted, id, name, onBudget, transferPayeeId, type, unclearedBalance) { 
        obj['balance'] = balance;
        obj['cleared_balance'] = clearedBalance;
        obj['closed'] = closed;
        obj['deleted'] = deleted;
        obj['id'] = id;
        obj['name'] = name;
        obj['on_budget'] = onBudget;
        obj['transfer_payee_id'] = transferPayeeId;
        obj['type'] = type;
        obj['uncleared_balance'] = unclearedBalance;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('cleared_balance')) {
                obj['cleared_balance'] = ApiClient.convertToType(data['cleared_balance'], 'Number');
            }
            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'Boolean');
            }
            if (data.hasOwnProperty('debt_escrow_amounts')) {
                obj['debt_escrow_amounts'] = ApiClient.convertToType(data['debt_escrow_amounts'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('debt_interest_rates')) {
                obj['debt_interest_rates'] = ApiClient.convertToType(data['debt_interest_rates'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('debt_minimum_payments')) {
                obj['debt_minimum_payments'] = ApiClient.convertToType(data['debt_minimum_payments'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('debt_original_balance')) {
                obj['debt_original_balance'] = ApiClient.convertToType(data['debt_original_balance'], 'Number');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('direct_import_in_error')) {
                obj['direct_import_in_error'] = ApiClient.convertToType(data['direct_import_in_error'], 'Boolean');
            }
            if (data.hasOwnProperty('direct_import_linked')) {
                obj['direct_import_linked'] = ApiClient.convertToType(data['direct_import_linked'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_reconciled_at')) {
                obj['last_reconciled_at'] = ApiClient.convertToType(data['last_reconciled_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('on_budget')) {
                obj['on_budget'] = ApiClient.convertToType(data['on_budget'], 'Boolean');
            }
            if (data.hasOwnProperty('transfer_payee_id')) {
                obj['transfer_payee_id'] = ApiClient.convertToType(data['transfer_payee_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = AccountType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('uncleared_balance')) {
                obj['uncleared_balance'] = ApiClient.convertToType(data['uncleared_balance'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['transfer_payee_id'] && !(typeof data['transfer_payee_id'] === 'string' || data['transfer_payee_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_payee_id` to be a primitive type in the JSON string but got " + data['transfer_payee_id']);
        }

        return true;
    }


}

Account.RequiredProperties = ["balance", "cleared_balance", "closed", "deleted", "id", "name", "on_budget", "transfer_payee_id", "type", "uncleared_balance"];

/**
 * The current balance of the account in milliunits format
 * @member {Number} balance
 */
Account.prototype['balance'] = undefined;

/**
 * The current cleared balance of the account in milliunits format
 * @member {Number} cleared_balance
 */
Account.prototype['cleared_balance'] = undefined;

/**
 * Whether this account is closed or not
 * @member {Boolean} closed
 */
Account.prototype['closed'] = undefined;

/**
 * @member {Object.<String, Number>} debt_escrow_amounts
 */
Account.prototype['debt_escrow_amounts'] = undefined;

/**
 * @member {Object.<String, Number>} debt_interest_rates
 */
Account.prototype['debt_interest_rates'] = undefined;

/**
 * @member {Object.<String, Number>} debt_minimum_payments
 */
Account.prototype['debt_minimum_payments'] = undefined;

/**
 * The original debt/loan account balance, specified in milliunits format.
 * @member {Number} debt_original_balance
 */
Account.prototype['debt_original_balance'] = undefined;

/**
 * Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
 * @member {Boolean} deleted
 */
Account.prototype['deleted'] = undefined;

/**
 * If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
 * @member {Boolean} direct_import_in_error
 */
Account.prototype['direct_import_in_error'] = undefined;

/**
 * Whether or not the account is linked to a financial institution for automatic transaction import.
 * @member {Boolean} direct_import_linked
 */
Account.prototype['direct_import_linked'] = undefined;

/**
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * A date/time specifying when the account was last reconciled.
 * @member {Date} last_reconciled_at
 */
Account.prototype['last_reconciled_at'] = undefined;

/**
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * @member {String} note
 */
Account.prototype['note'] = undefined;

/**
 * Whether this account is on budget or not
 * @member {Boolean} on_budget
 */
Account.prototype['on_budget'] = undefined;

/**
 * The payee id which should be used when transferring to this account
 * @member {String} transfer_payee_id
 */
Account.prototype['transfer_payee_id'] = undefined;

/**
 * @member {module:model/AccountType} type
 */
Account.prototype['type'] = undefined;

/**
 * The current uncleared balance of the account in milliunits format
 * @member {Number} uncleared_balance
 */
Account.prototype['uncleared_balance'] = undefined;






export default Account;

