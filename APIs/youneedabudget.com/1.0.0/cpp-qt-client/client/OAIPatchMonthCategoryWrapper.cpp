/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchMonthCategoryWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchMonthCategoryWrapper::OAIPatchMonthCategoryWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchMonthCategoryWrapper::OAIPatchMonthCategoryWrapper() {
    this->initializeModel();
}

OAIPatchMonthCategoryWrapper::~OAIPatchMonthCategoryWrapper() {}

void OAIPatchMonthCategoryWrapper::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;
}

void OAIPatchMonthCategoryWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchMonthCategoryWrapper::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;
}

QString OAIPatchMonthCategoryWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchMonthCategoryWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    return obj;
}

OAISaveMonthCategory OAIPatchMonthCategoryWrapper::getCategory() const {
    return m_category;
}
void OAIPatchMonthCategoryWrapper::setCategory(const OAISaveMonthCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPatchMonthCategoryWrapper::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPatchMonthCategoryWrapper::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIPatchMonthCategoryWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchMonthCategoryWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && true;
}

} // namespace OpenAPI
