/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_cleared_balance_isSet = false;
    m_cleared_balance_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_debt_escrow_amounts_isSet = false;
    m_debt_escrow_amounts_isValid = false;

    m_debt_interest_rates_isSet = false;
    m_debt_interest_rates_isValid = false;

    m_debt_minimum_payments_isSet = false;
    m_debt_minimum_payments_isValid = false;

    m_debt_original_balance_isSet = false;
    m_debt_original_balance_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_direct_import_in_error_isSet = false;
    m_direct_import_in_error_isValid = false;

    m_direct_import_linked_isSet = false;
    m_direct_import_linked_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_reconciled_at_isSet = false;
    m_last_reconciled_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_on_budget_isSet = false;
    m_on_budget_isValid = false;

    m_transfer_payee_id_isSet = false;
    m_transfer_payee_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uncleared_balance_isSet = false;
    m_uncleared_balance_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_cleared_balance_isValid = ::OpenAPI::fromJsonValue(m_cleared_balance, json[QString("cleared_balance")]);
    m_cleared_balance_isSet = !json[QString("cleared_balance")].isNull() && m_cleared_balance_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_debt_escrow_amounts_isValid = ::OpenAPI::fromJsonValue(m_debt_escrow_amounts, json[QString("debt_escrow_amounts")]);
    m_debt_escrow_amounts_isSet = !json[QString("debt_escrow_amounts")].isNull() && m_debt_escrow_amounts_isValid;

    m_debt_interest_rates_isValid = ::OpenAPI::fromJsonValue(m_debt_interest_rates, json[QString("debt_interest_rates")]);
    m_debt_interest_rates_isSet = !json[QString("debt_interest_rates")].isNull() && m_debt_interest_rates_isValid;

    m_debt_minimum_payments_isValid = ::OpenAPI::fromJsonValue(m_debt_minimum_payments, json[QString("debt_minimum_payments")]);
    m_debt_minimum_payments_isSet = !json[QString("debt_minimum_payments")].isNull() && m_debt_minimum_payments_isValid;

    m_debt_original_balance_isValid = ::OpenAPI::fromJsonValue(m_debt_original_balance, json[QString("debt_original_balance")]);
    m_debt_original_balance_isSet = !json[QString("debt_original_balance")].isNull() && m_debt_original_balance_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_direct_import_in_error_isValid = ::OpenAPI::fromJsonValue(m_direct_import_in_error, json[QString("direct_import_in_error")]);
    m_direct_import_in_error_isSet = !json[QString("direct_import_in_error")].isNull() && m_direct_import_in_error_isValid;

    m_direct_import_linked_isValid = ::OpenAPI::fromJsonValue(m_direct_import_linked, json[QString("direct_import_linked")]);
    m_direct_import_linked_isSet = !json[QString("direct_import_linked")].isNull() && m_direct_import_linked_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_reconciled_at_isValid = ::OpenAPI::fromJsonValue(m_last_reconciled_at, json[QString("last_reconciled_at")]);
    m_last_reconciled_at_isSet = !json[QString("last_reconciled_at")].isNull() && m_last_reconciled_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_on_budget_isValid = ::OpenAPI::fromJsonValue(m_on_budget, json[QString("on_budget")]);
    m_on_budget_isSet = !json[QString("on_budget")].isNull() && m_on_budget_isValid;

    m_transfer_payee_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_payee_id, json[QString("transfer_payee_id")]);
    m_transfer_payee_id_isSet = !json[QString("transfer_payee_id")].isNull() && m_transfer_payee_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uncleared_balance_isValid = ::OpenAPI::fromJsonValue(m_uncleared_balance, json[QString("uncleared_balance")]);
    m_uncleared_balance_isSet = !json[QString("uncleared_balance")].isNull() && m_uncleared_balance_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_cleared_balance_isSet) {
        obj.insert(QString("cleared_balance"), ::OpenAPI::toJsonValue(m_cleared_balance));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_debt_escrow_amounts.size() > 0) {
        obj.insert(QString("debt_escrow_amounts"), ::OpenAPI::toJsonValue(m_debt_escrow_amounts));
    }
    if (m_debt_interest_rates.size() > 0) {
        obj.insert(QString("debt_interest_rates"), ::OpenAPI::toJsonValue(m_debt_interest_rates));
    }
    if (m_debt_minimum_payments.size() > 0) {
        obj.insert(QString("debt_minimum_payments"), ::OpenAPI::toJsonValue(m_debt_minimum_payments));
    }
    if (m_debt_original_balance_isSet) {
        obj.insert(QString("debt_original_balance"), ::OpenAPI::toJsonValue(m_debt_original_balance));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_direct_import_in_error_isSet) {
        obj.insert(QString("direct_import_in_error"), ::OpenAPI::toJsonValue(m_direct_import_in_error));
    }
    if (m_direct_import_linked_isSet) {
        obj.insert(QString("direct_import_linked"), ::OpenAPI::toJsonValue(m_direct_import_linked));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_reconciled_at_isSet) {
        obj.insert(QString("last_reconciled_at"), ::OpenAPI::toJsonValue(m_last_reconciled_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_on_budget_isSet) {
        obj.insert(QString("on_budget"), ::OpenAPI::toJsonValue(m_on_budget));
    }
    if (m_transfer_payee_id_isSet) {
        obj.insert(QString("transfer_payee_id"), ::OpenAPI::toJsonValue(m_transfer_payee_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uncleared_balance_isSet) {
        obj.insert(QString("uncleared_balance"), ::OpenAPI::toJsonValue(m_uncleared_balance));
    }
    return obj;
}

qint64 OAIAccount::getBalance() const {
    return m_balance;
}
void OAIAccount::setBalance(const qint64 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIAccount::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIAccount::is_balance_Valid() const{
    return m_balance_isValid;
}

qint64 OAIAccount::getClearedBalance() const {
    return m_cleared_balance;
}
void OAIAccount::setClearedBalance(const qint64 &cleared_balance) {
    m_cleared_balance = cleared_balance;
    m_cleared_balance_isSet = true;
}

bool OAIAccount::is_cleared_balance_Set() const{
    return m_cleared_balance_isSet;
}

bool OAIAccount::is_cleared_balance_Valid() const{
    return m_cleared_balance_isValid;
}

bool OAIAccount::isClosed() const {
    return m_closed;
}
void OAIAccount::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAccount::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAccount::is_closed_Valid() const{
    return m_closed_isValid;
}

QMap<QString, qint64> OAIAccount::getDebtEscrowAmounts() const {
    return m_debt_escrow_amounts;
}
void OAIAccount::setDebtEscrowAmounts(const QMap<QString, qint64> &debt_escrow_amounts) {
    m_debt_escrow_amounts = debt_escrow_amounts;
    m_debt_escrow_amounts_isSet = true;
}

bool OAIAccount::is_debt_escrow_amounts_Set() const{
    return m_debt_escrow_amounts_isSet;
}

bool OAIAccount::is_debt_escrow_amounts_Valid() const{
    return m_debt_escrow_amounts_isValid;
}

QMap<QString, qint64> OAIAccount::getDebtInterestRates() const {
    return m_debt_interest_rates;
}
void OAIAccount::setDebtInterestRates(const QMap<QString, qint64> &debt_interest_rates) {
    m_debt_interest_rates = debt_interest_rates;
    m_debt_interest_rates_isSet = true;
}

bool OAIAccount::is_debt_interest_rates_Set() const{
    return m_debt_interest_rates_isSet;
}

bool OAIAccount::is_debt_interest_rates_Valid() const{
    return m_debt_interest_rates_isValid;
}

QMap<QString, qint64> OAIAccount::getDebtMinimumPayments() const {
    return m_debt_minimum_payments;
}
void OAIAccount::setDebtMinimumPayments(const QMap<QString, qint64> &debt_minimum_payments) {
    m_debt_minimum_payments = debt_minimum_payments;
    m_debt_minimum_payments_isSet = true;
}

bool OAIAccount::is_debt_minimum_payments_Set() const{
    return m_debt_minimum_payments_isSet;
}

bool OAIAccount::is_debt_minimum_payments_Valid() const{
    return m_debt_minimum_payments_isValid;
}

qint64 OAIAccount::getDebtOriginalBalance() const {
    return m_debt_original_balance;
}
void OAIAccount::setDebtOriginalBalance(const qint64 &debt_original_balance) {
    m_debt_original_balance = debt_original_balance;
    m_debt_original_balance_isSet = true;
}

bool OAIAccount::is_debt_original_balance_Set() const{
    return m_debt_original_balance_isSet;
}

bool OAIAccount::is_debt_original_balance_Valid() const{
    return m_debt_original_balance_isValid;
}

bool OAIAccount::isDeleted() const {
    return m_deleted;
}
void OAIAccount::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIAccount::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIAccount::is_deleted_Valid() const{
    return m_deleted_isValid;
}

bool OAIAccount::isDirectImportInError() const {
    return m_direct_import_in_error;
}
void OAIAccount::setDirectImportInError(const bool &direct_import_in_error) {
    m_direct_import_in_error = direct_import_in_error;
    m_direct_import_in_error_isSet = true;
}

bool OAIAccount::is_direct_import_in_error_Set() const{
    return m_direct_import_in_error_isSet;
}

bool OAIAccount::is_direct_import_in_error_Valid() const{
    return m_direct_import_in_error_isValid;
}

bool OAIAccount::isDirectImportLinked() const {
    return m_direct_import_linked;
}
void OAIAccount::setDirectImportLinked(const bool &direct_import_linked) {
    m_direct_import_linked = direct_import_linked;
    m_direct_import_linked_isSet = true;
}

bool OAIAccount::is_direct_import_linked_Set() const{
    return m_direct_import_linked_isSet;
}

bool OAIAccount::is_direct_import_linked_Valid() const{
    return m_direct_import_linked_isValid;
}

QString OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAccount::getLastReconciledAt() const {
    return m_last_reconciled_at;
}
void OAIAccount::setLastReconciledAt(const QDateTime &last_reconciled_at) {
    m_last_reconciled_at = last_reconciled_at;
    m_last_reconciled_at_isSet = true;
}

bool OAIAccount::is_last_reconciled_at_Set() const{
    return m_last_reconciled_at_isSet;
}

bool OAIAccount::is_last_reconciled_at_Valid() const{
    return m_last_reconciled_at_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccount::getNote() const {
    return m_note;
}
void OAIAccount::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIAccount::is_note_Set() const{
    return m_note_isSet;
}

bool OAIAccount::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIAccount::isOnBudget() const {
    return m_on_budget;
}
void OAIAccount::setOnBudget(const bool &on_budget) {
    m_on_budget = on_budget;
    m_on_budget_isSet = true;
}

bool OAIAccount::is_on_budget_Set() const{
    return m_on_budget_isSet;
}

bool OAIAccount::is_on_budget_Valid() const{
    return m_on_budget_isValid;
}

QString OAIAccount::getTransferPayeeId() const {
    return m_transfer_payee_id;
}
void OAIAccount::setTransferPayeeId(const QString &transfer_payee_id) {
    m_transfer_payee_id = transfer_payee_id;
    m_transfer_payee_id_isSet = true;
}

bool OAIAccount::is_transfer_payee_id_Set() const{
    return m_transfer_payee_id_isSet;
}

bool OAIAccount::is_transfer_payee_id_Valid() const{
    return m_transfer_payee_id_isValid;
}

OAIAccountType OAIAccount::getType() const {
    return m_type;
}
void OAIAccount::setType(const OAIAccountType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccount::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIAccount::getUnclearedBalance() const {
    return m_uncleared_balance;
}
void OAIAccount::setUnclearedBalance(const qint64 &uncleared_balance) {
    m_uncleared_balance = uncleared_balance;
    m_uncleared_balance_isSet = true;
}

bool OAIAccount::is_uncleared_balance_Set() const{
    return m_uncleared_balance_isSet;
}

bool OAIAccount::is_uncleared_balance_Valid() const{
    return m_uncleared_balance_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleared_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_escrow_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_interest_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_minimum_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_original_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_import_in_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_import_linked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_reconciled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_budget_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncleared_balance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_cleared_balance_isValid && m_closed_isValid && m_deleted_isValid && m_id_isValid && m_name_isValid && m_on_budget_isValid && m_transfer_payee_id_isValid && m_type_isValid && m_uncleared_balance_isValid && true;
}

} // namespace OpenAPI
