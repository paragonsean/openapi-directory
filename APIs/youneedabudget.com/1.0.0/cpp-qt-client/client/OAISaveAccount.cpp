/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveAccount::OAISaveAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveAccount::OAISaveAccount() {
    this->initializeModel();
}

OAISaveAccount::~OAISaveAccount() {}

void OAISaveAccount::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISaveAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveAccount::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISaveAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAISaveAccount::getBalance() const {
    return m_balance;
}
void OAISaveAccount::setBalance(const qint64 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAISaveAccount::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAISaveAccount::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAISaveAccount::getName() const {
    return m_name;
}
void OAISaveAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISaveAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAISaveAccount::is_name_Valid() const{
    return m_name_isValid;
}

OAIAccountType OAISaveAccount::getType() const {
    return m_type;
}
void OAISaveAccount::setType(const OAIAccountType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISaveAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAISaveAccount::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISaveAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
