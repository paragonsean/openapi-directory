/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoriesResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoriesResponse_data::OAICategoriesResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoriesResponse_data::OAICategoriesResponse_data() {
    this->initializeModel();
}

OAICategoriesResponse_data::~OAICategoriesResponse_data() {}

void OAICategoriesResponse_data::initializeModel() {

    m_category_groups_isSet = false;
    m_category_groups_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;
}

void OAICategoriesResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoriesResponse_data::fromJsonObject(QJsonObject json) {

    m_category_groups_isValid = ::OpenAPI::fromJsonValue(m_category_groups, json[QString("category_groups")]);
    m_category_groups_isSet = !json[QString("category_groups")].isNull() && m_category_groups_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;
}

QString OAICategoriesResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoriesResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_category_groups.size() > 0) {
        obj.insert(QString("category_groups"), ::OpenAPI::toJsonValue(m_category_groups));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    return obj;
}

QList<OAICategoryGroupWithCategories> OAICategoriesResponse_data::getCategoryGroups() const {
    return m_category_groups;
}
void OAICategoriesResponse_data::setCategoryGroups(const QList<OAICategoryGroupWithCategories> &category_groups) {
    m_category_groups = category_groups;
    m_category_groups_isSet = true;
}

bool OAICategoriesResponse_data::is_category_groups_Set() const{
    return m_category_groups_isSet;
}

bool OAICategoriesResponse_data::is_category_groups_Valid() const{
    return m_category_groups_isValid;
}

qint64 OAICategoriesResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAICategoriesResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAICategoriesResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAICategoriesResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

bool OAICategoriesResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoriesResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_groups_isValid && m_server_knowledge_isValid && true;
}

} // namespace OpenAPI
