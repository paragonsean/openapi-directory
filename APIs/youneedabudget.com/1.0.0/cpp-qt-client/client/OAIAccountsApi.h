/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountResponse.h"
#include "OAIAccountsResponse.h"
#include "OAIErrorResponse.h"
#include "OAIPostAccountWrapper.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  oai_post_account_wrapper OAIPostAccountWrapper [required]
    */
    virtual void createAccount(const QString &budget_id, const OAIPostAccountWrapper &oai_post_account_wrapper);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  account_id QString [required]
    */
    virtual void getAccountById(const QString &budget_id, const QString &account_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getAccounts(const QString &budget_id, const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountByIdCallback(OAIHttpRequestWorker *worker);
    void getAccountsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAccountSignal(OAIAccountResponse summary);
    void getAccountByIdSignal(OAIAccountResponse summary);
    void getAccountsSignal(OAIAccountsResponse summary);


    void createAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccountResponse summary);
    void getAccountByIdSignalFull(OAIHttpRequestWorker *worker, OAIAccountResponse summary);
    void getAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAccountsResponse summary);

    Q_DECL_DEPRECATED_X("Use createAccountSignalError() instead")
    void createAccountSignalE(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalError(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountByIdSignalError() instead")
    void getAccountByIdSignalE(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountByIdSignalError(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountsSignalError() instead")
    void getAccountsSignalE(OAIAccountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountsSignalError(OAIAccountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAccountSignalErrorFull() instead")
    void createAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountByIdSignalErrorFull() instead")
    void getAccountByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountsSignalErrorFull() instead")
    void getAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
