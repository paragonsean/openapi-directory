/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveTransaction::OAISaveTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveTransaction::OAISaveTransaction() {
    this->initializeModel();
}

OAISaveTransaction::~OAISaveTransaction() {}

void OAISaveTransaction::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_cleared_isSet = false;
    m_cleared_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_flag_color_isSet = false;
    m_flag_color_isValid = false;

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_subtransactions_isSet = false;
    m_subtransactions_isValid = false;
}

void OAISaveTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveTransaction::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_cleared_isValid = ::OpenAPI::fromJsonValue(m_cleared, json[QString("cleared")]);
    m_cleared_isSet = !json[QString("cleared")].isNull() && m_cleared_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_flag_color_isValid = ::OpenAPI::fromJsonValue(m_flag_color, json[QString("flag_color")]);
    m_flag_color_isSet = !json[QString("flag_color")].isNull() && m_flag_color_isValid;

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("import_id")]);
    m_import_id_isSet = !json[QString("import_id")].isNull() && m_import_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_subtransactions_isValid = ::OpenAPI::fromJsonValue(m_subtransactions, json[QString("subtransactions")]);
    m_subtransactions_isSet = !json[QString("subtransactions")].isNull() && m_subtransactions_isValid;
}

QString OAISaveTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_cleared_isSet) {
        obj.insert(QString("cleared"), ::OpenAPI::toJsonValue(m_cleared));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_flag_color_isSet) {
        obj.insert(QString("flag_color"), ::OpenAPI::toJsonValue(m_flag_color));
    }
    if (m_import_id_isSet) {
        obj.insert(QString("import_id"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_subtransactions.size() > 0) {
        obj.insert(QString("subtransactions"), ::OpenAPI::toJsonValue(m_subtransactions));
    }
    return obj;
}

QString OAISaveTransaction::getAccountId() const {
    return m_account_id;
}
void OAISaveTransaction::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISaveTransaction::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISaveTransaction::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAISaveTransaction::getAmount() const {
    return m_amount;
}
void OAISaveTransaction::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISaveTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISaveTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAISaveTransaction::isApproved() const {
    return m_approved;
}
void OAISaveTransaction::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAISaveTransaction::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAISaveTransaction::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAISaveTransaction::getCategoryId() const {
    return m_category_id;
}
void OAISaveTransaction::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAISaveTransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAISaveTransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAISaveTransaction::getCleared() const {
    return m_cleared;
}
void OAISaveTransaction::setCleared(const QString &cleared) {
    m_cleared = cleared;
    m_cleared_isSet = true;
}

bool OAISaveTransaction::is_cleared_Set() const{
    return m_cleared_isSet;
}

bool OAISaveTransaction::is_cleared_Valid() const{
    return m_cleared_isValid;
}

QDate OAISaveTransaction::getDate() const {
    return m_date;
}
void OAISaveTransaction::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISaveTransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAISaveTransaction::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISaveTransaction::getFlagColor() const {
    return m_flag_color;
}
void OAISaveTransaction::setFlagColor(const QString &flag_color) {
    m_flag_color = flag_color;
    m_flag_color_isSet = true;
}

bool OAISaveTransaction::is_flag_color_Set() const{
    return m_flag_color_isSet;
}

bool OAISaveTransaction::is_flag_color_Valid() const{
    return m_flag_color_isValid;
}

QString OAISaveTransaction::getImportId() const {
    return m_import_id;
}
void OAISaveTransaction::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAISaveTransaction::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAISaveTransaction::is_import_id_Valid() const{
    return m_import_id_isValid;
}

QString OAISaveTransaction::getMemo() const {
    return m_memo;
}
void OAISaveTransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAISaveTransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAISaveTransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAISaveTransaction::getPayeeId() const {
    return m_payee_id;
}
void OAISaveTransaction::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAISaveTransaction::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAISaveTransaction::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAISaveTransaction::getPayeeName() const {
    return m_payee_name;
}
void OAISaveTransaction::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAISaveTransaction::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAISaveTransaction::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QList<OAISaveSubTransaction> OAISaveTransaction::getSubtransactions() const {
    return m_subtransactions;
}
void OAISaveTransaction::setSubtransactions(const QList<OAISaveSubTransaction> &subtransactions) {
    m_subtransactions = subtransactions;
    m_subtransactions_isSet = true;
}

bool OAISaveTransaction::is_subtransactions_Set() const{
    return m_subtransactions_isSet;
}

bool OAISaveTransaction::is_subtransactions_Valid() const{
    return m_subtransactions_isValid;
}

bool OAISaveTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtransactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_date_isValid && true;
}

} // namespace OpenAPI
