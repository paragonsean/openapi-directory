/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonthSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonthSummary::OAIMonthSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonthSummary::OAIMonthSummary() {
    this->initializeModel();
}

OAIMonthSummary::~OAIMonthSummary() {}

void OAIMonthSummary::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_age_of_money_isSet = false;
    m_age_of_money_isValid = false;

    m_budgeted_isSet = false;
    m_budgeted_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_income_isSet = false;
    m_income_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_to_be_budgeted_isSet = false;
    m_to_be_budgeted_isValid = false;
}

void OAIMonthSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonthSummary::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_age_of_money_isValid = ::OpenAPI::fromJsonValue(m_age_of_money, json[QString("age_of_money")]);
    m_age_of_money_isSet = !json[QString("age_of_money")].isNull() && m_age_of_money_isValid;

    m_budgeted_isValid = ::OpenAPI::fromJsonValue(m_budgeted, json[QString("budgeted")]);
    m_budgeted_isSet = !json[QString("budgeted")].isNull() && m_budgeted_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_income_isValid = ::OpenAPI::fromJsonValue(m_income, json[QString("income")]);
    m_income_isSet = !json[QString("income")].isNull() && m_income_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_to_be_budgeted_isValid = ::OpenAPI::fromJsonValue(m_to_be_budgeted, json[QString("to_be_budgeted")]);
    m_to_be_budgeted_isSet = !json[QString("to_be_budgeted")].isNull() && m_to_be_budgeted_isValid;
}

QString OAIMonthSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonthSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_age_of_money_isSet) {
        obj.insert(QString("age_of_money"), ::OpenAPI::toJsonValue(m_age_of_money));
    }
    if (m_budgeted_isSet) {
        obj.insert(QString("budgeted"), ::OpenAPI::toJsonValue(m_budgeted));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_income_isSet) {
        obj.insert(QString("income"), ::OpenAPI::toJsonValue(m_income));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_to_be_budgeted_isSet) {
        obj.insert(QString("to_be_budgeted"), ::OpenAPI::toJsonValue(m_to_be_budgeted));
    }
    return obj;
}

qint64 OAIMonthSummary::getActivity() const {
    return m_activity;
}
void OAIMonthSummary::setActivity(const qint64 &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIMonthSummary::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIMonthSummary::is_activity_Valid() const{
    return m_activity_isValid;
}

qint32 OAIMonthSummary::getAgeOfMoney() const {
    return m_age_of_money;
}
void OAIMonthSummary::setAgeOfMoney(const qint32 &age_of_money) {
    m_age_of_money = age_of_money;
    m_age_of_money_isSet = true;
}

bool OAIMonthSummary::is_age_of_money_Set() const{
    return m_age_of_money_isSet;
}

bool OAIMonthSummary::is_age_of_money_Valid() const{
    return m_age_of_money_isValid;
}

qint64 OAIMonthSummary::getBudgeted() const {
    return m_budgeted;
}
void OAIMonthSummary::setBudgeted(const qint64 &budgeted) {
    m_budgeted = budgeted;
    m_budgeted_isSet = true;
}

bool OAIMonthSummary::is_budgeted_Set() const{
    return m_budgeted_isSet;
}

bool OAIMonthSummary::is_budgeted_Valid() const{
    return m_budgeted_isValid;
}

bool OAIMonthSummary::isDeleted() const {
    return m_deleted;
}
void OAIMonthSummary::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIMonthSummary::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIMonthSummary::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint64 OAIMonthSummary::getIncome() const {
    return m_income;
}
void OAIMonthSummary::setIncome(const qint64 &income) {
    m_income = income;
    m_income_isSet = true;
}

bool OAIMonthSummary::is_income_Set() const{
    return m_income_isSet;
}

bool OAIMonthSummary::is_income_Valid() const{
    return m_income_isValid;
}

QDate OAIMonthSummary::getMonth() const {
    return m_month;
}
void OAIMonthSummary::setMonth(const QDate &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIMonthSummary::is_month_Set() const{
    return m_month_isSet;
}

bool OAIMonthSummary::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIMonthSummary::getNote() const {
    return m_note;
}
void OAIMonthSummary::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIMonthSummary::is_note_Set() const{
    return m_note_isSet;
}

bool OAIMonthSummary::is_note_Valid() const{
    return m_note_isValid;
}

qint64 OAIMonthSummary::getToBeBudgeted() const {
    return m_to_be_budgeted;
}
void OAIMonthSummary::setToBeBudgeted(const qint64 &to_be_budgeted) {
    m_to_be_budgeted = to_be_budgeted;
    m_to_be_budgeted_isSet = true;
}

bool OAIMonthSummary::is_to_be_budgeted_Set() const{
    return m_to_be_budgeted_isSet;
}

bool OAIMonthSummary::is_to_be_budgeted_Valid() const{
    return m_to_be_budgeted_isValid;
}

bool OAIMonthSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_of_money_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budgeted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_be_budgeted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonthSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_isValid && m_budgeted_isValid && m_deleted_isValid && m_income_isValid && m_month_isValid && m_to_be_budgeted_isValid && true;
}

} // namespace OpenAPI
