/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayeeLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayeeLocation::OAIPayeeLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayeeLocation::OAIPayeeLocation() {
    this->initializeModel();
}

OAIPayeeLocation::~OAIPayeeLocation() {}

void OAIPayeeLocation::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;
}

void OAIPayeeLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayeeLocation::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;
}

QString OAIPayeeLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayeeLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    return obj;
}

bool OAIPayeeLocation::isDeleted() const {
    return m_deleted;
}
void OAIPayeeLocation::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIPayeeLocation::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIPayeeLocation::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIPayeeLocation::getId() const {
    return m_id;
}
void OAIPayeeLocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPayeeLocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPayeeLocation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPayeeLocation::getLatitude() const {
    return m_latitude;
}
void OAIPayeeLocation::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIPayeeLocation::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIPayeeLocation::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIPayeeLocation::getLongitude() const {
    return m_longitude;
}
void OAIPayeeLocation::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIPayeeLocation::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIPayeeLocation::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIPayeeLocation::getPayeeId() const {
    return m_payee_id;
}
void OAIPayeeLocation::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAIPayeeLocation::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAIPayeeLocation::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

bool OAIPayeeLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayeeLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deleted_isValid && m_id_isValid && m_latitude_isValid && m_longitude_isValid && m_payee_id_isValid && true;
}

} // namespace OpenAPI
