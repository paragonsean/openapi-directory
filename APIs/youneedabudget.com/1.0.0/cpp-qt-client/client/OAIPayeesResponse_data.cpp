/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayeesResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayeesResponse_data::OAIPayeesResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayeesResponse_data::OAIPayeesResponse_data() {
    this->initializeModel();
}

OAIPayeesResponse_data::~OAIPayeesResponse_data() {}

void OAIPayeesResponse_data::initializeModel() {

    m_payees_isSet = false;
    m_payees_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;
}

void OAIPayeesResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayeesResponse_data::fromJsonObject(QJsonObject json) {

    m_payees_isValid = ::OpenAPI::fromJsonValue(m_payees, json[QString("payees")]);
    m_payees_isSet = !json[QString("payees")].isNull() && m_payees_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;
}

QString OAIPayeesResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayeesResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_payees.size() > 0) {
        obj.insert(QString("payees"), ::OpenAPI::toJsonValue(m_payees));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    return obj;
}

QList<OAIPayee> OAIPayeesResponse_data::getPayees() const {
    return m_payees;
}
void OAIPayeesResponse_data::setPayees(const QList<OAIPayee> &payees) {
    m_payees = payees;
    m_payees_isSet = true;
}

bool OAIPayeesResponse_data::is_payees_Set() const{
    return m_payees_isSet;
}

bool OAIPayeesResponse_data::is_payees_Valid() const{
    return m_payees_isValid;
}

qint64 OAIPayeesResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAIPayeesResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAIPayeesResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAIPayeesResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

bool OAIPayeesResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayeesResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payees_isValid && m_server_knowledge_isValid && true;
}

} // namespace OpenAPI
