/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduledTransactionsApi_H
#define OAI_OAIScheduledTransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIScheduledTransactionResponse.h"
#include "OAIScheduledTransactionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduledTransactionsApi : public QObject {
    Q_OBJECT

public:
    OAIScheduledTransactionsApi(const int timeOut = 0);
    ~OAIScheduledTransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  scheduled_transaction_id QString [required]
    */
    virtual void getScheduledTransactionById(const QString &budget_id, const QString &scheduled_transaction_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getScheduledTransactions(const QString &budget_id, const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getScheduledTransactionByIdCallback(OAIHttpRequestWorker *worker);
    void getScheduledTransactionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getScheduledTransactionByIdSignal(OAIScheduledTransactionResponse summary);
    void getScheduledTransactionsSignal(OAIScheduledTransactionsResponse summary);


    void getScheduledTransactionByIdSignalFull(OAIHttpRequestWorker *worker, OAIScheduledTransactionResponse summary);
    void getScheduledTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIScheduledTransactionsResponse summary);

    Q_DECL_DEPRECATED_X("Use getScheduledTransactionByIdSignalError() instead")
    void getScheduledTransactionByIdSignalE(OAIScheduledTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduledTransactionByIdSignalError(OAIScheduledTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduledTransactionsSignalError() instead")
    void getScheduledTransactionsSignalE(OAIScheduledTransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduledTransactionsSignalError(OAIScheduledTransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getScheduledTransactionByIdSignalErrorFull() instead")
    void getScheduledTransactionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduledTransactionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScheduledTransactionsSignalErrorFull() instead")
    void getScheduledTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScheduledTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
