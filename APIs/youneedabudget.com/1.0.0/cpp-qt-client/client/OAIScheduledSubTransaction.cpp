/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledSubTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledSubTransaction::OAIScheduledSubTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledSubTransaction::OAIScheduledSubTransaction() {
    this->initializeModel();
}

OAIScheduledSubTransaction::~OAIScheduledSubTransaction() {}

void OAIScheduledSubTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_scheduled_transaction_id_isSet = false;
    m_scheduled_transaction_id_isValid = false;

    m_transfer_account_id_isSet = false;
    m_transfer_account_id_isValid = false;
}

void OAIScheduledSubTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledSubTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_scheduled_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_scheduled_transaction_id, json[QString("scheduled_transaction_id")]);
    m_scheduled_transaction_id_isSet = !json[QString("scheduled_transaction_id")].isNull() && m_scheduled_transaction_id_isValid;

    m_transfer_account_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_account_id, json[QString("transfer_account_id")]);
    m_transfer_account_id_isSet = !json[QString("transfer_account_id")].isNull() && m_transfer_account_id_isValid;
}

QString OAIScheduledSubTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledSubTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_scheduled_transaction_id_isSet) {
        obj.insert(QString("scheduled_transaction_id"), ::OpenAPI::toJsonValue(m_scheduled_transaction_id));
    }
    if (m_transfer_account_id_isSet) {
        obj.insert(QString("transfer_account_id"), ::OpenAPI::toJsonValue(m_transfer_account_id));
    }
    return obj;
}

qint64 OAIScheduledSubTransaction::getAmount() const {
    return m_amount;
}
void OAIScheduledSubTransaction::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIScheduledSubTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIScheduledSubTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIScheduledSubTransaction::getCategoryId() const {
    return m_category_id;
}
void OAIScheduledSubTransaction::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIScheduledSubTransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIScheduledSubTransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

bool OAIScheduledSubTransaction::isDeleted() const {
    return m_deleted;
}
void OAIScheduledSubTransaction::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIScheduledSubTransaction::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIScheduledSubTransaction::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIScheduledSubTransaction::getId() const {
    return m_id;
}
void OAIScheduledSubTransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduledSubTransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduledSubTransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScheduledSubTransaction::getMemo() const {
    return m_memo;
}
void OAIScheduledSubTransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIScheduledSubTransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIScheduledSubTransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIScheduledSubTransaction::getPayeeId() const {
    return m_payee_id;
}
void OAIScheduledSubTransaction::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAIScheduledSubTransaction::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAIScheduledSubTransaction::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAIScheduledSubTransaction::getScheduledTransactionId() const {
    return m_scheduled_transaction_id;
}
void OAIScheduledSubTransaction::setScheduledTransactionId(const QString &scheduled_transaction_id) {
    m_scheduled_transaction_id = scheduled_transaction_id;
    m_scheduled_transaction_id_isSet = true;
}

bool OAIScheduledSubTransaction::is_scheduled_transaction_id_Set() const{
    return m_scheduled_transaction_id_isSet;
}

bool OAIScheduledSubTransaction::is_scheduled_transaction_id_Valid() const{
    return m_scheduled_transaction_id_isValid;
}

QString OAIScheduledSubTransaction::getTransferAccountId() const {
    return m_transfer_account_id;
}
void OAIScheduledSubTransaction::setTransferAccountId(const QString &transfer_account_id) {
    m_transfer_account_id = transfer_account_id;
    m_transfer_account_id_isSet = true;
}

bool OAIScheduledSubTransaction::is_transfer_account_id_Set() const{
    return m_transfer_account_id_isSet;
}

bool OAIScheduledSubTransaction::is_transfer_account_id_Valid() const{
    return m_transfer_account_id_isValid;
}

bool OAIScheduledSubTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledSubTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_deleted_isValid && m_id_isValid && m_scheduled_transaction_id_isValid && true;
}

} // namespace OpenAPI
