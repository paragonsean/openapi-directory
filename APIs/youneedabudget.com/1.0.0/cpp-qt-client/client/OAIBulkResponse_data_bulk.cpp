/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkResponse_data_bulk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkResponse_data_bulk::OAIBulkResponse_data_bulk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkResponse_data_bulk::OAIBulkResponse_data_bulk() {
    this->initializeModel();
}

OAIBulkResponse_data_bulk::~OAIBulkResponse_data_bulk() {}

void OAIBulkResponse_data_bulk::initializeModel() {

    m_duplicate_import_ids_isSet = false;
    m_duplicate_import_ids_isValid = false;

    m_transaction_ids_isSet = false;
    m_transaction_ids_isValid = false;
}

void OAIBulkResponse_data_bulk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkResponse_data_bulk::fromJsonObject(QJsonObject json) {

    m_duplicate_import_ids_isValid = ::OpenAPI::fromJsonValue(m_duplicate_import_ids, json[QString("duplicate_import_ids")]);
    m_duplicate_import_ids_isSet = !json[QString("duplicate_import_ids")].isNull() && m_duplicate_import_ids_isValid;

    m_transaction_ids_isValid = ::OpenAPI::fromJsonValue(m_transaction_ids, json[QString("transaction_ids")]);
    m_transaction_ids_isSet = !json[QString("transaction_ids")].isNull() && m_transaction_ids_isValid;
}

QString OAIBulkResponse_data_bulk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkResponse_data_bulk::asJsonObject() const {
    QJsonObject obj;
    if (m_duplicate_import_ids.size() > 0) {
        obj.insert(QString("duplicate_import_ids"), ::OpenAPI::toJsonValue(m_duplicate_import_ids));
    }
    if (m_transaction_ids.size() > 0) {
        obj.insert(QString("transaction_ids"), ::OpenAPI::toJsonValue(m_transaction_ids));
    }
    return obj;
}

QList<QString> OAIBulkResponse_data_bulk::getDuplicateImportIds() const {
    return m_duplicate_import_ids;
}
void OAIBulkResponse_data_bulk::setDuplicateImportIds(const QList<QString> &duplicate_import_ids) {
    m_duplicate_import_ids = duplicate_import_ids;
    m_duplicate_import_ids_isSet = true;
}

bool OAIBulkResponse_data_bulk::is_duplicate_import_ids_Set() const{
    return m_duplicate_import_ids_isSet;
}

bool OAIBulkResponse_data_bulk::is_duplicate_import_ids_Valid() const{
    return m_duplicate_import_ids_isValid;
}

QList<QString> OAIBulkResponse_data_bulk::getTransactionIds() const {
    return m_transaction_ids;
}
void OAIBulkResponse_data_bulk::setTransactionIds(const QList<QString> &transaction_ids) {
    m_transaction_ids = transaction_ids;
    m_transaction_ids_isSet = true;
}

bool OAIBulkResponse_data_bulk::is_transaction_ids_Set() const{
    return m_transaction_ids_isSet;
}

bool OAIBulkResponse_data_bulk::is_transaction_ids_Valid() const{
    return m_transaction_ids_isValid;
}

bool OAIBulkResponse_data_bulk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duplicate_import_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkResponse_data_bulk::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duplicate_import_ids_isValid && m_transaction_ids_isValid && true;
}

} // namespace OpenAPI
