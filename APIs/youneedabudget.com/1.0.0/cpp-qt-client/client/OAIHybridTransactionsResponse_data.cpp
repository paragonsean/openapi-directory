/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHybridTransactionsResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHybridTransactionsResponse_data::OAIHybridTransactionsResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHybridTransactionsResponse_data::OAIHybridTransactionsResponse_data() {
    this->initializeModel();
}

OAIHybridTransactionsResponse_data::~OAIHybridTransactionsResponse_data() {}

void OAIHybridTransactionsResponse_data::initializeModel() {

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIHybridTransactionsResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHybridTransactionsResponse_data::fromJsonObject(QJsonObject json) {

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIHybridTransactionsResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHybridTransactionsResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

qint64 OAIHybridTransactionsResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAIHybridTransactionsResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAIHybridTransactionsResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAIHybridTransactionsResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

QList<OAIHybridTransaction> OAIHybridTransactionsResponse_data::getTransactions() const {
    return m_transactions;
}
void OAIHybridTransactionsResponse_data::setTransactions(const QList<OAIHybridTransaction> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIHybridTransactionsResponse_data::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIHybridTransactionsResponse_data::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIHybridTransactionsResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHybridTransactionsResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transactions_isValid && true;
}

} // namespace OpenAPI
