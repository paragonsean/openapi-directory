/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayeeLocationsApi_H
#define OAI_OAIPayeeLocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPayeeLocationResponse.h"
#include "OAIPayeeLocationsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayeeLocationsApi : public QObject {
    Q_OBJECT

public:
    OAIPayeeLocationsApi(const int timeOut = 0);
    ~OAIPayeeLocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  payee_location_id QString [required]
    */
    virtual void getPayeeLocationById(const QString &budget_id, const QString &payee_location_id);

    /**
    * @param[in]  budget_id QString [required]
    */
    virtual void getPayeeLocations(const QString &budget_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  payee_id QString [required]
    */
    virtual void getPayeeLocationsByPayee(const QString &budget_id, const QString &payee_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPayeeLocationByIdCallback(OAIHttpRequestWorker *worker);
    void getPayeeLocationsCallback(OAIHttpRequestWorker *worker);
    void getPayeeLocationsByPayeeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPayeeLocationByIdSignal(OAIPayeeLocationResponse summary);
    void getPayeeLocationsSignal(OAIPayeeLocationsResponse summary);
    void getPayeeLocationsByPayeeSignal(OAIPayeeLocationsResponse summary);


    void getPayeeLocationByIdSignalFull(OAIHttpRequestWorker *worker, OAIPayeeLocationResponse summary);
    void getPayeeLocationsSignalFull(OAIHttpRequestWorker *worker, OAIPayeeLocationsResponse summary);
    void getPayeeLocationsByPayeeSignalFull(OAIHttpRequestWorker *worker, OAIPayeeLocationsResponse summary);

    Q_DECL_DEPRECATED_X("Use getPayeeLocationByIdSignalError() instead")
    void getPayeeLocationByIdSignalE(OAIPayeeLocationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeLocationByIdSignalError(OAIPayeeLocationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeLocationsSignalError() instead")
    void getPayeeLocationsSignalE(OAIPayeeLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeLocationsSignalError(OAIPayeeLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeLocationsByPayeeSignalError() instead")
    void getPayeeLocationsByPayeeSignalE(OAIPayeeLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeLocationsByPayeeSignalError(OAIPayeeLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPayeeLocationByIdSignalErrorFull() instead")
    void getPayeeLocationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeLocationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeLocationsSignalErrorFull() instead")
    void getPayeeLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayeeLocationsByPayeeSignalErrorFull() instead")
    void getPayeeLocationsByPayeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayeeLocationsByPayeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
