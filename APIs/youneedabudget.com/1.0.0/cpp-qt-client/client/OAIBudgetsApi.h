/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBudgetsApi_H
#define OAI_OAIBudgetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBudgetDetailResponse.h"
#include "OAIBudgetSettingsResponse.h"
#include "OAIBudgetSummaryResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBudgetsApi : public QObject {
    Q_OBJECT

public:
    OAIBudgetsApi(const int timeOut = 0);
    ~OAIBudgetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getBudgetById(const QString &budget_id, const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  budget_id QString [required]
    */
    virtual void getBudgetSettingsById(const QString &budget_id);

    /**
    * @param[in]  include_accounts bool [optional]
    */
    virtual void getBudgets(const ::OpenAPI::OptionalParam<bool> &include_accounts = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBudgetByIdCallback(OAIHttpRequestWorker *worker);
    void getBudgetSettingsByIdCallback(OAIHttpRequestWorker *worker);
    void getBudgetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBudgetByIdSignal(OAIBudgetDetailResponse summary);
    void getBudgetSettingsByIdSignal(OAIBudgetSettingsResponse summary);
    void getBudgetsSignal(OAIBudgetSummaryResponse summary);


    void getBudgetByIdSignalFull(OAIHttpRequestWorker *worker, OAIBudgetDetailResponse summary);
    void getBudgetSettingsByIdSignalFull(OAIHttpRequestWorker *worker, OAIBudgetSettingsResponse summary);
    void getBudgetsSignalFull(OAIHttpRequestWorker *worker, OAIBudgetSummaryResponse summary);

    Q_DECL_DEPRECATED_X("Use getBudgetByIdSignalError() instead")
    void getBudgetByIdSignalE(OAIBudgetDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetByIdSignalError(OAIBudgetDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBudgetSettingsByIdSignalError() instead")
    void getBudgetSettingsByIdSignalE(OAIBudgetSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetSettingsByIdSignalError(OAIBudgetSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBudgetsSignalError() instead")
    void getBudgetsSignalE(OAIBudgetSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetsSignalError(OAIBudgetSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBudgetByIdSignalErrorFull() instead")
    void getBudgetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBudgetSettingsByIdSignalErrorFull() instead")
    void getBudgetSettingsByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetSettingsByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBudgetsSignalErrorFull() instead")
    void getBudgetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
