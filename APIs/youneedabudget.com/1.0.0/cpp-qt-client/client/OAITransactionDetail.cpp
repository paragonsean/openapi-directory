/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionDetail::OAITransactionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionDetail::OAITransactionDetail() {
    this->initializeModel();
}

OAITransactionDetail::~OAITransactionDetail() {}

void OAITransactionDetail::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_cleared_isSet = false;
    m_cleared_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_debt_transaction_type_isSet = false;
    m_debt_transaction_type_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_flag_color_isSet = false;
    m_flag_color_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_import_payee_name_isSet = false;
    m_import_payee_name_isValid = false;

    m_import_payee_name_original_isSet = false;
    m_import_payee_name_original_isValid = false;

    m_matched_transaction_id_isSet = false;
    m_matched_transaction_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_transfer_account_id_isSet = false;
    m_transfer_account_id_isValid = false;

    m_transfer_transaction_id_isSet = false;
    m_transfer_transaction_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_subtransactions_isSet = false;
    m_subtransactions_isValid = false;
}

void OAITransactionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionDetail::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_cleared_isValid = ::OpenAPI::fromJsonValue(m_cleared, json[QString("cleared")]);
    m_cleared_isSet = !json[QString("cleared")].isNull() && m_cleared_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_debt_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_debt_transaction_type, json[QString("debt_transaction_type")]);
    m_debt_transaction_type_isSet = !json[QString("debt_transaction_type")].isNull() && m_debt_transaction_type_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_flag_color_isValid = ::OpenAPI::fromJsonValue(m_flag_color, json[QString("flag_color")]);
    m_flag_color_isSet = !json[QString("flag_color")].isNull() && m_flag_color_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("import_id")]);
    m_import_id_isSet = !json[QString("import_id")].isNull() && m_import_id_isValid;

    m_import_payee_name_isValid = ::OpenAPI::fromJsonValue(m_import_payee_name, json[QString("import_payee_name")]);
    m_import_payee_name_isSet = !json[QString("import_payee_name")].isNull() && m_import_payee_name_isValid;

    m_import_payee_name_original_isValid = ::OpenAPI::fromJsonValue(m_import_payee_name_original, json[QString("import_payee_name_original")]);
    m_import_payee_name_original_isSet = !json[QString("import_payee_name_original")].isNull() && m_import_payee_name_original_isValid;

    m_matched_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_matched_transaction_id, json[QString("matched_transaction_id")]);
    m_matched_transaction_id_isSet = !json[QString("matched_transaction_id")].isNull() && m_matched_transaction_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_transfer_account_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_account_id, json[QString("transfer_account_id")]);
    m_transfer_account_id_isSet = !json[QString("transfer_account_id")].isNull() && m_transfer_account_id_isValid;

    m_transfer_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_transaction_id, json[QString("transfer_transaction_id")]);
    m_transfer_transaction_id_isSet = !json[QString("transfer_transaction_id")].isNull() && m_transfer_transaction_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("account_name")]);
    m_account_name_isSet = !json[QString("account_name")].isNull() && m_account_name_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("category_name")]);
    m_category_name_isSet = !json[QString("category_name")].isNull() && m_category_name_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_subtransactions_isValid = ::OpenAPI::fromJsonValue(m_subtransactions, json[QString("subtransactions")]);
    m_subtransactions_isSet = !json[QString("subtransactions")].isNull() && m_subtransactions_isValid;
}

QString OAITransactionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_cleared_isSet) {
        obj.insert(QString("cleared"), ::OpenAPI::toJsonValue(m_cleared));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_debt_transaction_type_isSet) {
        obj.insert(QString("debt_transaction_type"), ::OpenAPI::toJsonValue(m_debt_transaction_type));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_flag_color_isSet) {
        obj.insert(QString("flag_color"), ::OpenAPI::toJsonValue(m_flag_color));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_id_isSet) {
        obj.insert(QString("import_id"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_import_payee_name_isSet) {
        obj.insert(QString("import_payee_name"), ::OpenAPI::toJsonValue(m_import_payee_name));
    }
    if (m_import_payee_name_original_isSet) {
        obj.insert(QString("import_payee_name_original"), ::OpenAPI::toJsonValue(m_import_payee_name_original));
    }
    if (m_matched_transaction_id_isSet) {
        obj.insert(QString("matched_transaction_id"), ::OpenAPI::toJsonValue(m_matched_transaction_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_transfer_account_id_isSet) {
        obj.insert(QString("transfer_account_id"), ::OpenAPI::toJsonValue(m_transfer_account_id));
    }
    if (m_transfer_transaction_id_isSet) {
        obj.insert(QString("transfer_transaction_id"), ::OpenAPI::toJsonValue(m_transfer_transaction_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("account_name"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("category_name"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_subtransactions.size() > 0) {
        obj.insert(QString("subtransactions"), ::OpenAPI::toJsonValue(m_subtransactions));
    }
    return obj;
}

QString OAITransactionDetail::getAccountId() const {
    return m_account_id;
}
void OAITransactionDetail::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITransactionDetail::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITransactionDetail::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAITransactionDetail::getAmount() const {
    return m_amount;
}
void OAITransactionDetail::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransactionDetail::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransactionDetail::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAITransactionDetail::isApproved() const {
    return m_approved;
}
void OAITransactionDetail::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAITransactionDetail::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAITransactionDetail::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAITransactionDetail::getCategoryId() const {
    return m_category_id;
}
void OAITransactionDetail::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAITransactionDetail::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAITransactionDetail::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAITransactionDetail::getCleared() const {
    return m_cleared;
}
void OAITransactionDetail::setCleared(const QString &cleared) {
    m_cleared = cleared;
    m_cleared_isSet = true;
}

bool OAITransactionDetail::is_cleared_Set() const{
    return m_cleared_isSet;
}

bool OAITransactionDetail::is_cleared_Valid() const{
    return m_cleared_isValid;
}

QDate OAITransactionDetail::getDate() const {
    return m_date;
}
void OAITransactionDetail::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITransactionDetail::is_date_Set() const{
    return m_date_isSet;
}

bool OAITransactionDetail::is_date_Valid() const{
    return m_date_isValid;
}

QString OAITransactionDetail::getDebtTransactionType() const {
    return m_debt_transaction_type;
}
void OAITransactionDetail::setDebtTransactionType(const QString &debt_transaction_type) {
    m_debt_transaction_type = debt_transaction_type;
    m_debt_transaction_type_isSet = true;
}

bool OAITransactionDetail::is_debt_transaction_type_Set() const{
    return m_debt_transaction_type_isSet;
}

bool OAITransactionDetail::is_debt_transaction_type_Valid() const{
    return m_debt_transaction_type_isValid;
}

bool OAITransactionDetail::isDeleted() const {
    return m_deleted;
}
void OAITransactionDetail::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAITransactionDetail::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAITransactionDetail::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAITransactionDetail::getFlagColor() const {
    return m_flag_color;
}
void OAITransactionDetail::setFlagColor(const QString &flag_color) {
    m_flag_color = flag_color;
    m_flag_color_isSet = true;
}

bool OAITransactionDetail::is_flag_color_Set() const{
    return m_flag_color_isSet;
}

bool OAITransactionDetail::is_flag_color_Valid() const{
    return m_flag_color_isValid;
}

QString OAITransactionDetail::getId() const {
    return m_id;
}
void OAITransactionDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransactionDetail::getImportId() const {
    return m_import_id;
}
void OAITransactionDetail::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAITransactionDetail::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAITransactionDetail::is_import_id_Valid() const{
    return m_import_id_isValid;
}

QString OAITransactionDetail::getImportPayeeName() const {
    return m_import_payee_name;
}
void OAITransactionDetail::setImportPayeeName(const QString &import_payee_name) {
    m_import_payee_name = import_payee_name;
    m_import_payee_name_isSet = true;
}

bool OAITransactionDetail::is_import_payee_name_Set() const{
    return m_import_payee_name_isSet;
}

bool OAITransactionDetail::is_import_payee_name_Valid() const{
    return m_import_payee_name_isValid;
}

QString OAITransactionDetail::getImportPayeeNameOriginal() const {
    return m_import_payee_name_original;
}
void OAITransactionDetail::setImportPayeeNameOriginal(const QString &import_payee_name_original) {
    m_import_payee_name_original = import_payee_name_original;
    m_import_payee_name_original_isSet = true;
}

bool OAITransactionDetail::is_import_payee_name_original_Set() const{
    return m_import_payee_name_original_isSet;
}

bool OAITransactionDetail::is_import_payee_name_original_Valid() const{
    return m_import_payee_name_original_isValid;
}

QString OAITransactionDetail::getMatchedTransactionId() const {
    return m_matched_transaction_id;
}
void OAITransactionDetail::setMatchedTransactionId(const QString &matched_transaction_id) {
    m_matched_transaction_id = matched_transaction_id;
    m_matched_transaction_id_isSet = true;
}

bool OAITransactionDetail::is_matched_transaction_id_Set() const{
    return m_matched_transaction_id_isSet;
}

bool OAITransactionDetail::is_matched_transaction_id_Valid() const{
    return m_matched_transaction_id_isValid;
}

QString OAITransactionDetail::getMemo() const {
    return m_memo;
}
void OAITransactionDetail::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAITransactionDetail::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAITransactionDetail::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAITransactionDetail::getPayeeId() const {
    return m_payee_id;
}
void OAITransactionDetail::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAITransactionDetail::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAITransactionDetail::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAITransactionDetail::getTransferAccountId() const {
    return m_transfer_account_id;
}
void OAITransactionDetail::setTransferAccountId(const QString &transfer_account_id) {
    m_transfer_account_id = transfer_account_id;
    m_transfer_account_id_isSet = true;
}

bool OAITransactionDetail::is_transfer_account_id_Set() const{
    return m_transfer_account_id_isSet;
}

bool OAITransactionDetail::is_transfer_account_id_Valid() const{
    return m_transfer_account_id_isValid;
}

QString OAITransactionDetail::getTransferTransactionId() const {
    return m_transfer_transaction_id;
}
void OAITransactionDetail::setTransferTransactionId(const QString &transfer_transaction_id) {
    m_transfer_transaction_id = transfer_transaction_id;
    m_transfer_transaction_id_isSet = true;
}

bool OAITransactionDetail::is_transfer_transaction_id_Set() const{
    return m_transfer_transaction_id_isSet;
}

bool OAITransactionDetail::is_transfer_transaction_id_Valid() const{
    return m_transfer_transaction_id_isValid;
}

QString OAITransactionDetail::getAccountName() const {
    return m_account_name;
}
void OAITransactionDetail::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAITransactionDetail::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAITransactionDetail::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAITransactionDetail::getCategoryName() const {
    return m_category_name;
}
void OAITransactionDetail::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAITransactionDetail::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAITransactionDetail::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAITransactionDetail::getPayeeName() const {
    return m_payee_name;
}
void OAITransactionDetail::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAITransactionDetail::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAITransactionDetail::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QList<OAISubTransaction> OAITransactionDetail::getSubtransactions() const {
    return m_subtransactions;
}
void OAITransactionDetail::setSubtransactions(const QList<OAISubTransaction> &subtransactions) {
    m_subtransactions = subtransactions;
    m_subtransactions_isSet = true;
}

bool OAITransactionDetail::is_subtransactions_Set() const{
    return m_subtransactions_isSet;
}

bool OAITransactionDetail::is_subtransactions_Valid() const{
    return m_subtransactions_isValid;
}

bool OAITransactionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debt_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_payee_name_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtransactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_approved_isValid && m_cleared_isValid && m_date_isValid && m_deleted_isValid && m_id_isValid && m_account_name_isValid && m_subtransactions_isValid && true;
}

} // namespace OpenAPI
