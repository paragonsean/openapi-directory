/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountsResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountsResponse_data::OAIAccountsResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountsResponse_data::OAIAccountsResponse_data() {
    this->initializeModel();
}

OAIAccountsResponse_data::~OAIAccountsResponse_data() {}

void OAIAccountsResponse_data::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;
}

void OAIAccountsResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountsResponse_data::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;
}

QString OAIAccountsResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountsResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    return obj;
}

QList<OAIAccount> OAIAccountsResponse_data::getAccounts() const {
    return m_accounts;
}
void OAIAccountsResponse_data::setAccounts(const QList<OAIAccount> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIAccountsResponse_data::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIAccountsResponse_data::is_accounts_Valid() const{
    return m_accounts_isValid;
}

qint64 OAIAccountsResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAIAccountsResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAIAccountsResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAIAccountsResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

bool OAIAccountsResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountsResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accounts_isValid && m_server_knowledge_isValid && true;
}

} // namespace OpenAPI
