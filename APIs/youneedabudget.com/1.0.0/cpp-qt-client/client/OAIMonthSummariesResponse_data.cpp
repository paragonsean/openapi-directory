/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonthSummariesResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonthSummariesResponse_data::OAIMonthSummariesResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonthSummariesResponse_data::OAIMonthSummariesResponse_data() {
    this->initializeModel();
}

OAIMonthSummariesResponse_data::~OAIMonthSummariesResponse_data() {}

void OAIMonthSummariesResponse_data::initializeModel() {

    m_months_isSet = false;
    m_months_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;
}

void OAIMonthSummariesResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonthSummariesResponse_data::fromJsonObject(QJsonObject json) {

    m_months_isValid = ::OpenAPI::fromJsonValue(m_months, json[QString("months")]);
    m_months_isSet = !json[QString("months")].isNull() && m_months_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;
}

QString OAIMonthSummariesResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonthSummariesResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_months.size() > 0) {
        obj.insert(QString("months"), ::OpenAPI::toJsonValue(m_months));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    return obj;
}

QList<OAIMonthSummary> OAIMonthSummariesResponse_data::getMonths() const {
    return m_months;
}
void OAIMonthSummariesResponse_data::setMonths(const QList<OAIMonthSummary> &months) {
    m_months = months;
    m_months_isSet = true;
}

bool OAIMonthSummariesResponse_data::is_months_Set() const{
    return m_months_isSet;
}

bool OAIMonthSummariesResponse_data::is_months_Valid() const{
    return m_months_isValid;
}

qint64 OAIMonthSummariesResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAIMonthSummariesResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAIMonthSummariesResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAIMonthSummariesResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

bool OAIMonthSummariesResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_months.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonthSummariesResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_months_isValid && m_server_knowledge_isValid && true;
}

} // namespace OpenAPI
