/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayeeLocationsResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayeeLocationsResponse_data::OAIPayeeLocationsResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayeeLocationsResponse_data::OAIPayeeLocationsResponse_data() {
    this->initializeModel();
}

OAIPayeeLocationsResponse_data::~OAIPayeeLocationsResponse_data() {}

void OAIPayeeLocationsResponse_data::initializeModel() {

    m_payee_locations_isSet = false;
    m_payee_locations_isValid = false;
}

void OAIPayeeLocationsResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayeeLocationsResponse_data::fromJsonObject(QJsonObject json) {

    m_payee_locations_isValid = ::OpenAPI::fromJsonValue(m_payee_locations, json[QString("payee_locations")]);
    m_payee_locations_isSet = !json[QString("payee_locations")].isNull() && m_payee_locations_isValid;
}

QString OAIPayeeLocationsResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayeeLocationsResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_payee_locations.size() > 0) {
        obj.insert(QString("payee_locations"), ::OpenAPI::toJsonValue(m_payee_locations));
    }
    return obj;
}

QList<OAIPayeeLocation> OAIPayeeLocationsResponse_data::getPayeeLocations() const {
    return m_payee_locations;
}
void OAIPayeeLocationsResponse_data::setPayeeLocations(const QList<OAIPayeeLocation> &payee_locations) {
    m_payee_locations = payee_locations;
    m_payee_locations_isSet = true;
}

bool OAIPayeeLocationsResponse_data::is_payee_locations_Set() const{
    return m_payee_locations_isSet;
}

bool OAIPayeeLocationsResponse_data::is_payee_locations_Valid() const{
    return m_payee_locations_isValid;
}

bool OAIPayeeLocationsResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payee_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayeeLocationsResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payee_locations_isValid && true;
}

} // namespace OpenAPI
