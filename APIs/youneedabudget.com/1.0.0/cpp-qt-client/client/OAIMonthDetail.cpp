/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonthDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonthDetail::OAIMonthDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonthDetail::OAIMonthDetail() {
    this->initializeModel();
}

OAIMonthDetail::~OAIMonthDetail() {}

void OAIMonthDetail::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_age_of_money_isSet = false;
    m_age_of_money_isValid = false;

    m_budgeted_isSet = false;
    m_budgeted_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_income_isSet = false;
    m_income_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_to_be_budgeted_isSet = false;
    m_to_be_budgeted_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;
}

void OAIMonthDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonthDetail::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_age_of_money_isValid = ::OpenAPI::fromJsonValue(m_age_of_money, json[QString("age_of_money")]);
    m_age_of_money_isSet = !json[QString("age_of_money")].isNull() && m_age_of_money_isValid;

    m_budgeted_isValid = ::OpenAPI::fromJsonValue(m_budgeted, json[QString("budgeted")]);
    m_budgeted_isSet = !json[QString("budgeted")].isNull() && m_budgeted_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_income_isValid = ::OpenAPI::fromJsonValue(m_income, json[QString("income")]);
    m_income_isSet = !json[QString("income")].isNull() && m_income_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_to_be_budgeted_isValid = ::OpenAPI::fromJsonValue(m_to_be_budgeted, json[QString("to_be_budgeted")]);
    m_to_be_budgeted_isSet = !json[QString("to_be_budgeted")].isNull() && m_to_be_budgeted_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;
}

QString OAIMonthDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonthDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_age_of_money_isSet) {
        obj.insert(QString("age_of_money"), ::OpenAPI::toJsonValue(m_age_of_money));
    }
    if (m_budgeted_isSet) {
        obj.insert(QString("budgeted"), ::OpenAPI::toJsonValue(m_budgeted));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_income_isSet) {
        obj.insert(QString("income"), ::OpenAPI::toJsonValue(m_income));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_to_be_budgeted_isSet) {
        obj.insert(QString("to_be_budgeted"), ::OpenAPI::toJsonValue(m_to_be_budgeted));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    return obj;
}

qint64 OAIMonthDetail::getActivity() const {
    return m_activity;
}
void OAIMonthDetail::setActivity(const qint64 &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIMonthDetail::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIMonthDetail::is_activity_Valid() const{
    return m_activity_isValid;
}

qint32 OAIMonthDetail::getAgeOfMoney() const {
    return m_age_of_money;
}
void OAIMonthDetail::setAgeOfMoney(const qint32 &age_of_money) {
    m_age_of_money = age_of_money;
    m_age_of_money_isSet = true;
}

bool OAIMonthDetail::is_age_of_money_Set() const{
    return m_age_of_money_isSet;
}

bool OAIMonthDetail::is_age_of_money_Valid() const{
    return m_age_of_money_isValid;
}

qint64 OAIMonthDetail::getBudgeted() const {
    return m_budgeted;
}
void OAIMonthDetail::setBudgeted(const qint64 &budgeted) {
    m_budgeted = budgeted;
    m_budgeted_isSet = true;
}

bool OAIMonthDetail::is_budgeted_Set() const{
    return m_budgeted_isSet;
}

bool OAIMonthDetail::is_budgeted_Valid() const{
    return m_budgeted_isValid;
}

bool OAIMonthDetail::isDeleted() const {
    return m_deleted;
}
void OAIMonthDetail::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIMonthDetail::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIMonthDetail::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint64 OAIMonthDetail::getIncome() const {
    return m_income;
}
void OAIMonthDetail::setIncome(const qint64 &income) {
    m_income = income;
    m_income_isSet = true;
}

bool OAIMonthDetail::is_income_Set() const{
    return m_income_isSet;
}

bool OAIMonthDetail::is_income_Valid() const{
    return m_income_isValid;
}

QDate OAIMonthDetail::getMonth() const {
    return m_month;
}
void OAIMonthDetail::setMonth(const QDate &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIMonthDetail::is_month_Set() const{
    return m_month_isSet;
}

bool OAIMonthDetail::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIMonthDetail::getNote() const {
    return m_note;
}
void OAIMonthDetail::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIMonthDetail::is_note_Set() const{
    return m_note_isSet;
}

bool OAIMonthDetail::is_note_Valid() const{
    return m_note_isValid;
}

qint64 OAIMonthDetail::getToBeBudgeted() const {
    return m_to_be_budgeted;
}
void OAIMonthDetail::setToBeBudgeted(const qint64 &to_be_budgeted) {
    m_to_be_budgeted = to_be_budgeted;
    m_to_be_budgeted_isSet = true;
}

bool OAIMonthDetail::is_to_be_budgeted_Set() const{
    return m_to_be_budgeted_isSet;
}

bool OAIMonthDetail::is_to_be_budgeted_Valid() const{
    return m_to_be_budgeted_isValid;
}

QList<OAICategory> OAIMonthDetail::getCategories() const {
    return m_categories;
}
void OAIMonthDetail::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIMonthDetail::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIMonthDetail::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIMonthDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_of_money_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budgeted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_be_budgeted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonthDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_isValid && m_budgeted_isValid && m_deleted_isValid && m_income_isValid && m_month_isValid && m_to_be_budgeted_isValid && m_categories_isValid && true;
}

} // namespace OpenAPI
