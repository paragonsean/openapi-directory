/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryGroup::OAICategoryGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryGroup::OAICategoryGroup() {
    this->initializeModel();
}

OAICategoryGroup::~OAICategoryGroup() {}

void OAICategoryGroup::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICategoryGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryGroup::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICategoryGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAICategoryGroup::isDeleted() const {
    return m_deleted;
}
void OAICategoryGroup::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAICategoryGroup::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAICategoryGroup::is_deleted_Valid() const{
    return m_deleted_isValid;
}

bool OAICategoryGroup::isHidden() const {
    return m_hidden;
}
void OAICategoryGroup::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAICategoryGroup::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAICategoryGroup::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAICategoryGroup::getId() const {
    return m_id;
}
void OAICategoryGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategoryGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoryGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoryGroup::getName() const {
    return m_name;
}
void OAICategoryGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoryGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryGroup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICategoryGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deleted_isValid && m_hidden_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
