/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveCategoryResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveCategoryResponse_data::OAISaveCategoryResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveCategoryResponse_data::OAISaveCategoryResponse_data() {
    this->initializeModel();
}

OAISaveCategoryResponse_data::~OAISaveCategoryResponse_data() {}

void OAISaveCategoryResponse_data::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;
}

void OAISaveCategoryResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveCategoryResponse_data::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;
}

QString OAISaveCategoryResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveCategoryResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    return obj;
}

OAICategory OAISaveCategoryResponse_data::getCategory() const {
    return m_category;
}
void OAISaveCategoryResponse_data::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISaveCategoryResponse_data::is_category_Set() const{
    return m_category_isSet;
}

bool OAISaveCategoryResponse_data::is_category_Valid() const{
    return m_category_isValid;
}

qint64 OAISaveCategoryResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAISaveCategoryResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAISaveCategoryResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAISaveCategoryResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

bool OAISaveCategoryResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveCategoryResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_server_knowledge_isValid && true;
}

} // namespace OpenAPI
