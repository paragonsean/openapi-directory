/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_budgeted_isSet = false;
    m_budgeted_isValid = false;

    m_category_group_id_isSet = false;
    m_category_group_id_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_goal_cadence_isSet = false;
    m_goal_cadence_isValid = false;

    m_goal_cadence_frequency_isSet = false;
    m_goal_cadence_frequency_isValid = false;

    m_goal_creation_month_isSet = false;
    m_goal_creation_month_isValid = false;

    m_goal_day_isSet = false;
    m_goal_day_isValid = false;

    m_goal_months_to_budget_isSet = false;
    m_goal_months_to_budget_isValid = false;

    m_goal_overall_funded_isSet = false;
    m_goal_overall_funded_isValid = false;

    m_goal_overall_left_isSet = false;
    m_goal_overall_left_isValid = false;

    m_goal_percentage_complete_isSet = false;
    m_goal_percentage_complete_isValid = false;

    m_goal_target_isSet = false;
    m_goal_target_isValid = false;

    m_goal_target_month_isSet = false;
    m_goal_target_month_isValid = false;

    m_goal_type_isSet = false;
    m_goal_type_isValid = false;

    m_goal_under_funded_isSet = false;
    m_goal_under_funded_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_original_category_group_id_isSet = false;
    m_original_category_group_id_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_budgeted_isValid = ::OpenAPI::fromJsonValue(m_budgeted, json[QString("budgeted")]);
    m_budgeted_isSet = !json[QString("budgeted")].isNull() && m_budgeted_isValid;

    m_category_group_id_isValid = ::OpenAPI::fromJsonValue(m_category_group_id, json[QString("category_group_id")]);
    m_category_group_id_isSet = !json[QString("category_group_id")].isNull() && m_category_group_id_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_goal_cadence_isValid = ::OpenAPI::fromJsonValue(m_goal_cadence, json[QString("goal_cadence")]);
    m_goal_cadence_isSet = !json[QString("goal_cadence")].isNull() && m_goal_cadence_isValid;

    m_goal_cadence_frequency_isValid = ::OpenAPI::fromJsonValue(m_goal_cadence_frequency, json[QString("goal_cadence_frequency")]);
    m_goal_cadence_frequency_isSet = !json[QString("goal_cadence_frequency")].isNull() && m_goal_cadence_frequency_isValid;

    m_goal_creation_month_isValid = ::OpenAPI::fromJsonValue(m_goal_creation_month, json[QString("goal_creation_month")]);
    m_goal_creation_month_isSet = !json[QString("goal_creation_month")].isNull() && m_goal_creation_month_isValid;

    m_goal_day_isValid = ::OpenAPI::fromJsonValue(m_goal_day, json[QString("goal_day")]);
    m_goal_day_isSet = !json[QString("goal_day")].isNull() && m_goal_day_isValid;

    m_goal_months_to_budget_isValid = ::OpenAPI::fromJsonValue(m_goal_months_to_budget, json[QString("goal_months_to_budget")]);
    m_goal_months_to_budget_isSet = !json[QString("goal_months_to_budget")].isNull() && m_goal_months_to_budget_isValid;

    m_goal_overall_funded_isValid = ::OpenAPI::fromJsonValue(m_goal_overall_funded, json[QString("goal_overall_funded")]);
    m_goal_overall_funded_isSet = !json[QString("goal_overall_funded")].isNull() && m_goal_overall_funded_isValid;

    m_goal_overall_left_isValid = ::OpenAPI::fromJsonValue(m_goal_overall_left, json[QString("goal_overall_left")]);
    m_goal_overall_left_isSet = !json[QString("goal_overall_left")].isNull() && m_goal_overall_left_isValid;

    m_goal_percentage_complete_isValid = ::OpenAPI::fromJsonValue(m_goal_percentage_complete, json[QString("goal_percentage_complete")]);
    m_goal_percentage_complete_isSet = !json[QString("goal_percentage_complete")].isNull() && m_goal_percentage_complete_isValid;

    m_goal_target_isValid = ::OpenAPI::fromJsonValue(m_goal_target, json[QString("goal_target")]);
    m_goal_target_isSet = !json[QString("goal_target")].isNull() && m_goal_target_isValid;

    m_goal_target_month_isValid = ::OpenAPI::fromJsonValue(m_goal_target_month, json[QString("goal_target_month")]);
    m_goal_target_month_isSet = !json[QString("goal_target_month")].isNull() && m_goal_target_month_isValid;

    m_goal_type_isValid = ::OpenAPI::fromJsonValue(m_goal_type, json[QString("goal_type")]);
    m_goal_type_isSet = !json[QString("goal_type")].isNull() && m_goal_type_isValid;

    m_goal_under_funded_isValid = ::OpenAPI::fromJsonValue(m_goal_under_funded, json[QString("goal_under_funded")]);
    m_goal_under_funded_isSet = !json[QString("goal_under_funded")].isNull() && m_goal_under_funded_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_original_category_group_id_isValid = ::OpenAPI::fromJsonValue(m_original_category_group_id, json[QString("original_category_group_id")]);
    m_original_category_group_id_isSet = !json[QString("original_category_group_id")].isNull() && m_original_category_group_id_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_budgeted_isSet) {
        obj.insert(QString("budgeted"), ::OpenAPI::toJsonValue(m_budgeted));
    }
    if (m_category_group_id_isSet) {
        obj.insert(QString("category_group_id"), ::OpenAPI::toJsonValue(m_category_group_id));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_goal_cadence_isSet) {
        obj.insert(QString("goal_cadence"), ::OpenAPI::toJsonValue(m_goal_cadence));
    }
    if (m_goal_cadence_frequency_isSet) {
        obj.insert(QString("goal_cadence_frequency"), ::OpenAPI::toJsonValue(m_goal_cadence_frequency));
    }
    if (m_goal_creation_month_isSet) {
        obj.insert(QString("goal_creation_month"), ::OpenAPI::toJsonValue(m_goal_creation_month));
    }
    if (m_goal_day_isSet) {
        obj.insert(QString("goal_day"), ::OpenAPI::toJsonValue(m_goal_day));
    }
    if (m_goal_months_to_budget_isSet) {
        obj.insert(QString("goal_months_to_budget"), ::OpenAPI::toJsonValue(m_goal_months_to_budget));
    }
    if (m_goal_overall_funded_isSet) {
        obj.insert(QString("goal_overall_funded"), ::OpenAPI::toJsonValue(m_goal_overall_funded));
    }
    if (m_goal_overall_left_isSet) {
        obj.insert(QString("goal_overall_left"), ::OpenAPI::toJsonValue(m_goal_overall_left));
    }
    if (m_goal_percentage_complete_isSet) {
        obj.insert(QString("goal_percentage_complete"), ::OpenAPI::toJsonValue(m_goal_percentage_complete));
    }
    if (m_goal_target_isSet) {
        obj.insert(QString("goal_target"), ::OpenAPI::toJsonValue(m_goal_target));
    }
    if (m_goal_target_month_isSet) {
        obj.insert(QString("goal_target_month"), ::OpenAPI::toJsonValue(m_goal_target_month));
    }
    if (m_goal_type_isSet) {
        obj.insert(QString("goal_type"), ::OpenAPI::toJsonValue(m_goal_type));
    }
    if (m_goal_under_funded_isSet) {
        obj.insert(QString("goal_under_funded"), ::OpenAPI::toJsonValue(m_goal_under_funded));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_original_category_group_id_isSet) {
        obj.insert(QString("original_category_group_id"), ::OpenAPI::toJsonValue(m_original_category_group_id));
    }
    return obj;
}

qint64 OAICategory::getActivity() const {
    return m_activity;
}
void OAICategory::setActivity(const qint64 &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAICategory::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAICategory::is_activity_Valid() const{
    return m_activity_isValid;
}

qint64 OAICategory::getBalance() const {
    return m_balance;
}
void OAICategory::setBalance(const qint64 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICategory::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICategory::is_balance_Valid() const{
    return m_balance_isValid;
}

qint64 OAICategory::getBudgeted() const {
    return m_budgeted;
}
void OAICategory::setBudgeted(const qint64 &budgeted) {
    m_budgeted = budgeted;
    m_budgeted_isSet = true;
}

bool OAICategory::is_budgeted_Set() const{
    return m_budgeted_isSet;
}

bool OAICategory::is_budgeted_Valid() const{
    return m_budgeted_isValid;
}

QString OAICategory::getCategoryGroupId() const {
    return m_category_group_id;
}
void OAICategory::setCategoryGroupId(const QString &category_group_id) {
    m_category_group_id = category_group_id;
    m_category_group_id_isSet = true;
}

bool OAICategory::is_category_group_id_Set() const{
    return m_category_group_id_isSet;
}

bool OAICategory::is_category_group_id_Valid() const{
    return m_category_group_id_isValid;
}

bool OAICategory::isDeleted() const {
    return m_deleted;
}
void OAICategory::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAICategory::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAICategory::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAICategory::getGoalCadence() const {
    return m_goal_cadence;
}
void OAICategory::setGoalCadence(const qint32 &goal_cadence) {
    m_goal_cadence = goal_cadence;
    m_goal_cadence_isSet = true;
}

bool OAICategory::is_goal_cadence_Set() const{
    return m_goal_cadence_isSet;
}

bool OAICategory::is_goal_cadence_Valid() const{
    return m_goal_cadence_isValid;
}

qint32 OAICategory::getGoalCadenceFrequency() const {
    return m_goal_cadence_frequency;
}
void OAICategory::setGoalCadenceFrequency(const qint32 &goal_cadence_frequency) {
    m_goal_cadence_frequency = goal_cadence_frequency;
    m_goal_cadence_frequency_isSet = true;
}

bool OAICategory::is_goal_cadence_frequency_Set() const{
    return m_goal_cadence_frequency_isSet;
}

bool OAICategory::is_goal_cadence_frequency_Valid() const{
    return m_goal_cadence_frequency_isValid;
}

QDate OAICategory::getGoalCreationMonth() const {
    return m_goal_creation_month;
}
void OAICategory::setGoalCreationMonth(const QDate &goal_creation_month) {
    m_goal_creation_month = goal_creation_month;
    m_goal_creation_month_isSet = true;
}

bool OAICategory::is_goal_creation_month_Set() const{
    return m_goal_creation_month_isSet;
}

bool OAICategory::is_goal_creation_month_Valid() const{
    return m_goal_creation_month_isValid;
}

qint32 OAICategory::getGoalDay() const {
    return m_goal_day;
}
void OAICategory::setGoalDay(const qint32 &goal_day) {
    m_goal_day = goal_day;
    m_goal_day_isSet = true;
}

bool OAICategory::is_goal_day_Set() const{
    return m_goal_day_isSet;
}

bool OAICategory::is_goal_day_Valid() const{
    return m_goal_day_isValid;
}

qint32 OAICategory::getGoalMonthsToBudget() const {
    return m_goal_months_to_budget;
}
void OAICategory::setGoalMonthsToBudget(const qint32 &goal_months_to_budget) {
    m_goal_months_to_budget = goal_months_to_budget;
    m_goal_months_to_budget_isSet = true;
}

bool OAICategory::is_goal_months_to_budget_Set() const{
    return m_goal_months_to_budget_isSet;
}

bool OAICategory::is_goal_months_to_budget_Valid() const{
    return m_goal_months_to_budget_isValid;
}

qint64 OAICategory::getGoalOverallFunded() const {
    return m_goal_overall_funded;
}
void OAICategory::setGoalOverallFunded(const qint64 &goal_overall_funded) {
    m_goal_overall_funded = goal_overall_funded;
    m_goal_overall_funded_isSet = true;
}

bool OAICategory::is_goal_overall_funded_Set() const{
    return m_goal_overall_funded_isSet;
}

bool OAICategory::is_goal_overall_funded_Valid() const{
    return m_goal_overall_funded_isValid;
}

qint64 OAICategory::getGoalOverallLeft() const {
    return m_goal_overall_left;
}
void OAICategory::setGoalOverallLeft(const qint64 &goal_overall_left) {
    m_goal_overall_left = goal_overall_left;
    m_goal_overall_left_isSet = true;
}

bool OAICategory::is_goal_overall_left_Set() const{
    return m_goal_overall_left_isSet;
}

bool OAICategory::is_goal_overall_left_Valid() const{
    return m_goal_overall_left_isValid;
}

qint32 OAICategory::getGoalPercentageComplete() const {
    return m_goal_percentage_complete;
}
void OAICategory::setGoalPercentageComplete(const qint32 &goal_percentage_complete) {
    m_goal_percentage_complete = goal_percentage_complete;
    m_goal_percentage_complete_isSet = true;
}

bool OAICategory::is_goal_percentage_complete_Set() const{
    return m_goal_percentage_complete_isSet;
}

bool OAICategory::is_goal_percentage_complete_Valid() const{
    return m_goal_percentage_complete_isValid;
}

qint64 OAICategory::getGoalTarget() const {
    return m_goal_target;
}
void OAICategory::setGoalTarget(const qint64 &goal_target) {
    m_goal_target = goal_target;
    m_goal_target_isSet = true;
}

bool OAICategory::is_goal_target_Set() const{
    return m_goal_target_isSet;
}

bool OAICategory::is_goal_target_Valid() const{
    return m_goal_target_isValid;
}

QDate OAICategory::getGoalTargetMonth() const {
    return m_goal_target_month;
}
void OAICategory::setGoalTargetMonth(const QDate &goal_target_month) {
    m_goal_target_month = goal_target_month;
    m_goal_target_month_isSet = true;
}

bool OAICategory::is_goal_target_month_Set() const{
    return m_goal_target_month_isSet;
}

bool OAICategory::is_goal_target_month_Valid() const{
    return m_goal_target_month_isValid;
}

QString OAICategory::getGoalType() const {
    return m_goal_type;
}
void OAICategory::setGoalType(const QString &goal_type) {
    m_goal_type = goal_type;
    m_goal_type_isSet = true;
}

bool OAICategory::is_goal_type_Set() const{
    return m_goal_type_isSet;
}

bool OAICategory::is_goal_type_Valid() const{
    return m_goal_type_isValid;
}

qint64 OAICategory::getGoalUnderFunded() const {
    return m_goal_under_funded;
}
void OAICategory::setGoalUnderFunded(const qint64 &goal_under_funded) {
    m_goal_under_funded = goal_under_funded;
    m_goal_under_funded_isSet = true;
}

bool OAICategory::is_goal_under_funded_Set() const{
    return m_goal_under_funded_isSet;
}

bool OAICategory::is_goal_under_funded_Valid() const{
    return m_goal_under_funded_isValid;
}

bool OAICategory::isHidden() const {
    return m_hidden;
}
void OAICategory::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAICategory::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAICategory::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategory::getName() const {
    return m_name;
}
void OAICategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategory::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICategory::getNote() const {
    return m_note;
}
void OAICategory::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICategory::is_note_Set() const{
    return m_note_isSet;
}

bool OAICategory::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICategory::getOriginalCategoryGroupId() const {
    return m_original_category_group_id;
}
void OAICategory::setOriginalCategoryGroupId(const QString &original_category_group_id) {
    m_original_category_group_id = original_category_group_id;
    m_original_category_group_id_isSet = true;
}

bool OAICategory::is_original_category_group_id_Set() const{
    return m_original_category_group_id_isSet;
}

bool OAICategory::is_original_category_group_id_Valid() const{
    return m_original_category_group_id_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budgeted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_cadence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_cadence_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_creation_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_months_to_budget_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_overall_funded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_overall_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_percentage_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_target_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_under_funded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_category_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_isValid && m_balance_isValid && m_budgeted_isValid && m_category_group_id_isValid && m_deleted_isValid && m_hidden_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
