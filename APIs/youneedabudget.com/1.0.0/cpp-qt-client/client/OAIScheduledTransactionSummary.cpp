/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledTransactionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledTransactionSummary::OAIScheduledTransactionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledTransactionSummary::OAIScheduledTransactionSummary() {
    this->initializeModel();
}

OAIScheduledTransactionSummary::~OAIScheduledTransactionSummary() {}

void OAIScheduledTransactionSummary::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_date_first_isSet = false;
    m_date_first_isValid = false;

    m_date_next_isSet = false;
    m_date_next_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_flag_color_isSet = false;
    m_flag_color_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_transfer_account_id_isSet = false;
    m_transfer_account_id_isValid = false;
}

void OAIScheduledTransactionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledTransactionSummary::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_date_first_isValid = ::OpenAPI::fromJsonValue(m_date_first, json[QString("date_first")]);
    m_date_first_isSet = !json[QString("date_first")].isNull() && m_date_first_isValid;

    m_date_next_isValid = ::OpenAPI::fromJsonValue(m_date_next, json[QString("date_next")]);
    m_date_next_isSet = !json[QString("date_next")].isNull() && m_date_next_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_flag_color_isValid = ::OpenAPI::fromJsonValue(m_flag_color, json[QString("flag_color")]);
    m_flag_color_isSet = !json[QString("flag_color")].isNull() && m_flag_color_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_transfer_account_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_account_id, json[QString("transfer_account_id")]);
    m_transfer_account_id_isSet = !json[QString("transfer_account_id")].isNull() && m_transfer_account_id_isValid;
}

QString OAIScheduledTransactionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledTransactionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_date_first_isSet) {
        obj.insert(QString("date_first"), ::OpenAPI::toJsonValue(m_date_first));
    }
    if (m_date_next_isSet) {
        obj.insert(QString("date_next"), ::OpenAPI::toJsonValue(m_date_next));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_flag_color_isSet) {
        obj.insert(QString("flag_color"), ::OpenAPI::toJsonValue(m_flag_color));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_transfer_account_id_isSet) {
        obj.insert(QString("transfer_account_id"), ::OpenAPI::toJsonValue(m_transfer_account_id));
    }
    return obj;
}

QString OAIScheduledTransactionSummary::getAccountId() const {
    return m_account_id;
}
void OAIScheduledTransactionSummary::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIScheduledTransactionSummary::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIScheduledTransactionSummary::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAIScheduledTransactionSummary::getAmount() const {
    return m_amount;
}
void OAIScheduledTransactionSummary::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIScheduledTransactionSummary::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIScheduledTransactionSummary::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIScheduledTransactionSummary::getCategoryId() const {
    return m_category_id;
}
void OAIScheduledTransactionSummary::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIScheduledTransactionSummary::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIScheduledTransactionSummary::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QDate OAIScheduledTransactionSummary::getDateFirst() const {
    return m_date_first;
}
void OAIScheduledTransactionSummary::setDateFirst(const QDate &date_first) {
    m_date_first = date_first;
    m_date_first_isSet = true;
}

bool OAIScheduledTransactionSummary::is_date_first_Set() const{
    return m_date_first_isSet;
}

bool OAIScheduledTransactionSummary::is_date_first_Valid() const{
    return m_date_first_isValid;
}

QDate OAIScheduledTransactionSummary::getDateNext() const {
    return m_date_next;
}
void OAIScheduledTransactionSummary::setDateNext(const QDate &date_next) {
    m_date_next = date_next;
    m_date_next_isSet = true;
}

bool OAIScheduledTransactionSummary::is_date_next_Set() const{
    return m_date_next_isSet;
}

bool OAIScheduledTransactionSummary::is_date_next_Valid() const{
    return m_date_next_isValid;
}

bool OAIScheduledTransactionSummary::isDeleted() const {
    return m_deleted;
}
void OAIScheduledTransactionSummary::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIScheduledTransactionSummary::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIScheduledTransactionSummary::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIScheduledTransactionSummary::getFlagColor() const {
    return m_flag_color;
}
void OAIScheduledTransactionSummary::setFlagColor(const QString &flag_color) {
    m_flag_color = flag_color;
    m_flag_color_isSet = true;
}

bool OAIScheduledTransactionSummary::is_flag_color_Set() const{
    return m_flag_color_isSet;
}

bool OAIScheduledTransactionSummary::is_flag_color_Valid() const{
    return m_flag_color_isValid;
}

QString OAIScheduledTransactionSummary::getFrequency() const {
    return m_frequency;
}
void OAIScheduledTransactionSummary::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIScheduledTransactionSummary::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIScheduledTransactionSummary::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIScheduledTransactionSummary::getId() const {
    return m_id;
}
void OAIScheduledTransactionSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduledTransactionSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduledTransactionSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScheduledTransactionSummary::getMemo() const {
    return m_memo;
}
void OAIScheduledTransactionSummary::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIScheduledTransactionSummary::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIScheduledTransactionSummary::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIScheduledTransactionSummary::getPayeeId() const {
    return m_payee_id;
}
void OAIScheduledTransactionSummary::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAIScheduledTransactionSummary::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAIScheduledTransactionSummary::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAIScheduledTransactionSummary::getTransferAccountId() const {
    return m_transfer_account_id;
}
void OAIScheduledTransactionSummary::setTransferAccountId(const QString &transfer_account_id) {
    m_transfer_account_id = transfer_account_id;
    m_transfer_account_id_isSet = true;
}

bool OAIScheduledTransactionSummary::is_transfer_account_id_Set() const{
    return m_transfer_account_id_isSet;
}

bool OAIScheduledTransactionSummary::is_transfer_account_id_Valid() const{
    return m_transfer_account_id_isValid;
}

bool OAIScheduledTransactionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledTransactionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_date_first_isValid && m_date_next_isValid && m_deleted_isValid && m_frequency_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
