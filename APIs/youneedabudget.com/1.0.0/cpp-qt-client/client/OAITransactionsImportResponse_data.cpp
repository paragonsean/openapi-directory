/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionsImportResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionsImportResponse_data::OAITransactionsImportResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionsImportResponse_data::OAITransactionsImportResponse_data() {
    this->initializeModel();
}

OAITransactionsImportResponse_data::~OAITransactionsImportResponse_data() {}

void OAITransactionsImportResponse_data::initializeModel() {

    m_transaction_ids_isSet = false;
    m_transaction_ids_isValid = false;
}

void OAITransactionsImportResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionsImportResponse_data::fromJsonObject(QJsonObject json) {

    m_transaction_ids_isValid = ::OpenAPI::fromJsonValue(m_transaction_ids, json[QString("transaction_ids")]);
    m_transaction_ids_isSet = !json[QString("transaction_ids")].isNull() && m_transaction_ids_isValid;
}

QString OAITransactionsImportResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionsImportResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_ids.size() > 0) {
        obj.insert(QString("transaction_ids"), ::OpenAPI::toJsonValue(m_transaction_ids));
    }
    return obj;
}

QList<QString> OAITransactionsImportResponse_data::getTransactionIds() const {
    return m_transaction_ids;
}
void OAITransactionsImportResponse_data::setTransactionIds(const QList<QString> &transaction_ids) {
    m_transaction_ids = transaction_ids;
    m_transaction_ids_isSet = true;
}

bool OAITransactionsImportResponse_data::is_transaction_ids_Set() const{
    return m_transaction_ids_isSet;
}

bool OAITransactionsImportResponse_data::is_transaction_ids_Valid() const{
    return m_transaction_ids_isValid;
}

bool OAITransactionsImportResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionsImportResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_ids_isValid && true;
}

} // namespace OpenAPI
