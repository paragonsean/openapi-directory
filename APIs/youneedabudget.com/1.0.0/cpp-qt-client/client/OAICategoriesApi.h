/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoriesApi_H
#define OAI_OAICategoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategoriesResponse.h"
#include "OAICategoryResponse.h"
#include "OAIErrorResponse.h"
#include "OAIPatchMonthCategoryWrapper.h"
#include "OAISaveCategoryResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoriesApi : public QObject {
    Q_OBJECT

public:
    OAICategoriesApi(const int timeOut = 0);
    ~OAICategoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getCategories(const QString &budget_id, const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void getCategoryById(const QString &budget_id, const QString &category_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  month QDate [required]
    * @param[in]  category_id QString [required]
    */
    virtual void getMonthCategoryById(const QString &budget_id, const QDate &month, const QString &category_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  month QDate [required]
    * @param[in]  category_id QString [required]
    * @param[in]  oai_patch_month_category_wrapper OAIPatchMonthCategoryWrapper [required]
    */
    virtual void updateMonthCategory(const QString &budget_id, const QDate &month, const QString &category_id, const OAIPatchMonthCategoryWrapper &oai_patch_month_category_wrapper);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCategoriesCallback(OAIHttpRequestWorker *worker);
    void getCategoryByIdCallback(OAIHttpRequestWorker *worker);
    void getMonthCategoryByIdCallback(OAIHttpRequestWorker *worker);
    void updateMonthCategoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCategoriesSignal(OAICategoriesResponse summary);
    void getCategoryByIdSignal(OAICategoryResponse summary);
    void getMonthCategoryByIdSignal(OAICategoryResponse summary);
    void updateMonthCategorySignal(OAISaveCategoryResponse summary);


    void getCategoriesSignalFull(OAIHttpRequestWorker *worker, OAICategoriesResponse summary);
    void getCategoryByIdSignalFull(OAIHttpRequestWorker *worker, OAICategoryResponse summary);
    void getMonthCategoryByIdSignalFull(OAIHttpRequestWorker *worker, OAICategoryResponse summary);
    void updateMonthCategorySignalFull(OAIHttpRequestWorker *worker, OAISaveCategoryResponse summary);

    Q_DECL_DEPRECATED_X("Use getCategoriesSignalError() instead")
    void getCategoriesSignalE(OAICategoriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesSignalError(OAICategoriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryByIdSignalError() instead")
    void getCategoryByIdSignalE(OAICategoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryByIdSignalError(OAICategoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonthCategoryByIdSignalError() instead")
    void getMonthCategoryByIdSignalE(OAICategoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonthCategoryByIdSignalError(OAICategoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMonthCategorySignalError() instead")
    void updateMonthCategorySignalE(OAISaveCategoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMonthCategorySignalError(OAISaveCategoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCategoriesSignalErrorFull() instead")
    void getCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryByIdSignalErrorFull() instead")
    void getCategoryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonthCategoryByIdSignalErrorFull() instead")
    void getMonthCategoryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonthCategoryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMonthCategorySignalErrorFull() instead")
    void updateMonthCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMonthCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
