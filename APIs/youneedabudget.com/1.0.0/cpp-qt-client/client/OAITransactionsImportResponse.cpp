/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionsImportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionsImportResponse::OAITransactionsImportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionsImportResponse::OAITransactionsImportResponse() {
    this->initializeModel();
}

OAITransactionsImportResponse::~OAITransactionsImportResponse() {}

void OAITransactionsImportResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAITransactionsImportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionsImportResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAITransactionsImportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionsImportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

OAITransactionsImportResponse_data OAITransactionsImportResponse::getData() const {
    return m_data;
}
void OAITransactionsImportResponse::setData(const OAITransactionsImportResponse_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAITransactionsImportResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAITransactionsImportResponse::is_data_Valid() const{
    return m_data_isValid;
}

bool OAITransactionsImportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionsImportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
