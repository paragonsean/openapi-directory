/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostTransactionsWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostTransactionsWrapper::OAIPostTransactionsWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostTransactionsWrapper::OAIPostTransactionsWrapper() {
    this->initializeModel();
}

OAIPostTransactionsWrapper::~OAIPostTransactionsWrapper() {}

void OAIPostTransactionsWrapper::initializeModel() {

    m_transaction_isSet = false;
    m_transaction_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIPostTransactionsWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostTransactionsWrapper::fromJsonObject(QJsonObject json) {

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIPostTransactionsWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostTransactionsWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

OAISaveTransaction OAIPostTransactionsWrapper::getTransaction() const {
    return m_transaction;
}
void OAIPostTransactionsWrapper::setTransaction(const OAISaveTransaction &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIPostTransactionsWrapper::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIPostTransactionsWrapper::is_transaction_Valid() const{
    return m_transaction_isValid;
}

QList<OAISaveTransaction> OAIPostTransactionsWrapper::getTransactions() const {
    return m_transactions;
}
void OAIPostTransactionsWrapper::setTransactions(const QList<OAISaveTransaction> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIPostTransactionsWrapper::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIPostTransactionsWrapper::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIPostTransactionsWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostTransactionsWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
