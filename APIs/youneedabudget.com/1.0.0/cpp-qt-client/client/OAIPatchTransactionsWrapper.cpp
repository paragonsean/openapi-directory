/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchTransactionsWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchTransactionsWrapper::OAIPatchTransactionsWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchTransactionsWrapper::OAIPatchTransactionsWrapper() {
    this->initializeModel();
}

OAIPatchTransactionsWrapper::~OAIPatchTransactionsWrapper() {}

void OAIPatchTransactionsWrapper::initializeModel() {

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIPatchTransactionsWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchTransactionsWrapper::fromJsonObject(QJsonObject json) {

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIPatchTransactionsWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchTransactionsWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

QList<OAISaveTransactionWithId> OAIPatchTransactionsWrapper::getTransactions() const {
    return m_transactions;
}
void OAIPatchTransactionsWrapper::setTransactions(const QList<OAISaveTransactionWithId> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIPatchTransactionsWrapper::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIPatchTransactionsWrapper::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIPatchTransactionsWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchTransactionsWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transactions_isValid && true;
}

} // namespace OpenAPI
