/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubTransaction::OAISubTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubTransaction::OAISubTransaction() {
    this->initializeModel();
}

OAISubTransaction::~OAISubTransaction() {}

void OAISubTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_transfer_account_id_isSet = false;
    m_transfer_account_id_isValid = false;

    m_transfer_transaction_id_isSet = false;
    m_transfer_transaction_id_isValid = false;
}

void OAISubTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("category_name")]);
    m_category_name_isSet = !json[QString("category_name")].isNull() && m_category_name_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_transfer_account_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_account_id, json[QString("transfer_account_id")]);
    m_transfer_account_id_isSet = !json[QString("transfer_account_id")].isNull() && m_transfer_account_id_isValid;

    m_transfer_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_transaction_id, json[QString("transfer_transaction_id")]);
    m_transfer_transaction_id_isSet = !json[QString("transfer_transaction_id")].isNull() && m_transfer_transaction_id_isValid;
}

QString OAISubTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("category_name"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_transfer_account_id_isSet) {
        obj.insert(QString("transfer_account_id"), ::OpenAPI::toJsonValue(m_transfer_account_id));
    }
    if (m_transfer_transaction_id_isSet) {
        obj.insert(QString("transfer_transaction_id"), ::OpenAPI::toJsonValue(m_transfer_transaction_id));
    }
    return obj;
}

qint64 OAISubTransaction::getAmount() const {
    return m_amount;
}
void OAISubTransaction::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISubTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISubTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAISubTransaction::getCategoryId() const {
    return m_category_id;
}
void OAISubTransaction::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAISubTransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAISubTransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAISubTransaction::getCategoryName() const {
    return m_category_name;
}
void OAISubTransaction::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAISubTransaction::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAISubTransaction::is_category_name_Valid() const{
    return m_category_name_isValid;
}

bool OAISubTransaction::isDeleted() const {
    return m_deleted;
}
void OAISubTransaction::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAISubTransaction::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAISubTransaction::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAISubTransaction::getId() const {
    return m_id;
}
void OAISubTransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubTransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubTransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubTransaction::getMemo() const {
    return m_memo;
}
void OAISubTransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAISubTransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAISubTransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAISubTransaction::getPayeeId() const {
    return m_payee_id;
}
void OAISubTransaction::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAISubTransaction::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAISubTransaction::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAISubTransaction::getPayeeName() const {
    return m_payee_name;
}
void OAISubTransaction::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAISubTransaction::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAISubTransaction::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QString OAISubTransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAISubTransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAISubTransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAISubTransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAISubTransaction::getTransferAccountId() const {
    return m_transfer_account_id;
}
void OAISubTransaction::setTransferAccountId(const QString &transfer_account_id) {
    m_transfer_account_id = transfer_account_id;
    m_transfer_account_id_isSet = true;
}

bool OAISubTransaction::is_transfer_account_id_Set() const{
    return m_transfer_account_id_isSet;
}

bool OAISubTransaction::is_transfer_account_id_Valid() const{
    return m_transfer_account_id_isValid;
}

QString OAISubTransaction::getTransferTransactionId() const {
    return m_transfer_transaction_id;
}
void OAISubTransaction::setTransferTransactionId(const QString &transfer_transaction_id) {
    m_transfer_transaction_id = transfer_transaction_id;
    m_transfer_transaction_id_isSet = true;
}

bool OAISubTransaction::is_transfer_transaction_id_Set() const{
    return m_transfer_transaction_id_isSet;
}

bool OAISubTransaction::is_transfer_transaction_id_Valid() const{
    return m_transfer_transaction_id_isValid;
}

bool OAISubTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_deleted_isValid && m_id_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
