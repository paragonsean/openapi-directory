/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryGroupWithCategories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryGroupWithCategories::OAICategoryGroupWithCategories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryGroupWithCategories::OAICategoryGroupWithCategories() {
    this->initializeModel();
}

OAICategoryGroupWithCategories::~OAICategoryGroupWithCategories() {}

void OAICategoryGroupWithCategories::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;
}

void OAICategoryGroupWithCategories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryGroupWithCategories::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;
}

QString OAICategoryGroupWithCategories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryGroupWithCategories::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    return obj;
}

bool OAICategoryGroupWithCategories::isDeleted() const {
    return m_deleted;
}
void OAICategoryGroupWithCategories::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAICategoryGroupWithCategories::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAICategoryGroupWithCategories::is_deleted_Valid() const{
    return m_deleted_isValid;
}

bool OAICategoryGroupWithCategories::isHidden() const {
    return m_hidden;
}
void OAICategoryGroupWithCategories::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAICategoryGroupWithCategories::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAICategoryGroupWithCategories::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAICategoryGroupWithCategories::getId() const {
    return m_id;
}
void OAICategoryGroupWithCategories::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategoryGroupWithCategories::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoryGroupWithCategories::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoryGroupWithCategories::getName() const {
    return m_name;
}
void OAICategoryGroupWithCategories::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoryGroupWithCategories::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryGroupWithCategories::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICategory> OAICategoryGroupWithCategories::getCategories() const {
    return m_categories;
}
void OAICategoryGroupWithCategories::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAICategoryGroupWithCategories::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAICategoryGroupWithCategories::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAICategoryGroupWithCategories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryGroupWithCategories::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deleted_isValid && m_hidden_isValid && m_id_isValid && m_name_isValid && m_categories_isValid && true;
}

} // namespace OpenAPI
