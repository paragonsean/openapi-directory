/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBudgetDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBudgetDetail::OAIBudgetDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBudgetDetail::OAIBudgetDetail() {
    this->initializeModel();
}

OAIBudgetDetail::~OAIBudgetDetail() {}

void OAIBudgetDetail::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_currency_format_isSet = false;
    m_currency_format_isValid = false;

    m_date_format_isSet = false;
    m_date_format_isValid = false;

    m_first_month_isSet = false;
    m_first_month_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_last_month_isSet = false;
    m_last_month_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_category_groups_isSet = false;
    m_category_groups_isValid = false;

    m_months_isSet = false;
    m_months_isValid = false;

    m_payee_locations_isSet = false;
    m_payee_locations_isValid = false;

    m_payees_isSet = false;
    m_payees_isValid = false;

    m_scheduled_subtransactions_isSet = false;
    m_scheduled_subtransactions_isValid = false;

    m_scheduled_transactions_isSet = false;
    m_scheduled_transactions_isValid = false;

    m_subtransactions_isSet = false;
    m_subtransactions_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIBudgetDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBudgetDetail::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_currency_format_isValid = ::OpenAPI::fromJsonValue(m_currency_format, json[QString("currency_format")]);
    m_currency_format_isSet = !json[QString("currency_format")].isNull() && m_currency_format_isValid;

    m_date_format_isValid = ::OpenAPI::fromJsonValue(m_date_format, json[QString("date_format")]);
    m_date_format_isSet = !json[QString("date_format")].isNull() && m_date_format_isValid;

    m_first_month_isValid = ::OpenAPI::fromJsonValue(m_first_month, json[QString("first_month")]);
    m_first_month_isSet = !json[QString("first_month")].isNull() && m_first_month_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("last_modified_on")]);
    m_last_modified_on_isSet = !json[QString("last_modified_on")].isNull() && m_last_modified_on_isValid;

    m_last_month_isValid = ::OpenAPI::fromJsonValue(m_last_month, json[QString("last_month")]);
    m_last_month_isSet = !json[QString("last_month")].isNull() && m_last_month_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_category_groups_isValid = ::OpenAPI::fromJsonValue(m_category_groups, json[QString("category_groups")]);
    m_category_groups_isSet = !json[QString("category_groups")].isNull() && m_category_groups_isValid;

    m_months_isValid = ::OpenAPI::fromJsonValue(m_months, json[QString("months")]);
    m_months_isSet = !json[QString("months")].isNull() && m_months_isValid;

    m_payee_locations_isValid = ::OpenAPI::fromJsonValue(m_payee_locations, json[QString("payee_locations")]);
    m_payee_locations_isSet = !json[QString("payee_locations")].isNull() && m_payee_locations_isValid;

    m_payees_isValid = ::OpenAPI::fromJsonValue(m_payees, json[QString("payees")]);
    m_payees_isSet = !json[QString("payees")].isNull() && m_payees_isValid;

    m_scheduled_subtransactions_isValid = ::OpenAPI::fromJsonValue(m_scheduled_subtransactions, json[QString("scheduled_subtransactions")]);
    m_scheduled_subtransactions_isSet = !json[QString("scheduled_subtransactions")].isNull() && m_scheduled_subtransactions_isValid;

    m_scheduled_transactions_isValid = ::OpenAPI::fromJsonValue(m_scheduled_transactions, json[QString("scheduled_transactions")]);
    m_scheduled_transactions_isSet = !json[QString("scheduled_transactions")].isNull() && m_scheduled_transactions_isValid;

    m_subtransactions_isValid = ::OpenAPI::fromJsonValue(m_subtransactions, json[QString("subtransactions")]);
    m_subtransactions_isSet = !json[QString("subtransactions")].isNull() && m_subtransactions_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIBudgetDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBudgetDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_currency_format.isSet()) {
        obj.insert(QString("currency_format"), ::OpenAPI::toJsonValue(m_currency_format));
    }
    if (m_date_format.isSet()) {
        obj.insert(QString("date_format"), ::OpenAPI::toJsonValue(m_date_format));
    }
    if (m_first_month_isSet) {
        obj.insert(QString("first_month"), ::OpenAPI::toJsonValue(m_first_month));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("last_modified_on"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_last_month_isSet) {
        obj.insert(QString("last_month"), ::OpenAPI::toJsonValue(m_last_month));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_category_groups.size() > 0) {
        obj.insert(QString("category_groups"), ::OpenAPI::toJsonValue(m_category_groups));
    }
    if (m_months.size() > 0) {
        obj.insert(QString("months"), ::OpenAPI::toJsonValue(m_months));
    }
    if (m_payee_locations.size() > 0) {
        obj.insert(QString("payee_locations"), ::OpenAPI::toJsonValue(m_payee_locations));
    }
    if (m_payees.size() > 0) {
        obj.insert(QString("payees"), ::OpenAPI::toJsonValue(m_payees));
    }
    if (m_scheduled_subtransactions.size() > 0) {
        obj.insert(QString("scheduled_subtransactions"), ::OpenAPI::toJsonValue(m_scheduled_subtransactions));
    }
    if (m_scheduled_transactions.size() > 0) {
        obj.insert(QString("scheduled_transactions"), ::OpenAPI::toJsonValue(m_scheduled_transactions));
    }
    if (m_subtransactions.size() > 0) {
        obj.insert(QString("subtransactions"), ::OpenAPI::toJsonValue(m_subtransactions));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

QList<OAIAccount> OAIBudgetDetail::getAccounts() const {
    return m_accounts;
}
void OAIBudgetDetail::setAccounts(const QList<OAIAccount> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIBudgetDetail::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIBudgetDetail::is_accounts_Valid() const{
    return m_accounts_isValid;
}

OAICurrencyFormat OAIBudgetDetail::getCurrencyFormat() const {
    return m_currency_format;
}
void OAIBudgetDetail::setCurrencyFormat(const OAICurrencyFormat &currency_format) {
    m_currency_format = currency_format;
    m_currency_format_isSet = true;
}

bool OAIBudgetDetail::is_currency_format_Set() const{
    return m_currency_format_isSet;
}

bool OAIBudgetDetail::is_currency_format_Valid() const{
    return m_currency_format_isValid;
}

OAIDateFormat OAIBudgetDetail::getDateFormat() const {
    return m_date_format;
}
void OAIBudgetDetail::setDateFormat(const OAIDateFormat &date_format) {
    m_date_format = date_format;
    m_date_format_isSet = true;
}

bool OAIBudgetDetail::is_date_format_Set() const{
    return m_date_format_isSet;
}

bool OAIBudgetDetail::is_date_format_Valid() const{
    return m_date_format_isValid;
}

QDate OAIBudgetDetail::getFirstMonth() const {
    return m_first_month;
}
void OAIBudgetDetail::setFirstMonth(const QDate &first_month) {
    m_first_month = first_month;
    m_first_month_isSet = true;
}

bool OAIBudgetDetail::is_first_month_Set() const{
    return m_first_month_isSet;
}

bool OAIBudgetDetail::is_first_month_Valid() const{
    return m_first_month_isValid;
}

QString OAIBudgetDetail::getId() const {
    return m_id;
}
void OAIBudgetDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBudgetDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBudgetDetail::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIBudgetDetail::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIBudgetDetail::setLastModifiedOn(const QDateTime &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIBudgetDetail::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIBudgetDetail::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QDate OAIBudgetDetail::getLastMonth() const {
    return m_last_month;
}
void OAIBudgetDetail::setLastMonth(const QDate &last_month) {
    m_last_month = last_month;
    m_last_month_isSet = true;
}

bool OAIBudgetDetail::is_last_month_Set() const{
    return m_last_month_isSet;
}

bool OAIBudgetDetail::is_last_month_Valid() const{
    return m_last_month_isValid;
}

QString OAIBudgetDetail::getName() const {
    return m_name;
}
void OAIBudgetDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBudgetDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBudgetDetail::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICategory> OAIBudgetDetail::getCategories() const {
    return m_categories;
}
void OAIBudgetDetail::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIBudgetDetail::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIBudgetDetail::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<OAICategoryGroup> OAIBudgetDetail::getCategoryGroups() const {
    return m_category_groups;
}
void OAIBudgetDetail::setCategoryGroups(const QList<OAICategoryGroup> &category_groups) {
    m_category_groups = category_groups;
    m_category_groups_isSet = true;
}

bool OAIBudgetDetail::is_category_groups_Set() const{
    return m_category_groups_isSet;
}

bool OAIBudgetDetail::is_category_groups_Valid() const{
    return m_category_groups_isValid;
}

QList<OAIMonthDetail> OAIBudgetDetail::getMonths() const {
    return m_months;
}
void OAIBudgetDetail::setMonths(const QList<OAIMonthDetail> &months) {
    m_months = months;
    m_months_isSet = true;
}

bool OAIBudgetDetail::is_months_Set() const{
    return m_months_isSet;
}

bool OAIBudgetDetail::is_months_Valid() const{
    return m_months_isValid;
}

QList<OAIPayeeLocation> OAIBudgetDetail::getPayeeLocations() const {
    return m_payee_locations;
}
void OAIBudgetDetail::setPayeeLocations(const QList<OAIPayeeLocation> &payee_locations) {
    m_payee_locations = payee_locations;
    m_payee_locations_isSet = true;
}

bool OAIBudgetDetail::is_payee_locations_Set() const{
    return m_payee_locations_isSet;
}

bool OAIBudgetDetail::is_payee_locations_Valid() const{
    return m_payee_locations_isValid;
}

QList<OAIPayee> OAIBudgetDetail::getPayees() const {
    return m_payees;
}
void OAIBudgetDetail::setPayees(const QList<OAIPayee> &payees) {
    m_payees = payees;
    m_payees_isSet = true;
}

bool OAIBudgetDetail::is_payees_Set() const{
    return m_payees_isSet;
}

bool OAIBudgetDetail::is_payees_Valid() const{
    return m_payees_isValid;
}

QList<OAIScheduledSubTransaction> OAIBudgetDetail::getScheduledSubtransactions() const {
    return m_scheduled_subtransactions;
}
void OAIBudgetDetail::setScheduledSubtransactions(const QList<OAIScheduledSubTransaction> &scheduled_subtransactions) {
    m_scheduled_subtransactions = scheduled_subtransactions;
    m_scheduled_subtransactions_isSet = true;
}

bool OAIBudgetDetail::is_scheduled_subtransactions_Set() const{
    return m_scheduled_subtransactions_isSet;
}

bool OAIBudgetDetail::is_scheduled_subtransactions_Valid() const{
    return m_scheduled_subtransactions_isValid;
}

QList<OAIScheduledTransactionSummary> OAIBudgetDetail::getScheduledTransactions() const {
    return m_scheduled_transactions;
}
void OAIBudgetDetail::setScheduledTransactions(const QList<OAIScheduledTransactionSummary> &scheduled_transactions) {
    m_scheduled_transactions = scheduled_transactions;
    m_scheduled_transactions_isSet = true;
}

bool OAIBudgetDetail::is_scheduled_transactions_Set() const{
    return m_scheduled_transactions_isSet;
}

bool OAIBudgetDetail::is_scheduled_transactions_Valid() const{
    return m_scheduled_transactions_isValid;
}

QList<OAISubTransaction> OAIBudgetDetail::getSubtransactions() const {
    return m_subtransactions;
}
void OAIBudgetDetail::setSubtransactions(const QList<OAISubTransaction> &subtransactions) {
    m_subtransactions = subtransactions;
    m_subtransactions_isSet = true;
}

bool OAIBudgetDetail::is_subtransactions_Set() const{
    return m_subtransactions_isSet;
}

bool OAIBudgetDetail::is_subtransactions_Valid() const{
    return m_subtransactions_isValid;
}

QList<OAITransactionSummary> OAIBudgetDetail::getTransactions() const {
    return m_transactions;
}
void OAIBudgetDetail::setTransactions(const QList<OAITransactionSummary> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIBudgetDetail::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIBudgetDetail::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIBudgetDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_months.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_subtransactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtransactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBudgetDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
