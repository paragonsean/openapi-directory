/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyFormat::OAICurrencyFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyFormat::OAICurrencyFormat() {
    this->initializeModel();
}

OAICurrencyFormat::~OAICurrencyFormat() {}

void OAICurrencyFormat::initializeModel() {

    m_currency_symbol_isSet = false;
    m_currency_symbol_isValid = false;

    m_decimal_digits_isSet = false;
    m_decimal_digits_isValid = false;

    m_decimal_separator_isSet = false;
    m_decimal_separator_isValid = false;

    m_display_symbol_isSet = false;
    m_display_symbol_isValid = false;

    m_example_format_isSet = false;
    m_example_format_isValid = false;

    m_group_separator_isSet = false;
    m_group_separator_isValid = false;

    m_iso_code_isSet = false;
    m_iso_code_isValid = false;

    m_symbol_first_isSet = false;
    m_symbol_first_isValid = false;
}

void OAICurrencyFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyFormat::fromJsonObject(QJsonObject json) {

    m_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_currency_symbol, json[QString("currency_symbol")]);
    m_currency_symbol_isSet = !json[QString("currency_symbol")].isNull() && m_currency_symbol_isValid;

    m_decimal_digits_isValid = ::OpenAPI::fromJsonValue(m_decimal_digits, json[QString("decimal_digits")]);
    m_decimal_digits_isSet = !json[QString("decimal_digits")].isNull() && m_decimal_digits_isValid;

    m_decimal_separator_isValid = ::OpenAPI::fromJsonValue(m_decimal_separator, json[QString("decimal_separator")]);
    m_decimal_separator_isSet = !json[QString("decimal_separator")].isNull() && m_decimal_separator_isValid;

    m_display_symbol_isValid = ::OpenAPI::fromJsonValue(m_display_symbol, json[QString("display_symbol")]);
    m_display_symbol_isSet = !json[QString("display_symbol")].isNull() && m_display_symbol_isValid;

    m_example_format_isValid = ::OpenAPI::fromJsonValue(m_example_format, json[QString("example_format")]);
    m_example_format_isSet = !json[QString("example_format")].isNull() && m_example_format_isValid;

    m_group_separator_isValid = ::OpenAPI::fromJsonValue(m_group_separator, json[QString("group_separator")]);
    m_group_separator_isSet = !json[QString("group_separator")].isNull() && m_group_separator_isValid;

    m_iso_code_isValid = ::OpenAPI::fromJsonValue(m_iso_code, json[QString("iso_code")]);
    m_iso_code_isSet = !json[QString("iso_code")].isNull() && m_iso_code_isValid;

    m_symbol_first_isValid = ::OpenAPI::fromJsonValue(m_symbol_first, json[QString("symbol_first")]);
    m_symbol_first_isSet = !json[QString("symbol_first")].isNull() && m_symbol_first_isValid;
}

QString OAICurrencyFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_symbol_isSet) {
        obj.insert(QString("currency_symbol"), ::OpenAPI::toJsonValue(m_currency_symbol));
    }
    if (m_decimal_digits_isSet) {
        obj.insert(QString("decimal_digits"), ::OpenAPI::toJsonValue(m_decimal_digits));
    }
    if (m_decimal_separator_isSet) {
        obj.insert(QString("decimal_separator"), ::OpenAPI::toJsonValue(m_decimal_separator));
    }
    if (m_display_symbol_isSet) {
        obj.insert(QString("display_symbol"), ::OpenAPI::toJsonValue(m_display_symbol));
    }
    if (m_example_format_isSet) {
        obj.insert(QString("example_format"), ::OpenAPI::toJsonValue(m_example_format));
    }
    if (m_group_separator_isSet) {
        obj.insert(QString("group_separator"), ::OpenAPI::toJsonValue(m_group_separator));
    }
    if (m_iso_code_isSet) {
        obj.insert(QString("iso_code"), ::OpenAPI::toJsonValue(m_iso_code));
    }
    if (m_symbol_first_isSet) {
        obj.insert(QString("symbol_first"), ::OpenAPI::toJsonValue(m_symbol_first));
    }
    return obj;
}

QString OAICurrencyFormat::getCurrencySymbol() const {
    return m_currency_symbol;
}
void OAICurrencyFormat::setCurrencySymbol(const QString &currency_symbol) {
    m_currency_symbol = currency_symbol;
    m_currency_symbol_isSet = true;
}

bool OAICurrencyFormat::is_currency_symbol_Set() const{
    return m_currency_symbol_isSet;
}

bool OAICurrencyFormat::is_currency_symbol_Valid() const{
    return m_currency_symbol_isValid;
}

qint32 OAICurrencyFormat::getDecimalDigits() const {
    return m_decimal_digits;
}
void OAICurrencyFormat::setDecimalDigits(const qint32 &decimal_digits) {
    m_decimal_digits = decimal_digits;
    m_decimal_digits_isSet = true;
}

bool OAICurrencyFormat::is_decimal_digits_Set() const{
    return m_decimal_digits_isSet;
}

bool OAICurrencyFormat::is_decimal_digits_Valid() const{
    return m_decimal_digits_isValid;
}

QString OAICurrencyFormat::getDecimalSeparator() const {
    return m_decimal_separator;
}
void OAICurrencyFormat::setDecimalSeparator(const QString &decimal_separator) {
    m_decimal_separator = decimal_separator;
    m_decimal_separator_isSet = true;
}

bool OAICurrencyFormat::is_decimal_separator_Set() const{
    return m_decimal_separator_isSet;
}

bool OAICurrencyFormat::is_decimal_separator_Valid() const{
    return m_decimal_separator_isValid;
}

bool OAICurrencyFormat::isDisplaySymbol() const {
    return m_display_symbol;
}
void OAICurrencyFormat::setDisplaySymbol(const bool &display_symbol) {
    m_display_symbol = display_symbol;
    m_display_symbol_isSet = true;
}

bool OAICurrencyFormat::is_display_symbol_Set() const{
    return m_display_symbol_isSet;
}

bool OAICurrencyFormat::is_display_symbol_Valid() const{
    return m_display_symbol_isValid;
}

QString OAICurrencyFormat::getExampleFormat() const {
    return m_example_format;
}
void OAICurrencyFormat::setExampleFormat(const QString &example_format) {
    m_example_format = example_format;
    m_example_format_isSet = true;
}

bool OAICurrencyFormat::is_example_format_Set() const{
    return m_example_format_isSet;
}

bool OAICurrencyFormat::is_example_format_Valid() const{
    return m_example_format_isValid;
}

QString OAICurrencyFormat::getGroupSeparator() const {
    return m_group_separator;
}
void OAICurrencyFormat::setGroupSeparator(const QString &group_separator) {
    m_group_separator = group_separator;
    m_group_separator_isSet = true;
}

bool OAICurrencyFormat::is_group_separator_Set() const{
    return m_group_separator_isSet;
}

bool OAICurrencyFormat::is_group_separator_Valid() const{
    return m_group_separator_isValid;
}

QString OAICurrencyFormat::getIsoCode() const {
    return m_iso_code;
}
void OAICurrencyFormat::setIsoCode(const QString &iso_code) {
    m_iso_code = iso_code;
    m_iso_code_isSet = true;
}

bool OAICurrencyFormat::is_iso_code_Set() const{
    return m_iso_code_isSet;
}

bool OAICurrencyFormat::is_iso_code_Valid() const{
    return m_iso_code_isValid;
}

bool OAICurrencyFormat::isSymbolFirst() const {
    return m_symbol_first;
}
void OAICurrencyFormat::setSymbolFirst(const bool &symbol_first) {
    m_symbol_first = symbol_first;
    m_symbol_first_isSet = true;
}

bool OAICurrencyFormat::is_symbol_first_Set() const{
    return m_symbol_first_isSet;
}

bool OAICurrencyFormat::is_symbol_first_Valid() const{
    return m_symbol_first_isValid;
}

bool OAICurrencyFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_first_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_symbol_isValid && m_decimal_digits_isValid && m_decimal_separator_isValid && m_display_symbol_isValid && m_example_format_isValid && m_group_separator_isValid && m_iso_code_isValid && m_symbol_first_isValid && true;
}

} // namespace OpenAPI
