/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveTransactionsResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveTransactionsResponse_data::OAISaveTransactionsResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveTransactionsResponse_data::OAISaveTransactionsResponse_data() {
    this->initializeModel();
}

OAISaveTransactionsResponse_data::~OAISaveTransactionsResponse_data() {}

void OAISaveTransactionsResponse_data::initializeModel() {

    m_duplicate_import_ids_isSet = false;
    m_duplicate_import_ids_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;

    m_transaction_ids_isSet = false;
    m_transaction_ids_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAISaveTransactionsResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveTransactionsResponse_data::fromJsonObject(QJsonObject json) {

    m_duplicate_import_ids_isValid = ::OpenAPI::fromJsonValue(m_duplicate_import_ids, json[QString("duplicate_import_ids")]);
    m_duplicate_import_ids_isSet = !json[QString("duplicate_import_ids")].isNull() && m_duplicate_import_ids_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;

    m_transaction_ids_isValid = ::OpenAPI::fromJsonValue(m_transaction_ids, json[QString("transaction_ids")]);
    m_transaction_ids_isSet = !json[QString("transaction_ids")].isNull() && m_transaction_ids_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAISaveTransactionsResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveTransactionsResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_duplicate_import_ids.size() > 0) {
        obj.insert(QString("duplicate_import_ids"), ::OpenAPI::toJsonValue(m_duplicate_import_ids));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    if (m_transaction_ids.size() > 0) {
        obj.insert(QString("transaction_ids"), ::OpenAPI::toJsonValue(m_transaction_ids));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

QList<QString> OAISaveTransactionsResponse_data::getDuplicateImportIds() const {
    return m_duplicate_import_ids;
}
void OAISaveTransactionsResponse_data::setDuplicateImportIds(const QList<QString> &duplicate_import_ids) {
    m_duplicate_import_ids = duplicate_import_ids;
    m_duplicate_import_ids_isSet = true;
}

bool OAISaveTransactionsResponse_data::is_duplicate_import_ids_Set() const{
    return m_duplicate_import_ids_isSet;
}

bool OAISaveTransactionsResponse_data::is_duplicate_import_ids_Valid() const{
    return m_duplicate_import_ids_isValid;
}

qint64 OAISaveTransactionsResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAISaveTransactionsResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAISaveTransactionsResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAISaveTransactionsResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

OAITransactionDetail OAISaveTransactionsResponse_data::getTransaction() const {
    return m_transaction;
}
void OAISaveTransactionsResponse_data::setTransaction(const OAITransactionDetail &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAISaveTransactionsResponse_data::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAISaveTransactionsResponse_data::is_transaction_Valid() const{
    return m_transaction_isValid;
}

QList<QString> OAISaveTransactionsResponse_data::getTransactionIds() const {
    return m_transaction_ids;
}
void OAISaveTransactionsResponse_data::setTransactionIds(const QList<QString> &transaction_ids) {
    m_transaction_ids = transaction_ids;
    m_transaction_ids_isSet = true;
}

bool OAISaveTransactionsResponse_data::is_transaction_ids_Set() const{
    return m_transaction_ids_isSet;
}

bool OAISaveTransactionsResponse_data::is_transaction_ids_Valid() const{
    return m_transaction_ids_isValid;
}

QList<OAITransactionDetail> OAISaveTransactionsResponse_data::getTransactions() const {
    return m_transactions;
}
void OAISaveTransactionsResponse_data::setTransactions(const QList<OAITransactionDetail> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAISaveTransactionsResponse_data::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAISaveTransactionsResponse_data::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAISaveTransactionsResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duplicate_import_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveTransactionsResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_knowledge_isValid && m_transaction_ids_isValid && true;
}

} // namespace OpenAPI
