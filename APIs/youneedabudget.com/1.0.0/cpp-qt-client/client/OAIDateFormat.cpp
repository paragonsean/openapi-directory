/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateFormat::OAIDateFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateFormat::OAIDateFormat() {
    this->initializeModel();
}

OAIDateFormat::~OAIDateFormat() {}

void OAIDateFormat::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIDateFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateFormat::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;
}

QString OAIDateFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIDateFormat::getFormat() const {
    return m_format;
}
void OAIDateFormat::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDateFormat::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDateFormat::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIDateFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && true;
}

} // namespace OpenAPI
