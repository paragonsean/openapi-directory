/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveSubTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveSubTransaction::OAISaveSubTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveSubTransaction::OAISaveSubTransaction() {
    this->initializeModel();
}

OAISaveSubTransaction::~OAISaveSubTransaction() {}

void OAISaveSubTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;
}

void OAISaveSubTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveSubTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;
}

QString OAISaveSubTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveSubTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    return obj;
}

qint64 OAISaveSubTransaction::getAmount() const {
    return m_amount;
}
void OAISaveSubTransaction::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISaveSubTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISaveSubTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAISaveSubTransaction::getCategoryId() const {
    return m_category_id;
}
void OAISaveSubTransaction::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAISaveSubTransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAISaveSubTransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAISaveSubTransaction::getMemo() const {
    return m_memo;
}
void OAISaveSubTransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAISaveSubTransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAISaveSubTransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAISaveSubTransaction::getPayeeId() const {
    return m_payee_id;
}
void OAISaveSubTransaction::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAISaveSubTransaction::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAISaveSubTransaction::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAISaveSubTransaction::getPayeeName() const {
    return m_payee_name;
}
void OAISaveSubTransaction::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAISaveSubTransaction::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAISaveSubTransaction::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

bool OAISaveSubTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveSubTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && true;
}

} // namespace OpenAPI
