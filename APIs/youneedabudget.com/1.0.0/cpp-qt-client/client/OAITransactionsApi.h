/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIHybridTransactionsResponse.h"
#include "OAIPatchTransactionsWrapper.h"
#include "OAIPostTransactionsWrapper.h"
#include "OAIPutTransactionWrapper.h"
#include "OAISaveTransactionsResponse.h"
#include "OAITransactionResponse.h"
#include "OAITransactionsImportResponse.h"
#include "OAITransactionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  oai_post_transactions_wrapper OAIPostTransactionsWrapper [required]
    */
    virtual void createTransaction(const QString &budget_id, const OAIPostTransactionsWrapper &oai_post_transactions_wrapper);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void deleteTransaction(const QString &budget_id, const QString &transaction_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void getTransactionById(const QString &budget_id, const QString &transaction_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  since_date QDate [optional]
    * @param[in]  type QString [optional]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getTransactions(const QString &budget_id, const ::OpenAPI::OptionalParam<QDate> &since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  since_date QDate [optional]
    * @param[in]  type QString [optional]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getTransactionsByAccount(const QString &budget_id, const QString &account_id, const ::OpenAPI::OptionalParam<QDate> &since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  category_id QString [required]
    * @param[in]  since_date QDate [optional]
    * @param[in]  type QString [optional]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getTransactionsByCategory(const QString &budget_id, const QString &category_id, const ::OpenAPI::OptionalParam<QDate> &since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  payee_id QString [required]
    * @param[in]  since_date QDate [optional]
    * @param[in]  type QString [optional]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getTransactionsByPayee(const QString &budget_id, const QString &payee_id, const ::OpenAPI::OptionalParam<QDate> &since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  budget_id QString [required]
    */
    virtual void importTransactions(const QString &budget_id);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_put_transaction_wrapper OAIPutTransactionWrapper [required]
    */
    virtual void updateTransaction(const QString &budget_id, const QString &transaction_id, const OAIPutTransactionWrapper &oai_put_transaction_wrapper);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  oai_patch_transactions_wrapper OAIPatchTransactionsWrapper [required]
    */
    virtual void updateTransactions(const QString &budget_id, const OAIPatchTransactionsWrapper &oai_patch_transactions_wrapper);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTransactionCallback(OAIHttpRequestWorker *worker);
    void deleteTransactionCallback(OAIHttpRequestWorker *worker);
    void getTransactionByIdCallback(OAIHttpRequestWorker *worker);
    void getTransactionsCallback(OAIHttpRequestWorker *worker);
    void getTransactionsByAccountCallback(OAIHttpRequestWorker *worker);
    void getTransactionsByCategoryCallback(OAIHttpRequestWorker *worker);
    void getTransactionsByPayeeCallback(OAIHttpRequestWorker *worker);
    void importTransactionsCallback(OAIHttpRequestWorker *worker);
    void updateTransactionCallback(OAIHttpRequestWorker *worker);
    void updateTransactionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTransactionSignal(OAISaveTransactionsResponse summary);
    void deleteTransactionSignal(OAITransactionResponse summary);
    void getTransactionByIdSignal(OAITransactionResponse summary);
    void getTransactionsSignal(OAITransactionsResponse summary);
    void getTransactionsByAccountSignal(OAITransactionsResponse summary);
    void getTransactionsByCategorySignal(OAIHybridTransactionsResponse summary);
    void getTransactionsByPayeeSignal(OAIHybridTransactionsResponse summary);
    void importTransactionsSignal(OAITransactionsImportResponse summary);
    void updateTransactionSignal(OAITransactionResponse summary);
    void updateTransactionsSignal(OAISaveTransactionsResponse summary);


    void createTransactionSignalFull(OAIHttpRequestWorker *worker, OAISaveTransactionsResponse summary);
    void deleteTransactionSignalFull(OAIHttpRequestWorker *worker, OAITransactionResponse summary);
    void getTransactionByIdSignalFull(OAIHttpRequestWorker *worker, OAITransactionResponse summary);
    void getTransactionsSignalFull(OAIHttpRequestWorker *worker, OAITransactionsResponse summary);
    void getTransactionsByAccountSignalFull(OAIHttpRequestWorker *worker, OAITransactionsResponse summary);
    void getTransactionsByCategorySignalFull(OAIHttpRequestWorker *worker, OAIHybridTransactionsResponse summary);
    void getTransactionsByPayeeSignalFull(OAIHttpRequestWorker *worker, OAIHybridTransactionsResponse summary);
    void importTransactionsSignalFull(OAIHttpRequestWorker *worker, OAITransactionsImportResponse summary);
    void updateTransactionSignalFull(OAIHttpRequestWorker *worker, OAITransactionResponse summary);
    void updateTransactionsSignalFull(OAIHttpRequestWorker *worker, OAISaveTransactionsResponse summary);

    Q_DECL_DEPRECATED_X("Use createTransactionSignalError() instead")
    void createTransactionSignalE(OAISaveTransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransactionSignalError(OAISaveTransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransactionSignalError() instead")
    void deleteTransactionSignalE(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransactionSignalError(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionByIdSignalError() instead")
    void getTransactionByIdSignalE(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionByIdSignalError(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsSignalError() instead")
    void getTransactionsSignalE(OAITransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsSignalError(OAITransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsByAccountSignalError() instead")
    void getTransactionsByAccountSignalE(OAITransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsByAccountSignalError(OAITransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsByCategorySignalError() instead")
    void getTransactionsByCategorySignalE(OAIHybridTransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsByCategorySignalError(OAIHybridTransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsByPayeeSignalError() instead")
    void getTransactionsByPayeeSignalE(OAIHybridTransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsByPayeeSignalError(OAIHybridTransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importTransactionsSignalError() instead")
    void importTransactionsSignalE(OAITransactionsImportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importTransactionsSignalError(OAITransactionsImportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionSignalError() instead")
    void updateTransactionSignalE(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionSignalError(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionsSignalError() instead")
    void updateTransactionsSignalE(OAISaveTransactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionsSignalError(OAISaveTransactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTransactionSignalErrorFull() instead")
    void createTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransactionSignalErrorFull() instead")
    void deleteTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionByIdSignalErrorFull() instead")
    void getTransactionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsSignalErrorFull() instead")
    void getTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsByAccountSignalErrorFull() instead")
    void getTransactionsByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsByCategorySignalErrorFull() instead")
    void getTransactionsByCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsByCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsByPayeeSignalErrorFull() instead")
    void getTransactionsByPayeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsByPayeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importTransactionsSignalErrorFull() instead")
    void importTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionSignalErrorFull() instead")
    void updateTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionsSignalErrorFull() instead")
    void updateTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
