/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledTransactionsResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledTransactionsResponse_data::OAIScheduledTransactionsResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledTransactionsResponse_data::OAIScheduledTransactionsResponse_data() {
    this->initializeModel();
}

OAIScheduledTransactionsResponse_data::~OAIScheduledTransactionsResponse_data() {}

void OAIScheduledTransactionsResponse_data::initializeModel() {

    m_scheduled_transactions_isSet = false;
    m_scheduled_transactions_isValid = false;

    m_server_knowledge_isSet = false;
    m_server_knowledge_isValid = false;
}

void OAIScheduledTransactionsResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledTransactionsResponse_data::fromJsonObject(QJsonObject json) {

    m_scheduled_transactions_isValid = ::OpenAPI::fromJsonValue(m_scheduled_transactions, json[QString("scheduled_transactions")]);
    m_scheduled_transactions_isSet = !json[QString("scheduled_transactions")].isNull() && m_scheduled_transactions_isValid;

    m_server_knowledge_isValid = ::OpenAPI::fromJsonValue(m_server_knowledge, json[QString("server_knowledge")]);
    m_server_knowledge_isSet = !json[QString("server_knowledge")].isNull() && m_server_knowledge_isValid;
}

QString OAIScheduledTransactionsResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledTransactionsResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_scheduled_transactions.size() > 0) {
        obj.insert(QString("scheduled_transactions"), ::OpenAPI::toJsonValue(m_scheduled_transactions));
    }
    if (m_server_knowledge_isSet) {
        obj.insert(QString("server_knowledge"), ::OpenAPI::toJsonValue(m_server_knowledge));
    }
    return obj;
}

QList<OAIScheduledTransactionDetail> OAIScheduledTransactionsResponse_data::getScheduledTransactions() const {
    return m_scheduled_transactions;
}
void OAIScheduledTransactionsResponse_data::setScheduledTransactions(const QList<OAIScheduledTransactionDetail> &scheduled_transactions) {
    m_scheduled_transactions = scheduled_transactions;
    m_scheduled_transactions_isSet = true;
}

bool OAIScheduledTransactionsResponse_data::is_scheduled_transactions_Set() const{
    return m_scheduled_transactions_isSet;
}

bool OAIScheduledTransactionsResponse_data::is_scheduled_transactions_Valid() const{
    return m_scheduled_transactions_isValid;
}

qint64 OAIScheduledTransactionsResponse_data::getServerKnowledge() const {
    return m_server_knowledge;
}
void OAIScheduledTransactionsResponse_data::setServerKnowledge(const qint64 &server_knowledge) {
    m_server_knowledge = server_knowledge;
    m_server_knowledge_isSet = true;
}

bool OAIScheduledTransactionsResponse_data::is_server_knowledge_Set() const{
    return m_server_knowledge_isSet;
}

bool OAIScheduledTransactionsResponse_data::is_server_knowledge_Valid() const{
    return m_server_knowledge_isValid;
}

bool OAIScheduledTransactionsResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheduled_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledTransactionsResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scheduled_transactions_isValid && m_server_knowledge_isValid && true;
}

} // namespace OpenAPI
