/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledTransactionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledTransactionDetail::OAIScheduledTransactionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledTransactionDetail::OAIScheduledTransactionDetail() {
    this->initializeModel();
}

OAIScheduledTransactionDetail::~OAIScheduledTransactionDetail() {}

void OAIScheduledTransactionDetail::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_date_first_isSet = false;
    m_date_first_isValid = false;

    m_date_next_isSet = false;
    m_date_next_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_flag_color_isSet = false;
    m_flag_color_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_payee_id_isSet = false;
    m_payee_id_isValid = false;

    m_transfer_account_id_isSet = false;
    m_transfer_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_subtransactions_isSet = false;
    m_subtransactions_isValid = false;
}

void OAIScheduledTransactionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledTransactionDetail::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_date_first_isValid = ::OpenAPI::fromJsonValue(m_date_first, json[QString("date_first")]);
    m_date_first_isSet = !json[QString("date_first")].isNull() && m_date_first_isValid;

    m_date_next_isValid = ::OpenAPI::fromJsonValue(m_date_next, json[QString("date_next")]);
    m_date_next_isSet = !json[QString("date_next")].isNull() && m_date_next_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_flag_color_isValid = ::OpenAPI::fromJsonValue(m_flag_color, json[QString("flag_color")]);
    m_flag_color_isSet = !json[QString("flag_color")].isNull() && m_flag_color_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_payee_id_isValid = ::OpenAPI::fromJsonValue(m_payee_id, json[QString("payee_id")]);
    m_payee_id_isSet = !json[QString("payee_id")].isNull() && m_payee_id_isValid;

    m_transfer_account_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_account_id, json[QString("transfer_account_id")]);
    m_transfer_account_id_isSet = !json[QString("transfer_account_id")].isNull() && m_transfer_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("account_name")]);
    m_account_name_isSet = !json[QString("account_name")].isNull() && m_account_name_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("category_name")]);
    m_category_name_isSet = !json[QString("category_name")].isNull() && m_category_name_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_subtransactions_isValid = ::OpenAPI::fromJsonValue(m_subtransactions, json[QString("subtransactions")]);
    m_subtransactions_isSet = !json[QString("subtransactions")].isNull() && m_subtransactions_isValid;
}

QString OAIScheduledTransactionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledTransactionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_date_first_isSet) {
        obj.insert(QString("date_first"), ::OpenAPI::toJsonValue(m_date_first));
    }
    if (m_date_next_isSet) {
        obj.insert(QString("date_next"), ::OpenAPI::toJsonValue(m_date_next));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_flag_color_isSet) {
        obj.insert(QString("flag_color"), ::OpenAPI::toJsonValue(m_flag_color));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_payee_id_isSet) {
        obj.insert(QString("payee_id"), ::OpenAPI::toJsonValue(m_payee_id));
    }
    if (m_transfer_account_id_isSet) {
        obj.insert(QString("transfer_account_id"), ::OpenAPI::toJsonValue(m_transfer_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("account_name"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("category_name"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_subtransactions.size() > 0) {
        obj.insert(QString("subtransactions"), ::OpenAPI::toJsonValue(m_subtransactions));
    }
    return obj;
}

QString OAIScheduledTransactionDetail::getAccountId() const {
    return m_account_id;
}
void OAIScheduledTransactionDetail::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIScheduledTransactionDetail::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIScheduledTransactionDetail::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAIScheduledTransactionDetail::getAmount() const {
    return m_amount;
}
void OAIScheduledTransactionDetail::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIScheduledTransactionDetail::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIScheduledTransactionDetail::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIScheduledTransactionDetail::getCategoryId() const {
    return m_category_id;
}
void OAIScheduledTransactionDetail::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIScheduledTransactionDetail::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIScheduledTransactionDetail::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QDate OAIScheduledTransactionDetail::getDateFirst() const {
    return m_date_first;
}
void OAIScheduledTransactionDetail::setDateFirst(const QDate &date_first) {
    m_date_first = date_first;
    m_date_first_isSet = true;
}

bool OAIScheduledTransactionDetail::is_date_first_Set() const{
    return m_date_first_isSet;
}

bool OAIScheduledTransactionDetail::is_date_first_Valid() const{
    return m_date_first_isValid;
}

QDate OAIScheduledTransactionDetail::getDateNext() const {
    return m_date_next;
}
void OAIScheduledTransactionDetail::setDateNext(const QDate &date_next) {
    m_date_next = date_next;
    m_date_next_isSet = true;
}

bool OAIScheduledTransactionDetail::is_date_next_Set() const{
    return m_date_next_isSet;
}

bool OAIScheduledTransactionDetail::is_date_next_Valid() const{
    return m_date_next_isValid;
}

bool OAIScheduledTransactionDetail::isDeleted() const {
    return m_deleted;
}
void OAIScheduledTransactionDetail::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIScheduledTransactionDetail::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIScheduledTransactionDetail::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIScheduledTransactionDetail::getFlagColor() const {
    return m_flag_color;
}
void OAIScheduledTransactionDetail::setFlagColor(const QString &flag_color) {
    m_flag_color = flag_color;
    m_flag_color_isSet = true;
}

bool OAIScheduledTransactionDetail::is_flag_color_Set() const{
    return m_flag_color_isSet;
}

bool OAIScheduledTransactionDetail::is_flag_color_Valid() const{
    return m_flag_color_isValid;
}

QString OAIScheduledTransactionDetail::getFrequency() const {
    return m_frequency;
}
void OAIScheduledTransactionDetail::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIScheduledTransactionDetail::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIScheduledTransactionDetail::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIScheduledTransactionDetail::getId() const {
    return m_id;
}
void OAIScheduledTransactionDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduledTransactionDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduledTransactionDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScheduledTransactionDetail::getMemo() const {
    return m_memo;
}
void OAIScheduledTransactionDetail::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIScheduledTransactionDetail::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIScheduledTransactionDetail::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIScheduledTransactionDetail::getPayeeId() const {
    return m_payee_id;
}
void OAIScheduledTransactionDetail::setPayeeId(const QString &payee_id) {
    m_payee_id = payee_id;
    m_payee_id_isSet = true;
}

bool OAIScheduledTransactionDetail::is_payee_id_Set() const{
    return m_payee_id_isSet;
}

bool OAIScheduledTransactionDetail::is_payee_id_Valid() const{
    return m_payee_id_isValid;
}

QString OAIScheduledTransactionDetail::getTransferAccountId() const {
    return m_transfer_account_id;
}
void OAIScheduledTransactionDetail::setTransferAccountId(const QString &transfer_account_id) {
    m_transfer_account_id = transfer_account_id;
    m_transfer_account_id_isSet = true;
}

bool OAIScheduledTransactionDetail::is_transfer_account_id_Set() const{
    return m_transfer_account_id_isSet;
}

bool OAIScheduledTransactionDetail::is_transfer_account_id_Valid() const{
    return m_transfer_account_id_isValid;
}

QString OAIScheduledTransactionDetail::getAccountName() const {
    return m_account_name;
}
void OAIScheduledTransactionDetail::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIScheduledTransactionDetail::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIScheduledTransactionDetail::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIScheduledTransactionDetail::getCategoryName() const {
    return m_category_name;
}
void OAIScheduledTransactionDetail::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIScheduledTransactionDetail::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIScheduledTransactionDetail::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAIScheduledTransactionDetail::getPayeeName() const {
    return m_payee_name;
}
void OAIScheduledTransactionDetail::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAIScheduledTransactionDetail::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAIScheduledTransactionDetail::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QList<OAIScheduledSubTransaction> OAIScheduledTransactionDetail::getSubtransactions() const {
    return m_subtransactions;
}
void OAIScheduledTransactionDetail::setSubtransactions(const QList<OAIScheduledSubTransaction> &subtransactions) {
    m_subtransactions = subtransactions;
    m_subtransactions_isSet = true;
}

bool OAIScheduledTransactionDetail::is_subtransactions_Set() const{
    return m_subtransactions_isSet;
}

bool OAIScheduledTransactionDetail::is_subtransactions_Valid() const{
    return m_subtransactions_isValid;
}

bool OAIScheduledTransactionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtransactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledTransactionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_date_first_isValid && m_date_next_isValid && m_deleted_isValid && m_frequency_isValid && m_id_isValid && m_account_name_isValid && m_subtransactions_isValid && true;
}

} // namespace OpenAPI
