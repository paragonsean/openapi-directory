/**
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMonthsApi_H
#define OAI_OAIMonthsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIMonthDetailResponse.h"
#include "OAIMonthSummariesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMonthsApi : public QObject {
    Q_OBJECT

public:
    OAIMonthsApi(const int timeOut = 0);
    ~OAIMonthsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  month QDate [required]
    */
    virtual void getBudgetMonth(const QString &budget_id, const QDate &month);

    /**
    * @param[in]  budget_id QString [required]
    * @param[in]  last_knowledge_of_server qint64 [optional]
    */
    virtual void getBudgetMonths(const QString &budget_id, const ::OpenAPI::OptionalParam<qint64> &last_knowledge_of_server = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBudgetMonthCallback(OAIHttpRequestWorker *worker);
    void getBudgetMonthsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBudgetMonthSignal(OAIMonthDetailResponse summary);
    void getBudgetMonthsSignal(OAIMonthSummariesResponse summary);


    void getBudgetMonthSignalFull(OAIHttpRequestWorker *worker, OAIMonthDetailResponse summary);
    void getBudgetMonthsSignalFull(OAIHttpRequestWorker *worker, OAIMonthSummariesResponse summary);

    Q_DECL_DEPRECATED_X("Use getBudgetMonthSignalError() instead")
    void getBudgetMonthSignalE(OAIMonthDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetMonthSignalError(OAIMonthDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBudgetMonthsSignalError() instead")
    void getBudgetMonthsSignalE(OAIMonthSummariesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetMonthsSignalError(OAIMonthSummariesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBudgetMonthSignalErrorFull() instead")
    void getBudgetMonthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetMonthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBudgetMonthsSignalErrorFull() instead")
    void getBudgetMonthsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBudgetMonthsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
