/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ScheduledSubTransaction;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScheduledTransactionDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:23.657307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduledTransactionDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private UUID accountId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private UUID categoryId;

  public static final String SERIALIZED_NAME_DATE_FIRST = "date_first";
  @SerializedName(SERIALIZED_NAME_DATE_FIRST)
  private LocalDate dateFirst;

  public static final String SERIALIZED_NAME_DATE_NEXT = "date_next";
  @SerializedName(SERIALIZED_NAME_DATE_NEXT)
  private LocalDate dateNext;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  /**
   * The scheduled transaction flag
   */
  @JsonAdapter(FlagColorEnum.Adapter.class)
  public enum FlagColorEnum {
    RED("red"),
    
    ORANGE("orange"),
    
    YELLOW("yellow"),
    
    GREEN("green"),
    
    BLUE("blue"),
    
    PURPLE("purple");

    private String value;

    FlagColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlagColorEnum fromValue(String value) {
      for (FlagColorEnum b : FlagColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FlagColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlagColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlagColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlagColorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlagColorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLAG_COLOR = "flag_color";
  @SerializedName(SERIALIZED_NAME_FLAG_COLOR)
  private FlagColorEnum flagColor;

  /**
   * Gets or Sets frequency
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    NEVER("never"),
    
    DAILY("daily"),
    
    WEEKLY("weekly"),
    
    EVERY_OTHER_WEEK("everyOtherWeek"),
    
    TWICE_A_MONTH("twiceAMonth"),
    
    EVERY4_WEEKS("every4Weeks"),
    
    MONTHLY("monthly"),
    
    EVERY_OTHER_MONTH("everyOtherMonth"),
    
    EVERY3_MONTHS("every3Months"),
    
    EVERY4_MONTHS("every4Months"),
    
    TWICE_A_YEAR("twiceAYear"),
    
    YEARLY("yearly"),
    
    EVERY_OTHER_YEAR("everyOtherYear");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_PAYEE_ID = "payee_id";
  @SerializedName(SERIALIZED_NAME_PAYEE_ID)
  private UUID payeeId;

  public static final String SERIALIZED_NAME_TRANSFER_ACCOUNT_ID = "transfer_account_id";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ACCOUNT_ID)
  private UUID transferAccountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "account_name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "category_name";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_PAYEE_NAME = "payee_name";
  @SerializedName(SERIALIZED_NAME_PAYEE_NAME)
  private String payeeName;

  public static final String SERIALIZED_NAME_SUBTRANSACTIONS = "subtransactions";
  @SerializedName(SERIALIZED_NAME_SUBTRANSACTIONS)
  private List<ScheduledSubTransaction> subtransactions = new ArrayList<>();

  public ScheduledTransactionDetail() {
  }

  public ScheduledTransactionDetail accountId(UUID accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public UUID getAccountId() {
    return accountId;
  }

  public void setAccountId(UUID accountId) {
    this.accountId = accountId;
  }


  public ScheduledTransactionDetail amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The scheduled transaction amount in milliunits format
   * @return amount
   */
  @javax.annotation.Nonnull
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public ScheduledTransactionDetail categoryId(UUID categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public UUID getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(UUID categoryId) {
    this.categoryId = categoryId;
  }


  public ScheduledTransactionDetail dateFirst(LocalDate dateFirst) {
    this.dateFirst = dateFirst;
    return this;
  }

  /**
   * The first date for which the Scheduled Transaction was scheduled.
   * @return dateFirst
   */
  @javax.annotation.Nonnull
  public LocalDate getDateFirst() {
    return dateFirst;
  }

  public void setDateFirst(LocalDate dateFirst) {
    this.dateFirst = dateFirst;
  }


  public ScheduledTransactionDetail dateNext(LocalDate dateNext) {
    this.dateNext = dateNext;
    return this;
  }

  /**
   * The next date for which the Scheduled Transaction is scheduled.
   * @return dateNext
   */
  @javax.annotation.Nonnull
  public LocalDate getDateNext() {
    return dateNext;
  }

  public void setDateNext(LocalDate dateNext) {
    this.dateNext = dateNext;
  }


  public ScheduledTransactionDetail deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
   * @return deleted
   */
  @javax.annotation.Nonnull
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ScheduledTransactionDetail flagColor(FlagColorEnum flagColor) {
    this.flagColor = flagColor;
    return this;
  }

  /**
   * The scheduled transaction flag
   * @return flagColor
   */
  @javax.annotation.Nullable
  public FlagColorEnum getFlagColor() {
    return flagColor;
  }

  public void setFlagColor(FlagColorEnum flagColor) {
    this.flagColor = flagColor;
  }


  public ScheduledTransactionDetail frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nonnull
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public ScheduledTransactionDetail id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ScheduledTransactionDetail memo(String memo) {
    this.memo = memo;
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  public ScheduledTransactionDetail payeeId(UUID payeeId) {
    this.payeeId = payeeId;
    return this;
  }

  /**
   * Get payeeId
   * @return payeeId
   */
  @javax.annotation.Nullable
  public UUID getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(UUID payeeId) {
    this.payeeId = payeeId;
  }


  public ScheduledTransactionDetail transferAccountId(UUID transferAccountId) {
    this.transferAccountId = transferAccountId;
    return this;
  }

  /**
   * If a transfer, the account_id which the scheduled transaction transfers to
   * @return transferAccountId
   */
  @javax.annotation.Nullable
  public UUID getTransferAccountId() {
    return transferAccountId;
  }

  public void setTransferAccountId(UUID transferAccountId) {
    this.transferAccountId = transferAccountId;
  }


  public ScheduledTransactionDetail accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nonnull
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public ScheduledTransactionDetail categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  /**
   * The name of the category.  If a split scheduled transaction, this will be &#39;Split&#39;.
   * @return categoryName
   */
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  public ScheduledTransactionDetail payeeName(String payeeName) {
    this.payeeName = payeeName;
    return this;
  }

  /**
   * Get payeeName
   * @return payeeName
   */
  @javax.annotation.Nullable
  public String getPayeeName() {
    return payeeName;
  }

  public void setPayeeName(String payeeName) {
    this.payeeName = payeeName;
  }


  public ScheduledTransactionDetail subtransactions(List<ScheduledSubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
    return this;
  }

  public ScheduledTransactionDetail addSubtransactionsItem(ScheduledSubTransaction subtransactionsItem) {
    if (this.subtransactions == null) {
      this.subtransactions = new ArrayList<>();
    }
    this.subtransactions.add(subtransactionsItem);
    return this;
  }

  /**
   * If a split scheduled transaction, the subtransactions.
   * @return subtransactions
   */
  @javax.annotation.Nonnull
  public List<ScheduledSubTransaction> getSubtransactions() {
    return subtransactions;
  }

  public void setSubtransactions(List<ScheduledSubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledTransactionDetail scheduledTransactionDetail = (ScheduledTransactionDetail) o;
    return Objects.equals(this.accountId, scheduledTransactionDetail.accountId) &&
        Objects.equals(this.amount, scheduledTransactionDetail.amount) &&
        Objects.equals(this.categoryId, scheduledTransactionDetail.categoryId) &&
        Objects.equals(this.dateFirst, scheduledTransactionDetail.dateFirst) &&
        Objects.equals(this.dateNext, scheduledTransactionDetail.dateNext) &&
        Objects.equals(this.deleted, scheduledTransactionDetail.deleted) &&
        Objects.equals(this.flagColor, scheduledTransactionDetail.flagColor) &&
        Objects.equals(this.frequency, scheduledTransactionDetail.frequency) &&
        Objects.equals(this.id, scheduledTransactionDetail.id) &&
        Objects.equals(this.memo, scheduledTransactionDetail.memo) &&
        Objects.equals(this.payeeId, scheduledTransactionDetail.payeeId) &&
        Objects.equals(this.transferAccountId, scheduledTransactionDetail.transferAccountId) &&
        Objects.equals(this.accountName, scheduledTransactionDetail.accountName) &&
        Objects.equals(this.categoryName, scheduledTransactionDetail.categoryName) &&
        Objects.equals(this.payeeName, scheduledTransactionDetail.payeeName) &&
        Objects.equals(this.subtransactions, scheduledTransactionDetail.subtransactions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, amount, categoryId, dateFirst, dateNext, deleted, flagColor, frequency, id, memo, payeeId, transferAccountId, accountName, categoryName, payeeName, subtransactions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledTransactionDetail {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    dateFirst: ").append(toIndentedString(dateFirst)).append("\n");
    sb.append("    dateNext: ").append(toIndentedString(dateNext)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    transferAccountId: ").append(toIndentedString(transferAccountId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    subtransactions: ").append(toIndentedString(subtransactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("amount");
    openapiFields.add("category_id");
    openapiFields.add("date_first");
    openapiFields.add("date_next");
    openapiFields.add("deleted");
    openapiFields.add("flag_color");
    openapiFields.add("frequency");
    openapiFields.add("id");
    openapiFields.add("memo");
    openapiFields.add("payee_id");
    openapiFields.add("transfer_account_id");
    openapiFields.add("account_name");
    openapiFields.add("category_name");
    openapiFields.add("payee_name");
    openapiFields.add("subtransactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("date_first");
    openapiRequiredFields.add("date_next");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("account_name");
    openapiRequiredFields.add("subtransactions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduledTransactionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduledTransactionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledTransactionDetail is not found in the empty JSON string", ScheduledTransactionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduledTransactionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledTransactionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledTransactionDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      if ((jsonObj.get("flag_color") != null && !jsonObj.get("flag_color").isJsonNull()) && !jsonObj.get("flag_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flag_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flag_color").toString()));
      }
      // validate the optional field `flag_color`
      if (jsonObj.get("flag_color") != null && !jsonObj.get("flag_color").isJsonNull()) {
        FlagColorEnum.validateJsonElement(jsonObj.get("flag_color"));
      }
      if (!jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // validate the required field `frequency`
      FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("payee_id") != null && !jsonObj.get("payee_id").isJsonNull()) && !jsonObj.get("payee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_id").toString()));
      }
      if ((jsonObj.get("transfer_account_id") != null && !jsonObj.get("transfer_account_id").isJsonNull()) && !jsonObj.get("transfer_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_account_id").toString()));
      }
      if (!jsonObj.get("account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_name").toString()));
      }
      if ((jsonObj.get("category_name") != null && !jsonObj.get("category_name").isJsonNull()) && !jsonObj.get("category_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_name").toString()));
      }
      if ((jsonObj.get("payee_name") != null && !jsonObj.get("payee_name").isJsonNull()) && !jsonObj.get("payee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee_name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("subtransactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtransactions` to be an array in the JSON string but got `%s`", jsonObj.get("subtransactions").toString()));
      }

      JsonArray jsonArraysubtransactions = jsonObj.getAsJsonArray("subtransactions");
      // validate the required field `subtransactions` (array)
      for (int i = 0; i < jsonArraysubtransactions.size(); i++) {
        ScheduledSubTransaction.validateJsonElement(jsonArraysubtransactions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledTransactionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledTransactionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledTransactionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledTransactionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledTransactionDetail>() {
           @Override
           public void write(JsonWriter out, ScheduledTransactionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledTransactionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduledTransactionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduledTransactionDetail
   * @throws IOException if the JSON string is invalid with respect to ScheduledTransactionDetail
   */
  public static ScheduledTransactionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledTransactionDetail.class);
  }

  /**
   * Convert an instance of ScheduledTransactionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

