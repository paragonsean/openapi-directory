/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PayeeLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayeeLocationResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:23.657307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayeeLocationResponseData {
  public static final String SERIALIZED_NAME_PAYEE_LOCATION = "payee_location";
  @SerializedName(SERIALIZED_NAME_PAYEE_LOCATION)
  private PayeeLocation payeeLocation;

  public PayeeLocationResponseData() {
  }

  public PayeeLocationResponseData payeeLocation(PayeeLocation payeeLocation) {
    this.payeeLocation = payeeLocation;
    return this;
  }

  /**
   * Get payeeLocation
   * @return payeeLocation
   */
  @javax.annotation.Nonnull
  public PayeeLocation getPayeeLocation() {
    return payeeLocation;
  }

  public void setPayeeLocation(PayeeLocation payeeLocation) {
    this.payeeLocation = payeeLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayeeLocationResponseData payeeLocationResponseData = (PayeeLocationResponseData) o;
    return Objects.equals(this.payeeLocation, payeeLocationResponseData.payeeLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payeeLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayeeLocationResponseData {\n");
    sb.append("    payeeLocation: ").append(toIndentedString(payeeLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payee_location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payee_location");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayeeLocationResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayeeLocationResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayeeLocationResponseData is not found in the empty JSON string", PayeeLocationResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayeeLocationResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayeeLocationResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayeeLocationResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `payee_location`
      PayeeLocation.validateJsonElement(jsonObj.get("payee_location"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayeeLocationResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayeeLocationResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayeeLocationResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayeeLocationResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<PayeeLocationResponseData>() {
           @Override
           public void write(JsonWriter out, PayeeLocationResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayeeLocationResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayeeLocationResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayeeLocationResponseData
   * @throws IOException if the JSON string is invalid with respect to PayeeLocationResponseData
   */
  public static PayeeLocationResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayeeLocationResponseData.class);
  }

  /**
   * Convert an instance of PayeeLocationResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

