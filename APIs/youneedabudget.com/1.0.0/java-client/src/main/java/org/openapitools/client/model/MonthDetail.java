/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MonthDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:23.657307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonthDetail {
  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private Long activity;

  public static final String SERIALIZED_NAME_AGE_OF_MONEY = "age_of_money";
  @SerializedName(SERIALIZED_NAME_AGE_OF_MONEY)
  private Integer ageOfMoney;

  public static final String SERIALIZED_NAME_BUDGETED = "budgeted";
  @SerializedName(SERIALIZED_NAME_BUDGETED)
  private Long budgeted;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private Long income;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private LocalDate month;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_TO_BE_BUDGETED = "to_be_budgeted";
  @SerializedName(SERIALIZED_NAME_TO_BE_BUDGETED)
  private Long toBeBudgeted;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public MonthDetail() {
  }

  public MonthDetail activity(Long activity) {
    this.activity = activity;
    return this;
  }

  /**
   * The total amount of transactions in the month, excluding those categorized to &#39;Inflow: Ready to Assign&#39;
   * @return activity
   */
  @javax.annotation.Nonnull
  public Long getActivity() {
    return activity;
  }

  public void setActivity(Long activity) {
    this.activity = activity;
  }


  public MonthDetail ageOfMoney(Integer ageOfMoney) {
    this.ageOfMoney = ageOfMoney;
    return this;
  }

  /**
   * The Age of Money as of the month
   * @return ageOfMoney
   */
  @javax.annotation.Nullable
  public Integer getAgeOfMoney() {
    return ageOfMoney;
  }

  public void setAgeOfMoney(Integer ageOfMoney) {
    this.ageOfMoney = ageOfMoney;
  }


  public MonthDetail budgeted(Long budgeted) {
    this.budgeted = budgeted;
    return this;
  }

  /**
   * The total amount budgeted in the month
   * @return budgeted
   */
  @javax.annotation.Nonnull
  public Long getBudgeted() {
    return budgeted;
  }

  public void setBudgeted(Long budgeted) {
    this.budgeted = budgeted;
  }


  public MonthDetail deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
   * @return deleted
   */
  @javax.annotation.Nonnull
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public MonthDetail income(Long income) {
    this.income = income;
    return this;
  }

  /**
   * The total amount of transactions categorized to &#39;Inflow: Ready to Assign&#39; in the month
   * @return income
   */
  @javax.annotation.Nonnull
  public Long getIncome() {
    return income;
  }

  public void setIncome(Long income) {
    this.income = income;
  }


  public MonthDetail month(LocalDate month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nonnull
  public LocalDate getMonth() {
    return month;
  }

  public void setMonth(LocalDate month) {
    this.month = month;
  }


  public MonthDetail note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public MonthDetail toBeBudgeted(Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
    return this;
  }

  /**
   * The available amount for &#39;Ready to Assign&#39;
   * @return toBeBudgeted
   */
  @javax.annotation.Nonnull
  public Long getToBeBudgeted() {
    return toBeBudgeted;
  }

  public void setToBeBudgeted(Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
  }


  public MonthDetail categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public MonthDetail addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonthDetail monthDetail = (MonthDetail) o;
    return Objects.equals(this.activity, monthDetail.activity) &&
        Objects.equals(this.ageOfMoney, monthDetail.ageOfMoney) &&
        Objects.equals(this.budgeted, monthDetail.budgeted) &&
        Objects.equals(this.deleted, monthDetail.deleted) &&
        Objects.equals(this.income, monthDetail.income) &&
        Objects.equals(this.month, monthDetail.month) &&
        Objects.equals(this.note, monthDetail.note) &&
        Objects.equals(this.toBeBudgeted, monthDetail.toBeBudgeted) &&
        Objects.equals(this.categories, monthDetail.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, ageOfMoney, budgeted, deleted, income, month, note, toBeBudgeted, categories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonthDetail {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    ageOfMoney: ").append(toIndentedString(ageOfMoney)).append("\n");
    sb.append("    budgeted: ").append(toIndentedString(budgeted)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    toBeBudgeted: ").append(toIndentedString(toBeBudgeted)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("age_of_money");
    openapiFields.add("budgeted");
    openapiFields.add("deleted");
    openapiFields.add("income");
    openapiFields.add("month");
    openapiFields.add("note");
    openapiFields.add("to_be_budgeted");
    openapiFields.add("categories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activity");
    openapiRequiredFields.add("budgeted");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("income");
    openapiRequiredFields.add("month");
    openapiRequiredFields.add("to_be_budgeted");
    openapiRequiredFields.add("categories");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonthDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonthDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonthDetail is not found in the empty JSON string", MonthDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonthDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonthDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MonthDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonElement(jsonArraycategories.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonthDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonthDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonthDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonthDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<MonthDetail>() {
           @Override
           public void write(JsonWriter out, MonthDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonthDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonthDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonthDetail
   * @throws IOException if the JSON string is invalid with respect to MonthDetail
   */
  public static MonthDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonthDetail.class);
  }

  /**
   * Convert an instance of MonthDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

