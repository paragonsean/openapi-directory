# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_format import CurrencyFormat
from openapi_server.models.date_format import DateFormat
from openapi_server import util


class BudgetSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_format: CurrencyFormat=None, date_format: DateFormat=None):
        """BudgetSettings - a model defined in OpenAPI

        :param currency_format: The currency_format of this BudgetSettings.
        :param date_format: The date_format of this BudgetSettings.
        """
        self.openapi_types = {
            'currency_format': CurrencyFormat,
            'date_format': DateFormat
        }

        self.attribute_map = {
            'currency_format': 'currency_format',
            'date_format': 'date_format'
        }

        self._currency_format = currency_format
        self._date_format = date_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetSettings of this BudgetSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_format(self):
        """Gets the currency_format of this BudgetSettings.


        :return: The currency_format of this BudgetSettings.
        :rtype: CurrencyFormat
        """
        return self._currency_format

    @currency_format.setter
    def currency_format(self, currency_format):
        """Sets the currency_format of this BudgetSettings.


        :param currency_format: The currency_format of this BudgetSettings.
        :type currency_format: CurrencyFormat
        """
        if currency_format is None:
            raise ValueError("Invalid value for `currency_format`, must not be `None`")

        self._currency_format = currency_format

    @property
    def date_format(self):
        """Gets the date_format of this BudgetSettings.


        :return: The date_format of this BudgetSettings.
        :rtype: DateFormat
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this BudgetSettings.


        :param date_format: The date_format of this BudgetSettings.
        :type date_format: DateFormat
        """
        if date_format is None:
            raise ValueError("Invalid value for `date_format`, must not be `None`")

        self._date_format = date_format
