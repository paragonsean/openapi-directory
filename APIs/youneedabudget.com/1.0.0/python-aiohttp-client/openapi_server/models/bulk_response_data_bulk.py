# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BulkResponseDataBulk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duplicate_import_ids: List[str]=None, transaction_ids: List[str]=None):
        """BulkResponseDataBulk - a model defined in OpenAPI

        :param duplicate_import_ids: The duplicate_import_ids of this BulkResponseDataBulk.
        :param transaction_ids: The transaction_ids of this BulkResponseDataBulk.
        """
        self.openapi_types = {
            'duplicate_import_ids': List[str],
            'transaction_ids': List[str]
        }

        self.attribute_map = {
            'duplicate_import_ids': 'duplicate_import_ids',
            'transaction_ids': 'transaction_ids'
        }

        self._duplicate_import_ids = duplicate_import_ids
        self._transaction_ids = transaction_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BulkResponseDataBulk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BulkResponse_data_bulk of this BulkResponseDataBulk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duplicate_import_ids(self):
        """Gets the duplicate_import_ids of this BulkResponseDataBulk.

        If any Transactions were not created because they had an `import_id` matching a transaction already on the same account, the specified import_id(s) will be included in this list.

        :return: The duplicate_import_ids of this BulkResponseDataBulk.
        :rtype: List[str]
        """
        return self._duplicate_import_ids

    @duplicate_import_ids.setter
    def duplicate_import_ids(self, duplicate_import_ids):
        """Sets the duplicate_import_ids of this BulkResponseDataBulk.

        If any Transactions were not created because they had an `import_id` matching a transaction already on the same account, the specified import_id(s) will be included in this list.

        :param duplicate_import_ids: The duplicate_import_ids of this BulkResponseDataBulk.
        :type duplicate_import_ids: List[str]
        """
        if duplicate_import_ids is None:
            raise ValueError("Invalid value for `duplicate_import_ids`, must not be `None`")

        self._duplicate_import_ids = duplicate_import_ids

    @property
    def transaction_ids(self):
        """Gets the transaction_ids of this BulkResponseDataBulk.

        The list of Transaction ids that were created.

        :return: The transaction_ids of this BulkResponseDataBulk.
        :rtype: List[str]
        """
        return self._transaction_ids

    @transaction_ids.setter
    def transaction_ids(self, transaction_ids):
        """Sets the transaction_ids of this BulkResponseDataBulk.

        The list of Transaction ids that were created.

        :param transaction_ids: The transaction_ids of this BulkResponseDataBulk.
        :type transaction_ids: List[str]
        """
        if transaction_ids is None:
            raise ValueError("Invalid value for `transaction_ids`, must not be `None`")

        self._transaction_ids = transaction_ids
