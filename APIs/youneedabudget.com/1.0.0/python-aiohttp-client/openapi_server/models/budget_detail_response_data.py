# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.budget_detail import BudgetDetail
from openapi_server import util


class BudgetDetailResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget: BudgetDetail=None, server_knowledge: int=None):
        """BudgetDetailResponseData - a model defined in OpenAPI

        :param budget: The budget of this BudgetDetailResponseData.
        :param server_knowledge: The server_knowledge of this BudgetDetailResponseData.
        """
        self.openapi_types = {
            'budget': BudgetDetail,
            'server_knowledge': int
        }

        self.attribute_map = {
            'budget': 'budget',
            'server_knowledge': 'server_knowledge'
        }

        self._budget = budget
        self._server_knowledge = server_knowledge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetDetailResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetDetailResponse_data of this BudgetDetailResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget(self):
        """Gets the budget of this BudgetDetailResponseData.


        :return: The budget of this BudgetDetailResponseData.
        :rtype: BudgetDetail
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this BudgetDetailResponseData.


        :param budget: The budget of this BudgetDetailResponseData.
        :type budget: BudgetDetail
        """
        if budget is None:
            raise ValueError("Invalid value for `budget`, must not be `None`")

        self._budget = budget

    @property
    def server_knowledge(self):
        """Gets the server_knowledge of this BudgetDetailResponseData.

        The knowledge of the server

        :return: The server_knowledge of this BudgetDetailResponseData.
        :rtype: int
        """
        return self._server_knowledge

    @server_knowledge.setter
    def server_knowledge(self, server_knowledge):
        """Sets the server_knowledge of this BudgetDetailResponseData.

        The knowledge of the server

        :param server_knowledge: The server_knowledge of this BudgetDetailResponseData.
        :type server_knowledge: int
        """
        if server_knowledge is None:
            raise ValueError("Invalid value for `server_knowledge`, must not be `None`")

        self._server_knowledge = server_knowledge
