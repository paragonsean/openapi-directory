# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_type import AccountType
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: int=None, cleared_balance: int=None, closed: bool=None, debt_escrow_amounts: Dict[str, int]=None, debt_interest_rates: Dict[str, int]=None, debt_minimum_payments: Dict[str, int]=None, debt_original_balance: int=None, deleted: bool=None, direct_import_in_error: bool=None, direct_import_linked: bool=None, id: str=None, last_reconciled_at: datetime=None, name: str=None, note: str=None, on_budget: bool=None, transfer_payee_id: str=None, type: AccountType=None, uncleared_balance: int=None):
        """Account - a model defined in OpenAPI

        :param balance: The balance of this Account.
        :param cleared_balance: The cleared_balance of this Account.
        :param closed: The closed of this Account.
        :param debt_escrow_amounts: The debt_escrow_amounts of this Account.
        :param debt_interest_rates: The debt_interest_rates of this Account.
        :param debt_minimum_payments: The debt_minimum_payments of this Account.
        :param debt_original_balance: The debt_original_balance of this Account.
        :param deleted: The deleted of this Account.
        :param direct_import_in_error: The direct_import_in_error of this Account.
        :param direct_import_linked: The direct_import_linked of this Account.
        :param id: The id of this Account.
        :param last_reconciled_at: The last_reconciled_at of this Account.
        :param name: The name of this Account.
        :param note: The note of this Account.
        :param on_budget: The on_budget of this Account.
        :param transfer_payee_id: The transfer_payee_id of this Account.
        :param type: The type of this Account.
        :param uncleared_balance: The uncleared_balance of this Account.
        """
        self.openapi_types = {
            'balance': int,
            'cleared_balance': int,
            'closed': bool,
            'debt_escrow_amounts': Dict[str, int],
            'debt_interest_rates': Dict[str, int],
            'debt_minimum_payments': Dict[str, int],
            'debt_original_balance': int,
            'deleted': bool,
            'direct_import_in_error': bool,
            'direct_import_linked': bool,
            'id': str,
            'last_reconciled_at': datetime,
            'name': str,
            'note': str,
            'on_budget': bool,
            'transfer_payee_id': str,
            'type': AccountType,
            'uncleared_balance': int
        }

        self.attribute_map = {
            'balance': 'balance',
            'cleared_balance': 'cleared_balance',
            'closed': 'closed',
            'debt_escrow_amounts': 'debt_escrow_amounts',
            'debt_interest_rates': 'debt_interest_rates',
            'debt_minimum_payments': 'debt_minimum_payments',
            'debt_original_balance': 'debt_original_balance',
            'deleted': 'deleted',
            'direct_import_in_error': 'direct_import_in_error',
            'direct_import_linked': 'direct_import_linked',
            'id': 'id',
            'last_reconciled_at': 'last_reconciled_at',
            'name': 'name',
            'note': 'note',
            'on_budget': 'on_budget',
            'transfer_payee_id': 'transfer_payee_id',
            'type': 'type',
            'uncleared_balance': 'uncleared_balance'
        }

        self._balance = balance
        self._cleared_balance = cleared_balance
        self._closed = closed
        self._debt_escrow_amounts = debt_escrow_amounts
        self._debt_interest_rates = debt_interest_rates
        self._debt_minimum_payments = debt_minimum_payments
        self._debt_original_balance = debt_original_balance
        self._deleted = deleted
        self._direct_import_in_error = direct_import_in_error
        self._direct_import_linked = direct_import_linked
        self._id = id
        self._last_reconciled_at = last_reconciled_at
        self._name = name
        self._note = note
        self._on_budget = on_budget
        self._transfer_payee_id = transfer_payee_id
        self._type = type
        self._uncleared_balance = uncleared_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Account.

        The current balance of the account in milliunits format

        :return: The balance of this Account.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.

        The current balance of the account in milliunits format

        :param balance: The balance of this Account.
        :type balance: int
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def cleared_balance(self):
        """Gets the cleared_balance of this Account.

        The current cleared balance of the account in milliunits format

        :return: The cleared_balance of this Account.
        :rtype: int
        """
        return self._cleared_balance

    @cleared_balance.setter
    def cleared_balance(self, cleared_balance):
        """Sets the cleared_balance of this Account.

        The current cleared balance of the account in milliunits format

        :param cleared_balance: The cleared_balance of this Account.
        :type cleared_balance: int
        """
        if cleared_balance is None:
            raise ValueError("Invalid value for `cleared_balance`, must not be `None`")

        self._cleared_balance = cleared_balance

    @property
    def closed(self):
        """Gets the closed of this Account.

        Whether this account is closed or not

        :return: The closed of this Account.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Account.

        Whether this account is closed or not

        :param closed: The closed of this Account.
        :type closed: bool
        """
        if closed is None:
            raise ValueError("Invalid value for `closed`, must not be `None`")

        self._closed = closed

    @property
    def debt_escrow_amounts(self):
        """Gets the debt_escrow_amounts of this Account.


        :return: The debt_escrow_amounts of this Account.
        :rtype: Dict[str, int]
        """
        return self._debt_escrow_amounts

    @debt_escrow_amounts.setter
    def debt_escrow_amounts(self, debt_escrow_amounts):
        """Sets the debt_escrow_amounts of this Account.


        :param debt_escrow_amounts: The debt_escrow_amounts of this Account.
        :type debt_escrow_amounts: Dict[str, int]
        """

        self._debt_escrow_amounts = debt_escrow_amounts

    @property
    def debt_interest_rates(self):
        """Gets the debt_interest_rates of this Account.


        :return: The debt_interest_rates of this Account.
        :rtype: Dict[str, int]
        """
        return self._debt_interest_rates

    @debt_interest_rates.setter
    def debt_interest_rates(self, debt_interest_rates):
        """Sets the debt_interest_rates of this Account.


        :param debt_interest_rates: The debt_interest_rates of this Account.
        :type debt_interest_rates: Dict[str, int]
        """

        self._debt_interest_rates = debt_interest_rates

    @property
    def debt_minimum_payments(self):
        """Gets the debt_minimum_payments of this Account.


        :return: The debt_minimum_payments of this Account.
        :rtype: Dict[str, int]
        """
        return self._debt_minimum_payments

    @debt_minimum_payments.setter
    def debt_minimum_payments(self, debt_minimum_payments):
        """Sets the debt_minimum_payments of this Account.


        :param debt_minimum_payments: The debt_minimum_payments of this Account.
        :type debt_minimum_payments: Dict[str, int]
        """

        self._debt_minimum_payments = debt_minimum_payments

    @property
    def debt_original_balance(self):
        """Gets the debt_original_balance of this Account.

        The original debt/loan account balance, specified in milliunits format.

        :return: The debt_original_balance of this Account.
        :rtype: int
        """
        return self._debt_original_balance

    @debt_original_balance.setter
    def debt_original_balance(self, debt_original_balance):
        """Sets the debt_original_balance of this Account.

        The original debt/loan account balance, specified in milliunits format.

        :param debt_original_balance: The debt_original_balance of this Account.
        :type debt_original_balance: int
        """

        self._debt_original_balance = debt_original_balance

    @property
    def deleted(self):
        """Gets the deleted of this Account.

        Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.

        :return: The deleted of this Account.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Account.

        Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.

        :param deleted: The deleted of this Account.
        :type deleted: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")

        self._deleted = deleted

    @property
    def direct_import_in_error(self):
        """Gets the direct_import_in_error of this Account.

        If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.

        :return: The direct_import_in_error of this Account.
        :rtype: bool
        """
        return self._direct_import_in_error

    @direct_import_in_error.setter
    def direct_import_in_error(self, direct_import_in_error):
        """Sets the direct_import_in_error of this Account.

        If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.

        :param direct_import_in_error: The direct_import_in_error of this Account.
        :type direct_import_in_error: bool
        """

        self._direct_import_in_error = direct_import_in_error

    @property
    def direct_import_linked(self):
        """Gets the direct_import_linked of this Account.

        Whether or not the account is linked to a financial institution for automatic transaction import.

        :return: The direct_import_linked of this Account.
        :rtype: bool
        """
        return self._direct_import_linked

    @direct_import_linked.setter
    def direct_import_linked(self, direct_import_linked):
        """Sets the direct_import_linked of this Account.

        Whether or not the account is linked to a financial institution for automatic transaction import.

        :param direct_import_linked: The direct_import_linked of this Account.
        :type direct_import_linked: bool
        """

        self._direct_import_linked = direct_import_linked

    @property
    def id(self):
        """Gets the id of this Account.


        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_reconciled_at(self):
        """Gets the last_reconciled_at of this Account.

        A date/time specifying when the account was last reconciled.

        :return: The last_reconciled_at of this Account.
        :rtype: datetime
        """
        return self._last_reconciled_at

    @last_reconciled_at.setter
    def last_reconciled_at(self, last_reconciled_at):
        """Sets the last_reconciled_at of this Account.

        A date/time specifying when the account was last reconciled.

        :param last_reconciled_at: The last_reconciled_at of this Account.
        :type last_reconciled_at: datetime
        """

        self._last_reconciled_at = last_reconciled_at

    @property
    def name(self):
        """Gets the name of this Account.


        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this Account.


        :return: The note of this Account.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Account.


        :param note: The note of this Account.
        :type note: str
        """

        self._note = note

    @property
    def on_budget(self):
        """Gets the on_budget of this Account.

        Whether this account is on budget or not

        :return: The on_budget of this Account.
        :rtype: bool
        """
        return self._on_budget

    @on_budget.setter
    def on_budget(self, on_budget):
        """Sets the on_budget of this Account.

        Whether this account is on budget or not

        :param on_budget: The on_budget of this Account.
        :type on_budget: bool
        """
        if on_budget is None:
            raise ValueError("Invalid value for `on_budget`, must not be `None`")

        self._on_budget = on_budget

    @property
    def transfer_payee_id(self):
        """Gets the transfer_payee_id of this Account.

        The payee id which should be used when transferring to this account

        :return: The transfer_payee_id of this Account.
        :rtype: str
        """
        return self._transfer_payee_id

    @transfer_payee_id.setter
    def transfer_payee_id(self, transfer_payee_id):
        """Sets the transfer_payee_id of this Account.

        The payee id which should be used when transferring to this account

        :param transfer_payee_id: The transfer_payee_id of this Account.
        :type transfer_payee_id: str
        """
        if transfer_payee_id is None:
            raise ValueError("Invalid value for `transfer_payee_id`, must not be `None`")

        self._transfer_payee_id = transfer_payee_id

    @property
    def type(self):
        """Gets the type of this Account.


        :return: The type of this Account.
        :rtype: AccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.
        :type type: AccountType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uncleared_balance(self):
        """Gets the uncleared_balance of this Account.

        The current uncleared balance of the account in milliunits format

        :return: The uncleared_balance of this Account.
        :rtype: int
        """
        return self._uncleared_balance

    @uncleared_balance.setter
    def uncleared_balance(self, uncleared_balance):
        """Sets the uncleared_balance of this Account.

        The current uncleared balance of the account in milliunits format

        :param uncleared_balance: The uncleared_balance of this Account.
        :type uncleared_balance: int
        """
        if uncleared_balance is None:
            raise ValueError("Invalid value for `uncleared_balance`, must not be `None`")

        self._uncleared_balance = uncleared_balance
