/**
 * CyCAT.org API
 * CyCAT - The Cybersecurity Resource Catalogue public API services.
 *
 * The version of the OpenAPI document: 0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getChild(const QString &uuid);


    virtual void getGenerateUuid();


    virtual void getInfo();

    /**
    * @param[in]  start qint32 [required]
    * @param[in]  end qint32 [required]
    */
    virtual void getListProject(const qint32 &start, const qint32 &end);

    /**
    * @param[in]  start qint32 [required]
    * @param[in]  end qint32 [required]
    */
    virtual void getListPublisher(const qint32 &start, const qint32 &end);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getLookup(const QString &uuid);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  namespaceid QString [required]
    */
    virtual void getNamespacefinduuid(const QString &r_namespace, const QString &namespaceid);


    virtual void getNamespacegetall();

    /**
    * @param[in]  r_namespace QString [required]
    */
    virtual void getNamespacegetid(const QString &r_namespace);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getParent(const QString &uuid);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getRelationships(const QString &uuid);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getRelationshipsexpanded(const QString &uuid);

    /**
    * @param[in]  searchquery QString [required]
    */
    virtual void getSearch(const QString &searchquery);


    virtual void postPropose();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getChildCallback(OAIHttpRequestWorker *worker);
    void getGenerateUuidCallback(OAIHttpRequestWorker *worker);
    void getInfoCallback(OAIHttpRequestWorker *worker);
    void getListProjectCallback(OAIHttpRequestWorker *worker);
    void getListPublisherCallback(OAIHttpRequestWorker *worker);
    void getLookupCallback(OAIHttpRequestWorker *worker);
    void getNamespacefinduuidCallback(OAIHttpRequestWorker *worker);
    void getNamespacegetallCallback(OAIHttpRequestWorker *worker);
    void getNamespacegetidCallback(OAIHttpRequestWorker *worker);
    void getParentCallback(OAIHttpRequestWorker *worker);
    void getRelationshipsCallback(OAIHttpRequestWorker *worker);
    void getRelationshipsexpandedCallback(OAIHttpRequestWorker *worker);
    void getSearchCallback(OAIHttpRequestWorker *worker);
    void postProposeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getChildSignal();
    void getGenerateUuidSignal();
    void getInfoSignal();
    void getListProjectSignal();
    void getListPublisherSignal();
    void getLookupSignal();
    void getNamespacefinduuidSignal();
    void getNamespacegetallSignal();
    void getNamespacegetidSignal();
    void getParentSignal();
    void getRelationshipsSignal();
    void getRelationshipsexpandedSignal();
    void getSearchSignal();
    void postProposeSignal();


    void getChildSignalFull(OAIHttpRequestWorker *worker);
    void getGenerateUuidSignalFull(OAIHttpRequestWorker *worker);
    void getInfoSignalFull(OAIHttpRequestWorker *worker);
    void getListProjectSignalFull(OAIHttpRequestWorker *worker);
    void getListPublisherSignalFull(OAIHttpRequestWorker *worker);
    void getLookupSignalFull(OAIHttpRequestWorker *worker);
    void getNamespacefinduuidSignalFull(OAIHttpRequestWorker *worker);
    void getNamespacegetallSignalFull(OAIHttpRequestWorker *worker);
    void getNamespacegetidSignalFull(OAIHttpRequestWorker *worker);
    void getParentSignalFull(OAIHttpRequestWorker *worker);
    void getRelationshipsSignalFull(OAIHttpRequestWorker *worker);
    void getRelationshipsexpandedSignalFull(OAIHttpRequestWorker *worker);
    void getSearchSignalFull(OAIHttpRequestWorker *worker);
    void postProposeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getChildSignalError() instead")
    void getChildSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChildSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenerateUuidSignalError() instead")
    void getGenerateUuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGenerateUuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalError() instead")
    void getInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListProjectSignalError() instead")
    void getListProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListPublisherSignalError() instead")
    void getListPublisherSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListPublisherSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupSignalError() instead")
    void getLookupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacefinduuidSignalError() instead")
    void getNamespacefinduuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacefinduuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacegetallSignalError() instead")
    void getNamespacegetallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacegetallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacegetidSignalError() instead")
    void getNamespacegetidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacegetidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentSignalError() instead")
    void getParentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getParentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationshipsSignalError() instead")
    void getRelationshipsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationshipsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationshipsexpandedSignalError() instead")
    void getRelationshipsexpandedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationshipsexpandedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchSignalError() instead")
    void getSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposeSignalError() instead")
    void postProposeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProposeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getChildSignalErrorFull() instead")
    void getChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenerateUuidSignalErrorFull() instead")
    void getGenerateUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenerateUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalErrorFull() instead")
    void getInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListProjectSignalErrorFull() instead")
    void getListProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListPublisherSignalErrorFull() instead")
    void getListPublisherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListPublisherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupSignalErrorFull() instead")
    void getLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacefinduuidSignalErrorFull() instead")
    void getNamespacefinduuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacefinduuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacegetallSignalErrorFull() instead")
    void getNamespacegetallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacegetallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacegetidSignalErrorFull() instead")
    void getNamespacegetidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacegetidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentSignalErrorFull() instead")
    void getParentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getParentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationshipsSignalErrorFull() instead")
    void getRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationshipsexpandedSignalErrorFull() instead")
    void getRelationshipsexpandedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationshipsexpandedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchSignalErrorFull() instead")
    void getSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposeSignalErrorFull() instead")
    void postProposeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProposeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
