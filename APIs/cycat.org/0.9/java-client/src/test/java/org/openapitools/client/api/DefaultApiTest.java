/*
 * CyCAT.org API
 * CyCAT - The Cybersecurity Resource Catalogue public API services.
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get child UUID(s) from a specified project or publisher UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildTest() throws ApiException {
        String uuid = null;
        api.getChild(uuid);
        // TODO: test validations
    }

    /**
     * Generate an UUID version 4 RFC4122-compliant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenerateUuidTest() throws ApiException {
        api.getGenerateUuid();
        // TODO: test validations
    }

    /**
     * Get information about the CyCAT backend services including status, overall statistics and version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        api.getInfo();
        // TODO: test validations
    }

    /**
     * List projects registered in CyCAT by pagination (start,end).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListProjectTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        api.getListProject(start, end);
        // TODO: test validations
    }

    /**
     * List publishers registered in CyCAT by pagination (start,end).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListPublisherTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        api.getListPublisher(start, end);
        // TODO: test validations
    }

    /**
     * Lookup UUID registered in CyCAT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLookupTest() throws ApiException {
        String uuid = null;
        api.getLookup(uuid);
        // TODO: test validations
    }

    /**
     * Get all known UUID for a given namespace id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacefinduuidTest() throws ApiException {
        String namespace = null;
        String namespaceid = null;
        api.getNamespacefinduuid(namespace, namespaceid);
        // TODO: test validations
    }

    /**
     * List all known namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacegetallTest() throws ApiException {
        api.getNamespacegetall();
        // TODO: test validations
    }

    /**
     * Get all ID from a given namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacegetidTest() throws ApiException {
        String namespace = null;
        api.getNamespacegetid(namespace);
        // TODO: test validations
    }

    /**
     * Get parent UUID(s) from a specified project or item UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParentTest() throws ApiException {
        String uuid = null;
        api.getParent(uuid);
        // TODO: test validations
    }

    /**
     * Get relationship(s) UUID from a specified UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationshipsTest() throws ApiException {
        String uuid = null;
        api.getRelationships(uuid);
        // TODO: test validations
    }

    /**
     * Get relationship(s) UUID from a specified UUID including the relationships meta information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationshipsexpandedTest() throws ApiException {
        String uuid = null;
        api.getRelationshipsexpanded(uuid);
        // TODO: test validations
    }

    /**
     * Full-text search in CyCAT and return matching UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchTest() throws ApiException {
        String searchquery = null;
        api.getSearch(searchquery);
        // TODO: test validations
    }

    /**
     * Propose new resource to CyCAT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postProposeTest() throws ApiException {
        api.postPropose();
        // TODO: test validations
    }

}
