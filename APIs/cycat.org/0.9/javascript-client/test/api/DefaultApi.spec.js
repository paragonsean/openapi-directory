/**
 * CyCAT.org API
 * CyCAT - The Cybersecurity Resource Catalogue public API services.
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CyCatOrgApi);
  }
}(this, function(expect, CyCatOrgApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CyCatOrgApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('getChild', function() {
      it('should call getChild successfully', function(done) {
        //uncomment below and update the code to test getChild
        //instance.getChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGenerateUuid', function() {
      it('should call getGenerateUuid successfully', function(done) {
        //uncomment below and update the code to test getGenerateUuid
        //instance.getGenerateUuid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInfo', function() {
      it('should call getInfo successfully', function(done) {
        //uncomment below and update the code to test getInfo
        //instance.getInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListProject', function() {
      it('should call getListProject successfully', function(done) {
        //uncomment below and update the code to test getListProject
        //instance.getListProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListPublisher', function() {
      it('should call getListPublisher successfully', function(done) {
        //uncomment below and update the code to test getListPublisher
        //instance.getListPublisher(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLookup', function() {
      it('should call getLookup successfully', function(done) {
        //uncomment below and update the code to test getLookup
        //instance.getLookup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNamespacefinduuid', function() {
      it('should call getNamespacefinduuid successfully', function(done) {
        //uncomment below and update the code to test getNamespacefinduuid
        //instance.getNamespacefinduuid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNamespacegetall', function() {
      it('should call getNamespacegetall successfully', function(done) {
        //uncomment below and update the code to test getNamespacegetall
        //instance.getNamespacegetall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNamespacegetid', function() {
      it('should call getNamespacegetid successfully', function(done) {
        //uncomment below and update the code to test getNamespacegetid
        //instance.getNamespacegetid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getParent', function() {
      it('should call getParent successfully', function(done) {
        //uncomment below and update the code to test getParent
        //instance.getParent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRelationships', function() {
      it('should call getRelationships successfully', function(done) {
        //uncomment below and update the code to test getRelationships
        //instance.getRelationships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRelationshipsexpanded', function() {
      it('should call getRelationshipsexpanded successfully', function(done) {
        //uncomment below and update the code to test getRelationshipsexpanded
        //instance.getRelationshipsexpanded(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSearch', function() {
      it('should call getSearch successfully', function(done) {
        //uncomment below and update the code to test getSearch
        //instance.getSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postPropose', function() {
      it('should call postPropose successfully', function(done) {
        //uncomment below and update the code to test postPropose
        //instance.postPropose(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
