/**
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Properties1 model module.
 * @module model/Properties1
 * @version 1.0
 */
class Properties1 {
    /**
     * Constructs a new <code>Properties1</code>.
     * @alias module:model/Properties1
     * @param ALAND {Number} 
     */
    constructor(ALAND) { 
        
        Properties1.initialize(this, ALAND);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ALAND) { 
        obj['ALAND'] = ALAND;
    }

    /**
     * Constructs a <code>Properties1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Properties1} obj Optional instance to populate.
     * @return {module:model/Properties1} The populated <code>Properties1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Properties1();

            if (data.hasOwnProperty('AFFGEOID')) {
                obj['AFFGEOID'] = ApiClient.convertToType(data['AFFGEOID'], 'String');
            }
            if (data.hasOwnProperty('ALAND')) {
                obj['ALAND'] = ApiClient.convertToType(data['ALAND'], 'Number');
            }
            if (data.hasOwnProperty('AWATER')) {
                obj['AWATER'] = ApiClient.convertToType(data['AWATER'], 'Number');
            }
            if (data.hasOwnProperty('BLKGRPCE')) {
                obj['BLKGRPCE'] = ApiClient.convertToType(data['BLKGRPCE'], 'String');
            }
            if (data.hasOwnProperty('CBSAFP')) {
                obj['CBSAFP'] = ApiClient.convertToType(data['CBSAFP'], 'String');
            }
            if (data.hasOwnProperty('CLASSFP')) {
                obj['CLASSFP'] = ApiClient.convertToType(data['CLASSFP'], 'String');
            }
            if (data.hasOwnProperty('COUNTYFP')) {
                obj['COUNTYFP'] = ApiClient.convertToType(data['COUNTYFP'], 'String');
            }
            if (data.hasOwnProperty('COUNTYNS')) {
                obj['COUNTYNS'] = ApiClient.convertToType(data['COUNTYNS'], 'String');
            }
            if (data.hasOwnProperty('CSAFP')) {
                obj['CSAFP'] = ApiClient.convertToType(data['CSAFP'], 'String');
            }
            if (data.hasOwnProperty('DIVISION')) {
                obj['DIVISION'] = ApiClient.convertToType(data['DIVISION'], 'String');
            }
            if (data.hasOwnProperty('FUNCSTAT')) {
                obj['FUNCSTAT'] = ApiClient.convertToType(data['FUNCSTAT'], 'String');
            }
            if (data.hasOwnProperty('GEOID')) {
                obj['GEOID'] = ApiClient.convertToType(data['GEOID'], 'String');
            }
            if (data.hasOwnProperty('INTPTLAT')) {
                obj['INTPTLAT'] = ApiClient.convertToType(data['INTPTLAT'], 'String');
            }
            if (data.hasOwnProperty('INTPTLON')) {
                obj['INTPTLON'] = ApiClient.convertToType(data['INTPTLON'], 'String');
            }
            if (data.hasOwnProperty('LSAD')) {
                obj['LSAD'] = ApiClient.convertToType(data['LSAD'], 'String');
            }
            if (data.hasOwnProperty('MEMI')) {
                obj['MEMI'] = ApiClient.convertToType(data['MEMI'], 'String');
            }
            if (data.hasOwnProperty('METDIVFP')) {
                obj['METDIVFP'] = ApiClient.convertToType(data['METDIVFP'], 'String');
            }
            if (data.hasOwnProperty('MTFCC')) {
                obj['MTFCC'] = ApiClient.convertToType(data['MTFCC'], 'String');
            }
            if (data.hasOwnProperty('NAME')) {
                obj['NAME'] = ApiClient.convertToType(data['NAME'], 'String');
            }
            if (data.hasOwnProperty('NAMELSAD')) {
                obj['NAMELSAD'] = ApiClient.convertToType(data['NAMELSAD'], 'String');
            }
            if (data.hasOwnProperty('PCICBSA')) {
                obj['PCICBSA'] = ApiClient.convertToType(data['PCICBSA'], 'String');
            }
            if (data.hasOwnProperty('PCINECTA')) {
                obj['PCINECTA'] = ApiClient.convertToType(data['PCINECTA'], 'String');
            }
            if (data.hasOwnProperty('PLACEFP')) {
                obj['PLACEFP'] = ApiClient.convertToType(data['PLACEFP'], 'String');
            }
            if (data.hasOwnProperty('PLACENS')) {
                obj['PLACENS'] = ApiClient.convertToType(data['PLACENS'], 'String');
            }
            if (data.hasOwnProperty('POPULATION')) {
                obj['POPULATION'] = ApiClient.convertToType(data['POPULATION'], 'Number');
            }
            if (data.hasOwnProperty('POP_SQMI')) {
                obj['POP_SQMI'] = ApiClient.convertToType(data['POP_SQMI'], 'Number');
            }
            if (data.hasOwnProperty('PO_NAME')) {
                obj['PO_NAME'] = ApiClient.convertToType(data['PO_NAME'], 'String');
            }
            if (data.hasOwnProperty('REGION')) {
                obj['REGION'] = ApiClient.convertToType(data['REGION'], 'String');
            }
            if (data.hasOwnProperty('SQMI')) {
                obj['SQMI'] = ApiClient.convertToType(data['SQMI'], 'Number');
            }
            if (data.hasOwnProperty('STATE')) {
                obj['STATE'] = ApiClient.convertToType(data['STATE'], 'String');
            }
            if (data.hasOwnProperty('STATEFP')) {
                obj['STATEFP'] = ApiClient.convertToType(data['STATEFP'], 'String');
            }
            if (data.hasOwnProperty('STATENS')) {
                obj['STATENS'] = ApiClient.convertToType(data['STATENS'], 'String');
            }
            if (data.hasOwnProperty('STUSPS')) {
                obj['STUSPS'] = ApiClient.convertToType(data['STUSPS'], 'String');
            }
            if (data.hasOwnProperty('Shape_Area')) {
                obj['Shape_Area'] = ApiClient.convertToType(data['Shape_Area'], 'Number');
            }
            if (data.hasOwnProperty('Shape_Leng')) {
                obj['Shape_Leng'] = ApiClient.convertToType(data['Shape_Leng'], 'Number');
            }
            if (data.hasOwnProperty('TRACTCE')) {
                obj['TRACTCE'] = ApiClient.convertToType(data['TRACTCE'], 'String');
            }
            if (data.hasOwnProperty('ZIP_CODE')) {
                obj['ZIP_CODE'] = ApiClient.convertToType(data['ZIP_CODE'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Properties1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Properties1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Properties1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AFFGEOID'] && !(typeof data['AFFGEOID'] === 'string' || data['AFFGEOID'] instanceof String)) {
            throw new Error("Expected the field `AFFGEOID` to be a primitive type in the JSON string but got " + data['AFFGEOID']);
        }
        // ensure the json data is a string
        if (data['BLKGRPCE'] && !(typeof data['BLKGRPCE'] === 'string' || data['BLKGRPCE'] instanceof String)) {
            throw new Error("Expected the field `BLKGRPCE` to be a primitive type in the JSON string but got " + data['BLKGRPCE']);
        }
        // ensure the json data is a string
        if (data['CBSAFP'] && !(typeof data['CBSAFP'] === 'string' || data['CBSAFP'] instanceof String)) {
            throw new Error("Expected the field `CBSAFP` to be a primitive type in the JSON string but got " + data['CBSAFP']);
        }
        // ensure the json data is a string
        if (data['CLASSFP'] && !(typeof data['CLASSFP'] === 'string' || data['CLASSFP'] instanceof String)) {
            throw new Error("Expected the field `CLASSFP` to be a primitive type in the JSON string but got " + data['CLASSFP']);
        }
        // ensure the json data is a string
        if (data['COUNTYFP'] && !(typeof data['COUNTYFP'] === 'string' || data['COUNTYFP'] instanceof String)) {
            throw new Error("Expected the field `COUNTYFP` to be a primitive type in the JSON string but got " + data['COUNTYFP']);
        }
        // ensure the json data is a string
        if (data['COUNTYNS'] && !(typeof data['COUNTYNS'] === 'string' || data['COUNTYNS'] instanceof String)) {
            throw new Error("Expected the field `COUNTYNS` to be a primitive type in the JSON string but got " + data['COUNTYNS']);
        }
        // ensure the json data is a string
        if (data['CSAFP'] && !(typeof data['CSAFP'] === 'string' || data['CSAFP'] instanceof String)) {
            throw new Error("Expected the field `CSAFP` to be a primitive type in the JSON string but got " + data['CSAFP']);
        }
        // ensure the json data is a string
        if (data['DIVISION'] && !(typeof data['DIVISION'] === 'string' || data['DIVISION'] instanceof String)) {
            throw new Error("Expected the field `DIVISION` to be a primitive type in the JSON string but got " + data['DIVISION']);
        }
        // ensure the json data is a string
        if (data['FUNCSTAT'] && !(typeof data['FUNCSTAT'] === 'string' || data['FUNCSTAT'] instanceof String)) {
            throw new Error("Expected the field `FUNCSTAT` to be a primitive type in the JSON string but got " + data['FUNCSTAT']);
        }
        // ensure the json data is a string
        if (data['GEOID'] && !(typeof data['GEOID'] === 'string' || data['GEOID'] instanceof String)) {
            throw new Error("Expected the field `GEOID` to be a primitive type in the JSON string but got " + data['GEOID']);
        }
        // ensure the json data is a string
        if (data['INTPTLAT'] && !(typeof data['INTPTLAT'] === 'string' || data['INTPTLAT'] instanceof String)) {
            throw new Error("Expected the field `INTPTLAT` to be a primitive type in the JSON string but got " + data['INTPTLAT']);
        }
        // ensure the json data is a string
        if (data['INTPTLON'] && !(typeof data['INTPTLON'] === 'string' || data['INTPTLON'] instanceof String)) {
            throw new Error("Expected the field `INTPTLON` to be a primitive type in the JSON string but got " + data['INTPTLON']);
        }
        // ensure the json data is a string
        if (data['LSAD'] && !(typeof data['LSAD'] === 'string' || data['LSAD'] instanceof String)) {
            throw new Error("Expected the field `LSAD` to be a primitive type in the JSON string but got " + data['LSAD']);
        }
        // ensure the json data is a string
        if (data['MEMI'] && !(typeof data['MEMI'] === 'string' || data['MEMI'] instanceof String)) {
            throw new Error("Expected the field `MEMI` to be a primitive type in the JSON string but got " + data['MEMI']);
        }
        // ensure the json data is a string
        if (data['METDIVFP'] && !(typeof data['METDIVFP'] === 'string' || data['METDIVFP'] instanceof String)) {
            throw new Error("Expected the field `METDIVFP` to be a primitive type in the JSON string but got " + data['METDIVFP']);
        }
        // ensure the json data is a string
        if (data['MTFCC'] && !(typeof data['MTFCC'] === 'string' || data['MTFCC'] instanceof String)) {
            throw new Error("Expected the field `MTFCC` to be a primitive type in the JSON string but got " + data['MTFCC']);
        }
        // ensure the json data is a string
        if (data['NAME'] && !(typeof data['NAME'] === 'string' || data['NAME'] instanceof String)) {
            throw new Error("Expected the field `NAME` to be a primitive type in the JSON string but got " + data['NAME']);
        }
        // ensure the json data is a string
        if (data['NAMELSAD'] && !(typeof data['NAMELSAD'] === 'string' || data['NAMELSAD'] instanceof String)) {
            throw new Error("Expected the field `NAMELSAD` to be a primitive type in the JSON string but got " + data['NAMELSAD']);
        }
        // ensure the json data is a string
        if (data['PCICBSA'] && !(typeof data['PCICBSA'] === 'string' || data['PCICBSA'] instanceof String)) {
            throw new Error("Expected the field `PCICBSA` to be a primitive type in the JSON string but got " + data['PCICBSA']);
        }
        // ensure the json data is a string
        if (data['PCINECTA'] && !(typeof data['PCINECTA'] === 'string' || data['PCINECTA'] instanceof String)) {
            throw new Error("Expected the field `PCINECTA` to be a primitive type in the JSON string but got " + data['PCINECTA']);
        }
        // ensure the json data is a string
        if (data['PLACEFP'] && !(typeof data['PLACEFP'] === 'string' || data['PLACEFP'] instanceof String)) {
            throw new Error("Expected the field `PLACEFP` to be a primitive type in the JSON string but got " + data['PLACEFP']);
        }
        // ensure the json data is a string
        if (data['PLACENS'] && !(typeof data['PLACENS'] === 'string' || data['PLACENS'] instanceof String)) {
            throw new Error("Expected the field `PLACENS` to be a primitive type in the JSON string but got " + data['PLACENS']);
        }
        // ensure the json data is a string
        if (data['PO_NAME'] && !(typeof data['PO_NAME'] === 'string' || data['PO_NAME'] instanceof String)) {
            throw new Error("Expected the field `PO_NAME` to be a primitive type in the JSON string but got " + data['PO_NAME']);
        }
        // ensure the json data is a string
        if (data['REGION'] && !(typeof data['REGION'] === 'string' || data['REGION'] instanceof String)) {
            throw new Error("Expected the field `REGION` to be a primitive type in the JSON string but got " + data['REGION']);
        }
        // ensure the json data is a string
        if (data['STATE'] && !(typeof data['STATE'] === 'string' || data['STATE'] instanceof String)) {
            throw new Error("Expected the field `STATE` to be a primitive type in the JSON string but got " + data['STATE']);
        }
        // ensure the json data is a string
        if (data['STATEFP'] && !(typeof data['STATEFP'] === 'string' || data['STATEFP'] instanceof String)) {
            throw new Error("Expected the field `STATEFP` to be a primitive type in the JSON string but got " + data['STATEFP']);
        }
        // ensure the json data is a string
        if (data['STATENS'] && !(typeof data['STATENS'] === 'string' || data['STATENS'] instanceof String)) {
            throw new Error("Expected the field `STATENS` to be a primitive type in the JSON string but got " + data['STATENS']);
        }
        // ensure the json data is a string
        if (data['STUSPS'] && !(typeof data['STUSPS'] === 'string' || data['STUSPS'] instanceof String)) {
            throw new Error("Expected the field `STUSPS` to be a primitive type in the JSON string but got " + data['STUSPS']);
        }
        // ensure the json data is a string
        if (data['TRACTCE'] && !(typeof data['TRACTCE'] === 'string' || data['TRACTCE'] instanceof String)) {
            throw new Error("Expected the field `TRACTCE` to be a primitive type in the JSON string but got " + data['TRACTCE']);
        }
        // ensure the json data is a string
        if (data['ZIP_CODE'] && !(typeof data['ZIP_CODE'] === 'string' || data['ZIP_CODE'] instanceof String)) {
            throw new Error("Expected the field `ZIP_CODE` to be a primitive type in the JSON string but got " + data['ZIP_CODE']);
        }

        return true;
    }


}

Properties1.RequiredProperties = ["ALAND"];

/**
 * @member {String} AFFGEOID
 */
Properties1.prototype['AFFGEOID'] = undefined;

/**
 * @member {Number} ALAND
 */
Properties1.prototype['ALAND'] = undefined;

/**
 * @member {Number} AWATER
 */
Properties1.prototype['AWATER'] = undefined;

/**
 * @member {String} BLKGRPCE
 */
Properties1.prototype['BLKGRPCE'] = undefined;

/**
 * @member {String} CBSAFP
 */
Properties1.prototype['CBSAFP'] = undefined;

/**
 * @member {String} CLASSFP
 */
Properties1.prototype['CLASSFP'] = undefined;

/**
 * @member {String} COUNTYFP
 */
Properties1.prototype['COUNTYFP'] = undefined;

/**
 * @member {String} COUNTYNS
 */
Properties1.prototype['COUNTYNS'] = undefined;

/**
 * @member {String} CSAFP
 */
Properties1.prototype['CSAFP'] = undefined;

/**
 * @member {String} DIVISION
 */
Properties1.prototype['DIVISION'] = undefined;

/**
 * @member {String} FUNCSTAT
 */
Properties1.prototype['FUNCSTAT'] = undefined;

/**
 * @member {String} GEOID
 */
Properties1.prototype['GEOID'] = undefined;

/**
 * @member {String} INTPTLAT
 */
Properties1.prototype['INTPTLAT'] = undefined;

/**
 * @member {String} INTPTLON
 */
Properties1.prototype['INTPTLON'] = undefined;

/**
 * @member {String} LSAD
 */
Properties1.prototype['LSAD'] = undefined;

/**
 * @member {String} MEMI
 */
Properties1.prototype['MEMI'] = undefined;

/**
 * @member {String} METDIVFP
 */
Properties1.prototype['METDIVFP'] = undefined;

/**
 * @member {String} MTFCC
 */
Properties1.prototype['MTFCC'] = undefined;

/**
 * @member {String} NAME
 */
Properties1.prototype['NAME'] = undefined;

/**
 * @member {String} NAMELSAD
 */
Properties1.prototype['NAMELSAD'] = undefined;

/**
 * @member {String} PCICBSA
 */
Properties1.prototype['PCICBSA'] = undefined;

/**
 * @member {String} PCINECTA
 */
Properties1.prototype['PCINECTA'] = undefined;

/**
 * @member {String} PLACEFP
 */
Properties1.prototype['PLACEFP'] = undefined;

/**
 * @member {String} PLACENS
 */
Properties1.prototype['PLACENS'] = undefined;

/**
 * @member {Number} POPULATION
 */
Properties1.prototype['POPULATION'] = undefined;

/**
 * @member {Number} POP_SQMI
 */
Properties1.prototype['POP_SQMI'] = undefined;

/**
 * @member {String} PO_NAME
 */
Properties1.prototype['PO_NAME'] = undefined;

/**
 * @member {String} REGION
 */
Properties1.prototype['REGION'] = undefined;

/**
 * @member {Number} SQMI
 */
Properties1.prototype['SQMI'] = undefined;

/**
 * @member {String} STATE
 */
Properties1.prototype['STATE'] = undefined;

/**
 * @member {String} STATEFP
 */
Properties1.prototype['STATEFP'] = undefined;

/**
 * @member {String} STATENS
 */
Properties1.prototype['STATENS'] = undefined;

/**
 * @member {String} STUSPS
 */
Properties1.prototype['STUSPS'] = undefined;

/**
 * @member {Number} Shape_Area
 */
Properties1.prototype['Shape_Area'] = undefined;

/**
 * @member {Number} Shape_Leng
 */
Properties1.prototype['Shape_Leng'] = undefined;

/**
 * @member {String} TRACTCE
 */
Properties1.prototype['TRACTCE'] = undefined;

/**
 * @member {String} ZIP_CODE
 */
Properties1.prototype['ZIP_CODE'] = undefined;






export default Properties1;

