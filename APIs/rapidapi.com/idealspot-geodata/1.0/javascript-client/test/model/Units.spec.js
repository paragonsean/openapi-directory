/**
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IdealSpotGeoData);
  }
}(this, function(expect, IdealSpotGeoData) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IdealSpotGeoData.Units();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Units', function() {
    it('should create an instance of Units', function() {
      // uncomment below and update the code to test Units
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be.a(IdealSpotGeoData.Units);
    });

    it('should have the property _100k125k (base name: "$100k-125k")', function() {
      // uncomment below and update the code to test the property _100k125k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _10k15k (base name: "$10k-15k")', function() {
      // uncomment below and update the code to test the property _10k15k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _125k150k (base name: "$125k-150k")', function() {
      // uncomment below and update the code to test the property _125k150k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _150k175k (base name: "$150k-175k")', function() {
      // uncomment below and update the code to test the property _150k175k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _15k20k (base name: "$15k-20k")', function() {
      // uncomment below and update the code to test the property _15k20k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _175k200k (base name: "$175k-200k")', function() {
      // uncomment below and update the code to test the property _175k200k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _200k250k (base name: "$200k-250k")', function() {
      // uncomment below and update the code to test the property _200k250k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _20k25k (base name: "$20k-25k")', function() {
      // uncomment below and update the code to test the property _20k25k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _250k300k (base name: "$250k-300k")', function() {
      // uncomment below and update the code to test the property _250k300k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _25k30k (base name: "$25k-30k")', function() {
      // uncomment below and update the code to test the property _25k30k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _300k400k (base name: "$300k-400k")', function() {
      // uncomment below and update the code to test the property _300k400k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _30k35k (base name: "$30k-35k")', function() {
      // uncomment below and update the code to test the property _30k35k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _35k40k (base name: "$35k-40k")', function() {
      // uncomment below and update the code to test the property _35k40k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _400k500k (base name: "$400k-500k")', function() {
      // uncomment below and update the code to test the property _400k500k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _40k50k (base name: "$40k-50k")', function() {
      // uncomment below and update the code to test the property _40k50k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _500k750k (base name: "$500k-750k")', function() {
      // uncomment below and update the code to test the property _500k750k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _50k60k (base name: "$50k-60k")', function() {
      // uncomment below and update the code to test the property _50k60k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _60k70k (base name: "$60k-70k")', function() {
      // uncomment below and update the code to test the property _60k70k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _70k80k (base name: "$70k-80k")', function() {
      // uncomment below and update the code to test the property _70k80k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _750k1M (base name: "$750k-1M")', function() {
      // uncomment below and update the code to test the property _750k1M
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _80k90k (base name: "$80k-90k")', function() {
      // uncomment below and update the code to test the property _80k90k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property _90k100k (base name: "$90k-100k")', function() {
      // uncomment below and update the code to test the property _90k100k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property medianHomeValue (base name: "Median Home Value")', function() {
      // uncomment below and update the code to test the property medianHomeValue
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property over1M (base name: "Over $1M")', function() {
      // uncomment below and update the code to test the property over1M
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property ownerOccupiedHouseholds (base name: "Owner Occupied Households")', function() {
      // uncomment below and update the code to test the property ownerOccupiedHouseholds
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property under10k (base name: "Under $10k")', function() {
      // uncomment below and update the code to test the property under10k
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property contextHouseholds (base name: "context.households")', function() {
      // uncomment below and update the code to test the property contextHouseholds
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

    it('should have the property contextLandarea (base name: "context.landarea")', function() {
      // uncomment below and update the code to test the property contextLandarea
      //var instance = new IdealSpotGeoData.Units();
      //expect(instance).to.be();
    });

  });

}));
