/*
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchRoadSegments;
import org.openapitools.client.model.VehicleTrafficCountsforRoadSegment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrafficCountApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrafficCountApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrafficCountApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchNearestRoadSegments
     * @param n Number of road segments to return (between 1 and 20) (required)
     * @param latitude (Required) Search coordinate latitude (required)
     * @param longitude (Required) Search coordinate longitude (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNearestRoadSegmentsCall(Integer n, Double latitude, Double longitude, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/traffic/roads/nearest/{latitude}/{longitude}"
            .replace("{" + "latitude" + "}", localVarApiClient.escapeString(latitude.toString()))
            .replace("{" + "longitude" + "}", localVarApiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (xRapidAPIKey != null) {
            localVarHeaderParams.put("X-RapidAPI-Key", localVarApiClient.parameterToString(xRapidAPIKey));
        }

        if (xRapidAPIHost != null) {
            localVarHeaderParams.put("X-RapidAPI-Host", localVarApiClient.parameterToString(xRapidAPIHost));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchNearestRoadSegmentsValidateBeforeCall(Integer n, Double latitude, Double longitude, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling fetchNearestRoadSegments(Async)");
        }

        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling fetchNearestRoadSegments(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling fetchNearestRoadSegments(Async)");
        }

        // verify the required parameter 'xRapidAPIKey' is set
        if (xRapidAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIKey' when calling fetchNearestRoadSegments(Async)");
        }

        // verify the required parameter 'xRapidAPIHost' is set
        if (xRapidAPIHost == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIHost' when calling fetchNearestRoadSegments(Async)");
        }

        return fetchNearestRoadSegmentsCall(n, latitude, longitude, xRapidAPIKey, xRapidAPIHost, _callback);

    }

    /**
     * Fetch Nearest Road Segments
     * For given latitude and longitude, find &#x60;n&#x60; nearest road segments
     * @param n Number of road segments to return (between 1 and 20) (required)
     * @param latitude (Required) Search coordinate latitude (required)
     * @param longitude (Required) Search coordinate longitude (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return SearchRoadSegments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public SearchRoadSegments fetchNearestRoadSegments(Integer n, Double latitude, Double longitude, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        ApiResponse<SearchRoadSegments> localVarResp = fetchNearestRoadSegmentsWithHttpInfo(n, latitude, longitude, xRapidAPIKey, xRapidAPIHost);
        return localVarResp.getData();
    }

    /**
     * Fetch Nearest Road Segments
     * For given latitude and longitude, find &#x60;n&#x60; nearest road segments
     * @param n Number of road segments to return (between 1 and 20) (required)
     * @param latitude (Required) Search coordinate latitude (required)
     * @param longitude (Required) Search coordinate longitude (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return ApiResponse&lt;SearchRoadSegments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<SearchRoadSegments> fetchNearestRoadSegmentsWithHttpInfo(Integer n, Double latitude, Double longitude, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        okhttp3.Call localVarCall = fetchNearestRoadSegmentsValidateBeforeCall(n, latitude, longitude, xRapidAPIKey, xRapidAPIHost, null);
        Type localVarReturnType = new TypeToken<SearchRoadSegments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Nearest Road Segments (asynchronously)
     * For given latitude and longitude, find &#x60;n&#x60; nearest road segments
     * @param n Number of road segments to return (between 1 and 20) (required)
     * @param latitude (Required) Search coordinate latitude (required)
     * @param longitude (Required) Search coordinate longitude (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNearestRoadSegmentsAsync(Integer n, Double latitude, Double longitude, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback<SearchRoadSegments> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchNearestRoadSegmentsValidateBeforeCall(n, latitude, longitude, xRapidAPIKey, xRapidAPIHost, _callback);
        Type localVarReturnType = new TypeToken<SearchRoadSegments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vehicleTrafficCountsforRoadSegment
     * @param segmentId (Required) Road segment ID. Fetched from Search Road Segments (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call vehicleTrafficCountsforRoadSegmentCall(Integer segmentId, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/traffic/counts/{segment_id}"
            .replace("{" + "segment_id" + "}", localVarApiClient.escapeString(segmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidAPIKey != null) {
            localVarHeaderParams.put("X-RapidAPI-Key", localVarApiClient.parameterToString(xRapidAPIKey));
        }

        if (xRapidAPIHost != null) {
            localVarHeaderParams.put("X-RapidAPI-Host", localVarApiClient.parameterToString(xRapidAPIHost));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vehicleTrafficCountsforRoadSegmentValidateBeforeCall(Integer segmentId, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling vehicleTrafficCountsforRoadSegment(Async)");
        }

        // verify the required parameter 'xRapidAPIKey' is set
        if (xRapidAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIKey' when calling vehicleTrafficCountsforRoadSegment(Async)");
        }

        // verify the required parameter 'xRapidAPIHost' is set
        if (xRapidAPIHost == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIHost' when calling vehicleTrafficCountsforRoadSegment(Async)");
        }

        return vehicleTrafficCountsforRoadSegmentCall(segmentId, xRapidAPIKey, xRapidAPIHost, _callback);

    }

    /**
     * Vehicle Traffic Counts for Road Segment
     * Time of day, day of week, and side of street vehicle traffic counts.
     * @param segmentId (Required) Road segment ID. Fetched from Search Road Segments (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return VehicleTrafficCountsforRoadSegment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public VehicleTrafficCountsforRoadSegment vehicleTrafficCountsforRoadSegment(Integer segmentId, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        ApiResponse<VehicleTrafficCountsforRoadSegment> localVarResp = vehicleTrafficCountsforRoadSegmentWithHttpInfo(segmentId, xRapidAPIKey, xRapidAPIHost);
        return localVarResp.getData();
    }

    /**
     * Vehicle Traffic Counts for Road Segment
     * Time of day, day of week, and side of street vehicle traffic counts.
     * @param segmentId (Required) Road segment ID. Fetched from Search Road Segments (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return ApiResponse&lt;VehicleTrafficCountsforRoadSegment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VehicleTrafficCountsforRoadSegment> vehicleTrafficCountsforRoadSegmentWithHttpInfo(Integer segmentId, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        okhttp3.Call localVarCall = vehicleTrafficCountsforRoadSegmentValidateBeforeCall(segmentId, xRapidAPIKey, xRapidAPIHost, null);
        Type localVarReturnType = new TypeToken<VehicleTrafficCountsforRoadSegment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Vehicle Traffic Counts for Road Segment (asynchronously)
     * Time of day, day of week, and side of street vehicle traffic counts.
     * @param segmentId (Required) Road segment ID. Fetched from Search Road Segments (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call vehicleTrafficCountsforRoadSegmentAsync(Integer segmentId, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback<VehicleTrafficCountsforRoadSegment> _callback) throws ApiException {

        okhttp3.Call localVarCall = vehicleTrafficCountsforRoadSegmentValidateBeforeCall(segmentId, xRapidAPIKey, xRapidAPIHost, _callback);
        Type localVarReturnType = new TypeToken<VehicleTrafficCountsforRoadSegment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
