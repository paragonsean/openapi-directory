/*
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:58.672234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Properties1 {
  public static final String SERIALIZED_NAME_A_F_F_G_E_O_I_D = "AFFGEOID";
  @SerializedName(SERIALIZED_NAME_A_F_F_G_E_O_I_D)
  private String AFFGEOID;

  public static final String SERIALIZED_NAME_A_L_A_N_D = "ALAND";
  @SerializedName(SERIALIZED_NAME_A_L_A_N_D)
  private Integer ALAND;

  public static final String SERIALIZED_NAME_A_W_A_T_E_R = "AWATER";
  @SerializedName(SERIALIZED_NAME_A_W_A_T_E_R)
  private Integer AWATER;

  public static final String SERIALIZED_NAME_B_L_K_G_R_P_C_E = "BLKGRPCE";
  @SerializedName(SERIALIZED_NAME_B_L_K_G_R_P_C_E)
  private String BLKGRPCE;

  public static final String SERIALIZED_NAME_C_B_S_A_F_P = "CBSAFP";
  @SerializedName(SERIALIZED_NAME_C_B_S_A_F_P)
  private String CBSAFP;

  public static final String SERIALIZED_NAME_C_L_A_S_S_F_P = "CLASSFP";
  @SerializedName(SERIALIZED_NAME_C_L_A_S_S_F_P)
  private String CLASSFP;

  public static final String SERIALIZED_NAME_C_O_U_N_T_Y_F_P = "COUNTYFP";
  @SerializedName(SERIALIZED_NAME_C_O_U_N_T_Y_F_P)
  private String COUNTYFP;

  public static final String SERIALIZED_NAME_C_O_U_N_T_Y_N_S = "COUNTYNS";
  @SerializedName(SERIALIZED_NAME_C_O_U_N_T_Y_N_S)
  private String COUNTYNS;

  public static final String SERIALIZED_NAME_C_S_A_F_P = "CSAFP";
  @SerializedName(SERIALIZED_NAME_C_S_A_F_P)
  private String CSAFP;

  public static final String SERIALIZED_NAME_D_I_V_I_S_I_O_N = "DIVISION";
  @SerializedName(SERIALIZED_NAME_D_I_V_I_S_I_O_N)
  private String DIVISION;

  public static final String SERIALIZED_NAME_F_U_N_C_S_T_A_T = "FUNCSTAT";
  @SerializedName(SERIALIZED_NAME_F_U_N_C_S_T_A_T)
  private String FUNCSTAT;

  public static final String SERIALIZED_NAME_G_E_O_I_D = "GEOID";
  @SerializedName(SERIALIZED_NAME_G_E_O_I_D)
  private String GEOID;

  public static final String SERIALIZED_NAME_I_N_T_P_T_L_A_T = "INTPTLAT";
  @SerializedName(SERIALIZED_NAME_I_N_T_P_T_L_A_T)
  private String INTPTLAT;

  public static final String SERIALIZED_NAME_I_N_T_P_T_L_O_N = "INTPTLON";
  @SerializedName(SERIALIZED_NAME_I_N_T_P_T_L_O_N)
  private String INTPTLON;

  public static final String SERIALIZED_NAME_L_S_A_D = "LSAD";
  @SerializedName(SERIALIZED_NAME_L_S_A_D)
  private String LSAD;

  public static final String SERIALIZED_NAME_M_E_M_I = "MEMI";
  @SerializedName(SERIALIZED_NAME_M_E_M_I)
  private String MEMI;

  public static final String SERIALIZED_NAME_M_E_T_D_I_V_F_P = "METDIVFP";
  @SerializedName(SERIALIZED_NAME_M_E_T_D_I_V_F_P)
  private String METDIVFP;

  public static final String SERIALIZED_NAME_M_T_F_C_C = "MTFCC";
  @SerializedName(SERIALIZED_NAME_M_T_F_C_C)
  private String MTFCC;

  public static final String SERIALIZED_NAME_N_A_M_E = "NAME";
  @SerializedName(SERIALIZED_NAME_N_A_M_E)
  private String NAME;

  public static final String SERIALIZED_NAME_N_A_M_E_L_S_A_D = "NAMELSAD";
  @SerializedName(SERIALIZED_NAME_N_A_M_E_L_S_A_D)
  private String NAMELSAD;

  public static final String SERIALIZED_NAME_P_C_I_C_B_S_A = "PCICBSA";
  @SerializedName(SERIALIZED_NAME_P_C_I_C_B_S_A)
  private String PCICBSA;

  public static final String SERIALIZED_NAME_P_C_I_N_E_C_T_A = "PCINECTA";
  @SerializedName(SERIALIZED_NAME_P_C_I_N_E_C_T_A)
  private String PCINECTA;

  public static final String SERIALIZED_NAME_P_L_A_C_E_F_P = "PLACEFP";
  @SerializedName(SERIALIZED_NAME_P_L_A_C_E_F_P)
  private String PLACEFP;

  public static final String SERIALIZED_NAME_P_L_A_C_E_N_S = "PLACENS";
  @SerializedName(SERIALIZED_NAME_P_L_A_C_E_N_S)
  private String PLACENS;

  public static final String SERIALIZED_NAME_P_O_P_U_L_A_T_I_O_N = "POPULATION";
  @SerializedName(SERIALIZED_NAME_P_O_P_U_L_A_T_I_O_N)
  private Integer POPULATION;

  public static final String SERIALIZED_NAME_P_O_P_S_Q_M_I = "POP_SQMI";
  @SerializedName(SERIALIZED_NAME_P_O_P_S_Q_M_I)
  private Double POP_SQMI;

  public static final String SERIALIZED_NAME_P_O_N_A_M_E = "PO_NAME";
  @SerializedName(SERIALIZED_NAME_P_O_N_A_M_E)
  private String PO_NAME;

  public static final String SERIALIZED_NAME_R_E_G_I_O_N = "REGION";
  @SerializedName(SERIALIZED_NAME_R_E_G_I_O_N)
  private String REGION;

  public static final String SERIALIZED_NAME_S_Q_M_I = "SQMI";
  @SerializedName(SERIALIZED_NAME_S_Q_M_I)
  private Double SQMI;

  public static final String SERIALIZED_NAME_S_T_A_T_E = "STATE";
  @SerializedName(SERIALIZED_NAME_S_T_A_T_E)
  private String STATE;

  public static final String SERIALIZED_NAME_S_T_A_T_E_F_P = "STATEFP";
  @SerializedName(SERIALIZED_NAME_S_T_A_T_E_F_P)
  private String STATEFP;

  public static final String SERIALIZED_NAME_S_T_A_T_E_N_S = "STATENS";
  @SerializedName(SERIALIZED_NAME_S_T_A_T_E_N_S)
  private String STATENS;

  public static final String SERIALIZED_NAME_S_T_U_S_P_S = "STUSPS";
  @SerializedName(SERIALIZED_NAME_S_T_U_S_P_S)
  private String STUSPS;

  public static final String SERIALIZED_NAME_SHAPE_AREA = "Shape_Area";
  @SerializedName(SERIALIZED_NAME_SHAPE_AREA)
  private Double shapeArea;

  public static final String SERIALIZED_NAME_SHAPE_LENG = "Shape_Leng";
  @SerializedName(SERIALIZED_NAME_SHAPE_LENG)
  private Double shapeLeng;

  public static final String SERIALIZED_NAME_T_R_A_C_T_C_E = "TRACTCE";
  @SerializedName(SERIALIZED_NAME_T_R_A_C_T_C_E)
  private String TRACTCE;

  public static final String SERIALIZED_NAME_Z_I_P_C_O_D_E = "ZIP_CODE";
  @SerializedName(SERIALIZED_NAME_Z_I_P_C_O_D_E)
  private String ZIP_CODE;

  public Properties1() {
  }

  public Properties1 AFFGEOID(String AFFGEOID) {
    this.AFFGEOID = AFFGEOID;
    return this;
  }

  /**
   * Get AFFGEOID
   * @return AFFGEOID
   */
  @javax.annotation.Nullable
  public String getAFFGEOID() {
    return AFFGEOID;
  }

  public void setAFFGEOID(String AFFGEOID) {
    this.AFFGEOID = AFFGEOID;
  }


  public Properties1 ALAND(Integer ALAND) {
    this.ALAND = ALAND;
    return this;
  }

  /**
   * Get ALAND
   * @return ALAND
   */
  @javax.annotation.Nonnull
  public Integer getALAND() {
    return ALAND;
  }

  public void setALAND(Integer ALAND) {
    this.ALAND = ALAND;
  }


  public Properties1 AWATER(Integer AWATER) {
    this.AWATER = AWATER;
    return this;
  }

  /**
   * Get AWATER
   * @return AWATER
   */
  @javax.annotation.Nullable
  public Integer getAWATER() {
    return AWATER;
  }

  public void setAWATER(Integer AWATER) {
    this.AWATER = AWATER;
  }


  public Properties1 BLKGRPCE(String BLKGRPCE) {
    this.BLKGRPCE = BLKGRPCE;
    return this;
  }

  /**
   * Get BLKGRPCE
   * @return BLKGRPCE
   */
  @javax.annotation.Nullable
  public String getBLKGRPCE() {
    return BLKGRPCE;
  }

  public void setBLKGRPCE(String BLKGRPCE) {
    this.BLKGRPCE = BLKGRPCE;
  }


  public Properties1 CBSAFP(String CBSAFP) {
    this.CBSAFP = CBSAFP;
    return this;
  }

  /**
   * Get CBSAFP
   * @return CBSAFP
   */
  @javax.annotation.Nullable
  public String getCBSAFP() {
    return CBSAFP;
  }

  public void setCBSAFP(String CBSAFP) {
    this.CBSAFP = CBSAFP;
  }


  public Properties1 CLASSFP(String CLASSFP) {
    this.CLASSFP = CLASSFP;
    return this;
  }

  /**
   * Get CLASSFP
   * @return CLASSFP
   */
  @javax.annotation.Nullable
  public String getCLASSFP() {
    return CLASSFP;
  }

  public void setCLASSFP(String CLASSFP) {
    this.CLASSFP = CLASSFP;
  }


  public Properties1 COUNTYFP(String COUNTYFP) {
    this.COUNTYFP = COUNTYFP;
    return this;
  }

  /**
   * Get COUNTYFP
   * @return COUNTYFP
   */
  @javax.annotation.Nullable
  public String getCOUNTYFP() {
    return COUNTYFP;
  }

  public void setCOUNTYFP(String COUNTYFP) {
    this.COUNTYFP = COUNTYFP;
  }


  public Properties1 COUNTYNS(String COUNTYNS) {
    this.COUNTYNS = COUNTYNS;
    return this;
  }

  /**
   * Get COUNTYNS
   * @return COUNTYNS
   */
  @javax.annotation.Nullable
  public String getCOUNTYNS() {
    return COUNTYNS;
  }

  public void setCOUNTYNS(String COUNTYNS) {
    this.COUNTYNS = COUNTYNS;
  }


  public Properties1 CSAFP(String CSAFP) {
    this.CSAFP = CSAFP;
    return this;
  }

  /**
   * Get CSAFP
   * @return CSAFP
   */
  @javax.annotation.Nullable
  public String getCSAFP() {
    return CSAFP;
  }

  public void setCSAFP(String CSAFP) {
    this.CSAFP = CSAFP;
  }


  public Properties1 DIVISION(String DIVISION) {
    this.DIVISION = DIVISION;
    return this;
  }

  /**
   * Get DIVISION
   * @return DIVISION
   */
  @javax.annotation.Nullable
  public String getDIVISION() {
    return DIVISION;
  }

  public void setDIVISION(String DIVISION) {
    this.DIVISION = DIVISION;
  }


  public Properties1 FUNCSTAT(String FUNCSTAT) {
    this.FUNCSTAT = FUNCSTAT;
    return this;
  }

  /**
   * Get FUNCSTAT
   * @return FUNCSTAT
   */
  @javax.annotation.Nullable
  public String getFUNCSTAT() {
    return FUNCSTAT;
  }

  public void setFUNCSTAT(String FUNCSTAT) {
    this.FUNCSTAT = FUNCSTAT;
  }


  public Properties1 GEOID(String GEOID) {
    this.GEOID = GEOID;
    return this;
  }

  /**
   * Get GEOID
   * @return GEOID
   */
  @javax.annotation.Nullable
  public String getGEOID() {
    return GEOID;
  }

  public void setGEOID(String GEOID) {
    this.GEOID = GEOID;
  }


  public Properties1 INTPTLAT(String INTPTLAT) {
    this.INTPTLAT = INTPTLAT;
    return this;
  }

  /**
   * Get INTPTLAT
   * @return INTPTLAT
   */
  @javax.annotation.Nullable
  public String getINTPTLAT() {
    return INTPTLAT;
  }

  public void setINTPTLAT(String INTPTLAT) {
    this.INTPTLAT = INTPTLAT;
  }


  public Properties1 INTPTLON(String INTPTLON) {
    this.INTPTLON = INTPTLON;
    return this;
  }

  /**
   * Get INTPTLON
   * @return INTPTLON
   */
  @javax.annotation.Nullable
  public String getINTPTLON() {
    return INTPTLON;
  }

  public void setINTPTLON(String INTPTLON) {
    this.INTPTLON = INTPTLON;
  }


  public Properties1 LSAD(String LSAD) {
    this.LSAD = LSAD;
    return this;
  }

  /**
   * Get LSAD
   * @return LSAD
   */
  @javax.annotation.Nullable
  public String getLSAD() {
    return LSAD;
  }

  public void setLSAD(String LSAD) {
    this.LSAD = LSAD;
  }


  public Properties1 MEMI(String MEMI) {
    this.MEMI = MEMI;
    return this;
  }

  /**
   * Get MEMI
   * @return MEMI
   */
  @javax.annotation.Nullable
  public String getMEMI() {
    return MEMI;
  }

  public void setMEMI(String MEMI) {
    this.MEMI = MEMI;
  }


  public Properties1 METDIVFP(String METDIVFP) {
    this.METDIVFP = METDIVFP;
    return this;
  }

  /**
   * Get METDIVFP
   * @return METDIVFP
   */
  @javax.annotation.Nullable
  public String getMETDIVFP() {
    return METDIVFP;
  }

  public void setMETDIVFP(String METDIVFP) {
    this.METDIVFP = METDIVFP;
  }


  public Properties1 MTFCC(String MTFCC) {
    this.MTFCC = MTFCC;
    return this;
  }

  /**
   * Get MTFCC
   * @return MTFCC
   */
  @javax.annotation.Nullable
  public String getMTFCC() {
    return MTFCC;
  }

  public void setMTFCC(String MTFCC) {
    this.MTFCC = MTFCC;
  }


  public Properties1 NAME(String NAME) {
    this.NAME = NAME;
    return this;
  }

  /**
   * Get NAME
   * @return NAME
   */
  @javax.annotation.Nullable
  public String getNAME() {
    return NAME;
  }

  public void setNAME(String NAME) {
    this.NAME = NAME;
  }


  public Properties1 NAMELSAD(String NAMELSAD) {
    this.NAMELSAD = NAMELSAD;
    return this;
  }

  /**
   * Get NAMELSAD
   * @return NAMELSAD
   */
  @javax.annotation.Nullable
  public String getNAMELSAD() {
    return NAMELSAD;
  }

  public void setNAMELSAD(String NAMELSAD) {
    this.NAMELSAD = NAMELSAD;
  }


  public Properties1 PCICBSA(String PCICBSA) {
    this.PCICBSA = PCICBSA;
    return this;
  }

  /**
   * Get PCICBSA
   * @return PCICBSA
   */
  @javax.annotation.Nullable
  public String getPCICBSA() {
    return PCICBSA;
  }

  public void setPCICBSA(String PCICBSA) {
    this.PCICBSA = PCICBSA;
  }


  public Properties1 PCINECTA(String PCINECTA) {
    this.PCINECTA = PCINECTA;
    return this;
  }

  /**
   * Get PCINECTA
   * @return PCINECTA
   */
  @javax.annotation.Nullable
  public String getPCINECTA() {
    return PCINECTA;
  }

  public void setPCINECTA(String PCINECTA) {
    this.PCINECTA = PCINECTA;
  }


  public Properties1 PLACEFP(String PLACEFP) {
    this.PLACEFP = PLACEFP;
    return this;
  }

  /**
   * Get PLACEFP
   * @return PLACEFP
   */
  @javax.annotation.Nullable
  public String getPLACEFP() {
    return PLACEFP;
  }

  public void setPLACEFP(String PLACEFP) {
    this.PLACEFP = PLACEFP;
  }


  public Properties1 PLACENS(String PLACENS) {
    this.PLACENS = PLACENS;
    return this;
  }

  /**
   * Get PLACENS
   * @return PLACENS
   */
  @javax.annotation.Nullable
  public String getPLACENS() {
    return PLACENS;
  }

  public void setPLACENS(String PLACENS) {
    this.PLACENS = PLACENS;
  }


  public Properties1 POPULATION(Integer POPULATION) {
    this.POPULATION = POPULATION;
    return this;
  }

  /**
   * Get POPULATION
   * @return POPULATION
   */
  @javax.annotation.Nullable
  public Integer getPOPULATION() {
    return POPULATION;
  }

  public void setPOPULATION(Integer POPULATION) {
    this.POPULATION = POPULATION;
  }


  public Properties1 POP_SQMI(Double POP_SQMI) {
    this.POP_SQMI = POP_SQMI;
    return this;
  }

  /**
   * Get POP_SQMI
   * @return POP_SQMI
   */
  @javax.annotation.Nullable
  public Double getPOPSQMI() {
    return POP_SQMI;
  }

  public void setPOPSQMI(Double POP_SQMI) {
    this.POP_SQMI = POP_SQMI;
  }


  public Properties1 PO_NAME(String PO_NAME) {
    this.PO_NAME = PO_NAME;
    return this;
  }

  /**
   * Get PO_NAME
   * @return PO_NAME
   */
  @javax.annotation.Nullable
  public String getPONAME() {
    return PO_NAME;
  }

  public void setPONAME(String PO_NAME) {
    this.PO_NAME = PO_NAME;
  }


  public Properties1 REGION(String REGION) {
    this.REGION = REGION;
    return this;
  }

  /**
   * Get REGION
   * @return REGION
   */
  @javax.annotation.Nullable
  public String getREGION() {
    return REGION;
  }

  public void setREGION(String REGION) {
    this.REGION = REGION;
  }


  public Properties1 SQMI(Double SQMI) {
    this.SQMI = SQMI;
    return this;
  }

  /**
   * Get SQMI
   * @return SQMI
   */
  @javax.annotation.Nullable
  public Double getSQMI() {
    return SQMI;
  }

  public void setSQMI(Double SQMI) {
    this.SQMI = SQMI;
  }


  public Properties1 STATE(String STATE) {
    this.STATE = STATE;
    return this;
  }

  /**
   * Get STATE
   * @return STATE
   */
  @javax.annotation.Nullable
  public String getSTATE() {
    return STATE;
  }

  public void setSTATE(String STATE) {
    this.STATE = STATE;
  }


  public Properties1 STATEFP(String STATEFP) {
    this.STATEFP = STATEFP;
    return this;
  }

  /**
   * Get STATEFP
   * @return STATEFP
   */
  @javax.annotation.Nullable
  public String getSTATEFP() {
    return STATEFP;
  }

  public void setSTATEFP(String STATEFP) {
    this.STATEFP = STATEFP;
  }


  public Properties1 STATENS(String STATENS) {
    this.STATENS = STATENS;
    return this;
  }

  /**
   * Get STATENS
   * @return STATENS
   */
  @javax.annotation.Nullable
  public String getSTATENS() {
    return STATENS;
  }

  public void setSTATENS(String STATENS) {
    this.STATENS = STATENS;
  }


  public Properties1 STUSPS(String STUSPS) {
    this.STUSPS = STUSPS;
    return this;
  }

  /**
   * Get STUSPS
   * @return STUSPS
   */
  @javax.annotation.Nullable
  public String getSTUSPS() {
    return STUSPS;
  }

  public void setSTUSPS(String STUSPS) {
    this.STUSPS = STUSPS;
  }


  public Properties1 shapeArea(Double shapeArea) {
    this.shapeArea = shapeArea;
    return this;
  }

  /**
   * Get shapeArea
   * @return shapeArea
   */
  @javax.annotation.Nullable
  public Double getShapeArea() {
    return shapeArea;
  }

  public void setShapeArea(Double shapeArea) {
    this.shapeArea = shapeArea;
  }


  public Properties1 shapeLeng(Double shapeLeng) {
    this.shapeLeng = shapeLeng;
    return this;
  }

  /**
   * Get shapeLeng
   * @return shapeLeng
   */
  @javax.annotation.Nullable
  public Double getShapeLeng() {
    return shapeLeng;
  }

  public void setShapeLeng(Double shapeLeng) {
    this.shapeLeng = shapeLeng;
  }


  public Properties1 TRACTCE(String TRACTCE) {
    this.TRACTCE = TRACTCE;
    return this;
  }

  /**
   * Get TRACTCE
   * @return TRACTCE
   */
  @javax.annotation.Nullable
  public String getTRACTCE() {
    return TRACTCE;
  }

  public void setTRACTCE(String TRACTCE) {
    this.TRACTCE = TRACTCE;
  }


  public Properties1 ZIP_CODE(String ZIP_CODE) {
    this.ZIP_CODE = ZIP_CODE;
    return this;
  }

  /**
   * Get ZIP_CODE
   * @return ZIP_CODE
   */
  @javax.annotation.Nullable
  public String getZIPCODE() {
    return ZIP_CODE;
  }

  public void setZIPCODE(String ZIP_CODE) {
    this.ZIP_CODE = ZIP_CODE;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Properties1 properties1 = (Properties1) o;
    return Objects.equals(this.AFFGEOID, properties1.AFFGEOID) &&
        Objects.equals(this.ALAND, properties1.ALAND) &&
        Objects.equals(this.AWATER, properties1.AWATER) &&
        Objects.equals(this.BLKGRPCE, properties1.BLKGRPCE) &&
        Objects.equals(this.CBSAFP, properties1.CBSAFP) &&
        Objects.equals(this.CLASSFP, properties1.CLASSFP) &&
        Objects.equals(this.COUNTYFP, properties1.COUNTYFP) &&
        Objects.equals(this.COUNTYNS, properties1.COUNTYNS) &&
        Objects.equals(this.CSAFP, properties1.CSAFP) &&
        Objects.equals(this.DIVISION, properties1.DIVISION) &&
        Objects.equals(this.FUNCSTAT, properties1.FUNCSTAT) &&
        Objects.equals(this.GEOID, properties1.GEOID) &&
        Objects.equals(this.INTPTLAT, properties1.INTPTLAT) &&
        Objects.equals(this.INTPTLON, properties1.INTPTLON) &&
        Objects.equals(this.LSAD, properties1.LSAD) &&
        Objects.equals(this.MEMI, properties1.MEMI) &&
        Objects.equals(this.METDIVFP, properties1.METDIVFP) &&
        Objects.equals(this.MTFCC, properties1.MTFCC) &&
        Objects.equals(this.NAME, properties1.NAME) &&
        Objects.equals(this.NAMELSAD, properties1.NAMELSAD) &&
        Objects.equals(this.PCICBSA, properties1.PCICBSA) &&
        Objects.equals(this.PCINECTA, properties1.PCINECTA) &&
        Objects.equals(this.PLACEFP, properties1.PLACEFP) &&
        Objects.equals(this.PLACENS, properties1.PLACENS) &&
        Objects.equals(this.POPULATION, properties1.POPULATION) &&
        Objects.equals(this.POP_SQMI, properties1.POP_SQMI) &&
        Objects.equals(this.PO_NAME, properties1.PO_NAME) &&
        Objects.equals(this.REGION, properties1.REGION) &&
        Objects.equals(this.SQMI, properties1.SQMI) &&
        Objects.equals(this.STATE, properties1.STATE) &&
        Objects.equals(this.STATEFP, properties1.STATEFP) &&
        Objects.equals(this.STATENS, properties1.STATENS) &&
        Objects.equals(this.STUSPS, properties1.STUSPS) &&
        Objects.equals(this.shapeArea, properties1.shapeArea) &&
        Objects.equals(this.shapeLeng, properties1.shapeLeng) &&
        Objects.equals(this.TRACTCE, properties1.TRACTCE) &&
        Objects.equals(this.ZIP_CODE, properties1.ZIP_CODE);
  }

  @Override
  public int hashCode() {
    return Objects.hash(AFFGEOID, ALAND, AWATER, BLKGRPCE, CBSAFP, CLASSFP, COUNTYFP, COUNTYNS, CSAFP, DIVISION, FUNCSTAT, GEOID, INTPTLAT, INTPTLON, LSAD, MEMI, METDIVFP, MTFCC, NAME, NAMELSAD, PCICBSA, PCINECTA, PLACEFP, PLACENS, POPULATION, POP_SQMI, PO_NAME, REGION, SQMI, STATE, STATEFP, STATENS, STUSPS, shapeArea, shapeLeng, TRACTCE, ZIP_CODE);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Properties1 {\n");
    sb.append("    AFFGEOID: ").append(toIndentedString(AFFGEOID)).append("\n");
    sb.append("    ALAND: ").append(toIndentedString(ALAND)).append("\n");
    sb.append("    AWATER: ").append(toIndentedString(AWATER)).append("\n");
    sb.append("    BLKGRPCE: ").append(toIndentedString(BLKGRPCE)).append("\n");
    sb.append("    CBSAFP: ").append(toIndentedString(CBSAFP)).append("\n");
    sb.append("    CLASSFP: ").append(toIndentedString(CLASSFP)).append("\n");
    sb.append("    COUNTYFP: ").append(toIndentedString(COUNTYFP)).append("\n");
    sb.append("    COUNTYNS: ").append(toIndentedString(COUNTYNS)).append("\n");
    sb.append("    CSAFP: ").append(toIndentedString(CSAFP)).append("\n");
    sb.append("    DIVISION: ").append(toIndentedString(DIVISION)).append("\n");
    sb.append("    FUNCSTAT: ").append(toIndentedString(FUNCSTAT)).append("\n");
    sb.append("    GEOID: ").append(toIndentedString(GEOID)).append("\n");
    sb.append("    INTPTLAT: ").append(toIndentedString(INTPTLAT)).append("\n");
    sb.append("    INTPTLON: ").append(toIndentedString(INTPTLON)).append("\n");
    sb.append("    LSAD: ").append(toIndentedString(LSAD)).append("\n");
    sb.append("    MEMI: ").append(toIndentedString(MEMI)).append("\n");
    sb.append("    METDIVFP: ").append(toIndentedString(METDIVFP)).append("\n");
    sb.append("    MTFCC: ").append(toIndentedString(MTFCC)).append("\n");
    sb.append("    NAME: ").append(toIndentedString(NAME)).append("\n");
    sb.append("    NAMELSAD: ").append(toIndentedString(NAMELSAD)).append("\n");
    sb.append("    PCICBSA: ").append(toIndentedString(PCICBSA)).append("\n");
    sb.append("    PCINECTA: ").append(toIndentedString(PCINECTA)).append("\n");
    sb.append("    PLACEFP: ").append(toIndentedString(PLACEFP)).append("\n");
    sb.append("    PLACENS: ").append(toIndentedString(PLACENS)).append("\n");
    sb.append("    POPULATION: ").append(toIndentedString(POPULATION)).append("\n");
    sb.append("    POP_SQMI: ").append(toIndentedString(POP_SQMI)).append("\n");
    sb.append("    PO_NAME: ").append(toIndentedString(PO_NAME)).append("\n");
    sb.append("    REGION: ").append(toIndentedString(REGION)).append("\n");
    sb.append("    SQMI: ").append(toIndentedString(SQMI)).append("\n");
    sb.append("    STATE: ").append(toIndentedString(STATE)).append("\n");
    sb.append("    STATEFP: ").append(toIndentedString(STATEFP)).append("\n");
    sb.append("    STATENS: ").append(toIndentedString(STATENS)).append("\n");
    sb.append("    STUSPS: ").append(toIndentedString(STUSPS)).append("\n");
    sb.append("    shapeArea: ").append(toIndentedString(shapeArea)).append("\n");
    sb.append("    shapeLeng: ").append(toIndentedString(shapeLeng)).append("\n");
    sb.append("    TRACTCE: ").append(toIndentedString(TRACTCE)).append("\n");
    sb.append("    ZIP_CODE: ").append(toIndentedString(ZIP_CODE)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AFFGEOID");
    openapiFields.add("ALAND");
    openapiFields.add("AWATER");
    openapiFields.add("BLKGRPCE");
    openapiFields.add("CBSAFP");
    openapiFields.add("CLASSFP");
    openapiFields.add("COUNTYFP");
    openapiFields.add("COUNTYNS");
    openapiFields.add("CSAFP");
    openapiFields.add("DIVISION");
    openapiFields.add("FUNCSTAT");
    openapiFields.add("GEOID");
    openapiFields.add("INTPTLAT");
    openapiFields.add("INTPTLON");
    openapiFields.add("LSAD");
    openapiFields.add("MEMI");
    openapiFields.add("METDIVFP");
    openapiFields.add("MTFCC");
    openapiFields.add("NAME");
    openapiFields.add("NAMELSAD");
    openapiFields.add("PCICBSA");
    openapiFields.add("PCINECTA");
    openapiFields.add("PLACEFP");
    openapiFields.add("PLACENS");
    openapiFields.add("POPULATION");
    openapiFields.add("POP_SQMI");
    openapiFields.add("PO_NAME");
    openapiFields.add("REGION");
    openapiFields.add("SQMI");
    openapiFields.add("STATE");
    openapiFields.add("STATEFP");
    openapiFields.add("STATENS");
    openapiFields.add("STUSPS");
    openapiFields.add("Shape_Area");
    openapiFields.add("Shape_Leng");
    openapiFields.add("TRACTCE");
    openapiFields.add("ZIP_CODE");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ALAND");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Properties1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Properties1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Properties1 is not found in the empty JSON string", Properties1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Properties1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Properties1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Properties1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AFFGEOID") != null && !jsonObj.get("AFFGEOID").isJsonNull()) && !jsonObj.get("AFFGEOID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AFFGEOID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AFFGEOID").toString()));
      }
      if ((jsonObj.get("BLKGRPCE") != null && !jsonObj.get("BLKGRPCE").isJsonNull()) && !jsonObj.get("BLKGRPCE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BLKGRPCE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BLKGRPCE").toString()));
      }
      if ((jsonObj.get("CBSAFP") != null && !jsonObj.get("CBSAFP").isJsonNull()) && !jsonObj.get("CBSAFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CBSAFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CBSAFP").toString()));
      }
      if ((jsonObj.get("CLASSFP") != null && !jsonObj.get("CLASSFP").isJsonNull()) && !jsonObj.get("CLASSFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CLASSFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CLASSFP").toString()));
      }
      if ((jsonObj.get("COUNTYFP") != null && !jsonObj.get("COUNTYFP").isJsonNull()) && !jsonObj.get("COUNTYFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `COUNTYFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("COUNTYFP").toString()));
      }
      if ((jsonObj.get("COUNTYNS") != null && !jsonObj.get("COUNTYNS").isJsonNull()) && !jsonObj.get("COUNTYNS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `COUNTYNS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("COUNTYNS").toString()));
      }
      if ((jsonObj.get("CSAFP") != null && !jsonObj.get("CSAFP").isJsonNull()) && !jsonObj.get("CSAFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CSAFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CSAFP").toString()));
      }
      if ((jsonObj.get("DIVISION") != null && !jsonObj.get("DIVISION").isJsonNull()) && !jsonObj.get("DIVISION").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DIVISION` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DIVISION").toString()));
      }
      if ((jsonObj.get("FUNCSTAT") != null && !jsonObj.get("FUNCSTAT").isJsonNull()) && !jsonObj.get("FUNCSTAT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FUNCSTAT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FUNCSTAT").toString()));
      }
      if ((jsonObj.get("GEOID") != null && !jsonObj.get("GEOID").isJsonNull()) && !jsonObj.get("GEOID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GEOID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GEOID").toString()));
      }
      if ((jsonObj.get("INTPTLAT") != null && !jsonObj.get("INTPTLAT").isJsonNull()) && !jsonObj.get("INTPTLAT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `INTPTLAT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("INTPTLAT").toString()));
      }
      if ((jsonObj.get("INTPTLON") != null && !jsonObj.get("INTPTLON").isJsonNull()) && !jsonObj.get("INTPTLON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `INTPTLON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("INTPTLON").toString()));
      }
      if ((jsonObj.get("LSAD") != null && !jsonObj.get("LSAD").isJsonNull()) && !jsonObj.get("LSAD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LSAD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LSAD").toString()));
      }
      if ((jsonObj.get("MEMI") != null && !jsonObj.get("MEMI").isJsonNull()) && !jsonObj.get("MEMI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MEMI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MEMI").toString()));
      }
      if ((jsonObj.get("METDIVFP") != null && !jsonObj.get("METDIVFP").isJsonNull()) && !jsonObj.get("METDIVFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `METDIVFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("METDIVFP").toString()));
      }
      if ((jsonObj.get("MTFCC") != null && !jsonObj.get("MTFCC").isJsonNull()) && !jsonObj.get("MTFCC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MTFCC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MTFCC").toString()));
      }
      if ((jsonObj.get("NAME") != null && !jsonObj.get("NAME").isJsonNull()) && !jsonObj.get("NAME").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAME` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAME").toString()));
      }
      if ((jsonObj.get("NAMELSAD") != null && !jsonObj.get("NAMELSAD").isJsonNull()) && !jsonObj.get("NAMELSAD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NAMELSAD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NAMELSAD").toString()));
      }
      if ((jsonObj.get("PCICBSA") != null && !jsonObj.get("PCICBSA").isJsonNull()) && !jsonObj.get("PCICBSA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PCICBSA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PCICBSA").toString()));
      }
      if ((jsonObj.get("PCINECTA") != null && !jsonObj.get("PCINECTA").isJsonNull()) && !jsonObj.get("PCINECTA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PCINECTA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PCINECTA").toString()));
      }
      if ((jsonObj.get("PLACEFP") != null && !jsonObj.get("PLACEFP").isJsonNull()) && !jsonObj.get("PLACEFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PLACEFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PLACEFP").toString()));
      }
      if ((jsonObj.get("PLACENS") != null && !jsonObj.get("PLACENS").isJsonNull()) && !jsonObj.get("PLACENS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PLACENS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PLACENS").toString()));
      }
      if ((jsonObj.get("PO_NAME") != null && !jsonObj.get("PO_NAME").isJsonNull()) && !jsonObj.get("PO_NAME").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PO_NAME` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PO_NAME").toString()));
      }
      if ((jsonObj.get("REGION") != null && !jsonObj.get("REGION").isJsonNull()) && !jsonObj.get("REGION").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `REGION` to be a primitive type in the JSON string but got `%s`", jsonObj.get("REGION").toString()));
      }
      if ((jsonObj.get("STATE") != null && !jsonObj.get("STATE").isJsonNull()) && !jsonObj.get("STATE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `STATE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("STATE").toString()));
      }
      if ((jsonObj.get("STATEFP") != null && !jsonObj.get("STATEFP").isJsonNull()) && !jsonObj.get("STATEFP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `STATEFP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("STATEFP").toString()));
      }
      if ((jsonObj.get("STATENS") != null && !jsonObj.get("STATENS").isJsonNull()) && !jsonObj.get("STATENS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `STATENS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("STATENS").toString()));
      }
      if ((jsonObj.get("STUSPS") != null && !jsonObj.get("STUSPS").isJsonNull()) && !jsonObj.get("STUSPS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `STUSPS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("STUSPS").toString()));
      }
      if ((jsonObj.get("TRACTCE") != null && !jsonObj.get("TRACTCE").isJsonNull()) && !jsonObj.get("TRACTCE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TRACTCE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TRACTCE").toString()));
      }
      if ((jsonObj.get("ZIP_CODE") != null && !jsonObj.get("ZIP_CODE").isJsonNull()) && !jsonObj.get("ZIP_CODE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ZIP_CODE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ZIP_CODE").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Properties1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Properties1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Properties1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Properties1.class));

       return (TypeAdapter<T>) new TypeAdapter<Properties1>() {
           @Override
           public void write(JsonWriter out, Properties1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Properties1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Properties1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Properties1
   * @throws IOException if the JSON string is invalid with respect to Properties1
   */
  public static Properties1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Properties1.class);
  }

  /**
   * Convert an instance of Properties1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

