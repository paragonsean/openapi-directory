/*
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DescribeOccupationInsight;
import org.openapitools.client.model.Homevalueswithin1miRadiusofLocation;
import org.openapitools.client.model.ListAllLocalInsights;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchAvailableInsights
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAvailableInsightsCall(String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/insights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidAPIKey != null) {
            localVarHeaderParams.put("X-RapidAPI-Key", localVarApiClient.parameterToString(xRapidAPIKey));
        }

        if (xRapidAPIHost != null) {
            localVarHeaderParams.put("X-RapidAPI-Host", localVarApiClient.parameterToString(xRapidAPIHost));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchAvailableInsightsValidateBeforeCall(String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xRapidAPIKey' is set
        if (xRapidAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIKey' when calling fetchAvailableInsights(Async)");
        }

        // verify the required parameter 'xRapidAPIHost' is set
        if (xRapidAPIHost == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIHost' when calling fetchAvailableInsights(Async)");
        }

        return fetchAvailableInsightsCall(xRapidAPIKey, xRapidAPIHost, _callback);

    }

    /**
     * Fetch Available Insights
     * List all insights that the user has access to. This includes population, household income, crime statistics, walking traffic, vehicle traffic counts, employment, and much more,
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return ListAllLocalInsights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public ListAllLocalInsights fetchAvailableInsights(String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        ApiResponse<ListAllLocalInsights> localVarResp = fetchAvailableInsightsWithHttpInfo(xRapidAPIKey, xRapidAPIHost);
        return localVarResp.getData();
    }

    /**
     * Fetch Available Insights
     * List all insights that the user has access to. This includes population, household income, crime statistics, walking traffic, vehicle traffic counts, employment, and much more,
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return ApiResponse&lt;ListAllLocalInsights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListAllLocalInsights> fetchAvailableInsightsWithHttpInfo(String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        okhttp3.Call localVarCall = fetchAvailableInsightsValidateBeforeCall(xRapidAPIKey, xRapidAPIHost, null);
        Type localVarReturnType = new TypeToken<ListAllLocalInsights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Available Insights (asynchronously)
     * List all insights that the user has access to. This includes population, household income, crime statistics, walking traffic, vehicle traffic counts, employment, and much more,
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAvailableInsightsAsync(String xRapidAPIKey, String xRapidAPIHost, final ApiCallback<ListAllLocalInsights> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchAvailableInsightsValidateBeforeCall(xRapidAPIKey, xRapidAPIHost, _callback);
        Type localVarReturnType = new TypeToken<ListAllLocalInsights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchInsightQueryParameters
     * @param insightIdColon Insight ID. See developer documentation for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchInsightQueryParametersCall(String insightIdColon, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/insights/{insight_id:}"
            .replace("{" + "insight_id:" + "}", localVarApiClient.escapeString(insightIdColon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidAPIKey != null) {
            localVarHeaderParams.put("X-RapidAPI-Key", localVarApiClient.parameterToString(xRapidAPIKey));
        }

        if (xRapidAPIHost != null) {
            localVarHeaderParams.put("X-RapidAPI-Host", localVarApiClient.parameterToString(xRapidAPIHost));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchInsightQueryParametersValidateBeforeCall(String insightIdColon, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'insightIdColon' is set
        if (insightIdColon == null) {
            throw new ApiException("Missing the required parameter 'insightIdColon' when calling fetchInsightQueryParameters(Async)");
        }

        // verify the required parameter 'xRapidAPIKey' is set
        if (xRapidAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIKey' when calling fetchInsightQueryParameters(Async)");
        }

        // verify the required parameter 'xRapidAPIHost' is set
        if (xRapidAPIHost == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIHost' when calling fetchInsightQueryParameters(Async)");
        }

        return fetchInsightQueryParametersCall(insightIdColon, xRapidAPIKey, xRapidAPIHost, _callback);

    }

    /**
     * Fetch Insight Query Parameters
     * Fetch request/response structure metadata for a given Insight. This provides you the periods of data available as well as any other parameters you may want to query the Insight by. Example Insights include population and market data such as: age, daytime population, avg. home value, crime indexes, foot traffic, employment, income, occupation, etc.  For the full-list see the developer documentation.
     * @param insightIdColon Insight ID. See developer documentation for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return DescribeOccupationInsight
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public DescribeOccupationInsight fetchInsightQueryParameters(String insightIdColon, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        ApiResponse<DescribeOccupationInsight> localVarResp = fetchInsightQueryParametersWithHttpInfo(insightIdColon, xRapidAPIKey, xRapidAPIHost);
        return localVarResp.getData();
    }

    /**
     * Fetch Insight Query Parameters
     * Fetch request/response structure metadata for a given Insight. This provides you the periods of data available as well as any other parameters you may want to query the Insight by. Example Insights include population and market data such as: age, daytime population, avg. home value, crime indexes, foot traffic, employment, income, occupation, etc.  For the full-list see the developer documentation.
     * @param insightIdColon Insight ID. See developer documentation for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return ApiResponse&lt;DescribeOccupationInsight&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DescribeOccupationInsight> fetchInsightQueryParametersWithHttpInfo(String insightIdColon, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        okhttp3.Call localVarCall = fetchInsightQueryParametersValidateBeforeCall(insightIdColon, xRapidAPIKey, xRapidAPIHost, null);
        Type localVarReturnType = new TypeToken<DescribeOccupationInsight>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Insight Query Parameters (asynchronously)
     * Fetch request/response structure metadata for a given Insight. This provides you the periods of data available as well as any other parameters you may want to query the Insight by. Example Insights include population and market data such as: age, daytime population, avg. home value, crime indexes, foot traffic, employment, income, occupation, etc.  For the full-list see the developer documentation.
     * @param insightIdColon Insight ID. See developer documentation for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fetchInsightQueryParametersAsync(String insightIdColon, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback<DescribeOccupationInsight> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchInsightQueryParametersValidateBeforeCall(insightIdColon, xRapidAPIKey, xRapidAPIHost, _callback);
        Type localVarReturnType = new TypeToken<DescribeOccupationInsight>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryInsightatLocation
     * @param version (Required) Insight version. Insight versions are incremented when a response format changes in any way, including the addition of new groups. Old versions are retained, unmodified, for backwards compatibility. (required)
     * @param location (Required) Represents a buffer, region, or custom polygon specification. Accepts the &#x60;Location&#x60; model (as a &#x60;Buffer&#x60;, &#x60;Region&#x60;, or &#x60;Custom Polygon&#x60;) formatted as a JSON string. Multiple &#x60;location&#x60; query parameters are allowed. NOTE: When requesting multiple locations, you must include brackets(i.e. &#x60;?location[]&#x3D;...&amp;location[]&#x3D;...&#x60;). If not included, only the last location will be used. For more detail, see https://idealspot.gitlab.io/developer-docs/#location (required)
     * @param insightIdColon Insight ID. See https://developer.idealspot.com/data for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryInsightatLocationCall(String version, String location, String insightIdColon, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/insights/{insight_id:}/query"
            .replace("{" + "insight_id:" + "}", localVarApiClient.escapeString(insightIdColon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location[]", location));
        }

        if (xRapidAPIKey != null) {
            localVarHeaderParams.put("X-RapidAPI-Key", localVarApiClient.parameterToString(xRapidAPIKey));
        }

        if (xRapidAPIHost != null) {
            localVarHeaderParams.put("X-RapidAPI-Host", localVarApiClient.parameterToString(xRapidAPIHost));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryInsightatLocationValidateBeforeCall(String version, String location, String insightIdColon, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling queryInsightatLocation(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling queryInsightatLocation(Async)");
        }

        // verify the required parameter 'insightIdColon' is set
        if (insightIdColon == null) {
            throw new ApiException("Missing the required parameter 'insightIdColon' when calling queryInsightatLocation(Async)");
        }

        // verify the required parameter 'xRapidAPIKey' is set
        if (xRapidAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIKey' when calling queryInsightatLocation(Async)");
        }

        // verify the required parameter 'xRapidAPIHost' is set
        if (xRapidAPIHost == null) {
            throw new ApiException("Missing the required parameter 'xRapidAPIHost' when calling queryInsightatLocation(Async)");
        }

        return queryInsightatLocationCall(version, location, insightIdColon, xRapidAPIKey, xRapidAPIHost, _callback);

    }

    /**
     * Query Insight at Location
     * Execute a query for a given insight and location(s). Some Insights may require you to provide required options. ie., when querying &#x60;occupation&#x60; for White-Collar Workers, you can filter by opt&#x3D;&#x60;{\&quot;data\&quot;:{\&quot;category\&quot;:[2469]}}&#x60;  For examples of &#x60;locations&#x60;, please see [Location API Documentation](https://idealspot.gitlab.io/developer-docs/#location)
     * @param version (Required) Insight version. Insight versions are incremented when a response format changes in any way, including the addition of new groups. Old versions are retained, unmodified, for backwards compatibility. (required)
     * @param location (Required) Represents a buffer, region, or custom polygon specification. Accepts the &#x60;Location&#x60; model (as a &#x60;Buffer&#x60;, &#x60;Region&#x60;, or &#x60;Custom Polygon&#x60;) formatted as a JSON string. Multiple &#x60;location&#x60; query parameters are allowed. NOTE: When requesting multiple locations, you must include brackets(i.e. &#x60;?location[]&#x3D;...&amp;location[]&#x3D;...&#x60;). If not included, only the last location will be used. For more detail, see https://idealspot.gitlab.io/developer-docs/#location (required)
     * @param insightIdColon Insight ID. See https://developer.idealspot.com/data for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return Homevalueswithin1miRadiusofLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public Homevalueswithin1miRadiusofLocation queryInsightatLocation(String version, String location, String insightIdColon, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        ApiResponse<Homevalueswithin1miRadiusofLocation> localVarResp = queryInsightatLocationWithHttpInfo(version, location, insightIdColon, xRapidAPIKey, xRapidAPIHost);
        return localVarResp.getData();
    }

    /**
     * Query Insight at Location
     * Execute a query for a given insight and location(s). Some Insights may require you to provide required options. ie., when querying &#x60;occupation&#x60; for White-Collar Workers, you can filter by opt&#x3D;&#x60;{\&quot;data\&quot;:{\&quot;category\&quot;:[2469]}}&#x60;  For examples of &#x60;locations&#x60;, please see [Location API Documentation](https://idealspot.gitlab.io/developer-docs/#location)
     * @param version (Required) Insight version. Insight versions are incremented when a response format changes in any way, including the addition of new groups. Old versions are retained, unmodified, for backwards compatibility. (required)
     * @param location (Required) Represents a buffer, region, or custom polygon specification. Accepts the &#x60;Location&#x60; model (as a &#x60;Buffer&#x60;, &#x60;Region&#x60;, or &#x60;Custom Polygon&#x60;) formatted as a JSON string. Multiple &#x60;location&#x60; query parameters are allowed. NOTE: When requesting multiple locations, you must include brackets(i.e. &#x60;?location[]&#x3D;...&amp;location[]&#x3D;...&#x60;). If not included, only the last location will be used. For more detail, see https://idealspot.gitlab.io/developer-docs/#location (required)
     * @param insightIdColon Insight ID. See https://developer.idealspot.com/data for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @return ApiResponse&lt;Homevalueswithin1miRadiusofLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Homevalueswithin1miRadiusofLocation> queryInsightatLocationWithHttpInfo(String version, String location, String insightIdColon, String xRapidAPIKey, String xRapidAPIHost) throws ApiException {
        okhttp3.Call localVarCall = queryInsightatLocationValidateBeforeCall(version, location, insightIdColon, xRapidAPIKey, xRapidAPIHost, null);
        Type localVarReturnType = new TypeToken<Homevalueswithin1miRadiusofLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query Insight at Location (asynchronously)
     * Execute a query for a given insight and location(s). Some Insights may require you to provide required options. ie., when querying &#x60;occupation&#x60; for White-Collar Workers, you can filter by opt&#x3D;&#x60;{\&quot;data\&quot;:{\&quot;category\&quot;:[2469]}}&#x60;  For examples of &#x60;locations&#x60;, please see [Location API Documentation](https://idealspot.gitlab.io/developer-docs/#location)
     * @param version (Required) Insight version. Insight versions are incremented when a response format changes in any way, including the addition of new groups. Old versions are retained, unmodified, for backwards compatibility. (required)
     * @param location (Required) Represents a buffer, region, or custom polygon specification. Accepts the &#x60;Location&#x60; model (as a &#x60;Buffer&#x60;, &#x60;Region&#x60;, or &#x60;Custom Polygon&#x60;) formatted as a JSON string. Multiple &#x60;location&#x60; query parameters are allowed. NOTE: When requesting multiple locations, you must include brackets(i.e. &#x60;?location[]&#x3D;...&amp;location[]&#x3D;...&#x60;). If not included, only the last location will be used. For more detail, see https://idealspot.gitlab.io/developer-docs/#location (required)
     * @param insightIdColon Insight ID. See https://developer.idealspot.com/data for full list. (required)
     * @param xRapidAPIKey (Required) Rapid API Key. See https://rapidapi.com/idealspot-inc-idealspot-inc-default/api/idealspot-geodata (required)
     * @param xRapidAPIHost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * Via -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * access-control-expose-headers -  <br>  * cache-control -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryInsightatLocationAsync(String version, String location, String insightIdColon, String xRapidAPIKey, String xRapidAPIHost, final ApiCallback<Homevalueswithin1miRadiusofLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryInsightatLocationValidateBeforeCall(version, location, insightIdColon, xRapidAPIKey, xRapidAPIHost, _callback);
        Type localVarReturnType = new TypeToken<Homevalueswithin1miRadiusofLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
