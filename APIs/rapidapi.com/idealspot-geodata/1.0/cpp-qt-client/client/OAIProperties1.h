/**
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProperties1.h
 *
 * 
 */

#ifndef OAIProperties1_H
#define OAIProperties1_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProperties1 : public OAIObject {
public:
    OAIProperties1();
    OAIProperties1(QString json);
    ~OAIProperties1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAffgeoid() const;
    void setAffgeoid(const QString &affgeoid);
    bool is_affgeoid_Set() const;
    bool is_affgeoid_Valid() const;

    qint32 getAland() const;
    void setAland(const qint32 &aland);
    bool is_aland_Set() const;
    bool is_aland_Valid() const;

    qint32 getAwater() const;
    void setAwater(const qint32 &awater);
    bool is_awater_Set() const;
    bool is_awater_Valid() const;

    QString getBlkgrpce() const;
    void setBlkgrpce(const QString &blkgrpce);
    bool is_blkgrpce_Set() const;
    bool is_blkgrpce_Valid() const;

    QString getCbsafp() const;
    void setCbsafp(const QString &cbsafp);
    bool is_cbsafp_Set() const;
    bool is_cbsafp_Valid() const;

    QString getClassfp() const;
    void setClassfp(const QString &classfp);
    bool is_classfp_Set() const;
    bool is_classfp_Valid() const;

    QString getCountyfp() const;
    void setCountyfp(const QString &countyfp);
    bool is_countyfp_Set() const;
    bool is_countyfp_Valid() const;

    QString getCountyns() const;
    void setCountyns(const QString &countyns);
    bool is_countyns_Set() const;
    bool is_countyns_Valid() const;

    QString getCsafp() const;
    void setCsafp(const QString &csafp);
    bool is_csafp_Set() const;
    bool is_csafp_Valid() const;

    QString getDivision() const;
    void setDivision(const QString &division);
    bool is_division_Set() const;
    bool is_division_Valid() const;

    QString getFuncstat() const;
    void setFuncstat(const QString &funcstat);
    bool is_funcstat_Set() const;
    bool is_funcstat_Valid() const;

    QString getGeoid() const;
    void setGeoid(const QString &geoid);
    bool is_geoid_Set() const;
    bool is_geoid_Valid() const;

    QString getIntptlat() const;
    void setIntptlat(const QString &intptlat);
    bool is_intptlat_Set() const;
    bool is_intptlat_Valid() const;

    QString getIntptlon() const;
    void setIntptlon(const QString &intptlon);
    bool is_intptlon_Set() const;
    bool is_intptlon_Valid() const;

    QString getLsad() const;
    void setLsad(const QString &lsad);
    bool is_lsad_Set() const;
    bool is_lsad_Valid() const;

    QString getMemi() const;
    void setMemi(const QString &memi);
    bool is_memi_Set() const;
    bool is_memi_Valid() const;

    QString getMetdivfp() const;
    void setMetdivfp(const QString &metdivfp);
    bool is_metdivfp_Set() const;
    bool is_metdivfp_Valid() const;

    QString getMtfcc() const;
    void setMtfcc(const QString &mtfcc);
    bool is_mtfcc_Set() const;
    bool is_mtfcc_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNamelsad() const;
    void setNamelsad(const QString &namelsad);
    bool is_namelsad_Set() const;
    bool is_namelsad_Valid() const;

    QString getPcicbsa() const;
    void setPcicbsa(const QString &pcicbsa);
    bool is_pcicbsa_Set() const;
    bool is_pcicbsa_Valid() const;

    QString getPcinecta() const;
    void setPcinecta(const QString &pcinecta);
    bool is_pcinecta_Set() const;
    bool is_pcinecta_Valid() const;

    QString getPlacefp() const;
    void setPlacefp(const QString &placefp);
    bool is_placefp_Set() const;
    bool is_placefp_Valid() const;

    QString getPlacens() const;
    void setPlacens(const QString &placens);
    bool is_placens_Set() const;
    bool is_placens_Valid() const;

    qint32 getPopulation() const;
    void setPopulation(const qint32 &population);
    bool is_population_Set() const;
    bool is_population_Valid() const;

    double getPopSqmi() const;
    void setPopSqmi(const double &pop_sqmi);
    bool is_pop_sqmi_Set() const;
    bool is_pop_sqmi_Valid() const;

    QString getPoName() const;
    void setPoName(const QString &po_name);
    bool is_po_name_Set() const;
    bool is_po_name_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    double getSqmi() const;
    void setSqmi(const double &sqmi);
    bool is_sqmi_Set() const;
    bool is_sqmi_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStatefp() const;
    void setStatefp(const QString &statefp);
    bool is_statefp_Set() const;
    bool is_statefp_Valid() const;

    QString getStatens() const;
    void setStatens(const QString &statens);
    bool is_statens_Set() const;
    bool is_statens_Valid() const;

    QString getStusps() const;
    void setStusps(const QString &stusps);
    bool is_stusps_Set() const;
    bool is_stusps_Valid() const;

    double getShapeArea() const;
    void setShapeArea(const double &shape_area);
    bool is_shape_area_Set() const;
    bool is_shape_area_Valid() const;

    double getShapeLeng() const;
    void setShapeLeng(const double &shape_leng);
    bool is_shape_leng_Set() const;
    bool is_shape_leng_Valid() const;

    QString getTractce() const;
    void setTractce(const QString &tractce);
    bool is_tractce_Set() const;
    bool is_tractce_Valid() const;

    QString getZipCode() const;
    void setZipCode(const QString &zip_code);
    bool is_zip_code_Set() const;
    bool is_zip_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_affgeoid;
    bool m_affgeoid_isSet;
    bool m_affgeoid_isValid;

    qint32 m_aland;
    bool m_aland_isSet;
    bool m_aland_isValid;

    qint32 m_awater;
    bool m_awater_isSet;
    bool m_awater_isValid;

    QString m_blkgrpce;
    bool m_blkgrpce_isSet;
    bool m_blkgrpce_isValid;

    QString m_cbsafp;
    bool m_cbsafp_isSet;
    bool m_cbsafp_isValid;

    QString m_classfp;
    bool m_classfp_isSet;
    bool m_classfp_isValid;

    QString m_countyfp;
    bool m_countyfp_isSet;
    bool m_countyfp_isValid;

    QString m_countyns;
    bool m_countyns_isSet;
    bool m_countyns_isValid;

    QString m_csafp;
    bool m_csafp_isSet;
    bool m_csafp_isValid;

    QString m_division;
    bool m_division_isSet;
    bool m_division_isValid;

    QString m_funcstat;
    bool m_funcstat_isSet;
    bool m_funcstat_isValid;

    QString m_geoid;
    bool m_geoid_isSet;
    bool m_geoid_isValid;

    QString m_intptlat;
    bool m_intptlat_isSet;
    bool m_intptlat_isValid;

    QString m_intptlon;
    bool m_intptlon_isSet;
    bool m_intptlon_isValid;

    QString m_lsad;
    bool m_lsad_isSet;
    bool m_lsad_isValid;

    QString m_memi;
    bool m_memi_isSet;
    bool m_memi_isValid;

    QString m_metdivfp;
    bool m_metdivfp_isSet;
    bool m_metdivfp_isValid;

    QString m_mtfcc;
    bool m_mtfcc_isSet;
    bool m_mtfcc_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_namelsad;
    bool m_namelsad_isSet;
    bool m_namelsad_isValid;

    QString m_pcicbsa;
    bool m_pcicbsa_isSet;
    bool m_pcicbsa_isValid;

    QString m_pcinecta;
    bool m_pcinecta_isSet;
    bool m_pcinecta_isValid;

    QString m_placefp;
    bool m_placefp_isSet;
    bool m_placefp_isValid;

    QString m_placens;
    bool m_placens_isSet;
    bool m_placens_isValid;

    qint32 m_population;
    bool m_population_isSet;
    bool m_population_isValid;

    double m_pop_sqmi;
    bool m_pop_sqmi_isSet;
    bool m_pop_sqmi_isValid;

    QString m_po_name;
    bool m_po_name_isSet;
    bool m_po_name_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    double m_sqmi;
    bool m_sqmi_isSet;
    bool m_sqmi_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_statefp;
    bool m_statefp_isSet;
    bool m_statefp_isValid;

    QString m_statens;
    bool m_statens_isSet;
    bool m_statens_isValid;

    QString m_stusps;
    bool m_stusps_isSet;
    bool m_stusps_isValid;

    double m_shape_area;
    bool m_shape_area_isSet;
    bool m_shape_area_isValid;

    double m_shape_leng;
    bool m_shape_leng_isSet;
    bool m_shape_leng_isValid;

    QString m_tractce;
    bool m_tractce_isSet;
    bool m_tractce_isValid;

    QString m_zip_code;
    bool m_zip_code_isSet;
    bool m_zip_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProperties1)

#endif // OAIProperties1_H
