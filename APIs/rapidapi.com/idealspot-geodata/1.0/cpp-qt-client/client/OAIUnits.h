/**
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUnits.h
 *
 * 
 */

#ifndef OAIUnits_H
#define OAIUnits_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUnits : public OAIObject {
public:
    OAIUnits();
    OAIUnits(QString json);
    ~OAIUnits() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getR100k125k() const;
    void setR100k125k(const QString &r_100k_125k);
    bool is_r_100k_125k_Set() const;
    bool is_r_100k_125k_Valid() const;

    QString getR10k15k() const;
    void setR10k15k(const QString &r_10k_15k);
    bool is_r_10k_15k_Set() const;
    bool is_r_10k_15k_Valid() const;

    QString getR125k150k() const;
    void setR125k150k(const QString &r_125k_150k);
    bool is_r_125k_150k_Set() const;
    bool is_r_125k_150k_Valid() const;

    QString getR150k175k() const;
    void setR150k175k(const QString &r_150k_175k);
    bool is_r_150k_175k_Set() const;
    bool is_r_150k_175k_Valid() const;

    QString getR15k20k() const;
    void setR15k20k(const QString &r_15k_20k);
    bool is_r_15k_20k_Set() const;
    bool is_r_15k_20k_Valid() const;

    QString getR175k200k() const;
    void setR175k200k(const QString &r_175k_200k);
    bool is_r_175k_200k_Set() const;
    bool is_r_175k_200k_Valid() const;

    QString getR200k250k() const;
    void setR200k250k(const QString &r_200k_250k);
    bool is_r_200k_250k_Set() const;
    bool is_r_200k_250k_Valid() const;

    QString getR20k25k() const;
    void setR20k25k(const QString &r_20k_25k);
    bool is_r_20k_25k_Set() const;
    bool is_r_20k_25k_Valid() const;

    QString getR250k300k() const;
    void setR250k300k(const QString &r_250k_300k);
    bool is_r_250k_300k_Set() const;
    bool is_r_250k_300k_Valid() const;

    QString getR25k30k() const;
    void setR25k30k(const QString &r_25k_30k);
    bool is_r_25k_30k_Set() const;
    bool is_r_25k_30k_Valid() const;

    QString getR300k400k() const;
    void setR300k400k(const QString &r_300k_400k);
    bool is_r_300k_400k_Set() const;
    bool is_r_300k_400k_Valid() const;

    QString getR30k35k() const;
    void setR30k35k(const QString &r_30k_35k);
    bool is_r_30k_35k_Set() const;
    bool is_r_30k_35k_Valid() const;

    QString getR35k40k() const;
    void setR35k40k(const QString &r_35k_40k);
    bool is_r_35k_40k_Set() const;
    bool is_r_35k_40k_Valid() const;

    QString getR400k500k() const;
    void setR400k500k(const QString &r_400k_500k);
    bool is_r_400k_500k_Set() const;
    bool is_r_400k_500k_Valid() const;

    QString getR40k50k() const;
    void setR40k50k(const QString &r_40k_50k);
    bool is_r_40k_50k_Set() const;
    bool is_r_40k_50k_Valid() const;

    QString getR500k750k() const;
    void setR500k750k(const QString &r_500k_750k);
    bool is_r_500k_750k_Set() const;
    bool is_r_500k_750k_Valid() const;

    QString getR50k60k() const;
    void setR50k60k(const QString &r_50k_60k);
    bool is_r_50k_60k_Set() const;
    bool is_r_50k_60k_Valid() const;

    QString getR60k70k() const;
    void setR60k70k(const QString &r_60k_70k);
    bool is_r_60k_70k_Set() const;
    bool is_r_60k_70k_Valid() const;

    QString getR70k80k() const;
    void setR70k80k(const QString &r_70k_80k);
    bool is_r_70k_80k_Set() const;
    bool is_r_70k_80k_Valid() const;

    QString getR750k1M() const;
    void setR750k1M(const QString &r_750k_1_m);
    bool is_r_750k_1_m_Set() const;
    bool is_r_750k_1_m_Valid() const;

    QString getR80k90k() const;
    void setR80k90k(const QString &r_80k_90k);
    bool is_r_80k_90k_Set() const;
    bool is_r_80k_90k_Valid() const;

    QString getR90k100k() const;
    void setR90k100k(const QString &r_90k_100k);
    bool is_r_90k_100k_Set() const;
    bool is_r_90k_100k_Valid() const;

    QString getMedianHomeValue() const;
    void setMedianHomeValue(const QString &median_home_value);
    bool is_median_home_value_Set() const;
    bool is_median_home_value_Valid() const;

    QString getOver1M() const;
    void setOver1M(const QString &over_1_m);
    bool is_over_1_m_Set() const;
    bool is_over_1_m_Valid() const;

    QString getOwnerOccupiedHouseholds() const;
    void setOwnerOccupiedHouseholds(const QString &owner_occupied_households);
    bool is_owner_occupied_households_Set() const;
    bool is_owner_occupied_households_Valid() const;

    QString getUnder10k() const;
    void setUnder10k(const QString &under_10k);
    bool is_under_10k_Set() const;
    bool is_under_10k_Valid() const;

    QString getContextHouseholds() const;
    void setContextHouseholds(const QString &context_households);
    bool is_context_households_Set() const;
    bool is_context_households_Valid() const;

    QString getContextLandarea() const;
    void setContextLandarea(const QString &context_landarea);
    bool is_context_landarea_Set() const;
    bool is_context_landarea_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_r_100k_125k;
    bool m_r_100k_125k_isSet;
    bool m_r_100k_125k_isValid;

    QString m_r_10k_15k;
    bool m_r_10k_15k_isSet;
    bool m_r_10k_15k_isValid;

    QString m_r_125k_150k;
    bool m_r_125k_150k_isSet;
    bool m_r_125k_150k_isValid;

    QString m_r_150k_175k;
    bool m_r_150k_175k_isSet;
    bool m_r_150k_175k_isValid;

    QString m_r_15k_20k;
    bool m_r_15k_20k_isSet;
    bool m_r_15k_20k_isValid;

    QString m_r_175k_200k;
    bool m_r_175k_200k_isSet;
    bool m_r_175k_200k_isValid;

    QString m_r_200k_250k;
    bool m_r_200k_250k_isSet;
    bool m_r_200k_250k_isValid;

    QString m_r_20k_25k;
    bool m_r_20k_25k_isSet;
    bool m_r_20k_25k_isValid;

    QString m_r_250k_300k;
    bool m_r_250k_300k_isSet;
    bool m_r_250k_300k_isValid;

    QString m_r_25k_30k;
    bool m_r_25k_30k_isSet;
    bool m_r_25k_30k_isValid;

    QString m_r_300k_400k;
    bool m_r_300k_400k_isSet;
    bool m_r_300k_400k_isValid;

    QString m_r_30k_35k;
    bool m_r_30k_35k_isSet;
    bool m_r_30k_35k_isValid;

    QString m_r_35k_40k;
    bool m_r_35k_40k_isSet;
    bool m_r_35k_40k_isValid;

    QString m_r_400k_500k;
    bool m_r_400k_500k_isSet;
    bool m_r_400k_500k_isValid;

    QString m_r_40k_50k;
    bool m_r_40k_50k_isSet;
    bool m_r_40k_50k_isValid;

    QString m_r_500k_750k;
    bool m_r_500k_750k_isSet;
    bool m_r_500k_750k_isValid;

    QString m_r_50k_60k;
    bool m_r_50k_60k_isSet;
    bool m_r_50k_60k_isValid;

    QString m_r_60k_70k;
    bool m_r_60k_70k_isSet;
    bool m_r_60k_70k_isValid;

    QString m_r_70k_80k;
    bool m_r_70k_80k_isSet;
    bool m_r_70k_80k_isValid;

    QString m_r_750k_1_m;
    bool m_r_750k_1_m_isSet;
    bool m_r_750k_1_m_isValid;

    QString m_r_80k_90k;
    bool m_r_80k_90k_isSet;
    bool m_r_80k_90k_isValid;

    QString m_r_90k_100k;
    bool m_r_90k_100k_isSet;
    bool m_r_90k_100k_isValid;

    QString m_median_home_value;
    bool m_median_home_value_isSet;
    bool m_median_home_value_isValid;

    QString m_over_1_m;
    bool m_over_1_m_isSet;
    bool m_over_1_m_isValid;

    QString m_owner_occupied_households;
    bool m_owner_occupied_households_isSet;
    bool m_owner_occupied_households_isValid;

    QString m_under_10k;
    bool m_under_10k_isSet;
    bool m_under_10k_isValid;

    QString m_context_households;
    bool m_context_households_isSet;
    bool m_context_households_isValid;

    QString m_context_landarea;
    bool m_context_landarea_isSet;
    bool m_context_landarea_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUnits)

#endif // OAIUnits_H
