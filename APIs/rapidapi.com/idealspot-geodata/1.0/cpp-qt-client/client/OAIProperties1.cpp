/**
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperties1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperties1::OAIProperties1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperties1::OAIProperties1() {
    this->initializeModel();
}

OAIProperties1::~OAIProperties1() {}

void OAIProperties1::initializeModel() {

    m_affgeoid_isSet = false;
    m_affgeoid_isValid = false;

    m_aland_isSet = false;
    m_aland_isValid = false;

    m_awater_isSet = false;
    m_awater_isValid = false;

    m_blkgrpce_isSet = false;
    m_blkgrpce_isValid = false;

    m_cbsafp_isSet = false;
    m_cbsafp_isValid = false;

    m_classfp_isSet = false;
    m_classfp_isValid = false;

    m_countyfp_isSet = false;
    m_countyfp_isValid = false;

    m_countyns_isSet = false;
    m_countyns_isValid = false;

    m_csafp_isSet = false;
    m_csafp_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_funcstat_isSet = false;
    m_funcstat_isValid = false;

    m_geoid_isSet = false;
    m_geoid_isValid = false;

    m_intptlat_isSet = false;
    m_intptlat_isValid = false;

    m_intptlon_isSet = false;
    m_intptlon_isValid = false;

    m_lsad_isSet = false;
    m_lsad_isValid = false;

    m_memi_isSet = false;
    m_memi_isValid = false;

    m_metdivfp_isSet = false;
    m_metdivfp_isValid = false;

    m_mtfcc_isSet = false;
    m_mtfcc_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_namelsad_isSet = false;
    m_namelsad_isValid = false;

    m_pcicbsa_isSet = false;
    m_pcicbsa_isValid = false;

    m_pcinecta_isSet = false;
    m_pcinecta_isValid = false;

    m_placefp_isSet = false;
    m_placefp_isValid = false;

    m_placens_isSet = false;
    m_placens_isValid = false;

    m_population_isSet = false;
    m_population_isValid = false;

    m_pop_sqmi_isSet = false;
    m_pop_sqmi_isValid = false;

    m_po_name_isSet = false;
    m_po_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_sqmi_isSet = false;
    m_sqmi_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_statefp_isSet = false;
    m_statefp_isValid = false;

    m_statens_isSet = false;
    m_statens_isValid = false;

    m_stusps_isSet = false;
    m_stusps_isValid = false;

    m_shape_area_isSet = false;
    m_shape_area_isValid = false;

    m_shape_leng_isSet = false;
    m_shape_leng_isValid = false;

    m_tractce_isSet = false;
    m_tractce_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIProperties1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperties1::fromJsonObject(QJsonObject json) {

    m_affgeoid_isValid = ::OpenAPI::fromJsonValue(m_affgeoid, json[QString("AFFGEOID")]);
    m_affgeoid_isSet = !json[QString("AFFGEOID")].isNull() && m_affgeoid_isValid;

    m_aland_isValid = ::OpenAPI::fromJsonValue(m_aland, json[QString("ALAND")]);
    m_aland_isSet = !json[QString("ALAND")].isNull() && m_aland_isValid;

    m_awater_isValid = ::OpenAPI::fromJsonValue(m_awater, json[QString("AWATER")]);
    m_awater_isSet = !json[QString("AWATER")].isNull() && m_awater_isValid;

    m_blkgrpce_isValid = ::OpenAPI::fromJsonValue(m_blkgrpce, json[QString("BLKGRPCE")]);
    m_blkgrpce_isSet = !json[QString("BLKGRPCE")].isNull() && m_blkgrpce_isValid;

    m_cbsafp_isValid = ::OpenAPI::fromJsonValue(m_cbsafp, json[QString("CBSAFP")]);
    m_cbsafp_isSet = !json[QString("CBSAFP")].isNull() && m_cbsafp_isValid;

    m_classfp_isValid = ::OpenAPI::fromJsonValue(m_classfp, json[QString("CLASSFP")]);
    m_classfp_isSet = !json[QString("CLASSFP")].isNull() && m_classfp_isValid;

    m_countyfp_isValid = ::OpenAPI::fromJsonValue(m_countyfp, json[QString("COUNTYFP")]);
    m_countyfp_isSet = !json[QString("COUNTYFP")].isNull() && m_countyfp_isValid;

    m_countyns_isValid = ::OpenAPI::fromJsonValue(m_countyns, json[QString("COUNTYNS")]);
    m_countyns_isSet = !json[QString("COUNTYNS")].isNull() && m_countyns_isValid;

    m_csafp_isValid = ::OpenAPI::fromJsonValue(m_csafp, json[QString("CSAFP")]);
    m_csafp_isSet = !json[QString("CSAFP")].isNull() && m_csafp_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("DIVISION")]);
    m_division_isSet = !json[QString("DIVISION")].isNull() && m_division_isValid;

    m_funcstat_isValid = ::OpenAPI::fromJsonValue(m_funcstat, json[QString("FUNCSTAT")]);
    m_funcstat_isSet = !json[QString("FUNCSTAT")].isNull() && m_funcstat_isValid;

    m_geoid_isValid = ::OpenAPI::fromJsonValue(m_geoid, json[QString("GEOID")]);
    m_geoid_isSet = !json[QString("GEOID")].isNull() && m_geoid_isValid;

    m_intptlat_isValid = ::OpenAPI::fromJsonValue(m_intptlat, json[QString("INTPTLAT")]);
    m_intptlat_isSet = !json[QString("INTPTLAT")].isNull() && m_intptlat_isValid;

    m_intptlon_isValid = ::OpenAPI::fromJsonValue(m_intptlon, json[QString("INTPTLON")]);
    m_intptlon_isSet = !json[QString("INTPTLON")].isNull() && m_intptlon_isValid;

    m_lsad_isValid = ::OpenAPI::fromJsonValue(m_lsad, json[QString("LSAD")]);
    m_lsad_isSet = !json[QString("LSAD")].isNull() && m_lsad_isValid;

    m_memi_isValid = ::OpenAPI::fromJsonValue(m_memi, json[QString("MEMI")]);
    m_memi_isSet = !json[QString("MEMI")].isNull() && m_memi_isValid;

    m_metdivfp_isValid = ::OpenAPI::fromJsonValue(m_metdivfp, json[QString("METDIVFP")]);
    m_metdivfp_isSet = !json[QString("METDIVFP")].isNull() && m_metdivfp_isValid;

    m_mtfcc_isValid = ::OpenAPI::fromJsonValue(m_mtfcc, json[QString("MTFCC")]);
    m_mtfcc_isSet = !json[QString("MTFCC")].isNull() && m_mtfcc_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("NAME")]);
    m_name_isSet = !json[QString("NAME")].isNull() && m_name_isValid;

    m_namelsad_isValid = ::OpenAPI::fromJsonValue(m_namelsad, json[QString("NAMELSAD")]);
    m_namelsad_isSet = !json[QString("NAMELSAD")].isNull() && m_namelsad_isValid;

    m_pcicbsa_isValid = ::OpenAPI::fromJsonValue(m_pcicbsa, json[QString("PCICBSA")]);
    m_pcicbsa_isSet = !json[QString("PCICBSA")].isNull() && m_pcicbsa_isValid;

    m_pcinecta_isValid = ::OpenAPI::fromJsonValue(m_pcinecta, json[QString("PCINECTA")]);
    m_pcinecta_isSet = !json[QString("PCINECTA")].isNull() && m_pcinecta_isValid;

    m_placefp_isValid = ::OpenAPI::fromJsonValue(m_placefp, json[QString("PLACEFP")]);
    m_placefp_isSet = !json[QString("PLACEFP")].isNull() && m_placefp_isValid;

    m_placens_isValid = ::OpenAPI::fromJsonValue(m_placens, json[QString("PLACENS")]);
    m_placens_isSet = !json[QString("PLACENS")].isNull() && m_placens_isValid;

    m_population_isValid = ::OpenAPI::fromJsonValue(m_population, json[QString("POPULATION")]);
    m_population_isSet = !json[QString("POPULATION")].isNull() && m_population_isValid;

    m_pop_sqmi_isValid = ::OpenAPI::fromJsonValue(m_pop_sqmi, json[QString("POP_SQMI")]);
    m_pop_sqmi_isSet = !json[QString("POP_SQMI")].isNull() && m_pop_sqmi_isValid;

    m_po_name_isValid = ::OpenAPI::fromJsonValue(m_po_name, json[QString("PO_NAME")]);
    m_po_name_isSet = !json[QString("PO_NAME")].isNull() && m_po_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("REGION")]);
    m_region_isSet = !json[QString("REGION")].isNull() && m_region_isValid;

    m_sqmi_isValid = ::OpenAPI::fromJsonValue(m_sqmi, json[QString("SQMI")]);
    m_sqmi_isSet = !json[QString("SQMI")].isNull() && m_sqmi_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("STATE")]);
    m_state_isSet = !json[QString("STATE")].isNull() && m_state_isValid;

    m_statefp_isValid = ::OpenAPI::fromJsonValue(m_statefp, json[QString("STATEFP")]);
    m_statefp_isSet = !json[QString("STATEFP")].isNull() && m_statefp_isValid;

    m_statens_isValid = ::OpenAPI::fromJsonValue(m_statens, json[QString("STATENS")]);
    m_statens_isSet = !json[QString("STATENS")].isNull() && m_statens_isValid;

    m_stusps_isValid = ::OpenAPI::fromJsonValue(m_stusps, json[QString("STUSPS")]);
    m_stusps_isSet = !json[QString("STUSPS")].isNull() && m_stusps_isValid;

    m_shape_area_isValid = ::OpenAPI::fromJsonValue(m_shape_area, json[QString("Shape_Area")]);
    m_shape_area_isSet = !json[QString("Shape_Area")].isNull() && m_shape_area_isValid;

    m_shape_leng_isValid = ::OpenAPI::fromJsonValue(m_shape_leng, json[QString("Shape_Leng")]);
    m_shape_leng_isSet = !json[QString("Shape_Leng")].isNull() && m_shape_leng_isValid;

    m_tractce_isValid = ::OpenAPI::fromJsonValue(m_tractce, json[QString("TRACTCE")]);
    m_tractce_isSet = !json[QString("TRACTCE")].isNull() && m_tractce_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("ZIP_CODE")]);
    m_zip_code_isSet = !json[QString("ZIP_CODE")].isNull() && m_zip_code_isValid;
}

QString OAIProperties1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperties1::asJsonObject() const {
    QJsonObject obj;
    if (m_affgeoid_isSet) {
        obj.insert(QString("AFFGEOID"), ::OpenAPI::toJsonValue(m_affgeoid));
    }
    if (m_aland_isSet) {
        obj.insert(QString("ALAND"), ::OpenAPI::toJsonValue(m_aland));
    }
    if (m_awater_isSet) {
        obj.insert(QString("AWATER"), ::OpenAPI::toJsonValue(m_awater));
    }
    if (m_blkgrpce_isSet) {
        obj.insert(QString("BLKGRPCE"), ::OpenAPI::toJsonValue(m_blkgrpce));
    }
    if (m_cbsafp_isSet) {
        obj.insert(QString("CBSAFP"), ::OpenAPI::toJsonValue(m_cbsafp));
    }
    if (m_classfp_isSet) {
        obj.insert(QString("CLASSFP"), ::OpenAPI::toJsonValue(m_classfp));
    }
    if (m_countyfp_isSet) {
        obj.insert(QString("COUNTYFP"), ::OpenAPI::toJsonValue(m_countyfp));
    }
    if (m_countyns_isSet) {
        obj.insert(QString("COUNTYNS"), ::OpenAPI::toJsonValue(m_countyns));
    }
    if (m_csafp_isSet) {
        obj.insert(QString("CSAFP"), ::OpenAPI::toJsonValue(m_csafp));
    }
    if (m_division_isSet) {
        obj.insert(QString("DIVISION"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_funcstat_isSet) {
        obj.insert(QString("FUNCSTAT"), ::OpenAPI::toJsonValue(m_funcstat));
    }
    if (m_geoid_isSet) {
        obj.insert(QString("GEOID"), ::OpenAPI::toJsonValue(m_geoid));
    }
    if (m_intptlat_isSet) {
        obj.insert(QString("INTPTLAT"), ::OpenAPI::toJsonValue(m_intptlat));
    }
    if (m_intptlon_isSet) {
        obj.insert(QString("INTPTLON"), ::OpenAPI::toJsonValue(m_intptlon));
    }
    if (m_lsad_isSet) {
        obj.insert(QString("LSAD"), ::OpenAPI::toJsonValue(m_lsad));
    }
    if (m_memi_isSet) {
        obj.insert(QString("MEMI"), ::OpenAPI::toJsonValue(m_memi));
    }
    if (m_metdivfp_isSet) {
        obj.insert(QString("METDIVFP"), ::OpenAPI::toJsonValue(m_metdivfp));
    }
    if (m_mtfcc_isSet) {
        obj.insert(QString("MTFCC"), ::OpenAPI::toJsonValue(m_mtfcc));
    }
    if (m_name_isSet) {
        obj.insert(QString("NAME"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namelsad_isSet) {
        obj.insert(QString("NAMELSAD"), ::OpenAPI::toJsonValue(m_namelsad));
    }
    if (m_pcicbsa_isSet) {
        obj.insert(QString("PCICBSA"), ::OpenAPI::toJsonValue(m_pcicbsa));
    }
    if (m_pcinecta_isSet) {
        obj.insert(QString("PCINECTA"), ::OpenAPI::toJsonValue(m_pcinecta));
    }
    if (m_placefp_isSet) {
        obj.insert(QString("PLACEFP"), ::OpenAPI::toJsonValue(m_placefp));
    }
    if (m_placens_isSet) {
        obj.insert(QString("PLACENS"), ::OpenAPI::toJsonValue(m_placens));
    }
    if (m_population_isSet) {
        obj.insert(QString("POPULATION"), ::OpenAPI::toJsonValue(m_population));
    }
    if (m_pop_sqmi_isSet) {
        obj.insert(QString("POP_SQMI"), ::OpenAPI::toJsonValue(m_pop_sqmi));
    }
    if (m_po_name_isSet) {
        obj.insert(QString("PO_NAME"), ::OpenAPI::toJsonValue(m_po_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("REGION"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_sqmi_isSet) {
        obj.insert(QString("SQMI"), ::OpenAPI::toJsonValue(m_sqmi));
    }
    if (m_state_isSet) {
        obj.insert(QString("STATE"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_statefp_isSet) {
        obj.insert(QString("STATEFP"), ::OpenAPI::toJsonValue(m_statefp));
    }
    if (m_statens_isSet) {
        obj.insert(QString("STATENS"), ::OpenAPI::toJsonValue(m_statens));
    }
    if (m_stusps_isSet) {
        obj.insert(QString("STUSPS"), ::OpenAPI::toJsonValue(m_stusps));
    }
    if (m_shape_area_isSet) {
        obj.insert(QString("Shape_Area"), ::OpenAPI::toJsonValue(m_shape_area));
    }
    if (m_shape_leng_isSet) {
        obj.insert(QString("Shape_Leng"), ::OpenAPI::toJsonValue(m_shape_leng));
    }
    if (m_tractce_isSet) {
        obj.insert(QString("TRACTCE"), ::OpenAPI::toJsonValue(m_tractce));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("ZIP_CODE"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIProperties1::getAffgeoid() const {
    return m_affgeoid;
}
void OAIProperties1::setAffgeoid(const QString &affgeoid) {
    m_affgeoid = affgeoid;
    m_affgeoid_isSet = true;
}

bool OAIProperties1::is_affgeoid_Set() const{
    return m_affgeoid_isSet;
}

bool OAIProperties1::is_affgeoid_Valid() const{
    return m_affgeoid_isValid;
}

qint32 OAIProperties1::getAland() const {
    return m_aland;
}
void OAIProperties1::setAland(const qint32 &aland) {
    m_aland = aland;
    m_aland_isSet = true;
}

bool OAIProperties1::is_aland_Set() const{
    return m_aland_isSet;
}

bool OAIProperties1::is_aland_Valid() const{
    return m_aland_isValid;
}

qint32 OAIProperties1::getAwater() const {
    return m_awater;
}
void OAIProperties1::setAwater(const qint32 &awater) {
    m_awater = awater;
    m_awater_isSet = true;
}

bool OAIProperties1::is_awater_Set() const{
    return m_awater_isSet;
}

bool OAIProperties1::is_awater_Valid() const{
    return m_awater_isValid;
}

QString OAIProperties1::getBlkgrpce() const {
    return m_blkgrpce;
}
void OAIProperties1::setBlkgrpce(const QString &blkgrpce) {
    m_blkgrpce = blkgrpce;
    m_blkgrpce_isSet = true;
}

bool OAIProperties1::is_blkgrpce_Set() const{
    return m_blkgrpce_isSet;
}

bool OAIProperties1::is_blkgrpce_Valid() const{
    return m_blkgrpce_isValid;
}

QString OAIProperties1::getCbsafp() const {
    return m_cbsafp;
}
void OAIProperties1::setCbsafp(const QString &cbsafp) {
    m_cbsafp = cbsafp;
    m_cbsafp_isSet = true;
}

bool OAIProperties1::is_cbsafp_Set() const{
    return m_cbsafp_isSet;
}

bool OAIProperties1::is_cbsafp_Valid() const{
    return m_cbsafp_isValid;
}

QString OAIProperties1::getClassfp() const {
    return m_classfp;
}
void OAIProperties1::setClassfp(const QString &classfp) {
    m_classfp = classfp;
    m_classfp_isSet = true;
}

bool OAIProperties1::is_classfp_Set() const{
    return m_classfp_isSet;
}

bool OAIProperties1::is_classfp_Valid() const{
    return m_classfp_isValid;
}

QString OAIProperties1::getCountyfp() const {
    return m_countyfp;
}
void OAIProperties1::setCountyfp(const QString &countyfp) {
    m_countyfp = countyfp;
    m_countyfp_isSet = true;
}

bool OAIProperties1::is_countyfp_Set() const{
    return m_countyfp_isSet;
}

bool OAIProperties1::is_countyfp_Valid() const{
    return m_countyfp_isValid;
}

QString OAIProperties1::getCountyns() const {
    return m_countyns;
}
void OAIProperties1::setCountyns(const QString &countyns) {
    m_countyns = countyns;
    m_countyns_isSet = true;
}

bool OAIProperties1::is_countyns_Set() const{
    return m_countyns_isSet;
}

bool OAIProperties1::is_countyns_Valid() const{
    return m_countyns_isValid;
}

QString OAIProperties1::getCsafp() const {
    return m_csafp;
}
void OAIProperties1::setCsafp(const QString &csafp) {
    m_csafp = csafp;
    m_csafp_isSet = true;
}

bool OAIProperties1::is_csafp_Set() const{
    return m_csafp_isSet;
}

bool OAIProperties1::is_csafp_Valid() const{
    return m_csafp_isValid;
}

QString OAIProperties1::getDivision() const {
    return m_division;
}
void OAIProperties1::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAIProperties1::is_division_Set() const{
    return m_division_isSet;
}

bool OAIProperties1::is_division_Valid() const{
    return m_division_isValid;
}

QString OAIProperties1::getFuncstat() const {
    return m_funcstat;
}
void OAIProperties1::setFuncstat(const QString &funcstat) {
    m_funcstat = funcstat;
    m_funcstat_isSet = true;
}

bool OAIProperties1::is_funcstat_Set() const{
    return m_funcstat_isSet;
}

bool OAIProperties1::is_funcstat_Valid() const{
    return m_funcstat_isValid;
}

QString OAIProperties1::getGeoid() const {
    return m_geoid;
}
void OAIProperties1::setGeoid(const QString &geoid) {
    m_geoid = geoid;
    m_geoid_isSet = true;
}

bool OAIProperties1::is_geoid_Set() const{
    return m_geoid_isSet;
}

bool OAIProperties1::is_geoid_Valid() const{
    return m_geoid_isValid;
}

QString OAIProperties1::getIntptlat() const {
    return m_intptlat;
}
void OAIProperties1::setIntptlat(const QString &intptlat) {
    m_intptlat = intptlat;
    m_intptlat_isSet = true;
}

bool OAIProperties1::is_intptlat_Set() const{
    return m_intptlat_isSet;
}

bool OAIProperties1::is_intptlat_Valid() const{
    return m_intptlat_isValid;
}

QString OAIProperties1::getIntptlon() const {
    return m_intptlon;
}
void OAIProperties1::setIntptlon(const QString &intptlon) {
    m_intptlon = intptlon;
    m_intptlon_isSet = true;
}

bool OAIProperties1::is_intptlon_Set() const{
    return m_intptlon_isSet;
}

bool OAIProperties1::is_intptlon_Valid() const{
    return m_intptlon_isValid;
}

QString OAIProperties1::getLsad() const {
    return m_lsad;
}
void OAIProperties1::setLsad(const QString &lsad) {
    m_lsad = lsad;
    m_lsad_isSet = true;
}

bool OAIProperties1::is_lsad_Set() const{
    return m_lsad_isSet;
}

bool OAIProperties1::is_lsad_Valid() const{
    return m_lsad_isValid;
}

QString OAIProperties1::getMemi() const {
    return m_memi;
}
void OAIProperties1::setMemi(const QString &memi) {
    m_memi = memi;
    m_memi_isSet = true;
}

bool OAIProperties1::is_memi_Set() const{
    return m_memi_isSet;
}

bool OAIProperties1::is_memi_Valid() const{
    return m_memi_isValid;
}

QString OAIProperties1::getMetdivfp() const {
    return m_metdivfp;
}
void OAIProperties1::setMetdivfp(const QString &metdivfp) {
    m_metdivfp = metdivfp;
    m_metdivfp_isSet = true;
}

bool OAIProperties1::is_metdivfp_Set() const{
    return m_metdivfp_isSet;
}

bool OAIProperties1::is_metdivfp_Valid() const{
    return m_metdivfp_isValid;
}

QString OAIProperties1::getMtfcc() const {
    return m_mtfcc;
}
void OAIProperties1::setMtfcc(const QString &mtfcc) {
    m_mtfcc = mtfcc;
    m_mtfcc_isSet = true;
}

bool OAIProperties1::is_mtfcc_Set() const{
    return m_mtfcc_isSet;
}

bool OAIProperties1::is_mtfcc_Valid() const{
    return m_mtfcc_isValid;
}

QString OAIProperties1::getName() const {
    return m_name;
}
void OAIProperties1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProperties1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProperties1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProperties1::getNamelsad() const {
    return m_namelsad;
}
void OAIProperties1::setNamelsad(const QString &namelsad) {
    m_namelsad = namelsad;
    m_namelsad_isSet = true;
}

bool OAIProperties1::is_namelsad_Set() const{
    return m_namelsad_isSet;
}

bool OAIProperties1::is_namelsad_Valid() const{
    return m_namelsad_isValid;
}

QString OAIProperties1::getPcicbsa() const {
    return m_pcicbsa;
}
void OAIProperties1::setPcicbsa(const QString &pcicbsa) {
    m_pcicbsa = pcicbsa;
    m_pcicbsa_isSet = true;
}

bool OAIProperties1::is_pcicbsa_Set() const{
    return m_pcicbsa_isSet;
}

bool OAIProperties1::is_pcicbsa_Valid() const{
    return m_pcicbsa_isValid;
}

QString OAIProperties1::getPcinecta() const {
    return m_pcinecta;
}
void OAIProperties1::setPcinecta(const QString &pcinecta) {
    m_pcinecta = pcinecta;
    m_pcinecta_isSet = true;
}

bool OAIProperties1::is_pcinecta_Set() const{
    return m_pcinecta_isSet;
}

bool OAIProperties1::is_pcinecta_Valid() const{
    return m_pcinecta_isValid;
}

QString OAIProperties1::getPlacefp() const {
    return m_placefp;
}
void OAIProperties1::setPlacefp(const QString &placefp) {
    m_placefp = placefp;
    m_placefp_isSet = true;
}

bool OAIProperties1::is_placefp_Set() const{
    return m_placefp_isSet;
}

bool OAIProperties1::is_placefp_Valid() const{
    return m_placefp_isValid;
}

QString OAIProperties1::getPlacens() const {
    return m_placens;
}
void OAIProperties1::setPlacens(const QString &placens) {
    m_placens = placens;
    m_placens_isSet = true;
}

bool OAIProperties1::is_placens_Set() const{
    return m_placens_isSet;
}

bool OAIProperties1::is_placens_Valid() const{
    return m_placens_isValid;
}

qint32 OAIProperties1::getPopulation() const {
    return m_population;
}
void OAIProperties1::setPopulation(const qint32 &population) {
    m_population = population;
    m_population_isSet = true;
}

bool OAIProperties1::is_population_Set() const{
    return m_population_isSet;
}

bool OAIProperties1::is_population_Valid() const{
    return m_population_isValid;
}

double OAIProperties1::getPopSqmi() const {
    return m_pop_sqmi;
}
void OAIProperties1::setPopSqmi(const double &pop_sqmi) {
    m_pop_sqmi = pop_sqmi;
    m_pop_sqmi_isSet = true;
}

bool OAIProperties1::is_pop_sqmi_Set() const{
    return m_pop_sqmi_isSet;
}

bool OAIProperties1::is_pop_sqmi_Valid() const{
    return m_pop_sqmi_isValid;
}

QString OAIProperties1::getPoName() const {
    return m_po_name;
}
void OAIProperties1::setPoName(const QString &po_name) {
    m_po_name = po_name;
    m_po_name_isSet = true;
}

bool OAIProperties1::is_po_name_Set() const{
    return m_po_name_isSet;
}

bool OAIProperties1::is_po_name_Valid() const{
    return m_po_name_isValid;
}

QString OAIProperties1::getRegion() const {
    return m_region;
}
void OAIProperties1::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIProperties1::is_region_Set() const{
    return m_region_isSet;
}

bool OAIProperties1::is_region_Valid() const{
    return m_region_isValid;
}

double OAIProperties1::getSqmi() const {
    return m_sqmi;
}
void OAIProperties1::setSqmi(const double &sqmi) {
    m_sqmi = sqmi;
    m_sqmi_isSet = true;
}

bool OAIProperties1::is_sqmi_Set() const{
    return m_sqmi_isSet;
}

bool OAIProperties1::is_sqmi_Valid() const{
    return m_sqmi_isValid;
}

QString OAIProperties1::getState() const {
    return m_state;
}
void OAIProperties1::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProperties1::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProperties1::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIProperties1::getStatefp() const {
    return m_statefp;
}
void OAIProperties1::setStatefp(const QString &statefp) {
    m_statefp = statefp;
    m_statefp_isSet = true;
}

bool OAIProperties1::is_statefp_Set() const{
    return m_statefp_isSet;
}

bool OAIProperties1::is_statefp_Valid() const{
    return m_statefp_isValid;
}

QString OAIProperties1::getStatens() const {
    return m_statens;
}
void OAIProperties1::setStatens(const QString &statens) {
    m_statens = statens;
    m_statens_isSet = true;
}

bool OAIProperties1::is_statens_Set() const{
    return m_statens_isSet;
}

bool OAIProperties1::is_statens_Valid() const{
    return m_statens_isValid;
}

QString OAIProperties1::getStusps() const {
    return m_stusps;
}
void OAIProperties1::setStusps(const QString &stusps) {
    m_stusps = stusps;
    m_stusps_isSet = true;
}

bool OAIProperties1::is_stusps_Set() const{
    return m_stusps_isSet;
}

bool OAIProperties1::is_stusps_Valid() const{
    return m_stusps_isValid;
}

double OAIProperties1::getShapeArea() const {
    return m_shape_area;
}
void OAIProperties1::setShapeArea(const double &shape_area) {
    m_shape_area = shape_area;
    m_shape_area_isSet = true;
}

bool OAIProperties1::is_shape_area_Set() const{
    return m_shape_area_isSet;
}

bool OAIProperties1::is_shape_area_Valid() const{
    return m_shape_area_isValid;
}

double OAIProperties1::getShapeLeng() const {
    return m_shape_leng;
}
void OAIProperties1::setShapeLeng(const double &shape_leng) {
    m_shape_leng = shape_leng;
    m_shape_leng_isSet = true;
}

bool OAIProperties1::is_shape_leng_Set() const{
    return m_shape_leng_isSet;
}

bool OAIProperties1::is_shape_leng_Valid() const{
    return m_shape_leng_isValid;
}

QString OAIProperties1::getTractce() const {
    return m_tractce;
}
void OAIProperties1::setTractce(const QString &tractce) {
    m_tractce = tractce;
    m_tractce_isSet = true;
}

bool OAIProperties1::is_tractce_Set() const{
    return m_tractce_isSet;
}

bool OAIProperties1::is_tractce_Valid() const{
    return m_tractce_isValid;
}

QString OAIProperties1::getZipCode() const {
    return m_zip_code;
}
void OAIProperties1::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIProperties1::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIProperties1::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIProperties1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affgeoid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aland_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awater_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blkgrpce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cbsafp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classfp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countyfp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countyns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csafp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funcstat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geoid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intptlat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intptlon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metdivfp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtfcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namelsad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcicbsa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcinecta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placefp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pop_sqmi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqmi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statefp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stusps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_leng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tractce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperties1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aland_isValid && true;
}

} // namespace OpenAPI
