/**
 * IdealSpot GeoData
 * Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data.   ## Detailed Description  Use this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).  Better data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.  Our goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data.   We believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.  ## Features  Query data and GeoJSON geometries at these scales for any US latitude and longitude:  * Rings (0.5 km+) * Drive time (1-60 minutes) * Bike time (3-60 minutes) * Walk time (5-60 minutes) * Public transit time (5-60 minutes) * Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)  | Data Feature | Description | | ------- | ------------------------------| | Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc | | Consumer segmentation | *Updated Annually*. Demographics grouped into narrative-oriented segments. | | Vehicle Traffic | *Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. | | Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries | | Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes | | Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines | | Social Media Interest | 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |  ### Coming Soon!  This API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!  | Data Feature | Description | | ------- | ------------------------------| Mobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest Origin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area Competition search | Search all major point-of-interest aggregators in one query Environment/climate | Expected weather patterns like temperature and precipitation Filter search API | Query data for all counties in state, all tracts in MSA, etc Road segment tiles | Plot road segments on maps in interactive applications  ## Developer Website  For more detail see https://developer.idealspot.com/
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnits::OAIUnits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnits::OAIUnits() {
    this->initializeModel();
}

OAIUnits::~OAIUnits() {}

void OAIUnits::initializeModel() {

    m_r_100k_125k_isSet = false;
    m_r_100k_125k_isValid = false;

    m_r_10k_15k_isSet = false;
    m_r_10k_15k_isValid = false;

    m_r_125k_150k_isSet = false;
    m_r_125k_150k_isValid = false;

    m_r_150k_175k_isSet = false;
    m_r_150k_175k_isValid = false;

    m_r_15k_20k_isSet = false;
    m_r_15k_20k_isValid = false;

    m_r_175k_200k_isSet = false;
    m_r_175k_200k_isValid = false;

    m_r_200k_250k_isSet = false;
    m_r_200k_250k_isValid = false;

    m_r_20k_25k_isSet = false;
    m_r_20k_25k_isValid = false;

    m_r_250k_300k_isSet = false;
    m_r_250k_300k_isValid = false;

    m_r_25k_30k_isSet = false;
    m_r_25k_30k_isValid = false;

    m_r_300k_400k_isSet = false;
    m_r_300k_400k_isValid = false;

    m_r_30k_35k_isSet = false;
    m_r_30k_35k_isValid = false;

    m_r_35k_40k_isSet = false;
    m_r_35k_40k_isValid = false;

    m_r_400k_500k_isSet = false;
    m_r_400k_500k_isValid = false;

    m_r_40k_50k_isSet = false;
    m_r_40k_50k_isValid = false;

    m_r_500k_750k_isSet = false;
    m_r_500k_750k_isValid = false;

    m_r_50k_60k_isSet = false;
    m_r_50k_60k_isValid = false;

    m_r_60k_70k_isSet = false;
    m_r_60k_70k_isValid = false;

    m_r_70k_80k_isSet = false;
    m_r_70k_80k_isValid = false;

    m_r_750k_1_m_isSet = false;
    m_r_750k_1_m_isValid = false;

    m_r_80k_90k_isSet = false;
    m_r_80k_90k_isValid = false;

    m_r_90k_100k_isSet = false;
    m_r_90k_100k_isValid = false;

    m_median_home_value_isSet = false;
    m_median_home_value_isValid = false;

    m_over_1_m_isSet = false;
    m_over_1_m_isValid = false;

    m_owner_occupied_households_isSet = false;
    m_owner_occupied_households_isValid = false;

    m_under_10k_isSet = false;
    m_under_10k_isValid = false;

    m_context_households_isSet = false;
    m_context_households_isValid = false;

    m_context_landarea_isSet = false;
    m_context_landarea_isValid = false;
}

void OAIUnits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnits::fromJsonObject(QJsonObject json) {

    m_r_100k_125k_isValid = ::OpenAPI::fromJsonValue(m_r_100k_125k, json[QString("$100k-125k")]);
    m_r_100k_125k_isSet = !json[QString("$100k-125k")].isNull() && m_r_100k_125k_isValid;

    m_r_10k_15k_isValid = ::OpenAPI::fromJsonValue(m_r_10k_15k, json[QString("$10k-15k")]);
    m_r_10k_15k_isSet = !json[QString("$10k-15k")].isNull() && m_r_10k_15k_isValid;

    m_r_125k_150k_isValid = ::OpenAPI::fromJsonValue(m_r_125k_150k, json[QString("$125k-150k")]);
    m_r_125k_150k_isSet = !json[QString("$125k-150k")].isNull() && m_r_125k_150k_isValid;

    m_r_150k_175k_isValid = ::OpenAPI::fromJsonValue(m_r_150k_175k, json[QString("$150k-175k")]);
    m_r_150k_175k_isSet = !json[QString("$150k-175k")].isNull() && m_r_150k_175k_isValid;

    m_r_15k_20k_isValid = ::OpenAPI::fromJsonValue(m_r_15k_20k, json[QString("$15k-20k")]);
    m_r_15k_20k_isSet = !json[QString("$15k-20k")].isNull() && m_r_15k_20k_isValid;

    m_r_175k_200k_isValid = ::OpenAPI::fromJsonValue(m_r_175k_200k, json[QString("$175k-200k")]);
    m_r_175k_200k_isSet = !json[QString("$175k-200k")].isNull() && m_r_175k_200k_isValid;

    m_r_200k_250k_isValid = ::OpenAPI::fromJsonValue(m_r_200k_250k, json[QString("$200k-250k")]);
    m_r_200k_250k_isSet = !json[QString("$200k-250k")].isNull() && m_r_200k_250k_isValid;

    m_r_20k_25k_isValid = ::OpenAPI::fromJsonValue(m_r_20k_25k, json[QString("$20k-25k")]);
    m_r_20k_25k_isSet = !json[QString("$20k-25k")].isNull() && m_r_20k_25k_isValid;

    m_r_250k_300k_isValid = ::OpenAPI::fromJsonValue(m_r_250k_300k, json[QString("$250k-300k")]);
    m_r_250k_300k_isSet = !json[QString("$250k-300k")].isNull() && m_r_250k_300k_isValid;

    m_r_25k_30k_isValid = ::OpenAPI::fromJsonValue(m_r_25k_30k, json[QString("$25k-30k")]);
    m_r_25k_30k_isSet = !json[QString("$25k-30k")].isNull() && m_r_25k_30k_isValid;

    m_r_300k_400k_isValid = ::OpenAPI::fromJsonValue(m_r_300k_400k, json[QString("$300k-400k")]);
    m_r_300k_400k_isSet = !json[QString("$300k-400k")].isNull() && m_r_300k_400k_isValid;

    m_r_30k_35k_isValid = ::OpenAPI::fromJsonValue(m_r_30k_35k, json[QString("$30k-35k")]);
    m_r_30k_35k_isSet = !json[QString("$30k-35k")].isNull() && m_r_30k_35k_isValid;

    m_r_35k_40k_isValid = ::OpenAPI::fromJsonValue(m_r_35k_40k, json[QString("$35k-40k")]);
    m_r_35k_40k_isSet = !json[QString("$35k-40k")].isNull() && m_r_35k_40k_isValid;

    m_r_400k_500k_isValid = ::OpenAPI::fromJsonValue(m_r_400k_500k, json[QString("$400k-500k")]);
    m_r_400k_500k_isSet = !json[QString("$400k-500k")].isNull() && m_r_400k_500k_isValid;

    m_r_40k_50k_isValid = ::OpenAPI::fromJsonValue(m_r_40k_50k, json[QString("$40k-50k")]);
    m_r_40k_50k_isSet = !json[QString("$40k-50k")].isNull() && m_r_40k_50k_isValid;

    m_r_500k_750k_isValid = ::OpenAPI::fromJsonValue(m_r_500k_750k, json[QString("$500k-750k")]);
    m_r_500k_750k_isSet = !json[QString("$500k-750k")].isNull() && m_r_500k_750k_isValid;

    m_r_50k_60k_isValid = ::OpenAPI::fromJsonValue(m_r_50k_60k, json[QString("$50k-60k")]);
    m_r_50k_60k_isSet = !json[QString("$50k-60k")].isNull() && m_r_50k_60k_isValid;

    m_r_60k_70k_isValid = ::OpenAPI::fromJsonValue(m_r_60k_70k, json[QString("$60k-70k")]);
    m_r_60k_70k_isSet = !json[QString("$60k-70k")].isNull() && m_r_60k_70k_isValid;

    m_r_70k_80k_isValid = ::OpenAPI::fromJsonValue(m_r_70k_80k, json[QString("$70k-80k")]);
    m_r_70k_80k_isSet = !json[QString("$70k-80k")].isNull() && m_r_70k_80k_isValid;

    m_r_750k_1_m_isValid = ::OpenAPI::fromJsonValue(m_r_750k_1_m, json[QString("$750k-1M")]);
    m_r_750k_1_m_isSet = !json[QString("$750k-1M")].isNull() && m_r_750k_1_m_isValid;

    m_r_80k_90k_isValid = ::OpenAPI::fromJsonValue(m_r_80k_90k, json[QString("$80k-90k")]);
    m_r_80k_90k_isSet = !json[QString("$80k-90k")].isNull() && m_r_80k_90k_isValid;

    m_r_90k_100k_isValid = ::OpenAPI::fromJsonValue(m_r_90k_100k, json[QString("$90k-100k")]);
    m_r_90k_100k_isSet = !json[QString("$90k-100k")].isNull() && m_r_90k_100k_isValid;

    m_median_home_value_isValid = ::OpenAPI::fromJsonValue(m_median_home_value, json[QString("Median Home Value")]);
    m_median_home_value_isSet = !json[QString("Median Home Value")].isNull() && m_median_home_value_isValid;

    m_over_1_m_isValid = ::OpenAPI::fromJsonValue(m_over_1_m, json[QString("Over $1M")]);
    m_over_1_m_isSet = !json[QString("Over $1M")].isNull() && m_over_1_m_isValid;

    m_owner_occupied_households_isValid = ::OpenAPI::fromJsonValue(m_owner_occupied_households, json[QString("Owner Occupied Households")]);
    m_owner_occupied_households_isSet = !json[QString("Owner Occupied Households")].isNull() && m_owner_occupied_households_isValid;

    m_under_10k_isValid = ::OpenAPI::fromJsonValue(m_under_10k, json[QString("Under $10k")]);
    m_under_10k_isSet = !json[QString("Under $10k")].isNull() && m_under_10k_isValid;

    m_context_households_isValid = ::OpenAPI::fromJsonValue(m_context_households, json[QString("context.households")]);
    m_context_households_isSet = !json[QString("context.households")].isNull() && m_context_households_isValid;

    m_context_landarea_isValid = ::OpenAPI::fromJsonValue(m_context_landarea, json[QString("context.landarea")]);
    m_context_landarea_isSet = !json[QString("context.landarea")].isNull() && m_context_landarea_isValid;
}

QString OAIUnits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnits::asJsonObject() const {
    QJsonObject obj;
    if (m_r_100k_125k_isSet) {
        obj.insert(QString("$100k-125k"), ::OpenAPI::toJsonValue(m_r_100k_125k));
    }
    if (m_r_10k_15k_isSet) {
        obj.insert(QString("$10k-15k"), ::OpenAPI::toJsonValue(m_r_10k_15k));
    }
    if (m_r_125k_150k_isSet) {
        obj.insert(QString("$125k-150k"), ::OpenAPI::toJsonValue(m_r_125k_150k));
    }
    if (m_r_150k_175k_isSet) {
        obj.insert(QString("$150k-175k"), ::OpenAPI::toJsonValue(m_r_150k_175k));
    }
    if (m_r_15k_20k_isSet) {
        obj.insert(QString("$15k-20k"), ::OpenAPI::toJsonValue(m_r_15k_20k));
    }
    if (m_r_175k_200k_isSet) {
        obj.insert(QString("$175k-200k"), ::OpenAPI::toJsonValue(m_r_175k_200k));
    }
    if (m_r_200k_250k_isSet) {
        obj.insert(QString("$200k-250k"), ::OpenAPI::toJsonValue(m_r_200k_250k));
    }
    if (m_r_20k_25k_isSet) {
        obj.insert(QString("$20k-25k"), ::OpenAPI::toJsonValue(m_r_20k_25k));
    }
    if (m_r_250k_300k_isSet) {
        obj.insert(QString("$250k-300k"), ::OpenAPI::toJsonValue(m_r_250k_300k));
    }
    if (m_r_25k_30k_isSet) {
        obj.insert(QString("$25k-30k"), ::OpenAPI::toJsonValue(m_r_25k_30k));
    }
    if (m_r_300k_400k_isSet) {
        obj.insert(QString("$300k-400k"), ::OpenAPI::toJsonValue(m_r_300k_400k));
    }
    if (m_r_30k_35k_isSet) {
        obj.insert(QString("$30k-35k"), ::OpenAPI::toJsonValue(m_r_30k_35k));
    }
    if (m_r_35k_40k_isSet) {
        obj.insert(QString("$35k-40k"), ::OpenAPI::toJsonValue(m_r_35k_40k));
    }
    if (m_r_400k_500k_isSet) {
        obj.insert(QString("$400k-500k"), ::OpenAPI::toJsonValue(m_r_400k_500k));
    }
    if (m_r_40k_50k_isSet) {
        obj.insert(QString("$40k-50k"), ::OpenAPI::toJsonValue(m_r_40k_50k));
    }
    if (m_r_500k_750k_isSet) {
        obj.insert(QString("$500k-750k"), ::OpenAPI::toJsonValue(m_r_500k_750k));
    }
    if (m_r_50k_60k_isSet) {
        obj.insert(QString("$50k-60k"), ::OpenAPI::toJsonValue(m_r_50k_60k));
    }
    if (m_r_60k_70k_isSet) {
        obj.insert(QString("$60k-70k"), ::OpenAPI::toJsonValue(m_r_60k_70k));
    }
    if (m_r_70k_80k_isSet) {
        obj.insert(QString("$70k-80k"), ::OpenAPI::toJsonValue(m_r_70k_80k));
    }
    if (m_r_750k_1_m_isSet) {
        obj.insert(QString("$750k-1M"), ::OpenAPI::toJsonValue(m_r_750k_1_m));
    }
    if (m_r_80k_90k_isSet) {
        obj.insert(QString("$80k-90k"), ::OpenAPI::toJsonValue(m_r_80k_90k));
    }
    if (m_r_90k_100k_isSet) {
        obj.insert(QString("$90k-100k"), ::OpenAPI::toJsonValue(m_r_90k_100k));
    }
    if (m_median_home_value_isSet) {
        obj.insert(QString("Median Home Value"), ::OpenAPI::toJsonValue(m_median_home_value));
    }
    if (m_over_1_m_isSet) {
        obj.insert(QString("Over $1M"), ::OpenAPI::toJsonValue(m_over_1_m));
    }
    if (m_owner_occupied_households_isSet) {
        obj.insert(QString("Owner Occupied Households"), ::OpenAPI::toJsonValue(m_owner_occupied_households));
    }
    if (m_under_10k_isSet) {
        obj.insert(QString("Under $10k"), ::OpenAPI::toJsonValue(m_under_10k));
    }
    if (m_context_households_isSet) {
        obj.insert(QString("context.households"), ::OpenAPI::toJsonValue(m_context_households));
    }
    if (m_context_landarea_isSet) {
        obj.insert(QString("context.landarea"), ::OpenAPI::toJsonValue(m_context_landarea));
    }
    return obj;
}

QString OAIUnits::getR100k125k() const {
    return m_r_100k_125k;
}
void OAIUnits::setR100k125k(const QString &r_100k_125k) {
    m_r_100k_125k = r_100k_125k;
    m_r_100k_125k_isSet = true;
}

bool OAIUnits::is_r_100k_125k_Set() const{
    return m_r_100k_125k_isSet;
}

bool OAIUnits::is_r_100k_125k_Valid() const{
    return m_r_100k_125k_isValid;
}

QString OAIUnits::getR10k15k() const {
    return m_r_10k_15k;
}
void OAIUnits::setR10k15k(const QString &r_10k_15k) {
    m_r_10k_15k = r_10k_15k;
    m_r_10k_15k_isSet = true;
}

bool OAIUnits::is_r_10k_15k_Set() const{
    return m_r_10k_15k_isSet;
}

bool OAIUnits::is_r_10k_15k_Valid() const{
    return m_r_10k_15k_isValid;
}

QString OAIUnits::getR125k150k() const {
    return m_r_125k_150k;
}
void OAIUnits::setR125k150k(const QString &r_125k_150k) {
    m_r_125k_150k = r_125k_150k;
    m_r_125k_150k_isSet = true;
}

bool OAIUnits::is_r_125k_150k_Set() const{
    return m_r_125k_150k_isSet;
}

bool OAIUnits::is_r_125k_150k_Valid() const{
    return m_r_125k_150k_isValid;
}

QString OAIUnits::getR150k175k() const {
    return m_r_150k_175k;
}
void OAIUnits::setR150k175k(const QString &r_150k_175k) {
    m_r_150k_175k = r_150k_175k;
    m_r_150k_175k_isSet = true;
}

bool OAIUnits::is_r_150k_175k_Set() const{
    return m_r_150k_175k_isSet;
}

bool OAIUnits::is_r_150k_175k_Valid() const{
    return m_r_150k_175k_isValid;
}

QString OAIUnits::getR15k20k() const {
    return m_r_15k_20k;
}
void OAIUnits::setR15k20k(const QString &r_15k_20k) {
    m_r_15k_20k = r_15k_20k;
    m_r_15k_20k_isSet = true;
}

bool OAIUnits::is_r_15k_20k_Set() const{
    return m_r_15k_20k_isSet;
}

bool OAIUnits::is_r_15k_20k_Valid() const{
    return m_r_15k_20k_isValid;
}

QString OAIUnits::getR175k200k() const {
    return m_r_175k_200k;
}
void OAIUnits::setR175k200k(const QString &r_175k_200k) {
    m_r_175k_200k = r_175k_200k;
    m_r_175k_200k_isSet = true;
}

bool OAIUnits::is_r_175k_200k_Set() const{
    return m_r_175k_200k_isSet;
}

bool OAIUnits::is_r_175k_200k_Valid() const{
    return m_r_175k_200k_isValid;
}

QString OAIUnits::getR200k250k() const {
    return m_r_200k_250k;
}
void OAIUnits::setR200k250k(const QString &r_200k_250k) {
    m_r_200k_250k = r_200k_250k;
    m_r_200k_250k_isSet = true;
}

bool OAIUnits::is_r_200k_250k_Set() const{
    return m_r_200k_250k_isSet;
}

bool OAIUnits::is_r_200k_250k_Valid() const{
    return m_r_200k_250k_isValid;
}

QString OAIUnits::getR20k25k() const {
    return m_r_20k_25k;
}
void OAIUnits::setR20k25k(const QString &r_20k_25k) {
    m_r_20k_25k = r_20k_25k;
    m_r_20k_25k_isSet = true;
}

bool OAIUnits::is_r_20k_25k_Set() const{
    return m_r_20k_25k_isSet;
}

bool OAIUnits::is_r_20k_25k_Valid() const{
    return m_r_20k_25k_isValid;
}

QString OAIUnits::getR250k300k() const {
    return m_r_250k_300k;
}
void OAIUnits::setR250k300k(const QString &r_250k_300k) {
    m_r_250k_300k = r_250k_300k;
    m_r_250k_300k_isSet = true;
}

bool OAIUnits::is_r_250k_300k_Set() const{
    return m_r_250k_300k_isSet;
}

bool OAIUnits::is_r_250k_300k_Valid() const{
    return m_r_250k_300k_isValid;
}

QString OAIUnits::getR25k30k() const {
    return m_r_25k_30k;
}
void OAIUnits::setR25k30k(const QString &r_25k_30k) {
    m_r_25k_30k = r_25k_30k;
    m_r_25k_30k_isSet = true;
}

bool OAIUnits::is_r_25k_30k_Set() const{
    return m_r_25k_30k_isSet;
}

bool OAIUnits::is_r_25k_30k_Valid() const{
    return m_r_25k_30k_isValid;
}

QString OAIUnits::getR300k400k() const {
    return m_r_300k_400k;
}
void OAIUnits::setR300k400k(const QString &r_300k_400k) {
    m_r_300k_400k = r_300k_400k;
    m_r_300k_400k_isSet = true;
}

bool OAIUnits::is_r_300k_400k_Set() const{
    return m_r_300k_400k_isSet;
}

bool OAIUnits::is_r_300k_400k_Valid() const{
    return m_r_300k_400k_isValid;
}

QString OAIUnits::getR30k35k() const {
    return m_r_30k_35k;
}
void OAIUnits::setR30k35k(const QString &r_30k_35k) {
    m_r_30k_35k = r_30k_35k;
    m_r_30k_35k_isSet = true;
}

bool OAIUnits::is_r_30k_35k_Set() const{
    return m_r_30k_35k_isSet;
}

bool OAIUnits::is_r_30k_35k_Valid() const{
    return m_r_30k_35k_isValid;
}

QString OAIUnits::getR35k40k() const {
    return m_r_35k_40k;
}
void OAIUnits::setR35k40k(const QString &r_35k_40k) {
    m_r_35k_40k = r_35k_40k;
    m_r_35k_40k_isSet = true;
}

bool OAIUnits::is_r_35k_40k_Set() const{
    return m_r_35k_40k_isSet;
}

bool OAIUnits::is_r_35k_40k_Valid() const{
    return m_r_35k_40k_isValid;
}

QString OAIUnits::getR400k500k() const {
    return m_r_400k_500k;
}
void OAIUnits::setR400k500k(const QString &r_400k_500k) {
    m_r_400k_500k = r_400k_500k;
    m_r_400k_500k_isSet = true;
}

bool OAIUnits::is_r_400k_500k_Set() const{
    return m_r_400k_500k_isSet;
}

bool OAIUnits::is_r_400k_500k_Valid() const{
    return m_r_400k_500k_isValid;
}

QString OAIUnits::getR40k50k() const {
    return m_r_40k_50k;
}
void OAIUnits::setR40k50k(const QString &r_40k_50k) {
    m_r_40k_50k = r_40k_50k;
    m_r_40k_50k_isSet = true;
}

bool OAIUnits::is_r_40k_50k_Set() const{
    return m_r_40k_50k_isSet;
}

bool OAIUnits::is_r_40k_50k_Valid() const{
    return m_r_40k_50k_isValid;
}

QString OAIUnits::getR500k750k() const {
    return m_r_500k_750k;
}
void OAIUnits::setR500k750k(const QString &r_500k_750k) {
    m_r_500k_750k = r_500k_750k;
    m_r_500k_750k_isSet = true;
}

bool OAIUnits::is_r_500k_750k_Set() const{
    return m_r_500k_750k_isSet;
}

bool OAIUnits::is_r_500k_750k_Valid() const{
    return m_r_500k_750k_isValid;
}

QString OAIUnits::getR50k60k() const {
    return m_r_50k_60k;
}
void OAIUnits::setR50k60k(const QString &r_50k_60k) {
    m_r_50k_60k = r_50k_60k;
    m_r_50k_60k_isSet = true;
}

bool OAIUnits::is_r_50k_60k_Set() const{
    return m_r_50k_60k_isSet;
}

bool OAIUnits::is_r_50k_60k_Valid() const{
    return m_r_50k_60k_isValid;
}

QString OAIUnits::getR60k70k() const {
    return m_r_60k_70k;
}
void OAIUnits::setR60k70k(const QString &r_60k_70k) {
    m_r_60k_70k = r_60k_70k;
    m_r_60k_70k_isSet = true;
}

bool OAIUnits::is_r_60k_70k_Set() const{
    return m_r_60k_70k_isSet;
}

bool OAIUnits::is_r_60k_70k_Valid() const{
    return m_r_60k_70k_isValid;
}

QString OAIUnits::getR70k80k() const {
    return m_r_70k_80k;
}
void OAIUnits::setR70k80k(const QString &r_70k_80k) {
    m_r_70k_80k = r_70k_80k;
    m_r_70k_80k_isSet = true;
}

bool OAIUnits::is_r_70k_80k_Set() const{
    return m_r_70k_80k_isSet;
}

bool OAIUnits::is_r_70k_80k_Valid() const{
    return m_r_70k_80k_isValid;
}

QString OAIUnits::getR750k1M() const {
    return m_r_750k_1_m;
}
void OAIUnits::setR750k1M(const QString &r_750k_1_m) {
    m_r_750k_1_m = r_750k_1_m;
    m_r_750k_1_m_isSet = true;
}

bool OAIUnits::is_r_750k_1_m_Set() const{
    return m_r_750k_1_m_isSet;
}

bool OAIUnits::is_r_750k_1_m_Valid() const{
    return m_r_750k_1_m_isValid;
}

QString OAIUnits::getR80k90k() const {
    return m_r_80k_90k;
}
void OAIUnits::setR80k90k(const QString &r_80k_90k) {
    m_r_80k_90k = r_80k_90k;
    m_r_80k_90k_isSet = true;
}

bool OAIUnits::is_r_80k_90k_Set() const{
    return m_r_80k_90k_isSet;
}

bool OAIUnits::is_r_80k_90k_Valid() const{
    return m_r_80k_90k_isValid;
}

QString OAIUnits::getR90k100k() const {
    return m_r_90k_100k;
}
void OAIUnits::setR90k100k(const QString &r_90k_100k) {
    m_r_90k_100k = r_90k_100k;
    m_r_90k_100k_isSet = true;
}

bool OAIUnits::is_r_90k_100k_Set() const{
    return m_r_90k_100k_isSet;
}

bool OAIUnits::is_r_90k_100k_Valid() const{
    return m_r_90k_100k_isValid;
}

QString OAIUnits::getMedianHomeValue() const {
    return m_median_home_value;
}
void OAIUnits::setMedianHomeValue(const QString &median_home_value) {
    m_median_home_value = median_home_value;
    m_median_home_value_isSet = true;
}

bool OAIUnits::is_median_home_value_Set() const{
    return m_median_home_value_isSet;
}

bool OAIUnits::is_median_home_value_Valid() const{
    return m_median_home_value_isValid;
}

QString OAIUnits::getOver1M() const {
    return m_over_1_m;
}
void OAIUnits::setOver1M(const QString &over_1_m) {
    m_over_1_m = over_1_m;
    m_over_1_m_isSet = true;
}

bool OAIUnits::is_over_1_m_Set() const{
    return m_over_1_m_isSet;
}

bool OAIUnits::is_over_1_m_Valid() const{
    return m_over_1_m_isValid;
}

QString OAIUnits::getOwnerOccupiedHouseholds() const {
    return m_owner_occupied_households;
}
void OAIUnits::setOwnerOccupiedHouseholds(const QString &owner_occupied_households) {
    m_owner_occupied_households = owner_occupied_households;
    m_owner_occupied_households_isSet = true;
}

bool OAIUnits::is_owner_occupied_households_Set() const{
    return m_owner_occupied_households_isSet;
}

bool OAIUnits::is_owner_occupied_households_Valid() const{
    return m_owner_occupied_households_isValid;
}

QString OAIUnits::getUnder10k() const {
    return m_under_10k;
}
void OAIUnits::setUnder10k(const QString &under_10k) {
    m_under_10k = under_10k;
    m_under_10k_isSet = true;
}

bool OAIUnits::is_under_10k_Set() const{
    return m_under_10k_isSet;
}

bool OAIUnits::is_under_10k_Valid() const{
    return m_under_10k_isValid;
}

QString OAIUnits::getContextHouseholds() const {
    return m_context_households;
}
void OAIUnits::setContextHouseholds(const QString &context_households) {
    m_context_households = context_households;
    m_context_households_isSet = true;
}

bool OAIUnits::is_context_households_Set() const{
    return m_context_households_isSet;
}

bool OAIUnits::is_context_households_Valid() const{
    return m_context_households_isValid;
}

QString OAIUnits::getContextLandarea() const {
    return m_context_landarea;
}
void OAIUnits::setContextLandarea(const QString &context_landarea) {
    m_context_landarea = context_landarea;
    m_context_landarea_isSet = true;
}

bool OAIUnits::is_context_landarea_Set() const{
    return m_context_landarea_isSet;
}

bool OAIUnits::is_context_landarea_Valid() const{
    return m_context_landarea_isValid;
}

bool OAIUnits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_100k_125k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_10k_15k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_125k_150k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_150k_175k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_15k_20k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_175k_200k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_200k_250k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_20k_25k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_250k_300k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_25k_30k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_300k_400k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_30k_35k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_35k_40k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_400k_500k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_40k_50k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_500k_750k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_50k_60k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_60k_70k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_70k_80k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_750k_1_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_80k_90k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_90k_100k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_home_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_1_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_occupied_households_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_10k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_households_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_landarea_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnits::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_100k_125k_isValid && m_r_10k_15k_isValid && m_r_125k_150k_isValid && m_r_150k_175k_isValid && m_r_15k_20k_isValid && m_r_175k_200k_isValid && m_r_200k_250k_isValid && m_r_20k_25k_isValid && m_r_250k_300k_isValid && m_r_25k_30k_isValid && m_r_300k_400k_isValid && m_r_30k_35k_isValid && m_r_35k_40k_isValid && m_r_400k_500k_isValid && m_r_40k_50k_isValid && m_r_500k_750k_isValid && m_r_50k_60k_isValid && m_r_60k_70k_isValid && m_r_70k_80k_isValid && m_r_750k_1_m_isValid && m_r_80k_90k_isValid && m_r_90k_100k_isValid && m_median_home_value_isValid && m_over_1_m_isValid && m_owner_occupied_households_isValid && m_under_10k_isValid && m_context_households_isValid && m_context_landarea_isValid && true;
}

} // namespace OpenAPI
