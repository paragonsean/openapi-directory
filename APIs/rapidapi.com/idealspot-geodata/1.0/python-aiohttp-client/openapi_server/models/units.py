# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Units(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _100k_125k: str=None, _10k_15k: str=None, _125k_150k: str=None, _150k_175k: str=None, _15k_20k: str=None, _175k_200k: str=None, _200k_250k: str=None, _20k_25k: str=None, _250k_300k: str=None, _25k_30k: str=None, _300k_400k: str=None, _30k_35k: str=None, _35k_40k: str=None, _400k_500k: str=None, _40k_50k: str=None, _500k_750k: str=None, _50k_60k: str=None, _60k_70k: str=None, _70k_80k: str=None, _750k_1_m: str=None, _80k_90k: str=None, _90k_100k: str=None, median_home_value: str=None, over_1_m: str=None, owner_occupied_households: str=None, under_10k: str=None, context_households: str=None, context_landarea: str=None):
        """Units - a model defined in OpenAPI

        :param _100k_125k: The _100k_125k of this Units.
        :param _10k_15k: The _10k_15k of this Units.
        :param _125k_150k: The _125k_150k of this Units.
        :param _150k_175k: The _150k_175k of this Units.
        :param _15k_20k: The _15k_20k of this Units.
        :param _175k_200k: The _175k_200k of this Units.
        :param _200k_250k: The _200k_250k of this Units.
        :param _20k_25k: The _20k_25k of this Units.
        :param _250k_300k: The _250k_300k of this Units.
        :param _25k_30k: The _25k_30k of this Units.
        :param _300k_400k: The _300k_400k of this Units.
        :param _30k_35k: The _30k_35k of this Units.
        :param _35k_40k: The _35k_40k of this Units.
        :param _400k_500k: The _400k_500k of this Units.
        :param _40k_50k: The _40k_50k of this Units.
        :param _500k_750k: The _500k_750k of this Units.
        :param _50k_60k: The _50k_60k of this Units.
        :param _60k_70k: The _60k_70k of this Units.
        :param _70k_80k: The _70k_80k of this Units.
        :param _750k_1_m: The _750k_1_m of this Units.
        :param _80k_90k: The _80k_90k of this Units.
        :param _90k_100k: The _90k_100k of this Units.
        :param median_home_value: The median_home_value of this Units.
        :param over_1_m: The over_1_m of this Units.
        :param owner_occupied_households: The owner_occupied_households of this Units.
        :param under_10k: The under_10k of this Units.
        :param context_households: The context_households of this Units.
        :param context_landarea: The context_landarea of this Units.
        """
        self.openapi_types = {
            '_100k_125k': str,
            '_10k_15k': str,
            '_125k_150k': str,
            '_150k_175k': str,
            '_15k_20k': str,
            '_175k_200k': str,
            '_200k_250k': str,
            '_20k_25k': str,
            '_250k_300k': str,
            '_25k_30k': str,
            '_300k_400k': str,
            '_30k_35k': str,
            '_35k_40k': str,
            '_400k_500k': str,
            '_40k_50k': str,
            '_500k_750k': str,
            '_50k_60k': str,
            '_60k_70k': str,
            '_70k_80k': str,
            '_750k_1_m': str,
            '_80k_90k': str,
            '_90k_100k': str,
            'median_home_value': str,
            'over_1_m': str,
            'owner_occupied_households': str,
            'under_10k': str,
            'context_households': str,
            'context_landarea': str
        }

        self.attribute_map = {
            '_100k_125k': '$100k-125k',
            '_10k_15k': '$10k-15k',
            '_125k_150k': '$125k-150k',
            '_150k_175k': '$150k-175k',
            '_15k_20k': '$15k-20k',
            '_175k_200k': '$175k-200k',
            '_200k_250k': '$200k-250k',
            '_20k_25k': '$20k-25k',
            '_250k_300k': '$250k-300k',
            '_25k_30k': '$25k-30k',
            '_300k_400k': '$300k-400k',
            '_30k_35k': '$30k-35k',
            '_35k_40k': '$35k-40k',
            '_400k_500k': '$400k-500k',
            '_40k_50k': '$40k-50k',
            '_500k_750k': '$500k-750k',
            '_50k_60k': '$50k-60k',
            '_60k_70k': '$60k-70k',
            '_70k_80k': '$70k-80k',
            '_750k_1_m': '$750k-1M',
            '_80k_90k': '$80k-90k',
            '_90k_100k': '$90k-100k',
            'median_home_value': 'Median Home Value',
            'over_1_m': 'Over $1M',
            'owner_occupied_households': 'Owner Occupied Households',
            'under_10k': 'Under $10k',
            'context_households': 'context.households',
            'context_landarea': 'context.landarea'
        }

        self.__100k_125k = _100k_125k
        self.__10k_15k = _10k_15k
        self.__125k_150k = _125k_150k
        self.__150k_175k = _150k_175k
        self.__15k_20k = _15k_20k
        self.__175k_200k = _175k_200k
        self.__200k_250k = _200k_250k
        self.__20k_25k = _20k_25k
        self.__250k_300k = _250k_300k
        self.__25k_30k = _25k_30k
        self.__300k_400k = _300k_400k
        self.__30k_35k = _30k_35k
        self.__35k_40k = _35k_40k
        self.__400k_500k = _400k_500k
        self.__40k_50k = _40k_50k
        self.__500k_750k = _500k_750k
        self.__50k_60k = _50k_60k
        self.__60k_70k = _60k_70k
        self.__70k_80k = _70k_80k
        self.__750k_1_m = _750k_1_m
        self.__80k_90k = _80k_90k
        self.__90k_100k = _90k_100k
        self._median_home_value = median_home_value
        self._over_1_m = over_1_m
        self._owner_occupied_households = owner_occupied_households
        self._under_10k = under_10k
        self._context_households = context_households
        self._context_landarea = context_landarea

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Units':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Units of this Units.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _100k_125k(self):
        """Gets the _100k_125k of this Units.


        :return: The _100k_125k of this Units.
        :rtype: str
        """
        return self.__100k_125k

    @_100k_125k.setter
    def _100k_125k(self, _100k_125k):
        """Sets the _100k_125k of this Units.


        :param _100k_125k: The _100k_125k of this Units.
        :type _100k_125k: str
        """
        if _100k_125k is None:
            raise ValueError("Invalid value for `_100k_125k`, must not be `None`")

        self.__100k_125k = _100k_125k

    @property
    def _10k_15k(self):
        """Gets the _10k_15k of this Units.


        :return: The _10k_15k of this Units.
        :rtype: str
        """
        return self.__10k_15k

    @_10k_15k.setter
    def _10k_15k(self, _10k_15k):
        """Sets the _10k_15k of this Units.


        :param _10k_15k: The _10k_15k of this Units.
        :type _10k_15k: str
        """
        if _10k_15k is None:
            raise ValueError("Invalid value for `_10k_15k`, must not be `None`")

        self.__10k_15k = _10k_15k

    @property
    def _125k_150k(self):
        """Gets the _125k_150k of this Units.


        :return: The _125k_150k of this Units.
        :rtype: str
        """
        return self.__125k_150k

    @_125k_150k.setter
    def _125k_150k(self, _125k_150k):
        """Sets the _125k_150k of this Units.


        :param _125k_150k: The _125k_150k of this Units.
        :type _125k_150k: str
        """
        if _125k_150k is None:
            raise ValueError("Invalid value for `_125k_150k`, must not be `None`")

        self.__125k_150k = _125k_150k

    @property
    def _150k_175k(self):
        """Gets the _150k_175k of this Units.


        :return: The _150k_175k of this Units.
        :rtype: str
        """
        return self.__150k_175k

    @_150k_175k.setter
    def _150k_175k(self, _150k_175k):
        """Sets the _150k_175k of this Units.


        :param _150k_175k: The _150k_175k of this Units.
        :type _150k_175k: str
        """
        if _150k_175k is None:
            raise ValueError("Invalid value for `_150k_175k`, must not be `None`")

        self.__150k_175k = _150k_175k

    @property
    def _15k_20k(self):
        """Gets the _15k_20k of this Units.


        :return: The _15k_20k of this Units.
        :rtype: str
        """
        return self.__15k_20k

    @_15k_20k.setter
    def _15k_20k(self, _15k_20k):
        """Sets the _15k_20k of this Units.


        :param _15k_20k: The _15k_20k of this Units.
        :type _15k_20k: str
        """
        if _15k_20k is None:
            raise ValueError("Invalid value for `_15k_20k`, must not be `None`")

        self.__15k_20k = _15k_20k

    @property
    def _175k_200k(self):
        """Gets the _175k_200k of this Units.


        :return: The _175k_200k of this Units.
        :rtype: str
        """
        return self.__175k_200k

    @_175k_200k.setter
    def _175k_200k(self, _175k_200k):
        """Sets the _175k_200k of this Units.


        :param _175k_200k: The _175k_200k of this Units.
        :type _175k_200k: str
        """
        if _175k_200k is None:
            raise ValueError("Invalid value for `_175k_200k`, must not be `None`")

        self.__175k_200k = _175k_200k

    @property
    def _200k_250k(self):
        """Gets the _200k_250k of this Units.


        :return: The _200k_250k of this Units.
        :rtype: str
        """
        return self.__200k_250k

    @_200k_250k.setter
    def _200k_250k(self, _200k_250k):
        """Sets the _200k_250k of this Units.


        :param _200k_250k: The _200k_250k of this Units.
        :type _200k_250k: str
        """
        if _200k_250k is None:
            raise ValueError("Invalid value for `_200k_250k`, must not be `None`")

        self.__200k_250k = _200k_250k

    @property
    def _20k_25k(self):
        """Gets the _20k_25k of this Units.


        :return: The _20k_25k of this Units.
        :rtype: str
        """
        return self.__20k_25k

    @_20k_25k.setter
    def _20k_25k(self, _20k_25k):
        """Sets the _20k_25k of this Units.


        :param _20k_25k: The _20k_25k of this Units.
        :type _20k_25k: str
        """
        if _20k_25k is None:
            raise ValueError("Invalid value for `_20k_25k`, must not be `None`")

        self.__20k_25k = _20k_25k

    @property
    def _250k_300k(self):
        """Gets the _250k_300k of this Units.


        :return: The _250k_300k of this Units.
        :rtype: str
        """
        return self.__250k_300k

    @_250k_300k.setter
    def _250k_300k(self, _250k_300k):
        """Sets the _250k_300k of this Units.


        :param _250k_300k: The _250k_300k of this Units.
        :type _250k_300k: str
        """
        if _250k_300k is None:
            raise ValueError("Invalid value for `_250k_300k`, must not be `None`")

        self.__250k_300k = _250k_300k

    @property
    def _25k_30k(self):
        """Gets the _25k_30k of this Units.


        :return: The _25k_30k of this Units.
        :rtype: str
        """
        return self.__25k_30k

    @_25k_30k.setter
    def _25k_30k(self, _25k_30k):
        """Sets the _25k_30k of this Units.


        :param _25k_30k: The _25k_30k of this Units.
        :type _25k_30k: str
        """
        if _25k_30k is None:
            raise ValueError("Invalid value for `_25k_30k`, must not be `None`")

        self.__25k_30k = _25k_30k

    @property
    def _300k_400k(self):
        """Gets the _300k_400k of this Units.


        :return: The _300k_400k of this Units.
        :rtype: str
        """
        return self.__300k_400k

    @_300k_400k.setter
    def _300k_400k(self, _300k_400k):
        """Sets the _300k_400k of this Units.


        :param _300k_400k: The _300k_400k of this Units.
        :type _300k_400k: str
        """
        if _300k_400k is None:
            raise ValueError("Invalid value for `_300k_400k`, must not be `None`")

        self.__300k_400k = _300k_400k

    @property
    def _30k_35k(self):
        """Gets the _30k_35k of this Units.


        :return: The _30k_35k of this Units.
        :rtype: str
        """
        return self.__30k_35k

    @_30k_35k.setter
    def _30k_35k(self, _30k_35k):
        """Sets the _30k_35k of this Units.


        :param _30k_35k: The _30k_35k of this Units.
        :type _30k_35k: str
        """
        if _30k_35k is None:
            raise ValueError("Invalid value for `_30k_35k`, must not be `None`")

        self.__30k_35k = _30k_35k

    @property
    def _35k_40k(self):
        """Gets the _35k_40k of this Units.


        :return: The _35k_40k of this Units.
        :rtype: str
        """
        return self.__35k_40k

    @_35k_40k.setter
    def _35k_40k(self, _35k_40k):
        """Sets the _35k_40k of this Units.


        :param _35k_40k: The _35k_40k of this Units.
        :type _35k_40k: str
        """
        if _35k_40k is None:
            raise ValueError("Invalid value for `_35k_40k`, must not be `None`")

        self.__35k_40k = _35k_40k

    @property
    def _400k_500k(self):
        """Gets the _400k_500k of this Units.


        :return: The _400k_500k of this Units.
        :rtype: str
        """
        return self.__400k_500k

    @_400k_500k.setter
    def _400k_500k(self, _400k_500k):
        """Sets the _400k_500k of this Units.


        :param _400k_500k: The _400k_500k of this Units.
        :type _400k_500k: str
        """
        if _400k_500k is None:
            raise ValueError("Invalid value for `_400k_500k`, must not be `None`")

        self.__400k_500k = _400k_500k

    @property
    def _40k_50k(self):
        """Gets the _40k_50k of this Units.


        :return: The _40k_50k of this Units.
        :rtype: str
        """
        return self.__40k_50k

    @_40k_50k.setter
    def _40k_50k(self, _40k_50k):
        """Sets the _40k_50k of this Units.


        :param _40k_50k: The _40k_50k of this Units.
        :type _40k_50k: str
        """
        if _40k_50k is None:
            raise ValueError("Invalid value for `_40k_50k`, must not be `None`")

        self.__40k_50k = _40k_50k

    @property
    def _500k_750k(self):
        """Gets the _500k_750k of this Units.


        :return: The _500k_750k of this Units.
        :rtype: str
        """
        return self.__500k_750k

    @_500k_750k.setter
    def _500k_750k(self, _500k_750k):
        """Sets the _500k_750k of this Units.


        :param _500k_750k: The _500k_750k of this Units.
        :type _500k_750k: str
        """
        if _500k_750k is None:
            raise ValueError("Invalid value for `_500k_750k`, must not be `None`")

        self.__500k_750k = _500k_750k

    @property
    def _50k_60k(self):
        """Gets the _50k_60k of this Units.


        :return: The _50k_60k of this Units.
        :rtype: str
        """
        return self.__50k_60k

    @_50k_60k.setter
    def _50k_60k(self, _50k_60k):
        """Sets the _50k_60k of this Units.


        :param _50k_60k: The _50k_60k of this Units.
        :type _50k_60k: str
        """
        if _50k_60k is None:
            raise ValueError("Invalid value for `_50k_60k`, must not be `None`")

        self.__50k_60k = _50k_60k

    @property
    def _60k_70k(self):
        """Gets the _60k_70k of this Units.


        :return: The _60k_70k of this Units.
        :rtype: str
        """
        return self.__60k_70k

    @_60k_70k.setter
    def _60k_70k(self, _60k_70k):
        """Sets the _60k_70k of this Units.


        :param _60k_70k: The _60k_70k of this Units.
        :type _60k_70k: str
        """
        if _60k_70k is None:
            raise ValueError("Invalid value for `_60k_70k`, must not be `None`")

        self.__60k_70k = _60k_70k

    @property
    def _70k_80k(self):
        """Gets the _70k_80k of this Units.


        :return: The _70k_80k of this Units.
        :rtype: str
        """
        return self.__70k_80k

    @_70k_80k.setter
    def _70k_80k(self, _70k_80k):
        """Sets the _70k_80k of this Units.


        :param _70k_80k: The _70k_80k of this Units.
        :type _70k_80k: str
        """
        if _70k_80k is None:
            raise ValueError("Invalid value for `_70k_80k`, must not be `None`")

        self.__70k_80k = _70k_80k

    @property
    def _750k_1_m(self):
        """Gets the _750k_1_m of this Units.


        :return: The _750k_1_m of this Units.
        :rtype: str
        """
        return self.__750k_1_m

    @_750k_1_m.setter
    def _750k_1_m(self, _750k_1_m):
        """Sets the _750k_1_m of this Units.


        :param _750k_1_m: The _750k_1_m of this Units.
        :type _750k_1_m: str
        """
        if _750k_1_m is None:
            raise ValueError("Invalid value for `_750k_1_m`, must not be `None`")

        self.__750k_1_m = _750k_1_m

    @property
    def _80k_90k(self):
        """Gets the _80k_90k of this Units.


        :return: The _80k_90k of this Units.
        :rtype: str
        """
        return self.__80k_90k

    @_80k_90k.setter
    def _80k_90k(self, _80k_90k):
        """Sets the _80k_90k of this Units.


        :param _80k_90k: The _80k_90k of this Units.
        :type _80k_90k: str
        """
        if _80k_90k is None:
            raise ValueError("Invalid value for `_80k_90k`, must not be `None`")

        self.__80k_90k = _80k_90k

    @property
    def _90k_100k(self):
        """Gets the _90k_100k of this Units.


        :return: The _90k_100k of this Units.
        :rtype: str
        """
        return self.__90k_100k

    @_90k_100k.setter
    def _90k_100k(self, _90k_100k):
        """Sets the _90k_100k of this Units.


        :param _90k_100k: The _90k_100k of this Units.
        :type _90k_100k: str
        """
        if _90k_100k is None:
            raise ValueError("Invalid value for `_90k_100k`, must not be `None`")

        self.__90k_100k = _90k_100k

    @property
    def median_home_value(self):
        """Gets the median_home_value of this Units.


        :return: The median_home_value of this Units.
        :rtype: str
        """
        return self._median_home_value

    @median_home_value.setter
    def median_home_value(self, median_home_value):
        """Sets the median_home_value of this Units.


        :param median_home_value: The median_home_value of this Units.
        :type median_home_value: str
        """
        if median_home_value is None:
            raise ValueError("Invalid value for `median_home_value`, must not be `None`")

        self._median_home_value = median_home_value

    @property
    def over_1_m(self):
        """Gets the over_1_m of this Units.


        :return: The over_1_m of this Units.
        :rtype: str
        """
        return self._over_1_m

    @over_1_m.setter
    def over_1_m(self, over_1_m):
        """Sets the over_1_m of this Units.


        :param over_1_m: The over_1_m of this Units.
        :type over_1_m: str
        """
        if over_1_m is None:
            raise ValueError("Invalid value for `over_1_m`, must not be `None`")

        self._over_1_m = over_1_m

    @property
    def owner_occupied_households(self):
        """Gets the owner_occupied_households of this Units.


        :return: The owner_occupied_households of this Units.
        :rtype: str
        """
        return self._owner_occupied_households

    @owner_occupied_households.setter
    def owner_occupied_households(self, owner_occupied_households):
        """Sets the owner_occupied_households of this Units.


        :param owner_occupied_households: The owner_occupied_households of this Units.
        :type owner_occupied_households: str
        """
        if owner_occupied_households is None:
            raise ValueError("Invalid value for `owner_occupied_households`, must not be `None`")

        self._owner_occupied_households = owner_occupied_households

    @property
    def under_10k(self):
        """Gets the under_10k of this Units.


        :return: The under_10k of this Units.
        :rtype: str
        """
        return self._under_10k

    @under_10k.setter
    def under_10k(self, under_10k):
        """Sets the under_10k of this Units.


        :param under_10k: The under_10k of this Units.
        :type under_10k: str
        """
        if under_10k is None:
            raise ValueError("Invalid value for `under_10k`, must not be `None`")

        self._under_10k = under_10k

    @property
    def context_households(self):
        """Gets the context_households of this Units.


        :return: The context_households of this Units.
        :rtype: str
        """
        return self._context_households

    @context_households.setter
    def context_households(self, context_households):
        """Sets the context_households of this Units.


        :param context_households: The context_households of this Units.
        :type context_households: str
        """
        if context_households is None:
            raise ValueError("Invalid value for `context_households`, must not be `None`")

        self._context_households = context_households

    @property
    def context_landarea(self):
        """Gets the context_landarea of this Units.


        :return: The context_landarea of this Units.
        :rtype: str
        """
        return self._context_landarea

    @context_landarea.setter
    def context_landarea(self, context_landarea):
        """Sets the context_landarea of this Units.


        :param context_landarea: The context_landarea of this Units.
        :type context_landarea: str
        """
        if context_landarea is None:
            raise ValueError("Invalid value for `context_landarea`, must not be `None`")

        self._context_landarea = context_landarea
