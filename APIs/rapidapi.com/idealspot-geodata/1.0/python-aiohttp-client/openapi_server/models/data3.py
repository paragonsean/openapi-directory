# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature import Feature
from openapi_server import util


class Data3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, features: List[Feature]=None, type: str=None):
        """Data3 - a model defined in OpenAPI

        :param features: The features of this Data3.
        :param type: The type of this Data3.
        """
        self.openapi_types = {
            'features': List[Feature],
            'type': str
        }

        self.attribute_map = {
            'features': 'features',
            'type': 'type'
        }

        self._features = features
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Data3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Data3 of this Data3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def features(self):
        """Gets the features of this Data3.


        :return: The features of this Data3.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Data3.


        :param features: The features of this Data3.
        :type features: List[Feature]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    @property
    def type(self):
        """Gets the type of this Data3.


        :return: The type of this Data3.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Data3.


        :param type: The type of this Data3.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
