# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, areatype: str=None, latitude: float=None, longitude: float=None, radius: str=None, type: str=None, units: str=None):
        """Location3 - a model defined in OpenAPI

        :param areatype: The areatype of this Location3.
        :param latitude: The latitude of this Location3.
        :param longitude: The longitude of this Location3.
        :param radius: The radius of this Location3.
        :param type: The type of this Location3.
        :param units: The units of this Location3.
        """
        self.openapi_types = {
            'areatype': str,
            'latitude': float,
            'longitude': float,
            'radius': str,
            'type': str,
            'units': str
        }

        self.attribute_map = {
            'areatype': 'areatype',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'radius': 'radius',
            'type': 'type',
            'units': 'units'
        }

        self._areatype = areatype
        self._latitude = latitude
        self._longitude = longitude
        self._radius = radius
        self._type = type
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location3 of this Location3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def areatype(self):
        """Gets the areatype of this Location3.


        :return: The areatype of this Location3.
        :rtype: str
        """
        return self._areatype

    @areatype.setter
    def areatype(self, areatype):
        """Sets the areatype of this Location3.


        :param areatype: The areatype of this Location3.
        :type areatype: str
        """
        if areatype is None:
            raise ValueError("Invalid value for `areatype`, must not be `None`")

        self._areatype = areatype

    @property
    def latitude(self):
        """Gets the latitude of this Location3.


        :return: The latitude of this Location3.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Location3.


        :param latitude: The latitude of this Location3.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Location3.


        :return: The longitude of this Location3.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Location3.


        :param longitude: The longitude of this Location3.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def radius(self):
        """Gets the radius of this Location3.


        :return: The radius of this Location3.
        :rtype: str
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this Location3.


        :param radius: The radius of this Location3.
        :type radius: str
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius

    @property
    def type(self):
        """Gets the type of this Location3.


        :return: The type of this Location3.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location3.


        :param type: The type of this Location3.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def units(self):
        """Gets the units of this Location3.


        :return: The units of this Location3.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Location3.


        :param units: The units of this Location3.
        :type units: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units
