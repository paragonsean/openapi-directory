# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Properties1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affgeoid: str=None, aland: int=None, awater: int=None, blkgrpce: str=None, cbsafp: str=None, classfp: str=None, countyfp: str=None, countyns: str=None, csafp: str=None, division: str=None, funcstat: str=None, geoid: str=None, intptlat: str=None, intptlon: str=None, lsad: str=None, memi: str=None, metdivfp: str=None, mtfcc: str=None, name: str=None, namelsad: str=None, pcicbsa: str=None, pcinecta: str=None, placefp: str=None, placens: str=None, population: int=None, pop_sqmi: float=None, po_name: str=None, region: str=None, sqmi: float=None, state: str=None, statefp: str=None, statens: str=None, stusps: str=None, shape_area: float=None, shape_leng: float=None, tractce: str=None, zip_code: str=None):
        """Properties1 - a model defined in OpenAPI

        :param affgeoid: The affgeoid of this Properties1.
        :param aland: The aland of this Properties1.
        :param awater: The awater of this Properties1.
        :param blkgrpce: The blkgrpce of this Properties1.
        :param cbsafp: The cbsafp of this Properties1.
        :param classfp: The classfp of this Properties1.
        :param countyfp: The countyfp of this Properties1.
        :param countyns: The countyns of this Properties1.
        :param csafp: The csafp of this Properties1.
        :param division: The division of this Properties1.
        :param funcstat: The funcstat of this Properties1.
        :param geoid: The geoid of this Properties1.
        :param intptlat: The intptlat of this Properties1.
        :param intptlon: The intptlon of this Properties1.
        :param lsad: The lsad of this Properties1.
        :param memi: The memi of this Properties1.
        :param metdivfp: The metdivfp of this Properties1.
        :param mtfcc: The mtfcc of this Properties1.
        :param name: The name of this Properties1.
        :param namelsad: The namelsad of this Properties1.
        :param pcicbsa: The pcicbsa of this Properties1.
        :param pcinecta: The pcinecta of this Properties1.
        :param placefp: The placefp of this Properties1.
        :param placens: The placens of this Properties1.
        :param population: The population of this Properties1.
        :param pop_sqmi: The pop_sqmi of this Properties1.
        :param po_name: The po_name of this Properties1.
        :param region: The region of this Properties1.
        :param sqmi: The sqmi of this Properties1.
        :param state: The state of this Properties1.
        :param statefp: The statefp of this Properties1.
        :param statens: The statens of this Properties1.
        :param stusps: The stusps of this Properties1.
        :param shape_area: The shape_area of this Properties1.
        :param shape_leng: The shape_leng of this Properties1.
        :param tractce: The tractce of this Properties1.
        :param zip_code: The zip_code of this Properties1.
        """
        self.openapi_types = {
            'affgeoid': str,
            'aland': int,
            'awater': int,
            'blkgrpce': str,
            'cbsafp': str,
            'classfp': str,
            'countyfp': str,
            'countyns': str,
            'csafp': str,
            'division': str,
            'funcstat': str,
            'geoid': str,
            'intptlat': str,
            'intptlon': str,
            'lsad': str,
            'memi': str,
            'metdivfp': str,
            'mtfcc': str,
            'name': str,
            'namelsad': str,
            'pcicbsa': str,
            'pcinecta': str,
            'placefp': str,
            'placens': str,
            'population': int,
            'pop_sqmi': float,
            'po_name': str,
            'region': str,
            'sqmi': float,
            'state': str,
            'statefp': str,
            'statens': str,
            'stusps': str,
            'shape_area': float,
            'shape_leng': float,
            'tractce': str,
            'zip_code': str
        }

        self.attribute_map = {
            'affgeoid': 'AFFGEOID',
            'aland': 'ALAND',
            'awater': 'AWATER',
            'blkgrpce': 'BLKGRPCE',
            'cbsafp': 'CBSAFP',
            'classfp': 'CLASSFP',
            'countyfp': 'COUNTYFP',
            'countyns': 'COUNTYNS',
            'csafp': 'CSAFP',
            'division': 'DIVISION',
            'funcstat': 'FUNCSTAT',
            'geoid': 'GEOID',
            'intptlat': 'INTPTLAT',
            'intptlon': 'INTPTLON',
            'lsad': 'LSAD',
            'memi': 'MEMI',
            'metdivfp': 'METDIVFP',
            'mtfcc': 'MTFCC',
            'name': 'NAME',
            'namelsad': 'NAMELSAD',
            'pcicbsa': 'PCICBSA',
            'pcinecta': 'PCINECTA',
            'placefp': 'PLACEFP',
            'placens': 'PLACENS',
            'population': 'POPULATION',
            'pop_sqmi': 'POP_SQMI',
            'po_name': 'PO_NAME',
            'region': 'REGION',
            'sqmi': 'SQMI',
            'state': 'STATE',
            'statefp': 'STATEFP',
            'statens': 'STATENS',
            'stusps': 'STUSPS',
            'shape_area': 'Shape_Area',
            'shape_leng': 'Shape_Leng',
            'tractce': 'TRACTCE',
            'zip_code': 'ZIP_CODE'
        }

        self._affgeoid = affgeoid
        self._aland = aland
        self._awater = awater
        self._blkgrpce = blkgrpce
        self._cbsafp = cbsafp
        self._classfp = classfp
        self._countyfp = countyfp
        self._countyns = countyns
        self._csafp = csafp
        self._division = division
        self._funcstat = funcstat
        self._geoid = geoid
        self._intptlat = intptlat
        self._intptlon = intptlon
        self._lsad = lsad
        self._memi = memi
        self._metdivfp = metdivfp
        self._mtfcc = mtfcc
        self._name = name
        self._namelsad = namelsad
        self._pcicbsa = pcicbsa
        self._pcinecta = pcinecta
        self._placefp = placefp
        self._placens = placens
        self._population = population
        self._pop_sqmi = pop_sqmi
        self._po_name = po_name
        self._region = region
        self._sqmi = sqmi
        self._state = state
        self._statefp = statefp
        self._statens = statens
        self._stusps = stusps
        self._shape_area = shape_area
        self._shape_leng = shape_leng
        self._tractce = tractce
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Properties1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Properties1 of this Properties1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affgeoid(self):
        """Gets the affgeoid of this Properties1.


        :return: The affgeoid of this Properties1.
        :rtype: str
        """
        return self._affgeoid

    @affgeoid.setter
    def affgeoid(self, affgeoid):
        """Sets the affgeoid of this Properties1.


        :param affgeoid: The affgeoid of this Properties1.
        :type affgeoid: str
        """

        self._affgeoid = affgeoid

    @property
    def aland(self):
        """Gets the aland of this Properties1.


        :return: The aland of this Properties1.
        :rtype: int
        """
        return self._aland

    @aland.setter
    def aland(self, aland):
        """Sets the aland of this Properties1.


        :param aland: The aland of this Properties1.
        :type aland: int
        """
        if aland is None:
            raise ValueError("Invalid value for `aland`, must not be `None`")

        self._aland = aland

    @property
    def awater(self):
        """Gets the awater of this Properties1.


        :return: The awater of this Properties1.
        :rtype: int
        """
        return self._awater

    @awater.setter
    def awater(self, awater):
        """Sets the awater of this Properties1.


        :param awater: The awater of this Properties1.
        :type awater: int
        """

        self._awater = awater

    @property
    def blkgrpce(self):
        """Gets the blkgrpce of this Properties1.


        :return: The blkgrpce of this Properties1.
        :rtype: str
        """
        return self._blkgrpce

    @blkgrpce.setter
    def blkgrpce(self, blkgrpce):
        """Sets the blkgrpce of this Properties1.


        :param blkgrpce: The blkgrpce of this Properties1.
        :type blkgrpce: str
        """

        self._blkgrpce = blkgrpce

    @property
    def cbsafp(self):
        """Gets the cbsafp of this Properties1.


        :return: The cbsafp of this Properties1.
        :rtype: str
        """
        return self._cbsafp

    @cbsafp.setter
    def cbsafp(self, cbsafp):
        """Sets the cbsafp of this Properties1.


        :param cbsafp: The cbsafp of this Properties1.
        :type cbsafp: str
        """

        self._cbsafp = cbsafp

    @property
    def classfp(self):
        """Gets the classfp of this Properties1.


        :return: The classfp of this Properties1.
        :rtype: str
        """
        return self._classfp

    @classfp.setter
    def classfp(self, classfp):
        """Sets the classfp of this Properties1.


        :param classfp: The classfp of this Properties1.
        :type classfp: str
        """

        self._classfp = classfp

    @property
    def countyfp(self):
        """Gets the countyfp of this Properties1.


        :return: The countyfp of this Properties1.
        :rtype: str
        """
        return self._countyfp

    @countyfp.setter
    def countyfp(self, countyfp):
        """Sets the countyfp of this Properties1.


        :param countyfp: The countyfp of this Properties1.
        :type countyfp: str
        """

        self._countyfp = countyfp

    @property
    def countyns(self):
        """Gets the countyns of this Properties1.


        :return: The countyns of this Properties1.
        :rtype: str
        """
        return self._countyns

    @countyns.setter
    def countyns(self, countyns):
        """Sets the countyns of this Properties1.


        :param countyns: The countyns of this Properties1.
        :type countyns: str
        """

        self._countyns = countyns

    @property
    def csafp(self):
        """Gets the csafp of this Properties1.


        :return: The csafp of this Properties1.
        :rtype: str
        """
        return self._csafp

    @csafp.setter
    def csafp(self, csafp):
        """Sets the csafp of this Properties1.


        :param csafp: The csafp of this Properties1.
        :type csafp: str
        """

        self._csafp = csafp

    @property
    def division(self):
        """Gets the division of this Properties1.


        :return: The division of this Properties1.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Properties1.


        :param division: The division of this Properties1.
        :type division: str
        """

        self._division = division

    @property
    def funcstat(self):
        """Gets the funcstat of this Properties1.


        :return: The funcstat of this Properties1.
        :rtype: str
        """
        return self._funcstat

    @funcstat.setter
    def funcstat(self, funcstat):
        """Sets the funcstat of this Properties1.


        :param funcstat: The funcstat of this Properties1.
        :type funcstat: str
        """

        self._funcstat = funcstat

    @property
    def geoid(self):
        """Gets the geoid of this Properties1.


        :return: The geoid of this Properties1.
        :rtype: str
        """
        return self._geoid

    @geoid.setter
    def geoid(self, geoid):
        """Sets the geoid of this Properties1.


        :param geoid: The geoid of this Properties1.
        :type geoid: str
        """

        self._geoid = geoid

    @property
    def intptlat(self):
        """Gets the intptlat of this Properties1.


        :return: The intptlat of this Properties1.
        :rtype: str
        """
        return self._intptlat

    @intptlat.setter
    def intptlat(self, intptlat):
        """Sets the intptlat of this Properties1.


        :param intptlat: The intptlat of this Properties1.
        :type intptlat: str
        """

        self._intptlat = intptlat

    @property
    def intptlon(self):
        """Gets the intptlon of this Properties1.


        :return: The intptlon of this Properties1.
        :rtype: str
        """
        return self._intptlon

    @intptlon.setter
    def intptlon(self, intptlon):
        """Sets the intptlon of this Properties1.


        :param intptlon: The intptlon of this Properties1.
        :type intptlon: str
        """

        self._intptlon = intptlon

    @property
    def lsad(self):
        """Gets the lsad of this Properties1.


        :return: The lsad of this Properties1.
        :rtype: str
        """
        return self._lsad

    @lsad.setter
    def lsad(self, lsad):
        """Sets the lsad of this Properties1.


        :param lsad: The lsad of this Properties1.
        :type lsad: str
        """

        self._lsad = lsad

    @property
    def memi(self):
        """Gets the memi of this Properties1.


        :return: The memi of this Properties1.
        :rtype: str
        """
        return self._memi

    @memi.setter
    def memi(self, memi):
        """Sets the memi of this Properties1.


        :param memi: The memi of this Properties1.
        :type memi: str
        """

        self._memi = memi

    @property
    def metdivfp(self):
        """Gets the metdivfp of this Properties1.


        :return: The metdivfp of this Properties1.
        :rtype: str
        """
        return self._metdivfp

    @metdivfp.setter
    def metdivfp(self, metdivfp):
        """Sets the metdivfp of this Properties1.


        :param metdivfp: The metdivfp of this Properties1.
        :type metdivfp: str
        """

        self._metdivfp = metdivfp

    @property
    def mtfcc(self):
        """Gets the mtfcc of this Properties1.


        :return: The mtfcc of this Properties1.
        :rtype: str
        """
        return self._mtfcc

    @mtfcc.setter
    def mtfcc(self, mtfcc):
        """Sets the mtfcc of this Properties1.


        :param mtfcc: The mtfcc of this Properties1.
        :type mtfcc: str
        """

        self._mtfcc = mtfcc

    @property
    def name(self):
        """Gets the name of this Properties1.


        :return: The name of this Properties1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Properties1.


        :param name: The name of this Properties1.
        :type name: str
        """

        self._name = name

    @property
    def namelsad(self):
        """Gets the namelsad of this Properties1.


        :return: The namelsad of this Properties1.
        :rtype: str
        """
        return self._namelsad

    @namelsad.setter
    def namelsad(self, namelsad):
        """Sets the namelsad of this Properties1.


        :param namelsad: The namelsad of this Properties1.
        :type namelsad: str
        """

        self._namelsad = namelsad

    @property
    def pcicbsa(self):
        """Gets the pcicbsa of this Properties1.


        :return: The pcicbsa of this Properties1.
        :rtype: str
        """
        return self._pcicbsa

    @pcicbsa.setter
    def pcicbsa(self, pcicbsa):
        """Sets the pcicbsa of this Properties1.


        :param pcicbsa: The pcicbsa of this Properties1.
        :type pcicbsa: str
        """

        self._pcicbsa = pcicbsa

    @property
    def pcinecta(self):
        """Gets the pcinecta of this Properties1.


        :return: The pcinecta of this Properties1.
        :rtype: str
        """
        return self._pcinecta

    @pcinecta.setter
    def pcinecta(self, pcinecta):
        """Sets the pcinecta of this Properties1.


        :param pcinecta: The pcinecta of this Properties1.
        :type pcinecta: str
        """

        self._pcinecta = pcinecta

    @property
    def placefp(self):
        """Gets the placefp of this Properties1.


        :return: The placefp of this Properties1.
        :rtype: str
        """
        return self._placefp

    @placefp.setter
    def placefp(self, placefp):
        """Sets the placefp of this Properties1.


        :param placefp: The placefp of this Properties1.
        :type placefp: str
        """

        self._placefp = placefp

    @property
    def placens(self):
        """Gets the placens of this Properties1.


        :return: The placens of this Properties1.
        :rtype: str
        """
        return self._placens

    @placens.setter
    def placens(self, placens):
        """Sets the placens of this Properties1.


        :param placens: The placens of this Properties1.
        :type placens: str
        """

        self._placens = placens

    @property
    def population(self):
        """Gets the population of this Properties1.


        :return: The population of this Properties1.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this Properties1.


        :param population: The population of this Properties1.
        :type population: int
        """

        self._population = population

    @property
    def pop_sqmi(self):
        """Gets the pop_sqmi of this Properties1.


        :return: The pop_sqmi of this Properties1.
        :rtype: float
        """
        return self._pop_sqmi

    @pop_sqmi.setter
    def pop_sqmi(self, pop_sqmi):
        """Sets the pop_sqmi of this Properties1.


        :param pop_sqmi: The pop_sqmi of this Properties1.
        :type pop_sqmi: float
        """

        self._pop_sqmi = pop_sqmi

    @property
    def po_name(self):
        """Gets the po_name of this Properties1.


        :return: The po_name of this Properties1.
        :rtype: str
        """
        return self._po_name

    @po_name.setter
    def po_name(self, po_name):
        """Sets the po_name of this Properties1.


        :param po_name: The po_name of this Properties1.
        :type po_name: str
        """

        self._po_name = po_name

    @property
    def region(self):
        """Gets the region of this Properties1.


        :return: The region of this Properties1.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Properties1.


        :param region: The region of this Properties1.
        :type region: str
        """

        self._region = region

    @property
    def sqmi(self):
        """Gets the sqmi of this Properties1.


        :return: The sqmi of this Properties1.
        :rtype: float
        """
        return self._sqmi

    @sqmi.setter
    def sqmi(self, sqmi):
        """Sets the sqmi of this Properties1.


        :param sqmi: The sqmi of this Properties1.
        :type sqmi: float
        """

        self._sqmi = sqmi

    @property
    def state(self):
        """Gets the state of this Properties1.


        :return: The state of this Properties1.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Properties1.


        :param state: The state of this Properties1.
        :type state: str
        """

        self._state = state

    @property
    def statefp(self):
        """Gets the statefp of this Properties1.


        :return: The statefp of this Properties1.
        :rtype: str
        """
        return self._statefp

    @statefp.setter
    def statefp(self, statefp):
        """Sets the statefp of this Properties1.


        :param statefp: The statefp of this Properties1.
        :type statefp: str
        """

        self._statefp = statefp

    @property
    def statens(self):
        """Gets the statens of this Properties1.


        :return: The statens of this Properties1.
        :rtype: str
        """
        return self._statens

    @statens.setter
    def statens(self, statens):
        """Sets the statens of this Properties1.


        :param statens: The statens of this Properties1.
        :type statens: str
        """

        self._statens = statens

    @property
    def stusps(self):
        """Gets the stusps of this Properties1.


        :return: The stusps of this Properties1.
        :rtype: str
        """
        return self._stusps

    @stusps.setter
    def stusps(self, stusps):
        """Sets the stusps of this Properties1.


        :param stusps: The stusps of this Properties1.
        :type stusps: str
        """

        self._stusps = stusps

    @property
    def shape_area(self):
        """Gets the shape_area of this Properties1.


        :return: The shape_area of this Properties1.
        :rtype: float
        """
        return self._shape_area

    @shape_area.setter
    def shape_area(self, shape_area):
        """Sets the shape_area of this Properties1.


        :param shape_area: The shape_area of this Properties1.
        :type shape_area: float
        """

        self._shape_area = shape_area

    @property
    def shape_leng(self):
        """Gets the shape_leng of this Properties1.


        :return: The shape_leng of this Properties1.
        :rtype: float
        """
        return self._shape_leng

    @shape_leng.setter
    def shape_leng(self, shape_leng):
        """Sets the shape_leng of this Properties1.


        :param shape_leng: The shape_leng of this Properties1.
        :type shape_leng: float
        """

        self._shape_leng = shape_leng

    @property
    def tractce(self):
        """Gets the tractce of this Properties1.


        :return: The tractce of this Properties1.
        :rtype: str
        """
        return self._tractce

    @tractce.setter
    def tractce(self, tractce):
        """Sets the tractce of this Properties1.


        :param tractce: The tractce of this Properties1.
        :type tractce: str
        """

        self._tractce = tractce

    @property
    def zip_code(self):
        """Gets the zip_code of this Properties1.


        :return: The zip_code of this Properties1.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Properties1.


        :param zip_code: The zip_code of this Properties1.
        :type zip_code: str
        """

        self._zip_code = zip_code
