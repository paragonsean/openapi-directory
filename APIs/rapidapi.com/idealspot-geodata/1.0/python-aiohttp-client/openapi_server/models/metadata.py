# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.units import Units
from openapi_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datetime: List[List[str]]=None, display_groups: List[List[str]]=None, units: Units=None):
        """Metadata - a model defined in OpenAPI

        :param datetime: The datetime of this Metadata.
        :param display_groups: The display_groups of this Metadata.
        :param units: The units of this Metadata.
        """
        self.openapi_types = {
            'datetime': List[List[str]],
            'display_groups': List[List[str]],
            'units': Units
        }

        self.attribute_map = {
            'datetime': 'datetime',
            'display_groups': 'display_groups',
            'units': 'units'
        }

        self._datetime = datetime
        self._display_groups = display_groups
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metadata of this Metadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datetime(self):
        """Gets the datetime of this Metadata.


        :return: The datetime of this Metadata.
        :rtype: List[List[str]]
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this Metadata.


        :param datetime: The datetime of this Metadata.
        :type datetime: List[List[str]]
        """
        if datetime is None:
            raise ValueError("Invalid value for `datetime`, must not be `None`")

        self._datetime = datetime

    @property
    def display_groups(self):
        """Gets the display_groups of this Metadata.


        :return: The display_groups of this Metadata.
        :rtype: List[List[str]]
        """
        return self._display_groups

    @display_groups.setter
    def display_groups(self, display_groups):
        """Sets the display_groups of this Metadata.


        :param display_groups: The display_groups of this Metadata.
        :type display_groups: List[List[str]]
        """
        if display_groups is None:
            raise ValueError("Invalid value for `display_groups`, must not be `None`")

        self._display_groups = display_groups

    @property
    def units(self):
        """Gets the units of this Metadata.


        :return: The units of this Metadata.
        :rtype: Units
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Metadata.


        :param units: The units of this Metadata.
        :type units: Units
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units
