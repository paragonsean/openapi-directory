# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location3 import Location3
from openapi_server import util


class Properties2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_area_sq_meters: float=None, location: Location3=None, status: int=None):
        """Properties2 - a model defined in OpenAPI

        :param calculated_area_sq_meters: The calculated_area_sq_meters of this Properties2.
        :param location: The location of this Properties2.
        :param status: The status of this Properties2.
        """
        self.openapi_types = {
            'calculated_area_sq_meters': float,
            'location': Location3,
            'status': int
        }

        self.attribute_map = {
            'calculated_area_sq_meters': 'calculated_area_sq_meters',
            'location': 'location',
            'status': 'status'
        }

        self._calculated_area_sq_meters = calculated_area_sq_meters
        self._location = location
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Properties2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Properties2 of this Properties2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_area_sq_meters(self):
        """Gets the calculated_area_sq_meters of this Properties2.


        :return: The calculated_area_sq_meters of this Properties2.
        :rtype: float
        """
        return self._calculated_area_sq_meters

    @calculated_area_sq_meters.setter
    def calculated_area_sq_meters(self, calculated_area_sq_meters):
        """Sets the calculated_area_sq_meters of this Properties2.


        :param calculated_area_sq_meters: The calculated_area_sq_meters of this Properties2.
        :type calculated_area_sq_meters: float
        """
        if calculated_area_sq_meters is None:
            raise ValueError("Invalid value for `calculated_area_sq_meters`, must not be `None`")

        self._calculated_area_sq_meters = calculated_area_sq_meters

    @property
    def location(self):
        """Gets the location of this Properties2.


        :return: The location of this Properties2.
        :rtype: Location3
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Properties2.


        :param location: The location of this Properties2.
        :type location: Location3
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def status(self):
        """Gets the status of this Properties2.


        :return: The status of this Properties2.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Properties2.


        :param status: The status of this Properties2.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
