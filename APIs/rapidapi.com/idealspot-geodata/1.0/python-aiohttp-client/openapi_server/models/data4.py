# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crs import Crs
from openapi_server.models.feature1 import Feature1
from openapi_server import util


class Data4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crs: Crs=None, features: List[Feature1]=None, type: str=None):
        """Data4 - a model defined in OpenAPI

        :param crs: The crs of this Data4.
        :param features: The features of this Data4.
        :param type: The type of this Data4.
        """
        self.openapi_types = {
            'crs': Crs,
            'features': List[Feature1],
            'type': str
        }

        self.attribute_map = {
            'crs': 'crs',
            'features': 'features',
            'type': 'type'
        }

        self._crs = crs
        self._features = features
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Data4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Data4 of this Data4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crs(self):
        """Gets the crs of this Data4.


        :return: The crs of this Data4.
        :rtype: Crs
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this Data4.


        :param crs: The crs of this Data4.
        :type crs: Crs
        """
        if crs is None:
            raise ValueError("Invalid value for `crs`, must not be `None`")

        self._crs = crs

    @property
    def features(self):
        """Gets the features of this Data4.


        :return: The features of this Data4.
        :rtype: List[Feature1]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Data4.


        :param features: The features of this Data4.
        :type features: List[Feature1]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    @property
    def type(self):
        """Gets the type of this Data4.


        :return: The type of this Data4.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Data4.


        :param type: The type of this Data4.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
