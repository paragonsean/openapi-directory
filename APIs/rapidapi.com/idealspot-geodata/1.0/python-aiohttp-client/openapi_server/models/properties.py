# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autocomplete import Autocomplete
from openapi_server.models.properties1 import Properties1
from openapi_server import util


class Properties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: Properties1=None, altname: str=None, autocomplete: Autocomplete=None, calculated_area_sq_meters: float=None, name: str=None, region_id: str=None, regiontype: str=None, state_code: str=None, timestamp: str=None):
        """Properties - a model defined in OpenAPI

        :param properties: The properties of this Properties.
        :param altname: The altname of this Properties.
        :param autocomplete: The autocomplete of this Properties.
        :param calculated_area_sq_meters: The calculated_area_sq_meters of this Properties.
        :param name: The name of this Properties.
        :param region_id: The region_id of this Properties.
        :param regiontype: The regiontype of this Properties.
        :param state_code: The state_code of this Properties.
        :param timestamp: The timestamp of this Properties.
        """
        self.openapi_types = {
            'properties': Properties1,
            'altname': str,
            'autocomplete': Autocomplete,
            'calculated_area_sq_meters': float,
            'name': str,
            'region_id': str,
            'regiontype': str,
            'state_code': str,
            'timestamp': str
        }

        self.attribute_map = {
            'properties': '_properties',
            'altname': 'altname',
            'autocomplete': 'autocomplete',
            'calculated_area_sq_meters': 'calculated_area_sq_meters',
            'name': 'name',
            'region_id': 'region_id',
            'regiontype': 'regiontype',
            'state_code': 'state_code',
            'timestamp': 'timestamp'
        }

        self._properties = properties
        self._altname = altname
        self._autocomplete = autocomplete
        self._calculated_area_sq_meters = calculated_area_sq_meters
        self._name = name
        self._region_id = region_id
        self._regiontype = regiontype
        self._state_code = state_code
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Properties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Properties of this Properties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this Properties.


        :return: The properties of this Properties.
        :rtype: Properties1
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Properties.


        :param properties: The properties of this Properties.
        :type properties: Properties1
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def altname(self):
        """Gets the altname of this Properties.


        :return: The altname of this Properties.
        :rtype: str
        """
        return self._altname

    @altname.setter
    def altname(self, altname):
        """Sets the altname of this Properties.


        :param altname: The altname of this Properties.
        :type altname: str
        """
        if altname is None:
            raise ValueError("Invalid value for `altname`, must not be `None`")

        self._altname = altname

    @property
    def autocomplete(self):
        """Gets the autocomplete of this Properties.


        :return: The autocomplete of this Properties.
        :rtype: Autocomplete
        """
        return self._autocomplete

    @autocomplete.setter
    def autocomplete(self, autocomplete):
        """Sets the autocomplete of this Properties.


        :param autocomplete: The autocomplete of this Properties.
        :type autocomplete: Autocomplete
        """
        if autocomplete is None:
            raise ValueError("Invalid value for `autocomplete`, must not be `None`")

        self._autocomplete = autocomplete

    @property
    def calculated_area_sq_meters(self):
        """Gets the calculated_area_sq_meters of this Properties.


        :return: The calculated_area_sq_meters of this Properties.
        :rtype: float
        """
        return self._calculated_area_sq_meters

    @calculated_area_sq_meters.setter
    def calculated_area_sq_meters(self, calculated_area_sq_meters):
        """Sets the calculated_area_sq_meters of this Properties.


        :param calculated_area_sq_meters: The calculated_area_sq_meters of this Properties.
        :type calculated_area_sq_meters: float
        """
        if calculated_area_sq_meters is None:
            raise ValueError("Invalid value for `calculated_area_sq_meters`, must not be `None`")

        self._calculated_area_sq_meters = calculated_area_sq_meters

    @property
    def name(self):
        """Gets the name of this Properties.


        :return: The name of this Properties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Properties.


        :param name: The name of this Properties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def region_id(self):
        """Gets the region_id of this Properties.


        :return: The region_id of this Properties.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Properties.


        :param region_id: The region_id of this Properties.
        :type region_id: str
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def regiontype(self):
        """Gets the regiontype of this Properties.


        :return: The regiontype of this Properties.
        :rtype: str
        """
        return self._regiontype

    @regiontype.setter
    def regiontype(self, regiontype):
        """Sets the regiontype of this Properties.


        :param regiontype: The regiontype of this Properties.
        :type regiontype: str
        """
        if regiontype is None:
            raise ValueError("Invalid value for `regiontype`, must not be `None`")

        self._regiontype = regiontype

    @property
    def state_code(self):
        """Gets the state_code of this Properties.


        :return: The state_code of this Properties.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Properties.


        :param state_code: The state_code of this Properties.
        :type state_code: str
        """
        if state_code is None:
            raise ValueError("Invalid value for `state_code`, must not be `None`")

        self._state_code = state_code

    @property
    def timestamp(self):
        """Gets the timestamp of this Properties.


        :return: The timestamp of this Properties.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Properties.


        :param timestamp: The timestamp of this Properties.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
