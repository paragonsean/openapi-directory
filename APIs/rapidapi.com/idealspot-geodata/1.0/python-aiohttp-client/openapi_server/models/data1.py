# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location1 import Location1
from openapi_server.models.metadata import Metadata
from openapi_server import util


class Data1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[List[str]]=None, location: Location1=None, location_index: int=None, metadata: Metadata=None):
        """Data1 - a model defined in OpenAPI

        :param data: The data of this Data1.
        :param location: The location of this Data1.
        :param location_index: The location_index of this Data1.
        :param metadata: The metadata of this Data1.
        """
        self.openapi_types = {
            'data': List[List[str]],
            'location': Location1,
            'location_index': int,
            'metadata': Metadata
        }

        self.attribute_map = {
            'data': 'data',
            'location': 'location',
            'location_index': 'location_index',
            'metadata': 'metadata'
        }

        self._data = data
        self._location = location
        self._location_index = location_index
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Data1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Data1 of this Data1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Data1.


        :return: The data of this Data1.
        :rtype: List[List[str]]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Data1.


        :param data: The data of this Data1.
        :type data: List[List[str]]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def location(self):
        """Gets the location of this Data1.


        :return: The location of this Data1.
        :rtype: Location1
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Data1.


        :param location: The location of this Data1.
        :type location: Location1
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def location_index(self):
        """Gets the location_index of this Data1.


        :return: The location_index of this Data1.
        :rtype: int
        """
        return self._location_index

    @location_index.setter
    def location_index(self, location_index):
        """Sets the location_index of this Data1.


        :param location_index: The location_index of this Data1.
        :type location_index: int
        """
        if location_index is None:
            raise ValueError("Invalid value for `location_index`, must not be `None`")

        self._location_index = location_index

    @property
    def metadata(self):
        """Gets the metadata of this Data1.


        :return: The metadata of this Data1.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Data1.


        :param metadata: The metadata of this Data1.
        :type metadata: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata
