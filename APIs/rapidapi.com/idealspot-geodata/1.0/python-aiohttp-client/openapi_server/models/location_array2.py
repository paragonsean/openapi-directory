# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationArray2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region_id: str=None, regiontype: str=None, type: str=None):
        """LocationArray2 - a model defined in OpenAPI

        :param region_id: The region_id of this LocationArray2.
        :param regiontype: The regiontype of this LocationArray2.
        :param type: The type of this LocationArray2.
        """
        self.openapi_types = {
            'region_id': str,
            'regiontype': str,
            'type': str
        }

        self.attribute_map = {
            'region_id': 'region_id',
            'regiontype': 'regiontype',
            'type': 'type'
        }

        self._region_id = region_id
        self._regiontype = regiontype
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationArray2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The locationArray2 of this LocationArray2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_id(self):
        """Gets the region_id of this LocationArray2.


        :return: The region_id of this LocationArray2.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this LocationArray2.


        :param region_id: The region_id of this LocationArray2.
        :type region_id: str
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def regiontype(self):
        """Gets the regiontype of this LocationArray2.


        :return: The regiontype of this LocationArray2.
        :rtype: str
        """
        return self._regiontype

    @regiontype.setter
    def regiontype(self, regiontype):
        """Sets the regiontype of this LocationArray2.


        :param regiontype: The regiontype of this LocationArray2.
        :type regiontype: str
        """
        if regiontype is None:
            raise ValueError("Invalid value for `regiontype`, must not be `None`")

        self._regiontype = regiontype

    @property
    def type(self):
        """Gets the type of this LocationArray2.


        :return: The type of this LocationArray2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocationArray2.


        :param type: The type of this LocationArray2.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
