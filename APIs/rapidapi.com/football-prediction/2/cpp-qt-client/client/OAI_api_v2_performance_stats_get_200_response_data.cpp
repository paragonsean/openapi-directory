/**
 * Football Prediction API
 * The Football Prediction API allows developers to get predictions for upcoming football (soccer) matches, results for past matches, and performance monitoring for statistical models.
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v2_performance_stats_get_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v2_performance_stats_get_200_response_data::OAI_api_v2_performance_stats_get_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v2_performance_stats_get_200_response_data::OAI_api_v2_performance_stats_get_200_response_data() {
    this->initializeModel();
}

OAI_api_v2_performance_stats_get_200_response_data::~OAI_api_v2_performance_stats_get_200_response_data() {}

void OAI_api_v2_performance_stats_get_200_response_data::initializeModel() {

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_market_isSet = false;
    m_market_isValid = false;
}

void OAI_api_v2_performance_stats_get_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v2_performance_stats_get_200_response_data::fromJsonObject(QJsonObject json) {

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("accuracy")]);
    m_accuracy_isSet = !json[QString("accuracy")].isNull() && m_accuracy_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_market_isValid = ::OpenAPI::fromJsonValue(m_market, json[QString("market")]);
    m_market_isSet = !json[QString("market")].isNull() && m_market_isValid;
}

QString OAI_api_v2_performance_stats_get_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v2_performance_stats_get_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy.isSet()) {
        obj.insert(QString("accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_market_isSet) {
        obj.insert(QString("market"), ::OpenAPI::toJsonValue(m_market));
    }
    return obj;
}

OAI_api_v2_performance_stats_get_200_response_data_accuracy OAI_api_v2_performance_stats_get_200_response_data::getAccuracy() const {
    return m_accuracy;
}
void OAI_api_v2_performance_stats_get_200_response_data::setAccuracy(const OAI_api_v2_performance_stats_get_200_response_data_accuracy &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAI_api_v2_performance_stats_get_200_response_data::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAI_api_v2_performance_stats_get_200_response_data::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

OAI_api_v2_performance_stats_get_200_response_data_details OAI_api_v2_performance_stats_get_200_response_data::getDetails() const {
    return m_details;
}
void OAI_api_v2_performance_stats_get_200_response_data::setDetails(const OAI_api_v2_performance_stats_get_200_response_data_details &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAI_api_v2_performance_stats_get_200_response_data::is_details_Set() const{
    return m_details_isSet;
}

bool OAI_api_v2_performance_stats_get_200_response_data::is_details_Valid() const{
    return m_details_isValid;
}

QString OAI_api_v2_performance_stats_get_200_response_data::getMarket() const {
    return m_market;
}
void OAI_api_v2_performance_stats_get_200_response_data::setMarket(const QString &market) {
    m_market = market;
    m_market_isSet = true;
}

bool OAI_api_v2_performance_stats_get_200_response_data::is_market_Set() const{
    return m_market_isSet;
}

bool OAI_api_v2_performance_stats_get_200_response_data::is_market_Valid() const{
    return m_market_isValid;
}

bool OAI_api_v2_performance_stats_get_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v2_performance_stats_get_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
