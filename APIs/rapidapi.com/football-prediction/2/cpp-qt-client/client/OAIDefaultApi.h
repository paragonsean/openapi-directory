/**
 * Football Prediction API
 * The Football Prediction API allows developers to get predictions for upcoming football (soccer) matches, results for past matches, and performance monitoring for statistical models.
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_v2_list_federations_get_200_response.h"
#include "OAI_api_v2_list_federations_get_404_response.h"
#include "OAI_api_v2_list_markets_get_200_response.h"
#include "OAI_api_v2_performance_stats_get_200_response.h"
#include "OAI_api_v2_predictions__id__get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_rapid_api_key QString [optional]
    */
    virtual void apiV2ListFederationsGet(const ::OpenAPI::OptionalParam<QString> &x_rapid_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_rapid_api_key QString [optional]
    */
    virtual void apiV2ListMarketsGet(const ::OpenAPI::OptionalParam<QString> &x_rapid_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_rapid_api_key QString [optional]
    */
    virtual void apiV2PerformanceStatsGet(const ::OpenAPI::OptionalParam<QString> &x_rapid_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_rapid_api_key QString [optional]
    */
    virtual void apiV2PredictionsGet(const ::OpenAPI::OptionalParam<QString> &x_rapid_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiV2PredictionsIdGet(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2ListFederationsGetCallback(OAIHttpRequestWorker *worker);
    void apiV2ListMarketsGetCallback(OAIHttpRequestWorker *worker);
    void apiV2PerformanceStatsGetCallback(OAIHttpRequestWorker *worker);
    void apiV2PredictionsGetCallback(OAIHttpRequestWorker *worker);
    void apiV2PredictionsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2ListFederationsGetSignal(OAI_api_v2_list_federations_get_200_response summary);
    void apiV2ListMarketsGetSignal(OAI_api_v2_list_markets_get_200_response summary);
    void apiV2PerformanceStatsGetSignal(OAI_api_v2_performance_stats_get_200_response summary);
    void apiV2PredictionsGetSignal();
    void apiV2PredictionsIdGetSignal(OAI_api_v2_predictions__id__get_200_response summary);


    void apiV2ListFederationsGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_v2_list_federations_get_200_response summary);
    void apiV2ListMarketsGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_v2_list_markets_get_200_response summary);
    void apiV2PerformanceStatsGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_v2_performance_stats_get_200_response summary);
    void apiV2PredictionsGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV2PredictionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_v2_predictions__id__get_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiV2ListFederationsGetSignalError() instead")
    void apiV2ListFederationsGetSignalE(OAI_api_v2_list_federations_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2ListFederationsGetSignalError(OAI_api_v2_list_federations_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2ListMarketsGetSignalError() instead")
    void apiV2ListMarketsGetSignalE(OAI_api_v2_list_markets_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2ListMarketsGetSignalError(OAI_api_v2_list_markets_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2PerformanceStatsGetSignalError() instead")
    void apiV2PerformanceStatsGetSignalE(OAI_api_v2_performance_stats_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PerformanceStatsGetSignalError(OAI_api_v2_performance_stats_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2PredictionsGetSignalError() instead")
    void apiV2PredictionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PredictionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2PredictionsIdGetSignalError() instead")
    void apiV2PredictionsIdGetSignalE(OAI_api_v2_predictions__id__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PredictionsIdGetSignalError(OAI_api_v2_predictions__id__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2ListFederationsGetSignalErrorFull() instead")
    void apiV2ListFederationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2ListFederationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2ListMarketsGetSignalErrorFull() instead")
    void apiV2ListMarketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2ListMarketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2PerformanceStatsGetSignalErrorFull() instead")
    void apiV2PerformanceStatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PerformanceStatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2PredictionsGetSignalErrorFull() instead")
    void apiV2PredictionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PredictionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2PredictionsIdGetSignalErrorFull() instead")
    void apiV2PredictionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PredictionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
