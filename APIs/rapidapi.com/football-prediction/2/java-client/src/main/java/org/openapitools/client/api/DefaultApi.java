/*
 * Football Prediction API
 * The Football Prediction API allows developers to get predictions for upcoming football (soccer) matches, results for past matches, and performance monitoring for statistical models.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2ListFederationsGet200Response;
import org.openapitools.client.model.ApiV2ListFederationsGet404Response;
import org.openapitools.client.model.ApiV2ListMarketsGet200Response;
import org.openapitools.client.model.ApiV2PerformanceStatsGet200Response;
import org.openapitools.client.model.ApiV2PredictionsIdGet200Response;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2ListFederationsGet
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available federations. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ListFederationsGetCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/list-federations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidApiKey != null) {
            localVarHeaderParams.put("X-RapidApi-Key", localVarApiClient.parameterToString(xRapidApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ListFederationsGetValidateBeforeCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        return apiV2ListFederationsGetCall(xRapidApiKey, _callback);

    }

    /**
     * 
     * Returns an array of all the available federations.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiV2ListFederationsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available federations. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2ListFederationsGet200Response apiV2ListFederationsGet(UUID xRapidApiKey) throws ApiException {
        ApiResponse<ApiV2ListFederationsGet200Response> localVarResp = apiV2ListFederationsGetWithHttpInfo(xRapidApiKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of all the available federations.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiResponse&lt;ApiV2ListFederationsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available federations. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2ListFederationsGet200Response> apiV2ListFederationsGetWithHttpInfo(UUID xRapidApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiV2ListFederationsGetValidateBeforeCall(xRapidApiKey, null);
        Type localVarReturnType = new TypeToken<ApiV2ListFederationsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of all the available federations.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available federations. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ListFederationsGetAsync(UUID xRapidApiKey, final ApiCallback<ApiV2ListFederationsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ListFederationsGetValidateBeforeCall(xRapidApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiV2ListFederationsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2ListMarketsGet
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available markets for the current subscription and all available markets in general. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ListMarketsGetCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/list-markets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidApiKey != null) {
            localVarHeaderParams.put("X-RapidApi-Key", localVarApiClient.parameterToString(xRapidApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ListMarketsGetValidateBeforeCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        return apiV2ListMarketsGetCall(xRapidApiKey, _callback);

    }

    /**
     * 
     * Returns an array of all the supported prediction markets
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiV2ListMarketsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available markets for the current subscription and all available markets in general. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2ListMarketsGet200Response apiV2ListMarketsGet(UUID xRapidApiKey) throws ApiException {
        ApiResponse<ApiV2ListMarketsGet200Response> localVarResp = apiV2ListMarketsGetWithHttpInfo(xRapidApiKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of all the supported prediction markets
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiResponse&lt;ApiV2ListMarketsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available markets for the current subscription and all available markets in general. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2ListMarketsGet200Response> apiV2ListMarketsGetWithHttpInfo(UUID xRapidApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiV2ListMarketsGetValidateBeforeCall(xRapidApiKey, null);
        Type localVarReturnType = new TypeToken<ApiV2ListMarketsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of all the supported prediction markets
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Static response, shows available markets for the current subscription and all available markets in general. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ListMarketsGetAsync(UUID xRapidApiKey, final ApiCallback<ApiV2ListMarketsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ListMarketsGetValidateBeforeCall(xRapidApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiV2ListMarketsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PerformanceStatsGet
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains accuracy and other datails about predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PerformanceStatsGetCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/performance-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidApiKey != null) {
            localVarHeaderParams.put("X-RapidApi-Key", localVarApiClient.parameterToString(xRapidApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PerformanceStatsGetValidateBeforeCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        return apiV2PerformanceStatsGetCall(xRapidApiKey, _callback);

    }

    /**
     * 
     * Returns predictions accuracy in the last 1, 7, 14, 30 days.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiV2PerformanceStatsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains accuracy and other datails about predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2PerformanceStatsGet200Response apiV2PerformanceStatsGet(UUID xRapidApiKey) throws ApiException {
        ApiResponse<ApiV2PerformanceStatsGet200Response> localVarResp = apiV2PerformanceStatsGetWithHttpInfo(xRapidApiKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns predictions accuracy in the last 1, 7, 14, 30 days.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiResponse&lt;ApiV2PerformanceStatsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains accuracy and other datails about predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2PerformanceStatsGet200Response> apiV2PerformanceStatsGetWithHttpInfo(UUID xRapidApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiV2PerformanceStatsGetValidateBeforeCall(xRapidApiKey, null);
        Type localVarReturnType = new TypeToken<ApiV2PerformanceStatsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns predictions accuracy in the last 1, 7, 14, 30 days.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains accuracy and other datails about predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PerformanceStatsGetAsync(UUID xRapidApiKey, final ApiCallback<ApiV2PerformanceStatsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PerformanceStatsGetValidateBeforeCall(xRapidApiKey, _callback);
        Type localVarReturnType = new TypeToken<ApiV2PerformanceStatsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PredictionsGet
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains data array with all predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PredictionsGetCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/predictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidApiKey != null) {
            localVarHeaderParams.put("X-RapidApi-Key", localVarApiClient.parameterToString(xRapidApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PredictionsGetValidateBeforeCall(UUID xRapidApiKey, final ApiCallback _callback) throws ApiException {
        return apiV2PredictionsGetCall(xRapidApiKey, _callback);

    }

    /**
     * 
     * This endpoint returns by default the next non-expired football predictions. URL parameters can be specified to show specific date in the past or future or to filter by federation and prediction market name.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains data array with all predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2PredictionsGet(UUID xRapidApiKey) throws ApiException {
        apiV2PredictionsGetWithHttpInfo(xRapidApiKey);
    }

    /**
     * 
     * This endpoint returns by default the next non-expired football predictions. URL parameters can be specified to show specific date in the past or future or to filter by federation and prediction market name.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains data array with all predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2PredictionsGetWithHttpInfo(UUID xRapidApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiV2PredictionsGetValidateBeforeCall(xRapidApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This endpoint returns by default the next non-expired football predictions. URL parameters can be specified to show specific date in the past or future or to filter by federation and prediction market name.
     * @param xRapidApiKey Your key obtained from https://boggio-analytics.com/fp-api/ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains data array with all predictions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PredictionsGetAsync(UUID xRapidApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PredictionsGetValidateBeforeCall(xRapidApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PredictionsIdGet
     * @param id ID of match (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains all the predictions for a certain event. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PredictionsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/predictions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PredictionsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2PredictionsIdGet(Async)");
        }

        return apiV2PredictionsIdGetCall(id, _callback);

    }

    /**
     * 
     * Returns all predictions available for a match id.
     * @param id ID of match (required)
     * @return ApiV2PredictionsIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains all the predictions for a certain event. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2PredictionsIdGet200Response apiV2PredictionsIdGet(Integer id) throws ApiException {
        ApiResponse<ApiV2PredictionsIdGet200Response> localVarResp = apiV2PredictionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all predictions available for a match id.
     * @param id ID of match (required)
     * @return ApiResponse&lt;ApiV2PredictionsIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains all the predictions for a certain event. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2PredictionsIdGet200Response> apiV2PredictionsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiV2PredictionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiV2PredictionsIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all predictions available for a match id.
     * @param id ID of match (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Good request, returns object that contains all the predictions for a certain event. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bad request, check response for detailed errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PredictionsIdGetAsync(Integer id, final ApiCallback<ApiV2PredictionsIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PredictionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiV2PredictionsIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
