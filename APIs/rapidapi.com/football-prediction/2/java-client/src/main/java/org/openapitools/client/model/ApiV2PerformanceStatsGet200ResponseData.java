/*
 * Football Prediction API
 * The Football Prediction API allows developers to get predictions for upcoming football (soccer) matches, results for past matches, and performance monitoring for statistical models.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiV2PerformanceStatsGet200ResponseDataAccuracy;
import org.openapitools.client.model.ApiV2PerformanceStatsGet200ResponseDataDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV2PerformanceStatsGet200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:57.981204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV2PerformanceStatsGet200ResponseData {
  public static final String SERIALIZED_NAME_ACCURACY = "accuracy";
  @SerializedName(SERIALIZED_NAME_ACCURACY)
  private ApiV2PerformanceStatsGet200ResponseDataAccuracy accuracy;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private ApiV2PerformanceStatsGet200ResponseDataDetails details;

  public static final String SERIALIZED_NAME_MARKET = "market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private String market;

  public ApiV2PerformanceStatsGet200ResponseData() {
  }

  public ApiV2PerformanceStatsGet200ResponseData accuracy(ApiV2PerformanceStatsGet200ResponseDataAccuracy accuracy) {
    this.accuracy = accuracy;
    return this;
  }

  /**
   * Get accuracy
   * @return accuracy
   */
  @javax.annotation.Nullable
  public ApiV2PerformanceStatsGet200ResponseDataAccuracy getAccuracy() {
    return accuracy;
  }

  public void setAccuracy(ApiV2PerformanceStatsGet200ResponseDataAccuracy accuracy) {
    this.accuracy = accuracy;
  }


  public ApiV2PerformanceStatsGet200ResponseData details(ApiV2PerformanceStatsGet200ResponseDataDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public ApiV2PerformanceStatsGet200ResponseDataDetails getDetails() {
    return details;
  }

  public void setDetails(ApiV2PerformanceStatsGet200ResponseDataDetails details) {
    this.details = details;
  }


  public ApiV2PerformanceStatsGet200ResponseData market(String market) {
    this.market = market;
    return this;
  }

  /**
   * Get market
   * @return market
   */
  @javax.annotation.Nullable
  public String getMarket() {
    return market;
  }

  public void setMarket(String market) {
    this.market = market;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV2PerformanceStatsGet200ResponseData apiV2PerformanceStatsGet200ResponseData = (ApiV2PerformanceStatsGet200ResponseData) o;
    return Objects.equals(this.accuracy, apiV2PerformanceStatsGet200ResponseData.accuracy) &&
        Objects.equals(this.details, apiV2PerformanceStatsGet200ResponseData.details) &&
        Objects.equals(this.market, apiV2PerformanceStatsGet200ResponseData.market);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracy, details, market);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV2PerformanceStatsGet200ResponseData {\n");
    sb.append("    accuracy: ").append(toIndentedString(accuracy)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accuracy");
    openapiFields.add("details");
    openapiFields.add("market");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV2PerformanceStatsGet200ResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV2PerformanceStatsGet200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV2PerformanceStatsGet200ResponseData is not found in the empty JSON string", ApiV2PerformanceStatsGet200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV2PerformanceStatsGet200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV2PerformanceStatsGet200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accuracy`
      if (jsonObj.get("accuracy") != null && !jsonObj.get("accuracy").isJsonNull()) {
        ApiV2PerformanceStatsGet200ResponseDataAccuracy.validateJsonElement(jsonObj.get("accuracy"));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        ApiV2PerformanceStatsGet200ResponseDataDetails.validateJsonElement(jsonObj.get("details"));
      }
      if ((jsonObj.get("market") != null && !jsonObj.get("market").isJsonNull()) && !jsonObj.get("market").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `market` to be a primitive type in the JSON string but got `%s`", jsonObj.get("market").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV2PerformanceStatsGet200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV2PerformanceStatsGet200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV2PerformanceStatsGet200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV2PerformanceStatsGet200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV2PerformanceStatsGet200ResponseData>() {
           @Override
           public void write(JsonWriter out, ApiV2PerformanceStatsGet200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV2PerformanceStatsGet200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV2PerformanceStatsGet200ResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV2PerformanceStatsGet200ResponseData
   * @throws IOException if the JSON string is invalid with respect to ApiV2PerformanceStatsGet200ResponseData
   */
  public static ApiV2PerformanceStatsGet200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV2PerformanceStatsGet200ResponseData.class);
  }

  /**
   * Convert an instance of ApiV2PerformanceStatsGet200ResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

