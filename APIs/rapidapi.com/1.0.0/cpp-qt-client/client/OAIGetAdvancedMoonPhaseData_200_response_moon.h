/**
 * Moon API
 * # Moon-API.com Postman Collection  Welcome to the Moon Phase API Postman Collection! This collection contains a set of pre-configured API requests to interact with the Moon Phase API endpoints provided by [moon-api.com](https://moon-api.com). Explore the enchanting world of the moon and its ever-changing phases with ease using this collection.  ## Getting Started  To start using this Postman collection, follow these steps:  1. [Download and install Postman](https://www.postman.com/downloads/) if you haven't already. 2. Import the Moon API Postman Collection into your Postman app. 3. Set your RapidAPI key in the collection's environment variables. 4. Begin making requests to explore the moon phase data and retrieve lunar information.       ## Collection Structure  The Moon-API.com Postman Collection consists of the following requests:  - **Basic Moon Phase**: Retrieve the main moon phase data. - **Advanced Moon Phase**: Get detailed moon phase data based on a specific timezone and coordinates. - **Plain Text Moon Phase**: Get a plain text description of the current moon phase. - **Emoji Moon Phase**: Get the relevant emoji of the current moon phase. - **Lunar Calender**: Get the current year's moon phases in a markdown calender.       ## Environment Variables  The collection uses environment variables to store your RapidAPI key. To use this collection effectively, ensure you set the `X-Rapidapi-Key` variable in the collection's environment with your actual RapidAPI key.  ## How to Use  1. Select the desired request from the Moon API collection. 2. Click on the request to open it. 3. Send the request and view the response to retrieve the moon phase data.       ## Documentation  For more information on the Moon Phase API endpoints and their response formats, refer to the [official Moon API documentation](https://rapidapi.com/MoonAPIcom/api/moon-phase/details). Visit [moon-api.com](https://moon-api.com) to learn more about the Moon Phase API and the services provided.  Happy moon exploration with the Moon Phase API Postman Collection provided by [moon-api.com](https://moon-api.com)!
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAdvancedMoonPhaseData_200_response_moon.h
 *
 * 
 */

#ifndef OAIGetAdvancedMoonPhaseData_200_response_moon_H
#define OAIGetAdvancedMoonPhaseData_200_response_moon_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetAdvancedMoonPhaseData_200_response_moon : public OAIObject {
public:
    OAIGetAdvancedMoonPhaseData_200_response_moon();
    OAIGetAdvancedMoonPhaseData_200_response_moon(QString json);
    ~OAIGetAdvancedMoonPhaseData_200_response_moon() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAgeDays() const;
    void setAgeDays(const double &age_days);
    bool is_age_days_Set() const;
    bool is_age_days_Valid() const;

    QString getEmoji() const;
    void setEmoji(const QString &emoji);
    bool is_emoji_Set() const;
    bool is_emoji_Valid() const;

    QString getIllumination() const;
    void setIllumination(const QString &illumination);
    bool is_illumination_Set() const;
    bool is_illumination_Valid() const;

    QString getLunarCycle() const;
    void setLunarCycle(const QString &lunar_cycle);
    bool is_lunar_cycle_Set() const;
    bool is_lunar_cycle_Valid() const;

    double getMoonAltitude() const;
    void setMoonAltitude(const double &moon_altitude);
    bool is_moon_altitude_Set() const;
    bool is_moon_altitude_Valid() const;

    double getMoonAzimuth() const;
    void setMoonAzimuth(const double &moon_azimuth);
    bool is_moon_azimuth_Set() const;
    bool is_moon_azimuth_Valid() const;

    double getMoonDistance() const;
    void setMoonDistance(const double &moon_distance);
    bool is_moon_distance_Set() const;
    bool is_moon_distance_Valid() const;

    double getMoonParallacticAngle() const;
    void setMoonParallacticAngle(const double &moon_parallactic_angle);
    bool is_moon_parallactic_angle_Set() const;
    bool is_moon_parallactic_angle_Valid() const;

    QString getMoonrise() const;
    void setMoonrise(const QString &moonrise);
    bool is_moonrise_Set() const;
    bool is_moonrise_Valid() const;

    double getMoonriseTimestamp() const;
    void setMoonriseTimestamp(const double &moonrise_timestamp);
    bool is_moonrise_timestamp_Set() const;
    bool is_moonrise_timestamp_Valid() const;

    QString getMoonset() const;
    void setMoonset(const QString &moonset);
    bool is_moonset_Set() const;
    bool is_moonset_Valid() const;

    double getMoonsetTimestamp() const;
    void setMoonsetTimestamp(const double &moonset_timestamp);
    bool is_moonset_timestamp_Set() const;
    bool is_moonset_timestamp_Valid() const;

    QString getPhase() const;
    void setPhase(const QString &phase);
    bool is_phase_Set() const;
    bool is_phase_Valid() const;

    QString getPhaseName() const;
    void setPhaseName(const QString &phase_name);
    bool is_phase_name_Set() const;
    bool is_phase_name_Valid() const;

    QString getStage() const;
    void setStage(const QString &stage);
    bool is_stage_Set() const;
    bool is_stage_Valid() const;

    QString getZodiacSign() const;
    void setZodiacSign(const QString &zodiac_sign);
    bool is_zodiac_sign_Set() const;
    bool is_zodiac_sign_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_age_days;
    bool m_age_days_isSet;
    bool m_age_days_isValid;

    QString m_emoji;
    bool m_emoji_isSet;
    bool m_emoji_isValid;

    QString m_illumination;
    bool m_illumination_isSet;
    bool m_illumination_isValid;

    QString m_lunar_cycle;
    bool m_lunar_cycle_isSet;
    bool m_lunar_cycle_isValid;

    double m_moon_altitude;
    bool m_moon_altitude_isSet;
    bool m_moon_altitude_isValid;

    double m_moon_azimuth;
    bool m_moon_azimuth_isSet;
    bool m_moon_azimuth_isValid;

    double m_moon_distance;
    bool m_moon_distance_isSet;
    bool m_moon_distance_isValid;

    double m_moon_parallactic_angle;
    bool m_moon_parallactic_angle_isSet;
    bool m_moon_parallactic_angle_isValid;

    QString m_moonrise;
    bool m_moonrise_isSet;
    bool m_moonrise_isValid;

    double m_moonrise_timestamp;
    bool m_moonrise_timestamp_isSet;
    bool m_moonrise_timestamp_isValid;

    QString m_moonset;
    bool m_moonset_isSet;
    bool m_moonset_isValid;

    double m_moonset_timestamp;
    bool m_moonset_timestamp_isSet;
    bool m_moonset_timestamp_isValid;

    QString m_phase;
    bool m_phase_isSet;
    bool m_phase_isValid;

    QString m_phase_name;
    bool m_phase_name_isSet;
    bool m_phase_name_isValid;

    QString m_stage;
    bool m_stage_isSet;
    bool m_stage_isValid;

    QString m_zodiac_sign;
    bool m_zodiac_sign_isSet;
    bool m_zodiac_sign_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAdvancedMoonPhaseData_200_response_moon)

#endif // OAIGetAdvancedMoonPhaseData_200_response_moon_H
