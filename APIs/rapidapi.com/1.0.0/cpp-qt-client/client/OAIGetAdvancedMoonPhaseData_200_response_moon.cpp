/**
 * Moon API
 * # Moon-API.com Postman Collection  Welcome to the Moon Phase API Postman Collection! This collection contains a set of pre-configured API requests to interact with the Moon Phase API endpoints provided by [moon-api.com](https://moon-api.com). Explore the enchanting world of the moon and its ever-changing phases with ease using this collection.  ## Getting Started  To start using this Postman collection, follow these steps:  1. [Download and install Postman](https://www.postman.com/downloads/) if you haven't already. 2. Import the Moon API Postman Collection into your Postman app. 3. Set your RapidAPI key in the collection's environment variables. 4. Begin making requests to explore the moon phase data and retrieve lunar information.       ## Collection Structure  The Moon-API.com Postman Collection consists of the following requests:  - **Basic Moon Phase**: Retrieve the main moon phase data. - **Advanced Moon Phase**: Get detailed moon phase data based on a specific timezone and coordinates. - **Plain Text Moon Phase**: Get a plain text description of the current moon phase. - **Emoji Moon Phase**: Get the relevant emoji of the current moon phase. - **Lunar Calender**: Get the current year's moon phases in a markdown calender.       ## Environment Variables  The collection uses environment variables to store your RapidAPI key. To use this collection effectively, ensure you set the `X-Rapidapi-Key` variable in the collection's environment with your actual RapidAPI key.  ## How to Use  1. Select the desired request from the Moon API collection. 2. Click on the request to open it. 3. Send the request and view the response to retrieve the moon phase data.       ## Documentation  For more information on the Moon Phase API endpoints and their response formats, refer to the [official Moon API documentation](https://rapidapi.com/MoonAPIcom/api/moon-phase/details). Visit [moon-api.com](https://moon-api.com) to learn more about the Moon Phase API and the services provided.  Happy moon exploration with the Moon Phase API Postman Collection provided by [moon-api.com](https://moon-api.com)!
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAdvancedMoonPhaseData_200_response_moon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAdvancedMoonPhaseData_200_response_moon::OAIGetAdvancedMoonPhaseData_200_response_moon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAdvancedMoonPhaseData_200_response_moon::OAIGetAdvancedMoonPhaseData_200_response_moon() {
    this->initializeModel();
}

OAIGetAdvancedMoonPhaseData_200_response_moon::~OAIGetAdvancedMoonPhaseData_200_response_moon() {}

void OAIGetAdvancedMoonPhaseData_200_response_moon::initializeModel() {

    m_age_days_isSet = false;
    m_age_days_isValid = false;

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_illumination_isSet = false;
    m_illumination_isValid = false;

    m_lunar_cycle_isSet = false;
    m_lunar_cycle_isValid = false;

    m_moon_altitude_isSet = false;
    m_moon_altitude_isValid = false;

    m_moon_azimuth_isSet = false;
    m_moon_azimuth_isValid = false;

    m_moon_distance_isSet = false;
    m_moon_distance_isValid = false;

    m_moon_parallactic_angle_isSet = false;
    m_moon_parallactic_angle_isValid = false;

    m_moonrise_isSet = false;
    m_moonrise_isValid = false;

    m_moonrise_timestamp_isSet = false;
    m_moonrise_timestamp_isValid = false;

    m_moonset_isSet = false;
    m_moonset_isValid = false;

    m_moonset_timestamp_isSet = false;
    m_moonset_timestamp_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_phase_name_isSet = false;
    m_phase_name_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_zodiac_sign_isSet = false;
    m_zodiac_sign_isValid = false;
}

void OAIGetAdvancedMoonPhaseData_200_response_moon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAdvancedMoonPhaseData_200_response_moon::fromJsonObject(QJsonObject json) {

    m_age_days_isValid = ::OpenAPI::fromJsonValue(m_age_days, json[QString("age_days")]);
    m_age_days_isSet = !json[QString("age_days")].isNull() && m_age_days_isValid;

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_illumination_isValid = ::OpenAPI::fromJsonValue(m_illumination, json[QString("illumination")]);
    m_illumination_isSet = !json[QString("illumination")].isNull() && m_illumination_isValid;

    m_lunar_cycle_isValid = ::OpenAPI::fromJsonValue(m_lunar_cycle, json[QString("lunar_cycle")]);
    m_lunar_cycle_isSet = !json[QString("lunar_cycle")].isNull() && m_lunar_cycle_isValid;

    m_moon_altitude_isValid = ::OpenAPI::fromJsonValue(m_moon_altitude, json[QString("moon_altitude")]);
    m_moon_altitude_isSet = !json[QString("moon_altitude")].isNull() && m_moon_altitude_isValid;

    m_moon_azimuth_isValid = ::OpenAPI::fromJsonValue(m_moon_azimuth, json[QString("moon_azimuth")]);
    m_moon_azimuth_isSet = !json[QString("moon_azimuth")].isNull() && m_moon_azimuth_isValid;

    m_moon_distance_isValid = ::OpenAPI::fromJsonValue(m_moon_distance, json[QString("moon_distance")]);
    m_moon_distance_isSet = !json[QString("moon_distance")].isNull() && m_moon_distance_isValid;

    m_moon_parallactic_angle_isValid = ::OpenAPI::fromJsonValue(m_moon_parallactic_angle, json[QString("moon_parallactic_angle")]);
    m_moon_parallactic_angle_isSet = !json[QString("moon_parallactic_angle")].isNull() && m_moon_parallactic_angle_isValid;

    m_moonrise_isValid = ::OpenAPI::fromJsonValue(m_moonrise, json[QString("moonrise")]);
    m_moonrise_isSet = !json[QString("moonrise")].isNull() && m_moonrise_isValid;

    m_moonrise_timestamp_isValid = ::OpenAPI::fromJsonValue(m_moonrise_timestamp, json[QString("moonrise_timestamp")]);
    m_moonrise_timestamp_isSet = !json[QString("moonrise_timestamp")].isNull() && m_moonrise_timestamp_isValid;

    m_moonset_isValid = ::OpenAPI::fromJsonValue(m_moonset, json[QString("moonset")]);
    m_moonset_isSet = !json[QString("moonset")].isNull() && m_moonset_isValid;

    m_moonset_timestamp_isValid = ::OpenAPI::fromJsonValue(m_moonset_timestamp, json[QString("moonset_timestamp")]);
    m_moonset_timestamp_isSet = !json[QString("moonset_timestamp")].isNull() && m_moonset_timestamp_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_phase_name_isValid = ::OpenAPI::fromJsonValue(m_phase_name, json[QString("phase_name")]);
    m_phase_name_isSet = !json[QString("phase_name")].isNull() && m_phase_name_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_zodiac_sign_isValid = ::OpenAPI::fromJsonValue(m_zodiac_sign, json[QString("zodiac_sign")]);
    m_zodiac_sign_isSet = !json[QString("zodiac_sign")].isNull() && m_zodiac_sign_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAdvancedMoonPhaseData_200_response_moon::asJsonObject() const {
    QJsonObject obj;
    if (m_age_days_isSet) {
        obj.insert(QString("age_days"), ::OpenAPI::toJsonValue(m_age_days));
    }
    if (m_emoji_isSet) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_illumination_isSet) {
        obj.insert(QString("illumination"), ::OpenAPI::toJsonValue(m_illumination));
    }
    if (m_lunar_cycle_isSet) {
        obj.insert(QString("lunar_cycle"), ::OpenAPI::toJsonValue(m_lunar_cycle));
    }
    if (m_moon_altitude_isSet) {
        obj.insert(QString("moon_altitude"), ::OpenAPI::toJsonValue(m_moon_altitude));
    }
    if (m_moon_azimuth_isSet) {
        obj.insert(QString("moon_azimuth"), ::OpenAPI::toJsonValue(m_moon_azimuth));
    }
    if (m_moon_distance_isSet) {
        obj.insert(QString("moon_distance"), ::OpenAPI::toJsonValue(m_moon_distance));
    }
    if (m_moon_parallactic_angle_isSet) {
        obj.insert(QString("moon_parallactic_angle"), ::OpenAPI::toJsonValue(m_moon_parallactic_angle));
    }
    if (m_moonrise_isSet) {
        obj.insert(QString("moonrise"), ::OpenAPI::toJsonValue(m_moonrise));
    }
    if (m_moonrise_timestamp_isSet) {
        obj.insert(QString("moonrise_timestamp"), ::OpenAPI::toJsonValue(m_moonrise_timestamp));
    }
    if (m_moonset_isSet) {
        obj.insert(QString("moonset"), ::OpenAPI::toJsonValue(m_moonset));
    }
    if (m_moonset_timestamp_isSet) {
        obj.insert(QString("moonset_timestamp"), ::OpenAPI::toJsonValue(m_moonset_timestamp));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_phase_name_isSet) {
        obj.insert(QString("phase_name"), ::OpenAPI::toJsonValue(m_phase_name));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_zodiac_sign_isSet) {
        obj.insert(QString("zodiac_sign"), ::OpenAPI::toJsonValue(m_zodiac_sign));
    }
    return obj;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getAgeDays() const {
    return m_age_days;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setAgeDays(const double &age_days) {
    m_age_days = age_days;
    m_age_days_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_age_days_Set() const{
    return m_age_days_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_age_days_Valid() const{
    return m_age_days_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getEmoji() const {
    return m_emoji;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setEmoji(const QString &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_emoji_Valid() const{
    return m_emoji_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getIllumination() const {
    return m_illumination;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setIllumination(const QString &illumination) {
    m_illumination = illumination;
    m_illumination_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_illumination_Set() const{
    return m_illumination_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_illumination_Valid() const{
    return m_illumination_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getLunarCycle() const {
    return m_lunar_cycle;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setLunarCycle(const QString &lunar_cycle) {
    m_lunar_cycle = lunar_cycle;
    m_lunar_cycle_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_lunar_cycle_Set() const{
    return m_lunar_cycle_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_lunar_cycle_Valid() const{
    return m_lunar_cycle_isValid;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonAltitude() const {
    return m_moon_altitude;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonAltitude(const double &moon_altitude) {
    m_moon_altitude = moon_altitude;
    m_moon_altitude_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_altitude_Set() const{
    return m_moon_altitude_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_altitude_Valid() const{
    return m_moon_altitude_isValid;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonAzimuth() const {
    return m_moon_azimuth;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonAzimuth(const double &moon_azimuth) {
    m_moon_azimuth = moon_azimuth;
    m_moon_azimuth_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_azimuth_Set() const{
    return m_moon_azimuth_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_azimuth_Valid() const{
    return m_moon_azimuth_isValid;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonDistance() const {
    return m_moon_distance;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonDistance(const double &moon_distance) {
    m_moon_distance = moon_distance;
    m_moon_distance_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_distance_Set() const{
    return m_moon_distance_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_distance_Valid() const{
    return m_moon_distance_isValid;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonParallacticAngle() const {
    return m_moon_parallactic_angle;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonParallacticAngle(const double &moon_parallactic_angle) {
    m_moon_parallactic_angle = moon_parallactic_angle;
    m_moon_parallactic_angle_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_parallactic_angle_Set() const{
    return m_moon_parallactic_angle_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moon_parallactic_angle_Valid() const{
    return m_moon_parallactic_angle_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonrise() const {
    return m_moonrise;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonrise(const QString &moonrise) {
    m_moonrise = moonrise;
    m_moonrise_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonrise_Set() const{
    return m_moonrise_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonrise_Valid() const{
    return m_moonrise_isValid;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonriseTimestamp() const {
    return m_moonrise_timestamp;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonriseTimestamp(const double &moonrise_timestamp) {
    m_moonrise_timestamp = moonrise_timestamp;
    m_moonrise_timestamp_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonrise_timestamp_Set() const{
    return m_moonrise_timestamp_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonrise_timestamp_Valid() const{
    return m_moonrise_timestamp_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonset() const {
    return m_moonset;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonset(const QString &moonset) {
    m_moonset = moonset;
    m_moonset_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonset_Set() const{
    return m_moonset_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonset_Valid() const{
    return m_moonset_isValid;
}

double OAIGetAdvancedMoonPhaseData_200_response_moon::getMoonsetTimestamp() const {
    return m_moonset_timestamp;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setMoonsetTimestamp(const double &moonset_timestamp) {
    m_moonset_timestamp = moonset_timestamp;
    m_moonset_timestamp_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonset_timestamp_Set() const{
    return m_moonset_timestamp_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_moonset_timestamp_Valid() const{
    return m_moonset_timestamp_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getPhase() const {
    return m_phase;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setPhase(const QString &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_phase_Valid() const{
    return m_phase_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getPhaseName() const {
    return m_phase_name;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setPhaseName(const QString &phase_name) {
    m_phase_name = phase_name;
    m_phase_name_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_phase_name_Set() const{
    return m_phase_name_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_phase_name_Valid() const{
    return m_phase_name_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getStage() const {
    return m_stage;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_stage_Valid() const{
    return m_stage_isValid;
}

QString OAIGetAdvancedMoonPhaseData_200_response_moon::getZodiacSign() const {
    return m_zodiac_sign;
}
void OAIGetAdvancedMoonPhaseData_200_response_moon::setZodiacSign(const QString &zodiac_sign) {
    m_zodiac_sign = zodiac_sign;
    m_zodiac_sign_isSet = true;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_zodiac_sign_Set() const{
    return m_zodiac_sign_isSet;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::is_zodiac_sign_Valid() const{
    return m_zodiac_sign_isValid;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_illumination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lunar_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moon_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moon_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moon_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moon_parallactic_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moonrise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moonrise_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moonset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moonset_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zodiac_sign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAdvancedMoonPhaseData_200_response_moon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
