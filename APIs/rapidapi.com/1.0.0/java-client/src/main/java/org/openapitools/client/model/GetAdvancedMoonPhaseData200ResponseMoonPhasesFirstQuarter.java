/*
 * Moon API
 * # Moon-API.com Postman Collection  Welcome to the Moon Phase API Postman Collection! This collection contains a set of pre-configured API requests to interact with the Moon Phase API endpoints provided by [moon-api.com](https://moon-api.com). Explore the enchanting world of the moon and its ever-changing phases with ease using this collection.  ## Getting Started  To start using this Postman collection, follow these steps:  1. [Download and install Postman](https://www.postman.com/downloads/) if you haven't already. 2. Import the Moon API Postman Collection into your Postman app. 3. Set your RapidAPI key in the collection's environment variables. 4. Begin making requests to explore the moon phase data and retrieve lunar information.       ## Collection Structure  The Moon-API.com Postman Collection consists of the following requests:  - **Basic Moon Phase**: Retrieve the main moon phase data. - **Advanced Moon Phase**: Get detailed moon phase data based on a specific timezone and coordinates. - **Plain Text Moon Phase**: Get a plain text description of the current moon phase. - **Emoji Moon Phase**: Get the relevant emoji of the current moon phase. - **Lunar Calender**: Get the current year's moon phases in a markdown calender.       ## Environment Variables  The collection uses environment variables to store your RapidAPI key. To use this collection effectively, ensure you set the `X-Rapidapi-Key` variable in the collection's environment with your actual RapidAPI key.  ## How to Use  1. Select the desired request from the Moon API collection. 2. Click on the request to open it. 3. Send the request and view the response to retrieve the moon phase data.       ## Documentation  For more information on the Moon Phase API endpoints and their response formats, refer to the [official Moon API documentation](https://rapidapi.com/MoonAPIcom/api/moon-phase/details). Visit [moon-api.com](https://moon-api.com) to learn more about the Moon Phase API and the services provided.  Happy moon exploration with the Moon Phase API Postman Collection provided by [moon-api.com](https://moon-api.com)!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterCurrent;
import org.openapitools.client.model.GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterNext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:03.709234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter {
  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterCurrent current;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterNext next;

  public GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter() {
  }

  public GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter current(GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterCurrent current) {
    this.current = current;
    return this;
  }

  /**
   * Get current
   * @return current
   */
  @javax.annotation.Nullable
  public GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterCurrent getCurrent() {
    return current;
  }

  public void setCurrent(GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterCurrent current) {
    this.current = current;
  }


  public GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter next(GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterNext next) {
    this.next = next;
    return this;
  }

  /**
   * Get next
   * @return next
   */
  @javax.annotation.Nullable
  public GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterNext getNext() {
    return next;
  }

  public void setNext(GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterNext next) {
    this.next = next;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter getAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter = (GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter) o;
    return Objects.equals(this.current, getAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.current) &&
        Objects.equals(this.next, getAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.next);
  }

  @Override
  public int hashCode() {
    return Objects.hash(current, next);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter {\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current");
    openapiFields.add("next");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter is not found in the empty JSON string", GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `current`
      if (jsonObj.get("current") != null && !jsonObj.get("current").isJsonNull()) {
        GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterCurrent.validateJsonElement(jsonObj.get("current"));
      }
      // validate the optional field `next`
      if (jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) {
        GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarterNext.validateJsonElement(jsonObj.get("next"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter>() {
           @Override
           public void write(JsonWriter out, GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter
   * @throws IOException if the JSON string is invalid with respect to GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter
   */
  public static GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter.class);
  }

  /**
   * Convert an instance of GetAdvancedMoonPhaseData200ResponseMoonPhasesFirstQuarter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

