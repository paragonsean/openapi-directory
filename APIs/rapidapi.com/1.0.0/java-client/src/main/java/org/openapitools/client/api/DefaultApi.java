/*
 * Moon API
 * # Moon-API.com Postman Collection  Welcome to the Moon Phase API Postman Collection! This collection contains a set of pre-configured API requests to interact with the Moon Phase API endpoints provided by [moon-api.com](https://moon-api.com). Explore the enchanting world of the moon and its ever-changing phases with ease using this collection.  ## Getting Started  To start using this Postman collection, follow these steps:  1. [Download and install Postman](https://www.postman.com/downloads/) if you haven't already. 2. Import the Moon API Postman Collection into your Postman app. 3. Set your RapidAPI key in the collection's environment variables. 4. Begin making requests to explore the moon phase data and retrieve lunar information.       ## Collection Structure  The Moon-API.com Postman Collection consists of the following requests:  - **Basic Moon Phase**: Retrieve the main moon phase data. - **Advanced Moon Phase**: Get detailed moon phase data based on a specific timezone and coordinates. - **Plain Text Moon Phase**: Get a plain text description of the current moon phase. - **Emoji Moon Phase**: Get the relevant emoji of the current moon phase. - **Lunar Calender**: Get the current year's moon phases in a markdown calender.       ## Environment Variables  The collection uses environment variables to store your RapidAPI key. To use this collection effectively, ensure you set the `X-Rapidapi-Key` variable in the collection's environment with your actual RapidAPI key.  ## How to Use  1. Select the desired request from the Moon API collection. 2. Click on the request to open it. 3. Send the request and view the response to retrieve the moon phase data.       ## Documentation  For more information on the Moon Phase API endpoints and their response formats, refer to the [official Moon API documentation](https://rapidapi.com/MoonAPIcom/api/moon-phase/details). Visit [moon-api.com](https://moon-api.com) to learn more about the Moon Phase API and the services provided.  Happy moon exploration with the Moon Phase API Postman Collection provided by [moon-api.com](https://moon-api.com)!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAdvancedMoonPhaseData200Response;
import org.openapitools.client.model.GetBasicMoonPhaseData200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAdvancedMoonPhaseData
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced Moon Phase Data </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedMoonPhaseDataCall(String filters, String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (xRapidapiKey != null) {
            localVarHeaderParams.put("X-Rapidapi-Key", localVarApiClient.parameterToString(xRapidapiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvancedMoonPhaseDataValidateBeforeCall(String filters, String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        return getAdvancedMoonPhaseDataCall(filters, xRapidapiKey, _callback);

    }

    /**
     * Get Advanced Moon Phase Data
     * Get Advanced Moon Phase Data
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @return GetAdvancedMoonPhaseData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced Moon Phase Data </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public GetAdvancedMoonPhaseData200Response getAdvancedMoonPhaseData(String filters, String xRapidapiKey) throws ApiException {
        ApiResponse<GetAdvancedMoonPhaseData200Response> localVarResp = getAdvancedMoonPhaseDataWithHttpInfo(filters, xRapidapiKey);
        return localVarResp.getData();
    }

    /**
     * Get Advanced Moon Phase Data
     * Get Advanced Moon Phase Data
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @return ApiResponse&lt;GetAdvancedMoonPhaseData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced Moon Phase Data </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetAdvancedMoonPhaseData200Response> getAdvancedMoonPhaseDataWithHttpInfo(String filters, String xRapidapiKey) throws ApiException {
        okhttp3.Call localVarCall = getAdvancedMoonPhaseDataValidateBeforeCall(filters, xRapidapiKey, null);
        Type localVarReturnType = new TypeToken<GetAdvancedMoonPhaseData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Advanced Moon Phase Data (asynchronously)
     * Get Advanced Moon Phase Data
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Advanced Moon Phase Data </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedMoonPhaseDataAsync(String filters, String xRapidapiKey, final ApiCallback<GetAdvancedMoonPhaseData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvancedMoonPhaseDataValidateBeforeCall(filters, xRapidapiKey, _callback);
        Type localVarReturnType = new TypeToken<GetAdvancedMoonPhaseData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBasicMoonPhaseData
     * @param xRapidapiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Basic Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getBasicMoonPhaseDataCall(String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidapiKey != null) {
            localVarHeaderParams.put("X-Rapidapi-Key", localVarApiClient.parameterToString(xRapidapiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicMoonPhaseDataValidateBeforeCall(String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        return getBasicMoonPhaseDataCall(xRapidapiKey, _callback);

    }

    /**
     * Get Basic Moon Phase Data
     * Get Basic Moon Phase Data
     * @param xRapidapiKey  (optional)
     * @return GetBasicMoonPhaseData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Basic Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public GetBasicMoonPhaseData200Response getBasicMoonPhaseData(String xRapidapiKey) throws ApiException {
        ApiResponse<GetBasicMoonPhaseData200Response> localVarResp = getBasicMoonPhaseDataWithHttpInfo(xRapidapiKey);
        return localVarResp.getData();
    }

    /**
     * Get Basic Moon Phase Data
     * Get Basic Moon Phase Data
     * @param xRapidapiKey  (optional)
     * @return ApiResponse&lt;GetBasicMoonPhaseData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Basic Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetBasicMoonPhaseData200Response> getBasicMoonPhaseDataWithHttpInfo(String xRapidapiKey) throws ApiException {
        okhttp3.Call localVarCall = getBasicMoonPhaseDataValidateBeforeCall(xRapidapiKey, null);
        Type localVarReturnType = new TypeToken<GetBasicMoonPhaseData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Basic Moon Phase Data (asynchronously)
     * Get Basic Moon Phase Data
     * @param xRapidapiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Basic Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getBasicMoonPhaseDataAsync(String xRapidapiKey, final ApiCallback<GetBasicMoonPhaseData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicMoonPhaseDataValidateBeforeCall(xRapidapiKey, _callback);
        Type localVarReturnType = new TypeToken<GetBasicMoonPhaseData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmojiOfMoonPhase
     * @param xRapidapiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Emoji of Moon Phase </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getEmojiOfMoonPhaseCall(String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emoji";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidapiKey != null) {
            localVarHeaderParams.put("X-Rapidapi-Key", localVarApiClient.parameterToString(xRapidapiKey));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmojiOfMoonPhaseValidateBeforeCall(String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        return getEmojiOfMoonPhaseCall(xRapidapiKey, _callback);

    }

    /**
     * Get Emoji of Moon Phase
     * Get Emoji of Moon Phase
     * @param xRapidapiKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Emoji of Moon Phase </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public void getEmojiOfMoonPhase(String xRapidapiKey) throws ApiException {
        getEmojiOfMoonPhaseWithHttpInfo(xRapidapiKey);
    }

    /**
     * Get Emoji of Moon Phase
     * Get Emoji of Moon Phase
     * @param xRapidapiKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Emoji of Moon Phase </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEmojiOfMoonPhaseWithHttpInfo(String xRapidapiKey) throws ApiException {
        okhttp3.Call localVarCall = getEmojiOfMoonPhaseValidateBeforeCall(xRapidapiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Emoji of Moon Phase (asynchronously)
     * Get Emoji of Moon Phase
     * @param xRapidapiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Emoji of Moon Phase </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getEmojiOfMoonPhaseAsync(String xRapidapiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmojiOfMoonPhaseValidateBeforeCall(xRapidapiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLunarCalendar
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Lunar Calendar </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLunarCalendarCall(String filters, String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (xRapidapiKey != null) {
            localVarHeaderParams.put("X-Rapidapi-Key", localVarApiClient.parameterToString(xRapidapiKey));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLunarCalendarValidateBeforeCall(String filters, String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        return getLunarCalendarCall(filters, xRapidapiKey, _callback);

    }

    /**
     * Get Lunar Calendar
     * Get Lunar Calendar
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Lunar Calendar </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public void getLunarCalendar(String filters, String xRapidapiKey) throws ApiException {
        getLunarCalendarWithHttpInfo(filters, xRapidapiKey);
    }

    /**
     * Get Lunar Calendar
     * Get Lunar Calendar
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Lunar Calendar </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLunarCalendarWithHttpInfo(String filters, String xRapidapiKey) throws ApiException {
        okhttp3.Call localVarCall = getLunarCalendarValidateBeforeCall(filters, xRapidapiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Lunar Calendar (asynchronously)
     * Get Lunar Calendar
     * @param filters Filter data in the Advanced Moon API by specifying the desired fields using the &#x60;filters&#x60; parameter in the request. Include a comma-separated list of keys to retrieve customized data, allowing you to fetch specific moon phase information and related details. (optional)
     * @param xRapidapiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Lunar Calendar </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Transfer-Encoding -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLunarCalendarAsync(String filters, String xRapidapiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLunarCalendarValidateBeforeCall(filters, xRapidapiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlainTextMoonPhaseData
     * @param xRapidapiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Plain Text Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPlainTextMoonPhaseDataCall(String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plain-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRapidapiKey != null) {
            localVarHeaderParams.put("X-Rapidapi-Key", localVarApiClient.parameterToString(xRapidapiKey));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlainTextMoonPhaseDataValidateBeforeCall(String xRapidapiKey, final ApiCallback _callback) throws ApiException {
        return getPlainTextMoonPhaseDataCall(xRapidapiKey, _callback);

    }

    /**
     * Get Plain Text Moon Phase Data
     * Get Plain Text Moon Phase Data
     * @param xRapidapiKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Plain Text Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public void getPlainTextMoonPhaseData(String xRapidapiKey) throws ApiException {
        getPlainTextMoonPhaseDataWithHttpInfo(xRapidapiKey);
    }

    /**
     * Get Plain Text Moon Phase Data
     * Get Plain Text Moon Phase Data
     * @param xRapidapiKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Plain Text Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPlainTextMoonPhaseDataWithHttpInfo(String xRapidapiKey) throws ApiException {
        okhttp3.Call localVarCall = getPlainTextMoonPhaseDataValidateBeforeCall(xRapidapiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Plain Text Moon Phase Data (asynchronously)
     * Get Plain Text Moon Phase Data
     * @param xRapidapiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Plain Text Moon Phase Data </td><td>  * Access-Control-Allow-Origin -  <br>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Tk -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Cache -  <br>  * X-RapidAPI-Region -  <br>  * X-RapidAPI-Version -  <br>  * alt-svc -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPlainTextMoonPhaseDataAsync(String xRapidapiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlainTextMoonPhaseDataValidateBeforeCall(xRapidapiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
