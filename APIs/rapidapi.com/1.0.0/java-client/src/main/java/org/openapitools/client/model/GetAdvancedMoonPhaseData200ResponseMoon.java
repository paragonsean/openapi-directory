/*
 * Moon API
 * # Moon-API.com Postman Collection  Welcome to the Moon Phase API Postman Collection! This collection contains a set of pre-configured API requests to interact with the Moon Phase API endpoints provided by [moon-api.com](https://moon-api.com). Explore the enchanting world of the moon and its ever-changing phases with ease using this collection.  ## Getting Started  To start using this Postman collection, follow these steps:  1. [Download and install Postman](https://www.postman.com/downloads/) if you haven't already. 2. Import the Moon API Postman Collection into your Postman app. 3. Set your RapidAPI key in the collection's environment variables. 4. Begin making requests to explore the moon phase data and retrieve lunar information.       ## Collection Structure  The Moon-API.com Postman Collection consists of the following requests:  - **Basic Moon Phase**: Retrieve the main moon phase data. - **Advanced Moon Phase**: Get detailed moon phase data based on a specific timezone and coordinates. - **Plain Text Moon Phase**: Get a plain text description of the current moon phase. - **Emoji Moon Phase**: Get the relevant emoji of the current moon phase. - **Lunar Calender**: Get the current year's moon phases in a markdown calender.       ## Environment Variables  The collection uses environment variables to store your RapidAPI key. To use this collection effectively, ensure you set the `X-Rapidapi-Key` variable in the collection's environment with your actual RapidAPI key.  ## How to Use  1. Select the desired request from the Moon API collection. 2. Click on the request to open it. 3. Send the request and view the response to retrieve the moon phase data.       ## Documentation  For more information on the Moon Phase API endpoints and their response formats, refer to the [official Moon API documentation](https://rapidapi.com/MoonAPIcom/api/moon-phase/details). Visit [moon-api.com](https://moon-api.com) to learn more about the Moon Phase API and the services provided.  Happy moon exploration with the Moon Phase API Postman Collection provided by [moon-api.com](https://moon-api.com)!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAdvancedMoonPhaseData200ResponseMoon
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:03.709234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAdvancedMoonPhaseData200ResponseMoon {
  public static final String SERIALIZED_NAME_AGE_DAYS = "age_days";
  @SerializedName(SERIALIZED_NAME_AGE_DAYS)
  private BigDecimal ageDays;

  public static final String SERIALIZED_NAME_EMOJI = "emoji";
  @SerializedName(SERIALIZED_NAME_EMOJI)
  private String emoji;

  public static final String SERIALIZED_NAME_ILLUMINATION = "illumination";
  @SerializedName(SERIALIZED_NAME_ILLUMINATION)
  private String illumination;

  public static final String SERIALIZED_NAME_LUNAR_CYCLE = "lunar_cycle";
  @SerializedName(SERIALIZED_NAME_LUNAR_CYCLE)
  private String lunarCycle;

  public static final String SERIALIZED_NAME_MOON_ALTITUDE = "moon_altitude";
  @SerializedName(SERIALIZED_NAME_MOON_ALTITUDE)
  private BigDecimal moonAltitude;

  public static final String SERIALIZED_NAME_MOON_AZIMUTH = "moon_azimuth";
  @SerializedName(SERIALIZED_NAME_MOON_AZIMUTH)
  private BigDecimal moonAzimuth;

  public static final String SERIALIZED_NAME_MOON_DISTANCE = "moon_distance";
  @SerializedName(SERIALIZED_NAME_MOON_DISTANCE)
  private BigDecimal moonDistance;

  public static final String SERIALIZED_NAME_MOON_PARALLACTIC_ANGLE = "moon_parallactic_angle";
  @SerializedName(SERIALIZED_NAME_MOON_PARALLACTIC_ANGLE)
  private BigDecimal moonParallacticAngle;

  public static final String SERIALIZED_NAME_MOONRISE = "moonrise";
  @SerializedName(SERIALIZED_NAME_MOONRISE)
  private String moonrise;

  public static final String SERIALIZED_NAME_MOONRISE_TIMESTAMP = "moonrise_timestamp";
  @SerializedName(SERIALIZED_NAME_MOONRISE_TIMESTAMP)
  private BigDecimal moonriseTimestamp;

  public static final String SERIALIZED_NAME_MOONSET = "moonset";
  @SerializedName(SERIALIZED_NAME_MOONSET)
  private String moonset;

  public static final String SERIALIZED_NAME_MOONSET_TIMESTAMP = "moonset_timestamp";
  @SerializedName(SERIALIZED_NAME_MOONSET_TIMESTAMP)
  private BigDecimal moonsetTimestamp;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;

  public static final String SERIALIZED_NAME_PHASE_NAME = "phase_name";
  @SerializedName(SERIALIZED_NAME_PHASE_NAME)
  private String phaseName;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private String stage;

  public static final String SERIALIZED_NAME_ZODIAC_SIGN = "zodiac_sign";
  @SerializedName(SERIALIZED_NAME_ZODIAC_SIGN)
  private String zodiacSign;

  public GetAdvancedMoonPhaseData200ResponseMoon() {
  }

  public GetAdvancedMoonPhaseData200ResponseMoon ageDays(BigDecimal ageDays) {
    this.ageDays = ageDays;
    return this;
  }

  /**
   * Get ageDays
   * @return ageDays
   */
  @javax.annotation.Nullable
  public BigDecimal getAgeDays() {
    return ageDays;
  }

  public void setAgeDays(BigDecimal ageDays) {
    this.ageDays = ageDays;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon emoji(String emoji) {
    this.emoji = emoji;
    return this;
  }

  /**
   * Get emoji
   * @return emoji
   */
  @javax.annotation.Nullable
  public String getEmoji() {
    return emoji;
  }

  public void setEmoji(String emoji) {
    this.emoji = emoji;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon illumination(String illumination) {
    this.illumination = illumination;
    return this;
  }

  /**
   * Get illumination
   * @return illumination
   */
  @javax.annotation.Nullable
  public String getIllumination() {
    return illumination;
  }

  public void setIllumination(String illumination) {
    this.illumination = illumination;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon lunarCycle(String lunarCycle) {
    this.lunarCycle = lunarCycle;
    return this;
  }

  /**
   * Get lunarCycle
   * @return lunarCycle
   */
  @javax.annotation.Nullable
  public String getLunarCycle() {
    return lunarCycle;
  }

  public void setLunarCycle(String lunarCycle) {
    this.lunarCycle = lunarCycle;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonAltitude(BigDecimal moonAltitude) {
    this.moonAltitude = moonAltitude;
    return this;
  }

  /**
   * Get moonAltitude
   * @return moonAltitude
   */
  @javax.annotation.Nullable
  public BigDecimal getMoonAltitude() {
    return moonAltitude;
  }

  public void setMoonAltitude(BigDecimal moonAltitude) {
    this.moonAltitude = moonAltitude;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonAzimuth(BigDecimal moonAzimuth) {
    this.moonAzimuth = moonAzimuth;
    return this;
  }

  /**
   * Get moonAzimuth
   * @return moonAzimuth
   */
  @javax.annotation.Nullable
  public BigDecimal getMoonAzimuth() {
    return moonAzimuth;
  }

  public void setMoonAzimuth(BigDecimal moonAzimuth) {
    this.moonAzimuth = moonAzimuth;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonDistance(BigDecimal moonDistance) {
    this.moonDistance = moonDistance;
    return this;
  }

  /**
   * Get moonDistance
   * @return moonDistance
   */
  @javax.annotation.Nullable
  public BigDecimal getMoonDistance() {
    return moonDistance;
  }

  public void setMoonDistance(BigDecimal moonDistance) {
    this.moonDistance = moonDistance;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonParallacticAngle(BigDecimal moonParallacticAngle) {
    this.moonParallacticAngle = moonParallacticAngle;
    return this;
  }

  /**
   * Get moonParallacticAngle
   * @return moonParallacticAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getMoonParallacticAngle() {
    return moonParallacticAngle;
  }

  public void setMoonParallacticAngle(BigDecimal moonParallacticAngle) {
    this.moonParallacticAngle = moonParallacticAngle;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonrise(String moonrise) {
    this.moonrise = moonrise;
    return this;
  }

  /**
   * Get moonrise
   * @return moonrise
   */
  @javax.annotation.Nullable
  public String getMoonrise() {
    return moonrise;
  }

  public void setMoonrise(String moonrise) {
    this.moonrise = moonrise;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonriseTimestamp(BigDecimal moonriseTimestamp) {
    this.moonriseTimestamp = moonriseTimestamp;
    return this;
  }

  /**
   * Get moonriseTimestamp
   * @return moonriseTimestamp
   */
  @javax.annotation.Nullable
  public BigDecimal getMoonriseTimestamp() {
    return moonriseTimestamp;
  }

  public void setMoonriseTimestamp(BigDecimal moonriseTimestamp) {
    this.moonriseTimestamp = moonriseTimestamp;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonset(String moonset) {
    this.moonset = moonset;
    return this;
  }

  /**
   * Get moonset
   * @return moonset
   */
  @javax.annotation.Nullable
  public String getMoonset() {
    return moonset;
  }

  public void setMoonset(String moonset) {
    this.moonset = moonset;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon moonsetTimestamp(BigDecimal moonsetTimestamp) {
    this.moonsetTimestamp = moonsetTimestamp;
    return this;
  }

  /**
   * Get moonsetTimestamp
   * @return moonsetTimestamp
   */
  @javax.annotation.Nullable
  public BigDecimal getMoonsetTimestamp() {
    return moonsetTimestamp;
  }

  public void setMoonsetTimestamp(BigDecimal moonsetTimestamp) {
    this.moonsetTimestamp = moonsetTimestamp;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon phase(String phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon phaseName(String phaseName) {
    this.phaseName = phaseName;
    return this;
  }

  /**
   * Get phaseName
   * @return phaseName
   */
  @javax.annotation.Nullable
  public String getPhaseName() {
    return phaseName;
  }

  public void setPhaseName(String phaseName) {
    this.phaseName = phaseName;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon stage(String stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Get stage
   * @return stage
   */
  @javax.annotation.Nullable
  public String getStage() {
    return stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }


  public GetAdvancedMoonPhaseData200ResponseMoon zodiacSign(String zodiacSign) {
    this.zodiacSign = zodiacSign;
    return this;
  }

  /**
   * Get zodiacSign
   * @return zodiacSign
   */
  @javax.annotation.Nullable
  public String getZodiacSign() {
    return zodiacSign;
  }

  public void setZodiacSign(String zodiacSign) {
    this.zodiacSign = zodiacSign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAdvancedMoonPhaseData200ResponseMoon getAdvancedMoonPhaseData200ResponseMoon = (GetAdvancedMoonPhaseData200ResponseMoon) o;
    return Objects.equals(this.ageDays, getAdvancedMoonPhaseData200ResponseMoon.ageDays) &&
        Objects.equals(this.emoji, getAdvancedMoonPhaseData200ResponseMoon.emoji) &&
        Objects.equals(this.illumination, getAdvancedMoonPhaseData200ResponseMoon.illumination) &&
        Objects.equals(this.lunarCycle, getAdvancedMoonPhaseData200ResponseMoon.lunarCycle) &&
        Objects.equals(this.moonAltitude, getAdvancedMoonPhaseData200ResponseMoon.moonAltitude) &&
        Objects.equals(this.moonAzimuth, getAdvancedMoonPhaseData200ResponseMoon.moonAzimuth) &&
        Objects.equals(this.moonDistance, getAdvancedMoonPhaseData200ResponseMoon.moonDistance) &&
        Objects.equals(this.moonParallacticAngle, getAdvancedMoonPhaseData200ResponseMoon.moonParallacticAngle) &&
        Objects.equals(this.moonrise, getAdvancedMoonPhaseData200ResponseMoon.moonrise) &&
        Objects.equals(this.moonriseTimestamp, getAdvancedMoonPhaseData200ResponseMoon.moonriseTimestamp) &&
        Objects.equals(this.moonset, getAdvancedMoonPhaseData200ResponseMoon.moonset) &&
        Objects.equals(this.moonsetTimestamp, getAdvancedMoonPhaseData200ResponseMoon.moonsetTimestamp) &&
        Objects.equals(this.phase, getAdvancedMoonPhaseData200ResponseMoon.phase) &&
        Objects.equals(this.phaseName, getAdvancedMoonPhaseData200ResponseMoon.phaseName) &&
        Objects.equals(this.stage, getAdvancedMoonPhaseData200ResponseMoon.stage) &&
        Objects.equals(this.zodiacSign, getAdvancedMoonPhaseData200ResponseMoon.zodiacSign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ageDays, emoji, illumination, lunarCycle, moonAltitude, moonAzimuth, moonDistance, moonParallacticAngle, moonrise, moonriseTimestamp, moonset, moonsetTimestamp, phase, phaseName, stage, zodiacSign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAdvancedMoonPhaseData200ResponseMoon {\n");
    sb.append("    ageDays: ").append(toIndentedString(ageDays)).append("\n");
    sb.append("    emoji: ").append(toIndentedString(emoji)).append("\n");
    sb.append("    illumination: ").append(toIndentedString(illumination)).append("\n");
    sb.append("    lunarCycle: ").append(toIndentedString(lunarCycle)).append("\n");
    sb.append("    moonAltitude: ").append(toIndentedString(moonAltitude)).append("\n");
    sb.append("    moonAzimuth: ").append(toIndentedString(moonAzimuth)).append("\n");
    sb.append("    moonDistance: ").append(toIndentedString(moonDistance)).append("\n");
    sb.append("    moonParallacticAngle: ").append(toIndentedString(moonParallacticAngle)).append("\n");
    sb.append("    moonrise: ").append(toIndentedString(moonrise)).append("\n");
    sb.append("    moonriseTimestamp: ").append(toIndentedString(moonriseTimestamp)).append("\n");
    sb.append("    moonset: ").append(toIndentedString(moonset)).append("\n");
    sb.append("    moonsetTimestamp: ").append(toIndentedString(moonsetTimestamp)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    phaseName: ").append(toIndentedString(phaseName)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    zodiacSign: ").append(toIndentedString(zodiacSign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("age_days");
    openapiFields.add("emoji");
    openapiFields.add("illumination");
    openapiFields.add("lunar_cycle");
    openapiFields.add("moon_altitude");
    openapiFields.add("moon_azimuth");
    openapiFields.add("moon_distance");
    openapiFields.add("moon_parallactic_angle");
    openapiFields.add("moonrise");
    openapiFields.add("moonrise_timestamp");
    openapiFields.add("moonset");
    openapiFields.add("moonset_timestamp");
    openapiFields.add("phase");
    openapiFields.add("phase_name");
    openapiFields.add("stage");
    openapiFields.add("zodiac_sign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAdvancedMoonPhaseData200ResponseMoon
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAdvancedMoonPhaseData200ResponseMoon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAdvancedMoonPhaseData200ResponseMoon is not found in the empty JSON string", GetAdvancedMoonPhaseData200ResponseMoon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAdvancedMoonPhaseData200ResponseMoon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAdvancedMoonPhaseData200ResponseMoon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("emoji") != null && !jsonObj.get("emoji").isJsonNull()) && !jsonObj.get("emoji").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emoji` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emoji").toString()));
      }
      if ((jsonObj.get("illumination") != null && !jsonObj.get("illumination").isJsonNull()) && !jsonObj.get("illumination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `illumination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("illumination").toString()));
      }
      if ((jsonObj.get("lunar_cycle") != null && !jsonObj.get("lunar_cycle").isJsonNull()) && !jsonObj.get("lunar_cycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lunar_cycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lunar_cycle").toString()));
      }
      if ((jsonObj.get("moonrise") != null && !jsonObj.get("moonrise").isJsonNull()) && !jsonObj.get("moonrise").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moonrise` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moonrise").toString()));
      }
      if ((jsonObj.get("moonset") != null && !jsonObj.get("moonset").isJsonNull()) && !jsonObj.get("moonset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moonset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moonset").toString()));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      if ((jsonObj.get("phase_name") != null && !jsonObj.get("phase_name").isJsonNull()) && !jsonObj.get("phase_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase_name").toString()));
      }
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      if ((jsonObj.get("zodiac_sign") != null && !jsonObj.get("zodiac_sign").isJsonNull()) && !jsonObj.get("zodiac_sign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zodiac_sign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zodiac_sign").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAdvancedMoonPhaseData200ResponseMoon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAdvancedMoonPhaseData200ResponseMoon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAdvancedMoonPhaseData200ResponseMoon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAdvancedMoonPhaseData200ResponseMoon.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAdvancedMoonPhaseData200ResponseMoon>() {
           @Override
           public void write(JsonWriter out, GetAdvancedMoonPhaseData200ResponseMoon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAdvancedMoonPhaseData200ResponseMoon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAdvancedMoonPhaseData200ResponseMoon given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAdvancedMoonPhaseData200ResponseMoon
   * @throws IOException if the JSON string is invalid with respect to GetAdvancedMoonPhaseData200ResponseMoon
   */
  public static GetAdvancedMoonPhaseData200ResponseMoon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAdvancedMoonPhaseData200ResponseMoon.class);
  }

  /**
   * Convert an instance of GetAdvancedMoonPhaseData200ResponseMoon to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

