/**
 * DynamicDocs
 * ADVICEment's [DynamicDocs API automates your document generation](https://advicement.io/dynamic-documents-api) and creates dynamic, optimized, interactive PDFs. Write your templates in LaTeX and call the API with JSON data to get your PDFs in seconds.  The template files are stored in your dashboard and can be edited, tested and published online. Document templates can contain dynamic text using logic statements, include tables stretching multiple pages and show great-looking charts based on the underlying data. LaTeX creates crisp, high-quality documents where every detail is well-positioned and styled.  Integrate with ADVICEment DynamicDocs API in minutes and start creating beautiful [dynamic PDF documents](https://advicement.io/dynamic-documents-api) for your needs.  For more information, visit [DynamicDocs API Home page](https://advicement.io/dynamic-documents-api).
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@advicement.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* PDFGeneration service.
* @module api/PDFGenerationApi
* @version 1.0
*/
export default class PDFGenerationApi {

    /**
    * Constructs a new PDFGenerationApi. 
    * @alias module:api/PDFGenerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compile operation.
     * @callback module:api/PDFGenerationApi~compileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compile New Document PDF
     * Compile a PDF document from a specific template
     * @param {String} templateToken The template-token is available in your template settings after publishing your template.
     * @param {String} contentType Should be set to \"application/json\"
     * @param {Object} opts Optional parameters
     * @param {Number} [docUrlExpiresIn] The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.
     * @param {module:model/String} [latexCompiler] The latex-compiler parameter can take the following values:  pdflatex lualatex
     * @param {Number} [latexRuns] The latex-runs is a numerical parameter and can take values of 1, 2 and 3. 
     * @param {String} [mainFileName] The main-file-name is a string parameter which identifies the main file to compile.
     * @param {String} [docFileName] The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.
     * @param {Object.<String, Object>} [body] Post the dynamic data for the template to compile the document PDF.
     * @param {module:api/PDFGenerationApi~compileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    compile(templateToken, contentType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'templateToken' is set
      if (templateToken === undefined || templateToken === null) {
        throw new Error("Missing the required parameter 'templateToken' when calling compile");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling compile");
      }

      let pathParams = {
        'template-token': templateToken
      };
      let queryParams = {
        'doc-url-expires-in': opts['docUrlExpiresIn'],
        'latex-compiler': opts['latexCompiler'],
        'latex-runs ': opts['latexRuns'],
        'main-file-name': opts['mainFileName'],
        'doc-file-name': opts['docFileName']
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['Adv-Security-Token', 'X-RapidAPI-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/templates/{template-token}/compile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
