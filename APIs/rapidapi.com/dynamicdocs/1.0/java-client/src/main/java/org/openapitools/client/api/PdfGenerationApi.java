/*
 * DynamicDocs
 * ADVICEment's [DynamicDocs API automates your document generation](https://advicement.io/dynamic-documents-api) and creates dynamic, optimized, interactive PDFs. Write your templates in LaTeX and call the API with JSON data to get your PDFs in seconds.  The template files are stored in your dashboard and can be edited, tested and published online. Document templates can contain dynamic text using logic statements, include tables stretching multiple pages and show great-looking charts based on the underlying data. LaTeX creates crisp, high-quality documents where every detail is well-positioned and styled.  Integrate with ADVICEment DynamicDocs API in minutes and start creating beautiful [dynamic PDF documents](https://advicement.io/dynamic-documents-api) for your needs.  For more information, visit [DynamicDocs API Home page](https://advicement.io/dynamic-documents-api).
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@advicement.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfGenerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PdfGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PdfGenerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for compile
     * @param templateToken The template-token is available in your template settings after publishing your template. (required)
     * @param contentType Should be set to \&quot;application/json\&quot; (required)
     * @param docUrlExpiresIn The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document. (optional)
     * @param latexCompiler The latex-compiler parameter can take the following values:  pdflatex lualatex (optional)
     * @param latexRuns The latex-runs is a numerical parameter and can take values of 1, 2 and 3.  (optional)
     * @param mainFileName The main-file-name is a string parameter which identifies the main file to compile. (optional)
     * @param docFileName The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required. (optional)
     * @param body Post the dynamic data for the template to compile the document PDF. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Status URL Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compileCall(String templateToken, String contentType, Integer docUrlExpiresIn, String latexCompiler, Integer latexRuns, String mainFileName, String docFileName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{template-token}/compile"
            .replace("{" + "template-token" + "}", localVarApiClient.escapeString(templateToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (docUrlExpiresIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doc-url-expires-in", docUrlExpiresIn));
        }

        if (latexCompiler != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latex-compiler", latexCompiler));
        }

        if (latexRuns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latex-runs ", latexRuns));
        }

        if (mainFileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("main-file-name", mainFileName));
        }

        if (docFileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doc-file-name", docFileName));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Adv-Security-Token", "X-RapidAPI-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compileValidateBeforeCall(String templateToken, String contentType, Integer docUrlExpiresIn, String latexCompiler, Integer latexRuns, String mainFileName, String docFileName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateToken' is set
        if (templateToken == null) {
            throw new ApiException("Missing the required parameter 'templateToken' when calling compile(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling compile(Async)");
        }

        return compileCall(templateToken, contentType, docUrlExpiresIn, latexCompiler, latexRuns, mainFileName, docFileName, body, _callback);

    }

    /**
     * Compile New Document PDF
     * Compile a PDF document from a specific template
     * @param templateToken The template-token is available in your template settings after publishing your template. (required)
     * @param contentType Should be set to \&quot;application/json\&quot; (required)
     * @param docUrlExpiresIn The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document. (optional)
     * @param latexCompiler The latex-compiler parameter can take the following values:  pdflatex lualatex (optional)
     * @param latexRuns The latex-runs is a numerical parameter and can take values of 1, 2 and 3.  (optional)
     * @param mainFileName The main-file-name is a string parameter which identifies the main file to compile. (optional)
     * @param docFileName The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required. (optional)
     * @param body Post the dynamic data for the template to compile the document PDF. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Status URL Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Object compile(String templateToken, String contentType, Integer docUrlExpiresIn, String latexCompiler, Integer latexRuns, String mainFileName, String docFileName, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = compileWithHttpInfo(templateToken, contentType, docUrlExpiresIn, latexCompiler, latexRuns, mainFileName, docFileName, body);
        return localVarResp.getData();
    }

    /**
     * Compile New Document PDF
     * Compile a PDF document from a specific template
     * @param templateToken The template-token is available in your template settings after publishing your template. (required)
     * @param contentType Should be set to \&quot;application/json\&quot; (required)
     * @param docUrlExpiresIn The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document. (optional)
     * @param latexCompiler The latex-compiler parameter can take the following values:  pdflatex lualatex (optional)
     * @param latexRuns The latex-runs is a numerical parameter and can take values of 1, 2 and 3.  (optional)
     * @param mainFileName The main-file-name is a string parameter which identifies the main file to compile. (optional)
     * @param docFileName The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required. (optional)
     * @param body Post the dynamic data for the template to compile the document PDF. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Status URL Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> compileWithHttpInfo(String templateToken, String contentType, Integer docUrlExpiresIn, String latexCompiler, Integer latexRuns, String mainFileName, String docFileName, Object body) throws ApiException {
        okhttp3.Call localVarCall = compileValidateBeforeCall(templateToken, contentType, docUrlExpiresIn, latexCompiler, latexRuns, mainFileName, docFileName, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compile New Document PDF (asynchronously)
     * Compile a PDF document from a specific template
     * @param templateToken The template-token is available in your template settings after publishing your template. (required)
     * @param contentType Should be set to \&quot;application/json\&quot; (required)
     * @param docUrlExpiresIn The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document. (optional)
     * @param latexCompiler The latex-compiler parameter can take the following values:  pdflatex lualatex (optional)
     * @param latexRuns The latex-runs is a numerical parameter and can take values of 1, 2 and 3.  (optional)
     * @param mainFileName The main-file-name is a string parameter which identifies the main file to compile. (optional)
     * @param docFileName The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required. (optional)
     * @param body Post the dynamic data for the template to compile the document PDF. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Status URL Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compileAsync(String templateToken, String contentType, Integer docUrlExpiresIn, String latexCompiler, Integer latexRuns, String mainFileName, String docFileName, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = compileValidateBeforeCall(templateToken, contentType, docUrlExpiresIn, latexCompiler, latexRuns, mainFileName, docFileName, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
