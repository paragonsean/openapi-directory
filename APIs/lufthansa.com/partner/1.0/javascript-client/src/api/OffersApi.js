/**
 * LH Partner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Offers service.
* @module api/OffersApi
* @version 1.0
*/
export default class OffersApi {

    /**
    * Constructs a new OffersApi. 
    * @alias module:api/OffersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allFares operation.
     * @callback module:api/OffersApi~allFaresCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Fares
     * Retrieves all available fares for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
     * @param {String} catalogues Specifies in which catalogue the fares need to be searched (e.g.'4U;OS').
     * @param {String} origin Enter journey origin (e.g 'FRA').
     * @param {String} destination Enter journey destination (e.g 'MAD').
     * @param {String} travelDate Enter journey travel-date (e.g 2016-10-20)
     * @param {Object} opts Optional parameters
     * @param {String} [returnDate] Enter journey return-date (e.g 2016-10-31)'.
     * @param {String} [cabinClass = 'economy')] Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: \"\", \"economy\", \"premium economy\", \"business\", \"first\")
     * @param {String} [travelers] Specifies the type and number of travelers (e.g. '(adult=2;child=2;infant=1)') For LH only (adult=1) possible.
     * @param {String} [fareFamily = 'smart')] Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: \"\", \"basic\", \"smart\", \"best\", \"smartflex\", \"bestflex\")
     * @param {String} [trackingid] Austrian Airlines only - specify the web tracking id to be used in OS Deep link.
     * @param {String} [accept = 'application/json')] Mandatory http header:  application/xml or application/json
     * @param {module:api/OffersApi~allFaresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    allFares(catalogues, origin, destination, travelDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling allFares");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling allFares");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling allFares");
      }
      // verify the required parameter 'travelDate' is set
      if (travelDate === undefined || travelDate === null) {
        throw new Error("Missing the required parameter 'travelDate' when calling allFares");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'origin': origin,
        'destination': destination,
        'travel-date': travelDate,
        'return-date': opts['returnDate'],
        'cabin-class': opts['cabinClass'],
        'travelers': opts['travelers'],
        'fare-family': opts['fareFamily'],
        'trackingid': opts['trackingid']
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/allfares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bestFares operation.
     * @callback module:api/OffersApi~bestFaresCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Best Fares
     * Retrieve best fares for the requested journey across multiple days or multiple months.
     * @param {String} catalogues Search fares from these carriers' catalogues (e.g. '4U;OS;LH')
     * @param {String} origin Journey origin. 3-letter IATA airport code (e.g. 'FRA')
     * @param {String} destination Journey destination. 3-letter IATA airport code (e.g. 'MAD')
     * @param {String} travelDate Journey travel-date (YYYY-MM-DD)
     * @param {String} tripDuration Trip duration in days (e.g. '7')
     * @param {String} range Fare range: 'byday' or 'bymonth' (Acceptable values are: \"byday\", \"bymonth\")
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [cabinClass] Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \"\", \"economy\", \"premium_economy\", \"business\", \"first\")
     * @param {String} [country] Country code of requestor. 2-letter ISO 3166-1 country code (e.g. 'de')
     * @param {String} [trackingid] Austrian Airlines only - specify the web tracking id to be used in OS Deep link.
     * @param {String} [fareFamily] Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \"\", \"basic\", \"smart\", \"best\", \"smartflex\", \"bestflex\")
     * @param {module:api/OffersApi~bestFaresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    bestFares(catalogues, origin, destination, travelDate, tripDuration, range, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling bestFares");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling bestFares");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling bestFares");
      }
      // verify the required parameter 'travelDate' is set
      if (travelDate === undefined || travelDate === null) {
        throw new Error("Missing the required parameter 'travelDate' when calling bestFares");
      }
      // verify the required parameter 'tripDuration' is set
      if (tripDuration === undefined || tripDuration === null) {
        throw new Error("Missing the required parameter 'tripDuration' when calling bestFares");
      }
      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling bestFares");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling bestFares");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'origin': origin,
        'destination': destination,
        'travel-date': travelDate,
        'trip-duration': tripDuration,
        'range': range,
        'cabin-class': opts['cabinClass'],
        'country': opts['country'],
        'trackingid': opts['trackingid'],
        'fare-family': opts['fareFamily']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/bestfares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deepLinks operation.
     * @callback module:api/OffersApi~deepLinksCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deep Links
     * Returns valid deep links for the provided input parameters
     * @param {String} catalogues Carrier for which the deep link will be created (e.g. 'LH')
     * @param {String} trackingid Deep link tracking ID
     * @param {String} country 2-letter ISO 3166-1 country code
     * @param {String} lang 2-letter ISO 3166-1 language code
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [origin] Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')
     * @param {String} [originName] Journey origin airport or city name (e.g. 'frankfurt')
     * @param {String} [destination] Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')
     * @param {String} [destinationName] Journey destination airport or city name (e.g. 'madrid')
     * @param {String} [travelDate] Journey travel-date (YYYY-MM-DD)
     * @param {String} [returnDate] Journey return-date (YYYY-MM-DD)
     * @param {String} [cabinClass] Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \"\", \"economy\", \"premium_economy\", \"business\", \"first\")
     * @param {String} [outboundSegments] Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')
     * @param {String} [returnSegments] Flight segments in the sequence of travel (e.g. 'LH7465;LH431')
     * @param {String} [travelers] Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')
     * @param {String} [fare] Travel fare (e.g. '1341.45')
     * @param {String} [netFare] Travel net fare. Total fare less taxes and charges (e.g. '1140')
     * @param {String} [fareCurrency] Fare currency (e.g. 'EUR')
     * @param {String} [partnerid] Deep link partner id (e.g. '1247')
     * @param {String} [encryptionKey] Deep link encryption-key
     * @param {module:api/OffersApi~deepLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deepLinks(catalogues, trackingid, country, lang, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling deepLinks");
      }
      // verify the required parameter 'trackingid' is set
      if (trackingid === undefined || trackingid === null) {
        throw new Error("Missing the required parameter 'trackingid' when calling deepLinks");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling deepLinks");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling deepLinks");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deepLinks");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'trackingid': trackingid,
        'country': country,
        'lang': lang,
        'origin': opts['origin'],
        'origin-name': opts['originName'],
        'destination': opts['destination'],
        'destination-name': opts['destinationName'],
        'travel-date': opts['travelDate'],
        'return-date': opts['returnDate'],
        'cabin-class': opts['cabinClass'],
        'outbound-segments': opts['outboundSegments'],
        'return-segments': opts['returnSegments'],
        'travelers': opts['travelers'],
        'fare': opts['fare'],
        'net-fare': opts['netFare'],
        'fare-currency': opts['fareCurrency'],
        'partnerid': opts['partnerid'],
        'encryption-key': opts['encryptionKey']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/deeplink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fares operation.
     * @callback module:api/OffersApi~faresCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fares
     * Retrieve all available fares per fare family for a specific Origin & Destination on a given date
     * @param {String} catalogues Search fares from these carriers' catalogues - currently active for Germanwings only  (4U)
     * @param {String} segments Journey details  e.g. (origin=TXL;destination=CGN;travel-date=2016-12-15;return-date=2016-12-20;cabin=Economy)
     * @param {String} carriers Include fares for these carriers e.g. ('4U;LH')
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [travelers] Type and number of travelers e.g. (adult=1;child=1;infant=1)
     * @param {String} [fareTypes = 'basic')] Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \"\", \"basic\", \"smart\", \"best\", \"smartflex\", \"bestflex\")
     * @param {module:api/OffersApi~faresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    fares(catalogues, segments, carriers, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling fares");
      }
      // verify the required parameter 'segments' is set
      if (segments === undefined || segments === null) {
        throw new Error("Missing the required parameter 'segments' when calling fares");
      }
      // verify the required parameter 'carriers' is set
      if (carriers === undefined || carriers === null) {
        throw new Error("Missing the required parameter 'carriers' when calling fares");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling fares");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'segments': segments,
        'carriers': carriers,
        'travelers': opts['travelers'],
        'fare-types': opts['fareTypes']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/fares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the faresSubscriptions operation.
     * @callback module:api/OffersApi~faresSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fares Subscriptions
     * Create a subscription for best price O&D. Receive regular updates on lowest fares
     * @param {String} origin Journey origin. 3-leter IATA airport code (e.g. 'FRA')
     * @param {String} destination Journey destination. 3-letter IATA airport code (e.g. 'MAD')
     * @param {String} cabinClass Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \"\", \"economy\", \"premium_economy\", \"business\", \"first\")
     * @param {String} tripDuration Trip duration in days (e.g. '7')
     * @param {String} email Email Address')
     * @param {String} lang 2-letter ISO 3166-1 language code
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [country] 2-letter ISO 3166-1 country code
     * @param {String} [trackingid] Tracking parameter
     * @param {module:api/OffersApi~faresSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    faresSubscriptions(origin, destination, cabinClass, tripDuration, email, lang, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling faresSubscriptions");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling faresSubscriptions");
      }
      // verify the required parameter 'cabinClass' is set
      if (cabinClass === undefined || cabinClass === null) {
        throw new Error("Missing the required parameter 'cabinClass' when calling faresSubscriptions");
      }
      // verify the required parameter 'tripDuration' is set
      if (tripDuration === undefined || tripDuration === null) {
        throw new Error("Missing the required parameter 'tripDuration' when calling faresSubscriptions");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling faresSubscriptions");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling faresSubscriptions");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling faresSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'origin': origin,
        'destination': destination,
        'cabin-class': cabinClass,
        'trip-duration': tripDuration,
        'email': email,
        'lang': lang,
        'country': opts['country'],
        'trackingid': opts['trackingid']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lHDeepLinksFFP operation.
     * @callback module:api/OffersApi~lHDeepLinksFFPCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LH Deep Links - FFP
     * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
     * @param {String} catalogues Carrier for which the deep link will be created (e.g. 'LH')
     * @param {String} origin Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')
     * @param {String} destination Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')
     * @param {String} travelDate Journey travel-date (YYYY-MM-DD)
     * @param {String} trackingid Deep link tracking ID
     * @param {String} country 2-letter ISO 3166-1 country code
     * @param {String} lang 2-letter ISO 3166-1 language code
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [returnDate] Journey return-date (YYYY-MM-DD)
     * @param {String} [cabinClass] Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \"\", \"economy\", \"premium_economy\", \"business\", \"first\")
     * @param {String} [travelers] Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')
     * @param {String} [partnerid] Deep link partner id (e.g. '1247')
     * @param {String} [encryptionKey] Deep link encryption-key
     * @param {module:api/OffersApi~lHDeepLinksFFPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    lHDeepLinksFFP(catalogues, origin, destination, travelDate, trackingid, country, lang, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'travelDate' is set
      if (travelDate === undefined || travelDate === null) {
        throw new Error("Missing the required parameter 'travelDate' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'trackingid' is set
      if (trackingid === undefined || trackingid === null) {
        throw new Error("Missing the required parameter 'trackingid' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling lHDeepLinksFFP");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling lHDeepLinksFFP");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'origin': origin,
        'destination': destination,
        'travel-date': travelDate,
        'trackingid': trackingid,
        'country': country,
        'lang': lang,
        'return-date': opts['returnDate'],
        'cabin-class': opts['cabinClass'],
        'travelers': opts['travelers'],
        'partnerid': opts['partnerid'],
        'encryption-key': opts['encryptionKey']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/deeplink/ffp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lHDeepLinksITCO operation.
     * @callback module:api/OffersApi~lHDeepLinksITCOCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LH Deep Links - ITCO
     * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
     * @param {String} catalogues Carrier for which the deep link will be created (e.g. 'LH')
     * @param {String} origin Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')
     * @param {String} destination Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')
     * @param {String} travelDate Journey travel-date (YYYY-MM-DD)
     * @param {String} outboundSegments Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')
     * @param {String} fare Travel fare (e.g. '1341.45')
     * @param {String} fareCurrency Fare currency (e.g. 'EUR')
     * @param {String} trackingid Deep link tracking ID
     * @param {String} country 2-letter ISO 3166-1 country code
     * @param {String} lang 2-letter ISO 3166-1 language code
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [returnDate] Journey return-date (YYYY-MM-DD)
     * @param {String} [cabinClass] Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \"\", \"economy\", \"premium_economy\", \"business\", \"first\")
     * @param {String} [returnSegments] Flight segments in the sequence of travel (e.g. 'LH7465;LH431')
     * @param {String} [travelers] Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')
     * @param {String} [netFare] Travel net fare. Total fare less taxes and charges (e.g. '1140')
     * @param {String} [partnerid] Deep link partner id (e.g. '1247')
     * @param {String} [encryptionKey] Deep link encryption-key
     * @param {module:api/OffersApi~lHDeepLinksITCOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    lHDeepLinksITCO(catalogues, origin, destination, travelDate, outboundSegments, fare, fareCurrency, trackingid, country, lang, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'travelDate' is set
      if (travelDate === undefined || travelDate === null) {
        throw new Error("Missing the required parameter 'travelDate' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'outboundSegments' is set
      if (outboundSegments === undefined || outboundSegments === null) {
        throw new Error("Missing the required parameter 'outboundSegments' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'fare' is set
      if (fare === undefined || fare === null) {
        throw new Error("Missing the required parameter 'fare' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'fareCurrency' is set
      if (fareCurrency === undefined || fareCurrency === null) {
        throw new Error("Missing the required parameter 'fareCurrency' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'trackingid' is set
      if (trackingid === undefined || trackingid === null) {
        throw new Error("Missing the required parameter 'trackingid' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling lHDeepLinksITCO");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling lHDeepLinksITCO");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'origin': origin,
        'destination': destination,
        'travel-date': travelDate,
        'outbound-segments': outboundSegments,
        'fare': fare,
        'fare-currency': fareCurrency,
        'trackingid': trackingid,
        'country': country,
        'lang': lang,
        'return-date': opts['returnDate'],
        'cabin-class': opts['cabinClass'],
        'return-segments': opts['returnSegments'],
        'travelers': opts['travelers'],
        'net-fare': opts['netFare'],
        'partnerid': opts['partnerid'],
        'encryption-key': opts['encryptionKey']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/deeplink/itco', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lowestFares operation.
     * @callback module:api/OffersApi~lowestFaresCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lowest Fares
     * Retrieve lowest fare for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS & LH
     * @param {String} catalogues Search fares from these carriers' catalogues e.g. '4U;OS;LH'
     * @param {String} origin Journey origin. 3-letter IATA aiport code e.g. 'FRA'
     * @param {String} destination Journey destination. 3-letter IATA airport code e.g. 'MAD'
     * @param {String} travelDate Journey travel-date YYYY-MM-DD
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [returnDate] Journey return-date - mandatory for OS and LH searches YYYY-MM-DD
     * @param {String} [cabinClass] Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: \"\", \"economy\", \"premium_economy\", \"business\", \"first\")
     * @param {String} [travelers] Type and number of travelers e.g. '(adult=2;child=2;infant=1)'. For LH only (adult=1) possible
     * @param {String} [fareFamily = 'basic')] Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \"\", \"basic\", \"smart\", \"best\", \"smartflex\", \"bestflex\")
     * @param {String} [country] Country code of requestor. 2-letter ISO 3166-1 country code (e.g. 'de')
     * @param {module:api/OffersApi~lowestFaresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    lowestFares(catalogues, origin, destination, travelDate, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'catalogues' is set
      if (catalogues === undefined || catalogues === null) {
        throw new Error("Missing the required parameter 'catalogues' when calling lowestFares");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling lowestFares");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling lowestFares");
      }
      // verify the required parameter 'travelDate' is set
      if (travelDate === undefined || travelDate === null) {
        throw new Error("Missing the required parameter 'travelDate' when calling lowestFares");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling lowestFares");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': catalogues,
        'origin': origin,
        'destination': destination,
        'travel-date': travelDate,
        'return-date': opts['returnDate'],
        'cabin-class': opts['cabinClass'],
        'travelers': opts['travelers'],
        'fare-family': opts['fareFamily'],
        'country': opts['country']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/fares/lowestfares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oNDRoute operation.
     * @callback module:api/OffersApi~oNDRouteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OND Route
     * Returns LH route origin & destination information
     * @param {String} origin Enter either the orgin city or orgin country code (e.g 'FRA' or 'DE'). Enter '*' for all
     * @param {String} destination Enter either the destination city or country code (e.g 'MAD' or 'ES'). Enter '*' for all
     * @param {String} accept Mandatory http header:  application/xml or application/json
     * @param {Object} opts Optional parameters
     * @param {String} [catalogues = 'LH')] Carrier for which the OND will be retrieved (e.g. 'LH')
     * @param {String} [limit] Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
     * @param {String} [offset] Number of records skipped. Defaults to 0
     * @param {module:api/OffersApi~oNDRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    oNDRoute(origin, destination, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling oNDRoute");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling oNDRoute");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling oNDRoute");
      }

      let pathParams = {
        'origin': origin,
        'destination': destination
      };
      let queryParams = {
        'catalogues': opts['catalogues'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/ond/route/{origin}/{destination}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oNDStatus operation.
     * @callback module:api/OffersApi~oNDStatusCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OND Status
     * Returns LH network route status information. Search for recently added or retired routes
     * @param {String} accept Mandatory http header:  application/xml or application/json
     * @param {Object} opts Optional parameters
     * @param {String} [catalogues = 'LH')] Carrier for which the OND will be retrieved (e.g. 'LH')
     * @param {String} [newRoutes] Enter if newly added routes should be returned in the response. (Acceptable values are: \"\", \"true\", \"false\")
     * @param {String} [oldRoutes] Enter if old (deleted) routes should be returned in the response. (Acceptable values are: \"\", \"true\", \"false\")
     * @param {module:api/OffersApi~oNDStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    oNDStatus(accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling oNDStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': opts['catalogues'],
        'new-routes': opts['newRoutes'],
        'old-routes': opts['oldRoutes']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/ond/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topOND operation.
     * @callback module:api/OffersApi~topONDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top OND
     * Returns LH Top routes per country or across all countries
     * @param {String} accept Mandatory http header:  application/xml or application/json
     * @param {Object} opts Optional parameters
     * @param {String} [catalogues = 'LH')] Carrier for which the OND will be retrieved (e.g. 'LH')
     * @param {String} [origin] Enter the origin country code (e.g. 'DE'). Leave empty to search Top OND across all countries
     * @param {module:api/OffersApi~topONDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    topOND(accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling topOND");
      }

      let pathParams = {
      };
      let queryParams = {
        'catalogues': opts['catalogues'],
        'origin': opts['origin']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/ond/top', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
