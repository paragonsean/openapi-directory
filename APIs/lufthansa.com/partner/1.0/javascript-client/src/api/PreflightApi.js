/**
 * LH Partner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Preflight service.
* @module api/PreflightApi
* @version 1.0
*/
export default class PreflightApi {

    /**
    * Constructs a new PreflightApi. 
    * @alias module:api/PreflightApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autoCheckIn operation.
     * @callback module:api/PreflightApi~autoCheckInCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auto Check-In
     * Trigger an automatic check-in given a ticket number. This service is only accessible for LH privileged partners
     * @param {String} ticketnumber Ticket number
     * @param {String} emailAddress Email address
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {module:api/PreflightApi~autoCheckInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    autoCheckIn(ticketnumber, emailAddress, accept, callback) {
      let postBody = null;
      // verify the required parameter 'ticketnumber' is set
      if (ticketnumber === undefined || ticketnumber === null) {
        throw new Error("Missing the required parameter 'ticketnumber' when calling autoCheckIn");
      }
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling autoCheckIn");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling autoCheckIn");
      }

      let pathParams = {
        'ticketnumber': ticketnumber
      };
      let queryParams = {
        'emailAddress': emailAddress
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/preflight/autocheckin/{ticketnumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
