/*
 * LH Partner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OffersApi
 */
@Disabled
public class OffersApiTest {

    private final OffersApi api = new OffersApi();

    /**
     * All Fares
     *
     * Retrieves all available fares for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allFaresTest() throws ApiException {
        String catalogues = null;
        String origin = null;
        String destination = null;
        String travelDate = null;
        String returnDate = null;
        String cabinClass = null;
        String travelers = null;
        String fareFamily = null;
        String trackingid = null;
        String accept = null;
        String response = api.allFares(catalogues, origin, destination, travelDate, returnDate, cabinClass, travelers, fareFamily, trackingid, accept);
        // TODO: test validations
    }

    /**
     * Best Fares
     *
     * Retrieve best fares for the requested journey across multiple days or multiple months.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bestFaresTest() throws ApiException {
        String catalogues = null;
        String origin = null;
        String destination = null;
        String travelDate = null;
        String tripDuration = null;
        String range = null;
        String accept = null;
        String cabinClass = null;
        String country = null;
        String trackingid = null;
        String fareFamily = null;
        String response = api.bestFares(catalogues, origin, destination, travelDate, tripDuration, range, accept, cabinClass, country, trackingid, fareFamily);
        // TODO: test validations
    }

    /**
     * Deep Links
     *
     * Returns valid deep links for the provided input parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deepLinksTest() throws ApiException {
        String catalogues = null;
        String trackingid = null;
        String country = null;
        String lang = null;
        String accept = null;
        String origin = null;
        String originName = null;
        String destination = null;
        String destinationName = null;
        String travelDate = null;
        String returnDate = null;
        String cabinClass = null;
        String outboundSegments = null;
        String returnSegments = null;
        String travelers = null;
        String fare = null;
        String netFare = null;
        String fareCurrency = null;
        String partnerid = null;
        String encryptionKey = null;
        String response = api.deepLinks(catalogues, trackingid, country, lang, accept, origin, originName, destination, destinationName, travelDate, returnDate, cabinClass, outboundSegments, returnSegments, travelers, fare, netFare, fareCurrency, partnerid, encryptionKey);
        // TODO: test validations
    }

    /**
     * Fares
     *
     * Retrieve all available fares per fare family for a specific Origin &amp; Destination on a given date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void faresTest() throws ApiException {
        String catalogues = null;
        String segments = null;
        String carriers = null;
        String accept = null;
        String travelers = null;
        String fareTypes = null;
        String response = api.fares(catalogues, segments, carriers, accept, travelers, fareTypes);
        // TODO: test validations
    }

    /**
     * Fares Subscriptions
     *
     * Create a subscription for best price O&amp;D. Receive regular updates on lowest fares
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void faresSubscriptionsTest() throws ApiException {
        String origin = null;
        String destination = null;
        String cabinClass = null;
        String tripDuration = null;
        String email = null;
        String lang = null;
        String accept = null;
        String country = null;
        String trackingid = null;
        String response = api.faresSubscriptions(origin, destination, cabinClass, tripDuration, email, lang, accept, country, trackingid);
        // TODO: test validations
    }

    /**
     * LH Deep Links - FFP
     *
     * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lHDeepLinksFFPTest() throws ApiException {
        String catalogues = null;
        String origin = null;
        String destination = null;
        String travelDate = null;
        String trackingid = null;
        String country = null;
        String lang = null;
        String accept = null;
        String returnDate = null;
        String cabinClass = null;
        String travelers = null;
        String partnerid = null;
        String encryptionKey = null;
        String response = api.lHDeepLinksFFP(catalogues, origin, destination, travelDate, trackingid, country, lang, accept, returnDate, cabinClass, travelers, partnerid, encryptionKey);
        // TODO: test validations
    }

    /**
     * LH Deep Links - ITCO
     *
     * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lHDeepLinksITCOTest() throws ApiException {
        String catalogues = null;
        String origin = null;
        String destination = null;
        String travelDate = null;
        String outboundSegments = null;
        String fare = null;
        String fareCurrency = null;
        String trackingid = null;
        String country = null;
        String lang = null;
        String accept = null;
        String returnDate = null;
        String cabinClass = null;
        String returnSegments = null;
        String travelers = null;
        String netFare = null;
        String partnerid = null;
        String encryptionKey = null;
        String response = api.lHDeepLinksITCO(catalogues, origin, destination, travelDate, outboundSegments, fare, fareCurrency, trackingid, country, lang, accept, returnDate, cabinClass, returnSegments, travelers, netFare, partnerid, encryptionKey);
        // TODO: test validations
    }

    /**
     * Lowest Fares
     *
     * Retrieve lowest fare for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS &amp; LH
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lowestFaresTest() throws ApiException {
        String catalogues = null;
        String origin = null;
        String destination = null;
        String travelDate = null;
        String accept = null;
        String returnDate = null;
        String cabinClass = null;
        String travelers = null;
        String fareFamily = null;
        String country = null;
        String response = api.lowestFares(catalogues, origin, destination, travelDate, accept, returnDate, cabinClass, travelers, fareFamily, country);
        // TODO: test validations
    }

    /**
     * OND Route
     *
     * Returns LH route origin &amp; destination information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oNDRouteTest() throws ApiException {
        String origin = null;
        String destination = null;
        String accept = null;
        String catalogues = null;
        String limit = null;
        String offset = null;
        String response = api.oNDRoute(origin, destination, accept, catalogues, limit, offset);
        // TODO: test validations
    }

    /**
     * OND Status
     *
     * Returns LH network route status information. Search for recently added or retired routes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oNDStatusTest() throws ApiException {
        String accept = null;
        String catalogues = null;
        String newRoutes = null;
        String oldRoutes = null;
        String response = api.oNDStatus(accept, catalogues, newRoutes, oldRoutes);
        // TODO: test validations
    }

    /**
     * Top OND
     *
     * Returns LH Top routes per country or across all countries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topONDTest() throws ApiException {
        String accept = null;
        String catalogues = null;
        String origin = null;
        String response = api.topOND(accept, catalogues, origin);
        // TODO: test validations
    }

}
