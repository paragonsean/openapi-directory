/*
 * LH Partner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OffersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OffersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OffersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for allFares
     * @param catalogues Specifies in which catalogue the fares need to be searched (e.g.&#39;4U;OS&#39;). (required)
     * @param origin Enter journey origin (e.g &#39;FRA&#39;). (required)
     * @param destination Enter journey destination (e.g &#39;MAD&#39;). (required)
     * @param travelDate Enter journey travel-date (e.g 2016-10-20) (required)
     * @param returnDate Enter journey return-date (e.g 2016-10-31)&#39;. (optional)
     * @param cabinClass Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional, default to economy)
     * @param travelers Specifies the type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) For LH only (adult&#x3D;1) possible. (optional)
     * @param fareFamily Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to smart)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param accept Mandatory http header:  application/xml or application/json (optional, default to application/json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allFaresCall(String catalogues, String origin, String destination, String travelDate, String returnDate, String cabinClass, String travelers, String fareFamily, String trackingid, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/allfares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (travelDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travel-date", travelDate));
        }

        if (returnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-date", returnDate));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (travelers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelers", travelers));
        }

        if (fareFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare-family", fareFamily));
        }

        if (trackingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingid", trackingid));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allFaresValidateBeforeCall(String catalogues, String origin, String destination, String travelDate, String returnDate, String cabinClass, String travelers, String fareFamily, String trackingid, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling allFares(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling allFares(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling allFares(Async)");
        }

        // verify the required parameter 'travelDate' is set
        if (travelDate == null) {
            throw new ApiException("Missing the required parameter 'travelDate' when calling allFares(Async)");
        }

        return allFaresCall(catalogues, origin, destination, travelDate, returnDate, cabinClass, travelers, fareFamily, trackingid, accept, _callback);

    }

    /**
     * All Fares
     * Retrieves all available fares for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
     * @param catalogues Specifies in which catalogue the fares need to be searched (e.g.&#39;4U;OS&#39;). (required)
     * @param origin Enter journey origin (e.g &#39;FRA&#39;). (required)
     * @param destination Enter journey destination (e.g &#39;MAD&#39;). (required)
     * @param travelDate Enter journey travel-date (e.g 2016-10-20) (required)
     * @param returnDate Enter journey return-date (e.g 2016-10-31)&#39;. (optional)
     * @param cabinClass Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional, default to economy)
     * @param travelers Specifies the type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) For LH only (adult&#x3D;1) possible. (optional)
     * @param fareFamily Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to smart)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param accept Mandatory http header:  application/xml or application/json (optional, default to application/json)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String allFares(String catalogues, String origin, String destination, String travelDate, String returnDate, String cabinClass, String travelers, String fareFamily, String trackingid, String accept) throws ApiException {
        ApiResponse<String> localVarResp = allFaresWithHttpInfo(catalogues, origin, destination, travelDate, returnDate, cabinClass, travelers, fareFamily, trackingid, accept);
        return localVarResp.getData();
    }

    /**
     * All Fares
     * Retrieves all available fares for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
     * @param catalogues Specifies in which catalogue the fares need to be searched (e.g.&#39;4U;OS&#39;). (required)
     * @param origin Enter journey origin (e.g &#39;FRA&#39;). (required)
     * @param destination Enter journey destination (e.g &#39;MAD&#39;). (required)
     * @param travelDate Enter journey travel-date (e.g 2016-10-20) (required)
     * @param returnDate Enter journey return-date (e.g 2016-10-31)&#39;. (optional)
     * @param cabinClass Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional, default to economy)
     * @param travelers Specifies the type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) For LH only (adult&#x3D;1) possible. (optional)
     * @param fareFamily Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to smart)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param accept Mandatory http header:  application/xml or application/json (optional, default to application/json)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> allFaresWithHttpInfo(String catalogues, String origin, String destination, String travelDate, String returnDate, String cabinClass, String travelers, String fareFamily, String trackingid, String accept) throws ApiException {
        okhttp3.Call localVarCall = allFaresValidateBeforeCall(catalogues, origin, destination, travelDate, returnDate, cabinClass, travelers, fareFamily, trackingid, accept, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Fares (asynchronously)
     * Retrieves all available fares for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
     * @param catalogues Specifies in which catalogue the fares need to be searched (e.g.&#39;4U;OS&#39;). (required)
     * @param origin Enter journey origin (e.g &#39;FRA&#39;). (required)
     * @param destination Enter journey destination (e.g &#39;MAD&#39;). (required)
     * @param travelDate Enter journey travel-date (e.g 2016-10-20) (required)
     * @param returnDate Enter journey return-date (e.g 2016-10-31)&#39;. (optional)
     * @param cabinClass Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional, default to economy)
     * @param travelers Specifies the type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) For LH only (adult&#x3D;1) possible. (optional)
     * @param fareFamily Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to smart)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param accept Mandatory http header:  application/xml or application/json (optional, default to application/json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allFaresAsync(String catalogues, String origin, String destination, String travelDate, String returnDate, String cabinClass, String travelers, String fareFamily, String trackingid, String accept, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = allFaresValidateBeforeCall(catalogues, origin, destination, travelDate, returnDate, cabinClass, travelers, fareFamily, trackingid, accept, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bestFares
     * @param catalogues Search fares from these carriers&#39; catalogues (e.g. &#39;4U;OS;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param range Fare range: &#39;byday&#39; or &#39;bymonth&#39; (Acceptable values are: \&quot;byday\&quot;, \&quot;bymonth\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bestFaresCall(String catalogues, String origin, String destination, String travelDate, String tripDuration, String range, String accept, String cabinClass, String country, String trackingid, String fareFamily, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/bestfares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (travelDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travel-date", travelDate));
        }

        if (tripDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trip-duration", tripDuration));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (trackingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingid", trackingid));
        }

        if (fareFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare-family", fareFamily));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bestFaresValidateBeforeCall(String catalogues, String origin, String destination, String travelDate, String tripDuration, String range, String accept, String cabinClass, String country, String trackingid, String fareFamily, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling bestFares(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling bestFares(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling bestFares(Async)");
        }

        // verify the required parameter 'travelDate' is set
        if (travelDate == null) {
            throw new ApiException("Missing the required parameter 'travelDate' when calling bestFares(Async)");
        }

        // verify the required parameter 'tripDuration' is set
        if (tripDuration == null) {
            throw new ApiException("Missing the required parameter 'tripDuration' when calling bestFares(Async)");
        }

        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling bestFares(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling bestFares(Async)");
        }

        return bestFaresCall(catalogues, origin, destination, travelDate, tripDuration, range, accept, cabinClass, country, trackingid, fareFamily, _callback);

    }

    /**
     * Best Fares
     * Retrieve best fares for the requested journey across multiple days or multiple months.
     * @param catalogues Search fares from these carriers&#39; catalogues (e.g. &#39;4U;OS;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param range Fare range: &#39;byday&#39; or &#39;bymonth&#39; (Acceptable values are: \&quot;byday\&quot;, \&quot;bymonth\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String bestFares(String catalogues, String origin, String destination, String travelDate, String tripDuration, String range, String accept, String cabinClass, String country, String trackingid, String fareFamily) throws ApiException {
        ApiResponse<String> localVarResp = bestFaresWithHttpInfo(catalogues, origin, destination, travelDate, tripDuration, range, accept, cabinClass, country, trackingid, fareFamily);
        return localVarResp.getData();
    }

    /**
     * Best Fares
     * Retrieve best fares for the requested journey across multiple days or multiple months.
     * @param catalogues Search fares from these carriers&#39; catalogues (e.g. &#39;4U;OS;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param range Fare range: &#39;byday&#39; or &#39;bymonth&#39; (Acceptable values are: \&quot;byday\&quot;, \&quot;bymonth\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> bestFaresWithHttpInfo(String catalogues, String origin, String destination, String travelDate, String tripDuration, String range, String accept, String cabinClass, String country, String trackingid, String fareFamily) throws ApiException {
        okhttp3.Call localVarCall = bestFaresValidateBeforeCall(catalogues, origin, destination, travelDate, tripDuration, range, accept, cabinClass, country, trackingid, fareFamily, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Fares (asynchronously)
     * Retrieve best fares for the requested journey across multiple days or multiple months.
     * @param catalogues Search fares from these carriers&#39; catalogues (e.g. &#39;4U;OS;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param range Fare range: &#39;byday&#39; or &#39;bymonth&#39; (Acceptable values are: \&quot;byday\&quot;, \&quot;bymonth\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @param trackingid Austrian Airlines only - specify the web tracking id to be used in OS Deep link. (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bestFaresAsync(String catalogues, String origin, String destination, String travelDate, String tripDuration, String range, String accept, String cabinClass, String country, String trackingid, String fareFamily, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = bestFaresValidateBeforeCall(catalogues, origin, destination, travelDate, tripDuration, range, accept, cabinClass, country, trackingid, fareFamily, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deepLinks
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (optional)
     * @param originName Journey origin airport or city name (e.g. &#39;frankfurt&#39;) (optional)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (optional)
     * @param destinationName Journey destination airport or city name (e.g. &#39;madrid&#39;) (optional)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (optional)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deepLinksCall(String catalogues, String trackingid, String country, String lang, String accept, String origin, String originName, String destination, String destinationName, String travelDate, String returnDate, String cabinClass, String outboundSegments, String returnSegments, String travelers, String fare, String netFare, String fareCurrency, String partnerid, String encryptionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/deeplink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (trackingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingid", trackingid));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (originName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin-name", originName));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (destinationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination-name", destinationName));
        }

        if (travelDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travel-date", travelDate));
        }

        if (returnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-date", returnDate));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (outboundSegments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outbound-segments", outboundSegments));
        }

        if (returnSegments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-segments", returnSegments));
        }

        if (travelers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelers", travelers));
        }

        if (fare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare", fare));
        }

        if (netFare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("net-fare", netFare));
        }

        if (fareCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare-currency", fareCurrency));
        }

        if (partnerid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partnerid", partnerid));
        }

        if (encryptionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encryption-key", encryptionKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deepLinksValidateBeforeCall(String catalogues, String trackingid, String country, String lang, String accept, String origin, String originName, String destination, String destinationName, String travelDate, String returnDate, String cabinClass, String outboundSegments, String returnSegments, String travelers, String fare, String netFare, String fareCurrency, String partnerid, String encryptionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling deepLinks(Async)");
        }

        // verify the required parameter 'trackingid' is set
        if (trackingid == null) {
            throw new ApiException("Missing the required parameter 'trackingid' when calling deepLinks(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling deepLinks(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling deepLinks(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deepLinks(Async)");
        }

        return deepLinksCall(catalogues, trackingid, country, lang, accept, origin, originName, destination, destinationName, travelDate, returnDate, cabinClass, outboundSegments, returnSegments, travelers, fare, netFare, fareCurrency, partnerid, encryptionKey, _callback);

    }

    /**
     * Deep Links
     * Returns valid deep links for the provided input parameters
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (optional)
     * @param originName Journey origin airport or city name (e.g. &#39;frankfurt&#39;) (optional)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (optional)
     * @param destinationName Journey destination airport or city name (e.g. &#39;madrid&#39;) (optional)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (optional)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String deepLinks(String catalogues, String trackingid, String country, String lang, String accept, String origin, String originName, String destination, String destinationName, String travelDate, String returnDate, String cabinClass, String outboundSegments, String returnSegments, String travelers, String fare, String netFare, String fareCurrency, String partnerid, String encryptionKey) throws ApiException {
        ApiResponse<String> localVarResp = deepLinksWithHttpInfo(catalogues, trackingid, country, lang, accept, origin, originName, destination, destinationName, travelDate, returnDate, cabinClass, outboundSegments, returnSegments, travelers, fare, netFare, fareCurrency, partnerid, encryptionKey);
        return localVarResp.getData();
    }

    /**
     * Deep Links
     * Returns valid deep links for the provided input parameters
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (optional)
     * @param originName Journey origin airport or city name (e.g. &#39;frankfurt&#39;) (optional)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (optional)
     * @param destinationName Journey destination airport or city name (e.g. &#39;madrid&#39;) (optional)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (optional)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deepLinksWithHttpInfo(String catalogues, String trackingid, String country, String lang, String accept, String origin, String originName, String destination, String destinationName, String travelDate, String returnDate, String cabinClass, String outboundSegments, String returnSegments, String travelers, String fare, String netFare, String fareCurrency, String partnerid, String encryptionKey) throws ApiException {
        okhttp3.Call localVarCall = deepLinksValidateBeforeCall(catalogues, trackingid, country, lang, accept, origin, originName, destination, destinationName, travelDate, returnDate, cabinClass, outboundSegments, returnSegments, travelers, fare, netFare, fareCurrency, partnerid, encryptionKey, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deep Links (asynchronously)
     * Returns valid deep links for the provided input parameters
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (optional)
     * @param originName Journey origin airport or city name (e.g. &#39;frankfurt&#39;) (optional)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (optional)
     * @param destinationName Journey destination airport or city name (e.g. &#39;madrid&#39;) (optional)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (optional)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deepLinksAsync(String catalogues, String trackingid, String country, String lang, String accept, String origin, String originName, String destination, String destinationName, String travelDate, String returnDate, String cabinClass, String outboundSegments, String returnSegments, String travelers, String fare, String netFare, String fareCurrency, String partnerid, String encryptionKey, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deepLinksValidateBeforeCall(catalogues, trackingid, country, lang, accept, origin, originName, destination, destinationName, travelDate, returnDate, cabinClass, outboundSegments, returnSegments, travelers, fare, netFare, fareCurrency, partnerid, encryptionKey, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fares
     * @param catalogues Search fares from these carriers&#39; catalogues - currently active for Germanwings only  (4U) (required)
     * @param segments Journey details  e.g. (origin&#x3D;TXL;destination&#x3D;CGN;travel-date&#x3D;2016-12-15;return-date&#x3D;2016-12-20;cabin&#x3D;Economy) (required)
     * @param carriers Include fares for these carriers e.g. (&#39;4U;LH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param travelers Type and number of travelers e.g. (adult&#x3D;1;child&#x3D;1;infant&#x3D;1) (optional)
     * @param fareTypes Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faresCall(String catalogues, String segments, String carriers, String accept, String travelers, String fareTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/fares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (segments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segments", segments));
        }

        if (carriers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carriers", carriers));
        }

        if (travelers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelers", travelers));
        }

        if (fareTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare-types", fareTypes));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call faresValidateBeforeCall(String catalogues, String segments, String carriers, String accept, String travelers, String fareTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling fares(Async)");
        }

        // verify the required parameter 'segments' is set
        if (segments == null) {
            throw new ApiException("Missing the required parameter 'segments' when calling fares(Async)");
        }

        // verify the required parameter 'carriers' is set
        if (carriers == null) {
            throw new ApiException("Missing the required parameter 'carriers' when calling fares(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling fares(Async)");
        }

        return faresCall(catalogues, segments, carriers, accept, travelers, fareTypes, _callback);

    }

    /**
     * Fares
     * Retrieve all available fares per fare family for a specific Origin &amp; Destination on a given date
     * @param catalogues Search fares from these carriers&#39; catalogues - currently active for Germanwings only  (4U) (required)
     * @param segments Journey details  e.g. (origin&#x3D;TXL;destination&#x3D;CGN;travel-date&#x3D;2016-12-15;return-date&#x3D;2016-12-20;cabin&#x3D;Economy) (required)
     * @param carriers Include fares for these carriers e.g. (&#39;4U;LH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param travelers Type and number of travelers e.g. (adult&#x3D;1;child&#x3D;1;infant&#x3D;1) (optional)
     * @param fareTypes Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String fares(String catalogues, String segments, String carriers, String accept, String travelers, String fareTypes) throws ApiException {
        ApiResponse<String> localVarResp = faresWithHttpInfo(catalogues, segments, carriers, accept, travelers, fareTypes);
        return localVarResp.getData();
    }

    /**
     * Fares
     * Retrieve all available fares per fare family for a specific Origin &amp; Destination on a given date
     * @param catalogues Search fares from these carriers&#39; catalogues - currently active for Germanwings only  (4U) (required)
     * @param segments Journey details  e.g. (origin&#x3D;TXL;destination&#x3D;CGN;travel-date&#x3D;2016-12-15;return-date&#x3D;2016-12-20;cabin&#x3D;Economy) (required)
     * @param carriers Include fares for these carriers e.g. (&#39;4U;LH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param travelers Type and number of travelers e.g. (adult&#x3D;1;child&#x3D;1;infant&#x3D;1) (optional)
     * @param fareTypes Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> faresWithHttpInfo(String catalogues, String segments, String carriers, String accept, String travelers, String fareTypes) throws ApiException {
        okhttp3.Call localVarCall = faresValidateBeforeCall(catalogues, segments, carriers, accept, travelers, fareTypes, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fares (asynchronously)
     * Retrieve all available fares per fare family for a specific Origin &amp; Destination on a given date
     * @param catalogues Search fares from these carriers&#39; catalogues - currently active for Germanwings only  (4U) (required)
     * @param segments Journey details  e.g. (origin&#x3D;TXL;destination&#x3D;CGN;travel-date&#x3D;2016-12-15;return-date&#x3D;2016-12-20;cabin&#x3D;Economy) (required)
     * @param carriers Include fares for these carriers e.g. (&#39;4U;LH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param travelers Type and number of travelers e.g. (adult&#x3D;1;child&#x3D;1;infant&#x3D;1) (optional)
     * @param fareTypes Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faresAsync(String catalogues, String segments, String carriers, String accept, String travelers, String fareTypes, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = faresValidateBeforeCall(catalogues, segments, carriers, accept, travelers, fareTypes, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for faresSubscriptions
     * @param origin Journey origin. 3-leter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param email Email Address&#39;) (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param country 2-letter ISO 3166-1 country code (optional)
     * @param trackingid Tracking parameter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faresSubscriptionsCall(String origin, String destination, String cabinClass, String tripDuration, String email, String lang, String accept, String country, String trackingid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (tripDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trip-duration", tripDuration));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (trackingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingid", trackingid));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call faresSubscriptionsValidateBeforeCall(String origin, String destination, String cabinClass, String tripDuration, String email, String lang, String accept, String country, String trackingid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling faresSubscriptions(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling faresSubscriptions(Async)");
        }

        // verify the required parameter 'cabinClass' is set
        if (cabinClass == null) {
            throw new ApiException("Missing the required parameter 'cabinClass' when calling faresSubscriptions(Async)");
        }

        // verify the required parameter 'tripDuration' is set
        if (tripDuration == null) {
            throw new ApiException("Missing the required parameter 'tripDuration' when calling faresSubscriptions(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling faresSubscriptions(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling faresSubscriptions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling faresSubscriptions(Async)");
        }

        return faresSubscriptionsCall(origin, destination, cabinClass, tripDuration, email, lang, accept, country, trackingid, _callback);

    }

    /**
     * Fares Subscriptions
     * Create a subscription for best price O&amp;D. Receive regular updates on lowest fares
     * @param origin Journey origin. 3-leter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param email Email Address&#39;) (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param country 2-letter ISO 3166-1 country code (optional)
     * @param trackingid Tracking parameter (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String faresSubscriptions(String origin, String destination, String cabinClass, String tripDuration, String email, String lang, String accept, String country, String trackingid) throws ApiException {
        ApiResponse<String> localVarResp = faresSubscriptionsWithHttpInfo(origin, destination, cabinClass, tripDuration, email, lang, accept, country, trackingid);
        return localVarResp.getData();
    }

    /**
     * Fares Subscriptions
     * Create a subscription for best price O&amp;D. Receive regular updates on lowest fares
     * @param origin Journey origin. 3-leter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param email Email Address&#39;) (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param country 2-letter ISO 3166-1 country code (optional)
     * @param trackingid Tracking parameter (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> faresSubscriptionsWithHttpInfo(String origin, String destination, String cabinClass, String tripDuration, String email, String lang, String accept, String country, String trackingid) throws ApiException {
        okhttp3.Call localVarCall = faresSubscriptionsValidateBeforeCall(origin, destination, cabinClass, tripDuration, email, lang, accept, country, trackingid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fares Subscriptions (asynchronously)
     * Create a subscription for best price O&amp;D. Receive regular updates on lowest fares
     * @param origin Journey origin. 3-leter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport code (e.g. &#39;MAD&#39;) (required)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (required)
     * @param tripDuration Trip duration in days (e.g. &#39;7&#39;) (required)
     * @param email Email Address&#39;) (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param country 2-letter ISO 3166-1 country code (optional)
     * @param trackingid Tracking parameter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call faresSubscriptionsAsync(String origin, String destination, String cabinClass, String tripDuration, String email, String lang, String accept, String country, String trackingid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = faresSubscriptionsValidateBeforeCall(origin, destination, cabinClass, tripDuration, email, lang, accept, country, trackingid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lHDeepLinksFFP
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lHDeepLinksFFPCall(String catalogues, String origin, String destination, String travelDate, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String travelers, String partnerid, String encryptionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/deeplink/ffp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (travelDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travel-date", travelDate));
        }

        if (trackingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingid", trackingid));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (returnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-date", returnDate));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (travelers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelers", travelers));
        }

        if (partnerid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partnerid", partnerid));
        }

        if (encryptionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encryption-key", encryptionKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lHDeepLinksFFPValidateBeforeCall(String catalogues, String origin, String destination, String travelDate, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String travelers, String partnerid, String encryptionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'travelDate' is set
        if (travelDate == null) {
            throw new ApiException("Missing the required parameter 'travelDate' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'trackingid' is set
        if (trackingid == null) {
            throw new ApiException("Missing the required parameter 'trackingid' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling lHDeepLinksFFP(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling lHDeepLinksFFP(Async)");
        }

        return lHDeepLinksFFPCall(catalogues, origin, destination, travelDate, trackingid, country, lang, accept, returnDate, cabinClass, travelers, partnerid, encryptionKey, _callback);

    }

    /**
     * LH Deep Links - FFP
     * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String lHDeepLinksFFP(String catalogues, String origin, String destination, String travelDate, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String travelers, String partnerid, String encryptionKey) throws ApiException {
        ApiResponse<String> localVarResp = lHDeepLinksFFPWithHttpInfo(catalogues, origin, destination, travelDate, trackingid, country, lang, accept, returnDate, cabinClass, travelers, partnerid, encryptionKey);
        return localVarResp.getData();
    }

    /**
     * LH Deep Links - FFP
     * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> lHDeepLinksFFPWithHttpInfo(String catalogues, String origin, String destination, String travelDate, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String travelers, String partnerid, String encryptionKey) throws ApiException {
        okhttp3.Call localVarCall = lHDeepLinksFFPValidateBeforeCall(catalogues, origin, destination, travelDate, trackingid, country, lang, accept, returnDate, cabinClass, travelers, partnerid, encryptionKey, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * LH Deep Links - FFP (asynchronously)
     * Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lHDeepLinksFFPAsync(String catalogues, String origin, String destination, String travelDate, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String travelers, String partnerid, String encryptionKey, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = lHDeepLinksFFPValidateBeforeCall(catalogues, origin, destination, travelDate, trackingid, country, lang, accept, returnDate, cabinClass, travelers, partnerid, encryptionKey, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lHDeepLinksITCO
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (required)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (required)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lHDeepLinksITCOCall(String catalogues, String origin, String destination, String travelDate, String outboundSegments, String fare, String fareCurrency, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String returnSegments, String travelers, String netFare, String partnerid, String encryptionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/deeplink/itco";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (travelDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travel-date", travelDate));
        }

        if (outboundSegments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outbound-segments", outboundSegments));
        }

        if (fare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare", fare));
        }

        if (fareCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare-currency", fareCurrency));
        }

        if (trackingid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingid", trackingid));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (returnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-date", returnDate));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (returnSegments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-segments", returnSegments));
        }

        if (travelers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelers", travelers));
        }

        if (netFare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("net-fare", netFare));
        }

        if (partnerid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partnerid", partnerid));
        }

        if (encryptionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encryption-key", encryptionKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lHDeepLinksITCOValidateBeforeCall(String catalogues, String origin, String destination, String travelDate, String outboundSegments, String fare, String fareCurrency, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String returnSegments, String travelers, String netFare, String partnerid, String encryptionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'travelDate' is set
        if (travelDate == null) {
            throw new ApiException("Missing the required parameter 'travelDate' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'outboundSegments' is set
        if (outboundSegments == null) {
            throw new ApiException("Missing the required parameter 'outboundSegments' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'fare' is set
        if (fare == null) {
            throw new ApiException("Missing the required parameter 'fare' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'fareCurrency' is set
        if (fareCurrency == null) {
            throw new ApiException("Missing the required parameter 'fareCurrency' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'trackingid' is set
        if (trackingid == null) {
            throw new ApiException("Missing the required parameter 'trackingid' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling lHDeepLinksITCO(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling lHDeepLinksITCO(Async)");
        }

        return lHDeepLinksITCOCall(catalogues, origin, destination, travelDate, outboundSegments, fare, fareCurrency, trackingid, country, lang, accept, returnDate, cabinClass, returnSegments, travelers, netFare, partnerid, encryptionKey, _callback);

    }

    /**
     * LH Deep Links - ITCO
     * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (required)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (required)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String lHDeepLinksITCO(String catalogues, String origin, String destination, String travelDate, String outboundSegments, String fare, String fareCurrency, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String returnSegments, String travelers, String netFare, String partnerid, String encryptionKey) throws ApiException {
        ApiResponse<String> localVarResp = lHDeepLinksITCOWithHttpInfo(catalogues, origin, destination, travelDate, outboundSegments, fare, fareCurrency, trackingid, country, lang, accept, returnDate, cabinClass, returnSegments, travelers, netFare, partnerid, encryptionKey);
        return localVarResp.getData();
    }

    /**
     * LH Deep Links - ITCO
     * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (required)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (required)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> lHDeepLinksITCOWithHttpInfo(String catalogues, String origin, String destination, String travelDate, String outboundSegments, String fare, String fareCurrency, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String returnSegments, String travelers, String netFare, String partnerid, String encryptionKey) throws ApiException {
        okhttp3.Call localVarCall = lHDeepLinksITCOValidateBeforeCall(catalogues, origin, destination, travelDate, outboundSegments, fare, fareCurrency, trackingid, country, lang, accept, returnDate, cabinClass, returnSegments, travelers, netFare, partnerid, encryptionKey, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * LH Deep Links - ITCO (asynchronously)
     * Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
     * @param catalogues Carrier for which the deep link will be created (e.g. &#39;LH&#39;) (required)
     * @param origin Journey origin. 3-letter IATA airport or city code (e.g. &#39;FRA&#39;) (required)
     * @param destination Journey destination. 3-letter IATA airport or city code (e.g. &#39;MAD&#39;) (required)
     * @param travelDate Journey travel-date (YYYY-MM-DD) (required)
     * @param outboundSegments Outbound flight segments in the sequence of travel (e.g. &#39;LH096;LH480&#39;) (required)
     * @param fare Travel fare (e.g. &#39;1341.45&#39;) (required)
     * @param fareCurrency Fare currency (e.g. &#39;EUR&#39;) (required)
     * @param trackingid Deep link tracking ID (required)
     * @param country 2-letter ISO 3166-1 country code (required)
     * @param lang 2-letter ISO 3166-1 language code (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date (YYYY-MM-DD) (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param returnSegments Flight segments in the sequence of travel (e.g. &#39;LH7465;LH431&#39;) (optional)
     * @param travelers Type and number of travelers (e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;) (optional)
     * @param netFare Travel net fare. Total fare less taxes and charges (e.g. &#39;1140&#39;) (optional)
     * @param partnerid Deep link partner id (e.g. &#39;1247&#39;) (optional)
     * @param encryptionKey Deep link encryption-key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lHDeepLinksITCOAsync(String catalogues, String origin, String destination, String travelDate, String outboundSegments, String fare, String fareCurrency, String trackingid, String country, String lang, String accept, String returnDate, String cabinClass, String returnSegments, String travelers, String netFare, String partnerid, String encryptionKey, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = lHDeepLinksITCOValidateBeforeCall(catalogues, origin, destination, travelDate, outboundSegments, fare, fareCurrency, trackingid, country, lang, accept, returnDate, cabinClass, returnSegments, travelers, netFare, partnerid, encryptionKey, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lowestFares
     * @param catalogues Search fares from these carriers&#39; catalogues e.g. &#39;4U;OS;LH&#39; (required)
     * @param origin Journey origin. 3-letter IATA aiport code e.g. &#39;FRA&#39; (required)
     * @param destination Journey destination. 3-letter IATA airport code e.g. &#39;MAD&#39; (required)
     * @param travelDate Journey travel-date YYYY-MM-DD (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date - mandatory for OS and LH searches YYYY-MM-DD (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;. For LH only (adult&#x3D;1) possible (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lowestFaresCall(String catalogues, String origin, String destination, String travelDate, String accept, String returnDate, String cabinClass, String travelers, String fareFamily, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/fares/lowestfares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (travelDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travel-date", travelDate));
        }

        if (returnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return-date", returnDate));
        }

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabin-class", cabinClass));
        }

        if (travelers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelers", travelers));
        }

        if (fareFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fare-family", fareFamily));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lowestFaresValidateBeforeCall(String catalogues, String origin, String destination, String travelDate, String accept, String returnDate, String cabinClass, String travelers, String fareFamily, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogues' is set
        if (catalogues == null) {
            throw new ApiException("Missing the required parameter 'catalogues' when calling lowestFares(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling lowestFares(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling lowestFares(Async)");
        }

        // verify the required parameter 'travelDate' is set
        if (travelDate == null) {
            throw new ApiException("Missing the required parameter 'travelDate' when calling lowestFares(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling lowestFares(Async)");
        }

        return lowestFaresCall(catalogues, origin, destination, travelDate, accept, returnDate, cabinClass, travelers, fareFamily, country, _callback);

    }

    /**
     * Lowest Fares
     * Retrieve lowest fare for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS &amp; LH
     * @param catalogues Search fares from these carriers&#39; catalogues e.g. &#39;4U;OS;LH&#39; (required)
     * @param origin Journey origin. 3-letter IATA aiport code e.g. &#39;FRA&#39; (required)
     * @param destination Journey destination. 3-letter IATA airport code e.g. &#39;MAD&#39; (required)
     * @param travelDate Journey travel-date YYYY-MM-DD (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date - mandatory for OS and LH searches YYYY-MM-DD (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;. For LH only (adult&#x3D;1) possible (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String lowestFares(String catalogues, String origin, String destination, String travelDate, String accept, String returnDate, String cabinClass, String travelers, String fareFamily, String country) throws ApiException {
        ApiResponse<String> localVarResp = lowestFaresWithHttpInfo(catalogues, origin, destination, travelDate, accept, returnDate, cabinClass, travelers, fareFamily, country);
        return localVarResp.getData();
    }

    /**
     * Lowest Fares
     * Retrieve lowest fare for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS &amp; LH
     * @param catalogues Search fares from these carriers&#39; catalogues e.g. &#39;4U;OS;LH&#39; (required)
     * @param origin Journey origin. 3-letter IATA aiport code e.g. &#39;FRA&#39; (required)
     * @param destination Journey destination. 3-letter IATA airport code e.g. &#39;MAD&#39; (required)
     * @param travelDate Journey travel-date YYYY-MM-DD (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date - mandatory for OS and LH searches YYYY-MM-DD (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;. For LH only (adult&#x3D;1) possible (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> lowestFaresWithHttpInfo(String catalogues, String origin, String destination, String travelDate, String accept, String returnDate, String cabinClass, String travelers, String fareFamily, String country) throws ApiException {
        okhttp3.Call localVarCall = lowestFaresValidateBeforeCall(catalogues, origin, destination, travelDate, accept, returnDate, cabinClass, travelers, fareFamily, country, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lowest Fares (asynchronously)
     * Retrieve lowest fare for a specific Origin &amp; Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS &amp; LH
     * @param catalogues Search fares from these carriers&#39; catalogues e.g. &#39;4U;OS;LH&#39; (required)
     * @param origin Journey origin. 3-letter IATA aiport code e.g. &#39;FRA&#39; (required)
     * @param destination Journey destination. 3-letter IATA airport code e.g. &#39;MAD&#39; (required)
     * @param travelDate Journey travel-date YYYY-MM-DD (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param returnDate Journey return-date - mandatory for OS and LH searches YYYY-MM-DD (optional)
     * @param cabinClass Cabin class: &#39;economy&#39;, &#39;premium_economy&#39;, &#39;business&#39;, &#39;first&#39; (Acceptable values are: \&quot;\&quot;, \&quot;economy\&quot;, \&quot;premium_economy\&quot;, \&quot;business\&quot;, \&quot;first\&quot;) (optional)
     * @param travelers Type and number of travelers e.g. &#39;(adult&#x3D;2;child&#x3D;2;infant&#x3D;1)&#39;. For LH only (adult&#x3D;1) possible (optional)
     * @param fareFamily Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: \&quot;\&quot;, \&quot;basic\&quot;, \&quot;smart\&quot;, \&quot;best\&quot;, \&quot;smartflex\&quot;, \&quot;bestflex\&quot;) (optional, default to basic)
     * @param country Country code of requestor. 2-letter ISO 3166-1 country code (e.g. &#39;de&#39;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lowestFaresAsync(String catalogues, String origin, String destination, String travelDate, String accept, String returnDate, String cabinClass, String travelers, String fareFamily, String country, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = lowestFaresValidateBeforeCall(catalogues, origin, destination, travelDate, accept, returnDate, cabinClass, travelers, fareFamily, country, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oNDRoute
     * @param origin Enter either the orgin city or orgin country code (e.g &#39;FRA&#39; or &#39;DE&#39;). Enter &#39;*&#39; for all (required)
     * @param destination Enter either the destination city or country code (e.g &#39;MAD&#39; or &#39;ES&#39;). Enter &#39;*&#39; for all (required)
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oNDRouteCall(String origin, String destination, String accept, String catalogues, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/ond/route/{origin}/{destination}"
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "destination" + "}", localVarApiClient.escapeString(destination.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oNDRouteValidateBeforeCall(String origin, String destination, String accept, String catalogues, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling oNDRoute(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling oNDRoute(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling oNDRoute(Async)");
        }

        return oNDRouteCall(origin, destination, accept, catalogues, limit, offset, _callback);

    }

    /**
     * OND Route
     * Returns LH route origin &amp; destination information
     * @param origin Enter either the orgin city or orgin country code (e.g &#39;FRA&#39; or &#39;DE&#39;). Enter &#39;*&#39; for all (required)
     * @param destination Enter either the destination city or country code (e.g &#39;MAD&#39; or &#39;ES&#39;). Enter &#39;*&#39; for all (required)
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String oNDRoute(String origin, String destination, String accept, String catalogues, String limit, String offset) throws ApiException {
        ApiResponse<String> localVarResp = oNDRouteWithHttpInfo(origin, destination, accept, catalogues, limit, offset);
        return localVarResp.getData();
    }

    /**
     * OND Route
     * Returns LH route origin &amp; destination information
     * @param origin Enter either the orgin city or orgin country code (e.g &#39;FRA&#39; or &#39;DE&#39;). Enter &#39;*&#39; for all (required)
     * @param destination Enter either the destination city or country code (e.g &#39;MAD&#39; or &#39;ES&#39;). Enter &#39;*&#39; for all (required)
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> oNDRouteWithHttpInfo(String origin, String destination, String accept, String catalogues, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = oNDRouteValidateBeforeCall(origin, destination, accept, catalogues, limit, offset, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OND Route (asynchronously)
     * Returns LH route origin &amp; destination information
     * @param origin Enter either the orgin city or orgin country code (e.g &#39;FRA&#39; or &#39;DE&#39;). Enter &#39;*&#39; for all (required)
     * @param destination Enter either the destination city or country code (e.g &#39;MAD&#39; or &#39;ES&#39;). Enter &#39;*&#39; for all (required)
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oNDRouteAsync(String origin, String destination, String accept, String catalogues, String limit, String offset, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = oNDRouteValidateBeforeCall(origin, destination, accept, catalogues, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oNDStatus
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param newRoutes Enter if newly added routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @param oldRoutes Enter if old (deleted) routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oNDStatusCall(String accept, String catalogues, String newRoutes, String oldRoutes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/ond/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (newRoutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("new-routes", newRoutes));
        }

        if (oldRoutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("old-routes", oldRoutes));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oNDStatusValidateBeforeCall(String accept, String catalogues, String newRoutes, String oldRoutes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling oNDStatus(Async)");
        }

        return oNDStatusCall(accept, catalogues, newRoutes, oldRoutes, _callback);

    }

    /**
     * OND Status
     * Returns LH network route status information. Search for recently added or retired routes
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param newRoutes Enter if newly added routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @param oldRoutes Enter if old (deleted) routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String oNDStatus(String accept, String catalogues, String newRoutes, String oldRoutes) throws ApiException {
        ApiResponse<String> localVarResp = oNDStatusWithHttpInfo(accept, catalogues, newRoutes, oldRoutes);
        return localVarResp.getData();
    }

    /**
     * OND Status
     * Returns LH network route status information. Search for recently added or retired routes
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param newRoutes Enter if newly added routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @param oldRoutes Enter if old (deleted) routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> oNDStatusWithHttpInfo(String accept, String catalogues, String newRoutes, String oldRoutes) throws ApiException {
        okhttp3.Call localVarCall = oNDStatusValidateBeforeCall(accept, catalogues, newRoutes, oldRoutes, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OND Status (asynchronously)
     * Returns LH network route status information. Search for recently added or retired routes
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param newRoutes Enter if newly added routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @param oldRoutes Enter if old (deleted) routes should be returned in the response. (Acceptable values are: \&quot;\&quot;, \&quot;true\&quot;, \&quot;false\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oNDStatusAsync(String accept, String catalogues, String newRoutes, String oldRoutes, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = oNDStatusValidateBeforeCall(accept, catalogues, newRoutes, oldRoutes, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topOND
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param origin Enter the origin country code (e.g. &#39;DE&#39;). Leave empty to search Top OND across all countries (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topONDCall(String accept, String catalogues, String origin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/ond/top";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (catalogues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalogues", catalogues));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topONDValidateBeforeCall(String accept, String catalogues, String origin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling topOND(Async)");
        }

        return topONDCall(accept, catalogues, origin, _callback);

    }

    /**
     * Top OND
     * Returns LH Top routes per country or across all countries
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param origin Enter the origin country code (e.g. &#39;DE&#39;). Leave empty to search Top OND across all countries (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String topOND(String accept, String catalogues, String origin) throws ApiException {
        ApiResponse<String> localVarResp = topONDWithHttpInfo(accept, catalogues, origin);
        return localVarResp.getData();
    }

    /**
     * Top OND
     * Returns LH Top routes per country or across all countries
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param origin Enter the origin country code (e.g. &#39;DE&#39;). Leave empty to search Top OND across all countries (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> topONDWithHttpInfo(String accept, String catalogues, String origin) throws ApiException {
        okhttp3.Call localVarCall = topONDValidateBeforeCall(accept, catalogues, origin, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Top OND (asynchronously)
     * Returns LH Top routes per country or across all countries
     * @param accept Mandatory http header:  application/xml or application/json (required)
     * @param catalogues Carrier for which the OND will be retrieved (e.g. &#39;LH&#39;) (optional, default to LH)
     * @param origin Enter the origin country code (e.g. &#39;DE&#39;). Leave empty to search Top OND across all countries (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topONDAsync(String accept, String catalogues, String origin, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = topONDValidateBeforeCall(accept, catalogues, origin, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
