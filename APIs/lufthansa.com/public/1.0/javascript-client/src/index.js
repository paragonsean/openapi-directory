/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Airport from './model/Airport';
import AirportNames from './model/AirportNames';
import AirportPosition from './model/AirportPosition';
import AirportResource from './model/AirportResource';
import AirportResourceAirports from './model/AirportResourceAirports';
import AirportResourceMeta from './model/AirportResourceMeta';
import AirportResponse from './model/AirportResponse';
import Coordinate from './model/Coordinate';
import Link from './model/Link';
import Name from './model/Name';
import CargoApi from './api/CargoApi';
import OffersApi from './api/OffersApi';
import OperationsApi from './api/OperationsApi';
import ReferenceDataApi from './api/ReferenceDataApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var LhPublicApi = require('index'); // See note below*.
* var xxxSvc = new LhPublicApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new LhPublicApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new LhPublicApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new LhPublicApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Airport model constructor.
     * @property {module:model/Airport}
     */
    Airport,

    /**
     * The AirportNames model constructor.
     * @property {module:model/AirportNames}
     */
    AirportNames,

    /**
     * The AirportPosition model constructor.
     * @property {module:model/AirportPosition}
     */
    AirportPosition,

    /**
     * The AirportResource model constructor.
     * @property {module:model/AirportResource}
     */
    AirportResource,

    /**
     * The AirportResourceAirports model constructor.
     * @property {module:model/AirportResourceAirports}
     */
    AirportResourceAirports,

    /**
     * The AirportResourceMeta model constructor.
     * @property {module:model/AirportResourceMeta}
     */
    AirportResourceMeta,

    /**
     * The AirportResponse model constructor.
     * @property {module:model/AirportResponse}
     */
    AirportResponse,

    /**
     * The Coordinate model constructor.
     * @property {module:model/Coordinate}
     */
    Coordinate,

    /**
     * The Link model constructor.
     * @property {module:model/Link}
     */
    Link,

    /**
     * The Name model constructor.
     * @property {module:model/Name}
     */
    Name,

    /**
    * The CargoApi service constructor.
    * @property {module:api/CargoApi}
    */
    CargoApi,

    /**
    * The OffersApi service constructor.
    * @property {module:api/OffersApi}
    */
    OffersApi,

    /**
    * The OperationsApi service constructor.
    * @property {module:api/OperationsApi}
    */
    OperationsApi,

    /**
    * The ReferenceDataApi service constructor.
    * @property {module:api/ReferenceDataApi}
    */
    ReferenceDataApi
};
