/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirportNames from './AirportNames';
import AirportPosition from './AirportPosition';

/**
 * The Airport model module.
 * @module model/Airport
 * @version 1.0
 */
class Airport {
    /**
     * Constructs a new <code>Airport</code>.
     * Array of all available airports or one airport matching the request.
     * @alias module:model/Airport
     */
    constructor() { 
        
        Airport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Airport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Airport} obj Optional instance to populate.
     * @return {module:model/Airport} The populated <code>Airport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Airport();

            if (data.hasOwnProperty('AirportCode')) {
                obj['AirportCode'] = ApiClient.convertToType(data['AirportCode'], 'String');
            }
            if (data.hasOwnProperty('CityCode')) {
                obj['CityCode'] = ApiClient.convertToType(data['CityCode'], 'String');
            }
            if (data.hasOwnProperty('CountryCode')) {
                obj['CountryCode'] = ApiClient.convertToType(data['CountryCode'], 'String');
            }
            if (data.hasOwnProperty('LocationType')) {
                obj['LocationType'] = ApiClient.convertToType(data['LocationType'], 'String');
            }
            if (data.hasOwnProperty('Names')) {
                obj['Names'] = AirportNames.constructFromObject(data['Names']);
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = AirportPosition.constructFromObject(data['Position']);
            }
            if (data.hasOwnProperty('TimeZoneId')) {
                obj['TimeZoneId'] = ApiClient.convertToType(data['TimeZoneId'], 'String');
            }
            if (data.hasOwnProperty('UtcOffset')) {
                obj['UtcOffset'] = ApiClient.convertToType(data['UtcOffset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Airport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Airport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AirportCode'] && !(typeof data['AirportCode'] === 'string' || data['AirportCode'] instanceof String)) {
            throw new Error("Expected the field `AirportCode` to be a primitive type in the JSON string but got " + data['AirportCode']);
        }
        // ensure the json data is a string
        if (data['CityCode'] && !(typeof data['CityCode'] === 'string' || data['CityCode'] instanceof String)) {
            throw new Error("Expected the field `CityCode` to be a primitive type in the JSON string but got " + data['CityCode']);
        }
        // ensure the json data is a string
        if (data['CountryCode'] && !(typeof data['CountryCode'] === 'string' || data['CountryCode'] instanceof String)) {
            throw new Error("Expected the field `CountryCode` to be a primitive type in the JSON string but got " + data['CountryCode']);
        }
        // ensure the json data is a string
        if (data['LocationType'] && !(typeof data['LocationType'] === 'string' || data['LocationType'] instanceof String)) {
            throw new Error("Expected the field `LocationType` to be a primitive type in the JSON string but got " + data['LocationType']);
        }
        // validate the optional field `Names`
        if (data['Names']) { // data not null
          AirportNames.validateJSON(data['Names']);
        }
        // validate the optional field `Position`
        if (data['Position']) { // data not null
          AirportPosition.validateJSON(data['Position']);
        }
        // ensure the json data is a string
        if (data['TimeZoneId'] && !(typeof data['TimeZoneId'] === 'string' || data['TimeZoneId'] instanceof String)) {
            throw new Error("Expected the field `TimeZoneId` to be a primitive type in the JSON string but got " + data['TimeZoneId']);
        }

        return true;
    }


}



/**
 * 3-letter IATA airport code, e.g. “TXL”.
 * @member {String} AirportCode
 */
Airport.prototype['AirportCode'] = undefined;

/**
 * 3-letter IATA city code, e.g. “BER”.
 * @member {String} CityCode
 */
Airport.prototype['CityCode'] = undefined;

/**
 * 2-letter ISO 3166-1 country code, e.g. “DE”.
 * @member {String} CountryCode
 */
Airport.prototype['CountryCode'] = undefined;

/**
 *  “Airport”, “RailwayStation” or “BusStation”.
 * @member {String} LocationType
 */
Airport.prototype['LocationType'] = undefined;

/**
 * @member {module:model/AirportNames} Names
 */
Airport.prototype['Names'] = undefined;

/**
 * @member {module:model/AirportPosition} Position
 */
Airport.prototype['Position'] = undefined;

/**
 * Time zone name airport is in
 * @member {String} TimeZoneId
 */
Airport.prototype['TimeZoneId'] = undefined;

/**
 * Hour offset of airport to UTC time zone
 * @member {Number} UtcOffset
 */
Airport.prototype['UtcOffset'] = undefined;






export default Airport;

