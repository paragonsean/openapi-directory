/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Cargo service.
* @module api/CargoApi
* @version 1.0
*/
export default class CargoApi {

    /**
    * Constructs a new CargoApi. 
    * @alias module:api/CargoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cargoGetRouteFromDateProductCodeByOriginAndDestinationGet operation.
     * @callback module:api/CargoApi~cargoGetRouteFromDateProductCodeByOriginAndDestinationGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all flights
     * Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.
     * @param {String} origin Departure Airport : 3-letter IATA airport code, e.g. FRA.
     * @param {String} destination Arrival airport : 3-letter IATA airport code, e.g. HKG.
     * @param {String} fromDate Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15
     * @param {module:model/String} productCode Product code for requested service and specials : 3-letter eg: YNZ
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {module:api/CargoApi~cargoGetRouteFromDateProductCodeByOriginAndDestinationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(origin, destination, fromDate, productCode, accept, callback) {
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet");
      }
      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet");
      }
      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet");
      }

      let pathParams = {
        'origin': origin,
        'destination': destination,
        'fromDate': fromDate,
        'productCode': productCode
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cargo/getRoute/{origin}-{destination}/{fromDate}/{productCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cargoShipmentTrackingByAWBPrefixAndAWBNumberGet operation.
     * @callback module:api/CargoApi~cargoShipmentTrackingByAWBPrefixAndAWBNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shipment Tracking
     * With this tracking service you can easily retrieve your shipment or flight status information.
     * @param {String} aWBPrefix aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020
     * @param {String} aWBNumber aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {module:api/CargoApi~cargoShipmentTrackingByAWBPrefixAndAWBNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cargoShipmentTrackingByAWBPrefixAndAWBNumberGet(aWBPrefix, aWBNumber, accept, callback) {
      let postBody = null;
      // verify the required parameter 'aWBPrefix' is set
      if (aWBPrefix === undefined || aWBPrefix === null) {
        throw new Error("Missing the required parameter 'aWBPrefix' when calling cargoShipmentTrackingByAWBPrefixAndAWBNumberGet");
      }
      // verify the required parameter 'aWBNumber' is set
      if (aWBNumber === undefined || aWBNumber === null) {
        throw new Error("Missing the required parameter 'aWBNumber' when calling cargoShipmentTrackingByAWBPrefixAndAWBNumberGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cargoShipmentTrackingByAWBPrefixAndAWBNumberGet");
      }

      let pathParams = {
        'aWBPrefix': aWBPrefix,
        'aWBNumber': aWBNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cargo/shipmentTracking/{aWBPrefix}-{aWBNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
