/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Operations service.
* @module api/OperationsApi
* @version 1.0
*/
export default class OperationsApi {

    /**
    * Constructs a new OperationsApi. 
    * @alias module:api/OperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet operation.
     * @callback module:api/OperationsApi~operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flight Status at Arrival Airport
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param {String} airportCode 3-letter IATA aiport code (e.g. 'ZRH')
     * @param {String} fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm)
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
     * @param {String} [offset] Number of records skipped. Defaults to 0
     * @param {module:api/OperationsApi~operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(airportCode, fromDateTime, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'airportCode' is set
      if (airportCode === undefined || airportCode === null) {
        throw new Error("Missing the required parameter 'airportCode' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet");
      }
      // verify the required parameter 'fromDateTime' is set
      if (fromDateTime === undefined || fromDateTime === null) {
        throw new Error("Missing the required parameter 'fromDateTime' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet");
      }

      let pathParams = {
        'airportCode': airportCode,
        'fromDateTime': fromDateTime
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsFlightstatusByFlightNumberAndDateGet operation.
     * @callback module:api/OperationsApi~operationsFlightstatusByFlightNumberAndDateGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flight Status
     * Status of a particular flight (boarding, delayed, etc.).
     * @param {String} flightNumber Flight number including carrier code and any suffix (e.g. 'LH400')
     * @param {String} date The departure date (YYYY-MM-DD) in the local time of the departure airport
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
     * @param {String} [offset] Number of records skipped. Defaults to 0
     * @param {module:api/OperationsApi~operationsFlightstatusByFlightNumberAndDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    operationsFlightstatusByFlightNumberAndDateGet(flightNumber, date, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flightNumber' is set
      if (flightNumber === undefined || flightNumber === null) {
        throw new Error("Missing the required parameter 'flightNumber' when calling operationsFlightstatusByFlightNumberAndDateGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling operationsFlightstatusByFlightNumberAndDateGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling operationsFlightstatusByFlightNumberAndDateGet");
      }

      let pathParams = {
        'flightNumber': flightNumber,
        'date': date
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/operations/flightstatus/{flightNumber}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet operation.
     * @callback module:api/OperationsApi~operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flight Status at Departure Airport
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param {String} airportCode Departure airport. 3-letter IATA airport code (e.g. 'HAM')
     * @param {String} fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm)
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
     * @param {String} [offset] Number of records skipped. Defaults to 0
     * @param {module:api/OperationsApi~operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(airportCode, fromDateTime, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'airportCode' is set
      if (airportCode === undefined || airportCode === null) {
        throw new Error("Missing the required parameter 'airportCode' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet");
      }
      // verify the required parameter 'fromDateTime' is set
      if (fromDateTime === undefined || fromDateTime === null) {
        throw new Error("Missing the required parameter 'fromDateTime' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet");
      }

      let pathParams = {
        'airportCode': airportCode,
        'fromDateTime': fromDateTime
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/operations/flightstatus/departures/{airportCode}/{fromDateTime}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsFlightstatusRouteDateByOriginAndDestinationGet operation.
     * @callback module:api/OperationsApi~operationsFlightstatusRouteDateByOriginAndDestinationGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flight Status by Route
     * Status of flights between a given origin and destination on a given date.
     * @param {String} origin 3-letter IATA airport (e.g. 'FRA')
     * @param {String} destination 3-letter IATA airport code (e.g. 'JFK')
     * @param {String} date Departure date (YYYY-MM-DD) in local time of departure airport
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
     * @param {String} [offset] Number of records skipped. Defaults to 0
     * @param {module:api/OperationsApi~operationsFlightstatusRouteDateByOriginAndDestinationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    operationsFlightstatusRouteDateByOriginAndDestinationGet(origin, destination, date, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet");
      }

      let pathParams = {
        'origin': origin,
        'destination': destination,
        'date': date
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/operations/flightstatus/route/{origin}/{destination}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsSchedulesFromDateTimeByOriginAndDestinationGet operation.
     * @callback module:api/OperationsApi~operationsSchedulesFromDateTimeByOriginAndDestinationGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flight Schedules
     * Scheduled flights between given airports on a given date.
     * @param {String} origin Departure airport. 3-letter IATA airport code (e.g. 'ZRH')
     * @param {String} destination Destination airport. 3-letter IATA airport code (e.g. 'FRA')
     * @param {String} fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {Boolean} [directFlights] Show only direct flights (false=0, true=1). Default is false
     * @param {String} [limit] Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
     * @param {String} [offset] Number of records skipped. Defaults to 0
     * @param {module:api/OperationsApi~operationsSchedulesFromDateTimeByOriginAndDestinationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    operationsSchedulesFromDateTimeByOriginAndDestinationGet(origin, destination, fromDateTime, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet");
      }
      // verify the required parameter 'fromDateTime' is set
      if (fromDateTime === undefined || fromDateTime === null) {
        throw new Error("Missing the required parameter 'fromDateTime' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet");
      }

      let pathParams = {
        'origin': origin,
        'destination': destination,
        'fromDateTime': fromDateTime
      };
      let queryParams = {
        'directFlights': opts['directFlights'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/operations/schedules/{origin}/{destination}/{fromDateTime}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
