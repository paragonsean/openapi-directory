/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Offers service.
* @module api/OffersApi
* @version 1.0
*/
export default class OffersApi {

    /**
    * Constructs a new OffersApi. 
    * @alias module:api/OffersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offersLoungesByLocationGet operation.
     * @callback module:api/OffersApi~offersLoungesByLocationGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lounges
     * Lounge information
     * @param {String} location 3-leter IATA airport or city code (e.g. 'ZRH')
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {Object} opts Optional parameters
     * @param {String} [cabinClass] Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")
     * @param {String} [tierCode] Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")
     * @param {String} [lang] Language code.
     * @param {module:api/OffersApi~offersLoungesByLocationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    offersLoungesByLocationGet(location, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling offersLoungesByLocationGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling offersLoungesByLocationGet");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        'cabinClass': opts['cabinClass'],
        'tierCode': opts['tierCode'],
        'lang': opts['lang']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/offers/lounges/{location}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet operation.
     * @callback module:api/OffersApi~offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Seat Maps
     * Cabin layout and seat characteristics.
     * @param {String} flightNumber Flight number including carrier code and any suffix (e.g. 'LH2037')
     * @param {String} origin Departure airport. 3-letter IATA airport code (e.g. 'TXL')
     * @param {String} destination Destination airport. 3-letter IATA airport code (e.g. 'MUC')
     * @param {String} date Departure date (YYYY-MM-DD)
     * @param {String} cabinClass Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\")
     * @param {String} accept http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")
     * @param {module:api/OffersApi~offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(flightNumber, origin, destination, date, cabinClass, accept, callback) {
      let postBody = null;
      // verify the required parameter 'flightNumber' is set
      if (flightNumber === undefined || flightNumber === null) {
        throw new Error("Missing the required parameter 'flightNumber' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet");
      }
      // verify the required parameter 'cabinClass' is set
      if (cabinClass === undefined || cabinClass === null) {
        throw new Error("Missing the required parameter 'cabinClass' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet");
      }

      let pathParams = {
        'flightNumber': flightNumber,
        'origin': origin,
        'destination': destination,
        'date': date,
        'cabinClass': cabinClass
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/offers/seatmaps/{flightNumber}/{origin}/{destination}/{date}/{cabinClass}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
