/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOperationsApi_H
#define OAI_OAIOperationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOperationsApi : public QObject {
    Q_OBJECT

public:
    OAIOperationsApi(const int timeOut = 0);
    ~OAIOperationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  airport_code QString [required]
    * @param[in]  from_date_time QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(const QString &airport_code, const QString &from_date_time, const QString &accept, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  flight_number QString [required]
    * @param[in]  date QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void operationsFlightstatusByFlightNumberAndDateGet(const QString &flight_number, const QString &date, const QString &accept, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  airport_code QString [required]
    * @param[in]  from_date_time QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(const QString &airport_code, const QString &from_date_time, const QString &accept, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  origin QString [required]
    * @param[in]  destination QString [required]
    * @param[in]  date QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void operationsFlightstatusRouteDateByOriginAndDestinationGet(const QString &origin, const QString &destination, const QString &date, const QString &accept, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  origin QString [required]
    * @param[in]  destination QString [required]
    * @param[in]  from_date_time QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  direct_flights bool [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void operationsSchedulesFromDateTimeByOriginAndDestinationGet(const QString &origin, const QString &destination, const QString &from_date_time, const QString &accept, const ::OpenAPI::OptionalParam<bool> &direct_flights = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCallback(OAIHttpRequestWorker *worker);
    void operationsFlightstatusByFlightNumberAndDateGetCallback(OAIHttpRequestWorker *worker);
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCallback(OAIHttpRequestWorker *worker);
    void operationsFlightstatusRouteDateByOriginAndDestinationGetCallback(OAIHttpRequestWorker *worker);
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignal(OAIObject summary);
    void operationsFlightstatusByFlightNumberAndDateGetSignal(OAIObject summary);
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignal(OAIObject summary);
    void operationsFlightstatusRouteDateByOriginAndDestinationGetSignal(OAIObject summary);
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetSignal(OAIObject summary);


    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void operationsFlightstatusByFlightNumberAndDateGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void operationsFlightstatusRouteDateByOriginAndDestinationGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalError() instead")
    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsFlightstatusByFlightNumberAndDateGetSignalError() instead")
    void operationsFlightstatusByFlightNumberAndDateGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusByFlightNumberAndDateGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalError() instead")
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsFlightstatusRouteDateByOriginAndDestinationGetSignalError() instead")
    void operationsFlightstatusRouteDateByOriginAndDestinationGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusRouteDateByOriginAndDestinationGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalError() instead")
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalErrorFull() instead")
    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsFlightstatusByFlightNumberAndDateGetSignalErrorFull() instead")
    void operationsFlightstatusByFlightNumberAndDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusByFlightNumberAndDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalErrorFull() instead")
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsFlightstatusRouteDateByOriginAndDestinationGetSignalErrorFull() instead")
    void operationsFlightstatusRouteDateByOriginAndDestinationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsFlightstatusRouteDateByOriginAndDestinationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalErrorFull() instead")
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsSchedulesFromDateTimeByOriginAndDestinationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
