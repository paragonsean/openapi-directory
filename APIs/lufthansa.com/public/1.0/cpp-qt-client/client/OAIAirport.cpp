/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirport::OAIAirport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirport::OAIAirport() {
    this->initializeModel();
}

OAIAirport::~OAIAirport() {}

void OAIAirport::initializeModel() {

    m_airport_code_isSet = false;
    m_airport_code_isValid = false;

    m_city_code_isSet = false;
    m_city_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_utc_offset_isSet = false;
    m_utc_offset_isValid = false;
}

void OAIAirport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirport::fromJsonObject(QJsonObject json) {

    m_airport_code_isValid = ::OpenAPI::fromJsonValue(m_airport_code, json[QString("AirportCode")]);
    m_airport_code_isSet = !json[QString("AirportCode")].isNull() && m_airport_code_isValid;

    m_city_code_isValid = ::OpenAPI::fromJsonValue(m_city_code, json[QString("CityCode")]);
    m_city_code_isSet = !json[QString("CityCode")].isNull() && m_city_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("LocationType")]);
    m_location_type_isSet = !json[QString("LocationType")].isNull() && m_location_type_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("Names")]);
    m_names_isSet = !json[QString("Names")].isNull() && m_names_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("TimeZoneId")]);
    m_time_zone_id_isSet = !json[QString("TimeZoneId")].isNull() && m_time_zone_id_isValid;

    m_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_utc_offset, json[QString("UtcOffset")]);
    m_utc_offset_isSet = !json[QString("UtcOffset")].isNull() && m_utc_offset_isValid;
}

QString OAIAirport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirport::asJsonObject() const {
    QJsonObject obj;
    if (m_airport_code_isSet) {
        obj.insert(QString("AirportCode"), ::OpenAPI::toJsonValue(m_airport_code));
    }
    if (m_city_code_isSet) {
        obj.insert(QString("CityCode"), ::OpenAPI::toJsonValue(m_city_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("LocationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_names.isSet()) {
        obj.insert(QString("Names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("TimeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_utc_offset_isSet) {
        obj.insert(QString("UtcOffset"), ::OpenAPI::toJsonValue(m_utc_offset));
    }
    return obj;
}

QString OAIAirport::getAirportCode() const {
    return m_airport_code;
}
void OAIAirport::setAirportCode(const QString &airport_code) {
    m_airport_code = airport_code;
    m_airport_code_isSet = true;
}

bool OAIAirport::is_airport_code_Set() const{
    return m_airport_code_isSet;
}

bool OAIAirport::is_airport_code_Valid() const{
    return m_airport_code_isValid;
}

QString OAIAirport::getCityCode() const {
    return m_city_code;
}
void OAIAirport::setCityCode(const QString &city_code) {
    m_city_code = city_code;
    m_city_code_isSet = true;
}

bool OAIAirport::is_city_code_Set() const{
    return m_city_code_isSet;
}

bool OAIAirport::is_city_code_Valid() const{
    return m_city_code_isValid;
}

QString OAIAirport::getCountryCode() const {
    return m_country_code;
}
void OAIAirport::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAirport::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAirport::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIAirport::getLocationType() const {
    return m_location_type;
}
void OAIAirport::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIAirport::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIAirport::is_location_type_Valid() const{
    return m_location_type_isValid;
}

OAIAirport_Names OAIAirport::getNames() const {
    return m_names;
}
void OAIAirport::setNames(const OAIAirport_Names &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIAirport::is_names_Set() const{
    return m_names_isSet;
}

bool OAIAirport::is_names_Valid() const{
    return m_names_isValid;
}

OAIAirport_Position OAIAirport::getPosition() const {
    return m_position;
}
void OAIAirport::setPosition(const OAIAirport_Position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIAirport::is_position_Set() const{
    return m_position_isSet;
}

bool OAIAirport::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIAirport::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAIAirport::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAIAirport::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAIAirport::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

float OAIAirport::getUtcOffset() const {
    return m_utc_offset;
}
void OAIAirport::setUtcOffset(const float &utc_offset) {
    m_utc_offset = utc_offset;
    m_utc_offset_isSet = true;
}

bool OAIAirport::is_utc_offset_Set() const{
    return m_utc_offset_isSet;
}

bool OAIAirport::is_utc_offset_Valid() const{
    return m_utc_offset_isValid;
}

bool OAIAirport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airport_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
