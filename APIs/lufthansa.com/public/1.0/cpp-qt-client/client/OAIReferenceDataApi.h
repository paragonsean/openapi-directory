/**
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReferenceDataApi_H
#define OAI_OAIReferenceDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAirportResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReferenceDataApi : public QObject {
    Q_OBJECT

public:
    OAIReferenceDataApi(const int timeOut = 0);
    ~OAIReferenceDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  aircraft_code QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void referencesAircraftByAircraftCodeGet(const QString &accept, const QString &aircraft_code, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  airline_code QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void referencesAirlinesByAirlineCodeGet(const QString &accept, const QString &airline_code, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  airport_code QString [required]
    * @param[in]  lang QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  l_hoperated bool [optional]
    */
    virtual void referencesAirportsByAirportCodeGet(const QString &accept, const QString &airport_code, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &l_hoperated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  latitude qint32 [required]
    * @param[in]  longitude qint32 [required]
    * @param[in]  accept QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void referencesAirportsNearestByLatitudeAndLongitudeGet(const qint32 &latitude, const qint32 &longitude, const QString &accept, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  city_code QString [required]
    * @param[in]  lang QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void referencesCitiesByCityCodeGet(const QString &accept, const QString &city_code, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  lang QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void referencesCountriesByCountryCodeGet(const QString &accept, const QString &country_code, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void referencesAircraftByAircraftCodeGetCallback(OAIHttpRequestWorker *worker);
    void referencesAirlinesByAirlineCodeGetCallback(OAIHttpRequestWorker *worker);
    void referencesAirportsByAirportCodeGetCallback(OAIHttpRequestWorker *worker);
    void referencesAirportsNearestByLatitudeAndLongitudeGetCallback(OAIHttpRequestWorker *worker);
    void referencesCitiesByCityCodeGetCallback(OAIHttpRequestWorker *worker);
    void referencesCountriesByCountryCodeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void referencesAircraftByAircraftCodeGetSignal(OAIObject summary);
    void referencesAirlinesByAirlineCodeGetSignal(OAIObject summary);
    void referencesAirportsByAirportCodeGetSignal(OAIAirportResponse summary);
    void referencesAirportsNearestByLatitudeAndLongitudeGetSignal(OAIObject summary);
    void referencesCitiesByCityCodeGetSignal(OAIObject summary);
    void referencesCountriesByCountryCodeGetSignal(OAIObject summary);


    void referencesAircraftByAircraftCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void referencesAirlinesByAirlineCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void referencesAirportsByAirportCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIAirportResponse summary);
    void referencesAirportsNearestByLatitudeAndLongitudeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void referencesCitiesByCityCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void referencesCountriesByCountryCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use referencesAircraftByAircraftCodeGetSignalError() instead")
    void referencesAircraftByAircraftCodeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAircraftByAircraftCodeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesAirlinesByAirlineCodeGetSignalError() instead")
    void referencesAirlinesByAirlineCodeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAirlinesByAirlineCodeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesAirportsByAirportCodeGetSignalError() instead")
    void referencesAirportsByAirportCodeGetSignalE(OAIAirportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAirportsByAirportCodeGetSignalError(OAIAirportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesAirportsNearestByLatitudeAndLongitudeGetSignalError() instead")
    void referencesAirportsNearestByLatitudeAndLongitudeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAirportsNearestByLatitudeAndLongitudeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesCitiesByCityCodeGetSignalError() instead")
    void referencesCitiesByCityCodeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesCitiesByCityCodeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesCountriesByCountryCodeGetSignalError() instead")
    void referencesCountriesByCountryCodeGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesCountriesByCountryCodeGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use referencesAircraftByAircraftCodeGetSignalErrorFull() instead")
    void referencesAircraftByAircraftCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAircraftByAircraftCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesAirlinesByAirlineCodeGetSignalErrorFull() instead")
    void referencesAirlinesByAirlineCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAirlinesByAirlineCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesAirportsByAirportCodeGetSignalErrorFull() instead")
    void referencesAirportsByAirportCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAirportsByAirportCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesAirportsNearestByLatitudeAndLongitudeGetSignalErrorFull() instead")
    void referencesAirportsNearestByLatitudeAndLongitudeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesAirportsNearestByLatitudeAndLongitudeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesCitiesByCityCodeGetSignalErrorFull() instead")
    void referencesCitiesByCityCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesCitiesByCityCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesCountriesByCountryCodeGetSignalErrorFull() instead")
    void referencesCountriesByCountryCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesCountriesByCountryCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
