# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airport_names import AirportNames
from openapi_server.models.airport_position import AirportPosition
from openapi_server import util


class Airport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airport_code: str=None, city_code: str=None, country_code: str=None, location_type: str=None, names: AirportNames=None, position: AirportPosition=None, time_zone_id: str=None, utc_offset: float=None):
        """Airport - a model defined in OpenAPI

        :param airport_code: The airport_code of this Airport.
        :param city_code: The city_code of this Airport.
        :param country_code: The country_code of this Airport.
        :param location_type: The location_type of this Airport.
        :param names: The names of this Airport.
        :param position: The position of this Airport.
        :param time_zone_id: The time_zone_id of this Airport.
        :param utc_offset: The utc_offset of this Airport.
        """
        self.openapi_types = {
            'airport_code': str,
            'city_code': str,
            'country_code': str,
            'location_type': str,
            'names': AirportNames,
            'position': AirportPosition,
            'time_zone_id': str,
            'utc_offset': float
        }

        self.attribute_map = {
            'airport_code': 'AirportCode',
            'city_code': 'CityCode',
            'country_code': 'CountryCode',
            'location_type': 'LocationType',
            'names': 'Names',
            'position': 'Position',
            'time_zone_id': 'TimeZoneId',
            'utc_offset': 'UtcOffset'
        }

        self._airport_code = airport_code
        self._city_code = city_code
        self._country_code = country_code
        self._location_type = location_type
        self._names = names
        self._position = position
        self._time_zone_id = time_zone_id
        self._utc_offset = utc_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Airport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Airport of this Airport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airport_code(self):
        """Gets the airport_code of this Airport.

        3-letter IATA airport code, e.g. “TXL”.

        :return: The airport_code of this Airport.
        :rtype: str
        """
        return self._airport_code

    @airport_code.setter
    def airport_code(self, airport_code):
        """Sets the airport_code of this Airport.

        3-letter IATA airport code, e.g. “TXL”.

        :param airport_code: The airport_code of this Airport.
        :type airport_code: str
        """

        self._airport_code = airport_code

    @property
    def city_code(self):
        """Gets the city_code of this Airport.

        3-letter IATA city code, e.g. “BER”.

        :return: The city_code of this Airport.
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """Sets the city_code of this Airport.

        3-letter IATA city code, e.g. “BER”.

        :param city_code: The city_code of this Airport.
        :type city_code: str
        """

        self._city_code = city_code

    @property
    def country_code(self):
        """Gets the country_code of this Airport.

        2-letter ISO 3166-1 country code, e.g. “DE”.

        :return: The country_code of this Airport.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Airport.

        2-letter ISO 3166-1 country code, e.g. “DE”.

        :param country_code: The country_code of this Airport.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def location_type(self):
        """Gets the location_type of this Airport.

         “Airport”, “RailwayStation” or “BusStation”.

        :return: The location_type of this Airport.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Airport.

         “Airport”, “RailwayStation” or “BusStation”.

        :param location_type: The location_type of this Airport.
        :type location_type: str
        """

        self._location_type = location_type

    @property
    def names(self):
        """Gets the names of this Airport.


        :return: The names of this Airport.
        :rtype: AirportNames
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Airport.


        :param names: The names of this Airport.
        :type names: AirportNames
        """

        self._names = names

    @property
    def position(self):
        """Gets the position of this Airport.


        :return: The position of this Airport.
        :rtype: AirportPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Airport.


        :param position: The position of this Airport.
        :type position: AirportPosition
        """

        self._position = position

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this Airport.

        Time zone name airport is in

        :return: The time_zone_id of this Airport.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this Airport.

        Time zone name airport is in

        :param time_zone_id: The time_zone_id of this Airport.
        :type time_zone_id: str
        """

        self._time_zone_id = time_zone_id

    @property
    def utc_offset(self):
        """Gets the utc_offset of this Airport.

        Hour offset of airport to UTC time zone

        :return: The utc_offset of this Airport.
        :rtype: float
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this Airport.

        Hour offset of airport to UTC time zone

        :param utc_offset: The utc_offset of this Airport.
        :type utc_offset: float
        """

        self._utc_offset = utc_offset
