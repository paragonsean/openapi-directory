/*
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AirportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferenceDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReferenceDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferenceDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for referencesAircraftByAircraftCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAircraftByAircraftCodeGetCall(String accept, String aircraftCode, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/aircraft/{aircraftCode}"
            .replace("{" + "aircraftCode" + "}", localVarApiClient.escapeString(aircraftCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referencesAircraftByAircraftCodeGetValidateBeforeCall(String accept, String aircraftCode, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAircraftByAircraftCodeGet(Async)");
        }

        // verify the required parameter 'aircraftCode' is set
        if (aircraftCode == null) {
            throw new ApiException("Missing the required parameter 'aircraftCode' when calling referencesAircraftByAircraftCodeGet(Async)");
        }

        return referencesAircraftByAircraftCodeGetCall(accept, aircraftCode, limit, offset, _callback);

    }

    /**
     * Aircraft
     * List all aircraft types or one specific aircraft type.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object referencesAircraftByAircraftCodeGet(String accept, String aircraftCode, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = referencesAircraftByAircraftCodeGetWithHttpInfo(accept, aircraftCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Aircraft
     * List all aircraft types or one specific aircraft type.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> referencesAircraftByAircraftCodeGetWithHttpInfo(String accept, String aircraftCode, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = referencesAircraftByAircraftCodeGetValidateBeforeCall(accept, aircraftCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aircraft (asynchronously)
     * List all aircraft types or one specific aircraft type.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAircraftByAircraftCodeGetAsync(String accept, String aircraftCode, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = referencesAircraftByAircraftCodeGetValidateBeforeCall(accept, aircraftCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referencesAirlinesByAirlineCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAirlinesByAirlineCodeGetCall(String accept, String airlineCode, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/airlines/{airlineCode}"
            .replace("{" + "airlineCode" + "}", localVarApiClient.escapeString(airlineCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referencesAirlinesByAirlineCodeGetValidateBeforeCall(String accept, String airlineCode, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAirlinesByAirlineCodeGet(Async)");
        }

        // verify the required parameter 'airlineCode' is set
        if (airlineCode == null) {
            throw new ApiException("Missing the required parameter 'airlineCode' when calling referencesAirlinesByAirlineCodeGet(Async)");
        }

        return referencesAirlinesByAirlineCodeGetCall(accept, airlineCode, limit, offset, _callback);

    }

    /**
     * Airlines
     * List all airlines or one specific airline.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object referencesAirlinesByAirlineCodeGet(String accept, String airlineCode, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = referencesAirlinesByAirlineCodeGetWithHttpInfo(accept, airlineCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Airlines
     * List all airlines or one specific airline.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> referencesAirlinesByAirlineCodeGetWithHttpInfo(String accept, String airlineCode, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = referencesAirlinesByAirlineCodeGetValidateBeforeCall(accept, airlineCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Airlines (asynchronously)
     * List all airlines or one specific airline.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAirlinesByAirlineCodeGetAsync(String accept, String airlineCode, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = referencesAirlinesByAirlineCodeGetValidateBeforeCall(accept, airlineCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referencesAirportsByAirportCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAirportsByAirportCodeGetCall(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/airports/{airportCode}"
            .replace("{" + "airportCode" + "}", localVarApiClient.escapeString(airportCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (lhoperated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LHoperated", lhoperated));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referencesAirportsByAirportCodeGetValidateBeforeCall(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAirportsByAirportCodeGet(Async)");
        }

        // verify the required parameter 'airportCode' is set
        if (airportCode == null) {
            throw new ApiException("Missing the required parameter 'airportCode' when calling referencesAirportsByAirportCodeGet(Async)");
        }

        return referencesAirportsByAirportCodeGetCall(accept, airportCode, lang, limit, offset, lhoperated, _callback);

    }

    /**
     * Airports
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @return AirportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AirportResponse referencesAirportsByAirportCodeGet(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated) throws ApiException {
        ApiResponse<AirportResponse> localVarResp = referencesAirportsByAirportCodeGetWithHttpInfo(accept, airportCode, lang, limit, offset, lhoperated);
        return localVarResp.getData();
    }

    /**
     * Airports
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @return ApiResponse&lt;AirportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirportResponse> referencesAirportsByAirportCodeGetWithHttpInfo(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated) throws ApiException {
        okhttp3.Call localVarCall = referencesAirportsByAirportCodeGetValidateBeforeCall(accept, airportCode, lang, limit, offset, lhoperated, null);
        Type localVarReturnType = new TypeToken<AirportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Airports (asynchronously)
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAirportsByAirportCodeGetAsync(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated, final ApiCallback<AirportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = referencesAirportsByAirportCodeGetValidateBeforeCall(accept, airportCode, lang, limit, offset, lhoperated, _callback);
        Type localVarReturnType = new TypeToken<AirportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referencesAirportsNearestByLatitudeAndLongitudeGet
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAirportsNearestByLatitudeAndLongitudeGetCall(Integer latitude, Integer longitude, String accept, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/airports/nearest/{latitude},{longitude}"
            .replace("{" + "latitude" + "}", localVarApiClient.escapeString(latitude.toString()))
            .replace("{" + "longitude" + "}", localVarApiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referencesAirportsNearestByLatitudeAndLongitudeGetValidateBeforeCall(Integer latitude, Integer longitude, String accept, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling referencesAirportsNearestByLatitudeAndLongitudeGet(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling referencesAirportsNearestByLatitudeAndLongitudeGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAirportsNearestByLatitudeAndLongitudeGet(Async)");
        }

        return referencesAirportsNearestByLatitudeAndLongitudeGetCall(latitude, longitude, accept, lang, _callback);

    }

    /**
     * Nearest Airports
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object referencesAirportsNearestByLatitudeAndLongitudeGet(Integer latitude, Integer longitude, String accept, String lang) throws ApiException {
        ApiResponse<Object> localVarResp = referencesAirportsNearestByLatitudeAndLongitudeGetWithHttpInfo(latitude, longitude, accept, lang);
        return localVarResp.getData();
    }

    /**
     * Nearest Airports
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> referencesAirportsNearestByLatitudeAndLongitudeGetWithHttpInfo(Integer latitude, Integer longitude, String accept, String lang) throws ApiException {
        okhttp3.Call localVarCall = referencesAirportsNearestByLatitudeAndLongitudeGetValidateBeforeCall(latitude, longitude, accept, lang, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Nearest Airports (asynchronously)
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesAirportsNearestByLatitudeAndLongitudeGetAsync(Integer latitude, Integer longitude, String accept, String lang, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = referencesAirportsNearestByLatitudeAndLongitudeGetValidateBeforeCall(latitude, longitude, accept, lang, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referencesCitiesByCityCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesCitiesByCityCodeGetCall(String accept, String cityCode, String lang, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/cities/{cityCode}"
            .replace("{" + "cityCode" + "}", localVarApiClient.escapeString(cityCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referencesCitiesByCityCodeGetValidateBeforeCall(String accept, String cityCode, String lang, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesCitiesByCityCodeGet(Async)");
        }

        // verify the required parameter 'cityCode' is set
        if (cityCode == null) {
            throw new ApiException("Missing the required parameter 'cityCode' when calling referencesCitiesByCityCodeGet(Async)");
        }

        return referencesCitiesByCityCodeGetCall(accept, cityCode, lang, limit, offset, _callback);

    }

    /**
     * Cities
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object referencesCitiesByCityCodeGet(String accept, String cityCode, String lang, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = referencesCitiesByCityCodeGetWithHttpInfo(accept, cityCode, lang, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Cities
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> referencesCitiesByCityCodeGetWithHttpInfo(String accept, String cityCode, String lang, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = referencesCitiesByCityCodeGetValidateBeforeCall(accept, cityCode, lang, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cities (asynchronously)
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesCitiesByCityCodeGetAsync(String accept, String cityCode, String lang, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = referencesCitiesByCityCodeGetValidateBeforeCall(accept, cityCode, lang, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referencesCountriesByCountryCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesCountriesByCountryCodeGetCall(String accept, String countryCode, String lang, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/countries/{countryCode}"
            .replace("{" + "countryCode" + "}", localVarApiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referencesCountriesByCountryCodeGetValidateBeforeCall(String accept, String countryCode, String lang, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesCountriesByCountryCodeGet(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling referencesCountriesByCountryCodeGet(Async)");
        }

        return referencesCountriesByCountryCodeGetCall(accept, countryCode, lang, limit, offset, _callback);

    }

    /**
     * Countries
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object referencesCountriesByCountryCodeGet(String accept, String countryCode, String lang, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = referencesCountriesByCountryCodeGetWithHttpInfo(accept, countryCode, lang, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Countries
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> referencesCountriesByCountryCodeGetWithHttpInfo(String accept, String countryCode, String lang, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = referencesCountriesByCountryCodeGetValidateBeforeCall(accept, countryCode, lang, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Countries (asynchronously)
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referencesCountriesByCountryCodeGetAsync(String accept, String countryCode, String lang, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = referencesCountriesByCountryCodeGetValidateBeforeCall(accept, countryCode, lang, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
