/*
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}"
            .replace("{" + "airportCode" + "}", localVarApiClient.escapeString(airportCode.toString()))
            .replace("{" + "fromDateTime" + "}", localVarApiClient.escapeString(fromDateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetValidateBeforeCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'airportCode' is set
        if (airportCode == null) {
            throw new ApiException("Missing the required parameter 'airportCode' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(Async)");
        }

        // verify the required parameter 'fromDateTime' is set
        if (fromDateTime == null) {
            throw new ApiException("Missing the required parameter 'fromDateTime' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(Async)");
        }

        return operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCall(airportCode, fromDateTime, accept, limit, offset, _callback);

    }

    /**
     * Flight Status at Arrival Airport
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetWithHttpInfo(airportCode, fromDateTime, accept, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Flight Status at Arrival Airport
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetWithHttpInfo(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flight Status at Arrival Airport (asynchronously)
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetAsync(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsFlightstatusByFlightNumberAndDateGet
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusByFlightNumberAndDateGetCall(String flightNumber, String date, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/{flightNumber}/{date}"
            .replace("{" + "flightNumber" + "}", localVarApiClient.escapeString(flightNumber.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsFlightstatusByFlightNumberAndDateGetValidateBeforeCall(String flightNumber, String date, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flightNumber' is set
        if (flightNumber == null) {
            throw new ApiException("Missing the required parameter 'flightNumber' when calling operationsFlightstatusByFlightNumberAndDateGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling operationsFlightstatusByFlightNumberAndDateGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusByFlightNumberAndDateGet(Async)");
        }

        return operationsFlightstatusByFlightNumberAndDateGetCall(flightNumber, date, accept, limit, offset, _callback);

    }

    /**
     * Flight Status
     * Status of a particular flight (boarding, delayed, etc.).
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object operationsFlightstatusByFlightNumberAndDateGet(String flightNumber, String date, String accept, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = operationsFlightstatusByFlightNumberAndDateGetWithHttpInfo(flightNumber, date, accept, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Flight Status
     * Status of a particular flight (boarding, delayed, etc.).
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> operationsFlightstatusByFlightNumberAndDateGetWithHttpInfo(String flightNumber, String date, String accept, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = operationsFlightstatusByFlightNumberAndDateGetValidateBeforeCall(flightNumber, date, accept, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flight Status (asynchronously)
     * Status of a particular flight (boarding, delayed, etc.).
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusByFlightNumberAndDateGetAsync(String flightNumber, String date, String accept, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsFlightstatusByFlightNumberAndDateGetValidateBeforeCall(flightNumber, date, accept, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/departures/{airportCode}/{fromDateTime}"
            .replace("{" + "airportCode" + "}", localVarApiClient.escapeString(airportCode.toString()))
            .replace("{" + "fromDateTime" + "}", localVarApiClient.escapeString(fromDateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetValidateBeforeCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'airportCode' is set
        if (airportCode == null) {
            throw new ApiException("Missing the required parameter 'airportCode' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(Async)");
        }

        // verify the required parameter 'fromDateTime' is set
        if (fromDateTime == null) {
            throw new ApiException("Missing the required parameter 'fromDateTime' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(Async)");
        }

        return operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCall(airportCode, fromDateTime, accept, limit, offset, _callback);

    }

    /**
     * Flight Status at Departure Airport
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetWithHttpInfo(airportCode, fromDateTime, accept, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Flight Status at Departure Airport
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetWithHttpInfo(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flight Status at Departure Airport (asynchronously)
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetAsync(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsFlightstatusRouteDateByOriginAndDestinationGet
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusRouteDateByOriginAndDestinationGetCall(String origin, String destination, String date, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/route/{origin}/{destination}/{date}"
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "destination" + "}", localVarApiClient.escapeString(destination.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsFlightstatusRouteDateByOriginAndDestinationGetValidateBeforeCall(String origin, String destination, String date, String accept, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }

        return operationsFlightstatusRouteDateByOriginAndDestinationGetCall(origin, destination, date, accept, limit, offset, _callback);

    }

    /**
     * Flight Status by Route
     * Status of flights between a given origin and destination on a given date.
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object operationsFlightstatusRouteDateByOriginAndDestinationGet(String origin, String destination, String date, String accept, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = operationsFlightstatusRouteDateByOriginAndDestinationGetWithHttpInfo(origin, destination, date, accept, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Flight Status by Route
     * Status of flights between a given origin and destination on a given date.
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> operationsFlightstatusRouteDateByOriginAndDestinationGetWithHttpInfo(String origin, String destination, String date, String accept, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = operationsFlightstatusRouteDateByOriginAndDestinationGetValidateBeforeCall(origin, destination, date, accept, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flight Status by Route (asynchronously)
     * Status of flights between a given origin and destination on a given date.
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsFlightstatusRouteDateByOriginAndDestinationGetAsync(String origin, String destination, String date, String accept, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsFlightstatusRouteDateByOriginAndDestinationGetValidateBeforeCall(origin, destination, date, accept, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsSchedulesFromDateTimeByOriginAndDestinationGet
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsSchedulesFromDateTimeByOriginAndDestinationGetCall(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/schedules/{origin}/{destination}/{fromDateTime}"
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "destination" + "}", localVarApiClient.escapeString(destination.toString()))
            .replace("{" + "fromDateTime" + "}", localVarApiClient.escapeString(fromDateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (directFlights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("directFlights", directFlights));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsSchedulesFromDateTimeByOriginAndDestinationGetValidateBeforeCall(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }

        // verify the required parameter 'fromDateTime' is set
        if (fromDateTime == null) {
            throw new ApiException("Missing the required parameter 'fromDateTime' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }

        return operationsSchedulesFromDateTimeByOriginAndDestinationGetCall(origin, destination, fromDateTime, accept, directFlights, limit, offset, _callback);

    }

    /**
     * Flight Schedules
     * Scheduled flights between given airports on a given date.
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object operationsSchedulesFromDateTimeByOriginAndDestinationGet(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset) throws ApiException {
        ApiResponse<Object> localVarResp = operationsSchedulesFromDateTimeByOriginAndDestinationGetWithHttpInfo(origin, destination, fromDateTime, accept, directFlights, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Flight Schedules
     * Scheduled flights between given airports on a given date.
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> operationsSchedulesFromDateTimeByOriginAndDestinationGetWithHttpInfo(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = operationsSchedulesFromDateTimeByOriginAndDestinationGetValidateBeforeCall(origin, destination, fromDateTime, accept, directFlights, limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flight Schedules (asynchronously)
     * Scheduled flights between given airports on a given date.
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsSchedulesFromDateTimeByOriginAndDestinationGetAsync(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsSchedulesFromDateTimeByOriginAndDestinationGetValidateBeforeCall(origin, destination, fromDateTime, accept, directFlights, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
