/*
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OffersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OffersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OffersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for offersLoungesByLocationGet
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offersLoungesByLocationGetCall(String location, String accept, String cabinClass, String tierCode, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/lounges/{location}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cabinClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabinClass", cabinClass));
        }

        if (tierCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tierCode", tierCode));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offersLoungesByLocationGetValidateBeforeCall(String location, String accept, String cabinClass, String tierCode, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling offersLoungesByLocationGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling offersLoungesByLocationGet(Async)");
        }

        return offersLoungesByLocationGetCall(location, accept, cabinClass, tierCode, lang, _callback);

    }

    /**
     * Lounges
     * Lounge information
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object offersLoungesByLocationGet(String location, String accept, String cabinClass, String tierCode, String lang) throws ApiException {
        ApiResponse<Object> localVarResp = offersLoungesByLocationGetWithHttpInfo(location, accept, cabinClass, tierCode, lang);
        return localVarResp.getData();
    }

    /**
     * Lounges
     * Lounge information
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> offersLoungesByLocationGetWithHttpInfo(String location, String accept, String cabinClass, String tierCode, String lang) throws ApiException {
        okhttp3.Call localVarCall = offersLoungesByLocationGetValidateBeforeCall(location, accept, cabinClass, tierCode, lang, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lounges (asynchronously)
     * Lounge information
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offersLoungesByLocationGetAsync(String location, String accept, String cabinClass, String tierCode, String lang, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = offersLoungesByLocationGetValidateBeforeCall(location, accept, cabinClass, tierCode, lang, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetCall(String flightNumber, String origin, String destination, String date, String cabinClass, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/seatmaps/{flightNumber}/{origin}/{destination}/{date}/{cabinClass}"
            .replace("{" + "flightNumber" + "}", localVarApiClient.escapeString(flightNumber.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "destination" + "}", localVarApiClient.escapeString(destination.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "cabinClass" + "}", localVarApiClient.escapeString(cabinClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetValidateBeforeCall(String flightNumber, String origin, String destination, String date, String cabinClass, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flightNumber' is set
        if (flightNumber == null) {
            throw new ApiException("Missing the required parameter 'flightNumber' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }

        // verify the required parameter 'cabinClass' is set
        if (cabinClass == null) {
            throw new ApiException("Missing the required parameter 'cabinClass' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }

        return offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetCall(flightNumber, origin, destination, date, cabinClass, accept, _callback);

    }

    /**
     * Seat Maps
     * Cabin layout and seat characteristics.
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(String flightNumber, String origin, String destination, String date, String cabinClass, String accept) throws ApiException {
        ApiResponse<Object> localVarResp = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetWithHttpInfo(flightNumber, origin, destination, date, cabinClass, accept);
        return localVarResp.getData();
    }

    /**
     * Seat Maps
     * Cabin layout and seat characteristics.
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetWithHttpInfo(String flightNumber, String origin, String destination, String date, String cabinClass, String accept) throws ApiException {
        okhttp3.Call localVarCall = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetValidateBeforeCall(flightNumber, origin, destination, date, cabinClass, accept, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Seat Maps (asynchronously)
     * Cabin layout and seat characteristics.
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetAsync(String flightNumber, String origin, String destination, String date, String cabinClass, String accept, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetValidateBeforeCall(flightNumber, origin, destination, date, cabinClass, accept, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
