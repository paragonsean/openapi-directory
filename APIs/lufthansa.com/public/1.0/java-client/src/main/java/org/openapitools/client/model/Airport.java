/*
 * LH Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AirportNames;
import org.openapitools.client.model.AirportPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Array of all available airports or one airport matching the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:34.692836-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Airport {
  public static final String SERIALIZED_NAME_AIRPORT_CODE = "AirportCode";
  @SerializedName(SERIALIZED_NAME_AIRPORT_CODE)
  private String airportCode;

  public static final String SERIALIZED_NAME_CITY_CODE = "CityCode";
  @SerializedName(SERIALIZED_NAME_CITY_CODE)
  private String cityCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "LocationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private String locationType;

  public static final String SERIALIZED_NAME_NAMES = "Names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private AirportNames names;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private AirportPosition position;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "TimeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private String timeZoneId;

  public static final String SERIALIZED_NAME_UTC_OFFSET = "UtcOffset";
  @SerializedName(SERIALIZED_NAME_UTC_OFFSET)
  private Float utcOffset;

  public Airport() {
  }

  public Airport airportCode(String airportCode) {
    this.airportCode = airportCode;
    return this;
  }

  /**
   * 3-letter IATA airport code, e.g. “TXL”.
   * @return airportCode
   */
  @javax.annotation.Nullable
  public String getAirportCode() {
    return airportCode;
  }

  public void setAirportCode(String airportCode) {
    this.airportCode = airportCode;
  }


  public Airport cityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  /**
   * 3-letter IATA city code, e.g. “BER”.
   * @return cityCode
   */
  @javax.annotation.Nullable
  public String getCityCode() {
    return cityCode;
  }

  public void setCityCode(String cityCode) {
    this.cityCode = cityCode;
  }


  public Airport countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * 2-letter ISO 3166-1 country code, e.g. “DE”.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Airport locationType(String locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   *  “Airport”, “RailwayStation” or “BusStation”.
   * @return locationType
   */
  @javax.annotation.Nullable
  public String getLocationType() {
    return locationType;
  }

  public void setLocationType(String locationType) {
    this.locationType = locationType;
  }


  public Airport names(AirportNames names) {
    this.names = names;
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public AirportNames getNames() {
    return names;
  }

  public void setNames(AirportNames names) {
    this.names = names;
  }


  public Airport position(AirportPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public AirportPosition getPosition() {
    return position;
  }

  public void setPosition(AirportPosition position) {
    this.position = position;
  }


  public Airport timeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
    return this;
  }

  /**
   * Time zone name airport is in
   * @return timeZoneId
   */
  @javax.annotation.Nullable
  public String getTimeZoneId() {
    return timeZoneId;
  }

  public void setTimeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
  }


  public Airport utcOffset(Float utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

  /**
   * Hour offset of airport to UTC time zone
   * @return utcOffset
   */
  @javax.annotation.Nullable
  public Float getUtcOffset() {
    return utcOffset;
  }

  public void setUtcOffset(Float utcOffset) {
    this.utcOffset = utcOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Airport airport = (Airport) o;
    return Objects.equals(this.airportCode, airport.airportCode) &&
        Objects.equals(this.cityCode, airport.cityCode) &&
        Objects.equals(this.countryCode, airport.countryCode) &&
        Objects.equals(this.locationType, airport.locationType) &&
        Objects.equals(this.names, airport.names) &&
        Objects.equals(this.position, airport.position) &&
        Objects.equals(this.timeZoneId, airport.timeZoneId) &&
        Objects.equals(this.utcOffset, airport.utcOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airportCode, cityCode, countryCode, locationType, names, position, timeZoneId, utcOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Airport {\n");
    sb.append("    airportCode: ").append(toIndentedString(airportCode)).append("\n");
    sb.append("    cityCode: ").append(toIndentedString(cityCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    utcOffset: ").append(toIndentedString(utcOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AirportCode");
    openapiFields.add("CityCode");
    openapiFields.add("CountryCode");
    openapiFields.add("LocationType");
    openapiFields.add("Names");
    openapiFields.add("Position");
    openapiFields.add("TimeZoneId");
    openapiFields.add("UtcOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Airport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Airport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Airport is not found in the empty JSON string", Airport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Airport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Airport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AirportCode") != null && !jsonObj.get("AirportCode").isJsonNull()) && !jsonObj.get("AirportCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AirportCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AirportCode").toString()));
      }
      if ((jsonObj.get("CityCode") != null && !jsonObj.get("CityCode").isJsonNull()) && !jsonObj.get("CityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CityCode").toString()));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      if ((jsonObj.get("LocationType") != null && !jsonObj.get("LocationType").isJsonNull()) && !jsonObj.get("LocationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocationType").toString()));
      }
      // validate the optional field `Names`
      if (jsonObj.get("Names") != null && !jsonObj.get("Names").isJsonNull()) {
        AirportNames.validateJsonElement(jsonObj.get("Names"));
      }
      // validate the optional field `Position`
      if (jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) {
        AirportPosition.validateJsonElement(jsonObj.get("Position"));
      }
      if ((jsonObj.get("TimeZoneId") != null && !jsonObj.get("TimeZoneId").isJsonNull()) && !jsonObj.get("TimeZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeZoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Airport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Airport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Airport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Airport.class));

       return (TypeAdapter<T>) new TypeAdapter<Airport>() {
           @Override
           public void write(JsonWriter out, Airport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Airport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Airport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Airport
   * @throws IOException if the JSON string is invalid with respect to Airport
   */
  public static Airport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Airport.class);
  }

  /**
   * Convert an instance of Airport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

