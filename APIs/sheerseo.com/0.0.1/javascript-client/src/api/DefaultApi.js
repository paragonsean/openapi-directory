/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectRequest from '../model/CollectRequest';
import ErrorResponse from '../model/ErrorResponse';
import RankCollectResponse from '../model/RankCollectResponse';
import RankSubmitRequest from '../model/RankSubmitRequest';
import RankSubmitResponse from '../model/RankSubmitResponse';
import SerpCollectResponse from '../model/SerpCollectResponse';
import SerpSubmitRequest from '../model/SerpSubmitRequest';
import SerpSubmitResponse from '../model/SerpSubmitResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rankCollect operation.
     * @callback module:api/DefaultApi~rankCollectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RankCollectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit serp jobs
     * @param {module:model/CollectRequest} body The body of the reqest to collect SERPs
     * @param {module:api/DefaultApi~rankCollectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RankCollectResponse}
     */
    rankCollect(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rankCollect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = RankCollectResponse;
      return this.apiClient.callApi(
        '/rank-collect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rankSubmit operation.
     * @callback module:api/DefaultApi~rankSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RankSubmitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit rank jobs
     * @param {module:model/RankSubmitRequest} body The body of the reqest to submit SERPs
     * @param {module:api/DefaultApi~rankSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RankSubmitResponse}
     */
    rankSubmit(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rankSubmit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = RankSubmitResponse;
      return this.apiClient.callApi(
        '/rank-submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serpCollect operation.
     * @callback module:api/DefaultApi~serpCollectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SerpCollectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit serp jobs
     * @param {module:model/CollectRequest} body The body of the reqest to collect SERPs
     * @param {module:api/DefaultApi~serpCollectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SerpCollectResponse}
     */
    serpCollect(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling serpCollect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SerpCollectResponse;
      return this.apiClient.callApi(
        '/serp-collect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serpSubmit operation.
     * @callback module:api/DefaultApi~serpSubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SerpSubmitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit serp jobs
     * @param {module:model/SerpSubmitRequest} body The body of the reqest to submit SERPs
     * @param {module:api/DefaultApi~serpSubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SerpSubmitResponse}
     */
    serpSubmit(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling serpSubmit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SerpSubmitResponse;
      return this.apiClient.callApi(
        '/serp-submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
