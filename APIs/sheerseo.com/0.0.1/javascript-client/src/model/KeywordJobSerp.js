/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeywordJobSerp model module.
 * @module model/KeywordJobSerp
 * @version 0.0.1
 */
class KeywordJobSerp {
    /**
     * Constructs a new <code>KeywordJobSerp</code>.
     * @alias module:model/KeywordJobSerp
     * @param keyword {String} keyword (search term)
     * @param localizationCode {module:model/KeywordJobSerp.LocalizationCodeEnum} A code for the localization, which is a combination of country and language
     */
    constructor(keyword, localizationCode) { 
        
        KeywordJobSerp.initialize(this, keyword, localizationCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyword, localizationCode) { 
        obj['keyword'] = keyword;
        obj['localization_code'] = localizationCode;
        obj['search_engine'] = 'google';
    }

    /**
     * Constructs a <code>KeywordJobSerp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeywordJobSerp} obj Optional instance to populate.
     * @return {module:model/KeywordJobSerp} The populated <code>KeywordJobSerp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeywordJobSerp();

            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('localization_code')) {
                obj['localization_code'] = ApiClient.convertToType(data['localization_code'], 'String');
            }
            if (data.hasOwnProperty('localization_zip')) {
                obj['localization_zip'] = ApiClient.convertToType(data['localization_zip'], 'String');
            }
            if (data.hasOwnProperty('search_engine')) {
                obj['search_engine'] = ApiClient.convertToType(data['search_engine'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeywordJobSerp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeywordJobSerp</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeywordJobSerp.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is a string
        if (data['localization_code'] && !(typeof data['localization_code'] === 'string' || data['localization_code'] instanceof String)) {
            throw new Error("Expected the field `localization_code` to be a primitive type in the JSON string but got " + data['localization_code']);
        }
        // ensure the json data is a string
        if (data['localization_zip'] && !(typeof data['localization_zip'] === 'string' || data['localization_zip'] instanceof String)) {
            throw new Error("Expected the field `localization_zip` to be a primitive type in the JSON string but got " + data['localization_zip']);
        }
        // ensure the json data is a string
        if (data['search_engine'] && !(typeof data['search_engine'] === 'string' || data['search_engine'] instanceof String)) {
            throw new Error("Expected the field `search_engine` to be a primitive type in the JSON string but got " + data['search_engine']);
        }

        return true;
    }


}

KeywordJobSerp.RequiredProperties = ["keyword", "localization_code"];

/**
 * keyword (search term)
 * @member {String} keyword
 */
KeywordJobSerp.prototype['keyword'] = undefined;

/**
 * A code for the localization, which is a combination of country and language
 * @member {module:model/KeywordJobSerp.LocalizationCodeEnum} localization_code
 */
KeywordJobSerp.prototype['localization_code'] = undefined;

/**
 * option to localize the results per zip code
 * @member {String} localization_zip
 */
KeywordJobSerp.prototype['localization_zip'] = undefined;

/**
 * google/bing/google_mobile
 * @member {module:model/KeywordJobSerp.SearchEngineEnum} search_engine
 * @default 'google'
 */
KeywordJobSerp.prototype['search_engine'] = 'google';





/**
 * Allowed values for the <code>localization_code</code> property.
 * @enum {String}
 * @readonly
 */
KeywordJobSerp['LocalizationCodeEnum'] = {

    /**
     * value: "us"
     * @const
     */
    "us": "us",

    /**
     * value: "uk"
     * @const
     */
    "uk": "uk",

    /**
     * value: "au"
     * @const
     */
    "au": "au",

    /**
     * value: "br"
     * @const
     */
    "br": "br",

    /**
     * value: "be_dutch"
     * @const
     */
    "be_dutch": "be_dutch",

    /**
     * value: "be_french"
     * @const
     */
    "be_french": "be_french",

    /**
     * value: "ca"
     * @const
     */
    "ca": "ca",

    /**
     * value: "de"
     * @const
     */
    "de": "de",

    /**
     * value: "es"
     * @const
     */
    "es": "es",

    /**
     * value: "ie"
     * @const
     */
    "ie": "ie",

    /**
     * value: "il"
     * @const
     */
    "il": "il",

    /**
     * value: "nl"
     * @const
     */
    "nl": "nl",

    /**
     * value: "sg"
     * @const
     */
    "sg": "sg",

    /**
     * value: "za"
     * @const
     */
    "za": "za",

    /**
     * value: "it"
     * @const
     */
    "it": "it",

    /**
     * value: "is"
     * @const
     */
    "is": "is",

    /**
     * value: "ch"
     * @const
     */
    "ch": "ch",

    /**
     * value: "fr"
     * @const
     */
    "fr": "fr",

    /**
     * value: "se"
     * @const
     */
    "se": "se",

    /**
     * value: "at"
     * @const
     */
    "at": "at",

    /**
     * value: "dk"
     * @const
     */
    "dk": "dk",

    /**
     * value: "nz"
     * @const
     */
    "nz": "nz",

    /**
     * value: "gr"
     * @const
     */
    "gr": "gr",

    /**
     * value: "in"
     * @const
     */
    "in": "in",

    /**
     * value: "ms"
     * @const
     */
    "ms": "ms",

    /**
     * value: "pl"
     * @const
     */
    "pl": "pl",

    /**
     * value: "hk"
     * @const
     */
    "hk": "hk",

    /**
     * value: "id"
     * @const
     */
    "id": "id",

    /**
     * value: "ru"
     * @const
     */
    "ru": "ru",

    /**
     * value: "ae"
     * @const
     */
    "ae": "ae",

    /**
     * value: "fi"
     * @const
     */
    "fi": "fi",

    /**
     * value: "pt"
     * @const
     */
    "pt": "pt",

    /**
     * value: "mx"
     * @const
     */
    "mx": "mx",

    /**
     * value: "tr"
     * @const
     */
    "tr": "tr",

    /**
     * value: "cl"
     * @const
     */
    "cl": "cl",

    /**
     * value: "jp"
     * @const
     */
    "jp": "jp",

    /**
     * value: "ar"
     * @const
     */
    "ar": "ar"
};


/**
 * Allowed values for the <code>search_engine</code> property.
 * @enum {String}
 * @readonly
 */
KeywordJobSerp['SearchEngineEnum'] = {

    /**
     * value: "google"
     * @const
     */
    "google": "google",

    /**
     * value: "bing"
     * @const
     */
    "bing": "bing",

    /**
     * value: "google_mobile"
     * @const
     */
    "google_mobile": "google_mobile"
};



export default KeywordJobSerp;

