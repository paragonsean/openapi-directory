/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeywordJobRank from './KeywordJobRank';

/**
 * The RankSubmitRequest model module.
 * @module model/RankSubmitRequest
 * @version 0.0.1
 */
class RankSubmitRequest {
    /**
     * Constructs a new <code>RankSubmitRequest</code>.
     * @alias module:model/RankSubmitRequest
     * @param tasks {Array.<module:model/KeywordJobRank>} The keyword RANK jobs. Maximum 1000 jobs per a single request.
     */
    constructor(tasks) { 
        
        RankSubmitRequest.initialize(this, tasks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tasks) { 
        obj['tasks'] = tasks;
    }

    /**
     * Constructs a <code>RankSubmitRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RankSubmitRequest} obj Optional instance to populate.
     * @return {module:model/RankSubmitRequest} The populated <code>RankSubmitRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RankSubmitRequest();

            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [KeywordJobRank]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RankSubmitRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RankSubmitRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RankSubmitRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                KeywordJobRank.validateJSON(item);
            };
        }

        return true;
    }


}

RankSubmitRequest.RequiredProperties = ["tasks"];

/**
 * The priority for the keyword jobs submitted. High priority costs double credits. Default value is low.
 * @member {module:model/RankSubmitRequest.PriorityEnum} priority
 */
RankSubmitRequest.prototype['priority'] = undefined;

/**
 * The keyword RANK jobs. Maximum 1000 jobs per a single request.
 * @member {Array.<module:model/KeywordJobRank>} tasks
 */
RankSubmitRequest.prototype['tasks'] = undefined;





/**
 * Allowed values for the <code>priority</code> property.
 * @enum {String}
 * @readonly
 */
RankSubmitRequest['PriorityEnum'] = {

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};



export default RankSubmitRequest;

