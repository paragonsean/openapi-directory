/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SerpCollectResponseTasksInnerTaskIdOrganicResultsInner from './SerpCollectResponseTasksInnerTaskIdOrganicResultsInner';

/**
 * The SerpCollectResponseTasksInnerTaskId model module.
 * @module model/SerpCollectResponseTasksInnerTaskId
 * @version 0.0.1
 */
class SerpCollectResponseTasksInnerTaskId {
    /**
     * Constructs a new <code>SerpCollectResponseTasksInnerTaskId</code>.
     * @alias module:model/SerpCollectResponseTasksInnerTaskId
     */
    constructor() { 
        
        SerpCollectResponseTasksInnerTaskId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SerpCollectResponseTasksInnerTaskId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SerpCollectResponseTasksInnerTaskId} obj Optional instance to populate.
     * @return {module:model/SerpCollectResponseTasksInnerTaskId} The populated <code>SerpCollectResponseTasksInnerTaskId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SerpCollectResponseTasksInnerTaskId();

            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('localization_code')) {
                obj['localization_code'] = ApiClient.convertToType(data['localization_code'], 'String');
            }
            if (data.hasOwnProperty('localization_zip')) {
                obj['localization_zip'] = ApiClient.convertToType(data['localization_zip'], 'String');
            }
            if (data.hasOwnProperty('num_results')) {
                obj['num_results'] = ApiClient.convertToType(data['num_results'], 'Number');
            }
            if (data.hasOwnProperty('organic_results')) {
                obj['organic_results'] = ApiClient.convertToType(data['organic_results'], [SerpCollectResponseTasksInnerTaskIdOrganicResultsInner]);
            }
            if (data.hasOwnProperty('ready')) {
                obj['ready'] = ApiClient.convertToType(data['ready'], 'String');
            }
            if (data.hasOwnProperty('search_engine')) {
                obj['search_engine'] = ApiClient.convertToType(data['search_engine'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SerpCollectResponseTasksInnerTaskId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SerpCollectResponseTasksInnerTaskId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is a string
        if (data['localization_code'] && !(typeof data['localization_code'] === 'string' || data['localization_code'] instanceof String)) {
            throw new Error("Expected the field `localization_code` to be a primitive type in the JSON string but got " + data['localization_code']);
        }
        // ensure the json data is a string
        if (data['localization_zip'] && !(typeof data['localization_zip'] === 'string' || data['localization_zip'] instanceof String)) {
            throw new Error("Expected the field `localization_zip` to be a primitive type in the JSON string but got " + data['localization_zip']);
        }
        if (data['organic_results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organic_results'])) {
                throw new Error("Expected the field `organic_results` to be an array in the JSON data but got " + data['organic_results']);
            }
            // validate the optional field `organic_results` (array)
            for (const item of data['organic_results']) {
                SerpCollectResponseTasksInnerTaskIdOrganicResultsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ready'] && !(typeof data['ready'] === 'string' || data['ready'] instanceof String)) {
            throw new Error("Expected the field `ready` to be a primitive type in the JSON string but got " + data['ready']);
        }
        // ensure the json data is a string
        if (data['search_engine'] && !(typeof data['search_engine'] === 'string' || data['search_engine'] instanceof String)) {
            throw new Error("Expected the field `search_engine` to be a primitive type in the JSON string but got " + data['search_engine']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * error message in case task status is invalid
 * @member {String} error_message
 */
SerpCollectResponseTasksInnerTaskId.prototype['error_message'] = undefined;

/**
 * keyword (search term)
 * @member {String} keyword
 */
SerpCollectResponseTasksInnerTaskId.prototype['keyword'] = undefined;

/**
 * A code for the localization, which is a combination of country and language
 * @member {module:model/SerpCollectResponseTasksInnerTaskId.LocalizationCodeEnum} localization_code
 */
SerpCollectResponseTasksInnerTaskId.prototype['localization_code'] = undefined;

/**
 * option to localize the results per zip code
 * @member {String} localization_zip
 */
SerpCollectResponseTasksInnerTaskId.prototype['localization_zip'] = undefined;

/**
 * number of results found in SERP
 * @member {Number} num_results
 */
SerpCollectResponseTasksInnerTaskId.prototype['num_results'] = undefined;

/**
 * @member {Array.<module:model/SerpCollectResponseTasksInnerTaskIdOrganicResultsInner>} organic_results
 */
SerpCollectResponseTasksInnerTaskId.prototype['organic_results'] = undefined;

/**
 * task ready indicator
 * @member {module:model/SerpCollectResponseTasksInnerTaskId.ReadyEnum} ready
 */
SerpCollectResponseTasksInnerTaskId.prototype['ready'] = undefined;

/**
 * @member {String} search_engine
 */
SerpCollectResponseTasksInnerTaskId.prototype['search_engine'] = undefined;

/**
 * task status in terms of success
 * @member {module:model/SerpCollectResponseTasksInnerTaskId.StatusEnum} status
 */
SerpCollectResponseTasksInnerTaskId.prototype['status'] = undefined;





/**
 * Allowed values for the <code>localization_code</code> property.
 * @enum {String}
 * @readonly
 */
SerpCollectResponseTasksInnerTaskId['LocalizationCodeEnum'] = {

    /**
     * value: "us"
     * @const
     */
    "us": "us",

    /**
     * value: "uk"
     * @const
     */
    "uk": "uk",

    /**
     * value: "au"
     * @const
     */
    "au": "au",

    /**
     * value: "br"
     * @const
     */
    "br": "br",

    /**
     * value: "be_dutch"
     * @const
     */
    "be_dutch": "be_dutch",

    /**
     * value: "be_french"
     * @const
     */
    "be_french": "be_french",

    /**
     * value: "ca"
     * @const
     */
    "ca": "ca",

    /**
     * value: "de"
     * @const
     */
    "de": "de",

    /**
     * value: "es"
     * @const
     */
    "es": "es",

    /**
     * value: "ie"
     * @const
     */
    "ie": "ie",

    /**
     * value: "il"
     * @const
     */
    "il": "il",

    /**
     * value: "nl"
     * @const
     */
    "nl": "nl",

    /**
     * value: "sg"
     * @const
     */
    "sg": "sg",

    /**
     * value: "za"
     * @const
     */
    "za": "za",

    /**
     * value: "it"
     * @const
     */
    "it": "it",

    /**
     * value: "is"
     * @const
     */
    "is": "is",

    /**
     * value: "ch"
     * @const
     */
    "ch": "ch",

    /**
     * value: "fr"
     * @const
     */
    "fr": "fr",

    /**
     * value: "se"
     * @const
     */
    "se": "se",

    /**
     * value: "at"
     * @const
     */
    "at": "at",

    /**
     * value: "dk"
     * @const
     */
    "dk": "dk",

    /**
     * value: "nz"
     * @const
     */
    "nz": "nz",

    /**
     * value: "gr"
     * @const
     */
    "gr": "gr",

    /**
     * value: "in"
     * @const
     */
    "in": "in",

    /**
     * value: "ms"
     * @const
     */
    "ms": "ms",

    /**
     * value: "pl"
     * @const
     */
    "pl": "pl",

    /**
     * value: "hk"
     * @const
     */
    "hk": "hk",

    /**
     * value: "id"
     * @const
     */
    "id": "id",

    /**
     * value: "ru"
     * @const
     */
    "ru": "ru",

    /**
     * value: "ae"
     * @const
     */
    "ae": "ae",

    /**
     * value: "fi"
     * @const
     */
    "fi": "fi",

    /**
     * value: "pt"
     * @const
     */
    "pt": "pt",

    /**
     * value: "mx"
     * @const
     */
    "mx": "mx",

    /**
     * value: "tr"
     * @const
     */
    "tr": "tr",

    /**
     * value: "cl"
     * @const
     */
    "cl": "cl",

    /**
     * value: "jp"
     * @const
     */
    "jp": "jp",

    /**
     * value: "ar"
     * @const
     */
    "ar": "ar"
};


/**
 * Allowed values for the <code>ready</code> property.
 * @enum {String}
 * @readonly
 */
SerpCollectResponseTasksInnerTaskId['ReadyEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SerpCollectResponseTasksInnerTaskId['StatusEnum'] = {

    /**
     * value: "ok"
     * @const
     */
    "ok": "ok",

    /**
     * value: "invalid"
     * @const
     */
    "invalid": "invalid"
};



export default SerpCollectResponseTasksInnerTaskId;

