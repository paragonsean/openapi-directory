/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CollectRequest model module.
 * @module model/CollectRequest
 * @version 0.0.1
 */
class CollectRequest {
    /**
     * Constructs a new <code>CollectRequest</code>.
     * @alias module:model/CollectRequest
     * @param taskIds {Array.<String>} Receiving the request results through thier task id's
     */
    constructor(taskIds) { 
        
        CollectRequest.initialize(this, taskIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taskIds) { 
        obj['task_ids'] = taskIds;
    }

    /**
     * Constructs a <code>CollectRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectRequest} obj Optional instance to populate.
     * @return {module:model/CollectRequest} The populated <code>CollectRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectRequest();

            if (data.hasOwnProperty('task_ids')) {
                obj['task_ids'] = ApiClient.convertToType(data['task_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CollectRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['task_ids'])) {
            throw new Error("Expected the field `task_ids` to be an array in the JSON data but got " + data['task_ids']);
        }

        return true;
    }


}

CollectRequest.RequiredProperties = ["task_ids"];

/**
 * Receiving the request results through thier task id's
 * @member {Array.<String>} task_ids
 */
CollectRequest.prototype['task_ids'] = undefined;






export default CollectRequest;

