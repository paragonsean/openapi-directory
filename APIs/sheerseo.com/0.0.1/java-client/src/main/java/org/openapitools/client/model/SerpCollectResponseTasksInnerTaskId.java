/*
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SerpCollectResponseTasksInnerTaskIdOrganicResultsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SerpCollectResponseTasksInnerTaskId
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:26.286834-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SerpCollectResponseTasksInnerTaskId {
  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  /**
   * A code for the localization, which is a combination of country and language
   */
  @JsonAdapter(LocalizationCodeEnum.Adapter.class)
  public enum LocalizationCodeEnum {
    US("us"),
    
    UK("uk"),
    
    AU("au"),
    
    BR("br"),
    
    BE_DUTCH("be_dutch"),
    
    BE_FRENCH("be_french"),
    
    CA("ca"),
    
    DE("de"),
    
    ES("es"),
    
    IE("ie"),
    
    IL("il"),
    
    NL("nl"),
    
    SG("sg"),
    
    ZA("za"),
    
    IT("it"),
    
    IS("is"),
    
    CH("ch"),
    
    FR("fr"),
    
    SE("se"),
    
    AT("at"),
    
    DK("dk"),
    
    NZ("nz"),
    
    GR("gr"),
    
    IN("in"),
    
    MS("ms"),
    
    PL("pl"),
    
    HK("hk"),
    
    ID("id"),
    
    RU("ru"),
    
    AE("ae"),
    
    FI("fi"),
    
    PT("pt"),
    
    MX("mx"),
    
    TR("tr"),
    
    CL("cl"),
    
    JP("jp"),
    
    AR("ar");

    private String value;

    LocalizationCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocalizationCodeEnum fromValue(String value) {
      for (LocalizationCodeEnum b : LocalizationCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocalizationCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocalizationCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocalizationCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocalizationCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocalizationCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALIZATION_CODE = "localization_code";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_CODE)
  private LocalizationCodeEnum localizationCode;

  public static final String SERIALIZED_NAME_LOCALIZATION_ZIP = "localization_zip";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_ZIP)
  private String localizationZip;

  public static final String SERIALIZED_NAME_NUM_RESULTS = "num_results";
  @SerializedName(SERIALIZED_NAME_NUM_RESULTS)
  private Integer numResults;

  public static final String SERIALIZED_NAME_ORGANIC_RESULTS = "organic_results";
  @SerializedName(SERIALIZED_NAME_ORGANIC_RESULTS)
  private List<SerpCollectResponseTasksInnerTaskIdOrganicResultsInner> organicResults = new ArrayList<>();

  /**
   * task ready indicator
   */
  @JsonAdapter(ReadyEnum.Adapter.class)
  public enum ReadyEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    ReadyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReadyEnum fromValue(String value) {
      for (ReadyEnum b : ReadyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReadyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReadyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReadyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReadyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReadyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_READY = "ready";
  @SerializedName(SERIALIZED_NAME_READY)
  private ReadyEnum ready;

  public static final String SERIALIZED_NAME_SEARCH_ENGINE = "search_engine";
  @SerializedName(SERIALIZED_NAME_SEARCH_ENGINE)
  private String searchEngine;

  /**
   * task status in terms of success
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OK("ok"),
    
    INVALID("invalid");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public SerpCollectResponseTasksInnerTaskId() {
  }

  public SerpCollectResponseTasksInnerTaskId errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * error message in case task status is invalid
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public SerpCollectResponseTasksInnerTaskId keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * keyword (search term)
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public SerpCollectResponseTasksInnerTaskId localizationCode(LocalizationCodeEnum localizationCode) {
    this.localizationCode = localizationCode;
    return this;
  }

  /**
   * A code for the localization, which is a combination of country and language
   * @return localizationCode
   */
  @javax.annotation.Nullable
  public LocalizationCodeEnum getLocalizationCode() {
    return localizationCode;
  }

  public void setLocalizationCode(LocalizationCodeEnum localizationCode) {
    this.localizationCode = localizationCode;
  }


  public SerpCollectResponseTasksInnerTaskId localizationZip(String localizationZip) {
    this.localizationZip = localizationZip;
    return this;
  }

  /**
   * option to localize the results per zip code
   * @return localizationZip
   */
  @javax.annotation.Nullable
  public String getLocalizationZip() {
    return localizationZip;
  }

  public void setLocalizationZip(String localizationZip) {
    this.localizationZip = localizationZip;
  }


  public SerpCollectResponseTasksInnerTaskId numResults(Integer numResults) {
    this.numResults = numResults;
    return this;
  }

  /**
   * number of results found in SERP
   * @return numResults
   */
  @javax.annotation.Nullable
  public Integer getNumResults() {
    return numResults;
  }

  public void setNumResults(Integer numResults) {
    this.numResults = numResults;
  }


  public SerpCollectResponseTasksInnerTaskId organicResults(List<SerpCollectResponseTasksInnerTaskIdOrganicResultsInner> organicResults) {
    this.organicResults = organicResults;
    return this;
  }

  public SerpCollectResponseTasksInnerTaskId addOrganicResultsItem(SerpCollectResponseTasksInnerTaskIdOrganicResultsInner organicResultsItem) {
    if (this.organicResults == null) {
      this.organicResults = new ArrayList<>();
    }
    this.organicResults.add(organicResultsItem);
    return this;
  }

  /**
   * Get organicResults
   * @return organicResults
   */
  @javax.annotation.Nullable
  public List<SerpCollectResponseTasksInnerTaskIdOrganicResultsInner> getOrganicResults() {
    return organicResults;
  }

  public void setOrganicResults(List<SerpCollectResponseTasksInnerTaskIdOrganicResultsInner> organicResults) {
    this.organicResults = organicResults;
  }


  public SerpCollectResponseTasksInnerTaskId ready(ReadyEnum ready) {
    this.ready = ready;
    return this;
  }

  /**
   * task ready indicator
   * @return ready
   */
  @javax.annotation.Nullable
  public ReadyEnum getReady() {
    return ready;
  }

  public void setReady(ReadyEnum ready) {
    this.ready = ready;
  }


  public SerpCollectResponseTasksInnerTaskId searchEngine(String searchEngine) {
    this.searchEngine = searchEngine;
    return this;
  }

  /**
   * Get searchEngine
   * @return searchEngine
   */
  @javax.annotation.Nullable
  public String getSearchEngine() {
    return searchEngine;
  }

  public void setSearchEngine(String searchEngine) {
    this.searchEngine = searchEngine;
  }


  public SerpCollectResponseTasksInnerTaskId status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * task status in terms of success
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SerpCollectResponseTasksInnerTaskId serpCollectResponseTasksInnerTaskId = (SerpCollectResponseTasksInnerTaskId) o;
    return Objects.equals(this.errorMessage, serpCollectResponseTasksInnerTaskId.errorMessage) &&
        Objects.equals(this.keyword, serpCollectResponseTasksInnerTaskId.keyword) &&
        Objects.equals(this.localizationCode, serpCollectResponseTasksInnerTaskId.localizationCode) &&
        Objects.equals(this.localizationZip, serpCollectResponseTasksInnerTaskId.localizationZip) &&
        Objects.equals(this.numResults, serpCollectResponseTasksInnerTaskId.numResults) &&
        Objects.equals(this.organicResults, serpCollectResponseTasksInnerTaskId.organicResults) &&
        Objects.equals(this.ready, serpCollectResponseTasksInnerTaskId.ready) &&
        Objects.equals(this.searchEngine, serpCollectResponseTasksInnerTaskId.searchEngine) &&
        Objects.equals(this.status, serpCollectResponseTasksInnerTaskId.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, keyword, localizationCode, localizationZip, numResults, organicResults, ready, searchEngine, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SerpCollectResponseTasksInnerTaskId {\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    localizationCode: ").append(toIndentedString(localizationCode)).append("\n");
    sb.append("    localizationZip: ").append(toIndentedString(localizationZip)).append("\n");
    sb.append("    numResults: ").append(toIndentedString(numResults)).append("\n");
    sb.append("    organicResults: ").append(toIndentedString(organicResults)).append("\n");
    sb.append("    ready: ").append(toIndentedString(ready)).append("\n");
    sb.append("    searchEngine: ").append(toIndentedString(searchEngine)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error_message");
    openapiFields.add("keyword");
    openapiFields.add("localization_code");
    openapiFields.add("localization_zip");
    openapiFields.add("num_results");
    openapiFields.add("organic_results");
    openapiFields.add("ready");
    openapiFields.add("search_engine");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SerpCollectResponseTasksInnerTaskId
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SerpCollectResponseTasksInnerTaskId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SerpCollectResponseTasksInnerTaskId is not found in the empty JSON string", SerpCollectResponseTasksInnerTaskId.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SerpCollectResponseTasksInnerTaskId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SerpCollectResponseTasksInnerTaskId` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("localization_code") != null && !jsonObj.get("localization_code").isJsonNull()) && !jsonObj.get("localization_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localization_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localization_code").toString()));
      }
      // validate the optional field `localization_code`
      if (jsonObj.get("localization_code") != null && !jsonObj.get("localization_code").isJsonNull()) {
        LocalizationCodeEnum.validateJsonElement(jsonObj.get("localization_code"));
      }
      if ((jsonObj.get("localization_zip") != null && !jsonObj.get("localization_zip").isJsonNull()) && !jsonObj.get("localization_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localization_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localization_zip").toString()));
      }
      if (jsonObj.get("organic_results") != null && !jsonObj.get("organic_results").isJsonNull()) {
        JsonArray jsonArrayorganicResults = jsonObj.getAsJsonArray("organic_results");
        if (jsonArrayorganicResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("organic_results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `organic_results` to be an array in the JSON string but got `%s`", jsonObj.get("organic_results").toString()));
          }

          // validate the optional field `organic_results` (array)
          for (int i = 0; i < jsonArrayorganicResults.size(); i++) {
            SerpCollectResponseTasksInnerTaskIdOrganicResultsInner.validateJsonElement(jsonArrayorganicResults.get(i));
          };
        }
      }
      if ((jsonObj.get("ready") != null && !jsonObj.get("ready").isJsonNull()) && !jsonObj.get("ready").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ready` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ready").toString()));
      }
      // validate the optional field `ready`
      if (jsonObj.get("ready") != null && !jsonObj.get("ready").isJsonNull()) {
        ReadyEnum.validateJsonElement(jsonObj.get("ready"));
      }
      if ((jsonObj.get("search_engine") != null && !jsonObj.get("search_engine").isJsonNull()) && !jsonObj.get("search_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_engine").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SerpCollectResponseTasksInnerTaskId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SerpCollectResponseTasksInnerTaskId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SerpCollectResponseTasksInnerTaskId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SerpCollectResponseTasksInnerTaskId.class));

       return (TypeAdapter<T>) new TypeAdapter<SerpCollectResponseTasksInnerTaskId>() {
           @Override
           public void write(JsonWriter out, SerpCollectResponseTasksInnerTaskId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SerpCollectResponseTasksInnerTaskId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SerpCollectResponseTasksInnerTaskId given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SerpCollectResponseTasksInnerTaskId
   * @throws IOException if the JSON string is invalid with respect to SerpCollectResponseTasksInnerTaskId
   */
  public static SerpCollectResponseTasksInnerTaskId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SerpCollectResponseTasksInnerTaskId.class);
  }

  /**
   * Convert an instance of SerpCollectResponseTasksInnerTaskId to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

