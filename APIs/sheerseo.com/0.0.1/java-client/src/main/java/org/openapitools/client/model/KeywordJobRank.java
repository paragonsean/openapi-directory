/*
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * KeywordJobRank
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:26.286834-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeywordJobRank {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  /**
   * A code for the localization, which is a combination of country and language
   */
  @JsonAdapter(LocalizationCodeEnum.Adapter.class)
  public enum LocalizationCodeEnum {
    US("us"),
    
    UK("uk"),
    
    AU("au"),
    
    BR("br"),
    
    BE_DUTCH("be_dutch"),
    
    BE_FRENCH("be_french"),
    
    CA("ca"),
    
    DE("de"),
    
    ES("es"),
    
    IE("ie"),
    
    IL("il"),
    
    NL("nl"),
    
    SG("sg"),
    
    ZA("za"),
    
    IT("it"),
    
    IS("is"),
    
    CH("ch"),
    
    FR("fr"),
    
    SE("se"),
    
    AT("at"),
    
    DK("dk"),
    
    NZ("nz"),
    
    GR("gr"),
    
    IN("in"),
    
    MS("ms"),
    
    PL("pl"),
    
    HK("hk"),
    
    ID("id"),
    
    RU("ru"),
    
    AE("ae"),
    
    FI("fi"),
    
    PT("pt"),
    
    MX("mx"),
    
    TR("tr"),
    
    CL("cl"),
    
    JP("jp"),
    
    AR("ar");

    private String value;

    LocalizationCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocalizationCodeEnum fromValue(String value) {
      for (LocalizationCodeEnum b : LocalizationCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocalizationCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocalizationCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocalizationCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocalizationCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocalizationCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALIZATION_CODE = "localization_code";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_CODE)
  private LocalizationCodeEnum localizationCode;

  public static final String SERIALIZED_NAME_LOCALIZATION_ZIP = "localization_zip";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_ZIP)
  private String localizationZip;

  /**
   * google/bing/google_mobile
   */
  @JsonAdapter(SearchEngineEnum.Adapter.class)
  public enum SearchEngineEnum {
    GOOGLE("google"),
    
    BING("bing"),
    
    GOOGLE_MOBILE("google_mobile");

    private String value;

    SearchEngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchEngineEnum fromValue(String value) {
      for (SearchEngineEnum b : SearchEngineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchEngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchEngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchEngineEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchEngineEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchEngineEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_ENGINE = "search_engine";
  @SerializedName(SERIALIZED_NAME_SEARCH_ENGINE)
  private SearchEngineEnum searchEngine = SearchEngineEnum.GOOGLE;

  public KeywordJobRank() {
  }

  public KeywordJobRank domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The domain you want to check its rank for the keyword entered
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public KeywordJobRank keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * keyword (search term)
   * @return keyword
   */
  @javax.annotation.Nonnull
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public KeywordJobRank localizationCode(LocalizationCodeEnum localizationCode) {
    this.localizationCode = localizationCode;
    return this;
  }

  /**
   * A code for the localization, which is a combination of country and language
   * @return localizationCode
   */
  @javax.annotation.Nonnull
  public LocalizationCodeEnum getLocalizationCode() {
    return localizationCode;
  }

  public void setLocalizationCode(LocalizationCodeEnum localizationCode) {
    this.localizationCode = localizationCode;
  }


  public KeywordJobRank localizationZip(String localizationZip) {
    this.localizationZip = localizationZip;
    return this;
  }

  /**
   * option to localize the results per zip code
   * @return localizationZip
   */
  @javax.annotation.Nullable
  public String getLocalizationZip() {
    return localizationZip;
  }

  public void setLocalizationZip(String localizationZip) {
    this.localizationZip = localizationZip;
  }


  public KeywordJobRank searchEngine(SearchEngineEnum searchEngine) {
    this.searchEngine = searchEngine;
    return this;
  }

  /**
   * google/bing/google_mobile
   * @return searchEngine
   */
  @javax.annotation.Nullable
  public SearchEngineEnum getSearchEngine() {
    return searchEngine;
  }

  public void setSearchEngine(SearchEngineEnum searchEngine) {
    this.searchEngine = searchEngine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordJobRank keywordJobRank = (KeywordJobRank) o;
    return Objects.equals(this.domain, keywordJobRank.domain) &&
        Objects.equals(this.keyword, keywordJobRank.keyword) &&
        Objects.equals(this.localizationCode, keywordJobRank.localizationCode) &&
        Objects.equals(this.localizationZip, keywordJobRank.localizationZip) &&
        Objects.equals(this.searchEngine, keywordJobRank.searchEngine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, keyword, localizationCode, localizationZip, searchEngine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordJobRank {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    localizationCode: ").append(toIndentedString(localizationCode)).append("\n");
    sb.append("    localizationZip: ").append(toIndentedString(localizationZip)).append("\n");
    sb.append("    searchEngine: ").append(toIndentedString(searchEngine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("keyword");
    openapiFields.add("localization_code");
    openapiFields.add("localization_zip");
    openapiFields.add("search_engine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyword");
    openapiRequiredFields.add("localization_code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeywordJobRank
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordJobRank.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordJobRank is not found in the empty JSON string", KeywordJobRank.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeywordJobRank.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeywordJobRank` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeywordJobRank.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if (!jsonObj.get("localization_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localization_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localization_code").toString()));
      }
      // validate the required field `localization_code`
      LocalizationCodeEnum.validateJsonElement(jsonObj.get("localization_code"));
      if ((jsonObj.get("localization_zip") != null && !jsonObj.get("localization_zip").isJsonNull()) && !jsonObj.get("localization_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localization_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localization_zip").toString()));
      }
      if ((jsonObj.get("search_engine") != null && !jsonObj.get("search_engine").isJsonNull()) && !jsonObj.get("search_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_engine").toString()));
      }
      // validate the optional field `search_engine`
      if (jsonObj.get("search_engine") != null && !jsonObj.get("search_engine").isJsonNull()) {
        SearchEngineEnum.validateJsonElement(jsonObj.get("search_engine"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordJobRank.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordJobRank' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordJobRank> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordJobRank.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordJobRank>() {
           @Override
           public void write(JsonWriter out, KeywordJobRank value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordJobRank read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeywordJobRank given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeywordJobRank
   * @throws IOException if the JSON string is invalid with respect to KeywordJobRank
   */
  public static KeywordJobRank fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordJobRank.class);
  }

  /**
   * Convert an instance of KeywordJobRank to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

