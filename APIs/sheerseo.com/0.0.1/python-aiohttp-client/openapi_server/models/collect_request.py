# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_ids: List[str]=None):
        """CollectRequest - a model defined in OpenAPI

        :param task_ids: The task_ids of this CollectRequest.
        """
        self.openapi_types = {
            'task_ids': List[str]
        }

        self.attribute_map = {
            'task_ids': 'task_ids'
        }

        self._task_ids = task_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectRequest of this CollectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_ids(self):
        """Gets the task_ids of this CollectRequest.

        Receiving the request results through thier task id's

        :return: The task_ids of this CollectRequest.
        :rtype: List[str]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids):
        """Sets the task_ids of this CollectRequest.

        Receiving the request results through thier task id's

        :param task_ids: The task_ids of this CollectRequest.
        :type task_ids: List[str]
        """
        if task_ids is None:
            raise ValueError("Invalid value for `task_ids`, must not be `None`")
        if task_ids is not None and len(task_ids) > 10:
            raise ValueError("Invalid value for `task_ids`, number of items must be less than or equal to `10`")
        if task_ids is not None and len(task_ids) < 1:
            raise ValueError("Invalid value for `task_ids`, number of items must be greater than or equal to `1`")

        self._task_ids = task_ids
