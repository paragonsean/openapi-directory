# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keyword_task import KeywordTask
from openapi_server import util


class SerpSubmitResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, response_code: int=None, tasks: List[KeywordTask]=None):
        """SerpSubmitResponse - a model defined in OpenAPI

        :param error_message: The error_message of this SerpSubmitResponse.
        :param response_code: The response_code of this SerpSubmitResponse.
        :param tasks: The tasks of this SerpSubmitResponse.
        """
        self.openapi_types = {
            'error_message': str,
            'response_code': int,
            'tasks': List[KeywordTask]
        }

        self.attribute_map = {
            'error_message': 'error_message',
            'response_code': 'response_code',
            'tasks': 'tasks'
        }

        self._error_message = error_message
        self._response_code = response_code
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SerpSubmitResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serpSubmitResponse of this SerpSubmitResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this SerpSubmitResponse.


        :return: The error_message of this SerpSubmitResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SerpSubmitResponse.


        :param error_message: The error_message of this SerpSubmitResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def response_code(self):
        """Gets the response_code of this SerpSubmitResponse.

        The request response_code.

        :return: The response_code of this SerpSubmitResponse.
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this SerpSubmitResponse.

        The request response_code.

        :param response_code: The response_code of this SerpSubmitResponse.
        :type response_code: int
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")

        self._response_code = response_code

    @property
    def tasks(self):
        """Gets the tasks of this SerpSubmitResponse.


        :return: The tasks of this SerpSubmitResponse.
        :rtype: List[KeywordTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this SerpSubmitResponse.


        :param tasks: The tasks of this SerpSubmitResponse.
        :type tasks: List[KeywordTask]
        """

        self._tasks = tasks
