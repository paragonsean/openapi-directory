# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RankCollectResponseTasksInnerTaskId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, keyword: str=None, local_pack_rank: int=None, localization_code: str=None, localization_zip: str=None, rank: int=None, ready: str=None, search_engine: str=None, status: str=None):
        """RankCollectResponseTasksInnerTaskId - a model defined in OpenAPI

        :param error_message: The error_message of this RankCollectResponseTasksInnerTaskId.
        :param keyword: The keyword of this RankCollectResponseTasksInnerTaskId.
        :param local_pack_rank: The local_pack_rank of this RankCollectResponseTasksInnerTaskId.
        :param localization_code: The localization_code of this RankCollectResponseTasksInnerTaskId.
        :param localization_zip: The localization_zip of this RankCollectResponseTasksInnerTaskId.
        :param rank: The rank of this RankCollectResponseTasksInnerTaskId.
        :param ready: The ready of this RankCollectResponseTasksInnerTaskId.
        :param search_engine: The search_engine of this RankCollectResponseTasksInnerTaskId.
        :param status: The status of this RankCollectResponseTasksInnerTaskId.
        """
        self.openapi_types = {
            'error_message': str,
            'keyword': str,
            'local_pack_rank': int,
            'localization_code': str,
            'localization_zip': str,
            'rank': int,
            'ready': str,
            'search_engine': str,
            'status': str
        }

        self.attribute_map = {
            'error_message': 'error_message',
            'keyword': 'keyword',
            'local_pack_rank': 'local_pack_rank',
            'localization_code': 'localization_code',
            'localization_zip': 'localization_zip',
            'rank': 'rank',
            'ready': 'ready',
            'search_engine': 'search_engine',
            'status': 'status'
        }

        self._error_message = error_message
        self._keyword = keyword
        self._local_pack_rank = local_pack_rank
        self._localization_code = localization_code
        self._localization_zip = localization_zip
        self._rank = rank
        self._ready = ready
        self._search_engine = search_engine
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RankCollectResponseTasksInnerTaskId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rankCollectResponse_tasks_inner_task_id of this RankCollectResponseTasksInnerTaskId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this RankCollectResponseTasksInnerTaskId.

        error message in case task status is invalid

        :return: The error_message of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this RankCollectResponseTasksInnerTaskId.

        error message in case task status is invalid

        :param error_message: The error_message of this RankCollectResponseTasksInnerTaskId.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def keyword(self):
        """Gets the keyword of this RankCollectResponseTasksInnerTaskId.

        keyword (search term)

        :return: The keyword of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this RankCollectResponseTasksInnerTaskId.

        keyword (search term)

        :param keyword: The keyword of this RankCollectResponseTasksInnerTaskId.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def local_pack_rank(self):
        """Gets the local_pack_rank of this RankCollectResponseTasksInnerTaskId.

        relevent only to google: show the local pack rank of the domain in case exist

        :return: The local_pack_rank of this RankCollectResponseTasksInnerTaskId.
        :rtype: int
        """
        return self._local_pack_rank

    @local_pack_rank.setter
    def local_pack_rank(self, local_pack_rank):
        """Sets the local_pack_rank of this RankCollectResponseTasksInnerTaskId.

        relevent only to google: show the local pack rank of the domain in case exist

        :param local_pack_rank: The local_pack_rank of this RankCollectResponseTasksInnerTaskId.
        :type local_pack_rank: int
        """

        self._local_pack_rank = local_pack_rank

    @property
    def localization_code(self):
        """Gets the localization_code of this RankCollectResponseTasksInnerTaskId.

        A code for the localization, which is a combination of country and language

        :return: The localization_code of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._localization_code

    @localization_code.setter
    def localization_code(self, localization_code):
        """Sets the localization_code of this RankCollectResponseTasksInnerTaskId.

        A code for the localization, which is a combination of country and language

        :param localization_code: The localization_code of this RankCollectResponseTasksInnerTaskId.
        :type localization_code: str
        """
        allowed_values = ["us", "uk", "au", "br", "be_dutch", "be_french", "ca", "de", "es", "ie", "il", "nl", "sg", "za", "it", "is", "ch", "fr", "se", "at", "dk", "nz", "gr", "in", "ms", "pl", "hk", "id", "ru", "ae", "fi", "pt", "mx", "tr", "cl", "jp", "ar"]  # noqa: E501
        if localization_code not in allowed_values:
            raise ValueError(
                "Invalid value for `localization_code` ({0}), must be one of {1}"
                .format(localization_code, allowed_values)
            )

        self._localization_code = localization_code

    @property
    def localization_zip(self):
        """Gets the localization_zip of this RankCollectResponseTasksInnerTaskId.

        option to localize the results per zip code

        :return: The localization_zip of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._localization_zip

    @localization_zip.setter
    def localization_zip(self, localization_zip):
        """Sets the localization_zip of this RankCollectResponseTasksInnerTaskId.

        option to localize the results per zip code

        :param localization_zip: The localization_zip of this RankCollectResponseTasksInnerTaskId.
        :type localization_zip: str
        """

        self._localization_zip = localization_zip

    @property
    def rank(self):
        """Gets the rank of this RankCollectResponseTasksInnerTaskId.

        the exact rank of the domain in the search engine asked

        :return: The rank of this RankCollectResponseTasksInnerTaskId.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this RankCollectResponseTasksInnerTaskId.

        the exact rank of the domain in the search engine asked

        :param rank: The rank of this RankCollectResponseTasksInnerTaskId.
        :type rank: int
        """

        self._rank = rank

    @property
    def ready(self):
        """Gets the ready of this RankCollectResponseTasksInnerTaskId.

        task ready indicator

        :return: The ready of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this RankCollectResponseTasksInnerTaskId.

        task ready indicator

        :param ready: The ready of this RankCollectResponseTasksInnerTaskId.
        :type ready: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if ready not in allowed_values:
            raise ValueError(
                "Invalid value for `ready` ({0}), must be one of {1}"
                .format(ready, allowed_values)
            )

        self._ready = ready

    @property
    def search_engine(self):
        """Gets the search_engine of this RankCollectResponseTasksInnerTaskId.

        google/bing/google_mobile

        :return: The search_engine of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._search_engine

    @search_engine.setter
    def search_engine(self, search_engine):
        """Sets the search_engine of this RankCollectResponseTasksInnerTaskId.

        google/bing/google_mobile

        :param search_engine: The search_engine of this RankCollectResponseTasksInnerTaskId.
        :type search_engine: str
        """
        allowed_values = ["google", "bing", "google_mobile"]  # noqa: E501
        if search_engine not in allowed_values:
            raise ValueError(
                "Invalid value for `search_engine` ({0}), must be one of {1}"
                .format(search_engine, allowed_values)
            )

        self._search_engine = search_engine

    @property
    def status(self):
        """Gets the status of this RankCollectResponseTasksInnerTaskId.

        task status in terms of success

        :return: The status of this RankCollectResponseTasksInnerTaskId.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RankCollectResponseTasksInnerTaskId.

        task status in terms of success

        :param status: The status of this RankCollectResponseTasksInnerTaskId.
        :type status: str
        """
        allowed_values = ["ok", "invalid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
