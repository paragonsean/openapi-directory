# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keyword_job_rank import KeywordJobRank
from openapi_server import util


class RankSubmitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority: str=None, tasks: List[KeywordJobRank]=None):
        """RankSubmitRequest - a model defined in OpenAPI

        :param priority: The priority of this RankSubmitRequest.
        :param tasks: The tasks of this RankSubmitRequest.
        """
        self.openapi_types = {
            'priority': str,
            'tasks': List[KeywordJobRank]
        }

        self.attribute_map = {
            'priority': 'priority',
            'tasks': 'tasks'
        }

        self._priority = priority
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RankSubmitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rankSubmitRequest of this RankSubmitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this RankSubmitRequest.

        The priority for the keyword jobs submitted. High priority costs double credits. Default value is low.

        :return: The priority of this RankSubmitRequest.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RankSubmitRequest.

        The priority for the keyword jobs submitted. High priority costs double credits. Default value is low.

        :param priority: The priority of this RankSubmitRequest.
        :type priority: str
        """
        allowed_values = ["low", "high"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def tasks(self):
        """Gets the tasks of this RankSubmitRequest.

        The keyword RANK jobs. Maximum 1000 jobs per a single request.

        :return: The tasks of this RankSubmitRequest.
        :rtype: List[KeywordJobRank]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this RankSubmitRequest.

        The keyword RANK jobs. Maximum 1000 jobs per a single request.

        :param tasks: The tasks of this RankSubmitRequest.
        :type tasks: List[KeywordJobRank]
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")

        self._tasks = tasks
