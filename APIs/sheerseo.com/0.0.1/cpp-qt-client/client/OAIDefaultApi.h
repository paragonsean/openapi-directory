/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollectRequest.h"
#include "OAIErrorResponse.h"
#include "OAIRankCollectResponse.h"
#include "OAIRankSubmitRequest.h"
#include "OAIRankSubmitResponse.h"
#include "OAISerpCollectResponse.h"
#include "OAISerpSubmitRequest.h"
#include "OAISerpSubmitResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAICollectRequest [required]
    */
    virtual void rankCollect(const OAICollectRequest &body);

    /**
    * @param[in]  body OAIRankSubmitRequest [required]
    */
    virtual void rankSubmit(const OAIRankSubmitRequest &body);

    /**
    * @param[in]  body OAICollectRequest [required]
    */
    virtual void serpCollect(const OAICollectRequest &body);

    /**
    * @param[in]  body OAISerpSubmitRequest [required]
    */
    virtual void serpSubmit(const OAISerpSubmitRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void rankCollectCallback(OAIHttpRequestWorker *worker);
    void rankSubmitCallback(OAIHttpRequestWorker *worker);
    void serpCollectCallback(OAIHttpRequestWorker *worker);
    void serpSubmitCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void rankCollectSignal(OAIRankCollectResponse summary);
    void rankSubmitSignal(OAIRankSubmitResponse summary);
    void serpCollectSignal(OAISerpCollectResponse summary);
    void serpSubmitSignal(OAISerpSubmitResponse summary);


    void rankCollectSignalFull(OAIHttpRequestWorker *worker, OAIRankCollectResponse summary);
    void rankSubmitSignalFull(OAIHttpRequestWorker *worker, OAIRankSubmitResponse summary);
    void serpCollectSignalFull(OAIHttpRequestWorker *worker, OAISerpCollectResponse summary);
    void serpSubmitSignalFull(OAIHttpRequestWorker *worker, OAISerpSubmitResponse summary);

    Q_DECL_DEPRECATED_X("Use rankCollectSignalError() instead")
    void rankCollectSignalE(OAIRankCollectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rankCollectSignalError(OAIRankCollectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rankSubmitSignalError() instead")
    void rankSubmitSignalE(OAIRankSubmitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rankSubmitSignalError(OAIRankSubmitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serpCollectSignalError() instead")
    void serpCollectSignalE(OAISerpCollectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serpCollectSignalError(OAISerpCollectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serpSubmitSignalError() instead")
    void serpSubmitSignalE(OAISerpSubmitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serpSubmitSignalError(OAISerpSubmitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use rankCollectSignalErrorFull() instead")
    void rankCollectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rankCollectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rankSubmitSignalErrorFull() instead")
    void rankSubmitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rankSubmitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serpCollectSignalErrorFull() instead")
    void serpCollectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serpCollectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serpSubmitSignalErrorFull() instead")
    void serpSubmitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serpSubmitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
