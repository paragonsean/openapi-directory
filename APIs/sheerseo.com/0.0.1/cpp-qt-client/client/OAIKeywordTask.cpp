/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeywordTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeywordTask::OAIKeywordTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeywordTask::OAIKeywordTask() {
    this->initializeModel();
}

OAIKeywordTask::~OAIKeywordTask() {}

void OAIKeywordTask::initializeModel() {

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_localization_code_isSet = false;
    m_localization_code_isValid = false;

    m_localization_zip_isSet = false;
    m_localization_zip_isValid = false;

    m_search_engine_isSet = false;
    m_search_engine_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIKeywordTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeywordTask::fromJsonObject(QJsonObject json) {

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_localization_code_isValid = ::OpenAPI::fromJsonValue(m_localization_code, json[QString("localization_code")]);
    m_localization_code_isSet = !json[QString("localization_code")].isNull() && m_localization_code_isValid;

    m_localization_zip_isValid = ::OpenAPI::fromJsonValue(m_localization_zip, json[QString("localization_zip")]);
    m_localization_zip_isSet = !json[QString("localization_zip")].isNull() && m_localization_zip_isValid;

    m_search_engine_isValid = ::OpenAPI::fromJsonValue(m_search_engine, json[QString("search_engine")]);
    m_search_engine_isSet = !json[QString("search_engine")].isNull() && m_search_engine_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("task_id")]);
    m_task_id_isSet = !json[QString("task_id")].isNull() && m_task_id_isValid;
}

QString OAIKeywordTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeywordTask::asJsonObject() const {
    QJsonObject obj;
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_localization_code_isSet) {
        obj.insert(QString("localization_code"), ::OpenAPI::toJsonValue(m_localization_code));
    }
    if (m_localization_zip_isSet) {
        obj.insert(QString("localization_zip"), ::OpenAPI::toJsonValue(m_localization_zip));
    }
    if (m_search_engine_isSet) {
        obj.insert(QString("search_engine"), ::OpenAPI::toJsonValue(m_search_engine));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("task_id"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QString OAIKeywordTask::getKeyword() const {
    return m_keyword;
}
void OAIKeywordTask::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIKeywordTask::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIKeywordTask::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIKeywordTask::getLocalizationCode() const {
    return m_localization_code;
}
void OAIKeywordTask::setLocalizationCode(const QString &localization_code) {
    m_localization_code = localization_code;
    m_localization_code_isSet = true;
}

bool OAIKeywordTask::is_localization_code_Set() const{
    return m_localization_code_isSet;
}

bool OAIKeywordTask::is_localization_code_Valid() const{
    return m_localization_code_isValid;
}

QString OAIKeywordTask::getLocalizationZip() const {
    return m_localization_zip;
}
void OAIKeywordTask::setLocalizationZip(const QString &localization_zip) {
    m_localization_zip = localization_zip;
    m_localization_zip_isSet = true;
}

bool OAIKeywordTask::is_localization_zip_Set() const{
    return m_localization_zip_isSet;
}

bool OAIKeywordTask::is_localization_zip_Valid() const{
    return m_localization_zip_isValid;
}

QString OAIKeywordTask::getSearchEngine() const {
    return m_search_engine;
}
void OAIKeywordTask::setSearchEngine(const QString &search_engine) {
    m_search_engine = search_engine;
    m_search_engine_isSet = true;
}

bool OAIKeywordTask::is_search_engine_Set() const{
    return m_search_engine_isSet;
}

bool OAIKeywordTask::is_search_engine_Valid() const{
    return m_search_engine_isValid;
}

QString OAIKeywordTask::getStatus() const {
    return m_status;
}
void OAIKeywordTask::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIKeywordTask::is_status_Set() const{
    return m_status_isSet;
}

bool OAIKeywordTask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIKeywordTask::getTaskId() const {
    return m_task_id;
}
void OAIKeywordTask::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIKeywordTask::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIKeywordTask::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIKeywordTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeywordTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keyword_isValid && m_localization_code_isValid && true;
}

} // namespace OpenAPI
