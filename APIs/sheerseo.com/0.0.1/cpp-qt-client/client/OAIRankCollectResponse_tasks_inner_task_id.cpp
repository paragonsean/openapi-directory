/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRankCollectResponse_tasks_inner_task_id.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRankCollectResponse_tasks_inner_task_id::OAIRankCollectResponse_tasks_inner_task_id(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRankCollectResponse_tasks_inner_task_id::OAIRankCollectResponse_tasks_inner_task_id() {
    this->initializeModel();
}

OAIRankCollectResponse_tasks_inner_task_id::~OAIRankCollectResponse_tasks_inner_task_id() {}

void OAIRankCollectResponse_tasks_inner_task_id::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_local_pack_rank_isSet = false;
    m_local_pack_rank_isValid = false;

    m_localization_code_isSet = false;
    m_localization_code_isValid = false;

    m_localization_zip_isSet = false;
    m_localization_zip_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_ready_isSet = false;
    m_ready_isValid = false;

    m_search_engine_isSet = false;
    m_search_engine_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRankCollectResponse_tasks_inner_task_id::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRankCollectResponse_tasks_inner_task_id::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_local_pack_rank_isValid = ::OpenAPI::fromJsonValue(m_local_pack_rank, json[QString("local_pack_rank")]);
    m_local_pack_rank_isSet = !json[QString("local_pack_rank")].isNull() && m_local_pack_rank_isValid;

    m_localization_code_isValid = ::OpenAPI::fromJsonValue(m_localization_code, json[QString("localization_code")]);
    m_localization_code_isSet = !json[QString("localization_code")].isNull() && m_localization_code_isValid;

    m_localization_zip_isValid = ::OpenAPI::fromJsonValue(m_localization_zip, json[QString("localization_zip")]);
    m_localization_zip_isSet = !json[QString("localization_zip")].isNull() && m_localization_zip_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_ready_isValid = ::OpenAPI::fromJsonValue(m_ready, json[QString("ready")]);
    m_ready_isSet = !json[QString("ready")].isNull() && m_ready_isValid;

    m_search_engine_isValid = ::OpenAPI::fromJsonValue(m_search_engine, json[QString("search_engine")]);
    m_search_engine_isSet = !json[QString("search_engine")].isNull() && m_search_engine_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRankCollectResponse_tasks_inner_task_id::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_local_pack_rank_isSet) {
        obj.insert(QString("local_pack_rank"), ::OpenAPI::toJsonValue(m_local_pack_rank));
    }
    if (m_localization_code_isSet) {
        obj.insert(QString("localization_code"), ::OpenAPI::toJsonValue(m_localization_code));
    }
    if (m_localization_zip_isSet) {
        obj.insert(QString("localization_zip"), ::OpenAPI::toJsonValue(m_localization_zip));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_ready_isSet) {
        obj.insert(QString("ready"), ::OpenAPI::toJsonValue(m_ready));
    }
    if (m_search_engine_isSet) {
        obj.insert(QString("search_engine"), ::OpenAPI::toJsonValue(m_search_engine));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getErrorMessage() const {
    return m_error_message;
}
void OAIRankCollectResponse_tasks_inner_task_id::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getKeyword() const {
    return m_keyword;
}
void OAIRankCollectResponse_tasks_inner_task_id::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_keyword_Valid() const{
    return m_keyword_isValid;
}

qint32 OAIRankCollectResponse_tasks_inner_task_id::getLocalPackRank() const {
    return m_local_pack_rank;
}
void OAIRankCollectResponse_tasks_inner_task_id::setLocalPackRank(const qint32 &local_pack_rank) {
    m_local_pack_rank = local_pack_rank;
    m_local_pack_rank_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_local_pack_rank_Set() const{
    return m_local_pack_rank_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_local_pack_rank_Valid() const{
    return m_local_pack_rank_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getLocalizationCode() const {
    return m_localization_code;
}
void OAIRankCollectResponse_tasks_inner_task_id::setLocalizationCode(const QString &localization_code) {
    m_localization_code = localization_code;
    m_localization_code_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_localization_code_Set() const{
    return m_localization_code_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_localization_code_Valid() const{
    return m_localization_code_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getLocalizationZip() const {
    return m_localization_zip;
}
void OAIRankCollectResponse_tasks_inner_task_id::setLocalizationZip(const QString &localization_zip) {
    m_localization_zip = localization_zip;
    m_localization_zip_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_localization_zip_Set() const{
    return m_localization_zip_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_localization_zip_Valid() const{
    return m_localization_zip_isValid;
}

qint32 OAIRankCollectResponse_tasks_inner_task_id::getRank() const {
    return m_rank;
}
void OAIRankCollectResponse_tasks_inner_task_id::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getReady() const {
    return m_ready;
}
void OAIRankCollectResponse_tasks_inner_task_id::setReady(const QString &ready) {
    m_ready = ready;
    m_ready_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_ready_Set() const{
    return m_ready_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_ready_Valid() const{
    return m_ready_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getSearchEngine() const {
    return m_search_engine;
}
void OAIRankCollectResponse_tasks_inner_task_id::setSearchEngine(const QString &search_engine) {
    m_search_engine = search_engine;
    m_search_engine_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_search_engine_Set() const{
    return m_search_engine_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_search_engine_Valid() const{
    return m_search_engine_isValid;
}

QString OAIRankCollectResponse_tasks_inner_task_id::getStatus() const {
    return m_status;
}
void OAIRankCollectResponse_tasks_inner_task_id::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRankCollectResponse_tasks_inner_task_id::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRankCollectResponse_tasks_inner_task_id::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_pack_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRankCollectResponse_tasks_inner_task_id::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
