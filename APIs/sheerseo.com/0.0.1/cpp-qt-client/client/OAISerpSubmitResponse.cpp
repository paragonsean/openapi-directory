/**
 * SheerSEO API
 * Sheerseo API has 2 stages:<br>First stage - initiating the task: You fill in your task and receive in return the task id. <br>Second stage - collecting the results: send a request containing the task ids you got at the first stage and collecting the results.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISerpSubmitResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISerpSubmitResponse::OAISerpSubmitResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISerpSubmitResponse::OAISerpSubmitResponse() {
    this->initializeModel();
}

OAISerpSubmitResponse::~OAISerpSubmitResponse() {}

void OAISerpSubmitResponse::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;
}

void OAISerpSubmitResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISerpSubmitResponse::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("response_code")]);
    m_response_code_isSet = !json[QString("response_code")].isNull() && m_response_code_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;
}

QString OAISerpSubmitResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISerpSubmitResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("response_code"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    return obj;
}

QString OAISerpSubmitResponse::getErrorMessage() const {
    return m_error_message;
}
void OAISerpSubmitResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAISerpSubmitResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAISerpSubmitResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

qint32 OAISerpSubmitResponse::getResponseCode() const {
    return m_response_code;
}
void OAISerpSubmitResponse::setResponseCode(const qint32 &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAISerpSubmitResponse::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAISerpSubmitResponse::is_response_code_Valid() const{
    return m_response_code_isValid;
}

QList<OAIKeywordTask> OAISerpSubmitResponse::getTasks() const {
    return m_tasks;
}
void OAISerpSubmitResponse::setTasks(const QList<OAIKeywordTask> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAISerpSubmitResponse::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAISerpSubmitResponse::is_tasks_Valid() const{
    return m_tasks_isValid;
}

bool OAISerpSubmitResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISerpSubmitResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_response_code_isValid && true;
}

} // namespace OpenAPI
