# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_account202_response_all_of_meta import DeleteAccount202ResponseAllOfMeta
from openapi_server.models.get_account_segments200_response_all_of_data_inner import GetAccountSegments200ResponseAllOfDataInner
from openapi_server import util


class GetAccountSegments200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: DeleteAccount202ResponseAllOfMeta=None, data: List[GetAccountSegments200ResponseAllOfDataInner]=None):
        """GetAccountSegments200Response - a model defined in OpenAPI

        :param meta: The meta of this GetAccountSegments200Response.
        :param data: The data of this GetAccountSegments200Response.
        """
        self.openapi_types = {
            'meta': DeleteAccount202ResponseAllOfMeta,
            'data': List[GetAccountSegments200ResponseAllOfDataInner]
        }

        self.attribute_map = {
            'meta': 'meta',
            'data': 'data'
        }

        self._meta = meta
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAccountSegments200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getAccountSegments_200_response of this GetAccountSegments200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this GetAccountSegments200Response.


        :return: The meta of this GetAccountSegments200Response.
        :rtype: DeleteAccount202ResponseAllOfMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this GetAccountSegments200Response.


        :param meta: The meta of this GetAccountSegments200Response.
        :type meta: DeleteAccount202ResponseAllOfMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def data(self):
        """Gets the data of this GetAccountSegments200Response.


        :return: The data of this GetAccountSegments200Response.
        :rtype: List[GetAccountSegments200ResponseAllOfDataInner]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetAccountSegments200Response.


        :param data: The data of this GetAccountSegments200Response.
        :type data: List[GetAccountSegments200ResponseAllOfDataInner]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data
