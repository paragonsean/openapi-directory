# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_account_properties200_response_all_of_data_inner_group import GetAccountProperties200ResponseAllOfDataInnerGroup
from openapi_server import util


class GetAccountProperties200ResponseAllOfDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: GetAccountProperties200ResponseAllOfDataInnerGroup=None, is_computed: bool=None, label: str=None, name: str=None):
        """GetAccountProperties200ResponseAllOfDataInner - a model defined in OpenAPI

        :param group: The group of this GetAccountProperties200ResponseAllOfDataInner.
        :param is_computed: The is_computed of this GetAccountProperties200ResponseAllOfDataInner.
        :param label: The label of this GetAccountProperties200ResponseAllOfDataInner.
        :param name: The name of this GetAccountProperties200ResponseAllOfDataInner.
        """
        self.openapi_types = {
            'group': GetAccountProperties200ResponseAllOfDataInnerGroup,
            'is_computed': bool,
            'label': str,
            'name': str
        }

        self.attribute_map = {
            'group': 'group',
            'is_computed': 'isComputed',
            'label': 'label',
            'name': 'name'
        }

        self._group = group
        self._is_computed = is_computed
        self._label = label
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAccountProperties200ResponseAllOfDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getAccountProperties_200_response_allOf_data_inner of this GetAccountProperties200ResponseAllOfDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this GetAccountProperties200ResponseAllOfDataInner.


        :return: The group of this GetAccountProperties200ResponseAllOfDataInner.
        :rtype: GetAccountProperties200ResponseAllOfDataInnerGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GetAccountProperties200ResponseAllOfDataInner.


        :param group: The group of this GetAccountProperties200ResponseAllOfDataInner.
        :type group: GetAccountProperties200ResponseAllOfDataInnerGroup
        """

        self._group = group

    @property
    def is_computed(self):
        """Gets the is_computed of this GetAccountProperties200ResponseAllOfDataInner.


        :return: The is_computed of this GetAccountProperties200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._is_computed

    @is_computed.setter
    def is_computed(self, is_computed):
        """Sets the is_computed of this GetAccountProperties200ResponseAllOfDataInner.


        :param is_computed: The is_computed of this GetAccountProperties200ResponseAllOfDataInner.
        :type is_computed: bool
        """
        if is_computed is None:
            raise ValueError("Invalid value for `is_computed`, must not be `None`")

        self._is_computed = is_computed

    @property
    def label(self):
        """Gets the label of this GetAccountProperties200ResponseAllOfDataInner.


        :return: The label of this GetAccountProperties200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GetAccountProperties200ResponseAllOfDataInner.


        :param label: The label of this GetAccountProperties200ResponseAllOfDataInner.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def name(self):
        """Gets the name of this GetAccountProperties200ResponseAllOfDataInner.


        :return: The name of this GetAccountProperties200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetAccountProperties200ResponseAllOfDataInner.


        :param name: The name of this GetAccountProperties200ResponseAllOfDataInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
