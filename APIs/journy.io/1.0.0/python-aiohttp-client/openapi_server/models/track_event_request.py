# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_event_request_metadata_value import TrackEventRequestMetadataValue
from openapi_server.models.track_journey_event_request_identification import TrackJourneyEventRequestIdentification
from openapi_server import util


class TrackEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identification: TrackJourneyEventRequestIdentification=None, metadata: Dict[str, TrackEventRequestMetadataValue]=None, name: str=None, triggered_at: str=None):
        """TrackEventRequest - a model defined in OpenAPI

        :param identification: The identification of this TrackEventRequest.
        :param metadata: The metadata of this TrackEventRequest.
        :param name: The name of this TrackEventRequest.
        :param triggered_at: The triggered_at of this TrackEventRequest.
        """
        self.openapi_types = {
            'identification': TrackJourneyEventRequestIdentification,
            'metadata': Dict[str, TrackEventRequestMetadataValue],
            'name': str,
            'triggered_at': str
        }

        self.attribute_map = {
            'identification': 'identification',
            'metadata': 'metadata',
            'name': 'name',
            'triggered_at': 'triggeredAt'
        }

        self._identification = identification
        self._metadata = metadata
        self._name = name
        self._triggered_at = triggered_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trackEvent_request of this TrackEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identification(self):
        """Gets the identification of this TrackEventRequest.


        :return: The identification of this TrackEventRequest.
        :rtype: TrackJourneyEventRequestIdentification
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this TrackEventRequest.


        :param identification: The identification of this TrackEventRequest.
        :type identification: TrackJourneyEventRequestIdentification
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")

        self._identification = identification

    @property
    def metadata(self):
        """Gets the metadata of this TrackEventRequest.

        Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)

        :return: The metadata of this TrackEventRequest.
        :rtype: Dict[str, TrackEventRequestMetadataValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TrackEventRequest.

        Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)

        :param metadata: The metadata of this TrackEventRequest.
        :type metadata: Dict[str, TrackEventRequestMetadataValue]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this TrackEventRequest.


        :return: The name of this TrackEventRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackEventRequest.


        :param name: The name of this TrackEventRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def triggered_at(self):
        """Gets the triggered_at of this TrackEventRequest.

        If left blank this defaults to the current datetime

        :return: The triggered_at of this TrackEventRequest.
        :rtype: str
        """
        return self._triggered_at

    @triggered_at.setter
    def triggered_at(self, triggered_at):
        """Sets the triggered_at of this TrackEventRequest.

        If left blank this defaults to the current datetime

        :param triggered_at: The triggered_at of this TrackEventRequest.
        :type triggered_at: str
        """

        self._triggered_at = triggered_at
