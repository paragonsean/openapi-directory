# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_account202_response_all_of_meta import DeleteAccount202ResponseAllOfMeta
from openapi_server import util


class UpsertAccount201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: DeleteAccount202ResponseAllOfMeta=None, message: str=None, rejected: Dict[str, str]=None):
        """UpsertAccount201Response - a model defined in OpenAPI

        :param meta: The meta of this UpsertAccount201Response.
        :param message: The message of this UpsertAccount201Response.
        :param rejected: The rejected of this UpsertAccount201Response.
        """
        self.openapi_types = {
            'meta': DeleteAccount202ResponseAllOfMeta,
            'message': str,
            'rejected': Dict[str, str]
        }

        self.attribute_map = {
            'meta': 'meta',
            'message': 'message',
            'rejected': 'rejected'
        }

        self._meta = meta
        self._message = message
        self._rejected = rejected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertAccount201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upsertAccount_201_response of this UpsertAccount201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this UpsertAccount201Response.


        :return: The meta of this UpsertAccount201Response.
        :rtype: DeleteAccount202ResponseAllOfMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this UpsertAccount201Response.


        :param meta: The meta of this UpsertAccount201Response.
        :type meta: DeleteAccount202ResponseAllOfMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def message(self):
        """Gets the message of this UpsertAccount201Response.


        :return: The message of this UpsertAccount201Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpsertAccount201Response.


        :param message: The message of this UpsertAccount201Response.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def rejected(self):
        """Gets the rejected of this UpsertAccount201Response.

        If validation fails, specifies the property name and error message

        :return: The rejected of this UpsertAccount201Response.
        :rtype: Dict[str, str]
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this UpsertAccount201Response.

        If validation fails, specifies the property name and error message

        :param rejected: The rejected of this UpsertAccount201Response.
        :type rejected: Dict[str, str]
        """

        self._rejected = rejected
