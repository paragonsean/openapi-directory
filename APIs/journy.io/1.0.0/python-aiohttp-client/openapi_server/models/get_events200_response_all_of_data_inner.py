# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_events200_response_all_of_data_inner_group import GetEvents200ResponseAllOfDataInnerGroup
from openapi_server import util


class GetEvents200ResponseAllOfDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: GetEvents200ResponseAllOfDataInnerGroup=None, id: str=None, name: str=None):
        """GetEvents200ResponseAllOfDataInner - a model defined in OpenAPI

        :param group: The group of this GetEvents200ResponseAllOfDataInner.
        :param id: The id of this GetEvents200ResponseAllOfDataInner.
        :param name: The name of this GetEvents200ResponseAllOfDataInner.
        """
        self.openapi_types = {
            'group': GetEvents200ResponseAllOfDataInnerGroup,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'group': 'group',
            'id': 'id',
            'name': 'name'
        }

        self._group = group
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEvents200ResponseAllOfDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getEvents_200_response_allOf_data_inner of this GetEvents200ResponseAllOfDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this GetEvents200ResponseAllOfDataInner.


        :return: The group of this GetEvents200ResponseAllOfDataInner.
        :rtype: GetEvents200ResponseAllOfDataInnerGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GetEvents200ResponseAllOfDataInner.


        :param group: The group of this GetEvents200ResponseAllOfDataInner.
        :type group: GetEvents200ResponseAllOfDataInnerGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this GetEvents200ResponseAllOfDataInner.


        :return: The id of this GetEvents200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetEvents200ResponseAllOfDataInner.


        :param id: The id of this GetEvents200ResponseAllOfDataInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetEvents200ResponseAllOfDataInner.


        :return: The name of this GetEvents200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetEvents200ResponseAllOfDataInner.


        :param name: The name of this GetEvents200ResponseAllOfDataInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
