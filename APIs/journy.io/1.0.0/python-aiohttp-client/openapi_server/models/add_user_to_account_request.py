# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_user_to_account_request_users_inner import AddUserToAccountRequestUsersInner
from openapi_server.models.delete_account_request_identification import DeleteAccountRequestIdentification
from openapi_server import util


class AddUserToAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: DeleteAccountRequestIdentification=None, users: List[AddUserToAccountRequestUsersInner]=None):
        """AddUserToAccountRequest - a model defined in OpenAPI

        :param account: The account of this AddUserToAccountRequest.
        :param users: The users of this AddUserToAccountRequest.
        """
        self.openapi_types = {
            'account': DeleteAccountRequestIdentification,
            'users': List[AddUserToAccountRequestUsersInner]
        }

        self.attribute_map = {
            'account': 'account',
            'users': 'users'
        }

        self._account = account
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUserToAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addUserToAccount_request of this AddUserToAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this AddUserToAccountRequest.


        :return: The account of this AddUserToAccountRequest.
        :rtype: DeleteAccountRequestIdentification
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AddUserToAccountRequest.


        :param account: The account of this AddUserToAccountRequest.
        :type account: DeleteAccountRequestIdentification
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def users(self):
        """Gets the users of this AddUserToAccountRequest.


        :return: The users of this AddUserToAccountRequest.
        :rtype: List[AddUserToAccountRequestUsersInner]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AddUserToAccountRequest.


        :param users: The users of this AddUserToAccountRequest.
        :type users: List[AddUserToAccountRequestUsersInner]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
