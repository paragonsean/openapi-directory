/**
 * FishEye
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FishEye);
  }
}(this, function(expect, FishEye) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FishEye.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('findSliceData', function() {
      it('should call findSliceData successfully', function(done) {
        //uncomment below and update the code to test findSliceData
        //instance.findSliceData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllRepositories', function() {
      it('should call getAllRepositories successfully', function(done) {
        //uncomment below and update the code to test getAllRepositories
        //instance.getAllRepositories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangeset', function() {
      it('should call getChangeset successfully', function(done) {
        //uncomment below and update the code to test getChangeset
        //instance.getChangeset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangesetDetails', function() {
      it('should call getChangesetDetails successfully', function(done) {
        //uncomment below and update the code to test getChangesetDetails
        //instance.getChangesetDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangesetsForText', function() {
      it('should call getChangesetsForText successfully', function(done) {
        //uncomment below and update the code to test getChangesetsForText
        //instance.getChangesetsForText(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCrossRepositoryQuery', function() {
      it('should call getCrossRepositoryQuery successfully', function(done) {
        //uncomment below and update the code to test getCrossRepositoryQuery
        //instance.getCrossRepositoryQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPathList', function() {
      it('should call getPathList successfully', function(done) {
        //uncomment below and update the code to test getPathList
        //instance.getPathList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuery', function() {
      it('should call getQuery successfully', function(done) {
        //uncomment below and update the code to test getQuery
        //instance.getQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueryAsRows', function() {
      it('should call getQueryAsRows successfully', function(done) {
        //uncomment below and update the code to test getQueryAsRows
        //instance.getQueryAsRows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepositoryInfo', function() {
      it('should call getRepositoryInfo successfully', function(done) {
        //uncomment below and update the code to test getRepositoryInfo
        //instance.getRepositoryInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReviewsForChangeset', function() {
      it('should call getReviewsForChangeset successfully', function(done) {
        //uncomment below and update the code to test getReviewsForChangeset
        //instance.getReviewsForChangeset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReviewsForChangesets', function() {
      it('should call getReviewsForChangesets successfully', function(done) {
        //uncomment below and update the code to test getReviewsForChangesets
        //instance.getReviewsForChangesets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRevisionInfo', function() {
      it('should call getRevisionInfo successfully', function(done) {
        //uncomment below and update the code to test getRevisionInfo
        //instance.getRevisionInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChangesets', function() {
      it('should call listChangesets successfully', function(done) {
        //uncomment below and update the code to test listChangesets
        //instance.listChangesets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPathHistory', function() {
      it('should call listPathHistory successfully', function(done) {
        //uncomment below and update the code to test listPathHistory
        //instance.listPathHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForRevision', function() {
      it('should call listTagsForRevision successfully', function(done) {
        //uncomment below and update the code to test listTagsForRevision
        //instance.listTagsForRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
