/**
 * FishEye
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findSliceData operation.
     * @callback module:api/DefaultApi~findSliceDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * finds slice data the query
     * @param {String} repository the key of the repository to search
     * @param {Object} opts Optional parameters
     * @param {String} [branch] the set of branches to search. If not specified, will search all branches
     * @param {String} [id] the id of the changeset which we are
     * @param {String} [direction = 'around')] the direction to traverse. May be \"before\", \"after\" or \"around\"
     * @param {Number} [size = 50)] the number of changesets to return in the slice
     * @param {module:api/DefaultApi~findSliceDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findSliceData(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling findSliceData");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'branch': opts['branch'],
        'id': opts['id'],
        'direction': opts['direction'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/commit-graph-v1/slice/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRepositories operation.
     * @callback module:api/DefaultApi~getAllRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the repositories.
     * @param {module:api/DefaultApi~getAllRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllRepositories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/repositories-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeset operation.
     * @callback module:api/DefaultApi~getChangesetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} csid the ChangesetID of the changeset to return.
     * @param {String} repository the key of the repository to query.
     * @param {module:api/DefaultApi~getChangesetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChangeset(csid, repository, callback) {
      let postBody = null;
      // verify the required parameter 'csid' is set
      if (csid === undefined || csid === null) {
        throw new Error("Missing the required parameter 'csid' when calling getChangeset");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getChangeset");
      }

      let pathParams = {
        'csid': csid,
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/revisionData-v1/changeset/{repository}/{csid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangesetDetails operation.
     * @callback module:api/DefaultApi~getChangesetDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves detailed information about a set of changesets in a repository, designed to be used with the FishEye commit graph
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~getChangesetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChangesetDetails(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getChangesetDetails");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/commit-graph-v1/details/{repository}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangesetsForText operation.
     * @callback module:api/DefaultApi~getChangesetsForTextCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of changesets from a repository.
     * @param {Object} opts Optional parameters
     * @param {String} [rep] the key of the repository
     * @param {String} [path] repository path
     * @param {String} [committer] ID of the committer
     * @param {String} [comment] comment to match
     * @param {String} [p4JobFixed] Perforce option to select the changesets marked as fixing
     * @param {String} [expand] expand query parameter to specify the maximum number of results
     * @param {String} [beforeCsid] parent of the changesets
     * @param {module:api/DefaultApi~getChangesetsForTextCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChangesetsForText(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'rep': opts['rep'],
        'path': opts['path'],
        'committer': opts['committer'],
        'comment': opts['comment'],
        'p4JobFixed': opts['p4JobFixed'],
        'expand': opts['expand'],
        'beforeCsid': opts['beforeCsid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/changeset-v1/listChangesets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrossRepositoryQuery operation.
     * @callback module:api/DefaultApi~getCrossRepositoryQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a query across repositories. By default, this will search all repositories.
     * @param {Object} opts Optional parameters
     * @param {String} [query] text to search for in commit message and p4 jobId. Must not be empty.
     * @param {String} [repository] restrict search to only these repositories (by their keys)
     * @param {String} [expand] expand query parameter to specify the maximum number of results. Format is changesets[n:m].revisions[n:m],reviews         the default number of changesets returned is 30, the maximum returned is 100
     * @param {module:api/DefaultApi~getCrossRepositoryQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCrossRepositoryQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'repository': opts['repository'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/search-v1/crossRepositoryQuery', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPathList operation.
     * @callback module:api/DefaultApi~getPathListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of information about files and directories in a path.
     * @param {String} repository the key of the repository to query.
     * @param {Object} opts Optional parameters
     * @param {String} [path] the path to query, with respect to the fisheye repository root.
     * @param {module:api/DefaultApi~getPathListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPathList(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getPathList");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/revisionData-v1/pathList/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuery operation.
     * @callback module:api/DefaultApi~getQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a FishEye query against a specific repository.
     * @param {String} repository the key of the repository
     * @param {Object} opts Optional parameters
     * @param {String} [query] FishEye query to execute
     * @param {String} [maxReturn] maximum number of results (which can be left unspecified, but in that case,  the maximum number of results will set to 3000 results)
     * @param {module:api/DefaultApi~getQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getQuery(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getQuery");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'query': opts['query'],
        'maxReturn': opts['maxReturn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/search-v1/query/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryAsRows operation.
     * @callback module:api/DefaultApi~getQueryAsRowsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a FishEye query (that contains a \"return\" statement) against a specific repository.
     * @param {String} repository the key of the repository
     * @param {Object} opts Optional parameters
     * @param {String} [query] FishEye query to execute (which must contain a \"return\" statement)
     * @param {String} [maxReturn] maximum number of results (which can be left unspecified, but in that case,  the maximum number of results will set to 3000 results)
     * @param {module:api/DefaultApi~getQueryAsRowsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getQueryAsRows(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getQueryAsRows");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'query': opts['query'],
        'maxReturn': opts['maxReturn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/search-v1/queryAsRows/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryInfo operation.
     * @callback module:api/DefaultApi~getRepositoryInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about a repository.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~getRepositoryInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRepositoryInfo(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getRepositoryInfo");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/repositories-v1/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewsForChangeset operation.
     * @callback module:api/DefaultApi~getReviewsForChangesetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of reviews for a changeset in a given repository.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~getReviewsForChangesetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewsForChangeset(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getReviewsForChangeset");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/search-v1/reviewsForChangeset/{repository}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewsForChangesets operation.
     * @callback module:api/DefaultApi~getReviewsForChangesetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of reviews for each given changeset in a given repository.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~getReviewsForChangesetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReviewsForChangesets(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getReviewsForChangesets");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/search-v1/reviewsForChangesets/{repository}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevisionInfo operation.
     * @callback module:api/DefaultApi~getRevisionInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} repository the key of the repository to query.
     * @param {Object} opts Optional parameters
     * @param {String} [path] the path of the filerevision, with respect to the fisheye repository root.
     * @param {String} [revision] the id of the filerevision to retrieve.
     * @param {module:api/DefaultApi~getRevisionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRevisionInfo(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getRevisionInfo");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path'],
        'revision': opts['revision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/revisionData-v1/revisionInfo/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChangesets operation.
     * @callback module:api/DefaultApi~listChangesetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of changesets on a repository.
     * @param {String} repository the key of the repository to query.
     * @param {Object} opts Optional parameters
     * @param {String} [path] restrict the changesets to those in this path, should be \"/\" to look at the whole repository.
     * @param {String} [start] only return changesets after this date.
     * @param {String} [end] only return changesets before this date.
     * @param {String} [maxReturn] the maximum number of changesets to return.
     * @param {module:api/DefaultApi~listChangesetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listChangesets(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling listChangesets");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path'],
        'start': opts['start'],
        'end': opts['end'],
        'maxReturn': opts['maxReturn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/revisionData-v1/changesetList/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPathHistory operation.
     * @callback module:api/DefaultApi~listPathHistoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the file revisions for a specific path.
     * @param {String} repository the key of the repository to query.
     * @param {Object} opts Optional parameters
     * @param {String} [path] the path to query.
     * @param {module:api/DefaultApi~listPathHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listPathHistory(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling listPathHistory");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/revisionData-v1/pathHistory/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForRevision operation.
     * @callback module:api/DefaultApi~listTagsForRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} repository the key of the repository to query.
     * @param {Object} opts Optional parameters
     * @param {String} [path] the path of the filerevision, with respect to the fisheye repository root.
     * @param {String} [revision] the id of the filerevision to retrieve.
     * @param {module:api/DefaultApi~listTagsForRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listTagsForRevision(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling listTagsForRevision");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'path': opts['path'],
        'revision': opts['revision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fe/revisionData-v1/revisionTags/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
