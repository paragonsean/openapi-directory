/**
 * FishEye
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  branch QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void findSliceData(const QString &repository, const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());


    virtual void getAllRepositories();

    /**
    * @param[in]  csid QString [required]
    * @param[in]  repository QString [required]
    */
    virtual void getChangeset(const QString &csid, const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void getChangesetDetails(const QString &repository);

    /**
    * @param[in]  rep QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  committer QString [optional]
    * @param[in]  comment QString [optional]
    * @param[in]  p4_job_fixed QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  before_csid QString [optional]
    */
    virtual void getChangesetsForText(const ::OpenAPI::OptionalParam<QString> &rep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &committer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &p4_job_fixed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_csid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  repository QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getCrossRepositoryQuery(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &repository = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void getPathList(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  max_return QString [optional]
    */
    virtual void getQuery(const QString &repository, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_return = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  max_return QString [optional]
    */
    virtual void getQueryAsRows(const QString &repository, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_return = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    */
    virtual void getRepositoryInfo(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void getReviewsForChangeset(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void getReviewsForChangesets(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  revision QString [optional]
    */
    virtual void getRevisionInfo(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revision = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  start QString [optional]
    * @param[in]  end QString [optional]
    * @param[in]  max_return QString [optional]
    */
    virtual void listChangesets(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_return = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void listPathHistory(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  revision QString [optional]
    */
    virtual void listTagsForRevision(const QString &repository, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revision = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findSliceDataCallback(OAIHttpRequestWorker *worker);
    void getAllRepositoriesCallback(OAIHttpRequestWorker *worker);
    void getChangesetCallback(OAIHttpRequestWorker *worker);
    void getChangesetDetailsCallback(OAIHttpRequestWorker *worker);
    void getChangesetsForTextCallback(OAIHttpRequestWorker *worker);
    void getCrossRepositoryQueryCallback(OAIHttpRequestWorker *worker);
    void getPathListCallback(OAIHttpRequestWorker *worker);
    void getQueryCallback(OAIHttpRequestWorker *worker);
    void getQueryAsRowsCallback(OAIHttpRequestWorker *worker);
    void getRepositoryInfoCallback(OAIHttpRequestWorker *worker);
    void getReviewsForChangesetCallback(OAIHttpRequestWorker *worker);
    void getReviewsForChangesetsCallback(OAIHttpRequestWorker *worker);
    void getRevisionInfoCallback(OAIHttpRequestWorker *worker);
    void listChangesetsCallback(OAIHttpRequestWorker *worker);
    void listPathHistoryCallback(OAIHttpRequestWorker *worker);
    void listTagsForRevisionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findSliceDataSignal();
    void getAllRepositoriesSignal();
    void getChangesetSignal();
    void getChangesetDetailsSignal();
    void getChangesetsForTextSignal();
    void getCrossRepositoryQuerySignal();
    void getPathListSignal();
    void getQuerySignal();
    void getQueryAsRowsSignal();
    void getRepositoryInfoSignal();
    void getReviewsForChangesetSignal();
    void getReviewsForChangesetsSignal();
    void getRevisionInfoSignal();
    void listChangesetsSignal();
    void listPathHistorySignal();
    void listTagsForRevisionSignal();


    void findSliceDataSignalFull(OAIHttpRequestWorker *worker);
    void getAllRepositoriesSignalFull(OAIHttpRequestWorker *worker);
    void getChangesetSignalFull(OAIHttpRequestWorker *worker);
    void getChangesetDetailsSignalFull(OAIHttpRequestWorker *worker);
    void getChangesetsForTextSignalFull(OAIHttpRequestWorker *worker);
    void getCrossRepositoryQuerySignalFull(OAIHttpRequestWorker *worker);
    void getPathListSignalFull(OAIHttpRequestWorker *worker);
    void getQuerySignalFull(OAIHttpRequestWorker *worker);
    void getQueryAsRowsSignalFull(OAIHttpRequestWorker *worker);
    void getRepositoryInfoSignalFull(OAIHttpRequestWorker *worker);
    void getReviewsForChangesetSignalFull(OAIHttpRequestWorker *worker);
    void getReviewsForChangesetsSignalFull(OAIHttpRequestWorker *worker);
    void getRevisionInfoSignalFull(OAIHttpRequestWorker *worker);
    void listChangesetsSignalFull(OAIHttpRequestWorker *worker);
    void listPathHistorySignalFull(OAIHttpRequestWorker *worker);
    void listTagsForRevisionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use findSliceDataSignalError() instead")
    void findSliceDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findSliceDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRepositoriesSignalError() instead")
    void getAllRepositoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRepositoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangesetSignalError() instead")
    void getChangesetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChangesetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangesetDetailsSignalError() instead")
    void getChangesetDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChangesetDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangesetsForTextSignalError() instead")
    void getChangesetsForTextSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChangesetsForTextSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrossRepositoryQuerySignalError() instead")
    void getCrossRepositoryQuerySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCrossRepositoryQuerySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathListSignalError() instead")
    void getPathListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPathListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuerySignalError() instead")
    void getQuerySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryAsRowsSignalError() instead")
    void getQueryAsRowsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryAsRowsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryInfoSignalError() instead")
    void getRepositoryInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForChangesetSignalError() instead")
    void getReviewsForChangesetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForChangesetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForChangesetsSignalError() instead")
    void getReviewsForChangesetsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForChangesetsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionInfoSignalError() instead")
    void getRevisionInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChangesetsSignalError() instead")
    void listChangesetsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listChangesetsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPathHistorySignalError() instead")
    void listPathHistorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listPathHistorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForRevisionSignalError() instead")
    void listTagsForRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findSliceDataSignalErrorFull() instead")
    void findSliceDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findSliceDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllRepositoriesSignalErrorFull() instead")
    void getAllRepositoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllRepositoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangesetSignalErrorFull() instead")
    void getChangesetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangesetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangesetDetailsSignalErrorFull() instead")
    void getChangesetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangesetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangesetsForTextSignalErrorFull() instead")
    void getChangesetsForTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangesetsForTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrossRepositoryQuerySignalErrorFull() instead")
    void getCrossRepositoryQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrossRepositoryQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPathListSignalErrorFull() instead")
    void getPathListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPathListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuerySignalErrorFull() instead")
    void getQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryAsRowsSignalErrorFull() instead")
    void getQueryAsRowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryAsRowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryInfoSignalErrorFull() instead")
    void getRepositoryInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForChangesetSignalErrorFull() instead")
    void getReviewsForChangesetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForChangesetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewsForChangesetsSignalErrorFull() instead")
    void getReviewsForChangesetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewsForChangesetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRevisionInfoSignalErrorFull() instead")
    void getRevisionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRevisionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChangesetsSignalErrorFull() instead")
    void listChangesetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChangesetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPathHistorySignalErrorFull() instead")
    void listPathHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPathHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForRevisionSignalErrorFull() instead")
    void listTagsForRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
