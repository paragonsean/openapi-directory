/*
 * FishEye
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * finds slice data the query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSliceDataTest() throws ApiException {
        String repository = null;
        String branch = null;
        String id = null;
        String direction = null;
        Integer size = null;
        api.findSliceData(repository, branch, id, direction, size);
        // TODO: test validations
    }

    /**
     * List all the repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRepositoriesTest() throws ApiException {
        api.getAllRepositories();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangesetTest() throws ApiException {
        String csid = null;
        String repository = null;
        api.getChangeset(csid, repository);
        // TODO: test validations
    }

    /**
     * Retrieves detailed information about a set of changesets in a repository, designed to be used with the FishEye commit graph
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangesetDetailsTest() throws ApiException {
        String repository = null;
        api.getChangesetDetails(repository);
        // TODO: test validations
    }

    /**
     * List of changesets from a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangesetsForTextTest() throws ApiException {
        String rep = null;
        String path = null;
        String committer = null;
        String comment = null;
        String p4JobFixed = null;
        String expand = null;
        String beforeCsid = null;
        api.getChangesetsForText(rep, path, committer, comment, p4JobFixed, expand, beforeCsid);
        // TODO: test validations
    }

    /**
     * Execute a query across repositories. By default, this will search all repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrossRepositoryQueryTest() throws ApiException {
        String query = null;
        String repository = null;
        String expand = null;
        api.getCrossRepositoryQuery(query, repository, expand);
        // TODO: test validations
    }

    /**
     * Get a list of information about files and directories in a path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPathListTest() throws ApiException {
        String repository = null;
        String path = null;
        api.getPathList(repository, path);
        // TODO: test validations
    }

    /**
     * Execute a FishEye query against a specific repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryTest() throws ApiException {
        String repository = null;
        String query = null;
        String maxReturn = null;
        api.getQuery(repository, query, maxReturn);
        // TODO: test validations
    }

    /**
     * Execute a FishEye query (that contains a \&quot;return\&quot; statement) against a specific repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryAsRowsTest() throws ApiException {
        String repository = null;
        String query = null;
        String maxReturn = null;
        api.getQueryAsRows(repository, query, maxReturn);
        // TODO: test validations
    }

    /**
     * Get the information about a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryInfoTest() throws ApiException {
        String repository = null;
        api.getRepositoryInfo(repository);
        // TODO: test validations
    }

    /**
     * Retrieve a list of reviews for a changeset in a given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewsForChangesetTest() throws ApiException {
        String repository = null;
        api.getReviewsForChangeset(repository);
        // TODO: test validations
    }

    /**
     * Retrieve a list of reviews for each given changeset in a given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReviewsForChangesetsTest() throws ApiException {
        String repository = null;
        api.getReviewsForChangesets(repository);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevisionInfoTest() throws ApiException {
        String repository = null;
        String path = null;
        String revision = null;
        api.getRevisionInfo(repository, path, revision);
        // TODO: test validations
    }

    /**
     * Get a list of changesets on a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChangesetsTest() throws ApiException {
        String repository = null;
        String path = null;
        String start = null;
        String end = null;
        String maxReturn = null;
        api.listChangesets(repository, path, start, end, maxReturn);
        // TODO: test validations
    }

    /**
     * Get a list of the file revisions for a specific path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPathHistoryTest() throws ApiException {
        String repository = null;
        String path = null;
        api.listPathHistory(repository, path);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForRevisionTest() throws ApiException {
        String repository = null;
        String path = null;
        String revision = null;
        api.listTagsForRevision(repository, path, revision);
        // TODO: test validations
    }

}
