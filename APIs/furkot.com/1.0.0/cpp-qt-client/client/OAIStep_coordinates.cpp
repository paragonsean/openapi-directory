/**
 * Furkot Trips
 * Furkot provides Rest API to access user trip data. Using Furkot API an application can list user trips and display stops for a specific trip. Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: trips@furkot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStep_coordinates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStep_coordinates::OAIStep_coordinates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStep_coordinates::OAIStep_coordinates() {
    this->initializeModel();
}

OAIStep_coordinates::~OAIStep_coordinates() {}

void OAIStep_coordinates::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;
}

void OAIStep_coordinates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStep_coordinates::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;
}

QString OAIStep_coordinates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStep_coordinates::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    return obj;
}

float OAIStep_coordinates::getLat() const {
    return m_lat;
}
void OAIStep_coordinates::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIStep_coordinates::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIStep_coordinates::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIStep_coordinates::getLon() const {
    return m_lon;
}
void OAIStep_coordinates::setLon(const float &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIStep_coordinates::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIStep_coordinates::is_lon_Valid() const{
    return m_lon_isValid;
}

bool OAIStep_coordinates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStep_coordinates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
