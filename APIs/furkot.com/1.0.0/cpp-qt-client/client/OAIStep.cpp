/**
 * Furkot Trips
 * Furkot provides Rest API to access user trip data. Using Furkot API an application can list user trips and display stops for a specific trip. Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: trips@furkot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStep::OAIStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStep::OAIStep() {
    this->initializeModel();
}

OAIStep::~OAIStep() {}

void OAIStep::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_arrival_isSet = false;
    m_arrival_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_departure_isSet = false;
    m_departure_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nights_isSet = false;
    m_nights_isValid = false;

    m_passthru_isSet = false;
    m_passthru_isValid = false;

    m_route_isSet = false;
    m_route_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStep::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_arrival_isValid = ::OpenAPI::fromJsonValue(m_arrival, json[QString("arrival")]);
    m_arrival_isSet = !json[QString("arrival")].isNull() && m_arrival_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_departure_isValid = ::OpenAPI::fromJsonValue(m_departure, json[QString("departure")]);
    m_departure_isSet = !json[QString("departure")].isNull() && m_departure_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nights_isValid = ::OpenAPI::fromJsonValue(m_nights, json[QString("nights")]);
    m_nights_isSet = !json[QString("nights")].isNull() && m_nights_isValid;

    m_passthru_isValid = ::OpenAPI::fromJsonValue(m_passthru, json[QString("passthru")]);
    m_passthru_isSet = !json[QString("passthru")].isNull() && m_passthru_isValid;

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStep::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_arrival_isSet) {
        obj.insert(QString("arrival"), ::OpenAPI::toJsonValue(m_arrival));
    }
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_departure_isSet) {
        obj.insert(QString("departure"), ::OpenAPI::toJsonValue(m_departure));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nights_isSet) {
        obj.insert(QString("nights"), ::OpenAPI::toJsonValue(m_nights));
    }
    if (m_passthru_isSet) {
        obj.insert(QString("passthru"), ::OpenAPI::toJsonValue(m_passthru));
    }
    if (m_route.isSet()) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIStep::getAddress() const {
    return m_address;
}
void OAIStep::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIStep::is_address_Set() const{
    return m_address_isSet;
}

bool OAIStep::is_address_Valid() const{
    return m_address_isValid;
}

QDateTime OAIStep::getArrival() const {
    return m_arrival;
}
void OAIStep::setArrival(const QDateTime &arrival) {
    m_arrival = arrival;
    m_arrival_isSet = true;
}

bool OAIStep::is_arrival_Set() const{
    return m_arrival_isSet;
}

bool OAIStep::is_arrival_Valid() const{
    return m_arrival_isValid;
}

OAIStep_coordinates OAIStep::getCoordinates() const {
    return m_coordinates;
}
void OAIStep::setCoordinates(const OAIStep_coordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIStep::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIStep::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QDateTime OAIStep::getDeparture() const {
    return m_departure;
}
void OAIStep::setDeparture(const QDateTime &departure) {
    m_departure = departure;
    m_departure_isSet = true;
}

bool OAIStep::is_departure_Set() const{
    return m_departure_isSet;
}

bool OAIStep::is_departure_Valid() const{
    return m_departure_isValid;
}

QString OAIStep::getName() const {
    return m_name;
}
void OAIStep::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStep::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStep::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIStep::getNights() const {
    return m_nights;
}
void OAIStep::setNights(const qint64 &nights) {
    m_nights = nights;
    m_nights_isSet = true;
}

bool OAIStep::is_nights_Set() const{
    return m_nights_isSet;
}

bool OAIStep::is_nights_Valid() const{
    return m_nights_isValid;
}

bool OAIStep::isPassthru() const {
    return m_passthru;
}
void OAIStep::setPassthru(const bool &passthru) {
    m_passthru = passthru;
    m_passthru_isSet = true;
}

bool OAIStep::is_passthru_Set() const{
    return m_passthru_isSet;
}

bool OAIStep::is_passthru_Valid() const{
    return m_passthru_isValid;
}

OAIStep_route OAIStep::getRoute() const {
    return m_route;
}
void OAIStep::setRoute(const OAIStep_route &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAIStep::is_route_Set() const{
    return m_route_isSet;
}

bool OAIStep::is_route_Valid() const{
    return m_route_isValid;
}

QString OAIStep::getUrl() const {
    return m_url;
}
void OAIStep::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIStep::is_url_Set() const{
    return m_url_isSet;
}

bool OAIStep::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthru_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
