/**
 * Furkot Trips
 * Furkot provides Rest API to access user trip data. Using Furkot API an application can list user trips and display stops for a specific trip. Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: trips@furkot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStep_route.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStep_route::OAIStep_route(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStep_route::OAIStep_route() {
    this->initializeModel();
}

OAIStep_route::~OAIStep_route() {}

void OAIStep_route::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_polyline_isSet = false;
    m_polyline_isValid = false;
}

void OAIStep_route::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStep_route::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_polyline_isValid = ::OpenAPI::fromJsonValue(m_polyline, json[QString("polyline")]);
    m_polyline_isSet = !json[QString("polyline")].isNull() && m_polyline_isValid;
}

QString OAIStep_route::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStep_route::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_polyline_isSet) {
        obj.insert(QString("polyline"), ::OpenAPI::toJsonValue(m_polyline));
    }
    return obj;
}

qint64 OAIStep_route::getDistance() const {
    return m_distance;
}
void OAIStep_route::setDistance(const qint64 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIStep_route::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIStep_route::is_distance_Valid() const{
    return m_distance_isValid;
}

qint64 OAIStep_route::getDuration() const {
    return m_duration;
}
void OAIStep_route::setDuration(const qint64 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIStep_route::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIStep_route::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIStep_route::getMode() const {
    return m_mode;
}
void OAIStep_route::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIStep_route::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIStep_route::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIStep_route::getPolyline() const {
    return m_polyline;
}
void OAIStep_route::setPolyline(const QString &polyline) {
    m_polyline = polyline;
    m_polyline_isSet = true;
}

bool OAIStep_route::is_polyline_Set() const{
    return m_polyline_isSet;
}

bool OAIStep_route::is_polyline_Valid() const{
    return m_polyline_isValid;
}

bool OAIStep_route::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_polyline_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStep_route::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
