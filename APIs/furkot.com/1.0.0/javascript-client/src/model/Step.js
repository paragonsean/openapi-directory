/**
 * Furkot Trips
 * Furkot provides Rest API to access user trip data. Using Furkot API an application can list user trips and display stops for a specific trip. Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: trips@furkot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StepCoordinates from './StepCoordinates';
import StepRoute from './StepRoute';

/**
 * The Step model module.
 * @module model/Step
 * @version 1.0.0
 */
class Step {
    /**
     * Constructs a new <code>Step</code>.
     * @alias module:model/Step
     */
    constructor() { 
        
        Step.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Step</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Step} obj Optional instance to populate.
     * @return {module:model/Step} The populated <code>Step</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Step();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('arrival')) {
                obj['arrival'] = ApiClient.convertToType(data['arrival'], 'Date');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = StepCoordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('departure')) {
                obj['departure'] = ApiClient.convertToType(data['departure'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nights')) {
                obj['nights'] = ApiClient.convertToType(data['nights'], 'Number');
            }
            if (data.hasOwnProperty('passthru')) {
                obj['passthru'] = ApiClient.convertToType(data['passthru'], 'Boolean');
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = StepRoute.constructFromObject(data['route']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Step</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Step</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          StepCoordinates.validateJSON(data['coordinates']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `route`
        if (data['route']) { // data not null
          StepRoute.validateJSON(data['route']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * address of the stop
 * @member {String} address
 */
Step.prototype['address'] = undefined;

/**
 * arrival at the stop in its local timezone as YYYY-MM-DDThh:mm
 * @member {Date} arrival
 */
Step.prototype['arrival'] = undefined;

/**
 * @member {module:model/StepCoordinates} coordinates
 */
Step.prototype['coordinates'] = undefined;

/**
 * departure from the stop in its local timezone as YYYY-MM-DDThh:mm
 * @member {Date} departure
 */
Step.prototype['departure'] = undefined;

/**
 * name of the stop
 * @member {String} name
 */
Step.prototype['name'] = undefined;

/**
 * number of nights
 * @member {Number} nights
 */
Step.prototype['nights'] = undefined;

/**
 * true for pass-through points anchoring route
 * @member {Boolean} passthru
 */
Step.prototype['passthru'] = undefined;

/**
 * @member {module:model/StepRoute} route
 */
Step.prototype['route'] = undefined;

/**
 * url of the page with more information about the stop
 * @member {String} url
 */
Step.prototype['url'] = undefined;






export default Step;

