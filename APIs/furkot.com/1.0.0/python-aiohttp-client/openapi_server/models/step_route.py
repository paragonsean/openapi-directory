# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StepRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: int=None, duration: int=None, mode: str=None, polyline: str=None):
        """StepRoute - a model defined in OpenAPI

        :param distance: The distance of this StepRoute.
        :param duration: The duration of this StepRoute.
        :param mode: The mode of this StepRoute.
        :param polyline: The polyline of this StepRoute.
        """
        self.openapi_types = {
            'distance': int,
            'duration': int,
            'mode': str,
            'polyline': str
        }

        self.attribute_map = {
            'distance': 'distance',
            'duration': 'duration',
            'mode': 'mode',
            'polyline': 'polyline'
        }

        self._distance = distance
        self._duration = duration
        self._mode = mode
        self._polyline = polyline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Step_route of this StepRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this StepRoute.

        route distance in meters

        :return: The distance of this StepRoute.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this StepRoute.

        route distance in meters

        :param distance: The distance of this StepRoute.
        :type distance: int
        """

        self._distance = distance

    @property
    def duration(self):
        """Gets the duration of this StepRoute.

        route duration in seconds

        :return: The duration of this StepRoute.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this StepRoute.

        route duration in seconds

        :param duration: The duration of this StepRoute.
        :type duration: int
        """

        self._duration = duration

    @property
    def mode(self):
        """Gets the mode of this StepRoute.

        travel mode

        :return: The mode of this StepRoute.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this StepRoute.

        travel mode

        :param mode: The mode of this StepRoute.
        :type mode: str
        """
        allowed_values = ["car", "motorcycle", "bicycle", "walk", "other"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def polyline(self):
        """Gets the polyline of this StepRoute.

        route path compatible with Google polyline encoding algorithm

        :return: The polyline of this StepRoute.
        :rtype: str
        """
        return self._polyline

    @polyline.setter
    def polyline(self, polyline):
        """Sets the polyline of this StepRoute.

        route path compatible with Google polyline encoding algorithm

        :param polyline: The polyline of this StepRoute.
        :type polyline: str
        """

        self._polyline = polyline
