/*
 * Furkot Trips
 * Furkot provides Rest API to access user trip data. Using Furkot API an application can list user trips and display stops for a specific trip. Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: trips@furkot.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StepCoordinates;
import org.openapitools.client.model.StepRoute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Step
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:04.626927-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Step {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ARRIVAL = "arrival";
  @SerializedName(SERIALIZED_NAME_ARRIVAL)
  private OffsetDateTime arrival;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private StepCoordinates coordinates;

  public static final String SERIALIZED_NAME_DEPARTURE = "departure";
  @SerializedName(SERIALIZED_NAME_DEPARTURE)
  private OffsetDateTime departure;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NIGHTS = "nights";
  @SerializedName(SERIALIZED_NAME_NIGHTS)
  private Long nights;

  public static final String SERIALIZED_NAME_PASSTHRU = "passthru";
  @SerializedName(SERIALIZED_NAME_PASSTHRU)
  private Boolean passthru;

  public static final String SERIALIZED_NAME_ROUTE = "route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private StepRoute route;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Step() {
  }

  public Step address(String address) {
    this.address = address;
    return this;
  }

  /**
   * address of the stop
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Step arrival(OffsetDateTime arrival) {
    this.arrival = arrival;
    return this;
  }

  /**
   * arrival at the stop in its local timezone as YYYY-MM-DDThh:mm
   * @return arrival
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArrival() {
    return arrival;
  }

  public void setArrival(OffsetDateTime arrival) {
    this.arrival = arrival;
  }


  public Step coordinates(StepCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public StepCoordinates getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(StepCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  public Step departure(OffsetDateTime departure) {
    this.departure = departure;
    return this;
  }

  /**
   * departure from the stop in its local timezone as YYYY-MM-DDThh:mm
   * @return departure
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeparture() {
    return departure;
  }

  public void setDeparture(OffsetDateTime departure) {
    this.departure = departure;
  }


  public Step name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the stop
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Step nights(Long nights) {
    this.nights = nights;
    return this;
  }

  /**
   * number of nights
   * @return nights
   */
  @javax.annotation.Nullable
  public Long getNights() {
    return nights;
  }

  public void setNights(Long nights) {
    this.nights = nights;
  }


  public Step passthru(Boolean passthru) {
    this.passthru = passthru;
    return this;
  }

  /**
   * true for pass-through points anchoring route
   * @return passthru
   */
  @javax.annotation.Nullable
  public Boolean getPassthru() {
    return passthru;
  }

  public void setPassthru(Boolean passthru) {
    this.passthru = passthru;
  }


  public Step route(StepRoute route) {
    this.route = route;
    return this;
  }

  /**
   * Get route
   * @return route
   */
  @javax.annotation.Nullable
  public StepRoute getRoute() {
    return route;
  }

  public void setRoute(StepRoute route) {
    this.route = route;
  }


  public Step url(String url) {
    this.url = url;
    return this;
  }

  /**
   * url of the page with more information about the stop
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Step step = (Step) o;
    return Objects.equals(this.address, step.address) &&
        Objects.equals(this.arrival, step.arrival) &&
        Objects.equals(this.coordinates, step.coordinates) &&
        Objects.equals(this.departure, step.departure) &&
        Objects.equals(this.name, step.name) &&
        Objects.equals(this.nights, step.nights) &&
        Objects.equals(this.passthru, step.passthru) &&
        Objects.equals(this.route, step.route) &&
        Objects.equals(this.url, step.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, arrival, coordinates, departure, name, nights, passthru, route, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Step {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nights: ").append(toIndentedString(nights)).append("\n");
    sb.append("    passthru: ").append(toIndentedString(passthru)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("arrival");
    openapiFields.add("coordinates");
    openapiFields.add("departure");
    openapiFields.add("name");
    openapiFields.add("nights");
    openapiFields.add("passthru");
    openapiFields.add("route");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Step
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Step.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Step is not found in the empty JSON string", Step.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Step.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Step` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        StepCoordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `route`
      if (jsonObj.get("route") != null && !jsonObj.get("route").isJsonNull()) {
        StepRoute.validateJsonElement(jsonObj.get("route"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Step.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Step' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Step> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Step.class));

       return (TypeAdapter<T>) new TypeAdapter<Step>() {
           @Override
           public void write(JsonWriter out, Step value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Step read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Step given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Step
   * @throws IOException if the JSON string is invalid with respect to Step
   */
  public static Step fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Step.class);
  }

  /**
   * Convert an instance of Step to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

