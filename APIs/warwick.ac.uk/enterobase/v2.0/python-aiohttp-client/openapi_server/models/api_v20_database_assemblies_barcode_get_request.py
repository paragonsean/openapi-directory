# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiV20DatabaseAssembliesBarcodeGetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assembly_status: str=None, barcode: List[str]=None, limit: int=50, n50: int=None, offset: int=0, only_fields: List[str]=None, orderby: str='barcode', reldate: int=None, sortorder: str='asc', top_species: str=None, uberstrain: str=None, version: int=None):
        """ApiV20DatabaseAssembliesBarcodeGetRequest - a model defined in OpenAPI

        :param assembly_status: The assembly_status of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param barcode: The barcode of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param limit: The limit of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param n50: The n50 of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param offset: The offset of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param only_fields: The only_fields of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param orderby: The orderby of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param reldate: The reldate of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param sortorder: The sortorder of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param top_species: The top_species of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param uberstrain: The uberstrain of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :param version: The version of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        """
        self.openapi_types = {
            'assembly_status': str,
            'barcode': List[str],
            'limit': int,
            'n50': int,
            'offset': int,
            'only_fields': List[str],
            'orderby': str,
            'reldate': int,
            'sortorder': str,
            'top_species': str,
            'uberstrain': str,
            'version': int
        }

        self.attribute_map = {
            'assembly_status': 'assembly_status',
            'barcode': 'barcode',
            'limit': 'limit',
            'n50': 'n50',
            'offset': 'offset',
            'only_fields': 'only_fields',
            'orderby': 'orderby',
            'reldate': 'reldate',
            'sortorder': 'sortorder',
            'top_species': 'top_species',
            'uberstrain': 'uberstrain',
            'version': 'version'
        }

        self._assembly_status = assembly_status
        self._barcode = barcode
        self._limit = limit
        self._n50 = n50
        self._offset = offset
        self._only_fields = only_fields
        self._orderby = orderby
        self._reldate = reldate
        self._sortorder = sortorder
        self._top_species = top_species
        self._uberstrain = uberstrain
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV20DatabaseAssembliesBarcodeGetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _api_v2_0__database__assemblies__barcode__get_request of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assembly_status(self):
        """Gets the assembly_status of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The assembly_status of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: str
        """
        return self._assembly_status

    @assembly_status.setter
    def assembly_status(self, assembly_status):
        """Sets the assembly_status of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param assembly_status: The assembly_status of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type assembly_status: str
        """

        self._assembly_status = assembly_status

    @property
    def barcode(self):
        """Gets the barcode of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The barcode of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: List[str]
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param barcode: The barcode of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type barcode: List[str]
        """

        self._barcode = barcode

    @property
    def limit(self):
        """Gets the limit of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The limit of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param limit: The limit of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def n50(self):
        """Gets the n50 of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The n50 of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: int
        """
        return self._n50

    @n50.setter
    def n50(self, n50):
        """Sets the n50 of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param n50: The n50 of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type n50: int
        """

        self._n50 = n50

    @property
    def offset(self):
        """Gets the offset of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The offset of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param offset: The offset of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def only_fields(self):
        """Gets the only_fields of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The only_fields of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: List[str]
        """
        return self._only_fields

    @only_fields.setter
    def only_fields(self, only_fields):
        """Sets the only_fields of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param only_fields: The only_fields of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type only_fields: List[str]
        """

        self._only_fields = only_fields

    @property
    def orderby(self):
        """Gets the orderby of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The orderby of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: str
        """
        return self._orderby

    @orderby.setter
    def orderby(self, orderby):
        """Sets the orderby of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param orderby: The orderby of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type orderby: str
        """

        self._orderby = orderby

    @property
    def reldate(self):
        """Gets the reldate of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The reldate of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: int
        """
        return self._reldate

    @reldate.setter
    def reldate(self, reldate):
        """Sets the reldate of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param reldate: The reldate of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type reldate: int
        """

        self._reldate = reldate

    @property
    def sortorder(self):
        """Gets the sortorder of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The sortorder of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: str
        """
        return self._sortorder

    @sortorder.setter
    def sortorder(self, sortorder):
        """Sets the sortorder of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param sortorder: The sortorder of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type sortorder: str
        """

        self._sortorder = sortorder

    @property
    def top_species(self):
        """Gets the top_species of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The top_species of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: str
        """
        return self._top_species

    @top_species.setter
    def top_species(self, top_species):
        """Sets the top_species of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param top_species: The top_species of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type top_species: str
        """

        self._top_species = top_species

    @property
    def uberstrain(self):
        """Gets the uberstrain of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The uberstrain of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: str
        """
        return self._uberstrain

    @uberstrain.setter
    def uberstrain(self, uberstrain):
        """Sets the uberstrain of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param uberstrain: The uberstrain of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type uberstrain: str
        """

        self._uberstrain = uberstrain

    @property
    def version(self):
        """Gets the version of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :return: The version of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApiV20DatabaseAssembliesBarcodeGetRequest.


        :param version: The version of this ApiV20DatabaseAssembliesBarcodeGetRequest.
        :type version: int
        """

        self._version = version
