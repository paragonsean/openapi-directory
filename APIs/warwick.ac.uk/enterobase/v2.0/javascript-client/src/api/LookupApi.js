/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV20LookupBarcodePostRequest from '../model/ApiV20LookupBarcodePostRequest';

/**
* Lookup service.
* @module api/LookupApi
* @version v2.0
*/
export default class LookupApi {

    /**
    * Constructs a new LookupApi. 
    * @alias module:api/LookupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV20LookupBarcodeGet operation.
     * @callback module:api/LookupApi~apiV20LookupBarcodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generic endpoint for lookup of barcodes
     * @param {String} barcode Unique barcode for Traces records, <database prefix>_<ID code>_<Table code> e.g. SAL_AA0001AA_ST
     * @param {module:api/LookupApi~apiV20LookupBarcodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20LookupBarcodeGet(barcode, callback) {
      let postBody = null;
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20LookupBarcodeGet");
      }

      let pathParams = {
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/lookup/{barcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20LookupBarcodePost operation.
     * @callback module:api/LookupApi~apiV20LookupBarcodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generic endpoint for lookup of barcodes
     * @param {String} barcode Unique barcode for Traces records, <database prefix>_<ID code>_<Table code> e.g. SAL_AA0001AA_ST
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20LookupBarcodePostRequest} [apiV20LookupBarcodePostRequest] 
     * @param {module:api/LookupApi~apiV20LookupBarcodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20LookupBarcodePost(barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20LookupBarcodePostRequest'];
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20LookupBarcodePost");
      }

      let pathParams = {
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/lookup/{barcode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20LookupGet operation.
     * @callback module:api/LookupApi~apiV20LookupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generic endpoint for lookup list of barcodes
     * @param {Object} opts Optional parameters
     * @param {String} [barcode] Unique barcode for Traces records, <database prefix>_<ID code>_<Table code> e.g. SAL_AA0001AA_ST
     * @param {module:api/LookupApi~apiV20LookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20LookupGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'barcode': opts['barcode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
