/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV20DatabaseTracesBarcodeGetRequest from '../model/ApiV20DatabaseTracesBarcodeGetRequest';

/**
* Traces service.
* @module api/TracesApi
* @version v2.0
*/
export default class TracesApi {

    /**
    * Constructs a new TracesApi. 
    * @alias module:api/TracesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV20DatabaseTracesBarcodeGet operation.
     * @callback module:api/TracesApi~apiV20DatabaseTracesBarcodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Traces (sequence-reads) metadata
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {String} barcode Unique barcode for Traces records, <database prefix>_<ID code>_TR e.g. SAL_AA0001AA_TR
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20DatabaseTracesBarcodeGetRequest} [apiV20DatabaseTracesBarcodeGetRequest] 
     * @param {module:api/TracesApi~apiV20DatabaseTracesBarcodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseTracesBarcodeGet(database, barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20DatabaseTracesBarcodeGetRequest'];
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseTracesBarcodeGet");
      }
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20DatabaseTracesBarcodeGet");
      }

      let pathParams = {
        'database': database,
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/traces/{barcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20DatabaseTracesBarcodePost operation.
     * @callback module:api/TracesApi~apiV20DatabaseTracesBarcodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Traces (sequence-reads) metadata
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {String} barcode Unique barcode for Traces records, <database prefix>_<ID code>_TR e.g. SAL_AA0001AA_TR
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20DatabaseTracesBarcodeGetRequest} [apiV20DatabaseTracesBarcodeGetRequest] 
     * @param {module:api/TracesApi~apiV20DatabaseTracesBarcodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseTracesBarcodePost(database, barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20DatabaseTracesBarcodeGetRequest'];
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseTracesBarcodePost");
      }
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20DatabaseTracesBarcodePost");
      }

      let pathParams = {
        'database': database,
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/traces/{barcode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20DatabaseTracesBarcodePut operation.
     * @callback module:api/TracesApi~apiV20DatabaseTracesBarcodePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Traces (sequence-reads) metadata
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {String} barcode Unique barcode for Traces records, <database prefix>_<ID code>_TR e.g. SAL_AA0001AA_TR
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20DatabaseTracesBarcodeGetRequest} [apiV20DatabaseTracesBarcodeGetRequest] 
     * @param {module:api/TracesApi~apiV20DatabaseTracesBarcodePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseTracesBarcodePut(database, barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20DatabaseTracesBarcodeGetRequest'];
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseTracesBarcodePut");
      }
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20DatabaseTracesBarcodePut");
      }

      let pathParams = {
        'database': database,
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/traces/{barcode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20DatabaseTracesGet operation.
     * @callback module:api/TracesApi~apiV20DatabaseTracesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Traces (sequence-reads) metadata
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [barcode] Unique barcode for Traces records, <database prefix>_<ID code>_TR e.g. SAL_AA0001AA_TR
     * @param {String} [orderby = 'barcode')] Field to order by. Default: barcode
     * @param {Number} [offset = 0)] Cursor position in results
     * @param {Array.<String>} [onlyFields] 
     * @param {String} [sortorder = 'asc')] Order of search results: asc or desc
     * @param {Number} [limit = 50)] Number of results per page
     * @param {module:api/TracesApi~apiV20DatabaseTracesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseTracesGet(database, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseTracesGet");
      }

      let pathParams = {
        'database': database
      };
      let queryParams = {
        'barcode': this.apiClient.buildCollectionParam(opts['barcode'], 'multi'),
        'orderby': opts['orderby'],
        'offset': opts['offset'],
        'only_fields': this.apiClient.buildCollectionParam(opts['onlyFields'], 'multi'),
        'sortorder': opts['sortorder'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/traces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
