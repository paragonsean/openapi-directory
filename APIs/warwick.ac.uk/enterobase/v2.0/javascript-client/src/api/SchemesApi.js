/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV20DatabaseSchemesBarcodeGetRequest from '../model/ApiV20DatabaseSchemesBarcodeGetRequest';

/**
* Schemes service.
* @module api/SchemesApi
* @version v2.0
*/
export default class SchemesApi {

    /**
    * Constructs a new SchemesApi. 
    * @alias module:api/SchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV20DatabaseSchemesBarcodeGet operation.
     * @callback module:api/SchemesApi~apiV20DatabaseSchemesBarcodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Genotyping schemes
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {String} barcode Unique barcode for Strain records, <database prefix>_<ID code> e.g. SAL_AA0001AA
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20DatabaseSchemesBarcodeGetRequest} [apiV20DatabaseSchemesBarcodeGetRequest] 
     * @param {module:api/SchemesApi~apiV20DatabaseSchemesBarcodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseSchemesBarcodeGet(database, barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20DatabaseSchemesBarcodeGetRequest'];
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseSchemesBarcodeGet");
      }
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20DatabaseSchemesBarcodeGet");
      }

      let pathParams = {
        'database': database,
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/schemes/{barcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20DatabaseSchemesBarcodePost operation.
     * @callback module:api/SchemesApi~apiV20DatabaseSchemesBarcodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Genotyping schemes
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {String} barcode Unique barcode for Strain records, <database prefix>_<ID code> e.g. SAL_AA0001AA
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20DatabaseSchemesBarcodeGetRequest} [apiV20DatabaseSchemesBarcodeGetRequest] 
     * @param {module:api/SchemesApi~apiV20DatabaseSchemesBarcodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseSchemesBarcodePost(database, barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20DatabaseSchemesBarcodeGetRequest'];
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseSchemesBarcodePost");
      }
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20DatabaseSchemesBarcodePost");
      }

      let pathParams = {
        'database': database,
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/schemes/{barcode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20DatabaseSchemesBarcodePut operation.
     * @callback module:api/SchemesApi~apiV20DatabaseSchemesBarcodePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Genotyping schemes
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {String} barcode Unique barcode for Strain records, <database prefix>_<ID code> e.g. SAL_AA0001AA
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV20DatabaseSchemesBarcodeGetRequest} [apiV20DatabaseSchemesBarcodeGetRequest] 
     * @param {module:api/SchemesApi~apiV20DatabaseSchemesBarcodePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseSchemesBarcodePut(database, barcode, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV20DatabaseSchemesBarcodeGetRequest'];
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseSchemesBarcodePut");
      }
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling apiV20DatabaseSchemesBarcodePut");
      }

      let pathParams = {
        'database': database,
        'barcode': barcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/schemes/{barcode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV20DatabaseSchemesGet operation.
     * @callback module:api/SchemesApi~apiV20DatabaseSchemesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Genotyping schemes
     * @param {String} database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [barcode] Unique barcode for Strain records, <database prefix>_<ID code> e.g. SAL_AA0001AA
     * @param {String} [orderby = 'barcode')] Field to order by. Default: barcode
     * @param {Number} [offset = 0)] Cursor position in results
     * @param {String} [label] 
     * @param {Array.<String>} [onlyFields] 
     * @param {Date} [created] 
     * @param {Date} [lastmodified] 
     * @param {String} [sortorder = 'asc')] Order of search results: asc or desc
     * @param {Number} [limit = 50)] Number of results per page
     * @param {String} [schemeName] 
     * @param {Number} [version] 
     * @param {module:api/SchemesApi~apiV20DatabaseSchemesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV20DatabaseSchemesGet(database, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling apiV20DatabaseSchemesGet");
      }

      let pathParams = {
        'database': database
      };
      let queryParams = {
        'barcode': this.apiClient.buildCollectionParam(opts['barcode'], 'multi'),
        'orderby': opts['orderby'],
        'offset': opts['offset'],
        'label': opts['label'],
        'only_fields': this.apiClient.buildCollectionParam(opts['onlyFields'], 'multi'),
        'created': opts['created'],
        'lastmodified': opts['lastmodified'],
        'sortorder': opts['sortorder'],
        'limit': opts['limit'],
        'scheme_name': opts['schemeName'],
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2.0/{database}/schemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
