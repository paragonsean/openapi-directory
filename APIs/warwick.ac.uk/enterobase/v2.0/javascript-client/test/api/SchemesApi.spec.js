/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EnterobaseApi);
  }
}(this, function(expect, EnterobaseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EnterobaseApi.SchemesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SchemesApi', function() {
    describe('apiV20DatabaseSchemesBarcodeGet', function() {
      it('should call apiV20DatabaseSchemesBarcodeGet successfully', function(done) {
        //uncomment below and update the code to test apiV20DatabaseSchemesBarcodeGet
        //instance.apiV20DatabaseSchemesBarcodeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV20DatabaseSchemesBarcodePost', function() {
      it('should call apiV20DatabaseSchemesBarcodePost successfully', function(done) {
        //uncomment below and update the code to test apiV20DatabaseSchemesBarcodePost
        //instance.apiV20DatabaseSchemesBarcodePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV20DatabaseSchemesBarcodePut', function() {
      it('should call apiV20DatabaseSchemesBarcodePut successfully', function(done) {
        //uncomment below and update the code to test apiV20DatabaseSchemesBarcodePut
        //instance.apiV20DatabaseSchemesBarcodePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV20DatabaseSchemesGet', function() {
      it('should call apiV20DatabaseSchemesGet successfully', function(done) {
        //uncomment below and update the code to test apiV20DatabaseSchemesGet
        //instance.apiV20DatabaseSchemesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
