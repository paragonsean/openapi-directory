/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LociApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LociApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LociApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV20DatabaseSchemeLociGet
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param scheme2  (required)
     * @param barcode Unique barcode for Strain records, &lt;database prefix&gt;_&lt;ID code&gt; e.g. SAL_AA0001AA (optional)
     * @param locus  (optional)
     * @param offset  (optional, default to 0)
     * @param createTime  (optional)
     * @param onlyFields  (optional)
     * @param limit  (optional, default to 50)
     * @param scheme  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of loci objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed request, contains an error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseSchemeLociGetCall(String database, String scheme2, List<String> barcode, String locus, Integer offset, OffsetDateTime createTime, List<String> onlyFields, Integer limit, String scheme, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/{scheme}/loci"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "scheme" + "}", localVarApiClient.escapeString(scheme2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (barcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "barcode", barcode));
        }

        if (locus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locus", locus));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (createTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("create_time", createTime));
        }

        if (onlyFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "only_fields", onlyFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (scheme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scheme", scheme));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseSchemeLociGetValidateBeforeCall(String database, String scheme2, List<String> barcode, String locus, Integer offset, OffsetDateTime createTime, List<String> onlyFields, Integer limit, String scheme, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseSchemeLociGet(Async)");
        }

        // verify the required parameter 'scheme2' is set
        if (scheme2 == null) {
            throw new ApiException("Missing the required parameter 'scheme2' when calling apiV20DatabaseSchemeLociGet(Async)");
        }

        return apiV20DatabaseSchemeLociGetCall(database, scheme2, barcode, locus, offset, createTime, onlyFields, limit, scheme, _callback);

    }

    /**
     * 
     * Loci 
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param scheme2  (required)
     * @param barcode Unique barcode for Strain records, &lt;database prefix&gt;_&lt;ID code&gt; e.g. SAL_AA0001AA (optional)
     * @param locus  (optional)
     * @param offset  (optional, default to 0)
     * @param createTime  (optional)
     * @param onlyFields  (optional)
     * @param limit  (optional, default to 50)
     * @param scheme  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of loci objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed request, contains an error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseSchemeLociGet(String database, String scheme2, List<String> barcode, String locus, Integer offset, OffsetDateTime createTime, List<String> onlyFields, Integer limit, String scheme) throws ApiException {
        apiV20DatabaseSchemeLociGetWithHttpInfo(database, scheme2, barcode, locus, offset, createTime, onlyFields, limit, scheme);
    }

    /**
     * 
     * Loci 
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param scheme2  (required)
     * @param barcode Unique barcode for Strain records, &lt;database prefix&gt;_&lt;ID code&gt; e.g. SAL_AA0001AA (optional)
     * @param locus  (optional)
     * @param offset  (optional, default to 0)
     * @param createTime  (optional)
     * @param onlyFields  (optional)
     * @param limit  (optional, default to 50)
     * @param scheme  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of loci objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed request, contains an error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseSchemeLociGetWithHttpInfo(String database, String scheme2, List<String> barcode, String locus, Integer offset, OffsetDateTime createTime, List<String> onlyFields, Integer limit, String scheme) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseSchemeLociGetValidateBeforeCall(database, scheme2, barcode, locus, offset, createTime, onlyFields, limit, scheme, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Loci 
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param scheme2  (required)
     * @param barcode Unique barcode for Strain records, &lt;database prefix&gt;_&lt;ID code&gt; e.g. SAL_AA0001AA (optional)
     * @param locus  (optional)
     * @param offset  (optional, default to 0)
     * @param createTime  (optional)
     * @param onlyFields  (optional)
     * @param limit  (optional, default to 50)
     * @param scheme  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of loci objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed request, contains an error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseSchemeLociGetAsync(String database, String scheme2, List<String> barcode, String locus, Integer offset, OffsetDateTime createTime, List<String> onlyFields, Integer limit, String scheme, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseSchemeLociGetValidateBeforeCall(database, scheme2, barcode, locus, offset, createTime, onlyFields, limit, scheme, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
