/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV20LookupBarcodePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LookupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV20LookupBarcodeGet
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20LookupBarcodeGetCall(String barcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2.0/lookup/{barcode}"
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20LookupBarcodeGetValidateBeforeCall(String barcode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20LookupBarcodeGet(Async)");
        }

        return apiV20LookupBarcodeGetCall(barcode, _callback);

    }

    /**
     * 
     * Generic endpoint for lookup of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20LookupBarcodeGet(String barcode) throws ApiException {
        apiV20LookupBarcodeGetWithHttpInfo(barcode);
    }

    /**
     * 
     * Generic endpoint for lookup of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20LookupBarcodeGetWithHttpInfo(String barcode) throws ApiException {
        okhttp3.Call localVarCall = apiV20LookupBarcodeGetValidateBeforeCall(barcode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Generic endpoint for lookup of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20LookupBarcodeGetAsync(String barcode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20LookupBarcodeGetValidateBeforeCall(barcode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20LookupBarcodePost
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @param apiV20LookupBarcodePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20LookupBarcodePostCall(String barcode, ApiV20LookupBarcodePostRequest apiV20LookupBarcodePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20LookupBarcodePostRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/lookup/{barcode}"
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20LookupBarcodePostValidateBeforeCall(String barcode, ApiV20LookupBarcodePostRequest apiV20LookupBarcodePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20LookupBarcodePost(Async)");
        }

        return apiV20LookupBarcodePostCall(barcode, apiV20LookupBarcodePostRequest, _callback);

    }

    /**
     * 
     * Generic endpoint for lookup of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @param apiV20LookupBarcodePostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20LookupBarcodePost(String barcode, ApiV20LookupBarcodePostRequest apiV20LookupBarcodePostRequest) throws ApiException {
        apiV20LookupBarcodePostWithHttpInfo(barcode, apiV20LookupBarcodePostRequest);
    }

    /**
     * 
     * Generic endpoint for lookup of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @param apiV20LookupBarcodePostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20LookupBarcodePostWithHttpInfo(String barcode, ApiV20LookupBarcodePostRequest apiV20LookupBarcodePostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20LookupBarcodePostValidateBeforeCall(barcode, apiV20LookupBarcodePostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Generic endpoint for lookup of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (required)
     * @param apiV20LookupBarcodePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A lookup object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20LookupBarcodePostAsync(String barcode, ApiV20LookupBarcodePostRequest apiV20LookupBarcodePostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20LookupBarcodePostValidateBeforeCall(barcode, apiV20LookupBarcodePostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20LookupGet
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lookup objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Connection timeout, please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20LookupGetCall(String barcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2.0/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20LookupGetValidateBeforeCall(String barcode, final ApiCallback _callback) throws ApiException {
        return apiV20LookupGetCall(barcode, _callback);

    }

    /**
     * 
     * Generic endpoint for lookup list of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lookup objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Connection timeout, please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20LookupGet(String barcode) throws ApiException {
        apiV20LookupGetWithHttpInfo(barcode);
    }

    /**
     * 
     * Generic endpoint for lookup list of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lookup objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Connection timeout, please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20LookupGetWithHttpInfo(String barcode) throws ApiException {
        okhttp3.Call localVarCall = apiV20LookupGetValidateBeforeCall(barcode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Generic endpoint for lookup list of barcodes
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_&lt;Table code&gt; e.g. SAL_AA0001AA_ST (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of lookup objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource or data </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Connection timeout, please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20LookupGetAsync(String barcode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20LookupGetValidateBeforeCall(barcode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
