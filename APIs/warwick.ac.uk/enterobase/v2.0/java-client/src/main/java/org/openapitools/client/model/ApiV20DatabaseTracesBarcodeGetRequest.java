/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV20DatabaseTracesBarcodeGetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:31.568199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV20DatabaseTracesBarcodeGetRequest {
  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private List<String> barcode = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 50;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset = 0;

  public static final String SERIALIZED_NAME_ONLY_FIELDS = "only_fields";
  @SerializedName(SERIALIZED_NAME_ONLY_FIELDS)
  private List<String> onlyFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDERBY = "orderby";
  @SerializedName(SERIALIZED_NAME_ORDERBY)
  private String orderby = "barcode";

  public static final String SERIALIZED_NAME_SORTORDER = "sortorder";
  @SerializedName(SERIALIZED_NAME_SORTORDER)
  private String sortorder = "asc";

  public ApiV20DatabaseTracesBarcodeGetRequest() {
  }

  public ApiV20DatabaseTracesBarcodeGetRequest barcode(List<String> barcode) {
    this.barcode = barcode;
    return this;
  }

  public ApiV20DatabaseTracesBarcodeGetRequest addBarcodeItem(String barcodeItem) {
    if (this.barcode == null) {
      this.barcode = new ArrayList<>();
    }
    this.barcode.add(barcodeItem);
    return this;
  }

  /**
   * Get barcode
   * @return barcode
   */
  @javax.annotation.Nullable
  public List<String> getBarcode() {
    return barcode;
  }

  public void setBarcode(List<String> barcode) {
    this.barcode = barcode;
  }


  public ApiV20DatabaseTracesBarcodeGetRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ApiV20DatabaseTracesBarcodeGetRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public ApiV20DatabaseTracesBarcodeGetRequest onlyFields(List<String> onlyFields) {
    this.onlyFields = onlyFields;
    return this;
  }

  public ApiV20DatabaseTracesBarcodeGetRequest addOnlyFieldsItem(String onlyFieldsItem) {
    if (this.onlyFields == null) {
      this.onlyFields = new ArrayList<>();
    }
    this.onlyFields.add(onlyFieldsItem);
    return this;
  }

  /**
   * Get onlyFields
   * @return onlyFields
   */
  @javax.annotation.Nullable
  public List<String> getOnlyFields() {
    return onlyFields;
  }

  public void setOnlyFields(List<String> onlyFields) {
    this.onlyFields = onlyFields;
  }


  public ApiV20DatabaseTracesBarcodeGetRequest orderby(String orderby) {
    this.orderby = orderby;
    return this;
  }

  /**
   * Get orderby
   * @return orderby
   */
  @javax.annotation.Nullable
  public String getOrderby() {
    return orderby;
  }

  public void setOrderby(String orderby) {
    this.orderby = orderby;
  }


  public ApiV20DatabaseTracesBarcodeGetRequest sortorder(String sortorder) {
    this.sortorder = sortorder;
    return this;
  }

  /**
   * Get sortorder
   * @return sortorder
   */
  @javax.annotation.Nullable
  public String getSortorder() {
    return sortorder;
  }

  public void setSortorder(String sortorder) {
    this.sortorder = sortorder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest = (ApiV20DatabaseTracesBarcodeGetRequest) o;
    return Objects.equals(this.barcode, apiV20DatabaseTracesBarcodeGetRequest.barcode) &&
        Objects.equals(this.limit, apiV20DatabaseTracesBarcodeGetRequest.limit) &&
        Objects.equals(this.offset, apiV20DatabaseTracesBarcodeGetRequest.offset) &&
        Objects.equals(this.onlyFields, apiV20DatabaseTracesBarcodeGetRequest.onlyFields) &&
        Objects.equals(this.orderby, apiV20DatabaseTracesBarcodeGetRequest.orderby) &&
        Objects.equals(this.sortorder, apiV20DatabaseTracesBarcodeGetRequest.sortorder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(barcode, limit, offset, onlyFields, orderby, sortorder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV20DatabaseTracesBarcodeGetRequest {\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    onlyFields: ").append(toIndentedString(onlyFields)).append("\n");
    sb.append("    orderby: ").append(toIndentedString(orderby)).append("\n");
    sb.append("    sortorder: ").append(toIndentedString(sortorder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("barcode");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("only_fields");
    openapiFields.add("orderby");
    openapiFields.add("sortorder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV20DatabaseTracesBarcodeGetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV20DatabaseTracesBarcodeGetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV20DatabaseTracesBarcodeGetRequest is not found in the empty JSON string", ApiV20DatabaseTracesBarcodeGetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV20DatabaseTracesBarcodeGetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV20DatabaseTracesBarcodeGetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull() && !jsonObj.get("barcode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcode` to be an array in the JSON string but got `%s`", jsonObj.get("barcode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("only_fields") != null && !jsonObj.get("only_fields").isJsonNull() && !jsonObj.get("only_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `only_fields` to be an array in the JSON string but got `%s`", jsonObj.get("only_fields").toString()));
      }
      if ((jsonObj.get("orderby") != null && !jsonObj.get("orderby").isJsonNull()) && !jsonObj.get("orderby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderby").toString()));
      }
      if ((jsonObj.get("sortorder") != null && !jsonObj.get("sortorder").isJsonNull()) && !jsonObj.get("sortorder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortorder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortorder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV20DatabaseTracesBarcodeGetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV20DatabaseTracesBarcodeGetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV20DatabaseTracesBarcodeGetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV20DatabaseTracesBarcodeGetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV20DatabaseTracesBarcodeGetRequest>() {
           @Override
           public void write(JsonWriter out, ApiV20DatabaseTracesBarcodeGetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV20DatabaseTracesBarcodeGetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV20DatabaseTracesBarcodeGetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV20DatabaseTracesBarcodeGetRequest
   * @throws IOException if the JSON string is invalid with respect to ApiV20DatabaseTracesBarcodeGetRequest
   */
  public static ApiV20DatabaseTracesBarcodeGetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV20DatabaseTracesBarcodeGetRequest.class);
  }

  /**
   * Convert an instance of ApiV20DatabaseTracesBarcodeGetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

