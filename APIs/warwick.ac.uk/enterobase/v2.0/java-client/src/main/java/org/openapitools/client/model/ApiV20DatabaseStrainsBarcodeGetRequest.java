/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV20DatabaseStrainsBarcodeGetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:31.568199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV20DatabaseStrainsBarcodeGetRequest {
  public static final String SERIALIZED_NAME_ANTIGENIC_FORMULAS = "antigenic_formulas";
  @SerializedName(SERIALIZED_NAME_ANTIGENIC_FORMULAS)
  private String antigenicFormulas;

  public static final String SERIALIZED_NAME_ASSEMBLY_BARCODE = "assembly_barcode";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_BARCODE)
  private String assemblyBarcode;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private List<String> barcode = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COLLECTION_DATE = "collection_date";
  @SerializedName(SERIALIZED_NAME_COLLECTION_DATE)
  private Integer collectionDate;

  public static final String SERIALIZED_NAME_COLLECTION_MONTH = "collection_month";
  @SerializedName(SERIALIZED_NAME_COLLECTION_MONTH)
  private Integer collectionMonth;

  public static final String SERIALIZED_NAME_COLLECTION_TIME = "collection_time";
  @SerializedName(SERIALIZED_NAME_COLLECTION_TIME)
  private String collectionTime;

  public static final String SERIALIZED_NAME_COLLECTION_YEAR = "collection_year";
  @SerializedName(SERIALIZED_NAME_COLLECTION_YEAR)
  private Integer collectionYear;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONTINENT = "continent";
  @SerializedName(SERIALIZED_NAME_CONTINENT)
  private String continent;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_LAB_CONTACT = "lab_contact";
  @SerializedName(SERIALIZED_NAME_LAB_CONTACT)
  private String labContact;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 50;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public static final String SERIALIZED_NAME_MY_STRAINS = "my_strains";
  @SerializedName(SERIALIZED_NAME_MY_STRAINS)
  private Boolean myStrains;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset = 0;

  public static final String SERIALIZED_NAME_ONLY_FIELDS = "only_fields";
  @SerializedName(SERIALIZED_NAME_ONLY_FIELDS)
  private List<String> onlyFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDERBY = "orderby";
  @SerializedName(SERIALIZED_NAME_ORDERBY)
  private String orderby = "barcode";

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RELDATE = "reldate";
  @SerializedName(SERIALIZED_NAME_RELDATE)
  private Integer reldate;

  public static final String SERIALIZED_NAME_RETURN_ALL = "return_all";
  @SerializedName(SERIALIZED_NAME_RETURN_ALL)
  private Boolean returnAll;

  public static final String SERIALIZED_NAME_SAMPLE_ACCESSION = "sample_accession";
  @SerializedName(SERIALIZED_NAME_SAMPLE_ACCESSION)
  private String sampleAccession;

  public static final String SERIALIZED_NAME_SECONDARY_SAMPLE_ACCESSION = "secondary_sample_accession";
  @SerializedName(SERIALIZED_NAME_SECONDARY_SAMPLE_ACCESSION)
  private String secondarySampleAccession;

  public static final String SERIALIZED_NAME_SEROTYPE = "serotype";
  @SerializedName(SERIALIZED_NAME_SEROTYPE)
  private String serotype;

  public static final String SERIALIZED_NAME_SORTORDER = "sortorder";
  @SerializedName(SERIALIZED_NAME_SORTORDER)
  private String sortorder = "asc";

  public static final String SERIALIZED_NAME_SOURCE_DETAILS = "source_details";
  @SerializedName(SERIALIZED_NAME_SOURCE_DETAILS)
  private String sourceDetails;

  public static final String SERIALIZED_NAME_SOURCE_NICHE = "source_niche";
  @SerializedName(SERIALIZED_NAME_SOURCE_NICHE)
  private String sourceNiche;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "source_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_STRAIN_NAME = "strain_name";
  @SerializedName(SERIALIZED_NAME_STRAIN_NAME)
  private String strainName;

  public static final String SERIALIZED_NAME_SUBSTRAINS = "substrains";
  @SerializedName(SERIALIZED_NAME_SUBSTRAINS)
  private Boolean substrains;

  public static final String SERIALIZED_NAME_UBERSTRAIN = "uberstrain";
  @SerializedName(SERIALIZED_NAME_UBERSTRAIN)
  private String uberstrain;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ApiV20DatabaseStrainsBarcodeGetRequest() {
  }

  public ApiV20DatabaseStrainsBarcodeGetRequest antigenicFormulas(String antigenicFormulas) {
    this.antigenicFormulas = antigenicFormulas;
    return this;
  }

  /**
   * Get antigenicFormulas
   * @return antigenicFormulas
   */
  @javax.annotation.Nullable
  public String getAntigenicFormulas() {
    return antigenicFormulas;
  }

  public void setAntigenicFormulas(String antigenicFormulas) {
    this.antigenicFormulas = antigenicFormulas;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest assemblyBarcode(String assemblyBarcode) {
    this.assemblyBarcode = assemblyBarcode;
    return this;
  }

  /**
   * Get assemblyBarcode
   * @return assemblyBarcode
   */
  @javax.annotation.Nullable
  public String getAssemblyBarcode() {
    return assemblyBarcode;
  }

  public void setAssemblyBarcode(String assemblyBarcode) {
    this.assemblyBarcode = assemblyBarcode;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest barcode(List<String> barcode) {
    this.barcode = barcode;
    return this;
  }

  public ApiV20DatabaseStrainsBarcodeGetRequest addBarcodeItem(String barcodeItem) {
    if (this.barcode == null) {
      this.barcode = new ArrayList<>();
    }
    this.barcode.add(barcodeItem);
    return this;
  }

  /**
   * Get barcode
   * @return barcode
   */
  @javax.annotation.Nullable
  public List<String> getBarcode() {
    return barcode;
  }

  public void setBarcode(List<String> barcode) {
    this.barcode = barcode;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest collectionDate(Integer collectionDate) {
    this.collectionDate = collectionDate;
    return this;
  }

  /**
   * Get collectionDate
   * @return collectionDate
   */
  @javax.annotation.Nullable
  public Integer getCollectionDate() {
    return collectionDate;
  }

  public void setCollectionDate(Integer collectionDate) {
    this.collectionDate = collectionDate;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest collectionMonth(Integer collectionMonth) {
    this.collectionMonth = collectionMonth;
    return this;
  }

  /**
   * Get collectionMonth
   * @return collectionMonth
   */
  @javax.annotation.Nullable
  public Integer getCollectionMonth() {
    return collectionMonth;
  }

  public void setCollectionMonth(Integer collectionMonth) {
    this.collectionMonth = collectionMonth;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest collectionTime(String collectionTime) {
    this.collectionTime = collectionTime;
    return this;
  }

  /**
   * Get collectionTime
   * @return collectionTime
   */
  @javax.annotation.Nullable
  public String getCollectionTime() {
    return collectionTime;
  }

  public void setCollectionTime(String collectionTime) {
    this.collectionTime = collectionTime;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest collectionYear(Integer collectionYear) {
    this.collectionYear = collectionYear;
    return this;
  }

  /**
   * Get collectionYear
   * @return collectionYear
   */
  @javax.annotation.Nullable
  public Integer getCollectionYear() {
    return collectionYear;
  }

  public void setCollectionYear(Integer collectionYear) {
    this.collectionYear = collectionYear;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest continent(String continent) {
    this.continent = continent;
    return this;
  }

  /**
   * Get continent
   * @return continent
   */
  @javax.annotation.Nullable
  public String getContinent() {
    return continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest county(String county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest labContact(String labContact) {
    this.labContact = labContact;
    return this;
  }

  /**
   * Get labContact
   * @return labContact
   */
  @javax.annotation.Nullable
  public String getLabContact() {
    return labContact;
  }

  public void setLabContact(String labContact) {
    this.labContact = labContact;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest latitude(Float latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }

  public void setLatitude(Float latitude) {
    this.latitude = latitude;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest longitude(Float longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }

  public void setLongitude(Float longitude) {
    this.longitude = longitude;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest myStrains(Boolean myStrains) {
    this.myStrains = myStrains;
    return this;
  }

  /**
   * Get myStrains
   * @return myStrains
   */
  @javax.annotation.Nullable
  public Boolean getMyStrains() {
    return myStrains;
  }

  public void setMyStrains(Boolean myStrains) {
    this.myStrains = myStrains;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest onlyFields(List<String> onlyFields) {
    this.onlyFields = onlyFields;
    return this;
  }

  public ApiV20DatabaseStrainsBarcodeGetRequest addOnlyFieldsItem(String onlyFieldsItem) {
    if (this.onlyFields == null) {
      this.onlyFields = new ArrayList<>();
    }
    this.onlyFields.add(onlyFieldsItem);
    return this;
  }

  /**
   * Get onlyFields
   * @return onlyFields
   */
  @javax.annotation.Nullable
  public List<String> getOnlyFields() {
    return onlyFields;
  }

  public void setOnlyFields(List<String> onlyFields) {
    this.onlyFields = onlyFields;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest orderby(String orderby) {
    this.orderby = orderby;
    return this;
  }

  /**
   * Get orderby
   * @return orderby
   */
  @javax.annotation.Nullable
  public String getOrderby() {
    return orderby;
  }

  public void setOrderby(String orderby) {
    this.orderby = orderby;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Get postcode
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest reldate(Integer reldate) {
    this.reldate = reldate;
    return this;
  }

  /**
   * Get reldate
   * @return reldate
   */
  @javax.annotation.Nullable
  public Integer getReldate() {
    return reldate;
  }

  public void setReldate(Integer reldate) {
    this.reldate = reldate;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest returnAll(Boolean returnAll) {
    this.returnAll = returnAll;
    return this;
  }

  /**
   * Get returnAll
   * @return returnAll
   */
  @javax.annotation.Nullable
  public Boolean getReturnAll() {
    return returnAll;
  }

  public void setReturnAll(Boolean returnAll) {
    this.returnAll = returnAll;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest sampleAccession(String sampleAccession) {
    this.sampleAccession = sampleAccession;
    return this;
  }

  /**
   * Get sampleAccession
   * @return sampleAccession
   */
  @javax.annotation.Nullable
  public String getSampleAccession() {
    return sampleAccession;
  }

  public void setSampleAccession(String sampleAccession) {
    this.sampleAccession = sampleAccession;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest secondarySampleAccession(String secondarySampleAccession) {
    this.secondarySampleAccession = secondarySampleAccession;
    return this;
  }

  /**
   * Get secondarySampleAccession
   * @return secondarySampleAccession
   */
  @javax.annotation.Nullable
  public String getSecondarySampleAccession() {
    return secondarySampleAccession;
  }

  public void setSecondarySampleAccession(String secondarySampleAccession) {
    this.secondarySampleAccession = secondarySampleAccession;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest serotype(String serotype) {
    this.serotype = serotype;
    return this;
  }

  /**
   * Get serotype
   * @return serotype
   */
  @javax.annotation.Nullable
  public String getSerotype() {
    return serotype;
  }

  public void setSerotype(String serotype) {
    this.serotype = serotype;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest sortorder(String sortorder) {
    this.sortorder = sortorder;
    return this;
  }

  /**
   * Get sortorder
   * @return sortorder
   */
  @javax.annotation.Nullable
  public String getSortorder() {
    return sortorder;
  }

  public void setSortorder(String sortorder) {
    this.sortorder = sortorder;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest sourceDetails(String sourceDetails) {
    this.sourceDetails = sourceDetails;
    return this;
  }

  /**
   * Get sourceDetails
   * @return sourceDetails
   */
  @javax.annotation.Nullable
  public String getSourceDetails() {
    return sourceDetails;
  }

  public void setSourceDetails(String sourceDetails) {
    this.sourceDetails = sourceDetails;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest sourceNiche(String sourceNiche) {
    this.sourceNiche = sourceNiche;
    return this;
  }

  /**
   * Get sourceNiche
   * @return sourceNiche
   */
  @javax.annotation.Nullable
  public String getSourceNiche() {
    return sourceNiche;
  }

  public void setSourceNiche(String sourceNiche) {
    this.sourceNiche = sourceNiche;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest strainName(String strainName) {
    this.strainName = strainName;
    return this;
  }

  /**
   * Get strainName
   * @return strainName
   */
  @javax.annotation.Nullable
  public String getStrainName() {
    return strainName;
  }

  public void setStrainName(String strainName) {
    this.strainName = strainName;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest substrains(Boolean substrains) {
    this.substrains = substrains;
    return this;
  }

  /**
   * Get substrains
   * @return substrains
   */
  @javax.annotation.Nullable
  public Boolean getSubstrains() {
    return substrains;
  }

  public void setSubstrains(Boolean substrains) {
    this.substrains = substrains;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest uberstrain(String uberstrain) {
    this.uberstrain = uberstrain;
    return this;
  }

  /**
   * Get uberstrain
   * @return uberstrain
   */
  @javax.annotation.Nullable
  public String getUberstrain() {
    return uberstrain;
  }

  public void setUberstrain(String uberstrain) {
    this.uberstrain = uberstrain;
  }


  public ApiV20DatabaseStrainsBarcodeGetRequest version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV20DatabaseStrainsBarcodeGetRequest apiV20DatabaseStrainsBarcodeGetRequest = (ApiV20DatabaseStrainsBarcodeGetRequest) o;
    return Objects.equals(this.antigenicFormulas, apiV20DatabaseStrainsBarcodeGetRequest.antigenicFormulas) &&
        Objects.equals(this.assemblyBarcode, apiV20DatabaseStrainsBarcodeGetRequest.assemblyBarcode) &&
        Objects.equals(this.barcode, apiV20DatabaseStrainsBarcodeGetRequest.barcode) &&
        Objects.equals(this.city, apiV20DatabaseStrainsBarcodeGetRequest.city) &&
        Objects.equals(this.collectionDate, apiV20DatabaseStrainsBarcodeGetRequest.collectionDate) &&
        Objects.equals(this.collectionMonth, apiV20DatabaseStrainsBarcodeGetRequest.collectionMonth) &&
        Objects.equals(this.collectionTime, apiV20DatabaseStrainsBarcodeGetRequest.collectionTime) &&
        Objects.equals(this.collectionYear, apiV20DatabaseStrainsBarcodeGetRequest.collectionYear) &&
        Objects.equals(this.comment, apiV20DatabaseStrainsBarcodeGetRequest.comment) &&
        Objects.equals(this.continent, apiV20DatabaseStrainsBarcodeGetRequest.continent) &&
        Objects.equals(this.country, apiV20DatabaseStrainsBarcodeGetRequest.country) &&
        Objects.equals(this.county, apiV20DatabaseStrainsBarcodeGetRequest.county) &&
        Objects.equals(this.labContact, apiV20DatabaseStrainsBarcodeGetRequest.labContact) &&
        Objects.equals(this.latitude, apiV20DatabaseStrainsBarcodeGetRequest.latitude) &&
        Objects.equals(this.limit, apiV20DatabaseStrainsBarcodeGetRequest.limit) &&
        Objects.equals(this.longitude, apiV20DatabaseStrainsBarcodeGetRequest.longitude) &&
        Objects.equals(this.myStrains, apiV20DatabaseStrainsBarcodeGetRequest.myStrains) &&
        Objects.equals(this.offset, apiV20DatabaseStrainsBarcodeGetRequest.offset) &&
        Objects.equals(this.onlyFields, apiV20DatabaseStrainsBarcodeGetRequest.onlyFields) &&
        Objects.equals(this.orderby, apiV20DatabaseStrainsBarcodeGetRequest.orderby) &&
        Objects.equals(this.postcode, apiV20DatabaseStrainsBarcodeGetRequest.postcode) &&
        Objects.equals(this.region, apiV20DatabaseStrainsBarcodeGetRequest.region) &&
        Objects.equals(this.reldate, apiV20DatabaseStrainsBarcodeGetRequest.reldate) &&
        Objects.equals(this.returnAll, apiV20DatabaseStrainsBarcodeGetRequest.returnAll) &&
        Objects.equals(this.sampleAccession, apiV20DatabaseStrainsBarcodeGetRequest.sampleAccession) &&
        Objects.equals(this.secondarySampleAccession, apiV20DatabaseStrainsBarcodeGetRequest.secondarySampleAccession) &&
        Objects.equals(this.serotype, apiV20DatabaseStrainsBarcodeGetRequest.serotype) &&
        Objects.equals(this.sortorder, apiV20DatabaseStrainsBarcodeGetRequest.sortorder) &&
        Objects.equals(this.sourceDetails, apiV20DatabaseStrainsBarcodeGetRequest.sourceDetails) &&
        Objects.equals(this.sourceNiche, apiV20DatabaseStrainsBarcodeGetRequest.sourceNiche) &&
        Objects.equals(this.sourceType, apiV20DatabaseStrainsBarcodeGetRequest.sourceType) &&
        Objects.equals(this.strainName, apiV20DatabaseStrainsBarcodeGetRequest.strainName) &&
        Objects.equals(this.substrains, apiV20DatabaseStrainsBarcodeGetRequest.substrains) &&
        Objects.equals(this.uberstrain, apiV20DatabaseStrainsBarcodeGetRequest.uberstrain) &&
        Objects.equals(this.version, apiV20DatabaseStrainsBarcodeGetRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antigenicFormulas, assemblyBarcode, barcode, city, collectionDate, collectionMonth, collectionTime, collectionYear, comment, continent, country, county, labContact, latitude, limit, longitude, myStrains, offset, onlyFields, orderby, postcode, region, reldate, returnAll, sampleAccession, secondarySampleAccession, serotype, sortorder, sourceDetails, sourceNiche, sourceType, strainName, substrains, uberstrain, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV20DatabaseStrainsBarcodeGetRequest {\n");
    sb.append("    antigenicFormulas: ").append(toIndentedString(antigenicFormulas)).append("\n");
    sb.append("    assemblyBarcode: ").append(toIndentedString(assemblyBarcode)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    collectionDate: ").append(toIndentedString(collectionDate)).append("\n");
    sb.append("    collectionMonth: ").append(toIndentedString(collectionMonth)).append("\n");
    sb.append("    collectionTime: ").append(toIndentedString(collectionTime)).append("\n");
    sb.append("    collectionYear: ").append(toIndentedString(collectionYear)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    labContact: ").append(toIndentedString(labContact)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    myStrains: ").append(toIndentedString(myStrains)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    onlyFields: ").append(toIndentedString(onlyFields)).append("\n");
    sb.append("    orderby: ").append(toIndentedString(orderby)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    reldate: ").append(toIndentedString(reldate)).append("\n");
    sb.append("    returnAll: ").append(toIndentedString(returnAll)).append("\n");
    sb.append("    sampleAccession: ").append(toIndentedString(sampleAccession)).append("\n");
    sb.append("    secondarySampleAccession: ").append(toIndentedString(secondarySampleAccession)).append("\n");
    sb.append("    serotype: ").append(toIndentedString(serotype)).append("\n");
    sb.append("    sortorder: ").append(toIndentedString(sortorder)).append("\n");
    sb.append("    sourceDetails: ").append(toIndentedString(sourceDetails)).append("\n");
    sb.append("    sourceNiche: ").append(toIndentedString(sourceNiche)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    strainName: ").append(toIndentedString(strainName)).append("\n");
    sb.append("    substrains: ").append(toIndentedString(substrains)).append("\n");
    sb.append("    uberstrain: ").append(toIndentedString(uberstrain)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("antigenic_formulas");
    openapiFields.add("assembly_barcode");
    openapiFields.add("barcode");
    openapiFields.add("city");
    openapiFields.add("collection_date");
    openapiFields.add("collection_month");
    openapiFields.add("collection_time");
    openapiFields.add("collection_year");
    openapiFields.add("comment");
    openapiFields.add("continent");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("lab_contact");
    openapiFields.add("latitude");
    openapiFields.add("limit");
    openapiFields.add("longitude");
    openapiFields.add("my_strains");
    openapiFields.add("offset");
    openapiFields.add("only_fields");
    openapiFields.add("orderby");
    openapiFields.add("postcode");
    openapiFields.add("region");
    openapiFields.add("reldate");
    openapiFields.add("return_all");
    openapiFields.add("sample_accession");
    openapiFields.add("secondary_sample_accession");
    openapiFields.add("serotype");
    openapiFields.add("sortorder");
    openapiFields.add("source_details");
    openapiFields.add("source_niche");
    openapiFields.add("source_type");
    openapiFields.add("strain_name");
    openapiFields.add("substrains");
    openapiFields.add("uberstrain");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV20DatabaseStrainsBarcodeGetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV20DatabaseStrainsBarcodeGetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV20DatabaseStrainsBarcodeGetRequest is not found in the empty JSON string", ApiV20DatabaseStrainsBarcodeGetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV20DatabaseStrainsBarcodeGetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV20DatabaseStrainsBarcodeGetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("antigenic_formulas") != null && !jsonObj.get("antigenic_formulas").isJsonNull()) && !jsonObj.get("antigenic_formulas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `antigenic_formulas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("antigenic_formulas").toString()));
      }
      if ((jsonObj.get("assembly_barcode") != null && !jsonObj.get("assembly_barcode").isJsonNull()) && !jsonObj.get("assembly_barcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assembly_barcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assembly_barcode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull() && !jsonObj.get("barcode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcode` to be an array in the JSON string but got `%s`", jsonObj.get("barcode").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("collection_time") != null && !jsonObj.get("collection_time").isJsonNull()) && !jsonObj.get("collection_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_time").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("continent") != null && !jsonObj.get("continent").isJsonNull()) && !jsonObj.get("continent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("lab_contact") != null && !jsonObj.get("lab_contact").isJsonNull()) && !jsonObj.get("lab_contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lab_contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lab_contact").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("only_fields") != null && !jsonObj.get("only_fields").isJsonNull() && !jsonObj.get("only_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `only_fields` to be an array in the JSON string but got `%s`", jsonObj.get("only_fields").toString()));
      }
      if ((jsonObj.get("orderby") != null && !jsonObj.get("orderby").isJsonNull()) && !jsonObj.get("orderby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderby").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("sample_accession") != null && !jsonObj.get("sample_accession").isJsonNull()) && !jsonObj.get("sample_accession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sample_accession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sample_accession").toString()));
      }
      if ((jsonObj.get("secondary_sample_accession") != null && !jsonObj.get("secondary_sample_accession").isJsonNull()) && !jsonObj.get("secondary_sample_accession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_sample_accession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_sample_accession").toString()));
      }
      if ((jsonObj.get("serotype") != null && !jsonObj.get("serotype").isJsonNull()) && !jsonObj.get("serotype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serotype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serotype").toString()));
      }
      if ((jsonObj.get("sortorder") != null && !jsonObj.get("sortorder").isJsonNull()) && !jsonObj.get("sortorder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortorder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortorder").toString()));
      }
      if ((jsonObj.get("source_details") != null && !jsonObj.get("source_details").isJsonNull()) && !jsonObj.get("source_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_details").toString()));
      }
      if ((jsonObj.get("source_niche") != null && !jsonObj.get("source_niche").isJsonNull()) && !jsonObj.get("source_niche").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_niche` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_niche").toString()));
      }
      if ((jsonObj.get("source_type") != null && !jsonObj.get("source_type").isJsonNull()) && !jsonObj.get("source_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_type").toString()));
      }
      if ((jsonObj.get("strain_name") != null && !jsonObj.get("strain_name").isJsonNull()) && !jsonObj.get("strain_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strain_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strain_name").toString()));
      }
      if ((jsonObj.get("uberstrain") != null && !jsonObj.get("uberstrain").isJsonNull()) && !jsonObj.get("uberstrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uberstrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uberstrain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV20DatabaseStrainsBarcodeGetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV20DatabaseStrainsBarcodeGetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV20DatabaseStrainsBarcodeGetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV20DatabaseStrainsBarcodeGetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV20DatabaseStrainsBarcodeGetRequest>() {
           @Override
           public void write(JsonWriter out, ApiV20DatabaseStrainsBarcodeGetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV20DatabaseStrainsBarcodeGetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV20DatabaseStrainsBarcodeGetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV20DatabaseStrainsBarcodeGetRequest
   * @throws IOException if the JSON string is invalid with respect to ApiV20DatabaseStrainsBarcodeGetRequest
   */
  public static ApiV20DatabaseStrainsBarcodeGetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV20DatabaseStrainsBarcodeGetRequest.class);
  }

  /**
   * Convert an instance of ApiV20DatabaseStrainsBarcodeGetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

