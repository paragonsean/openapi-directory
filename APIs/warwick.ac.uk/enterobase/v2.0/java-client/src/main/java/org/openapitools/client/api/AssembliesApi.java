/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV20DatabaseAssembliesBarcodeGetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssembliesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssembliesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssembliesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV20DatabaseAssembliesBarcodeGet
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesBarcodeGetCall(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20DatabaseAssembliesBarcodeGetRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/assemblies/{barcode}"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseAssembliesBarcodeGetValidateBeforeCall(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseAssembliesBarcodeGet(Async)");
        }

        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20DatabaseAssembliesBarcodeGet(Async)");
        }

        return apiV20DatabaseAssembliesBarcodeGetCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, _callback);

    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseAssembliesBarcodeGet(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest) throws ApiException {
        apiV20DatabaseAssembliesBarcodeGetWithHttpInfo(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest);
    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseAssembliesBarcodeGetWithHttpInfo(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseAssembliesBarcodeGetValidateBeforeCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesBarcodeGetAsync(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseAssembliesBarcodeGetValidateBeforeCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20DatabaseAssembliesBarcodePost
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesBarcodePostCall(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20DatabaseAssembliesBarcodeGetRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/assemblies/{barcode}"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseAssembliesBarcodePostValidateBeforeCall(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseAssembliesBarcodePost(Async)");
        }

        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20DatabaseAssembliesBarcodePost(Async)");
        }

        return apiV20DatabaseAssembliesBarcodePostCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, _callback);

    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseAssembliesBarcodePost(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest) throws ApiException {
        apiV20DatabaseAssembliesBarcodePostWithHttpInfo(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest);
    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseAssembliesBarcodePostWithHttpInfo(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseAssembliesBarcodePostValidateBeforeCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesBarcodePostAsync(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseAssembliesBarcodePostValidateBeforeCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20DatabaseAssembliesBarcodePut
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesBarcodePutCall(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20DatabaseAssembliesBarcodeGetRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/assemblies/{barcode}"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseAssembliesBarcodePutValidateBeforeCall(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseAssembliesBarcodePut(Async)");
        }

        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20DatabaseAssembliesBarcodePut(Async)");
        }

        return apiV20DatabaseAssembliesBarcodePutCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, _callback);

    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseAssembliesBarcodePut(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest) throws ApiException {
        apiV20DatabaseAssembliesBarcodePutWithHttpInfo(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest);
    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseAssembliesBarcodePutWithHttpInfo(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseAssembliesBarcodePutValidateBeforeCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (required)
     * @param apiV20DatabaseAssembliesBarcodeGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesBarcodePutAsync(String database, String barcode, ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseAssembliesBarcodePutValidateBeforeCall(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20DatabaseAssembliesGet
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param n50  (optional)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param assemblyStatus  (optional)
     * @param uberstrain  (optional)
     * @param topSpecies  (optional)
     * @param onlyFields  (optional)
     * @param reldate  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesGetCall(String database, Integer n50, List<String> barcode, String orderby, Integer offset, String assemblyStatus, String uberstrain, String topSpecies, List<String> onlyFields, Integer reldate, String sortorder, Integer limit, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/assemblies"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n50 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n50", n50));
        }

        if (barcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "barcode", barcode));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (assemblyStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assembly_status", assemblyStatus));
        }

        if (uberstrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uberstrain", uberstrain));
        }

        if (topSpecies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top_species", topSpecies));
        }

        if (onlyFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "only_fields", onlyFields));
        }

        if (reldate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reldate", reldate));
        }

        if (sortorder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortorder", sortorder));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseAssembliesGetValidateBeforeCall(String database, Integer n50, List<String> barcode, String orderby, Integer offset, String assemblyStatus, String uberstrain, String topSpecies, List<String> onlyFields, Integer reldate, String sortorder, Integer limit, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseAssembliesGet(Async)");
        }

        return apiV20DatabaseAssembliesGetCall(database, n50, barcode, orderby, offset, assemblyStatus, uberstrain, topSpecies, onlyFields, reldate, sortorder, limit, version, _callback);

    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param n50  (optional)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param assemblyStatus  (optional)
     * @param uberstrain  (optional)
     * @param topSpecies  (optional)
     * @param onlyFields  (optional)
     * @param reldate  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @param version  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseAssembliesGet(String database, Integer n50, List<String> barcode, String orderby, Integer offset, String assemblyStatus, String uberstrain, String topSpecies, List<String> onlyFields, Integer reldate, String sortorder, Integer limit, Integer version) throws ApiException {
        apiV20DatabaseAssembliesGetWithHttpInfo(database, n50, barcode, orderby, offset, assemblyStatus, uberstrain, topSpecies, onlyFields, reldate, sortorder, limit, version);
    }

    /**
     * 
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param n50  (optional)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param assemblyStatus  (optional)
     * @param uberstrain  (optional)
     * @param topSpecies  (optional)
     * @param onlyFields  (optional)
     * @param reldate  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @param version  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseAssembliesGetWithHttpInfo(String database, Integer n50, List<String> barcode, String orderby, Integer offset, String assemblyStatus, String uberstrain, String topSpecies, List<String> onlyFields, Integer reldate, String sortorder, Integer limit, Integer version) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseAssembliesGetValidateBeforeCall(database, n50, barcode, orderby, offset, assemblyStatus, uberstrain, topSpecies, onlyFields, reldate, sortorder, limit, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Genome assemblies
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param n50  (optional)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_AS e.g. SAL_AA0001AA_AS (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param assemblyStatus  (optional)
     * @param uberstrain  (optional)
     * @param topSpecies  (optional)
     * @param onlyFields  (optional)
     * @param reldate  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assemblies objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseAssembliesGetAsync(String database, Integer n50, List<String> barcode, String orderby, Integer offset, String assemblyStatus, String uberstrain, String topSpecies, List<String> onlyFields, Integer reldate, String sortorder, Integer limit, Integer version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseAssembliesGetValidateBeforeCall(database, n50, barcode, orderby, offset, assemblyStatus, uberstrain, topSpecies, onlyFields, reldate, sortorder, limit, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
