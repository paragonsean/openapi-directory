/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV20DatabaseTracesBarcodeGetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TracesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TracesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TracesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV20DatabaseTracesBarcodeGet
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesBarcodeGetCall(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20DatabaseTracesBarcodeGetRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/traces/{barcode}"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseTracesBarcodeGetValidateBeforeCall(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseTracesBarcodeGet(Async)");
        }

        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20DatabaseTracesBarcodeGet(Async)");
        }

        return apiV20DatabaseTracesBarcodeGetCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, _callback);

    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseTracesBarcodeGet(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest) throws ApiException {
        apiV20DatabaseTracesBarcodeGetWithHttpInfo(database, barcode, apiV20DatabaseTracesBarcodeGetRequest);
    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseTracesBarcodeGetWithHttpInfo(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseTracesBarcodeGetValidateBeforeCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesBarcodeGetAsync(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseTracesBarcodeGetValidateBeforeCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20DatabaseTracesBarcodePost
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesBarcodePostCall(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20DatabaseTracesBarcodeGetRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/traces/{barcode}"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseTracesBarcodePostValidateBeforeCall(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseTracesBarcodePost(Async)");
        }

        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20DatabaseTracesBarcodePost(Async)");
        }

        return apiV20DatabaseTracesBarcodePostCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, _callback);

    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseTracesBarcodePost(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest) throws ApiException {
        apiV20DatabaseTracesBarcodePostWithHttpInfo(database, barcode, apiV20DatabaseTracesBarcodeGetRequest);
    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseTracesBarcodePostWithHttpInfo(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseTracesBarcodePostValidateBeforeCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesBarcodePostAsync(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseTracesBarcodePostValidateBeforeCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20DatabaseTracesBarcodePut
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesBarcodePutCall(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV20DatabaseTracesBarcodeGetRequest;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/traces/{barcode}"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()))
            .replace("{" + "barcode" + "}", localVarApiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseTracesBarcodePutValidateBeforeCall(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseTracesBarcodePut(Async)");
        }

        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling apiV20DatabaseTracesBarcodePut(Async)");
        }

        return apiV20DatabaseTracesBarcodePutCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, _callback);

    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseTracesBarcodePut(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest) throws ApiException {
        apiV20DatabaseTracesBarcodePutWithHttpInfo(database, barcode, apiV20DatabaseTracesBarcodeGetRequest);
    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseTracesBarcodePutWithHttpInfo(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseTracesBarcodePutValidateBeforeCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (required)
     * @param apiV20DatabaseTracesBarcodeGetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesBarcodePutAsync(String database, String barcode, ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseTracesBarcodePutValidateBeforeCall(database, barcode, apiV20DatabaseTracesBarcodeGetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV20DatabaseTracesGet
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param onlyFields  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesGetCall(String database, List<String> barcode, String orderby, Integer offset, List<String> onlyFields, String sortorder, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2.0/{database}/traces"
            .replace("{" + "database" + "}", localVarApiClient.escapeString(database.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (barcode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "barcode", barcode));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (onlyFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "only_fields", onlyFields));
        }

        if (sortorder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortorder", sortorder));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV20DatabaseTracesGetValidateBeforeCall(String database, List<String> barcode, String orderby, Integer offset, List<String> onlyFields, String sortorder, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling apiV20DatabaseTracesGet(Async)");
        }

        return apiV20DatabaseTracesGetCall(database, barcode, orderby, offset, onlyFields, sortorder, limit, _callback);

    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param onlyFields  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public void apiV20DatabaseTracesGet(String database, List<String> barcode, String orderby, Integer offset, List<String> onlyFields, String sortorder, Integer limit) throws ApiException {
        apiV20DatabaseTracesGetWithHttpInfo(database, barcode, orderby, offset, onlyFields, sortorder, limit);
    }

    /**
     * 
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param onlyFields  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV20DatabaseTracesGetWithHttpInfo(String database, List<String> barcode, String orderby, Integer offset, List<String> onlyFields, String sortorder, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV20DatabaseTracesGetValidateBeforeCall(database, barcode, orderby, offset, onlyFields, sortorder, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Traces (sequence-reads) metadata
     * @param database Species database name (senterica, ecoli, yersinia, mcatarrhalis) for Salmonella, Escherichia, Yersinia, Moraxella respectively (required)
     * @param barcode Unique barcode for Traces records, &lt;database prefix&gt;_&lt;ID code&gt;_TR e.g. SAL_AA0001AA_TR (optional)
     * @param orderby Field to order by. Default: barcode (optional, default to barcode)
     * @param offset Cursor position in results (optional, default to 0)
     * @param onlyFields  (optional)
     * @param sortorder Order of search results: asc or desc (optional, default to asc)
     * @param limit Number of results per page (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of traces objects </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorised access for this specific resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV20DatabaseTracesGetAsync(String database, List<String> barcode, String orderby, Integer offset, List<String> onlyFields, String sortorder, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV20DatabaseTracesGetValidateBeforeCall(database, barcode, orderby, offset, onlyFields, sortorder, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
