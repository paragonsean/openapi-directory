/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV20DatabaseAssembliesBarcodeGetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssembliesApi
 */
@Disabled
public class AssembliesApiTest {

    private final AssembliesApi api = new AssembliesApi();

    /**
     * Genome assemblies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseAssembliesBarcodeGetTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest = null;
        api.apiV20DatabaseAssembliesBarcodeGet(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Genome assemblies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseAssembliesBarcodePostTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest = null;
        api.apiV20DatabaseAssembliesBarcodePost(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Genome assemblies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseAssembliesBarcodePutTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseAssembliesBarcodeGetRequest apiV20DatabaseAssembliesBarcodeGetRequest = null;
        api.apiV20DatabaseAssembliesBarcodePut(database, barcode, apiV20DatabaseAssembliesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Genome assemblies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseAssembliesGetTest() throws ApiException {
        String database = null;
        Integer n50 = null;
        List<String> barcode = null;
        String orderby = null;
        Integer offset = null;
        String assemblyStatus = null;
        String uberstrain = null;
        String topSpecies = null;
        List<String> onlyFields = null;
        Integer reldate = null;
        String sortorder = null;
        Integer limit = null;
        Integer version = null;
        api.apiV20DatabaseAssembliesGet(database, n50, barcode, orderby, offset, assemblyStatus, uberstrain, topSpecies, onlyFields, reldate, sortorder, limit, version);
        // TODO: test validations
    }

}
