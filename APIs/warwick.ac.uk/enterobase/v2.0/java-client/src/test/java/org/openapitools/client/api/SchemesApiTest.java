/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV20DatabaseSchemesBarcodeGetRequest;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SchemesApi
 */
@Disabled
public class SchemesApiTest {

    private final SchemesApi api = new SchemesApi();

    /**
     * Genotyping schemes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseSchemesBarcodeGetTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseSchemesBarcodeGetRequest apiV20DatabaseSchemesBarcodeGetRequest = null;
        api.apiV20DatabaseSchemesBarcodeGet(database, barcode, apiV20DatabaseSchemesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Genotyping schemes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseSchemesBarcodePostTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseSchemesBarcodeGetRequest apiV20DatabaseSchemesBarcodeGetRequest = null;
        api.apiV20DatabaseSchemesBarcodePost(database, barcode, apiV20DatabaseSchemesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Genotyping schemes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseSchemesBarcodePutTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseSchemesBarcodeGetRequest apiV20DatabaseSchemesBarcodeGetRequest = null;
        api.apiV20DatabaseSchemesBarcodePut(database, barcode, apiV20DatabaseSchemesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Genotyping schemes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseSchemesGetTest() throws ApiException {
        String database = null;
        List<String> barcode = null;
        String orderby = null;
        Integer offset = null;
        String label = null;
        List<String> onlyFields = null;
        OffsetDateTime created = null;
        OffsetDateTime lastmodified = null;
        String sortorder = null;
        Integer limit = null;
        String schemeName = null;
        Integer version = null;
        api.apiV20DatabaseSchemesGet(database, barcode, orderby, offset, label, onlyFields, created, lastmodified, sortorder, limit, schemeName, version);
        // TODO: test validations
    }

}
