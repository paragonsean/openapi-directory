/*
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV20DatabaseTracesBarcodeGetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TracesApi
 */
@Disabled
public class TracesApiTest {

    private final TracesApi api = new TracesApi();

    /**
     * Traces (sequence-reads) metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseTracesBarcodeGetTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest = null;
        api.apiV20DatabaseTracesBarcodeGet(database, barcode, apiV20DatabaseTracesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Traces (sequence-reads) metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseTracesBarcodePostTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest = null;
        api.apiV20DatabaseTracesBarcodePost(database, barcode, apiV20DatabaseTracesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Traces (sequence-reads) metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseTracesBarcodePutTest() throws ApiException {
        String database = null;
        String barcode = null;
        ApiV20DatabaseTracesBarcodeGetRequest apiV20DatabaseTracesBarcodeGetRequest = null;
        api.apiV20DatabaseTracesBarcodePut(database, barcode, apiV20DatabaseTracesBarcodeGetRequest);
        // TODO: test validations
    }

    /**
     * Traces (sequence-reads) metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV20DatabaseTracesGetTest() throws ApiException {
        String database = null;
        List<String> barcode = null;
        String orderby = null;
        Integer offset = null;
        List<String> onlyFields = null;
        String sortorder = null;
        Integer limit = null;
        api.apiV20DatabaseTracesGet(database, barcode, orderby, offset, onlyFields, sortorder, limit);
        // TODO: test validations
    }

}
