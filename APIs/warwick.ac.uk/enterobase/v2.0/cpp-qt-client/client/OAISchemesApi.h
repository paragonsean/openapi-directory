/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISchemesApi_H
#define OAI_OAISchemesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_v2_0__database__schemes__barcode__get_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISchemesApi : public QObject {
    Q_OBJECT

public:
    OAISchemesApi(const int timeOut = 0);
    ~OAISchemesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__schemes__barcode__get_request OAI_api_v2_0__database__schemes__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseSchemesBarcodeGet(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__schemes__barcode__get_request> &oai_api_v2_0__database__schemes__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__schemes__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__schemes__barcode__get_request OAI_api_v2_0__database__schemes__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseSchemesBarcodePost(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__schemes__barcode__get_request> &oai_api_v2_0__database__schemes__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__schemes__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__schemes__barcode__get_request OAI_api_v2_0__database__schemes__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseSchemesBarcodePut(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__schemes__barcode__get_request> &oai_api_v2_0__database__schemes__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__schemes__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QList<QString> [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  label QString [optional]
    * @param[in]  only_fields QList<QString> [optional]
    * @param[in]  created QDateTime [optional]
    * @param[in]  lastmodified QDateTime [optional]
    * @param[in]  sortorder QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  scheme_name QString [optional]
    * @param[in]  version qint32 [optional]
    */
    virtual void apiV20DatabaseSchemesGet(const QString &database, const ::OpenAPI::OptionalParam<QList<QString>> &barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &only_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &lastmodified = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &sortorder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &scheme_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV20DatabaseSchemesBarcodeGetCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseSchemesBarcodePostCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseSchemesBarcodePutCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseSchemesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV20DatabaseSchemesBarcodeGetSignal();
    void apiV20DatabaseSchemesBarcodePostSignal();
    void apiV20DatabaseSchemesBarcodePutSignal();
    void apiV20DatabaseSchemesGetSignal();


    void apiV20DatabaseSchemesBarcodeGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseSchemesBarcodePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseSchemesBarcodePutSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseSchemesGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesBarcodeGetSignalError() instead")
    void apiV20DatabaseSchemesBarcodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesBarcodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesBarcodePostSignalError() instead")
    void apiV20DatabaseSchemesBarcodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesBarcodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesBarcodePutSignalError() instead")
    void apiV20DatabaseSchemesBarcodePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesBarcodePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesGetSignalError() instead")
    void apiV20DatabaseSchemesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesBarcodeGetSignalErrorFull() instead")
    void apiV20DatabaseSchemesBarcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesBarcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesBarcodePostSignalErrorFull() instead")
    void apiV20DatabaseSchemesBarcodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesBarcodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesBarcodePutSignalErrorFull() instead")
    void apiV20DatabaseSchemesBarcodePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesBarcodePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseSchemesGetSignalErrorFull() instead")
    void apiV20DatabaseSchemesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseSchemesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
