/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_api_v2_0__database__assemblies__barcode__get_request.h
 *
 * 
 */

#ifndef OAI_api_v2_0__database__assemblies__barcode__get_request_H
#define OAI_api_v2_0__database__assemblies__barcode__get_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_api_v2_0__database__assemblies__barcode__get_request : public OAIObject {
public:
    OAI_api_v2_0__database__assemblies__barcode__get_request();
    OAI_api_v2_0__database__assemblies__barcode__get_request(QString json);
    ~OAI_api_v2_0__database__assemblies__barcode__get_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssemblyStatus() const;
    void setAssemblyStatus(const QString &assembly_status);
    bool is_assembly_status_Set() const;
    bool is_assembly_status_Valid() const;

    QList<QString> getBarcode() const;
    void setBarcode(const QList<QString> &barcode);
    bool is_barcode_Set() const;
    bool is_barcode_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getN50() const;
    void setN50(const qint32 &n50);
    bool is_n50_Set() const;
    bool is_n50_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<QString> getOnlyFields() const;
    void setOnlyFields(const QList<QString> &only_fields);
    bool is_only_fields_Set() const;
    bool is_only_fields_Valid() const;

    QString getOrderby() const;
    void setOrderby(const QString &orderby);
    bool is_orderby_Set() const;
    bool is_orderby_Valid() const;

    qint32 getReldate() const;
    void setReldate(const qint32 &reldate);
    bool is_reldate_Set() const;
    bool is_reldate_Valid() const;

    QString getSortorder() const;
    void setSortorder(const QString &sortorder);
    bool is_sortorder_Set() const;
    bool is_sortorder_Valid() const;

    QString getTopSpecies() const;
    void setTopSpecies(const QString &top_species);
    bool is_top_species_Set() const;
    bool is_top_species_Valid() const;

    QString getUberstrain() const;
    void setUberstrain(const QString &uberstrain);
    bool is_uberstrain_Set() const;
    bool is_uberstrain_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_assembly_status;
    bool m_assembly_status_isSet;
    bool m_assembly_status_isValid;

    QList<QString> m_barcode;
    bool m_barcode_isSet;
    bool m_barcode_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_n50;
    bool m_n50_isSet;
    bool m_n50_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<QString> m_only_fields;
    bool m_only_fields_isSet;
    bool m_only_fields_isValid;

    QString m_orderby;
    bool m_orderby_isSet;
    bool m_orderby_isValid;

    qint32 m_reldate;
    bool m_reldate_isSet;
    bool m_reldate_isValid;

    QString m_sortorder;
    bool m_sortorder_isSet;
    bool m_sortorder_isValid;

    QString m_top_species;
    bool m_top_species_isSet;
    bool m_top_species_isValid;

    QString m_uberstrain;
    bool m_uberstrain_isSet;
    bool m_uberstrain_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_api_v2_0__database__assemblies__barcode__get_request)

#endif // OAI_api_v2_0__database__assemblies__barcode__get_request_H
