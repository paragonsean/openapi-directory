/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITracesApi_H
#define OAI_OAITracesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_v2_0__database__traces__barcode__get_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITracesApi : public QObject {
    Q_OBJECT

public:
    OAITracesApi(const int timeOut = 0);
    ~OAITracesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__traces__barcode__get_request OAI_api_v2_0__database__traces__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseTracesBarcodeGet(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__traces__barcode__get_request> &oai_api_v2_0__database__traces__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__traces__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__traces__barcode__get_request OAI_api_v2_0__database__traces__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseTracesBarcodePost(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__traces__barcode__get_request> &oai_api_v2_0__database__traces__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__traces__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__traces__barcode__get_request OAI_api_v2_0__database__traces__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseTracesBarcodePut(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__traces__barcode__get_request> &oai_api_v2_0__database__traces__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__traces__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QList<QString> [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  only_fields QList<QString> [optional]
    * @param[in]  sortorder QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV20DatabaseTracesGet(const QString &database, const ::OpenAPI::OptionalParam<QList<QString>> &barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &only_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sortorder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV20DatabaseTracesBarcodeGetCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseTracesBarcodePostCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseTracesBarcodePutCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseTracesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV20DatabaseTracesBarcodeGetSignal();
    void apiV20DatabaseTracesBarcodePostSignal();
    void apiV20DatabaseTracesBarcodePutSignal();
    void apiV20DatabaseTracesGetSignal();


    void apiV20DatabaseTracesBarcodeGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseTracesBarcodePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseTracesBarcodePutSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseTracesGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesBarcodeGetSignalError() instead")
    void apiV20DatabaseTracesBarcodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesBarcodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesBarcodePostSignalError() instead")
    void apiV20DatabaseTracesBarcodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesBarcodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesBarcodePutSignalError() instead")
    void apiV20DatabaseTracesBarcodePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesBarcodePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesGetSignalError() instead")
    void apiV20DatabaseTracesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesBarcodeGetSignalErrorFull() instead")
    void apiV20DatabaseTracesBarcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesBarcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesBarcodePostSignalErrorFull() instead")
    void apiV20DatabaseTracesBarcodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesBarcodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesBarcodePutSignalErrorFull() instead")
    void apiV20DatabaseTracesBarcodePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesBarcodePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseTracesGetSignalErrorFull() instead")
    void apiV20DatabaseTracesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseTracesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
