/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILookupApi_H
#define OAI_OAILookupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_v2_0_lookup__barcode__post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILookupApi : public QObject {
    Q_OBJECT

public:
    OAILookupApi(const int timeOut = 0);
    ~OAILookupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  barcode QString [required]
    */
    virtual void apiV20LookupBarcodeGet(const QString &barcode);

    /**
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0_lookup__barcode__post_request OAI_api_v2_0_lookup__barcode__post_request [optional]
    */
    virtual void apiV20LookupBarcodePost(const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0_lookup__barcode__post_request> &oai_api_v2_0_lookup__barcode__post_request = ::OpenAPI::OptionalParam<OAI_api_v2_0_lookup__barcode__post_request>());

    /**
    * @param[in]  barcode QString [optional]
    */
    virtual void apiV20LookupGet(const ::OpenAPI::OptionalParam<QString> &barcode = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV20LookupBarcodeGetCallback(OAIHttpRequestWorker *worker);
    void apiV20LookupBarcodePostCallback(OAIHttpRequestWorker *worker);
    void apiV20LookupGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV20LookupBarcodeGetSignal();
    void apiV20LookupBarcodePostSignal();
    void apiV20LookupGetSignal();


    void apiV20LookupBarcodeGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV20LookupBarcodePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV20LookupGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV20LookupBarcodeGetSignalError() instead")
    void apiV20LookupBarcodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20LookupBarcodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20LookupBarcodePostSignalError() instead")
    void apiV20LookupBarcodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20LookupBarcodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20LookupGetSignalError() instead")
    void apiV20LookupGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20LookupGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV20LookupBarcodeGetSignalErrorFull() instead")
    void apiV20LookupBarcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20LookupBarcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20LookupBarcodePostSignalErrorFull() instead")
    void apiV20LookupBarcodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20LookupBarcodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20LookupGetSignalErrorFull() instead")
    void apiV20LookupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20LookupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
