/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssembliesApi_H
#define OAI_OAIAssembliesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_v2_0__database__assemblies__barcode__get_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssembliesApi : public QObject {
    Q_OBJECT

public:
    OAIAssembliesApi(const int timeOut = 0);
    ~OAIAssembliesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__assemblies__barcode__get_request OAI_api_v2_0__database__assemblies__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseAssembliesBarcodeGet(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__assemblies__barcode__get_request> &oai_api_v2_0__database__assemblies__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__assemblies__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__assemblies__barcode__get_request OAI_api_v2_0__database__assemblies__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseAssembliesBarcodePost(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__assemblies__barcode__get_request> &oai_api_v2_0__database__assemblies__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__assemblies__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__assemblies__barcode__get_request OAI_api_v2_0__database__assemblies__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseAssembliesBarcodePut(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__assemblies__barcode__get_request> &oai_api_v2_0__database__assemblies__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__assemblies__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  n50 qint32 [optional]
    * @param[in]  barcode QList<QString> [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  assembly_status QString [optional]
    * @param[in]  uberstrain QString [optional]
    * @param[in]  top_species QString [optional]
    * @param[in]  only_fields QList<QString> [optional]
    * @param[in]  reldate qint32 [optional]
    * @param[in]  sortorder QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  version qint32 [optional]
    */
    virtual void apiV20DatabaseAssembliesGet(const QString &database, const ::OpenAPI::OptionalParam<qint32> &n50 = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &assembly_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uberstrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &top_species = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &only_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &reldate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sortorder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV20DatabaseAssembliesBarcodeGetCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseAssembliesBarcodePostCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseAssembliesBarcodePutCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseAssembliesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV20DatabaseAssembliesBarcodeGetSignal();
    void apiV20DatabaseAssembliesBarcodePostSignal();
    void apiV20DatabaseAssembliesBarcodePutSignal();
    void apiV20DatabaseAssembliesGetSignal();


    void apiV20DatabaseAssembliesBarcodeGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseAssembliesBarcodePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseAssembliesBarcodePutSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseAssembliesGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesBarcodeGetSignalError() instead")
    void apiV20DatabaseAssembliesBarcodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesBarcodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesBarcodePostSignalError() instead")
    void apiV20DatabaseAssembliesBarcodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesBarcodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesBarcodePutSignalError() instead")
    void apiV20DatabaseAssembliesBarcodePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesBarcodePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesGetSignalError() instead")
    void apiV20DatabaseAssembliesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesBarcodeGetSignalErrorFull() instead")
    void apiV20DatabaseAssembliesBarcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesBarcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesBarcodePostSignalErrorFull() instead")
    void apiV20DatabaseAssembliesBarcodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesBarcodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesBarcodePutSignalErrorFull() instead")
    void apiV20DatabaseAssembliesBarcodePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesBarcodePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseAssembliesGetSignalErrorFull() instead")
    void apiV20DatabaseAssembliesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseAssembliesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
