/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v2_0__database__schemes__barcode__get_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v2_0__database__schemes__barcode__get_request::OAI_api_v2_0__database__schemes__barcode__get_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v2_0__database__schemes__barcode__get_request::OAI_api_v2_0__database__schemes__barcode__get_request() {
    this->initializeModel();
}

OAI_api_v2_0__database__schemes__barcode__get_request::~OAI_api_v2_0__database__schemes__barcode__get_request() {}

void OAI_api_v2_0__database__schemes__barcode__get_request::initializeModel() {

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_lastmodified_isSet = false;
    m_lastmodified_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_only_fields_isSet = false;
    m_only_fields_isValid = false;

    m_orderby_isSet = false;
    m_orderby_isValid = false;

    m_scheme_name_isSet = false;
    m_scheme_name_isValid = false;

    m_sortorder_isSet = false;
    m_sortorder_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAI_api_v2_0__database__schemes__barcode__get_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v2_0__database__schemes__barcode__get_request::fromJsonObject(QJsonObject json) {

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_lastmodified_isValid = ::OpenAPI::fromJsonValue(m_lastmodified, json[QString("lastmodified")]);
    m_lastmodified_isSet = !json[QString("lastmodified")].isNull() && m_lastmodified_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_only_fields_isValid = ::OpenAPI::fromJsonValue(m_only_fields, json[QString("only_fields")]);
    m_only_fields_isSet = !json[QString("only_fields")].isNull() && m_only_fields_isValid;

    m_orderby_isValid = ::OpenAPI::fromJsonValue(m_orderby, json[QString("orderby")]);
    m_orderby_isSet = !json[QString("orderby")].isNull() && m_orderby_isValid;

    m_scheme_name_isValid = ::OpenAPI::fromJsonValue(m_scheme_name, json[QString("scheme_name")]);
    m_scheme_name_isSet = !json[QString("scheme_name")].isNull() && m_scheme_name_isValid;

    m_sortorder_isValid = ::OpenAPI::fromJsonValue(m_sortorder, json[QString("sortorder")]);
    m_sortorder_isSet = !json[QString("sortorder")].isNull() && m_sortorder_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAI_api_v2_0__database__schemes__barcode__get_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v2_0__database__schemes__barcode__get_request::asJsonObject() const {
    QJsonObject obj;
    if (m_barcode.size() > 0) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_lastmodified_isSet) {
        obj.insert(QString("lastmodified"), ::OpenAPI::toJsonValue(m_lastmodified));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_only_fields.size() > 0) {
        obj.insert(QString("only_fields"), ::OpenAPI::toJsonValue(m_only_fields));
    }
    if (m_orderby_isSet) {
        obj.insert(QString("orderby"), ::OpenAPI::toJsonValue(m_orderby));
    }
    if (m_scheme_name_isSet) {
        obj.insert(QString("scheme_name"), ::OpenAPI::toJsonValue(m_scheme_name));
    }
    if (m_sortorder_isSet) {
        obj.insert(QString("sortorder"), ::OpenAPI::toJsonValue(m_sortorder));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAI_api_v2_0__database__schemes__barcode__get_request::getBarcode() const {
    return m_barcode;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setBarcode(const QList<QString> &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_barcode_Valid() const{
    return m_barcode_isValid;
}

QDateTime OAI_api_v2_0__database__schemes__barcode__get_request::getCreated() const {
    return m_created;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_created_Set() const{
    return m_created_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_created_Valid() const{
    return m_created_isValid;
}

QString OAI_api_v2_0__database__schemes__barcode__get_request::getLabel() const {
    return m_label;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_label_Set() const{
    return m_label_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAI_api_v2_0__database__schemes__barcode__get_request::getLastmodified() const {
    return m_lastmodified;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setLastmodified(const QDateTime &lastmodified) {
    m_lastmodified = lastmodified;
    m_lastmodified_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_lastmodified_Set() const{
    return m_lastmodified_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_lastmodified_Valid() const{
    return m_lastmodified_isValid;
}

qint32 OAI_api_v2_0__database__schemes__barcode__get_request::getLimit() const {
    return m_limit;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAI_api_v2_0__database__schemes__barcode__get_request::getOffset() const {
    return m_offset;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<QString> OAI_api_v2_0__database__schemes__barcode__get_request::getOnlyFields() const {
    return m_only_fields;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setOnlyFields(const QList<QString> &only_fields) {
    m_only_fields = only_fields;
    m_only_fields_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_only_fields_Set() const{
    return m_only_fields_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_only_fields_Valid() const{
    return m_only_fields_isValid;
}

QString OAI_api_v2_0__database__schemes__barcode__get_request::getOrderby() const {
    return m_orderby;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setOrderby(const QString &orderby) {
    m_orderby = orderby;
    m_orderby_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_orderby_Set() const{
    return m_orderby_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_orderby_Valid() const{
    return m_orderby_isValid;
}

QString OAI_api_v2_0__database__schemes__barcode__get_request::getSchemeName() const {
    return m_scheme_name;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setSchemeName(const QString &scheme_name) {
    m_scheme_name = scheme_name;
    m_scheme_name_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_scheme_name_Set() const{
    return m_scheme_name_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_scheme_name_Valid() const{
    return m_scheme_name_isValid;
}

QString OAI_api_v2_0__database__schemes__barcode__get_request::getSortorder() const {
    return m_sortorder;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setSortorder(const QString &sortorder) {
    m_sortorder = sortorder;
    m_sortorder_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_sortorder_Set() const{
    return m_sortorder_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_sortorder_Valid() const{
    return m_sortorder_isValid;
}

qint32 OAI_api_v2_0__database__schemes__barcode__get_request::getVersion() const {
    return m_version;
}
void OAI_api_v2_0__database__schemes__barcode__get_request::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::is_version_Valid() const{
    return m_version_isValid;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_barcode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastmodified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sortorder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v2_0__database__schemes__barcode__get_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
