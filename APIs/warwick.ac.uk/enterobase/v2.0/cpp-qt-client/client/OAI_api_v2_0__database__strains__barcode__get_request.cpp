/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v2_0__database__strains__barcode__get_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v2_0__database__strains__barcode__get_request::OAI_api_v2_0__database__strains__barcode__get_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v2_0__database__strains__barcode__get_request::OAI_api_v2_0__database__strains__barcode__get_request() {
    this->initializeModel();
}

OAI_api_v2_0__database__strains__barcode__get_request::~OAI_api_v2_0__database__strains__barcode__get_request() {}

void OAI_api_v2_0__database__strains__barcode__get_request::initializeModel() {

    m_antigenic_formulas_isSet = false;
    m_antigenic_formulas_isValid = false;

    m_assembly_barcode_isSet = false;
    m_assembly_barcode_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_collection_date_isSet = false;
    m_collection_date_isValid = false;

    m_collection_month_isSet = false;
    m_collection_month_isValid = false;

    m_collection_time_isSet = false;
    m_collection_time_isValid = false;

    m_collection_year_isSet = false;
    m_collection_year_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_continent_isSet = false;
    m_continent_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_lab_contact_isSet = false;
    m_lab_contact_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_my_strains_isSet = false;
    m_my_strains_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_only_fields_isSet = false;
    m_only_fields_isValid = false;

    m_orderby_isSet = false;
    m_orderby_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_reldate_isSet = false;
    m_reldate_isValid = false;

    m_return_all_isSet = false;
    m_return_all_isValid = false;

    m_sample_accession_isSet = false;
    m_sample_accession_isValid = false;

    m_secondary_sample_accession_isSet = false;
    m_secondary_sample_accession_isValid = false;

    m_serotype_isSet = false;
    m_serotype_isValid = false;

    m_sortorder_isSet = false;
    m_sortorder_isValid = false;

    m_source_details_isSet = false;
    m_source_details_isValid = false;

    m_source_niche_isSet = false;
    m_source_niche_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_strain_name_isSet = false;
    m_strain_name_isValid = false;

    m_substrains_isSet = false;
    m_substrains_isValid = false;

    m_uberstrain_isSet = false;
    m_uberstrain_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAI_api_v2_0__database__strains__barcode__get_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v2_0__database__strains__barcode__get_request::fromJsonObject(QJsonObject json) {

    m_antigenic_formulas_isValid = ::OpenAPI::fromJsonValue(m_antigenic_formulas, json[QString("antigenic_formulas")]);
    m_antigenic_formulas_isSet = !json[QString("antigenic_formulas")].isNull() && m_antigenic_formulas_isValid;

    m_assembly_barcode_isValid = ::OpenAPI::fromJsonValue(m_assembly_barcode, json[QString("assembly_barcode")]);
    m_assembly_barcode_isSet = !json[QString("assembly_barcode")].isNull() && m_assembly_barcode_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_collection_date_isValid = ::OpenAPI::fromJsonValue(m_collection_date, json[QString("collection_date")]);
    m_collection_date_isSet = !json[QString("collection_date")].isNull() && m_collection_date_isValid;

    m_collection_month_isValid = ::OpenAPI::fromJsonValue(m_collection_month, json[QString("collection_month")]);
    m_collection_month_isSet = !json[QString("collection_month")].isNull() && m_collection_month_isValid;

    m_collection_time_isValid = ::OpenAPI::fromJsonValue(m_collection_time, json[QString("collection_time")]);
    m_collection_time_isSet = !json[QString("collection_time")].isNull() && m_collection_time_isValid;

    m_collection_year_isValid = ::OpenAPI::fromJsonValue(m_collection_year, json[QString("collection_year")]);
    m_collection_year_isSet = !json[QString("collection_year")].isNull() && m_collection_year_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_continent_isValid = ::OpenAPI::fromJsonValue(m_continent, json[QString("continent")]);
    m_continent_isSet = !json[QString("continent")].isNull() && m_continent_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_lab_contact_isValid = ::OpenAPI::fromJsonValue(m_lab_contact, json[QString("lab_contact")]);
    m_lab_contact_isSet = !json[QString("lab_contact")].isNull() && m_lab_contact_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_my_strains_isValid = ::OpenAPI::fromJsonValue(m_my_strains, json[QString("my_strains")]);
    m_my_strains_isSet = !json[QString("my_strains")].isNull() && m_my_strains_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_only_fields_isValid = ::OpenAPI::fromJsonValue(m_only_fields, json[QString("only_fields")]);
    m_only_fields_isSet = !json[QString("only_fields")].isNull() && m_only_fields_isValid;

    m_orderby_isValid = ::OpenAPI::fromJsonValue(m_orderby, json[QString("orderby")]);
    m_orderby_isSet = !json[QString("orderby")].isNull() && m_orderby_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_reldate_isValid = ::OpenAPI::fromJsonValue(m_reldate, json[QString("reldate")]);
    m_reldate_isSet = !json[QString("reldate")].isNull() && m_reldate_isValid;

    m_return_all_isValid = ::OpenAPI::fromJsonValue(m_return_all, json[QString("return_all")]);
    m_return_all_isSet = !json[QString("return_all")].isNull() && m_return_all_isValid;

    m_sample_accession_isValid = ::OpenAPI::fromJsonValue(m_sample_accession, json[QString("sample_accession")]);
    m_sample_accession_isSet = !json[QString("sample_accession")].isNull() && m_sample_accession_isValid;

    m_secondary_sample_accession_isValid = ::OpenAPI::fromJsonValue(m_secondary_sample_accession, json[QString("secondary_sample_accession")]);
    m_secondary_sample_accession_isSet = !json[QString("secondary_sample_accession")].isNull() && m_secondary_sample_accession_isValid;

    m_serotype_isValid = ::OpenAPI::fromJsonValue(m_serotype, json[QString("serotype")]);
    m_serotype_isSet = !json[QString("serotype")].isNull() && m_serotype_isValid;

    m_sortorder_isValid = ::OpenAPI::fromJsonValue(m_sortorder, json[QString("sortorder")]);
    m_sortorder_isSet = !json[QString("sortorder")].isNull() && m_sortorder_isValid;

    m_source_details_isValid = ::OpenAPI::fromJsonValue(m_source_details, json[QString("source_details")]);
    m_source_details_isSet = !json[QString("source_details")].isNull() && m_source_details_isValid;

    m_source_niche_isValid = ::OpenAPI::fromJsonValue(m_source_niche, json[QString("source_niche")]);
    m_source_niche_isSet = !json[QString("source_niche")].isNull() && m_source_niche_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("source_type")]);
    m_source_type_isSet = !json[QString("source_type")].isNull() && m_source_type_isValid;

    m_strain_name_isValid = ::OpenAPI::fromJsonValue(m_strain_name, json[QString("strain_name")]);
    m_strain_name_isSet = !json[QString("strain_name")].isNull() && m_strain_name_isValid;

    m_substrains_isValid = ::OpenAPI::fromJsonValue(m_substrains, json[QString("substrains")]);
    m_substrains_isSet = !json[QString("substrains")].isNull() && m_substrains_isValid;

    m_uberstrain_isValid = ::OpenAPI::fromJsonValue(m_uberstrain, json[QString("uberstrain")]);
    m_uberstrain_isSet = !json[QString("uberstrain")].isNull() && m_uberstrain_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v2_0__database__strains__barcode__get_request::asJsonObject() const {
    QJsonObject obj;
    if (m_antigenic_formulas_isSet) {
        obj.insert(QString("antigenic_formulas"), ::OpenAPI::toJsonValue(m_antigenic_formulas));
    }
    if (m_assembly_barcode_isSet) {
        obj.insert(QString("assembly_barcode"), ::OpenAPI::toJsonValue(m_assembly_barcode));
    }
    if (m_barcode.size() > 0) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_collection_date_isSet) {
        obj.insert(QString("collection_date"), ::OpenAPI::toJsonValue(m_collection_date));
    }
    if (m_collection_month_isSet) {
        obj.insert(QString("collection_month"), ::OpenAPI::toJsonValue(m_collection_month));
    }
    if (m_collection_time_isSet) {
        obj.insert(QString("collection_time"), ::OpenAPI::toJsonValue(m_collection_time));
    }
    if (m_collection_year_isSet) {
        obj.insert(QString("collection_year"), ::OpenAPI::toJsonValue(m_collection_year));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_continent_isSet) {
        obj.insert(QString("continent"), ::OpenAPI::toJsonValue(m_continent));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_lab_contact_isSet) {
        obj.insert(QString("lab_contact"), ::OpenAPI::toJsonValue(m_lab_contact));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_my_strains_isSet) {
        obj.insert(QString("my_strains"), ::OpenAPI::toJsonValue(m_my_strains));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_only_fields.size() > 0) {
        obj.insert(QString("only_fields"), ::OpenAPI::toJsonValue(m_only_fields));
    }
    if (m_orderby_isSet) {
        obj.insert(QString("orderby"), ::OpenAPI::toJsonValue(m_orderby));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_reldate_isSet) {
        obj.insert(QString("reldate"), ::OpenAPI::toJsonValue(m_reldate));
    }
    if (m_return_all_isSet) {
        obj.insert(QString("return_all"), ::OpenAPI::toJsonValue(m_return_all));
    }
    if (m_sample_accession_isSet) {
        obj.insert(QString("sample_accession"), ::OpenAPI::toJsonValue(m_sample_accession));
    }
    if (m_secondary_sample_accession_isSet) {
        obj.insert(QString("secondary_sample_accession"), ::OpenAPI::toJsonValue(m_secondary_sample_accession));
    }
    if (m_serotype_isSet) {
        obj.insert(QString("serotype"), ::OpenAPI::toJsonValue(m_serotype));
    }
    if (m_sortorder_isSet) {
        obj.insert(QString("sortorder"), ::OpenAPI::toJsonValue(m_sortorder));
    }
    if (m_source_details_isSet) {
        obj.insert(QString("source_details"), ::OpenAPI::toJsonValue(m_source_details));
    }
    if (m_source_niche_isSet) {
        obj.insert(QString("source_niche"), ::OpenAPI::toJsonValue(m_source_niche));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("source_type"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_strain_name_isSet) {
        obj.insert(QString("strain_name"), ::OpenAPI::toJsonValue(m_strain_name));
    }
    if (m_substrains_isSet) {
        obj.insert(QString("substrains"), ::OpenAPI::toJsonValue(m_substrains));
    }
    if (m_uberstrain_isSet) {
        obj.insert(QString("uberstrain"), ::OpenAPI::toJsonValue(m_uberstrain));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getAntigenicFormulas() const {
    return m_antigenic_formulas;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setAntigenicFormulas(const QString &antigenic_formulas) {
    m_antigenic_formulas = antigenic_formulas;
    m_antigenic_formulas_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_antigenic_formulas_Set() const{
    return m_antigenic_formulas_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_antigenic_formulas_Valid() const{
    return m_antigenic_formulas_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getAssemblyBarcode() const {
    return m_assembly_barcode;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setAssemblyBarcode(const QString &assembly_barcode) {
    m_assembly_barcode = assembly_barcode;
    m_assembly_barcode_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_assembly_barcode_Set() const{
    return m_assembly_barcode_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_assembly_barcode_Valid() const{
    return m_assembly_barcode_isValid;
}

QList<QString> OAI_api_v2_0__database__strains__barcode__get_request::getBarcode() const {
    return m_barcode;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setBarcode(const QList<QString> &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_barcode_Valid() const{
    return m_barcode_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getCity() const {
    return m_city;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_city_Set() const{
    return m_city_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_city_Valid() const{
    return m_city_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getCollectionDate() const {
    return m_collection_date;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCollectionDate(const qint32 &collection_date) {
    m_collection_date = collection_date;
    m_collection_date_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_date_Set() const{
    return m_collection_date_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_date_Valid() const{
    return m_collection_date_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getCollectionMonth() const {
    return m_collection_month;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCollectionMonth(const qint32 &collection_month) {
    m_collection_month = collection_month;
    m_collection_month_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_month_Set() const{
    return m_collection_month_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_month_Valid() const{
    return m_collection_month_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getCollectionTime() const {
    return m_collection_time;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCollectionTime(const QString &collection_time) {
    m_collection_time = collection_time;
    m_collection_time_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_time_Set() const{
    return m_collection_time_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_time_Valid() const{
    return m_collection_time_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getCollectionYear() const {
    return m_collection_year;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCollectionYear(const qint32 &collection_year) {
    m_collection_year = collection_year;
    m_collection_year_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_year_Set() const{
    return m_collection_year_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_collection_year_Valid() const{
    return m_collection_year_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getComment() const {
    return m_comment;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getContinent() const {
    return m_continent;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setContinent(const QString &continent) {
    m_continent = continent;
    m_continent_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_continent_Set() const{
    return m_continent_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_continent_Valid() const{
    return m_continent_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getCountry() const {
    return m_country;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_country_Set() const{
    return m_country_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_country_Valid() const{
    return m_country_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getCounty() const {
    return m_county;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_county_Set() const{
    return m_county_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_county_Valid() const{
    return m_county_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getLabContact() const {
    return m_lab_contact;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setLabContact(const QString &lab_contact) {
    m_lab_contact = lab_contact;
    m_lab_contact_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_lab_contact_Set() const{
    return m_lab_contact_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_lab_contact_Valid() const{
    return m_lab_contact_isValid;
}

float OAI_api_v2_0__database__strains__barcode__get_request::getLatitude() const {
    return m_latitude;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_latitude_Valid() const{
    return m_latitude_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getLimit() const {
    return m_limit;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_limit_Valid() const{
    return m_limit_isValid;
}

float OAI_api_v2_0__database__strains__barcode__get_request::getLongitude() const {
    return m_longitude;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::isMyStrains() const {
    return m_my_strains;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setMyStrains(const bool &my_strains) {
    m_my_strains = my_strains;
    m_my_strains_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_my_strains_Set() const{
    return m_my_strains_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_my_strains_Valid() const{
    return m_my_strains_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getOffset() const {
    return m_offset;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<QString> OAI_api_v2_0__database__strains__barcode__get_request::getOnlyFields() const {
    return m_only_fields;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setOnlyFields(const QList<QString> &only_fields) {
    m_only_fields = only_fields;
    m_only_fields_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_only_fields_Set() const{
    return m_only_fields_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_only_fields_Valid() const{
    return m_only_fields_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getOrderby() const {
    return m_orderby;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setOrderby(const QString &orderby) {
    m_orderby = orderby;
    m_orderby_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_orderby_Set() const{
    return m_orderby_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_orderby_Valid() const{
    return m_orderby_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getPostcode() const {
    return m_postcode;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getRegion() const {
    return m_region;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_region_Set() const{
    return m_region_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getReldate() const {
    return m_reldate;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setReldate(const qint32 &reldate) {
    m_reldate = reldate;
    m_reldate_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_reldate_Set() const{
    return m_reldate_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_reldate_Valid() const{
    return m_reldate_isValid;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::isReturnAll() const {
    return m_return_all;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setReturnAll(const bool &return_all) {
    m_return_all = return_all;
    m_return_all_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_return_all_Set() const{
    return m_return_all_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_return_all_Valid() const{
    return m_return_all_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSampleAccession() const {
    return m_sample_accession;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSampleAccession(const QString &sample_accession) {
    m_sample_accession = sample_accession;
    m_sample_accession_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_sample_accession_Set() const{
    return m_sample_accession_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_sample_accession_Valid() const{
    return m_sample_accession_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSecondarySampleAccession() const {
    return m_secondary_sample_accession;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSecondarySampleAccession(const QString &secondary_sample_accession) {
    m_secondary_sample_accession = secondary_sample_accession;
    m_secondary_sample_accession_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_secondary_sample_accession_Set() const{
    return m_secondary_sample_accession_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_secondary_sample_accession_Valid() const{
    return m_secondary_sample_accession_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSerotype() const {
    return m_serotype;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSerotype(const QString &serotype) {
    m_serotype = serotype;
    m_serotype_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_serotype_Set() const{
    return m_serotype_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_serotype_Valid() const{
    return m_serotype_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSortorder() const {
    return m_sortorder;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSortorder(const QString &sortorder) {
    m_sortorder = sortorder;
    m_sortorder_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_sortorder_Set() const{
    return m_sortorder_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_sortorder_Valid() const{
    return m_sortorder_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSourceDetails() const {
    return m_source_details;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSourceDetails(const QString &source_details) {
    m_source_details = source_details;
    m_source_details_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_source_details_Set() const{
    return m_source_details_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_source_details_Valid() const{
    return m_source_details_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSourceNiche() const {
    return m_source_niche;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSourceNiche(const QString &source_niche) {
    m_source_niche = source_niche;
    m_source_niche_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_source_niche_Set() const{
    return m_source_niche_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_source_niche_Valid() const{
    return m_source_niche_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getSourceType() const {
    return m_source_type;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getStrainName() const {
    return m_strain_name;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setStrainName(const QString &strain_name) {
    m_strain_name = strain_name;
    m_strain_name_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_strain_name_Set() const{
    return m_strain_name_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_strain_name_Valid() const{
    return m_strain_name_isValid;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::isSubstrains() const {
    return m_substrains;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setSubstrains(const bool &substrains) {
    m_substrains = substrains;
    m_substrains_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_substrains_Set() const{
    return m_substrains_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_substrains_Valid() const{
    return m_substrains_isValid;
}

QString OAI_api_v2_0__database__strains__barcode__get_request::getUberstrain() const {
    return m_uberstrain;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setUberstrain(const QString &uberstrain) {
    m_uberstrain = uberstrain;
    m_uberstrain_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_uberstrain_Set() const{
    return m_uberstrain_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_uberstrain_Valid() const{
    return m_uberstrain_isValid;
}

qint32 OAI_api_v2_0__database__strains__barcode__get_request::getVersion() const {
    return m_version;
}
void OAI_api_v2_0__database__strains__barcode__get_request::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::is_version_Valid() const{
    return m_version_isValid;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antigenic_formulas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lab_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_strains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reldate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_accession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_sample_accession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serotype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sortorder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_niche_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substrains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uberstrain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v2_0__database__strains__barcode__get_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
