/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStrainsApi_H
#define OAI_OAIStrainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_v2_0__database__strains__barcode__get_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStrainsApi : public QObject {
    Q_OBJECT

public:
    OAIStrainsApi(const int timeOut = 0);
    ~OAIStrainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__strains__barcode__get_request OAI_api_v2_0__database__strains__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseStrainsBarcodeGet(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__strains__barcode__get_request> &oai_api_v2_0__database__strains__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__strains__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__strains__barcode__get_request OAI_api_v2_0__database__strains__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseStrainsBarcodePost(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__strains__barcode__get_request> &oai_api_v2_0__database__strains__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__strains__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  barcode QString [required]
    * @param[in]  oai_api_v2_0__database__strains__barcode__get_request OAI_api_v2_0__database__strains__barcode__get_request [optional]
    */
    virtual void apiV20DatabaseStrainsBarcodePut(const QString &database, const QString &barcode, const ::OpenAPI::OptionalParam<OAI_api_v2_0__database__strains__barcode__get_request> &oai_api_v2_0__database__strains__barcode__get_request = ::OpenAPI::OptionalParam<OAI_api_v2_0__database__strains__barcode__get_request>());

    /**
    * @param[in]  database QString [required]
    * @param[in]  continent QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sample_accession QString [optional]
    * @param[in]  latitude float [optional]
    * @param[in]  collection_month qint32 [optional]
    * @param[in]  antigenic_formulas QString [optional]
    * @param[in]  strain_name QString [optional]
    * @param[in]  lab_contact QString [optional]
    * @param[in]  sortorder QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  serotype QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  collection_date qint32 [optional]
    * @param[in]  return_all bool [optional]
    * @param[in]  only_fields QList<QString> [optional]
    * @param[in]  source_niche QString [optional]
    * @param[in]  collection_year qint32 [optional]
    * @param[in]  secondary_sample_accession QString [optional]
    * @param[in]  source_details QString [optional]
    * @param[in]  substrains bool [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  my_strains bool [optional]
    * @param[in]  collection_time QString [optional]
    * @param[in]  county QString [optional]
    * @param[in]  uberstrain QString [optional]
    * @param[in]  comment QString [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  reldate qint32 [optional]
    * @param[in]  assembly_barcode QString [optional]
    * @param[in]  barcode QList<QString> [optional]
    * @param[in]  postcode QString [optional]
    * @param[in]  city QString [optional]
    */
    virtual void apiV20DatabaseStrainsGet(const QString &database, const ::OpenAPI::OptionalParam<QString> &continent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sample_accession = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &collection_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &antigenic_formulas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &strain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lab_contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sortorder = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &serotype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &collection_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &return_all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &only_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &source_niche = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &collection_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &secondary_sample_accession = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &substrains = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &my_strains = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &collection_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &county = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uberstrain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &reldate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &assembly_barcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &barcode = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &postcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV20DatabaseStrainsBarcodeGetCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseStrainsBarcodePostCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseStrainsBarcodePutCallback(OAIHttpRequestWorker *worker);
    void apiV20DatabaseStrainsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV20DatabaseStrainsBarcodeGetSignal();
    void apiV20DatabaseStrainsBarcodePostSignal();
    void apiV20DatabaseStrainsBarcodePutSignal();
    void apiV20DatabaseStrainsGetSignal();


    void apiV20DatabaseStrainsBarcodeGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseStrainsBarcodePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseStrainsBarcodePutSignalFull(OAIHttpRequestWorker *worker);
    void apiV20DatabaseStrainsGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsBarcodeGetSignalError() instead")
    void apiV20DatabaseStrainsBarcodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsBarcodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsBarcodePostSignalError() instead")
    void apiV20DatabaseStrainsBarcodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsBarcodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsBarcodePutSignalError() instead")
    void apiV20DatabaseStrainsBarcodePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsBarcodePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsGetSignalError() instead")
    void apiV20DatabaseStrainsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsBarcodeGetSignalErrorFull() instead")
    void apiV20DatabaseStrainsBarcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsBarcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsBarcodePostSignalErrorFull() instead")
    void apiV20DatabaseStrainsBarcodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsBarcodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsBarcodePutSignalErrorFull() instead")
    void apiV20DatabaseStrainsBarcodePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsBarcodePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV20DatabaseStrainsGetSignalErrorFull() instead")
    void apiV20DatabaseStrainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV20DatabaseStrainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
