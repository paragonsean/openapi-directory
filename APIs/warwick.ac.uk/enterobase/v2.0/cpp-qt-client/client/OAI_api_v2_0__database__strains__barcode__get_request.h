/**
 * Enterobase-API
 *  API for EnteroBase (https://enterobase.warwick.ac.uk)   EnteroBase is a user-friendly online resource, where users can upload their  own sequencing data for de novo assembly by a stream-lined pipeline. The assemblies  are used for calling MLST and wgMLST patterns, allowing users to compare their strains  to publically available genotyping data from other EnteroBase users, GenBank and classical MLST databases.  Click here to find how to get and use an API token: http://bit.ly/1TKlaOU 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: enterobase@warwick.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_api_v2_0__database__strains__barcode__get_request.h
 *
 * 
 */

#ifndef OAI_api_v2_0__database__strains__barcode__get_request_H
#define OAI_api_v2_0__database__strains__barcode__get_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_api_v2_0__database__strains__barcode__get_request : public OAIObject {
public:
    OAI_api_v2_0__database__strains__barcode__get_request();
    OAI_api_v2_0__database__strains__barcode__get_request(QString json);
    ~OAI_api_v2_0__database__strains__barcode__get_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAntigenicFormulas() const;
    void setAntigenicFormulas(const QString &antigenic_formulas);
    bool is_antigenic_formulas_Set() const;
    bool is_antigenic_formulas_Valid() const;

    QString getAssemblyBarcode() const;
    void setAssemblyBarcode(const QString &assembly_barcode);
    bool is_assembly_barcode_Set() const;
    bool is_assembly_barcode_Valid() const;

    QList<QString> getBarcode() const;
    void setBarcode(const QList<QString> &barcode);
    bool is_barcode_Set() const;
    bool is_barcode_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    qint32 getCollectionDate() const;
    void setCollectionDate(const qint32 &collection_date);
    bool is_collection_date_Set() const;
    bool is_collection_date_Valid() const;

    qint32 getCollectionMonth() const;
    void setCollectionMonth(const qint32 &collection_month);
    bool is_collection_month_Set() const;
    bool is_collection_month_Valid() const;

    QString getCollectionTime() const;
    void setCollectionTime(const QString &collection_time);
    bool is_collection_time_Set() const;
    bool is_collection_time_Valid() const;

    qint32 getCollectionYear() const;
    void setCollectionYear(const qint32 &collection_year);
    bool is_collection_year_Set() const;
    bool is_collection_year_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getContinent() const;
    void setContinent(const QString &continent);
    bool is_continent_Set() const;
    bool is_continent_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCounty() const;
    void setCounty(const QString &county);
    bool is_county_Set() const;
    bool is_county_Valid() const;

    QString getLabContact() const;
    void setLabContact(const QString &lab_contact);
    bool is_lab_contact_Set() const;
    bool is_lab_contact_Valid() const;

    float getLatitude() const;
    void setLatitude(const float &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    float getLongitude() const;
    void setLongitude(const float &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    bool isMyStrains() const;
    void setMyStrains(const bool &my_strains);
    bool is_my_strains_Set() const;
    bool is_my_strains_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<QString> getOnlyFields() const;
    void setOnlyFields(const QList<QString> &only_fields);
    bool is_only_fields_Set() const;
    bool is_only_fields_Valid() const;

    QString getOrderby() const;
    void setOrderby(const QString &orderby);
    bool is_orderby_Set() const;
    bool is_orderby_Valid() const;

    QString getPostcode() const;
    void setPostcode(const QString &postcode);
    bool is_postcode_Set() const;
    bool is_postcode_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    qint32 getReldate() const;
    void setReldate(const qint32 &reldate);
    bool is_reldate_Set() const;
    bool is_reldate_Valid() const;

    bool isReturnAll() const;
    void setReturnAll(const bool &return_all);
    bool is_return_all_Set() const;
    bool is_return_all_Valid() const;

    QString getSampleAccession() const;
    void setSampleAccession(const QString &sample_accession);
    bool is_sample_accession_Set() const;
    bool is_sample_accession_Valid() const;

    QString getSecondarySampleAccession() const;
    void setSecondarySampleAccession(const QString &secondary_sample_accession);
    bool is_secondary_sample_accession_Set() const;
    bool is_secondary_sample_accession_Valid() const;

    QString getSerotype() const;
    void setSerotype(const QString &serotype);
    bool is_serotype_Set() const;
    bool is_serotype_Valid() const;

    QString getSortorder() const;
    void setSortorder(const QString &sortorder);
    bool is_sortorder_Set() const;
    bool is_sortorder_Valid() const;

    QString getSourceDetails() const;
    void setSourceDetails(const QString &source_details);
    bool is_source_details_Set() const;
    bool is_source_details_Valid() const;

    QString getSourceNiche() const;
    void setSourceNiche(const QString &source_niche);
    bool is_source_niche_Set() const;
    bool is_source_niche_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    QString getStrainName() const;
    void setStrainName(const QString &strain_name);
    bool is_strain_name_Set() const;
    bool is_strain_name_Valid() const;

    bool isSubstrains() const;
    void setSubstrains(const bool &substrains);
    bool is_substrains_Set() const;
    bool is_substrains_Valid() const;

    QString getUberstrain() const;
    void setUberstrain(const QString &uberstrain);
    bool is_uberstrain_Set() const;
    bool is_uberstrain_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_antigenic_formulas;
    bool m_antigenic_formulas_isSet;
    bool m_antigenic_formulas_isValid;

    QString m_assembly_barcode;
    bool m_assembly_barcode_isSet;
    bool m_assembly_barcode_isValid;

    QList<QString> m_barcode;
    bool m_barcode_isSet;
    bool m_barcode_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    qint32 m_collection_date;
    bool m_collection_date_isSet;
    bool m_collection_date_isValid;

    qint32 m_collection_month;
    bool m_collection_month_isSet;
    bool m_collection_month_isValid;

    QString m_collection_time;
    bool m_collection_time_isSet;
    bool m_collection_time_isValid;

    qint32 m_collection_year;
    bool m_collection_year_isSet;
    bool m_collection_year_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_continent;
    bool m_continent_isSet;
    bool m_continent_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_county;
    bool m_county_isSet;
    bool m_county_isValid;

    QString m_lab_contact;
    bool m_lab_contact_isSet;
    bool m_lab_contact_isValid;

    float m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    float m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    bool m_my_strains;
    bool m_my_strains_isSet;
    bool m_my_strains_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<QString> m_only_fields;
    bool m_only_fields_isSet;
    bool m_only_fields_isValid;

    QString m_orderby;
    bool m_orderby_isSet;
    bool m_orderby_isValid;

    QString m_postcode;
    bool m_postcode_isSet;
    bool m_postcode_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    qint32 m_reldate;
    bool m_reldate_isSet;
    bool m_reldate_isValid;

    bool m_return_all;
    bool m_return_all_isSet;
    bool m_return_all_isValid;

    QString m_sample_accession;
    bool m_sample_accession_isSet;
    bool m_sample_accession_isValid;

    QString m_secondary_sample_accession;
    bool m_secondary_sample_accession_isSet;
    bool m_secondary_sample_accession_isValid;

    QString m_serotype;
    bool m_serotype_isSet;
    bool m_serotype_isValid;

    QString m_sortorder;
    bool m_sortorder_isSet;
    bool m_sortorder_isValid;

    QString m_source_details;
    bool m_source_details_isSet;
    bool m_source_details_isValid;

    QString m_source_niche;
    bool m_source_niche_isSet;
    bool m_source_niche_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    QString m_strain_name;
    bool m_strain_name_isSet;
    bool m_strain_name_isValid;

    bool m_substrains;
    bool m_substrains_isSet;
    bool m_substrains_isValid;

    QString m_uberstrain;
    bool m_uberstrain_isSet;
    bool m_uberstrain_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_api_v2_0__database__strains__barcode__get_request)

#endif // OAI_api_v2_0__database__strains__barcode__get_request_H
