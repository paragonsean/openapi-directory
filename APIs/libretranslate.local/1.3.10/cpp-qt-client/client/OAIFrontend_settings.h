/**
 * LibreTranslate
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFrontend_settings.h
 *
 * 
 */

#ifndef OAIFrontend_settings_H
#define OAIFrontend_settings_H

#include <QJsonObject>

#include "OAIFrontend_settings_language.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFrontend_settings_language;

class OAIFrontend_settings : public OAIObject {
public:
    OAIFrontend_settings();
    OAIFrontend_settings(QString json);
    ~OAIFrontend_settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApiKeys() const;
    void setApiKeys(const bool &api_keys);
    bool is_api_keys_Set() const;
    bool is_api_keys_Valid() const;

    qint32 getCharLimit() const;
    void setCharLimit(const qint32 &char_limit);
    bool is_char_limit_Set() const;
    bool is_char_limit_Valid() const;

    qint32 getFrontendTimeout() const;
    void setFrontendTimeout(const qint32 &frontend_timeout);
    bool is_frontend_timeout_Set() const;
    bool is_frontend_timeout_Valid() const;

    bool isKeyRequired() const;
    void setKeyRequired(const bool &key_required);
    bool is_key_required_Set() const;
    bool is_key_required_Valid() const;

    OAIFrontend_settings_language getLanguage() const;
    void setLanguage(const OAIFrontend_settings_language &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    bool isSuggestions() const;
    void setSuggestions(const bool &suggestions);
    bool is_suggestions_Set() const;
    bool is_suggestions_Valid() const;

    QList<QString> getSupportedFilesFormat() const;
    void setSupportedFilesFormat(const QList<QString> &supported_files_format);
    bool is_supported_files_format_Set() const;
    bool is_supported_files_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_api_keys;
    bool m_api_keys_isSet;
    bool m_api_keys_isValid;

    qint32 m_char_limit;
    bool m_char_limit_isSet;
    bool m_char_limit_isValid;

    qint32 m_frontend_timeout;
    bool m_frontend_timeout_isSet;
    bool m_frontend_timeout_isValid;

    bool m_key_required;
    bool m_key_required_isSet;
    bool m_key_required_isValid;

    OAIFrontend_settings_language m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    bool m_suggestions;
    bool m_suggestions_isSet;
    bool m_suggestions_isValid;

    QList<QString> m_supported_files_format;
    bool m_supported_files_format_isSet;
    bool m_supported_files_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFrontend_settings)

#endif // OAIFrontend_settings_H
