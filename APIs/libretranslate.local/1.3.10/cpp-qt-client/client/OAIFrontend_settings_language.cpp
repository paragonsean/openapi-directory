/**
 * LibreTranslate
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrontend_settings_language.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrontend_settings_language::OAIFrontend_settings_language(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrontend_settings_language::OAIFrontend_settings_language() {
    this->initializeModel();
}

OAIFrontend_settings_language::~OAIFrontend_settings_language() {}

void OAIFrontend_settings_language::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIFrontend_settings_language::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrontend_settings_language::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIFrontend_settings_language::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrontend_settings_language::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIFrontend_settings_language_source OAIFrontend_settings_language::getSource() const {
    return m_source;
}
void OAIFrontend_settings_language::setSource(const OAIFrontend_settings_language_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIFrontend_settings_language::is_source_Set() const{
    return m_source_isSet;
}

bool OAIFrontend_settings_language::is_source_Valid() const{
    return m_source_isValid;
}

OAIFrontend_settings_language_source OAIFrontend_settings_language::getTarget() const {
    return m_target;
}
void OAIFrontend_settings_language::setTarget(const OAIFrontend_settings_language_source &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIFrontend_settings_language::is_target_Set() const{
    return m_target_isSet;
}

bool OAIFrontend_settings_language::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIFrontend_settings_language::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrontend_settings_language::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
