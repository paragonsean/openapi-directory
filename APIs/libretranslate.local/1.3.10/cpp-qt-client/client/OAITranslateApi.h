/**
 * LibreTranslate
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITranslateApi_H
#define OAI_OAITranslateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDetections_inner.h"
#include "OAIError_response.h"
#include "OAIError_slow_down.h"
#include "OAILanguages_inner.h"
#include "OAITranslate.h"
#include "OAITranslate_file.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITranslateApi : public QObject {
    Q_OBJECT

public:
    OAITranslateApi(const int timeOut = 0);
    ~OAITranslateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void detectPost();


    virtual void languagesGet();


    virtual void translateFilePost();


    virtual void translatePost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void detectPostCallback(OAIHttpRequestWorker *worker);
    void languagesGetCallback(OAIHttpRequestWorker *worker);
    void translateFilePostCallback(OAIHttpRequestWorker *worker);
    void translatePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void detectPostSignal(QList<OAIDetections_inner> summary);
    void languagesGetSignal(QList<OAILanguages_inner> summary);
    void translateFilePostSignal(OAITranslate_file summary);
    void translatePostSignal(OAITranslate summary);


    void detectPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIDetections_inner> summary);
    void languagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILanguages_inner> summary);
    void translateFilePostSignalFull(OAIHttpRequestWorker *worker, OAITranslate_file summary);
    void translatePostSignalFull(OAIHttpRequestWorker *worker, OAITranslate summary);

    Q_DECL_DEPRECATED_X("Use detectPostSignalError() instead")
    void detectPostSignalE(QList<OAIDetections_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectPostSignalError(QList<OAIDetections_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetSignalError() instead")
    void languagesGetSignalE(QList<OAILanguages_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetSignalError(QList<OAILanguages_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateFilePostSignalError() instead")
    void translateFilePostSignalE(OAITranslate_file summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translateFilePostSignalError(OAITranslate_file summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translatePostSignalError() instead")
    void translatePostSignalE(OAITranslate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translatePostSignalError(OAITranslate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use detectPostSignalErrorFull() instead")
    void detectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetSignalErrorFull() instead")
    void languagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateFilePostSignalErrorFull() instead")
    void translateFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translatePostSignalErrorFull() instead")
    void translatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
