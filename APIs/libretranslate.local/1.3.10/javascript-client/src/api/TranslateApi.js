/**
 * LibreTranslate
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DetectionsInner from '../model/DetectionsInner';
import ErrorResponse from '../model/ErrorResponse';
import ErrorSlowDown from '../model/ErrorSlowDown';
import LanguagesInner from '../model/LanguagesInner';
import Translate from '../model/Translate';
import TranslateFile from '../model/TranslateFile';

/**
* Translate service.
* @module api/TranslateApi
* @version 1.3.10
*/
export default class TranslateApi {

    /**
    * Constructs a new TranslateApi. 
    * @alias module:api/TranslateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the detectPost operation.
     * @callback module:api/TranslateApi~detectPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DetectionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect the language of a single text
     * 
     * @param {module:api/TranslateApi~detectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DetectionsInner>}
     */
    detectPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = [DetectionsInner];
      return this.apiClient.callApi(
        '/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesGet operation.
     * @callback module:api/TranslateApi~languagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LanguagesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of supported languages
     * 
     * @param {module:api/TranslateApi~languagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LanguagesInner>}
     */
    languagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LanguagesInner];
      return this.apiClient.callApi(
        '/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateFilePost operation.
     * @callback module:api/TranslateApi~translateFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranslateFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate file from a language to another
     * 
     * @param {module:api/TranslateApi~translateFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranslateFile}
     */
    translateFilePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = TranslateFile;
      return this.apiClient.callApi(
        '/translate_file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translatePost operation.
     * @callback module:api/TranslateApi~translatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Translate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate text from a language to another
     * 
     * @param {module:api/TranslateApi~translatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Translate}
     */
    translatePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Translate;
      return this.apiClient.callApi(
        '/translate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
