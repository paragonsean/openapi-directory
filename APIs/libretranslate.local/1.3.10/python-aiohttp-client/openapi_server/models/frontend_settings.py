# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frontend_settings_language import FrontendSettingsLanguage
from openapi_server import util


class FrontendSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_keys: bool=None, char_limit: int=None, frontend_timeout: int=None, key_required: bool=None, language: FrontendSettingsLanguage=None, suggestions: bool=None, supported_files_format: List[str]=None):
        """FrontendSettings - a model defined in OpenAPI

        :param api_keys: The api_keys of this FrontendSettings.
        :param char_limit: The char_limit of this FrontendSettings.
        :param frontend_timeout: The frontend_timeout of this FrontendSettings.
        :param key_required: The key_required of this FrontendSettings.
        :param language: The language of this FrontendSettings.
        :param suggestions: The suggestions of this FrontendSettings.
        :param supported_files_format: The supported_files_format of this FrontendSettings.
        """
        self.openapi_types = {
            'api_keys': bool,
            'char_limit': int,
            'frontend_timeout': int,
            'key_required': bool,
            'language': FrontendSettingsLanguage,
            'suggestions': bool,
            'supported_files_format': List[str]
        }

        self.attribute_map = {
            'api_keys': 'apiKeys',
            'char_limit': 'charLimit',
            'frontend_timeout': 'frontendTimeout',
            'key_required': 'keyRequired',
            'language': 'language',
            'suggestions': 'suggestions',
            'supported_files_format': 'supportedFilesFormat'
        }

        self._api_keys = api_keys
        self._char_limit = char_limit
        self._frontend_timeout = frontend_timeout
        self._key_required = key_required
        self._language = language
        self._suggestions = suggestions
        self._supported_files_format = supported_files_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrontendSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The frontend-settings of this FrontendSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_keys(self):
        """Gets the api_keys of this FrontendSettings.

        Whether the API key database is enabled.

        :return: The api_keys of this FrontendSettings.
        :rtype: bool
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """Sets the api_keys of this FrontendSettings.

        Whether the API key database is enabled.

        :param api_keys: The api_keys of this FrontendSettings.
        :type api_keys: bool
        """

        self._api_keys = api_keys

    @property
    def char_limit(self):
        """Gets the char_limit of this FrontendSettings.

        Character input limit for this language (-1 indicates no limit)

        :return: The char_limit of this FrontendSettings.
        :rtype: int
        """
        return self._char_limit

    @char_limit.setter
    def char_limit(self, char_limit):
        """Sets the char_limit of this FrontendSettings.

        Character input limit for this language (-1 indicates no limit)

        :param char_limit: The char_limit of this FrontendSettings.
        :type char_limit: int
        """

        self._char_limit = char_limit

    @property
    def frontend_timeout(self):
        """Gets the frontend_timeout of this FrontendSettings.

        Frontend translation timeout

        :return: The frontend_timeout of this FrontendSettings.
        :rtype: int
        """
        return self._frontend_timeout

    @frontend_timeout.setter
    def frontend_timeout(self, frontend_timeout):
        """Sets the frontend_timeout of this FrontendSettings.

        Frontend translation timeout

        :param frontend_timeout: The frontend_timeout of this FrontendSettings.
        :type frontend_timeout: int
        """

        self._frontend_timeout = frontend_timeout

    @property
    def key_required(self):
        """Gets the key_required of this FrontendSettings.

        Whether an API key is required.

        :return: The key_required of this FrontendSettings.
        :rtype: bool
        """
        return self._key_required

    @key_required.setter
    def key_required(self, key_required):
        """Sets the key_required of this FrontendSettings.

        Whether an API key is required.

        :param key_required: The key_required of this FrontendSettings.
        :type key_required: bool
        """

        self._key_required = key_required

    @property
    def language(self):
        """Gets the language of this FrontendSettings.


        :return: The language of this FrontendSettings.
        :rtype: FrontendSettingsLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this FrontendSettings.


        :param language: The language of this FrontendSettings.
        :type language: FrontendSettingsLanguage
        """

        self._language = language

    @property
    def suggestions(self):
        """Gets the suggestions of this FrontendSettings.

        Whether submitting suggestions is enabled.

        :return: The suggestions of this FrontendSettings.
        :rtype: bool
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this FrontendSettings.

        Whether submitting suggestions is enabled.

        :param suggestions: The suggestions of this FrontendSettings.
        :type suggestions: bool
        """

        self._suggestions = suggestions

    @property
    def supported_files_format(self):
        """Gets the supported_files_format of this FrontendSettings.

        Supported files format

        :return: The supported_files_format of this FrontendSettings.
        :rtype: List[str]
        """
        return self._supported_files_format

    @supported_files_format.setter
    def supported_files_format(self, supported_files_format):
        """Sets the supported_files_format of this FrontendSettings.

        Supported files format

        :param supported_files_format: The supported_files_format of this FrontendSettings.
        :type supported_files_format: List[str]
        """

        self._supported_files_format = supported_files_format
