# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, language: str=None):
        """DetectionsInner - a model defined in OpenAPI

        :param confidence: The confidence of this DetectionsInner.
        :param language: The language of this DetectionsInner.
        """
        self.openapi_types = {
            'confidence': float,
            'language': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'language': 'language'
        }

        self._confidence = confidence
        self._language = language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The detections_inner of this DetectionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this DetectionsInner.

        Confidence value

        :return: The confidence of this DetectionsInner.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DetectionsInner.

        Confidence value

        :param confidence: The confidence of this DetectionsInner.
        :type confidence: float
        """
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def language(self):
        """Gets the language of this DetectionsInner.

        Language code

        :return: The language of this DetectionsInner.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DetectionsInner.

        Language code

        :param language: The language of this DetectionsInner.
        :type language: str
        """

        self._language = language
