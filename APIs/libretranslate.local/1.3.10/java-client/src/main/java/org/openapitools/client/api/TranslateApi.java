/*
 * LibreTranslate
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DetectionsInner;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ErrorSlowDown;
import org.openapitools.client.model.LanguagesInner;
import org.openapitools.client.model.Translate;
import org.openapitools.client.model.TranslateFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranslateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TranslateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranslateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for detectPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Detection error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/detect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return detectPostCall(_callback);

    }

    /**
     * Detect the language of a single text
     * 
     * @return List&lt;DetectionsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Detection error </td><td>  -  </td></tr>
     </table>
     */
    public List<DetectionsInner> detectPost() throws ApiException {
        ApiResponse<List<DetectionsInner>> localVarResp = detectPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Detect the language of a single text
     * 
     * @return ApiResponse&lt;List&lt;DetectionsInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Detection error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DetectionsInner>> detectPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = detectPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DetectionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect the language of a single text (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Detection error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectPostAsync(final ApiCallback<List<DetectionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DetectionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of languages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return languagesGetCall(_callback);

    }

    /**
     * Retrieve list of supported languages
     * 
     * @return List&lt;LanguagesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of languages </td><td>  -  </td></tr>
     </table>
     */
    public List<LanguagesInner> languagesGet() throws ApiException {
        ApiResponse<List<LanguagesInner>> localVarResp = languagesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve list of supported languages
     * 
     * @return ApiResponse&lt;List&lt;LanguagesInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of languages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LanguagesInner>> languagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = languagesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<LanguagesInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve list of supported languages (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of languages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetAsync(final ApiCallback<List<LanguagesInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<LanguagesInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateFilePost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateFilePostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate_file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateFilePostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return translateFilePostCall(_callback);

    }

    /**
     * Translate file from a language to another
     * 
     * @return TranslateFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public TranslateFile translateFilePost() throws ApiException {
        ApiResponse<TranslateFile> localVarResp = translateFilePostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Translate file from a language to another
     * 
     * @return ApiResponse&lt;TranslateFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslateFile> translateFilePostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = translateFilePostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TranslateFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate file from a language to another (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateFilePostAsync(final ApiCallback<TranslateFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateFilePostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TranslateFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translatePost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated text </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translatePostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translatePostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return translatePostCall(_callback);

    }

    /**
     * Translate text from a language to another
     * 
     * @return Translate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated text </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public Translate translatePost() throws ApiException {
        ApiResponse<Translate> localVarResp = translatePostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Translate text from a language to another
     * 
     * @return ApiResponse&lt;Translate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated text </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Translate> translatePostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = translatePostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Translate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate text from a language to another (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translated text </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Banned </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Slow down </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Translation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translatePostAsync(final ApiCallback<Translate> _callback) throws ApiException {

        okhttp3.Call localVarCall = translatePostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Translate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
