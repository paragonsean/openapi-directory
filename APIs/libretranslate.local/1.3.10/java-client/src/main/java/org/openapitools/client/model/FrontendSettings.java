/*
 * LibreTranslate
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FrontendSettingsLanguage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FrontendSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:37.875444-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FrontendSettings {
  public static final String SERIALIZED_NAME_API_KEYS = "apiKeys";
  @SerializedName(SERIALIZED_NAME_API_KEYS)
  private Boolean apiKeys;

  public static final String SERIALIZED_NAME_CHAR_LIMIT = "charLimit";
  @SerializedName(SERIALIZED_NAME_CHAR_LIMIT)
  private Integer charLimit;

  public static final String SERIALIZED_NAME_FRONTEND_TIMEOUT = "frontendTimeout";
  @SerializedName(SERIALIZED_NAME_FRONTEND_TIMEOUT)
  private Integer frontendTimeout;

  public static final String SERIALIZED_NAME_KEY_REQUIRED = "keyRequired";
  @SerializedName(SERIALIZED_NAME_KEY_REQUIRED)
  private Boolean keyRequired;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private FrontendSettingsLanguage language;

  public static final String SERIALIZED_NAME_SUGGESTIONS = "suggestions";
  @SerializedName(SERIALIZED_NAME_SUGGESTIONS)
  private Boolean suggestions;

  public static final String SERIALIZED_NAME_SUPPORTED_FILES_FORMAT = "supportedFilesFormat";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_FILES_FORMAT)
  private List<String> supportedFilesFormat = new ArrayList<>();

  public FrontendSettings() {
  }

  public FrontendSettings apiKeys(Boolean apiKeys) {
    this.apiKeys = apiKeys;
    return this;
  }

  /**
   * Whether the API key database is enabled.
   * @return apiKeys
   */
  @javax.annotation.Nullable
  public Boolean getApiKeys() {
    return apiKeys;
  }

  public void setApiKeys(Boolean apiKeys) {
    this.apiKeys = apiKeys;
  }


  public FrontendSettings charLimit(Integer charLimit) {
    this.charLimit = charLimit;
    return this;
  }

  /**
   * Character input limit for this language (-1 indicates no limit)
   * @return charLimit
   */
  @javax.annotation.Nullable
  public Integer getCharLimit() {
    return charLimit;
  }

  public void setCharLimit(Integer charLimit) {
    this.charLimit = charLimit;
  }


  public FrontendSettings frontendTimeout(Integer frontendTimeout) {
    this.frontendTimeout = frontendTimeout;
    return this;
  }

  /**
   * Frontend translation timeout
   * @return frontendTimeout
   */
  @javax.annotation.Nullable
  public Integer getFrontendTimeout() {
    return frontendTimeout;
  }

  public void setFrontendTimeout(Integer frontendTimeout) {
    this.frontendTimeout = frontendTimeout;
  }


  public FrontendSettings keyRequired(Boolean keyRequired) {
    this.keyRequired = keyRequired;
    return this;
  }

  /**
   * Whether an API key is required.
   * @return keyRequired
   */
  @javax.annotation.Nullable
  public Boolean getKeyRequired() {
    return keyRequired;
  }

  public void setKeyRequired(Boolean keyRequired) {
    this.keyRequired = keyRequired;
  }


  public FrontendSettings language(FrontendSettingsLanguage language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public FrontendSettingsLanguage getLanguage() {
    return language;
  }

  public void setLanguage(FrontendSettingsLanguage language) {
    this.language = language;
  }


  public FrontendSettings suggestions(Boolean suggestions) {
    this.suggestions = suggestions;
    return this;
  }

  /**
   * Whether submitting suggestions is enabled.
   * @return suggestions
   */
  @javax.annotation.Nullable
  public Boolean getSuggestions() {
    return suggestions;
  }

  public void setSuggestions(Boolean suggestions) {
    this.suggestions = suggestions;
  }


  public FrontendSettings supportedFilesFormat(List<String> supportedFilesFormat) {
    this.supportedFilesFormat = supportedFilesFormat;
    return this;
  }

  public FrontendSettings addSupportedFilesFormatItem(String supportedFilesFormatItem) {
    if (this.supportedFilesFormat == null) {
      this.supportedFilesFormat = new ArrayList<>();
    }
    this.supportedFilesFormat.add(supportedFilesFormatItem);
    return this;
  }

  /**
   * Supported files format
   * @return supportedFilesFormat
   */
  @javax.annotation.Nullable
  public List<String> getSupportedFilesFormat() {
    return supportedFilesFormat;
  }

  public void setSupportedFilesFormat(List<String> supportedFilesFormat) {
    this.supportedFilesFormat = supportedFilesFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrontendSettings frontendSettings = (FrontendSettings) o;
    return Objects.equals(this.apiKeys, frontendSettings.apiKeys) &&
        Objects.equals(this.charLimit, frontendSettings.charLimit) &&
        Objects.equals(this.frontendTimeout, frontendSettings.frontendTimeout) &&
        Objects.equals(this.keyRequired, frontendSettings.keyRequired) &&
        Objects.equals(this.language, frontendSettings.language) &&
        Objects.equals(this.suggestions, frontendSettings.suggestions) &&
        Objects.equals(this.supportedFilesFormat, frontendSettings.supportedFilesFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeys, charLimit, frontendTimeout, keyRequired, language, suggestions, supportedFilesFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrontendSettings {\n");
    sb.append("    apiKeys: ").append(toIndentedString(apiKeys)).append("\n");
    sb.append("    charLimit: ").append(toIndentedString(charLimit)).append("\n");
    sb.append("    frontendTimeout: ").append(toIndentedString(frontendTimeout)).append("\n");
    sb.append("    keyRequired: ").append(toIndentedString(keyRequired)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    suggestions: ").append(toIndentedString(suggestions)).append("\n");
    sb.append("    supportedFilesFormat: ").append(toIndentedString(supportedFilesFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKeys");
    openapiFields.add("charLimit");
    openapiFields.add("frontendTimeout");
    openapiFields.add("keyRequired");
    openapiFields.add("language");
    openapiFields.add("suggestions");
    openapiFields.add("supportedFilesFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FrontendSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FrontendSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FrontendSettings is not found in the empty JSON string", FrontendSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FrontendSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FrontendSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        FrontendSettingsLanguage.validateJsonElement(jsonObj.get("language"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedFilesFormat") != null && !jsonObj.get("supportedFilesFormat").isJsonNull() && !jsonObj.get("supportedFilesFormat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedFilesFormat` to be an array in the JSON string but got `%s`", jsonObj.get("supportedFilesFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FrontendSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FrontendSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FrontendSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FrontendSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FrontendSettings>() {
           @Override
           public void write(JsonWriter out, FrontendSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FrontendSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FrontendSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FrontendSettings
   * @throws IOException if the JSON string is invalid with respect to FrontendSettings
   */
  public static FrontendSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FrontendSettings.class);
  }

  /**
   * Convert an instance of FrontendSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

