/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import SandboxDriverAvailability from '../model/SandboxDriverAvailability';
import SandboxPrimetime from '../model/SandboxPrimetime';
import SandboxRideStatus from '../model/SandboxRideStatus';
import SandboxRideType from '../model/SandboxRideType';
import SandboxRideUpdate from '../model/SandboxRideUpdate';

/**
* Sandbox service.
* @module api/SandboxApi
* @version 1.0.0
*/
export default class SandboxApi {

    /**
    * Constructs a new SandboxApi. 
    * @alias module:api/SandboxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setPrimeTime operation.
     * @callback module:api/SandboxApi~setPrimeTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param {module:model/SandboxPrimetime} request Prime Time to be preset in the region surrounding the lat, lng
     * @param {module:api/SandboxApi~setPrimeTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPrimeTime(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setPrimeTime");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sandbox/primetime', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRideStatus operation.
     * @callback module:api/SandboxApi~setRideStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxRideUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param {String} id The ID of the ride
     * @param {module:model/SandboxRideStatus} request status to propagate the ride into
     * @param {module:api/SandboxApi~setRideStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxRideUpdate}
     */
    setRideStatus(id, request, callback) {
      let postBody = request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideStatus");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxRideUpdate;
      return this.apiClient.callApi(
        '/sandbox/rides/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRideTypeAvailability operation.
     * @callback module:api/SandboxApi~setRideTypeAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param {module:model/String} rideType 
     * @param {module:model/SandboxDriverAvailability} request Driver availability to be preset in the region surrounding the lat, lng
     * @param {module:api/SandboxApi~setRideTypeAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRideTypeAvailability(rideType, request, callback) {
      let postBody = request;
      // verify the required parameter 'rideType' is set
      if (rideType === undefined || rideType === null) {
        throw new Error("Missing the required parameter 'rideType' when calling setRideTypeAvailability");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideTypeAvailability");
      }

      let pathParams = {
        'ride_type': rideType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sandbox/ridetypes/{ride_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRideTypes operation.
     * @callback module:api/SandboxApi~setRideTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxRideType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param {module:model/SandboxRideType} request Ridetypes to be preset in the region surrounding the lat, lng
     * @param {module:api/SandboxApi~setRideTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxRideType}
     */
    setRideTypes(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxRideType;
      return this.apiClient.callApi(
        '/sandbox/ridetypes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
