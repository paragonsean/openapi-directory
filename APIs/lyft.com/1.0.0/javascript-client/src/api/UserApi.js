/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CancellationCostError from '../model/CancellationCostError';
import CancellationRequest from '../model/CancellationRequest';
import Location from '../model/Location';
import Profile from '../model/Profile';
import RatingRequest from '../model/RatingRequest';
import Ride from '../model/Ride';
import RideDetail from '../model/RideDetail';
import RideReceipt from '../model/RideReceipt';
import RideRequest from '../model/RideRequest';
import RideRequestError from '../model/RideRequestError';
import RidesResponse from '../model/RidesResponse';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRide operation.
     * @callback module:api/UserApi~cancelRideCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a ongoing requested ride
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     * @param {String} id The ID of the ride
     * @param {Object} opts Optional parameters
     * @param {module:model/CancellationRequest} [request] 
     * @param {module:api/UserApi~cancelRideCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRide(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['request'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRide");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rides/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfile operation.
     * @callback module:api/UserApi~getProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The user's general info
     * The v1 of this endpoint returns the user's ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     * @param {module:api/UserApi~getProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    getProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRide operation.
     * @callback module:api/UserApi~getRideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the ride detail of a given ride ID
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     * @param {String} id The ID of the ride
     * @param {module:api/UserApi~getRideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideDetail}
     */
    getRide(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRide");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RideDetail;
      return this.apiClient.callApi(
        '/rides/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRideReceipt operation.
     * @callback module:api/UserApi~getRideReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the receipt of the rides.
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     * @param {String} id The ID of the ride
     * @param {module:api/UserApi~getRideReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideReceipt}
     */
    getRideReceipt(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRideReceipt");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RideReceipt;
      return this.apiClient.callApi(
        '/rides/{id}/receipt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRides operation.
     * @callback module:api/UserApi~getRidesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RidesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List rides
     * Get a list of past & current rides for this passenger. 
     * @param {Date} startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 
     * @param {Object} opts Optional parameters
     * @param {Date} [endTime] Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 
     * @param {Number} [limit = 10)] The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results. 
     * @param {module:api/UserApi~getRidesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RidesResponse}
     */
    getRides(startTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getRides");
      }

      let pathParams = {
      };
      let queryParams = {
        'start_time': startTime,
        'end_time': opts['endTime'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RidesResponse;
      return this.apiClient.callApi(
        '/rides', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newRide operation.
     * @callback module:api/UserApi~newRideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a Lyft
     * Request a Lyft come pick you up at the given location. 
     * @param {module:model/Ride} request Ride request information
     * @param {module:api/UserApi~newRideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideRequest}
     */
    newRide(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling newRide");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RideRequest;
      return this.apiClient.callApi(
        '/rides', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRideDestination operation.
     * @callback module:api/UserApi~setRideDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the destination of the ride
     * Add or update the ride's destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     * @param {String} id The ID of the ride
     * @param {module:model/Location} request The coordinates and optional address of the destination
     * @param {module:api/UserApi~setRideDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    setRideDestination(id, request, callback) {
      let postBody = request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideDestination");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideDestination");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/rides/{id}/destination', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRideRating operation.
     * @callback module:api/UserApi~setRideRatingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the passenger's rating, feedback, and tip
     * Add the passenger's 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     * @param {String} id The ID of the ride
     * @param {module:model/RatingRequest} request The rating and optional feedback
     * @param {module:api/UserApi~setRideRatingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRideRating(id, request, callback) {
      let postBody = request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setRideRating");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setRideRating");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['User Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rides/{id}/rating', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
