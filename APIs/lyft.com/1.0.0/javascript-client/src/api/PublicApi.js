/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CostEstimateResponse from '../model/CostEstimateResponse';
import EtaEstimateResponse from '../model/EtaEstimateResponse';
import NearbyDriversResponse from '../model/NearbyDriversResponse';
import RideTypesResponse from '../model/RideTypesResponse';

/**
* Public service.
* @module api/PublicApi
* @version 1.0.0
*/
export default class PublicApi {

    /**
    * Constructs a new PublicApi. 
    * @alias module:api/PublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCost operation.
     * @callback module:api/PublicApi~getCostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CostEstimateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost estimates
     * Estimate the cost of taking a Lyft between two points. 
     * @param {Number} startLat Latitude of the starting location
     * @param {Number} startLng Longitude of the starting location
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [rideType] ID of a ride type
     * @param {Number} [endLat] Latitude of the ending location
     * @param {Number} [endLng] Longitude of the ending location
     * @param {module:api/PublicApi~getCostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CostEstimateResponse}
     */
    getCost(startLat, startLng, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startLat' is set
      if (startLat === undefined || startLat === null) {
        throw new Error("Missing the required parameter 'startLat' when calling getCost");
      }
      // verify the required parameter 'startLng' is set
      if (startLng === undefined || startLng === null) {
        throw new Error("Missing the required parameter 'startLng' when calling getCost");
      }

      let pathParams = {
      };
      let queryParams = {
        'ride_type': opts['rideType'],
        'start_lat': startLat,
        'start_lng': startLng,
        'end_lat': opts['endLat'],
        'end_lng': opts['endLng']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CostEstimateResponse;
      return this.apiClient.callApi(
        '/cost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDrivers operation.
     * @callback module:api/PublicApi~getDriversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NearbyDriversResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available drivers nearby
     * The drivers endpoint returns a list of nearby drivers' lat and lng at a given location. 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {module:api/PublicApi~getDriversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NearbyDriversResponse}
     */
    getDrivers(lat, lng, callback) {
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getDrivers");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getDrivers");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NearbyDriversResponse;
      return this.apiClient.callApi(
        '/drivers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getETA operation.
     * @callback module:api/PublicApi~getETACallback
     * @param {String} error Error message, if any.
     * @param {module:model/EtaEstimateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pickup ETAs
     * The ETA endpoint lets you know how quickly a Lyft driver can come get you 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {Object} opts Optional parameters
     * @param {Number} [destinationLat] Latitude of destination location
     * @param {Number} [destinationLng] Longitude of destination location
     * @param {module:model/String} [rideType] ID of a ride type
     * @param {module:api/PublicApi~getETACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EtaEstimateResponse}
     */
    getETA(lat, lng, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getETA");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getETA");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'destination_lat': opts['destinationLat'],
        'destination_lng': opts['destinationLng'],
        'ride_type': opts['rideType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EtaEstimateResponse;
      return this.apiClient.callApi(
        '/eta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRideTypes operation.
     * @callback module:api/PublicApi~getRideTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Types of rides
     * The ride types endpoint returns information about what kinds of Lyft rides you can request at a given location. 
     * @param {Number} lat Latitude of a location
     * @param {Number} lng Longitude of a location
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [rideType] ID of a ride type
     * @param {module:api/PublicApi~getRideTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideTypesResponse}
     */
    getRideTypes(lat, lng, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getRideTypes");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getRideTypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng,
        'ride_type': opts['rideType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Client Authentication', 'User Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RideTypesResponse;
      return this.apiClient.callApi(
        '/ridetypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
