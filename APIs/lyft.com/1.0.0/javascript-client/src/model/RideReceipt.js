/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Charge from './Charge';
import Cost from './Cost';
import LineItem from './LineItem';
import RideProfileEnum from './RideProfileEnum';

/**
 * The RideReceipt model module.
 * @module model/RideReceipt
 * @version 1.0.0
 */
class RideReceipt {
    /**
     * Constructs a new <code>RideReceipt</code>.
     * Receipt information of a processed ride.
     * @alias module:model/RideReceipt
     */
    constructor() { 
        
        RideReceipt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RideReceipt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RideReceipt} obj Optional instance to populate.
     * @return {module:model/RideReceipt} The populated <code>RideReceipt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RideReceipt();

            if (data.hasOwnProperty('charges')) {
                obj['charges'] = ApiClient.convertToType(data['charges'], [Charge]);
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], [LineItem]);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], Cost);
            }
            if (data.hasOwnProperty('requested_at')) {
                obj['requested_at'] = ApiClient.convertToType(data['requested_at'], 'Date');
            }
            if (data.hasOwnProperty('ride_id')) {
                obj['ride_id'] = ApiClient.convertToType(data['ride_id'], 'String');
            }
            if (data.hasOwnProperty('ride_profile')) {
                obj['ride_profile'] = ApiClient.convertToType(data['ride_profile'], RideProfileEnum);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RideReceipt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RideReceipt</code>.
     */
    static validateJSON(data) {
        if (data['charges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['charges'])) {
                throw new Error("Expected the field `charges` to be an array in the JSON data but got " + data['charges']);
            }
            // validate the optional field `charges` (array)
            for (const item of data['charges']) {
                Charge.validateJSON(item);
            };
        }
        if (data['line_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['line_items'])) {
                throw new Error("Expected the field `line_items` to be an array in the JSON data but got " + data['line_items']);
            }
            // validate the optional field `line_items` (array)
            for (const item of data['line_items']) {
                LineItem.validateJSON(item);
            };
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Cost.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['ride_id'] && !(typeof data['ride_id'] === 'string' || data['ride_id'] instanceof String)) {
            throw new Error("Expected the field `ride_id` to be a primitive type in the JSON string but got " + data['ride_id']);
        }

        return true;
    }


}



/**
 * The break down of charge method
 * @member {Array.<module:model/Charge>} charges
 */
RideReceipt.prototype['charges'] = undefined;

/**
 * The break down of line items
 * @member {Array.<module:model/LineItem>} line_items
 */
RideReceipt.prototype['line_items'] = undefined;

/**
 * The total price for the current ride
 * @member {module:model/Cost} price
 */
RideReceipt.prototype['price'] = undefined;

/**
 * The ride requested timestamp in date and time
 * @member {Date} requested_at
 */
RideReceipt.prototype['requested_at'] = undefined;

/**
 * The unique ID of this ride
 * @member {String} ride_id
 */
RideReceipt.prototype['ride_id'] = undefined;

/**
 * Indicates whether the ride was requested from the business profile or personal profile of the user. 
 * @member {module:model/RideProfileEnum} ride_profile
 */
RideReceipt.prototype['ride_profile'] = undefined;






export default RideReceipt;

