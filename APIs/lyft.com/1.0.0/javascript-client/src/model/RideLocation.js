/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';

/**
 * The RideLocation model module.
 * @module model/RideLocation
 * @version 1.0.0
 */
class RideLocation {
    /**
     * Constructs a new <code>RideLocation</code>.
     * @alias module:model/RideLocation
     * @implements module:model/Location
     * @param lat {Number} The latitude component of a location
     * @param lng {Number} The longitude component of a location
     */
    constructor(lat, lng) { 
        Location.initialize(this, lat, lng);
        RideLocation.initialize(this, lat, lng);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lat, lng) { 
        obj['lat'] = lat;
        obj['lng'] = lng;
    }

    /**
     * Constructs a <code>RideLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RideLocation} obj Optional instance to populate.
     * @return {module:model/RideLocation} The populated <code>RideLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RideLocation();
            Location.constructFromObject(data, obj);

            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('eta_seconds')) {
                obj['eta_seconds'] = ApiClient.convertToType(data['eta_seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RideLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RideLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RideLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }

        return true;
    }


}

RideLocation.RequiredProperties = ["lat", "lng"];

/**
 * The latitude component of a location
 * @member {Number} lat
 */
RideLocation.prototype['lat'] = undefined;

/**
 * The longitude component of a location
 * @member {Number} lng
 */
RideLocation.prototype['lng'] = undefined;

/**
 * A human readable address at/near the given location
 * @member {String} address
 */
RideLocation.prototype['address'] = undefined;

/**
 * Estimated seconds for a driver to pickup or reach destination based on ride status
 * @member {Number} eta_seconds
 */
RideLocation.prototype['eta_seconds'] = undefined;


// Implement Location interface:
/**
 * The latitude component of a location
 * @member {Number} lat
 */
Location.prototype['lat'] = undefined;
/**
 * The longitude component of a location
 * @member {Number} lng
 */
Location.prototype['lng'] = undefined;
/**
 * A human readable address at/near the given location
 * @member {String} address
 */
Location.prototype['address'] = undefined;




export default RideLocation;

