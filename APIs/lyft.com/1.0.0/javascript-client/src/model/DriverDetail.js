/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DriverDetail model module.
 * @module model/DriverDetail
 * @version 1.0.0
 */
class DriverDetail {
    /**
     * Constructs a new <code>DriverDetail</code>.
     * @alias module:model/DriverDetail
     * @param firstName {String} The driver's first name
     * @param imageUrl {String} The driver's image url
     * @param phoneNumber {String} The driver's contact phone number. Must be E.164 formatted. 
     * @param rating {String} The driver's rating based in 0-5 scale
     * @param userId {String} The driver's id
     */
    constructor(firstName, imageUrl, phoneNumber, rating, userId) { 
        
        DriverDetail.initialize(this, firstName, imageUrl, phoneNumber, rating, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, imageUrl, phoneNumber, rating, userId) { 
        obj['first_name'] = firstName;
        obj['image_url'] = imageUrl;
        obj['phone_number'] = phoneNumber;
        obj['rating'] = rating;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>DriverDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriverDetail} obj Optional instance to populate.
     * @return {module:model/DriverDetail} The populated <code>DriverDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriverDetail();

            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriverDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriverDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DriverDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

DriverDetail.RequiredProperties = ["first_name", "image_url", "phone_number", "rating", "user_id"];

/**
 * The driver's first name
 * @member {String} first_name
 */
DriverDetail.prototype['first_name'] = undefined;

/**
 * The driver's image url
 * @member {String} image_url
 */
DriverDetail.prototype['image_url'] = undefined;

/**
 * The driver's contact phone number. Must be E.164 formatted. 
 * @member {String} phone_number
 */
DriverDetail.prototype['phone_number'] = undefined;

/**
 * The driver's rating based in 0-5 scale
 * @member {String} rating
 */
DriverDetail.prototype['rating'] = undefined;

/**
 * The driver's id
 * @member {String} user_id
 */
DriverDetail.prototype['user_id'] = undefined;






export default DriverDetail;

