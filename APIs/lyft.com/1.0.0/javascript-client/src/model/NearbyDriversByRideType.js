/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NearbyDriver from './NearbyDriver';

/**
 * The NearbyDriversByRideType model module.
 * @module model/NearbyDriversByRideType
 * @version 1.0.0
 */
class NearbyDriversByRideType {
    /**
     * Constructs a new <code>NearbyDriversByRideType</code>.
     * @alias module:model/NearbyDriversByRideType
     */
    constructor() { 
        
        NearbyDriversByRideType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NearbyDriversByRideType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NearbyDriversByRideType} obj Optional instance to populate.
     * @return {module:model/NearbyDriversByRideType} The populated <code>NearbyDriversByRideType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NearbyDriversByRideType();

            if (data.hasOwnProperty('drivers')) {
                obj['drivers'] = ApiClient.convertToType(data['drivers'], [NearbyDriver]);
            }
            if (data.hasOwnProperty('ride_type')) {
                obj['ride_type'] = ApiClient.convertToType(data['ride_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NearbyDriversByRideType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NearbyDriversByRideType</code>.
     */
    static validateJSON(data) {
        if (data['drivers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drivers'])) {
                throw new Error("Expected the field `drivers` to be an array in the JSON data but got " + data['drivers']);
            }
            // validate the optional field `drivers` (array)
            for (const item of data['drivers']) {
                NearbyDriver.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ride_type'] && !(typeof data['ride_type'] === 'string' || data['ride_type'] instanceof String)) {
            throw new Error("Expected the field `ride_type` to be a primitive type in the JSON string but got " + data['ride_type']);
        }

        return true;
    }


}



/**
 * list of nearby drivers group by ride type sorted by eta
 * @member {Array.<module:model/NearbyDriver>} drivers
 */
NearbyDriversByRideType.prototype['drivers'] = undefined;

/**
 * driver's ride type. if driver is eligable for several ride types, he will be duplicated.
 * @member {String} ride_type
 */
NearbyDriversByRideType.prototype['ride_type'] = undefined;






export default NearbyDriversByRideType;

