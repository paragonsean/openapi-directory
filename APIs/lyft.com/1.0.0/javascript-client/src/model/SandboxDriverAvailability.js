/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SandboxDriverAvailability model module.
 * @module model/SandboxDriverAvailability
 * @version 1.0.0
 */
class SandboxDriverAvailability {
    /**
     * Constructs a new <code>SandboxDriverAvailability</code>.
     * @alias module:model/SandboxDriverAvailability
     * @param driverAvailability {Boolean} The availability of driver in a region
     * @param lat {Number} The latitude component of a location
     * @param lng {Number} The longitude component of a location
     */
    constructor(driverAvailability, lat, lng) { 
        
        SandboxDriverAvailability.initialize(this, driverAvailability, lat, lng);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, driverAvailability, lat, lng) { 
        obj['driver_availability'] = driverAvailability;
        obj['lat'] = lat;
        obj['lng'] = lng;
    }

    /**
     * Constructs a <code>SandboxDriverAvailability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SandboxDriverAvailability} obj Optional instance to populate.
     * @return {module:model/SandboxDriverAvailability} The populated <code>SandboxDriverAvailability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SandboxDriverAvailability();

            if (data.hasOwnProperty('driver_availability')) {
                obj['driver_availability'] = ApiClient.convertToType(data['driver_availability'], 'Boolean');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SandboxDriverAvailability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SandboxDriverAvailability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SandboxDriverAvailability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

SandboxDriverAvailability.RequiredProperties = ["driver_availability", "lat", "lng"];

/**
 * The availability of driver in a region
 * @member {Boolean} driver_availability
 */
SandboxDriverAvailability.prototype['driver_availability'] = undefined;

/**
 * The latitude component of a location
 * @member {Number} lat
 */
SandboxDriverAvailability.prototype['lat'] = undefined;

/**
 * The longitude component of a location
 * @member {Number} lng
 */
SandboxDriverAvailability.prototype['lng'] = undefined;






export default SandboxDriverAvailability;

