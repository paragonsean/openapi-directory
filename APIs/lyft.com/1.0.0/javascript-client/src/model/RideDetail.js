/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CancellationCost from './CancellationCost';
import Cost from './Cost';
import CurrentRideLocation from './CurrentRideLocation';
import DriverDetail from './DriverDetail';
import LineItem from './LineItem';
import PassengerDetail from './PassengerDetail';
import PickupDropoffLocation from './PickupDropoffLocation';
import RideLocation from './RideLocation';
import RideProfileEnum from './RideProfileEnum';
import RideStatusEnum from './RideStatusEnum';
import RideTypeEnumWithOther from './RideTypeEnumWithOther';
import VehicleDetail from './VehicleDetail';

/**
 * The RideDetail model module.
 * @module model/RideDetail
 * @version 1.0.0
 */
class RideDetail {
    /**
     * Constructs a new <code>RideDetail</code>.
     * Detail information about a ride
     * @alias module:model/RideDetail
     */
    constructor() { 
        
        RideDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RideDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RideDetail} obj Optional instance to populate.
     * @return {module:model/RideDetail} The populated <code>RideDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RideDetail();

            if (data.hasOwnProperty('beacon_color')) {
                obj['beacon_color'] = ApiClient.convertToType(data['beacon_color'], 'String');
            }
            if (data.hasOwnProperty('can_cancel')) {
                obj['can_cancel'] = ApiClient.convertToType(data['can_cancel'], ['String']);
            }
            if (data.hasOwnProperty('canceled_by')) {
                obj['canceled_by'] = ApiClient.convertToType(data['canceled_by'], 'String');
            }
            if (data.hasOwnProperty('cancellation_price')) {
                obj['cancellation_price'] = ApiClient.convertToType(data['cancellation_price'], CancellationCost);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], RideLocation);
            }
            if (data.hasOwnProperty('distance_miles')) {
                obj['distance_miles'] = ApiClient.convertToType(data['distance_miles'], 'Number');
            }
            if (data.hasOwnProperty('driver')) {
                obj['driver'] = DriverDetail.constructFromObject(data['driver']);
            }
            if (data.hasOwnProperty('dropoff')) {
                obj['dropoff'] = ApiClient.convertToType(data['dropoff'], PickupDropoffLocation);
            }
            if (data.hasOwnProperty('duration_seconds')) {
                obj['duration_seconds'] = ApiClient.convertToType(data['duration_seconds'], 'Number');
            }
            if (data.hasOwnProperty('feedback')) {
                obj['feedback'] = ApiClient.convertToType(data['feedback'], 'String');
            }
            if (data.hasOwnProperty('generated_at')) {
                obj['generated_at'] = ApiClient.convertToType(data['generated_at'], 'Date');
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], [LineItem]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], CurrentRideLocation);
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], RideLocation);
            }
            if (data.hasOwnProperty('passenger')) {
                obj['passenger'] = PassengerDetail.constructFromObject(data['passenger']);
            }
            if (data.hasOwnProperty('pickup')) {
                obj['pickup'] = ApiClient.convertToType(data['pickup'], PickupDropoffLocation);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], Cost);
            }
            if (data.hasOwnProperty('pricing_details_url')) {
                obj['pricing_details_url'] = ApiClient.convertToType(data['pricing_details_url'], 'String');
            }
            if (data.hasOwnProperty('primetime_percentage')) {
                obj['primetime_percentage'] = ApiClient.convertToType(data['primetime_percentage'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('requested_at')) {
                obj['requested_at'] = ApiClient.convertToType(data['requested_at'], 'Date');
            }
            if (data.hasOwnProperty('ride_id')) {
                obj['ride_id'] = ApiClient.convertToType(data['ride_id'], 'String');
            }
            if (data.hasOwnProperty('ride_profile')) {
                obj['ride_profile'] = ApiClient.convertToType(data['ride_profile'], RideProfileEnum);
            }
            if (data.hasOwnProperty('ride_type')) {
                obj['ride_type'] = RideTypeEnumWithOther.constructFromObject(data['ride_type']);
            }
            if (data.hasOwnProperty('route_url')) {
                obj['route_url'] = ApiClient.convertToType(data['route_url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = RideStatusEnum.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('vehicle')) {
                obj['vehicle'] = VehicleDetail.constructFromObject(data['vehicle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RideDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RideDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['beacon_color'] && !(typeof data['beacon_color'] === 'string' || data['beacon_color'] instanceof String)) {
            throw new Error("Expected the field `beacon_color` to be a primitive type in the JSON string but got " + data['beacon_color']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['can_cancel'])) {
            throw new Error("Expected the field `can_cancel` to be an array in the JSON data but got " + data['can_cancel']);
        }
        // ensure the json data is a string
        if (data['canceled_by'] && !(typeof data['canceled_by'] === 'string' || data['canceled_by'] instanceof String)) {
            throw new Error("Expected the field `canceled_by` to be a primitive type in the JSON string but got " + data['canceled_by']);
        }
        // validate the optional field `cancellation_price`
        if (data['cancellation_price']) { // data not null
          CancellationCost.validateJSON(data['cancellation_price']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          RideLocation.validateJSON(data['destination']);
        }
        // validate the optional field `driver`
        if (data['driver']) { // data not null
          DriverDetail.validateJSON(data['driver']);
        }
        // validate the optional field `dropoff`
        if (data['dropoff']) { // data not null
          PickupDropoffLocation.validateJSON(data['dropoff']);
        }
        // ensure the json data is a string
        if (data['feedback'] && !(typeof data['feedback'] === 'string' || data['feedback'] instanceof String)) {
            throw new Error("Expected the field `feedback` to be a primitive type in the JSON string but got " + data['feedback']);
        }
        if (data['line_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['line_items'])) {
                throw new Error("Expected the field `line_items` to be an array in the JSON data but got " + data['line_items']);
            }
            // validate the optional field `line_items` (array)
            for (const item of data['line_items']) {
                LineItem.validateJSON(item);
            };
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          CurrentRideLocation.validateJSON(data['location']);
        }
        // validate the optional field `origin`
        if (data['origin']) { // data not null
          RideLocation.validateJSON(data['origin']);
        }
        // validate the optional field `passenger`
        if (data['passenger']) { // data not null
          PassengerDetail.validateJSON(data['passenger']);
        }
        // validate the optional field `pickup`
        if (data['pickup']) { // data not null
          PickupDropoffLocation.validateJSON(data['pickup']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Cost.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['pricing_details_url'] && !(typeof data['pricing_details_url'] === 'string' || data['pricing_details_url'] instanceof String)) {
            throw new Error("Expected the field `pricing_details_url` to be a primitive type in the JSON string but got " + data['pricing_details_url']);
        }
        // ensure the json data is a string
        if (data['primetime_percentage'] && !(typeof data['primetime_percentage'] === 'string' || data['primetime_percentage'] instanceof String)) {
            throw new Error("Expected the field `primetime_percentage` to be a primitive type in the JSON string but got " + data['primetime_percentage']);
        }
        // ensure the json data is a string
        if (data['ride_id'] && !(typeof data['ride_id'] === 'string' || data['ride_id'] instanceof String)) {
            throw new Error("Expected the field `ride_id` to be a primitive type in the JSON string but got " + data['ride_id']);
        }
        // ensure the json data is a string
        if (data['route_url'] && !(typeof data['route_url'] === 'string' || data['route_url'] instanceof String)) {
            throw new Error("Expected the field `route_url` to be a primitive type in the JSON string but got " + data['route_url']);
        }
        // validate the optional field `vehicle`
        if (data['vehicle']) { // data not null
          VehicleDetail.validateJSON(data['vehicle']);
        }

        return true;
    }


}



/**
 * Hex color code of the driver AMP device.
 * @member {String} beacon_color
 */
RideDetail.prototype['beacon_color'] = undefined;

/**
 * @member {Array.<module:model/RideDetail.CanCancelEnum>} can_cancel
 */
RideDetail.prototype['can_cancel'] = undefined;

/**
 * The role of user who canceled the ride (if applicable)
 * @member {String} canceled_by
 */
RideDetail.prototype['canceled_by'] = undefined;

/**
 * The cost of cancellation if there would be a penalty
 * @member {module:model/CancellationCost} cancellation_price
 */
RideDetail.prototype['cancellation_price'] = undefined;

/**
 * The *requested* location for passenger drop off
 * @member {module:model/RideLocation} destination
 */
RideDetail.prototype['destination'] = undefined;

/**
 * The distance, in miles, that this ride traveled. This field is only present after drop-off
 * @member {Number} distance_miles
 */
RideDetail.prototype['distance_miles'] = undefined;

/**
 * @member {module:model/DriverDetail} driver
 */
RideDetail.prototype['driver'] = undefined;

/**
 * The *actual* location of passenger drop off
 * @member {module:model/PickupDropoffLocation} dropoff
 */
RideDetail.prototype['dropoff'] = undefined;

/**
 * Duration of the ride in seconds from pickup to drop-off. This field is only present after drop-off.
 * @member {Number} duration_seconds
 */
RideDetail.prototype['duration_seconds'] = undefined;

/**
 * The written feedback the user left for this ride
 * @member {String} feedback
 */
RideDetail.prototype['feedback'] = undefined;

/**
 * The request timestamp in date and time
 * @member {Date} generated_at
 */
RideDetail.prototype['generated_at'] = undefined;

/**
 * The break down of cost
 * @member {Array.<module:model/LineItem>} line_items
 */
RideDetail.prototype['line_items'] = undefined;

/**
 * The *current* location info of the ride
 * @member {module:model/CurrentRideLocation} location
 */
RideDetail.prototype['location'] = undefined;

/**
 * The *requested* location for passenger pickup
 * @member {module:model/RideLocation} origin
 */
RideDetail.prototype['origin'] = undefined;

/**
 * @member {module:model/PassengerDetail} passenger
 */
RideDetail.prototype['passenger'] = undefined;

/**
 * The *actual* location of passenger pickup
 * @member {module:model/PickupDropoffLocation} pickup
 */
RideDetail.prototype['pickup'] = undefined;

/**
 * The total price for the current ride
 * @member {module:model/Cost} price
 */
RideDetail.prototype['price'] = undefined;

/**
 * The web view showing the pricing structure for the geographic area where the ride was taken 
 * @member {String} pricing_details_url
 */
RideDetail.prototype['pricing_details_url'] = undefined;

/**
 * The Prime Time percentage applied to the base price
 * @member {String} primetime_percentage
 */
RideDetail.prototype['primetime_percentage'] = undefined;

/**
 * The rating the user left for this ride, from 1 to 5
 * @member {Number} rating
 */
RideDetail.prototype['rating'] = undefined;

/**
 * The ride requested timestamp in date and time
 * @member {Date} requested_at
 */
RideDetail.prototype['requested_at'] = undefined;

/**
 * The unique ID of this ride
 * @member {String} ride_id
 */
RideDetail.prototype['ride_id'] = undefined;

/**
 * Indicates whether the ride was requested from the business profile or personal profile of the user. 
 * @member {module:model/RideProfileEnum} ride_profile
 */
RideDetail.prototype['ride_profile'] = undefined;

/**
 * @member {module:model/RideTypeEnumWithOther} ride_type
 */
RideDetail.prototype['ride_type'] = undefined;

/**
 * The web view showing the passenger, driver, and route for this ride. This field will only be present for rides created through this API, or that have been shared through the \"Share my Route\" feature 
 * @member {String} route_url
 */
RideDetail.prototype['route_url'] = undefined;

/**
 * @member {module:model/RideStatusEnum} status
 */
RideDetail.prototype['status'] = undefined;

/**
 * @member {module:model/VehicleDetail} vehicle
 */
RideDetail.prototype['vehicle'] = undefined;





/**
 * Allowed values for the <code>canCancel</code> property.
 * @enum {String}
 * @readonly
 */
RideDetail['CanCancelEnum'] = {

    /**
     * value: "driver"
     * @const
     */
    "driver": "driver",

    /**
     * value: "passenger"
     * @const
     */
    "passenger": "passenger",

    /**
     * value: "dispatcher"
     * @const
     */
    "dispatcher": "dispatcher"
};



export default RideDetail;

