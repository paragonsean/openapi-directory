/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VehicleDetail model module.
 * @module model/VehicleDetail
 * @version 1.0.0
 */
class VehicleDetail {
    /**
     * Constructs a new <code>VehicleDetail</code>.
     * @alias module:model/VehicleDetail
     * @param color {String} The vehicle's color
     * @param imageUrl {String} The vehicle's image url
     * @param licensePlate {String} The vehicle's license plate
     * @param licensePlateState {String} The vehicle's license plate state
     * @param make {String} The vehicle's maker
     * @param model {String} The vehicle's model
     * @param year {Number} The vehicle's model year
     */
    constructor(color, imageUrl, licensePlate, licensePlateState, make, model, year) { 
        
        VehicleDetail.initialize(this, color, imageUrl, licensePlate, licensePlateState, make, model, year);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color, imageUrl, licensePlate, licensePlateState, make, model, year) { 
        obj['color'] = color;
        obj['image_url'] = imageUrl;
        obj['license_plate'] = licensePlate;
        obj['license_plate_state'] = licensePlateState;
        obj['make'] = make;
        obj['model'] = model;
        obj['year'] = year;
    }

    /**
     * Constructs a <code>VehicleDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VehicleDetail} obj Optional instance to populate.
     * @return {module:model/VehicleDetail} The populated <code>VehicleDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VehicleDetail();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('license_plate')) {
                obj['license_plate'] = ApiClient.convertToType(data['license_plate'], 'String');
            }
            if (data.hasOwnProperty('license_plate_state')) {
                obj['license_plate_state'] = ApiClient.convertToType(data['license_plate_state'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VehicleDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VehicleDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VehicleDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['license_plate'] && !(typeof data['license_plate'] === 'string' || data['license_plate'] instanceof String)) {
            throw new Error("Expected the field `license_plate` to be a primitive type in the JSON string but got " + data['license_plate']);
        }
        // ensure the json data is a string
        if (data['license_plate_state'] && !(typeof data['license_plate_state'] === 'string' || data['license_plate_state'] instanceof String)) {
            throw new Error("Expected the field `license_plate_state` to be a primitive type in the JSON string but got " + data['license_plate_state']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }

        return true;
    }


}

VehicleDetail.RequiredProperties = ["color", "image_url", "license_plate", "license_plate_state", "make", "model", "year"];

/**
 * The vehicle's color
 * @member {String} color
 */
VehicleDetail.prototype['color'] = undefined;

/**
 * The vehicle's image url
 * @member {String} image_url
 */
VehicleDetail.prototype['image_url'] = undefined;

/**
 * The vehicle's license plate
 * @member {String} license_plate
 */
VehicleDetail.prototype['license_plate'] = undefined;

/**
 * The vehicle's license plate state
 * @member {String} license_plate_state
 */
VehicleDetail.prototype['license_plate_state'] = undefined;

/**
 * The vehicle's maker
 * @member {String} make
 */
VehicleDetail.prototype['make'] = undefined;

/**
 * The vehicle's model
 * @member {String} model
 */
VehicleDetail.prototype['model'] = undefined;

/**
 * The vehicle's model year
 * @member {Number} year
 */
VehicleDetail.prototype['year'] = undefined;






export default VehicleDetail;

