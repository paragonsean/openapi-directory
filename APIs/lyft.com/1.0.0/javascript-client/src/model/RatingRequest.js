/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TipParams from './TipParams';

/**
 * The RatingRequest model module.
 * @module model/RatingRequest
 * @version 1.0.0
 */
class RatingRequest {
    /**
     * Constructs a new <code>RatingRequest</code>.
     * Rating and optional feedback and tip
     * @alias module:model/RatingRequest
     * @param rating {Number} The passenger's rating of this ride from 1 to 5
     */
    constructor(rating) { 
        
        RatingRequest.initialize(this, rating);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rating) { 
        obj['rating'] = rating;
    }

    /**
     * Constructs a <code>RatingRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RatingRequest} obj Optional instance to populate.
     * @return {module:model/RatingRequest} The populated <code>RatingRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RatingRequest();

            if (data.hasOwnProperty('feedback')) {
                obj['feedback'] = ApiClient.convertToType(data['feedback'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('tip')) {
                obj['tip'] = ApiClient.convertToType(data['tip'], TipParams);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RatingRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RatingRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RatingRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['feedback'] && !(typeof data['feedback'] === 'string' || data['feedback'] instanceof String)) {
            throw new Error("Expected the field `feedback` to be a primitive type in the JSON string but got " + data['feedback']);
        }
        // validate the optional field `tip`
        if (data['tip']) { // data not null
          TipParams.validateJSON(data['tip']);
        }

        return true;
    }


}

RatingRequest.RequiredProperties = ["rating"];

/**
 * The passenger's written feedback about this ride
 * @member {String} feedback
 */
RatingRequest.prototype['feedback'] = undefined;

/**
 * The passenger's rating of this ride from 1 to 5
 * @member {Number} rating
 */
RatingRequest.prototype['rating'] = undefined;

/**
 * Tip amount in minor units and tip currency
 * @member {module:model/TipParams} tip
 */
RatingRequest.prototype['tip'] = undefined;






export default RatingRequest;

