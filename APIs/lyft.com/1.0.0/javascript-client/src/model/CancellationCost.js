/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cost from './Cost';

/**
 * The CancellationCost model module.
 * @module model/CancellationCost
 * @version 1.0.0
 */
class CancellationCost {
    /**
     * Constructs a new <code>CancellationCost</code>.
     * @alias module:model/CancellationCost
     * @implements module:model/Cost
     * @param amount {Number} Total price of the ride
     * @param currency {String} The ISO 4217 currency code for the amount (e.g. USD)
     * @param description {String} The description for the cost
     */
    constructor(amount, currency, description) { 
        Cost.initialize(this, amount, currency, description);
        CancellationCost.initialize(this, amount, currency, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, currency, description) { 
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['description'] = description;
    }

    /**
     * Constructs a <code>CancellationCost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CancellationCost} obj Optional instance to populate.
     * @return {module:model/CancellationCost} The populated <code>CancellationCost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CancellationCost();
            Cost.constructFromObject(data, obj);

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('token_duration')) {
                obj['token_duration'] = ApiClient.convertToType(data['token_duration'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CancellationCost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CancellationCost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CancellationCost.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

CancellationCost.RequiredProperties = ["amount", "currency", "description"];

/**
 * Total price of the ride
 * @member {Number} amount
 */
CancellationCost.prototype['amount'] = undefined;

/**
 * The ISO 4217 currency code for the amount (e.g. USD)
 * @member {String} currency
 */
CancellationCost.prototype['currency'] = undefined;

/**
 * The description for the cost
 * @member {String} description
 */
CancellationCost.prototype['description'] = undefined;

/**
 * Token used to confirm the fee when cancelling a request
 * @member {String} token
 */
CancellationCost.prototype['token'] = undefined;

/**
 * How long, in seconds, before the token expires
 * @member {Number} token_duration
 */
CancellationCost.prototype['token_duration'] = undefined;


// Implement Cost interface:
/**
 * Total price of the ride
 * @member {Number} amount
 */
Cost.prototype['amount'] = undefined;
/**
 * The ISO 4217 currency code for the amount (e.g. USD)
 * @member {String} currency
 */
Cost.prototype['currency'] = undefined;
/**
 * The description for the cost
 * @member {String} description
 */
Cost.prototype['description'] = undefined;




export default CancellationCost;

