/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorDetail from './ErrorDetail';

/**
 * The ApiError model module.
 * @module model/ApiError
 * @version 1.0.0
 */
class ApiError {
    /**
     * Constructs a new <code>ApiError</code>.
     * Details about why a request failed, such as missing or invalid parameters
     * @alias module:model/ApiError
     */
    constructor() { 
        
        ApiError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiError} obj Optional instance to populate.
     * @return {module:model/ApiError} The populated <code>ApiError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiError();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('error_description')) {
                obj['error_description'] = ApiClient.convertToType(data['error_description'], 'String');
            }
            if (data.hasOwnProperty('error_detail')) {
                obj['error_detail'] = ApiClient.convertToType(data['error_detail'], [ErrorDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['error_description'] && !(typeof data['error_description'] === 'string' || data['error_description'] instanceof String)) {
            throw new Error("Expected the field `error_description` to be a primitive type in the JSON string but got " + data['error_description']);
        }
        if (data['error_detail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['error_detail'])) {
                throw new Error("Expected the field `error_detail` to be an array in the JSON data but got " + data['error_detail']);
            }
            // validate the optional field `error_detail` (array)
            for (const item of data['error_detail']) {
                ErrorDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A \"slug\" that serves as the error code (eg. \"bad_parameter\")
 * @member {String} error
 */
ApiError.prototype['error'] = undefined;

/**
 * A user-friendly description of the error (appropriate to show to an end-user)
 * @member {String} error_description
 */
ApiError.prototype['error_description'] = undefined;

/**
 * @member {Array.<module:model/ErrorDetail>} error_detail
 */
ApiError.prototype['error_detail'] = undefined;






export default ApiError;

