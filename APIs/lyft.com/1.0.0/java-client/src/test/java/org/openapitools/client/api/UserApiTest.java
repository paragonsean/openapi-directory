/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CancellationCostError;
import org.openapitools.client.model.CancellationRequest;
import org.openapitools.client.model.Location;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.RatingRequest;
import org.openapitools.client.model.Ride;
import org.openapitools.client.model.RideDetail;
import org.openapitools.client.model.RideReceipt;
import org.openapitools.client.model.RideRequest;
import org.openapitools.client.model.RideRequestError;
import org.openapitools.client.model.RidesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Cancel a ongoing requested ride
     *
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelRideTest() throws ApiException {
        String id = null;
        CancellationRequest request = null;
        api.cancelRide(id, request);
        // TODO: test validations
    }

    /**
     * The user&#39;s general info
     *
     * The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        Profile response = api.getProfile();
        // TODO: test validations
    }

    /**
     * Get the ride detail of a given ride ID
     *
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRideTest() throws ApiException {
        String id = null;
        RideDetail response = api.getRide(id);
        // TODO: test validations
    }

    /**
     * Get the receipt of the rides.
     *
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRideReceiptTest() throws ApiException {
        String id = null;
        RideReceipt response = api.getRideReceipt(id);
        // TODO: test validations
    }

    /**
     * List rides
     *
     * Get a list of past &amp; current rides for this passenger. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRidesTest() throws ApiException {
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer limit = null;
        RidesResponse response = api.getRides(startTime, endTime, limit);
        // TODO: test validations
    }

    /**
     * Request a Lyft
     *
     * Request a Lyft come pick you up at the given location. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newRideTest() throws ApiException {
        Ride request = null;
        RideRequest response = api.newRide(request);
        // TODO: test validations
    }

    /**
     * Update the destination of the ride
     *
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRideDestinationTest() throws ApiException {
        String id = null;
        Location request = null;
        Location response = api.setRideDestination(id, request);
        // TODO: test validations
    }

    /**
     * Add the passenger&#39;s rating, feedback, and tip
     *
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRideRatingTest() throws ApiException {
        String id = null;
        RatingRequest request = null;
        api.setRideRating(id, request);
        // TODO: test validations
    }

}
