/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about why a request failed, such as missing or invalid parameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RideRequestError {
  public static final String SERIALIZED_NAME_COST_TOKEN = "cost_token";
  @SerializedName(SERIALIZED_NAME_COST_TOKEN)
  private String costToken;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "error_description";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public static final String SERIALIZED_NAME_ERROR_DETAIL = "error_detail";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAIL)
  private List<ErrorDetail> errorDetail = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_URI = "error_uri";
  @SerializedName(SERIALIZED_NAME_ERROR_URI)
  private String errorUri;

  public static final String SERIALIZED_NAME_PRIMETIME_CONFIRMATION_TOKEN = "primetime_confirmation_token";
  @SerializedName(SERIALIZED_NAME_PRIMETIME_CONFIRMATION_TOKEN)
  private String primetimeConfirmationToken;

  public static final String SERIALIZED_NAME_PRIMETIME_MULTIPLIER = "primetime_multiplier";
  @SerializedName(SERIALIZED_NAME_PRIMETIME_MULTIPLIER)
  private Float primetimeMultiplier;

  public static final String SERIALIZED_NAME_PRIMETIME_PERCENTAGE = "primetime_percentage";
  @SerializedName(SERIALIZED_NAME_PRIMETIME_PERCENTAGE)
  private String primetimePercentage;

  public static final String SERIALIZED_NAME_TOKEN_DURATION = "token_duration";
  @SerializedName(SERIALIZED_NAME_TOKEN_DURATION)
  private String tokenDuration;

  public RideRequestError() {
  }

  public RideRequestError costToken(String costToken) {
    this.costToken = costToken;
    return this;
  }

  /**
   * A token that confirms the user has accepted current Prime Time and/or fixed price charges
   * @return costToken
   */
  @javax.annotation.Nullable
  public String getCostToken() {
    return costToken;
  }

  public void setCostToken(String costToken) {
    this.costToken = costToken;
  }


  public RideRequestError error(String error) {
    this.error = error;
    return this;
  }

  /**
   * A \&quot;slug\&quot; that serves as the error code (eg. \&quot;bad_parameter\&quot;)
   * @return error
   */
  @javax.annotation.Nonnull
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public RideRequestError errorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  /**
   * A user-friendly description of the error (appropriate to show to an end-user)
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public RideRequestError errorDetail(List<ErrorDetail> errorDetail) {
    this.errorDetail = errorDetail;
    return this;
  }

  public RideRequestError addErrorDetailItem(ErrorDetail errorDetailItem) {
    if (this.errorDetail == null) {
      this.errorDetail = new ArrayList<>();
    }
    this.errorDetail.add(errorDetailItem);
    return this;
  }

  /**
   * Get errorDetail
   * @return errorDetail
   */
  @javax.annotation.Nullable
  public List<ErrorDetail> getErrorDetail() {
    return errorDetail;
  }

  public void setErrorDetail(List<ErrorDetail> errorDetail) {
    this.errorDetail = errorDetail;
  }


  public RideRequestError errorUri(String errorUri) {
    this.errorUri = errorUri;
    return this;
  }

  /**
   * When a user must go through another flow before requesting a ride, this URI specifies which flow to use (e.g. an account challenge flow in a web view)
   * @return errorUri
   */
  @javax.annotation.Nullable
  public String getErrorUri() {
    return errorUri;
  }

  public void setErrorUri(String errorUri) {
    this.errorUri = errorUri;
  }


  public RideRequestError primetimeConfirmationToken(String primetimeConfirmationToken) {
    this.primetimeConfirmationToken = primetimeConfirmationToken;
    return this;
  }

  /**
   * A token that confirms the user has accepted current Prime Time charges (Deprecated)
   * @return primetimeConfirmationToken
   */
  @javax.annotation.Nullable
  public String getPrimetimeConfirmationToken() {
    return primetimeConfirmationToken;
  }

  public void setPrimetimeConfirmationToken(String primetimeConfirmationToken) {
    this.primetimeConfirmationToken = primetimeConfirmationToken;
  }


  public RideRequestError primetimeMultiplier(Float primetimeMultiplier) {
    this.primetimeMultiplier = primetimeMultiplier;
    return this;
  }

  /**
   * Current Prime Time multiplier (eg. if primetime_percentage is 100%, primetime_multiplier will be 2.0)
   * @return primetimeMultiplier
   */
  @javax.annotation.Nullable
  public Float getPrimetimeMultiplier() {
    return primetimeMultiplier;
  }

  public void setPrimetimeMultiplier(Float primetimeMultiplier) {
    this.primetimeMultiplier = primetimeMultiplier;
  }


  public RideRequestError primetimePercentage(String primetimePercentage) {
    this.primetimePercentage = primetimePercentage;
    return this;
  }

  /**
   * Current Prime Time percentage
   * @return primetimePercentage
   */
  @javax.annotation.Nullable
  public String getPrimetimePercentage() {
    return primetimePercentage;
  }

  public void setPrimetimePercentage(String primetimePercentage) {
    this.primetimePercentage = primetimePercentage;
  }


  public RideRequestError tokenDuration(String tokenDuration) {
    this.tokenDuration = tokenDuration;
    return this;
  }

  /**
   * Validity of the token in seconds
   * @return tokenDuration
   */
  @javax.annotation.Nullable
  public String getTokenDuration() {
    return tokenDuration;
  }

  public void setTokenDuration(String tokenDuration) {
    this.tokenDuration = tokenDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RideRequestError rideRequestError = (RideRequestError) o;
    return Objects.equals(this.costToken, rideRequestError.costToken) &&
        Objects.equals(this.error, rideRequestError.error) &&
        Objects.equals(this.errorDescription, rideRequestError.errorDescription) &&
        Objects.equals(this.errorDetail, rideRequestError.errorDetail) &&
        Objects.equals(this.errorUri, rideRequestError.errorUri) &&
        Objects.equals(this.primetimeConfirmationToken, rideRequestError.primetimeConfirmationToken) &&
        Objects.equals(this.primetimeMultiplier, rideRequestError.primetimeMultiplier) &&
        Objects.equals(this.primetimePercentage, rideRequestError.primetimePercentage) &&
        Objects.equals(this.tokenDuration, rideRequestError.tokenDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costToken, error, errorDescription, errorDetail, errorUri, primetimeConfirmationToken, primetimeMultiplier, primetimePercentage, tokenDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RideRequestError {\n");
    sb.append("    costToken: ").append(toIndentedString(costToken)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    errorDetail: ").append(toIndentedString(errorDetail)).append("\n");
    sb.append("    errorUri: ").append(toIndentedString(errorUri)).append("\n");
    sb.append("    primetimeConfirmationToken: ").append(toIndentedString(primetimeConfirmationToken)).append("\n");
    sb.append("    primetimeMultiplier: ").append(toIndentedString(primetimeMultiplier)).append("\n");
    sb.append("    primetimePercentage: ").append(toIndentedString(primetimePercentage)).append("\n");
    sb.append("    tokenDuration: ").append(toIndentedString(tokenDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost_token");
    openapiFields.add("error");
    openapiFields.add("error_description");
    openapiFields.add("error_detail");
    openapiFields.add("error_uri");
    openapiFields.add("primetime_confirmation_token");
    openapiFields.add("primetime_multiplier");
    openapiFields.add("primetime_percentage");
    openapiFields.add("token_duration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("error");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RideRequestError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RideRequestError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RideRequestError is not found in the empty JSON string", RideRequestError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RideRequestError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RideRequestError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RideRequestError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cost_token") != null && !jsonObj.get("cost_token").isJsonNull()) && !jsonObj.get("cost_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_token").toString()));
      }
      if (!jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("error_description") != null && !jsonObj.get("error_description").isJsonNull()) && !jsonObj.get("error_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_description").toString()));
      }
      if (jsonObj.get("error_detail") != null && !jsonObj.get("error_detail").isJsonNull()) {
        JsonArray jsonArrayerrorDetail = jsonObj.getAsJsonArray("error_detail");
        if (jsonArrayerrorDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("error_detail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `error_detail` to be an array in the JSON string but got `%s`", jsonObj.get("error_detail").toString()));
          }

          // validate the optional field `error_detail` (array)
          for (int i = 0; i < jsonArrayerrorDetail.size(); i++) {
            ErrorDetail.validateJsonElement(jsonArrayerrorDetail.get(i));
          };
        }
      }
      if ((jsonObj.get("error_uri") != null && !jsonObj.get("error_uri").isJsonNull()) && !jsonObj.get("error_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_uri").toString()));
      }
      if ((jsonObj.get("primetime_confirmation_token") != null && !jsonObj.get("primetime_confirmation_token").isJsonNull()) && !jsonObj.get("primetime_confirmation_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primetime_confirmation_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primetime_confirmation_token").toString()));
      }
      if ((jsonObj.get("primetime_percentage") != null && !jsonObj.get("primetime_percentage").isJsonNull()) && !jsonObj.get("primetime_percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primetime_percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primetime_percentage").toString()));
      }
      if ((jsonObj.get("token_duration") != null && !jsonObj.get("token_duration").isJsonNull()) && !jsonObj.get("token_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_duration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RideRequestError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RideRequestError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RideRequestError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RideRequestError.class));

       return (TypeAdapter<T>) new TypeAdapter<RideRequestError>() {
           @Override
           public void write(JsonWriter out, RideRequestError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RideRequestError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RideRequestError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RideRequestError
   * @throws IOException if the JSON string is invalid with respect to RideRequestError
   */
  public static RideRequestError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RideRequestError.class);
  }

  /**
   * Convert an instance of RideRequestError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

