/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CancellationCost;
import org.openapitools.client.model.Cost;
import org.openapitools.client.model.CurrentRideLocation;
import org.openapitools.client.model.DriverDetail;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.PassengerDetail;
import org.openapitools.client.model.PickupDropoffLocation;
import org.openapitools.client.model.RideLocation;
import org.openapitools.client.model.RideProfileEnum;
import org.openapitools.client.model.RideStatusEnum;
import org.openapitools.client.model.RideTypeEnumWithOther;
import org.openapitools.client.model.VehicleDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detail information about a ride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RideDetail {
  public static final String SERIALIZED_NAME_BEACON_COLOR = "beacon_color";
  @SerializedName(SERIALIZED_NAME_BEACON_COLOR)
  private String beaconColor;

  /**
   * The array of actors who may cancel the ride at this point
   */
  @JsonAdapter(CanCancelEnum.Adapter.class)
  public enum CanCancelEnum {
    DRIVER("driver"),
    
    PASSENGER("passenger"),
    
    DISPATCHER("dispatcher");

    private String value;

    CanCancelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CanCancelEnum fromValue(String value) {
      for (CanCancelEnum b : CanCancelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CanCancelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CanCancelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CanCancelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CanCancelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CanCancelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAN_CANCEL = "can_cancel";
  @SerializedName(SERIALIZED_NAME_CAN_CANCEL)
  private List<CanCancelEnum> canCancel = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCELED_BY = "canceled_by";
  @SerializedName(SERIALIZED_NAME_CANCELED_BY)
  private String canceledBy;

  public static final String SERIALIZED_NAME_CANCELLATION_PRICE = "cancellation_price";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_PRICE)
  private CancellationCost cancellationPrice;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private RideLocation destination;

  public static final String SERIALIZED_NAME_DISTANCE_MILES = "distance_miles";
  @SerializedName(SERIALIZED_NAME_DISTANCE_MILES)
  private Float distanceMiles;

  public static final String SERIALIZED_NAME_DRIVER = "driver";
  @SerializedName(SERIALIZED_NAME_DRIVER)
  private DriverDetail driver;

  public static final String SERIALIZED_NAME_DROPOFF = "dropoff";
  @SerializedName(SERIALIZED_NAME_DROPOFF)
  private PickupDropoffLocation dropoff;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "duration_seconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Integer durationSeconds;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private String feedback;

  public static final String SERIALIZED_NAME_GENERATED_AT = "generated_at";
  @SerializedName(SERIALIZED_NAME_GENERATED_AT)
  private OffsetDateTime generatedAt;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private CurrentRideLocation location;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private RideLocation origin;

  public static final String SERIALIZED_NAME_PASSENGER = "passenger";
  @SerializedName(SERIALIZED_NAME_PASSENGER)
  private PassengerDetail passenger;

  public static final String SERIALIZED_NAME_PICKUP = "pickup";
  @SerializedName(SERIALIZED_NAME_PICKUP)
  private PickupDropoffLocation pickup;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Cost price;

  public static final String SERIALIZED_NAME_PRICING_DETAILS_URL = "pricing_details_url";
  @SerializedName(SERIALIZED_NAME_PRICING_DETAILS_URL)
  private String pricingDetailsUrl;

  public static final String SERIALIZED_NAME_PRIMETIME_PERCENTAGE = "primetime_percentage";
  @SerializedName(SERIALIZED_NAME_PRIMETIME_PERCENTAGE)
  private String primetimePercentage;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Integer rating;

  public static final String SERIALIZED_NAME_REQUESTED_AT = "requested_at";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AT)
  private OffsetDateTime requestedAt;

  public static final String SERIALIZED_NAME_RIDE_ID = "ride_id";
  @SerializedName(SERIALIZED_NAME_RIDE_ID)
  private String rideId;

  public static final String SERIALIZED_NAME_RIDE_PROFILE = "ride_profile";
  @SerializedName(SERIALIZED_NAME_RIDE_PROFILE)
  private RideProfileEnum rideProfile;

  public static final String SERIALIZED_NAME_RIDE_TYPE = "ride_type";
  @SerializedName(SERIALIZED_NAME_RIDE_TYPE)
  private RideTypeEnumWithOther rideType;

  public static final String SERIALIZED_NAME_ROUTE_URL = "route_url";
  @SerializedName(SERIALIZED_NAME_ROUTE_URL)
  private String routeUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RideStatusEnum status;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private VehicleDetail vehicle;

  public RideDetail() {
  }

  public RideDetail beaconColor(String beaconColor) {
    this.beaconColor = beaconColor;
    return this;
  }

  /**
   * Hex color code of the driver AMP device.
   * @return beaconColor
   */
  @javax.annotation.Nullable
  public String getBeaconColor() {
    return beaconColor;
  }

  public void setBeaconColor(String beaconColor) {
    this.beaconColor = beaconColor;
  }


  public RideDetail canCancel(List<CanCancelEnum> canCancel) {
    this.canCancel = canCancel;
    return this;
  }

  public RideDetail addCanCancelItem(CanCancelEnum canCancelItem) {
    if (this.canCancel == null) {
      this.canCancel = new ArrayList<>();
    }
    this.canCancel.add(canCancelItem);
    return this;
  }

  /**
   * Get canCancel
   * @return canCancel
   */
  @javax.annotation.Nullable
  public List<CanCancelEnum> getCanCancel() {
    return canCancel;
  }

  public void setCanCancel(List<CanCancelEnum> canCancel) {
    this.canCancel = canCancel;
  }


  public RideDetail canceledBy(String canceledBy) {
    this.canceledBy = canceledBy;
    return this;
  }

  /**
   * The role of user who canceled the ride (if applicable)
   * @return canceledBy
   */
  @javax.annotation.Nullable
  public String getCanceledBy() {
    return canceledBy;
  }

  public void setCanceledBy(String canceledBy) {
    this.canceledBy = canceledBy;
  }


  public RideDetail cancellationPrice(CancellationCost cancellationPrice) {
    this.cancellationPrice = cancellationPrice;
    return this;
  }

  /**
   * The cost of cancellation if there would be a penalty
   * @return cancellationPrice
   */
  @javax.annotation.Nullable
  public CancellationCost getCancellationPrice() {
    return cancellationPrice;
  }

  public void setCancellationPrice(CancellationCost cancellationPrice) {
    this.cancellationPrice = cancellationPrice;
  }


  public RideDetail destination(RideLocation destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The *requested* location for passenger drop off
   * @return destination
   */
  @javax.annotation.Nullable
  public RideLocation getDestination() {
    return destination;
  }

  public void setDestination(RideLocation destination) {
    this.destination = destination;
  }


  public RideDetail distanceMiles(Float distanceMiles) {
    this.distanceMiles = distanceMiles;
    return this;
  }

  /**
   * The distance, in miles, that this ride traveled. This field is only present after drop-off
   * @return distanceMiles
   */
  @javax.annotation.Nullable
  public Float getDistanceMiles() {
    return distanceMiles;
  }

  public void setDistanceMiles(Float distanceMiles) {
    this.distanceMiles = distanceMiles;
  }


  public RideDetail driver(DriverDetail driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Get driver
   * @return driver
   */
  @javax.annotation.Nullable
  public DriverDetail getDriver() {
    return driver;
  }

  public void setDriver(DriverDetail driver) {
    this.driver = driver;
  }


  public RideDetail dropoff(PickupDropoffLocation dropoff) {
    this.dropoff = dropoff;
    return this;
  }

  /**
   * The *actual* location of passenger drop off
   * @return dropoff
   */
  @javax.annotation.Nullable
  public PickupDropoffLocation getDropoff() {
    return dropoff;
  }

  public void setDropoff(PickupDropoffLocation dropoff) {
    this.dropoff = dropoff;
  }


  public RideDetail durationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * Duration of the ride in seconds from pickup to drop-off. This field is only present after drop-off.
   * @return durationSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public RideDetail feedback(String feedback) {
    this.feedback = feedback;
    return this;
  }

  /**
   * The written feedback the user left for this ride
   * @return feedback
   */
  @javax.annotation.Nullable
  public String getFeedback() {
    return feedback;
  }

  public void setFeedback(String feedback) {
    this.feedback = feedback;
  }


  public RideDetail generatedAt(OffsetDateTime generatedAt) {
    this.generatedAt = generatedAt;
    return this;
  }

  /**
   * The request timestamp in date and time
   * @return generatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGeneratedAt() {
    return generatedAt;
  }

  public void setGeneratedAt(OffsetDateTime generatedAt) {
    this.generatedAt = generatedAt;
  }


  public RideDetail lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public RideDetail addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * The break down of cost
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public RideDetail location(CurrentRideLocation location) {
    this.location = location;
    return this;
  }

  /**
   * The *current* location info of the ride
   * @return location
   */
  @javax.annotation.Nullable
  public CurrentRideLocation getLocation() {
    return location;
  }

  public void setLocation(CurrentRideLocation location) {
    this.location = location;
  }


  public RideDetail origin(RideLocation origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The *requested* location for passenger pickup
   * @return origin
   */
  @javax.annotation.Nullable
  public RideLocation getOrigin() {
    return origin;
  }

  public void setOrigin(RideLocation origin) {
    this.origin = origin;
  }


  public RideDetail passenger(PassengerDetail passenger) {
    this.passenger = passenger;
    return this;
  }

  /**
   * Get passenger
   * @return passenger
   */
  @javax.annotation.Nullable
  public PassengerDetail getPassenger() {
    return passenger;
  }

  public void setPassenger(PassengerDetail passenger) {
    this.passenger = passenger;
  }


  public RideDetail pickup(PickupDropoffLocation pickup) {
    this.pickup = pickup;
    return this;
  }

  /**
   * The *actual* location of passenger pickup
   * @return pickup
   */
  @javax.annotation.Nullable
  public PickupDropoffLocation getPickup() {
    return pickup;
  }

  public void setPickup(PickupDropoffLocation pickup) {
    this.pickup = pickup;
  }


  public RideDetail price(Cost price) {
    this.price = price;
    return this;
  }

  /**
   * The total price for the current ride
   * @return price
   */
  @javax.annotation.Nullable
  public Cost getPrice() {
    return price;
  }

  public void setPrice(Cost price) {
    this.price = price;
  }


  public RideDetail pricingDetailsUrl(String pricingDetailsUrl) {
    this.pricingDetailsUrl = pricingDetailsUrl;
    return this;
  }

  /**
   * The web view showing the pricing structure for the geographic area where the ride was taken 
   * @return pricingDetailsUrl
   */
  @javax.annotation.Nullable
  public String getPricingDetailsUrl() {
    return pricingDetailsUrl;
  }

  public void setPricingDetailsUrl(String pricingDetailsUrl) {
    this.pricingDetailsUrl = pricingDetailsUrl;
  }


  public RideDetail primetimePercentage(String primetimePercentage) {
    this.primetimePercentage = primetimePercentage;
    return this;
  }

  /**
   * The Prime Time percentage applied to the base price
   * @return primetimePercentage
   */
  @javax.annotation.Nullable
  public String getPrimetimePercentage() {
    return primetimePercentage;
  }

  public void setPrimetimePercentage(String primetimePercentage) {
    this.primetimePercentage = primetimePercentage;
  }


  public RideDetail rating(Integer rating) {
    this.rating = rating;
    return this;
  }

  /**
   * The rating the user left for this ride, from 1 to 5
   * @return rating
   */
  @javax.annotation.Nullable
  public Integer getRating() {
    return rating;
  }

  public void setRating(Integer rating) {
    this.rating = rating;
  }


  public RideDetail requestedAt(OffsetDateTime requestedAt) {
    this.requestedAt = requestedAt;
    return this;
  }

  /**
   * The ride requested timestamp in date and time
   * @return requestedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestedAt() {
    return requestedAt;
  }

  public void setRequestedAt(OffsetDateTime requestedAt) {
    this.requestedAt = requestedAt;
  }


  public RideDetail rideId(String rideId) {
    this.rideId = rideId;
    return this;
  }

  /**
   * The unique ID of this ride
   * @return rideId
   */
  @javax.annotation.Nullable
  public String getRideId() {
    return rideId;
  }

  public void setRideId(String rideId) {
    this.rideId = rideId;
  }


  public RideDetail rideProfile(RideProfileEnum rideProfile) {
    this.rideProfile = rideProfile;
    return this;
  }

  /**
   * Indicates whether the ride was requested from the business profile or personal profile of the user. 
   * @return rideProfile
   */
  @javax.annotation.Nullable
  public RideProfileEnum getRideProfile() {
    return rideProfile;
  }

  public void setRideProfile(RideProfileEnum rideProfile) {
    this.rideProfile = rideProfile;
  }


  public RideDetail rideType(RideTypeEnumWithOther rideType) {
    this.rideType = rideType;
    return this;
  }

  /**
   * Get rideType
   * @return rideType
   */
  @javax.annotation.Nullable
  public RideTypeEnumWithOther getRideType() {
    return rideType;
  }

  public void setRideType(RideTypeEnumWithOther rideType) {
    this.rideType = rideType;
  }


  public RideDetail routeUrl(String routeUrl) {
    this.routeUrl = routeUrl;
    return this;
  }

  /**
   * The web view showing the passenger, driver, and route for this ride. This field will only be present for rides created through this API, or that have been shared through the \&quot;Share my Route\&quot; feature 
   * @return routeUrl
   */
  @javax.annotation.Nullable
  public String getRouteUrl() {
    return routeUrl;
  }

  public void setRouteUrl(String routeUrl) {
    this.routeUrl = routeUrl;
  }


  public RideDetail status(RideStatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public RideStatusEnum getStatus() {
    return status;
  }

  public void setStatus(RideStatusEnum status) {
    this.status = status;
  }


  public RideDetail vehicle(VehicleDetail vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public VehicleDetail getVehicle() {
    return vehicle;
  }

  public void setVehicle(VehicleDetail vehicle) {
    this.vehicle = vehicle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RideDetail rideDetail = (RideDetail) o;
    return Objects.equals(this.beaconColor, rideDetail.beaconColor) &&
        Objects.equals(this.canCancel, rideDetail.canCancel) &&
        Objects.equals(this.canceledBy, rideDetail.canceledBy) &&
        Objects.equals(this.cancellationPrice, rideDetail.cancellationPrice) &&
        Objects.equals(this.destination, rideDetail.destination) &&
        Objects.equals(this.distanceMiles, rideDetail.distanceMiles) &&
        Objects.equals(this.driver, rideDetail.driver) &&
        Objects.equals(this.dropoff, rideDetail.dropoff) &&
        Objects.equals(this.durationSeconds, rideDetail.durationSeconds) &&
        Objects.equals(this.feedback, rideDetail.feedback) &&
        Objects.equals(this.generatedAt, rideDetail.generatedAt) &&
        Objects.equals(this.lineItems, rideDetail.lineItems) &&
        Objects.equals(this.location, rideDetail.location) &&
        Objects.equals(this.origin, rideDetail.origin) &&
        Objects.equals(this.passenger, rideDetail.passenger) &&
        Objects.equals(this.pickup, rideDetail.pickup) &&
        Objects.equals(this.price, rideDetail.price) &&
        Objects.equals(this.pricingDetailsUrl, rideDetail.pricingDetailsUrl) &&
        Objects.equals(this.primetimePercentage, rideDetail.primetimePercentage) &&
        Objects.equals(this.rating, rideDetail.rating) &&
        Objects.equals(this.requestedAt, rideDetail.requestedAt) &&
        Objects.equals(this.rideId, rideDetail.rideId) &&
        Objects.equals(this.rideProfile, rideDetail.rideProfile) &&
        Objects.equals(this.rideType, rideDetail.rideType) &&
        Objects.equals(this.routeUrl, rideDetail.routeUrl) &&
        Objects.equals(this.status, rideDetail.status) &&
        Objects.equals(this.vehicle, rideDetail.vehicle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beaconColor, canCancel, canceledBy, cancellationPrice, destination, distanceMiles, driver, dropoff, durationSeconds, feedback, generatedAt, lineItems, location, origin, passenger, pickup, price, pricingDetailsUrl, primetimePercentage, rating, requestedAt, rideId, rideProfile, rideType, routeUrl, status, vehicle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RideDetail {\n");
    sb.append("    beaconColor: ").append(toIndentedString(beaconColor)).append("\n");
    sb.append("    canCancel: ").append(toIndentedString(canCancel)).append("\n");
    sb.append("    canceledBy: ").append(toIndentedString(canceledBy)).append("\n");
    sb.append("    cancellationPrice: ").append(toIndentedString(cancellationPrice)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    distanceMiles: ").append(toIndentedString(distanceMiles)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    dropoff: ").append(toIndentedString(dropoff)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    generatedAt: ").append(toIndentedString(generatedAt)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    passenger: ").append(toIndentedString(passenger)).append("\n");
    sb.append("    pickup: ").append(toIndentedString(pickup)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    pricingDetailsUrl: ").append(toIndentedString(pricingDetailsUrl)).append("\n");
    sb.append("    primetimePercentage: ").append(toIndentedString(primetimePercentage)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    rideId: ").append(toIndentedString(rideId)).append("\n");
    sb.append("    rideProfile: ").append(toIndentedString(rideProfile)).append("\n");
    sb.append("    rideType: ").append(toIndentedString(rideType)).append("\n");
    sb.append("    routeUrl: ").append(toIndentedString(routeUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beacon_color");
    openapiFields.add("can_cancel");
    openapiFields.add("canceled_by");
    openapiFields.add("cancellation_price");
    openapiFields.add("destination");
    openapiFields.add("distance_miles");
    openapiFields.add("driver");
    openapiFields.add("dropoff");
    openapiFields.add("duration_seconds");
    openapiFields.add("feedback");
    openapiFields.add("generated_at");
    openapiFields.add("line_items");
    openapiFields.add("location");
    openapiFields.add("origin");
    openapiFields.add("passenger");
    openapiFields.add("pickup");
    openapiFields.add("price");
    openapiFields.add("pricing_details_url");
    openapiFields.add("primetime_percentage");
    openapiFields.add("rating");
    openapiFields.add("requested_at");
    openapiFields.add("ride_id");
    openapiFields.add("ride_profile");
    openapiFields.add("ride_type");
    openapiFields.add("route_url");
    openapiFields.add("status");
    openapiFields.add("vehicle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RideDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RideDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RideDetail is not found in the empty JSON string", RideDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RideDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RideDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beacon_color") != null && !jsonObj.get("beacon_color").isJsonNull()) && !jsonObj.get("beacon_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beacon_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beacon_color").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("can_cancel") != null && !jsonObj.get("can_cancel").isJsonNull() && !jsonObj.get("can_cancel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `can_cancel` to be an array in the JSON string but got `%s`", jsonObj.get("can_cancel").toString()));
      }
      if ((jsonObj.get("canceled_by") != null && !jsonObj.get("canceled_by").isJsonNull()) && !jsonObj.get("canceled_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_by").toString()));
      }
      // validate the optional field `cancellation_price`
      if (jsonObj.get("cancellation_price") != null && !jsonObj.get("cancellation_price").isJsonNull()) {
        CancellationCost.validateJsonElement(jsonObj.get("cancellation_price"));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        RideLocation.validateJsonElement(jsonObj.get("destination"));
      }
      // validate the optional field `driver`
      if (jsonObj.get("driver") != null && !jsonObj.get("driver").isJsonNull()) {
        DriverDetail.validateJsonElement(jsonObj.get("driver"));
      }
      // validate the optional field `dropoff`
      if (jsonObj.get("dropoff") != null && !jsonObj.get("dropoff").isJsonNull()) {
        PickupDropoffLocation.validateJsonElement(jsonObj.get("dropoff"));
      }
      if ((jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) && !jsonObj.get("feedback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedback").toString()));
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        CurrentRideLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        RideLocation.validateJsonElement(jsonObj.get("origin"));
      }
      // validate the optional field `passenger`
      if (jsonObj.get("passenger") != null && !jsonObj.get("passenger").isJsonNull()) {
        PassengerDetail.validateJsonElement(jsonObj.get("passenger"));
      }
      // validate the optional field `pickup`
      if (jsonObj.get("pickup") != null && !jsonObj.get("pickup").isJsonNull()) {
        PickupDropoffLocation.validateJsonElement(jsonObj.get("pickup"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Cost.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("pricing_details_url") != null && !jsonObj.get("pricing_details_url").isJsonNull()) && !jsonObj.get("pricing_details_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricing_details_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricing_details_url").toString()));
      }
      if ((jsonObj.get("primetime_percentage") != null && !jsonObj.get("primetime_percentage").isJsonNull()) && !jsonObj.get("primetime_percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primetime_percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primetime_percentage").toString()));
      }
      if ((jsonObj.get("ride_id") != null && !jsonObj.get("ride_id").isJsonNull()) && !jsonObj.get("ride_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ride_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ride_id").toString()));
      }
      // validate the optional field `ride_profile`
      if (jsonObj.get("ride_profile") != null && !jsonObj.get("ride_profile").isJsonNull()) {
        RideProfileEnum.validateJsonElement(jsonObj.get("ride_profile"));
      }
      // validate the optional field `ride_type`
      if (jsonObj.get("ride_type") != null && !jsonObj.get("ride_type").isJsonNull()) {
        RideTypeEnumWithOther.validateJsonElement(jsonObj.get("ride_type"));
      }
      if ((jsonObj.get("route_url") != null && !jsonObj.get("route_url").isJsonNull()) && !jsonObj.get("route_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_url").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        RideStatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        VehicleDetail.validateJsonElement(jsonObj.get("vehicle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RideDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RideDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RideDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RideDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<RideDetail>() {
           @Override
           public void write(JsonWriter out, RideDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RideDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RideDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RideDetail
   * @throws IOException if the JSON string is invalid with respect to RideDetail
   */
  public static RideDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RideDetail.class);
  }

  /**
   * Convert an instance of RideDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

