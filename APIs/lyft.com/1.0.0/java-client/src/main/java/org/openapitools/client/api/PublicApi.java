/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CostEstimateResponse;
import org.openapitools.client.model.EtaEstimateResponse;
import org.openapitools.client.model.NearbyDriversResponse;
import org.openapitools.client.model.RideTypesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCost
     * @param startLat Latitude of the starting location (required)
     * @param startLng Longitude of the starting location (required)
     * @param rideType ID of a ride type (optional)
     * @param endLat Latitude of the ending location (optional)
     * @param endLng Longitude of the ending location (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of cost estimates by ride type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: start location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this start location  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCostCall(Double startLat, Double startLng, String rideType, Double endLat, Double endLng, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rideType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ride_type", rideType));
        }

        if (startLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_lat", startLat));
        }

        if (startLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_lng", startLng));
        }

        if (endLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_lat", endLat));
        }

        if (endLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_lng", endLng));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Client Authentication", "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCostValidateBeforeCall(Double startLat, Double startLng, String rideType, Double endLat, Double endLng, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startLat' is set
        if (startLat == null) {
            throw new ApiException("Missing the required parameter 'startLat' when calling getCost(Async)");
        }

        // verify the required parameter 'startLng' is set
        if (startLng == null) {
            throw new ApiException("Missing the required parameter 'startLng' when calling getCost(Async)");
        }

        return getCostCall(startLat, startLng, rideType, endLat, endLng, _callback);

    }

    /**
     * Cost estimates
     * Estimate the cost of taking a Lyft between two points. 
     * @param startLat Latitude of the starting location (required)
     * @param startLng Longitude of the starting location (required)
     * @param rideType ID of a ride type (optional)
     * @param endLat Latitude of the ending location (optional)
     * @param endLng Longitude of the ending location (optional)
     * @return CostEstimateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of cost estimates by ride type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: start location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this start location  </td><td>  -  </td></tr>
     </table>
     */
    public CostEstimateResponse getCost(Double startLat, Double startLng, String rideType, Double endLat, Double endLng) throws ApiException {
        ApiResponse<CostEstimateResponse> localVarResp = getCostWithHttpInfo(startLat, startLng, rideType, endLat, endLng);
        return localVarResp.getData();
    }

    /**
     * Cost estimates
     * Estimate the cost of taking a Lyft between two points. 
     * @param startLat Latitude of the starting location (required)
     * @param startLng Longitude of the starting location (required)
     * @param rideType ID of a ride type (optional)
     * @param endLat Latitude of the ending location (optional)
     * @param endLng Longitude of the ending location (optional)
     * @return ApiResponse&lt;CostEstimateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of cost estimates by ride type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: start location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this start location  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CostEstimateResponse> getCostWithHttpInfo(Double startLat, Double startLng, String rideType, Double endLat, Double endLng) throws ApiException {
        okhttp3.Call localVarCall = getCostValidateBeforeCall(startLat, startLng, rideType, endLat, endLng, null);
        Type localVarReturnType = new TypeToken<CostEstimateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cost estimates (asynchronously)
     * Estimate the cost of taking a Lyft between two points. 
     * @param startLat Latitude of the starting location (required)
     * @param startLng Longitude of the starting location (required)
     * @param rideType ID of a ride type (optional)
     * @param endLat Latitude of the ending location (optional)
     * @param endLng Longitude of the ending location (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of cost estimates by ride type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: start location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this start location  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCostAsync(Double startLat, Double startLng, String rideType, Double endLat, Double endLng, final ApiCallback<CostEstimateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCostValidateBeforeCall(startLat, startLng, rideType, endLat, endLng, _callback);
        Type localVarReturnType = new TypeToken<CostEstimateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDrivers
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available drivers sorted by eta for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDriversCall(Double lat, Double lng, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drivers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Client Authentication", "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDriversValidateBeforeCall(Double lat, Double lng, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getDrivers(Async)");
        }

        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling getDrivers(Async)");
        }

        return getDriversCall(lat, lng, _callback);

    }

    /**
     * Available drivers nearby
     * The drivers endpoint returns a list of nearby drivers&#39; lat and lng at a given location. 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @return NearbyDriversResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available drivers sorted by eta for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public NearbyDriversResponse getDrivers(Double lat, Double lng) throws ApiException {
        ApiResponse<NearbyDriversResponse> localVarResp = getDriversWithHttpInfo(lat, lng);
        return localVarResp.getData();
    }

    /**
     * Available drivers nearby
     * The drivers endpoint returns a list of nearby drivers&#39; lat and lng at a given location. 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @return ApiResponse&lt;NearbyDriversResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available drivers sorted by eta for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NearbyDriversResponse> getDriversWithHttpInfo(Double lat, Double lng) throws ApiException {
        okhttp3.Call localVarCall = getDriversValidateBeforeCall(lat, lng, null);
        Type localVarReturnType = new TypeToken<NearbyDriversResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available drivers nearby (asynchronously)
     * The drivers endpoint returns a list of nearby drivers&#39; lat and lng at a given location. 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available drivers sorted by eta for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDriversAsync(Double lat, Double lng, final ApiCallback<NearbyDriversResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDriversValidateBeforeCall(lat, lng, _callback);
        Type localVarReturnType = new TypeToken<NearbyDriversResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getETA
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param destinationLat Latitude of destination location (optional)
     * @param destinationLng Longitude of destination location (optional)
     * @param rideType ID of a ride type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of ETAs by ride type for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this location  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getETACall(Double lat, Double lng, Double destinationLat, Double destinationLng, String rideType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eta";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (destinationLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_lat", destinationLat));
        }

        if (destinationLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_lng", destinationLng));
        }

        if (rideType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ride_type", rideType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Client Authentication", "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getETAValidateBeforeCall(Double lat, Double lng, Double destinationLat, Double destinationLng, String rideType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getETA(Async)");
        }

        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling getETA(Async)");
        }

        return getETACall(lat, lng, destinationLat, destinationLng, rideType, _callback);

    }

    /**
     * Pickup ETAs
     * The ETA endpoint lets you know how quickly a Lyft driver can come get you 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param destinationLat Latitude of destination location (optional)
     * @param destinationLng Longitude of destination location (optional)
     * @param rideType ID of a ride type (optional)
     * @return EtaEstimateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of ETAs by ride type for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this location  </td><td>  -  </td></tr>
     </table>
     */
    public EtaEstimateResponse getETA(Double lat, Double lng, Double destinationLat, Double destinationLng, String rideType) throws ApiException {
        ApiResponse<EtaEstimateResponse> localVarResp = getETAWithHttpInfo(lat, lng, destinationLat, destinationLng, rideType);
        return localVarResp.getData();
    }

    /**
     * Pickup ETAs
     * The ETA endpoint lets you know how quickly a Lyft driver can come get you 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param destinationLat Latitude of destination location (optional)
     * @param destinationLng Longitude of destination location (optional)
     * @param rideType ID of a ride type (optional)
     * @return ApiResponse&lt;EtaEstimateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of ETAs by ride type for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this location  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EtaEstimateResponse> getETAWithHttpInfo(Double lat, Double lng, Double destinationLat, Double destinationLng, String rideType) throws ApiException {
        okhttp3.Call localVarCall = getETAValidateBeforeCall(lat, lng, destinationLat, destinationLng, rideType, null);
        Type localVarReturnType = new TypeToken<EtaEstimateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pickup ETAs (asynchronously)
     * The ETA endpoint lets you know how quickly a Lyft driver can come get you 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param destinationLat Latitude of destination location (optional)
     * @param destinationLng Longitude of destination location (optional)
     * @param rideType ID of a ride type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of ETAs by ride type for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: location is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at this location  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getETAAsync(Double lat, Double lng, Double destinationLat, Double destinationLng, String rideType, final ApiCallback<EtaEstimateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getETAValidateBeforeCall(lat, lng, destinationLat, destinationLng, rideType, _callback);
        Type localVarReturnType = new TypeToken<EtaEstimateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRideTypes
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param rideType ID of a ride type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available Ride Types for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRideTypesCall(Double lat, Double lng, String rideType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ridetypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (rideType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ride_type", rideType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Client Authentication", "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRideTypesValidateBeforeCall(Double lat, Double lng, String rideType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getRideTypes(Async)");
        }

        // verify the required parameter 'lng' is set
        if (lng == null) {
            throw new ApiException("Missing the required parameter 'lng' when calling getRideTypes(Async)");
        }

        return getRideTypesCall(lat, lng, rideType, _callback);

    }

    /**
     * Types of rides
     * The ride types endpoint returns information about what kinds of Lyft rides you can request at a given location. 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param rideType ID of a ride type (optional)
     * @return RideTypesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available Ride Types for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public RideTypesResponse getRideTypes(Double lat, Double lng, String rideType) throws ApiException {
        ApiResponse<RideTypesResponse> localVarResp = getRideTypesWithHttpInfo(lat, lng, rideType);
        return localVarResp.getData();
    }

    /**
     * Types of rides
     * The ride types endpoint returns information about what kinds of Lyft rides you can request at a given location. 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param rideType ID of a ride type (optional)
     * @return ApiResponse&lt;RideTypesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available Ride Types for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RideTypesResponse> getRideTypesWithHttpInfo(Double lat, Double lng, String rideType) throws ApiException {
        okhttp3.Call localVarCall = getRideTypesValidateBeforeCall(lat, lng, rideType, null);
        Type localVarReturnType = new TypeToken<RideTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Types of rides (asynchronously)
     * The ride types endpoint returns information about what kinds of Lyft rides you can request at a given location. 
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @param rideType ID of a ride type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of available Ride Types for the given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRideTypesAsync(Double lat, Double lng, String rideType, final ApiCallback<RideTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRideTypesValidateBeforeCall(lat, lng, rideType, _callback);
        Type localVarReturnType = new TypeToken<RideTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
