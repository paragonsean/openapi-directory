/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Charge;
import org.openapitools.client.model.Cost;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.RideProfileEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Receipt information of a processed ride.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RideReceipt {
  public static final String SERIALIZED_NAME_CHARGES = "charges";
  @SerializedName(SERIALIZED_NAME_CHARGES)
  private List<Charge> charges = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Cost price;

  public static final String SERIALIZED_NAME_REQUESTED_AT = "requested_at";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AT)
  private OffsetDateTime requestedAt;

  public static final String SERIALIZED_NAME_RIDE_ID = "ride_id";
  @SerializedName(SERIALIZED_NAME_RIDE_ID)
  private String rideId;

  public static final String SERIALIZED_NAME_RIDE_PROFILE = "ride_profile";
  @SerializedName(SERIALIZED_NAME_RIDE_PROFILE)
  private RideProfileEnum rideProfile;

  public RideReceipt() {
  }

  public RideReceipt charges(List<Charge> charges) {
    this.charges = charges;
    return this;
  }

  public RideReceipt addChargesItem(Charge chargesItem) {
    if (this.charges == null) {
      this.charges = new ArrayList<>();
    }
    this.charges.add(chargesItem);
    return this;
  }

  /**
   * The break down of charge method
   * @return charges
   */
  @javax.annotation.Nullable
  public List<Charge> getCharges() {
    return charges;
  }

  public void setCharges(List<Charge> charges) {
    this.charges = charges;
  }


  public RideReceipt lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public RideReceipt addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * The break down of line items
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public RideReceipt price(Cost price) {
    this.price = price;
    return this;
  }

  /**
   * The total price for the current ride
   * @return price
   */
  @javax.annotation.Nullable
  public Cost getPrice() {
    return price;
  }

  public void setPrice(Cost price) {
    this.price = price;
  }


  public RideReceipt requestedAt(OffsetDateTime requestedAt) {
    this.requestedAt = requestedAt;
    return this;
  }

  /**
   * The ride requested timestamp in date and time
   * @return requestedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestedAt() {
    return requestedAt;
  }

  public void setRequestedAt(OffsetDateTime requestedAt) {
    this.requestedAt = requestedAt;
  }


  public RideReceipt rideId(String rideId) {
    this.rideId = rideId;
    return this;
  }

  /**
   * The unique ID of this ride
   * @return rideId
   */
  @javax.annotation.Nullable
  public String getRideId() {
    return rideId;
  }

  public void setRideId(String rideId) {
    this.rideId = rideId;
  }


  public RideReceipt rideProfile(RideProfileEnum rideProfile) {
    this.rideProfile = rideProfile;
    return this;
  }

  /**
   * Indicates whether the ride was requested from the business profile or personal profile of the user. 
   * @return rideProfile
   */
  @javax.annotation.Nullable
  public RideProfileEnum getRideProfile() {
    return rideProfile;
  }

  public void setRideProfile(RideProfileEnum rideProfile) {
    this.rideProfile = rideProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RideReceipt rideReceipt = (RideReceipt) o;
    return Objects.equals(this.charges, rideReceipt.charges) &&
        Objects.equals(this.lineItems, rideReceipt.lineItems) &&
        Objects.equals(this.price, rideReceipt.price) &&
        Objects.equals(this.requestedAt, rideReceipt.requestedAt) &&
        Objects.equals(this.rideId, rideReceipt.rideId) &&
        Objects.equals(this.rideProfile, rideReceipt.rideProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charges, lineItems, price, requestedAt, rideId, rideProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RideReceipt {\n");
    sb.append("    charges: ").append(toIndentedString(charges)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    rideId: ").append(toIndentedString(rideId)).append("\n");
    sb.append("    rideProfile: ").append(toIndentedString(rideProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charges");
    openapiFields.add("line_items");
    openapiFields.add("price");
    openapiFields.add("requested_at");
    openapiFields.add("ride_id");
    openapiFields.add("ride_profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RideReceipt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RideReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RideReceipt is not found in the empty JSON string", RideReceipt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RideReceipt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RideReceipt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("charges") != null && !jsonObj.get("charges").isJsonNull()) {
        JsonArray jsonArraycharges = jsonObj.getAsJsonArray("charges");
        if (jsonArraycharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("charges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `charges` to be an array in the JSON string but got `%s`", jsonObj.get("charges").toString()));
          }

          // validate the optional field `charges` (array)
          for (int i = 0; i < jsonArraycharges.size(); i++) {
            Charge.validateJsonElement(jsonArraycharges.get(i));
          };
        }
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Cost.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("ride_id") != null && !jsonObj.get("ride_id").isJsonNull()) && !jsonObj.get("ride_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ride_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ride_id").toString()));
      }
      // validate the optional field `ride_profile`
      if (jsonObj.get("ride_profile") != null && !jsonObj.get("ride_profile").isJsonNull()) {
        RideProfileEnum.validateJsonElement(jsonObj.get("ride_profile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RideReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RideReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RideReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RideReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<RideReceipt>() {
           @Override
           public void write(JsonWriter out, RideReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RideReceipt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RideReceipt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RideReceipt
   * @throws IOException if the JSON string is invalid with respect to RideReceipt
   */
  public static RideReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RideReceipt.class);
  }

  /**
   * Convert an instance of RideReceipt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

