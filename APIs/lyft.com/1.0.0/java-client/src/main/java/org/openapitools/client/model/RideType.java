/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PricingDetails;
import org.openapitools.client.model.RideTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RideType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RideType {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_PRICING_DETAILS = "pricing_details";
  @SerializedName(SERIALIZED_NAME_PRICING_DETAILS)
  private PricingDetails pricingDetails;

  public static final String SERIALIZED_NAME_RIDE_TYPE = "ride_type";
  @SerializedName(SERIALIZED_NAME_RIDE_TYPE)
  private RideTypeEnum rideType;

  public static final String SERIALIZED_NAME_SCHEDULED_PRICING_DETAILS = "scheduled_pricing_details";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_PRICING_DETAILS)
  private PricingDetails scheduledPricingDetails;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private Integer seats;

  public RideType() {
  }

  public RideType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A human readable description of the ride type
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public RideType imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The URL of an image representing this ride type
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public RideType pricingDetails(PricingDetails pricingDetails) {
    this.pricingDetails = pricingDetails;
    return this;
  }

  /**
   * Get pricingDetails
   * @return pricingDetails
   */
  @javax.annotation.Nullable
  public PricingDetails getPricingDetails() {
    return pricingDetails;
  }

  public void setPricingDetails(PricingDetails pricingDetails) {
    this.pricingDetails = pricingDetails;
  }


  public RideType rideType(RideTypeEnum rideType) {
    this.rideType = rideType;
    return this;
  }

  /**
   * Get rideType
   * @return rideType
   */
  @javax.annotation.Nullable
  public RideTypeEnum getRideType() {
    return rideType;
  }

  public void setRideType(RideTypeEnum rideType) {
    this.rideType = rideType;
  }


  public RideType scheduledPricingDetails(PricingDetails scheduledPricingDetails) {
    this.scheduledPricingDetails = scheduledPricingDetails;
    return this;
  }

  /**
   * Get scheduledPricingDetails
   * @return scheduledPricingDetails
   */
  @javax.annotation.Nullable
  public PricingDetails getScheduledPricingDetails() {
    return scheduledPricingDetails;
  }

  public void setScheduledPricingDetails(PricingDetails scheduledPricingDetails) {
    this.scheduledPricingDetails = scheduledPricingDetails;
  }


  public RideType seats(Integer seats) {
    this.seats = seats;
    return this;
  }

  /**
   * The maximum number of seats available for rides requested with this ride type
   * @return seats
   */
  @javax.annotation.Nullable
  public Integer getSeats() {
    return seats;
  }

  public void setSeats(Integer seats) {
    this.seats = seats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RideType rideType = (RideType) o;
    return Objects.equals(this.displayName, rideType.displayName) &&
        Objects.equals(this.imageUrl, rideType.imageUrl) &&
        Objects.equals(this.pricingDetails, rideType.pricingDetails) &&
        Objects.equals(this.rideType, rideType.rideType) &&
        Objects.equals(this.scheduledPricingDetails, rideType.scheduledPricingDetails) &&
        Objects.equals(this.seats, rideType.seats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, imageUrl, pricingDetails, rideType, scheduledPricingDetails, seats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RideType {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    pricingDetails: ").append(toIndentedString(pricingDetails)).append("\n");
    sb.append("    rideType: ").append(toIndentedString(rideType)).append("\n");
    sb.append("    scheduledPricingDetails: ").append(toIndentedString(scheduledPricingDetails)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_name");
    openapiFields.add("image_url");
    openapiFields.add("pricing_details");
    openapiFields.add("ride_type");
    openapiFields.add("scheduled_pricing_details");
    openapiFields.add("seats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RideType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RideType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RideType is not found in the empty JSON string", RideType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RideType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RideType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      // validate the optional field `pricing_details`
      if (jsonObj.get("pricing_details") != null && !jsonObj.get("pricing_details").isJsonNull()) {
        PricingDetails.validateJsonElement(jsonObj.get("pricing_details"));
      }
      // validate the optional field `ride_type`
      if (jsonObj.get("ride_type") != null && !jsonObj.get("ride_type").isJsonNull()) {
        RideTypeEnum.validateJsonElement(jsonObj.get("ride_type"));
      }
      // validate the optional field `scheduled_pricing_details`
      if (jsonObj.get("scheduled_pricing_details") != null && !jsonObj.get("scheduled_pricing_details").isJsonNull()) {
        PricingDetails.validateJsonElement(jsonObj.get("scheduled_pricing_details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RideType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RideType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RideType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RideType.class));

       return (TypeAdapter<T>) new TypeAdapter<RideType>() {
           @Override
           public void write(JsonWriter out, RideType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RideType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RideType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RideType
   * @throws IOException if the JSON string is invalid with respect to RideType
   */
  public static RideType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RideType.class);
  }

  /**
   * Convert an instance of RideType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

