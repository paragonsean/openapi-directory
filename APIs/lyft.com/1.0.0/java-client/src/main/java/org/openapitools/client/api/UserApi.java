/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CancellationCostError;
import org.openapitools.client.model.CancellationRequest;
import org.openapitools.client.model.Location;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.RatingRequest;
import org.openapitools.client.model.Ride;
import org.openapitools.client.model.RideDetail;
import org.openapitools.client.model.RideReceipt;
import org.openapitools.client.model.RideRequest;
import org.openapitools.client.model.RideRequestError;
import org.openapitools.client.model.RidesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelRide
     * @param id The ID of the ride (required)
     * @param request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully canceled the ride </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You cannot cancel this ride </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRideCall(String id, CancellationRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/rides/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRideValidateBeforeCall(String id, CancellationRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelRide(Async)");
        }

        return cancelRideCall(id, request, _callback);

    }

    /**
     * Cancel a ongoing requested ride
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     * @param id The ID of the ride (required)
     * @param request  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully canceled the ride </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You cannot cancel this ride </td><td>  -  </td></tr>
     </table>
     */
    public void cancelRide(String id, CancellationRequest request) throws ApiException {
        cancelRideWithHttpInfo(id, request);
    }

    /**
     * Cancel a ongoing requested ride
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     * @param id The ID of the ride (required)
     * @param request  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully canceled the ride </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You cannot cancel this ride </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelRideWithHttpInfo(String id, CancellationRequest request) throws ApiException {
        okhttp3.Call localVarCall = cancelRideValidateBeforeCall(id, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a ongoing requested ride (asynchronously)
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     * @param id The ID of the ride (required)
     * @param request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully canceled the ride </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You cannot cancel this ride </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRideAsync(String id, CancellationRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRideValidateBeforeCall(id, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfile
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID was found and returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProfileCall(_callback);

    }

    /**
     * The user&#39;s general info
     * The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID was found and returned </td><td>  -  </td></tr>
     </table>
     */
    public Profile getProfile() throws ApiException {
        ApiResponse<Profile> localVarResp = getProfileWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * The user&#39;s general info
     * The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID was found and returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> getProfileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProfileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The user&#39;s general info (asynchronously)
     * The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User ID was found and returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfileAsync(final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRide
     * @param id The ID of the ride (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRideCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rides/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRideValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRide(Async)");
        }

        return getRideCall(id, _callback);

    }

    /**
     * Get the ride detail of a given ride ID
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     * @param id The ID of the ride (required)
     * @return RideDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public RideDetail getRide(String id) throws ApiException {
        ApiResponse<RideDetail> localVarResp = getRideWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the ride detail of a given ride ID
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     * @param id The ID of the ride (required)
     * @return ApiResponse&lt;RideDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RideDetail> getRideWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRideValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RideDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the ride detail of a given ride ID (asynchronously)
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     * @param id The ID of the ride (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRideAsync(String id, final ApiCallback<RideDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRideValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RideDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRideReceipt
     * @param id The ID of the ride (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride receipt information including cancel penalty if applicable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride receipt found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRideReceiptCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rides/{id}/receipt"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRideReceiptValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRideReceipt(Async)");
        }

        return getRideReceiptCall(id, _callback);

    }

    /**
     * Get the receipt of the rides.
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     * @param id The ID of the ride (required)
     * @return RideReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride receipt information including cancel penalty if applicable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride receipt found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public RideReceipt getRideReceipt(String id) throws ApiException {
        ApiResponse<RideReceipt> localVarResp = getRideReceiptWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the receipt of the rides.
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     * @param id The ID of the ride (required)
     * @return ApiResponse&lt;RideReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride receipt information including cancel penalty if applicable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride receipt found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RideReceipt> getRideReceiptWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRideReceiptValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RideReceipt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the receipt of the rides. (asynchronously)
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     * @param id The ID of the ride (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed ride receipt information including cancel penalty if applicable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride receipt found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRideReceiptAsync(String id, final ApiCallback<RideReceipt> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRideReceiptValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RideReceipt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRides
     * @param startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (required)
     * @param endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (optional)
     * @param limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRidesCall(OffsetDateTime startTime, OffsetDateTime endTime, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRidesValidateBeforeCall(OffsetDateTime startTime, OffsetDateTime endTime, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getRides(Async)");
        }

        return getRidesCall(startTime, endTime, limit, _callback);

    }

    /**
     * List rides
     * Get a list of past &amp; current rides for this passenger. 
     * @param startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (required)
     * @param endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (optional)
     * @param limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (optional, default to 10)
     * @return RidesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public RidesResponse getRides(OffsetDateTime startTime, OffsetDateTime endTime, Integer limit) throws ApiException {
        ApiResponse<RidesResponse> localVarResp = getRidesWithHttpInfo(startTime, endTime, limit);
        return localVarResp.getData();
    }

    /**
     * List rides
     * Get a list of past &amp; current rides for this passenger. 
     * @param startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (required)
     * @param endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (optional)
     * @param limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (optional, default to 10)
     * @return ApiResponse&lt;RidesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RidesResponse> getRidesWithHttpInfo(OffsetDateTime startTime, OffsetDateTime endTime, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRidesValidateBeforeCall(startTime, endTime, limit, null);
        Type localVarReturnType = new TypeToken<RidesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rides (asynchronously)
     * Get a list of past &amp; current rides for this passenger. 
     * @param startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (required)
     * @param endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (optional)
     * @param limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRidesAsync(OffsetDateTime startTime, OffsetDateTime endTime, Integer limit, final ApiCallback<RidesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRidesValidateBeforeCall(startTime, endTime, limit, _callback);
        Type localVarReturnType = new TypeToken<RidesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newRide
     * @param request Ride request information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newRideCall(Ride request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/rides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newRideValidateBeforeCall(Ride request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling newRide(Async)");
        }

        return newRideCall(request, _callback);

    }

    /**
     * Request a Lyft
     * Request a Lyft come pick you up at the given location. 
     * @param request Ride request information (required)
     * @return RideRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride  </td><td>  -  </td></tr>
     </table>
     */
    public RideRequest newRide(Ride request) throws ApiException {
        ApiResponse<RideRequest> localVarResp = newRideWithHttpInfo(request);
        return localVarResp.getData();
    }

    /**
     * Request a Lyft
     * Request a Lyft come pick you up at the given location. 
     * @param request Ride request information (required)
     * @return ApiResponse&lt;RideRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RideRequest> newRideWithHttpInfo(Ride request) throws ApiException {
        okhttp3.Call localVarCall = newRideValidateBeforeCall(request, null);
        Type localVarReturnType = new TypeToken<RideRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a Lyft (asynchronously)
     * Request a Lyft come pick you up at the given location. 
     * @param request Ride request information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newRideAsync(Ride request, final ApiCallback<RideRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = newRideValidateBeforeCall(request, _callback);
        Type localVarReturnType = new TypeToken<RideRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRideDestination
     * @param id The ID of the ride (required)
     * @param request The coordinates and optional address of the destination (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the destination. Returns the new destination. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideDestinationCall(String id, Location request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/rides/{id}/destination"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRideDestinationValidateBeforeCall(String id, Location request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setRideDestination(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setRideDestination(Async)");
        }

        return setRideDestinationCall(id, request, _callback);

    }

    /**
     * Update the destination of the ride
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     * @param id The ID of the ride (required)
     * @param request The coordinates and optional address of the destination (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the destination. Returns the new destination. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public Location setRideDestination(String id, Location request) throws ApiException {
        ApiResponse<Location> localVarResp = setRideDestinationWithHttpInfo(id, request);
        return localVarResp.getData();
    }

    /**
     * Update the destination of the ride
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     * @param id The ID of the ride (required)
     * @param request The coordinates and optional address of the destination (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the destination. Returns the new destination. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> setRideDestinationWithHttpInfo(String id, Location request) throws ApiException {
        okhttp3.Call localVarCall = setRideDestinationValidateBeforeCall(id, request, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the destination of the ride (asynchronously)
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     * @param id The ID of the ride (required)
     * @param request The coordinates and optional address of the destination (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the destination. Returns the new destination. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No ride found with provided ride ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideDestinationAsync(String id, Location request, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRideDestinationValidateBeforeCall(id, request, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRideRating
     * @param id The ID of the ride (required)
     * @param request The rating and optional feedback (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added the rating </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status)  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideRatingCall(String id, RatingRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/rides/{id}/rating"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRideRatingValidateBeforeCall(String id, RatingRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setRideRating(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setRideRating(Async)");
        }

        return setRideRatingCall(id, request, _callback);

    }

    /**
     * Add the passenger&#39;s rating, feedback, and tip
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     * @param id The ID of the ride (required)
     * @param request The rating and optional feedback (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added the rating </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status)  </td><td>  -  </td></tr>
     </table>
     */
    public void setRideRating(String id, RatingRequest request) throws ApiException {
        setRideRatingWithHttpInfo(id, request);
    }

    /**
     * Add the passenger&#39;s rating, feedback, and tip
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     * @param id The ID of the ride (required)
     * @param request The rating and optional feedback (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added the rating </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status)  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setRideRatingWithHttpInfo(String id, RatingRequest request) throws ApiException {
        okhttp3.Call localVarCall = setRideRatingValidateBeforeCall(id, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add the passenger&#39;s rating, feedback, and tip (asynchronously)
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     * @param id The ID of the ride (required)
     * @param request The rating and optional feedback (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added the rating </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status)  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideRatingAsync(String id, RatingRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRideRatingValidateBeforeCall(id, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
