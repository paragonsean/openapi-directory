/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PricingDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingDetails {
  public static final String SERIALIZED_NAME_BASE_CHARGE = "base_charge";
  @SerializedName(SERIALIZED_NAME_BASE_CHARGE)
  private Integer baseCharge;

  public static final String SERIALIZED_NAME_CANCEL_PENALTY_AMOUNT = "cancel_penalty_amount";
  @SerializedName(SERIALIZED_NAME_CANCEL_PENALTY_AMOUNT)
  private Integer cancelPenaltyAmount;

  public static final String SERIALIZED_NAME_COST_MINIMUM = "cost_minimum";
  @SerializedName(SERIALIZED_NAME_COST_MINIMUM)
  private Integer costMinimum;

  public static final String SERIALIZED_NAME_COST_PER_MILE = "cost_per_mile";
  @SerializedName(SERIALIZED_NAME_COST_PER_MILE)
  private Integer costPerMile;

  public static final String SERIALIZED_NAME_COST_PER_MINUTE = "cost_per_minute";
  @SerializedName(SERIALIZED_NAME_COST_PER_MINUTE)
  private Integer costPerMinute;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_TRUST_AND_SERVICE = "trust_and_service";
  @SerializedName(SERIALIZED_NAME_TRUST_AND_SERVICE)
  private Integer trustAndService;

  public PricingDetails() {
  }

  public PricingDetails baseCharge(Integer baseCharge) {
    this.baseCharge = baseCharge;
    return this;
  }

  /**
   * The base charge of the trip
   * @return baseCharge
   */
  @javax.annotation.Nullable
  public Integer getBaseCharge() {
    return baseCharge;
  }

  public void setBaseCharge(Integer baseCharge) {
    this.baseCharge = baseCharge;
  }


  public PricingDetails cancelPenaltyAmount(Integer cancelPenaltyAmount) {
    this.cancelPenaltyAmount = cancelPenaltyAmount;
    return this;
  }

  /**
   * The charge amount if cancel penalty is involved
   * @return cancelPenaltyAmount
   */
  @javax.annotation.Nullable
  public Integer getCancelPenaltyAmount() {
    return cancelPenaltyAmount;
  }

  public void setCancelPenaltyAmount(Integer cancelPenaltyAmount) {
    this.cancelPenaltyAmount = cancelPenaltyAmount;
  }


  public PricingDetails costMinimum(Integer costMinimum) {
    this.costMinimum = costMinimum;
    return this;
  }

  /**
   * The minimum charge for the trip
   * @return costMinimum
   */
  @javax.annotation.Nullable
  public Integer getCostMinimum() {
    return costMinimum;
  }

  public void setCostMinimum(Integer costMinimum) {
    this.costMinimum = costMinimum;
  }


  public PricingDetails costPerMile(Integer costPerMile) {
    this.costPerMile = costPerMile;
    return this;
  }

  /**
   * The cost per mile
   * @return costPerMile
   */
  @javax.annotation.Nullable
  public Integer getCostPerMile() {
    return costPerMile;
  }

  public void setCostPerMile(Integer costPerMile) {
    this.costPerMile = costPerMile;
  }


  public PricingDetails costPerMinute(Integer costPerMinute) {
    this.costPerMinute = costPerMinute;
    return this;
  }

  /**
   * The cost per minute
   * @return costPerMinute
   */
  @javax.annotation.Nullable
  public Integer getCostPerMinute() {
    return costPerMinute;
  }

  public void setCostPerMinute(Integer costPerMinute) {
    this.costPerMinute = costPerMinute;
  }


  public PricingDetails currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The ISO 4217 currency code for the amount (e.g. USD)
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PricingDetails trustAndService(Integer trustAndService) {
    this.trustAndService = trustAndService;
    return this;
  }

  /**
   * Service fee
   * @return trustAndService
   */
  @javax.annotation.Nullable
  public Integer getTrustAndService() {
    return trustAndService;
  }

  public void setTrustAndService(Integer trustAndService) {
    this.trustAndService = trustAndService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingDetails pricingDetails = (PricingDetails) o;
    return Objects.equals(this.baseCharge, pricingDetails.baseCharge) &&
        Objects.equals(this.cancelPenaltyAmount, pricingDetails.cancelPenaltyAmount) &&
        Objects.equals(this.costMinimum, pricingDetails.costMinimum) &&
        Objects.equals(this.costPerMile, pricingDetails.costPerMile) &&
        Objects.equals(this.costPerMinute, pricingDetails.costPerMinute) &&
        Objects.equals(this.currency, pricingDetails.currency) &&
        Objects.equals(this.trustAndService, pricingDetails.trustAndService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCharge, cancelPenaltyAmount, costMinimum, costPerMile, costPerMinute, currency, trustAndService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingDetails {\n");
    sb.append("    baseCharge: ").append(toIndentedString(baseCharge)).append("\n");
    sb.append("    cancelPenaltyAmount: ").append(toIndentedString(cancelPenaltyAmount)).append("\n");
    sb.append("    costMinimum: ").append(toIndentedString(costMinimum)).append("\n");
    sb.append("    costPerMile: ").append(toIndentedString(costPerMile)).append("\n");
    sb.append("    costPerMinute: ").append(toIndentedString(costPerMinute)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    trustAndService: ").append(toIndentedString(trustAndService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_charge");
    openapiFields.add("cancel_penalty_amount");
    openapiFields.add("cost_minimum");
    openapiFields.add("cost_per_mile");
    openapiFields.add("cost_per_minute");
    openapiFields.add("currency");
    openapiFields.add("trust_and_service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingDetails is not found in the empty JSON string", PricingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingDetails>() {
           @Override
           public void write(JsonWriter out, PricingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingDetails
   * @throws IOException if the JSON string is invalid with respect to PricingDetails
   */
  public static PricingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingDetails.class);
  }

  /**
   * Convert an instance of PricingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

