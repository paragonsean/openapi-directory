/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The ID of the ride type
 */
@JsonAdapter(RideTypeEnumWithOther.Adapter.class)
public enum RideTypeEnumWithOther {
  
  LYFT("lyft"),
  
  LYFT_LINE("lyft_line"),
  
  LYFT_PLUS("lyft_plus"),
  
  LYFT_PREMIER("lyft_premier"),
  
  LYFT_LUX("lyft_lux"),
  
  LYFT_LUXSUV("lyft_luxsuv"),
  
  OTHER("other");

  private String value;

  RideTypeEnumWithOther(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RideTypeEnumWithOther fromValue(String value) {
    for (RideTypeEnumWithOther b : RideTypeEnumWithOther.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RideTypeEnumWithOther> {
    @Override
    public void write(final JsonWriter jsonWriter, final RideTypeEnumWithOther enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RideTypeEnumWithOther read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return RideTypeEnumWithOther.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    RideTypeEnumWithOther.fromValue(value);
  }
}

