/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.RideTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a requested, ongoing, or finished Lyft ride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ride {
  public static final String SERIALIZED_NAME_COST_TOKEN = "cost_token";
  @SerializedName(SERIALIZED_NAME_COST_TOKEN)
  private String costToken;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Location destination;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private Location origin;

  public static final String SERIALIZED_NAME_PRIMETIME_CONFIRMATION_TOKEN = "primetime_confirmation_token";
  @SerializedName(SERIALIZED_NAME_PRIMETIME_CONFIRMATION_TOKEN)
  private String primetimeConfirmationToken;

  public static final String SERIALIZED_NAME_RIDE_TYPE = "ride_type";
  @SerializedName(SERIALIZED_NAME_RIDE_TYPE)
  private RideTypeEnum rideType;

  public Ride() {
  }

  public Ride costToken(String costToken) {
    this.costToken = costToken;
    return this;
  }

  /**
   * A token that confirms the user has accepted current Prime Time and/or fixed price charges
   * @return costToken
   */
  @javax.annotation.Nullable
  public String getCostToken() {
    return costToken;
  }

  public void setCostToken(String costToken) {
    this.costToken = costToken;
  }


  public Ride destination(Location destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The *requested* location for passenger drop off
   * @return destination
   */
  @javax.annotation.Nullable
  public Location getDestination() {
    return destination;
  }

  public void setDestination(Location destination) {
    this.destination = destination;
  }


  public Ride origin(Location origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The *requested* location for passenger pickup
   * @return origin
   */
  @javax.annotation.Nonnull
  public Location getOrigin() {
    return origin;
  }

  public void setOrigin(Location origin) {
    this.origin = origin;
  }


  public Ride primetimeConfirmationToken(String primetimeConfirmationToken) {
    this.primetimeConfirmationToken = primetimeConfirmationToken;
    return this;
  }

  /**
   * A token that confirms the user has accepted current primetime charges (Deprecated)
   * @return primetimeConfirmationToken
   */
  @javax.annotation.Nullable
  public String getPrimetimeConfirmationToken() {
    return primetimeConfirmationToken;
  }

  public void setPrimetimeConfirmationToken(String primetimeConfirmationToken) {
    this.primetimeConfirmationToken = primetimeConfirmationToken;
  }


  public Ride rideType(RideTypeEnum rideType) {
    this.rideType = rideType;
    return this;
  }

  /**
   * Get rideType
   * @return rideType
   */
  @javax.annotation.Nonnull
  public RideTypeEnum getRideType() {
    return rideType;
  }

  public void setRideType(RideTypeEnum rideType) {
    this.rideType = rideType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ride ride = (Ride) o;
    return Objects.equals(this.costToken, ride.costToken) &&
        Objects.equals(this.destination, ride.destination) &&
        Objects.equals(this.origin, ride.origin) &&
        Objects.equals(this.primetimeConfirmationToken, ride.primetimeConfirmationToken) &&
        Objects.equals(this.rideType, ride.rideType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costToken, destination, origin, primetimeConfirmationToken, rideType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ride {\n");
    sb.append("    costToken: ").append(toIndentedString(costToken)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    primetimeConfirmationToken: ").append(toIndentedString(primetimeConfirmationToken)).append("\n");
    sb.append("    rideType: ").append(toIndentedString(rideType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost_token");
    openapiFields.add("destination");
    openapiFields.add("origin");
    openapiFields.add("primetime_confirmation_token");
    openapiFields.add("ride_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("ride_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ride is not found in the empty JSON string", Ride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ride.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cost_token") != null && !jsonObj.get("cost_token").isJsonNull()) && !jsonObj.get("cost_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_token").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("destination"));
      }
      // validate the required field `origin`
      Location.validateJsonElement(jsonObj.get("origin"));
      if ((jsonObj.get("primetime_confirmation_token") != null && !jsonObj.get("primetime_confirmation_token").isJsonNull()) && !jsonObj.get("primetime_confirmation_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primetime_confirmation_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primetime_confirmation_token").toString()));
      }
      // validate the required field `ride_type`
      RideTypeEnum.validateJsonElement(jsonObj.get("ride_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ride.class));

       return (TypeAdapter<T>) new TypeAdapter<Ride>() {
           @Override
           public void write(JsonWriter out, Ride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ride
   * @throws IOException if the JSON string is invalid with respect to Ride
   */
  public static Ride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ride.class);
  }

  /**
   * Convert an instance of Ride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

