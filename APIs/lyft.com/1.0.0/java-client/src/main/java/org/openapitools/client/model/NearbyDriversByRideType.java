/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NearbyDriver;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NearbyDriversByRideType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NearbyDriversByRideType {
  public static final String SERIALIZED_NAME_DRIVERS = "drivers";
  @SerializedName(SERIALIZED_NAME_DRIVERS)
  private List<NearbyDriver> drivers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RIDE_TYPE = "ride_type";
  @SerializedName(SERIALIZED_NAME_RIDE_TYPE)
  private String rideType;

  public NearbyDriversByRideType() {
  }

  public NearbyDriversByRideType drivers(List<NearbyDriver> drivers) {
    this.drivers = drivers;
    return this;
  }

  public NearbyDriversByRideType addDriversItem(NearbyDriver driversItem) {
    if (this.drivers == null) {
      this.drivers = new ArrayList<>();
    }
    this.drivers.add(driversItem);
    return this;
  }

  /**
   * list of nearby drivers group by ride type sorted by eta
   * @return drivers
   */
  @javax.annotation.Nullable
  public List<NearbyDriver> getDrivers() {
    return drivers;
  }

  public void setDrivers(List<NearbyDriver> drivers) {
    this.drivers = drivers;
  }


  public NearbyDriversByRideType rideType(String rideType) {
    this.rideType = rideType;
    return this;
  }

  /**
   * driver&#39;s ride type. if driver is eligable for several ride types, he will be duplicated.
   * @return rideType
   */
  @javax.annotation.Nullable
  public String getRideType() {
    return rideType;
  }

  public void setRideType(String rideType) {
    this.rideType = rideType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NearbyDriversByRideType nearbyDriversByRideType = (NearbyDriversByRideType) o;
    return Objects.equals(this.drivers, nearbyDriversByRideType.drivers) &&
        Objects.equals(this.rideType, nearbyDriversByRideType.rideType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drivers, rideType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NearbyDriversByRideType {\n");
    sb.append("    drivers: ").append(toIndentedString(drivers)).append("\n");
    sb.append("    rideType: ").append(toIndentedString(rideType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("drivers");
    openapiFields.add("ride_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NearbyDriversByRideType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NearbyDriversByRideType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NearbyDriversByRideType is not found in the empty JSON string", NearbyDriversByRideType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NearbyDriversByRideType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NearbyDriversByRideType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("drivers") != null && !jsonObj.get("drivers").isJsonNull()) {
        JsonArray jsonArraydrivers = jsonObj.getAsJsonArray("drivers");
        if (jsonArraydrivers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drivers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drivers` to be an array in the JSON string but got `%s`", jsonObj.get("drivers").toString()));
          }

          // validate the optional field `drivers` (array)
          for (int i = 0; i < jsonArraydrivers.size(); i++) {
            NearbyDriver.validateJsonElement(jsonArraydrivers.get(i));
          };
        }
      }
      if ((jsonObj.get("ride_type") != null && !jsonObj.get("ride_type").isJsonNull()) && !jsonObj.get("ride_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ride_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ride_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NearbyDriversByRideType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NearbyDriversByRideType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NearbyDriversByRideType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NearbyDriversByRideType.class));

       return (TypeAdapter<T>) new TypeAdapter<NearbyDriversByRideType>() {
           @Override
           public void write(JsonWriter out, NearbyDriversByRideType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NearbyDriversByRideType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NearbyDriversByRideType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NearbyDriversByRideType
   * @throws IOException if the JSON string is invalid with respect to NearbyDriversByRideType
   */
  public static NearbyDriversByRideType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NearbyDriversByRideType.class);
  }

  /**
   * Convert an instance of NearbyDriversByRideType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

