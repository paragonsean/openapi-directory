/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.PassengerDetail;
import org.openapitools.client.model.RideStatusEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Minimal set of ride details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:02.435628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RideRequest {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Location destination;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private Location origin;

  public static final String SERIALIZED_NAME_PASSENGER = "passenger";
  @SerializedName(SERIALIZED_NAME_PASSENGER)
  private PassengerDetail passenger;

  public static final String SERIALIZED_NAME_RIDE_ID = "ride_id";
  @SerializedName(SERIALIZED_NAME_RIDE_ID)
  private String rideId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RideStatusEnum status;

  public RideRequest() {
  }

  public RideRequest destination(Location destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The *requested* location for passenger drop off
   * @return destination
   */
  @javax.annotation.Nullable
  public Location getDestination() {
    return destination;
  }

  public void setDestination(Location destination) {
    this.destination = destination;
  }


  public RideRequest origin(Location origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The *requested* location for passenger pickup
   * @return origin
   */
  @javax.annotation.Nullable
  public Location getOrigin() {
    return origin;
  }

  public void setOrigin(Location origin) {
    this.origin = origin;
  }


  public RideRequest passenger(PassengerDetail passenger) {
    this.passenger = passenger;
    return this;
  }

  /**
   * Get passenger
   * @return passenger
   */
  @javax.annotation.Nullable
  public PassengerDetail getPassenger() {
    return passenger;
  }

  public void setPassenger(PassengerDetail passenger) {
    this.passenger = passenger;
  }


  public RideRequest rideId(String rideId) {
    this.rideId = rideId;
    return this;
  }

  /**
   * The ID of the requested ride
   * @return rideId
   */
  @javax.annotation.Nullable
  public String getRideId() {
    return rideId;
  }

  public void setRideId(String rideId) {
    this.rideId = rideId;
  }


  public RideRequest status(RideStatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public RideStatusEnum getStatus() {
    return status;
  }

  public void setStatus(RideStatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RideRequest rideRequest = (RideRequest) o;
    return Objects.equals(this.destination, rideRequest.destination) &&
        Objects.equals(this.origin, rideRequest.origin) &&
        Objects.equals(this.passenger, rideRequest.passenger) &&
        Objects.equals(this.rideId, rideRequest.rideId) &&
        Objects.equals(this.status, rideRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, origin, passenger, rideId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RideRequest {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    passenger: ").append(toIndentedString(passenger)).append("\n");
    sb.append("    rideId: ").append(toIndentedString(rideId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("origin");
    openapiFields.add("passenger");
    openapiFields.add("ride_id");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RideRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RideRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RideRequest is not found in the empty JSON string", RideRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RideRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RideRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("destination"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("origin"));
      }
      // validate the optional field `passenger`
      if (jsonObj.get("passenger") != null && !jsonObj.get("passenger").isJsonNull()) {
        PassengerDetail.validateJsonElement(jsonObj.get("passenger"));
      }
      if ((jsonObj.get("ride_id") != null && !jsonObj.get("ride_id").isJsonNull()) && !jsonObj.get("ride_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ride_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ride_id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        RideStatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RideRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RideRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RideRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RideRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RideRequest>() {
           @Override
           public void write(JsonWriter out, RideRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RideRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RideRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RideRequest
   * @throws IOException if the JSON string is invalid with respect to RideRequest
   */
  public static RideRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RideRequest.class);
  }

  /**
   * Convert an instance of RideRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

