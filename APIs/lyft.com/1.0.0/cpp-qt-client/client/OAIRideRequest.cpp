/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideRequest::OAIRideRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideRequest::OAIRideRequest() {
    this->initializeModel();
}

OAIRideRequest::~OAIRideRequest() {}

void OAIRideRequest::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_passenger_isSet = false;
    m_passenger_isValid = false;

    m_ride_id_isSet = false;
    m_ride_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRideRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRideRequest::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_passenger_isValid = ::OpenAPI::fromJsonValue(m_passenger, json[QString("passenger")]);
    m_passenger_isSet = !json[QString("passenger")].isNull() && m_passenger_isValid;

    m_ride_id_isValid = ::OpenAPI::fromJsonValue(m_ride_id, json[QString("ride_id")]);
    m_ride_id_isSet = !json[QString("ride_id")].isNull() && m_ride_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRideRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRideRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_passenger.isSet()) {
        obj.insert(QString("passenger"), ::OpenAPI::toJsonValue(m_passenger));
    }
    if (m_ride_id_isSet) {
        obj.insert(QString("ride_id"), ::OpenAPI::toJsonValue(m_ride_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAILocation OAIRideRequest::getDestination() const {
    return m_destination;
}
void OAIRideRequest::setDestination(const OAILocation &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIRideRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIRideRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

OAILocation OAIRideRequest::getOrigin() const {
    return m_origin;
}
void OAIRideRequest::setOrigin(const OAILocation &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIRideRequest::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIRideRequest::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPassengerDetail OAIRideRequest::getPassenger() const {
    return m_passenger;
}
void OAIRideRequest::setPassenger(const OAIPassengerDetail &passenger) {
    m_passenger = passenger;
    m_passenger_isSet = true;
}

bool OAIRideRequest::is_passenger_Set() const{
    return m_passenger_isSet;
}

bool OAIRideRequest::is_passenger_Valid() const{
    return m_passenger_isValid;
}

QString OAIRideRequest::getRideId() const {
    return m_ride_id;
}
void OAIRideRequest::setRideId(const QString &ride_id) {
    m_ride_id = ride_id;
    m_ride_id_isSet = true;
}

bool OAIRideRequest::is_ride_id_Set() const{
    return m_ride_id_isSet;
}

bool OAIRideRequest::is_ride_id_Valid() const{
    return m_ride_id_isValid;
}

OAIRideStatusEnum OAIRideRequest::getStatus() const {
    return m_status;
}
void OAIRideRequest::setStatus(const OAIRideStatusEnum &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRideRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRideRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRideRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRideRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
