/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicApi_H
#define OAI_OAIPublicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAICostEstimateResponse.h"
#include "OAIEtaEstimateResponse.h"
#include "OAINearbyDriversResponse.h"
#include "OAIRideTypesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicApi : public QObject {
    Q_OBJECT

public:
    OAIPublicApi(const int timeOut = 0);
    ~OAIPublicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start_lat double [required]
    * @param[in]  start_lng double [required]
    * @param[in]  ride_type QString [optional]
    * @param[in]  end_lat double [optional]
    * @param[in]  end_lng double [optional]
    */
    virtual void getCost(const double &start_lat, const double &start_lng, const ::OpenAPI::OptionalParam<QString> &ride_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &end_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_lng = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    */
    virtual void getDrivers(const double &lat, const double &lng);

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    * @param[in]  destination_lat double [optional]
    * @param[in]  destination_lng double [optional]
    * @param[in]  ride_type QString [optional]
    */
    virtual void getETA(const double &lat, const double &lng, const ::OpenAPI::OptionalParam<double> &destination_lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &destination_lng = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ride_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lng double [required]
    * @param[in]  ride_type QString [optional]
    */
    virtual void getRideTypes(const double &lat, const double &lng, const ::OpenAPI::OptionalParam<QString> &ride_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCostCallback(OAIHttpRequestWorker *worker);
    void getDriversCallback(OAIHttpRequestWorker *worker);
    void getETACallback(OAIHttpRequestWorker *worker);
    void getRideTypesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCostSignal(OAICostEstimateResponse summary);
    void getDriversSignal(OAINearbyDriversResponse summary);
    void getETASignal(OAIEtaEstimateResponse summary);
    void getRideTypesSignal(OAIRideTypesResponse summary);


    void getCostSignalFull(OAIHttpRequestWorker *worker, OAICostEstimateResponse summary);
    void getDriversSignalFull(OAIHttpRequestWorker *worker, OAINearbyDriversResponse summary);
    void getETASignalFull(OAIHttpRequestWorker *worker, OAIEtaEstimateResponse summary);
    void getRideTypesSignalFull(OAIHttpRequestWorker *worker, OAIRideTypesResponse summary);

    Q_DECL_DEPRECATED_X("Use getCostSignalError() instead")
    void getCostSignalE(OAICostEstimateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostSignalError(OAICostEstimateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDriversSignalError() instead")
    void getDriversSignalE(OAINearbyDriversResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDriversSignalError(OAINearbyDriversResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getETASignalError() instead")
    void getETASignalE(OAIEtaEstimateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getETASignalError(OAIEtaEstimateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRideTypesSignalError() instead")
    void getRideTypesSignalE(OAIRideTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRideTypesSignalError(OAIRideTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCostSignalErrorFull() instead")
    void getCostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDriversSignalErrorFull() instead")
    void getDriversSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDriversSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getETASignalErrorFull() instead")
    void getETASignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getETASignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRideTypesSignalErrorFull() instead")
    void getRideTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRideTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
