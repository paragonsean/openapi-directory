/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingDetails::OAIPricingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingDetails::OAIPricingDetails() {
    this->initializeModel();
}

OAIPricingDetails::~OAIPricingDetails() {}

void OAIPricingDetails::initializeModel() {

    m_base_charge_isSet = false;
    m_base_charge_isValid = false;

    m_cancel_penalty_amount_isSet = false;
    m_cancel_penalty_amount_isValid = false;

    m_cost_minimum_isSet = false;
    m_cost_minimum_isValid = false;

    m_cost_per_mile_isSet = false;
    m_cost_per_mile_isValid = false;

    m_cost_per_minute_isSet = false;
    m_cost_per_minute_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_trust_and_service_isSet = false;
    m_trust_and_service_isValid = false;
}

void OAIPricingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingDetails::fromJsonObject(QJsonObject json) {

    m_base_charge_isValid = ::OpenAPI::fromJsonValue(m_base_charge, json[QString("base_charge")]);
    m_base_charge_isSet = !json[QString("base_charge")].isNull() && m_base_charge_isValid;

    m_cancel_penalty_amount_isValid = ::OpenAPI::fromJsonValue(m_cancel_penalty_amount, json[QString("cancel_penalty_amount")]);
    m_cancel_penalty_amount_isSet = !json[QString("cancel_penalty_amount")].isNull() && m_cancel_penalty_amount_isValid;

    m_cost_minimum_isValid = ::OpenAPI::fromJsonValue(m_cost_minimum, json[QString("cost_minimum")]);
    m_cost_minimum_isSet = !json[QString("cost_minimum")].isNull() && m_cost_minimum_isValid;

    m_cost_per_mile_isValid = ::OpenAPI::fromJsonValue(m_cost_per_mile, json[QString("cost_per_mile")]);
    m_cost_per_mile_isSet = !json[QString("cost_per_mile")].isNull() && m_cost_per_mile_isValid;

    m_cost_per_minute_isValid = ::OpenAPI::fromJsonValue(m_cost_per_minute, json[QString("cost_per_minute")]);
    m_cost_per_minute_isSet = !json[QString("cost_per_minute")].isNull() && m_cost_per_minute_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_trust_and_service_isValid = ::OpenAPI::fromJsonValue(m_trust_and_service, json[QString("trust_and_service")]);
    m_trust_and_service_isSet = !json[QString("trust_and_service")].isNull() && m_trust_and_service_isValid;
}

QString OAIPricingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_base_charge_isSet) {
        obj.insert(QString("base_charge"), ::OpenAPI::toJsonValue(m_base_charge));
    }
    if (m_cancel_penalty_amount_isSet) {
        obj.insert(QString("cancel_penalty_amount"), ::OpenAPI::toJsonValue(m_cancel_penalty_amount));
    }
    if (m_cost_minimum_isSet) {
        obj.insert(QString("cost_minimum"), ::OpenAPI::toJsonValue(m_cost_minimum));
    }
    if (m_cost_per_mile_isSet) {
        obj.insert(QString("cost_per_mile"), ::OpenAPI::toJsonValue(m_cost_per_mile));
    }
    if (m_cost_per_minute_isSet) {
        obj.insert(QString("cost_per_minute"), ::OpenAPI::toJsonValue(m_cost_per_minute));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_trust_and_service_isSet) {
        obj.insert(QString("trust_and_service"), ::OpenAPI::toJsonValue(m_trust_and_service));
    }
    return obj;
}

qint32 OAIPricingDetails::getBaseCharge() const {
    return m_base_charge;
}
void OAIPricingDetails::setBaseCharge(const qint32 &base_charge) {
    m_base_charge = base_charge;
    m_base_charge_isSet = true;
}

bool OAIPricingDetails::is_base_charge_Set() const{
    return m_base_charge_isSet;
}

bool OAIPricingDetails::is_base_charge_Valid() const{
    return m_base_charge_isValid;
}

qint32 OAIPricingDetails::getCancelPenaltyAmount() const {
    return m_cancel_penalty_amount;
}
void OAIPricingDetails::setCancelPenaltyAmount(const qint32 &cancel_penalty_amount) {
    m_cancel_penalty_amount = cancel_penalty_amount;
    m_cancel_penalty_amount_isSet = true;
}

bool OAIPricingDetails::is_cancel_penalty_amount_Set() const{
    return m_cancel_penalty_amount_isSet;
}

bool OAIPricingDetails::is_cancel_penalty_amount_Valid() const{
    return m_cancel_penalty_amount_isValid;
}

qint32 OAIPricingDetails::getCostMinimum() const {
    return m_cost_minimum;
}
void OAIPricingDetails::setCostMinimum(const qint32 &cost_minimum) {
    m_cost_minimum = cost_minimum;
    m_cost_minimum_isSet = true;
}

bool OAIPricingDetails::is_cost_minimum_Set() const{
    return m_cost_minimum_isSet;
}

bool OAIPricingDetails::is_cost_minimum_Valid() const{
    return m_cost_minimum_isValid;
}

qint32 OAIPricingDetails::getCostPerMile() const {
    return m_cost_per_mile;
}
void OAIPricingDetails::setCostPerMile(const qint32 &cost_per_mile) {
    m_cost_per_mile = cost_per_mile;
    m_cost_per_mile_isSet = true;
}

bool OAIPricingDetails::is_cost_per_mile_Set() const{
    return m_cost_per_mile_isSet;
}

bool OAIPricingDetails::is_cost_per_mile_Valid() const{
    return m_cost_per_mile_isValid;
}

qint32 OAIPricingDetails::getCostPerMinute() const {
    return m_cost_per_minute;
}
void OAIPricingDetails::setCostPerMinute(const qint32 &cost_per_minute) {
    m_cost_per_minute = cost_per_minute;
    m_cost_per_minute_isSet = true;
}

bool OAIPricingDetails::is_cost_per_minute_Set() const{
    return m_cost_per_minute_isSet;
}

bool OAIPricingDetails::is_cost_per_minute_Valid() const{
    return m_cost_per_minute_isValid;
}

QString OAIPricingDetails::getCurrency() const {
    return m_currency;
}
void OAIPricingDetails::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPricingDetails::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPricingDetails::is_currency_Valid() const{
    return m_currency_isValid;
}

qint32 OAIPricingDetails::getTrustAndService() const {
    return m_trust_and_service;
}
void OAIPricingDetails::setTrustAndService(const qint32 &trust_and_service) {
    m_trust_and_service = trust_and_service;
    m_trust_and_service_isSet = true;
}

bool OAIPricingDetails::is_trust_and_service_Set() const{
    return m_trust_and_service_isSet;
}

bool OAIPricingDetails::is_trust_and_service_Valid() const{
    return m_trust_and_service_isValid;
}

bool OAIPricingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_penalty_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_per_mile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_and_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
