/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickupDropoffLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickupDropoffLocation::OAIPickupDropoffLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickupDropoffLocation::OAIPickupDropoffLocation() {
    this->initializeModel();
}

OAIPickupDropoffLocation::~OAIPickupDropoffLocation() {}

void OAIPickupDropoffLocation::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIPickupDropoffLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickupDropoffLocation::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIPickupDropoffLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickupDropoffLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

double OAIPickupDropoffLocation::getLat() const {
    return m_lat;
}
void OAIPickupDropoffLocation::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIPickupDropoffLocation::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIPickupDropoffLocation::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIPickupDropoffLocation::getLng() const {
    return m_lng;
}
void OAIPickupDropoffLocation::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIPickupDropoffLocation::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIPickupDropoffLocation::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIPickupDropoffLocation::getAddress() const {
    return m_address;
}
void OAIPickupDropoffLocation::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPickupDropoffLocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPickupDropoffLocation::is_address_Valid() const{
    return m_address_isValid;
}

QDateTime OAIPickupDropoffLocation::getTime() const {
    return m_time;
}
void OAIPickupDropoffLocation::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIPickupDropoffLocation::is_time_Set() const{
    return m_time_isSet;
}

bool OAIPickupDropoffLocation::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIPickupDropoffLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickupDropoffLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lat_isValid && m_lng_isValid && true;
}

} // namespace OpenAPI
