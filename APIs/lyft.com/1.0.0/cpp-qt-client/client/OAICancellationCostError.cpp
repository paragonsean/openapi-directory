/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancellationCostError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancellationCostError::OAICancellationCostError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancellationCostError::OAICancellationCostError() {
    this->initializeModel();
}

OAICancellationCostError::~OAICancellationCostError() {}

void OAICancellationCostError::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_duration_isSet = false;
    m_token_duration_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_error_detail_isSet = false;
    m_error_detail_isValid = false;
}

void OAICancellationCostError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancellationCostError::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_token_duration_isValid = ::OpenAPI::fromJsonValue(m_token_duration, json[QString("token_duration")]);
    m_token_duration_isSet = !json[QString("token_duration")].isNull() && m_token_duration_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("error_description")]);
    m_error_description_isSet = !json[QString("error_description")].isNull() && m_error_description_isValid;

    m_error_detail_isValid = ::OpenAPI::fromJsonValue(m_error_detail, json[QString("error_detail")]);
    m_error_detail_isSet = !json[QString("error_detail")].isNull() && m_error_detail_isValid;
}

QString OAICancellationCostError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancellationCostError::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_duration_isSet) {
        obj.insert(QString("token_duration"), ::OpenAPI::toJsonValue(m_token_duration));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("error_description"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_error_detail.size() > 0) {
        obj.insert(QString("error_detail"), ::OpenAPI::toJsonValue(m_error_detail));
    }
    return obj;
}

qint32 OAICancellationCostError::getAmount() const {
    return m_amount;
}
void OAICancellationCostError::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICancellationCostError::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICancellationCostError::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICancellationCostError::getCurrency() const {
    return m_currency;
}
void OAICancellationCostError::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICancellationCostError::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICancellationCostError::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICancellationCostError::getDescription() const {
    return m_description;
}
void OAICancellationCostError::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICancellationCostError::is_description_Set() const{
    return m_description_isSet;
}

bool OAICancellationCostError::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICancellationCostError::getToken() const {
    return m_token;
}
void OAICancellationCostError::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAICancellationCostError::is_token_Set() const{
    return m_token_isSet;
}

bool OAICancellationCostError::is_token_Valid() const{
    return m_token_isValid;
}

qint32 OAICancellationCostError::getTokenDuration() const {
    return m_token_duration;
}
void OAICancellationCostError::setTokenDuration(const qint32 &token_duration) {
    m_token_duration = token_duration;
    m_token_duration_isSet = true;
}

bool OAICancellationCostError::is_token_duration_Set() const{
    return m_token_duration_isSet;
}

bool OAICancellationCostError::is_token_duration_Valid() const{
    return m_token_duration_isValid;
}

QString OAICancellationCostError::getError() const {
    return m_error;
}
void OAICancellationCostError::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICancellationCostError::is_error_Set() const{
    return m_error_isSet;
}

bool OAICancellationCostError::is_error_Valid() const{
    return m_error_isValid;
}

QString OAICancellationCostError::getErrorDescription() const {
    return m_error_description;
}
void OAICancellationCostError::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAICancellationCostError::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAICancellationCostError::is_error_description_Valid() const{
    return m_error_description_isValid;
}

QList<OAIErrorDetail> OAICancellationCostError::getErrorDetail() const {
    return m_error_detail;
}
void OAICancellationCostError::setErrorDetail(const QList<OAIErrorDetail> &error_detail) {
    m_error_detail = error_detail;
    m_error_detail_isSet = true;
}

bool OAICancellationCostError::is_error_detail_Set() const{
    return m_error_detail_isSet;
}

bool OAICancellationCostError::is_error_detail_Valid() const{
    return m_error_detail_isValid;
}

bool OAICancellationCostError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancellationCostError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_currency_isValid && m_description_isValid && true;
}

} // namespace OpenAPI
