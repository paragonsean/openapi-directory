/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINearbyDriversByRideType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINearbyDriversByRideType::OAINearbyDriversByRideType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINearbyDriversByRideType::OAINearbyDriversByRideType() {
    this->initializeModel();
}

OAINearbyDriversByRideType::~OAINearbyDriversByRideType() {}

void OAINearbyDriversByRideType::initializeModel() {

    m_drivers_isSet = false;
    m_drivers_isValid = false;

    m_ride_type_isSet = false;
    m_ride_type_isValid = false;
}

void OAINearbyDriversByRideType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINearbyDriversByRideType::fromJsonObject(QJsonObject json) {

    m_drivers_isValid = ::OpenAPI::fromJsonValue(m_drivers, json[QString("drivers")]);
    m_drivers_isSet = !json[QString("drivers")].isNull() && m_drivers_isValid;

    m_ride_type_isValid = ::OpenAPI::fromJsonValue(m_ride_type, json[QString("ride_type")]);
    m_ride_type_isSet = !json[QString("ride_type")].isNull() && m_ride_type_isValid;
}

QString OAINearbyDriversByRideType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINearbyDriversByRideType::asJsonObject() const {
    QJsonObject obj;
    if (m_drivers.size() > 0) {
        obj.insert(QString("drivers"), ::OpenAPI::toJsonValue(m_drivers));
    }
    if (m_ride_type_isSet) {
        obj.insert(QString("ride_type"), ::OpenAPI::toJsonValue(m_ride_type));
    }
    return obj;
}

QList<OAINearbyDriver> OAINearbyDriversByRideType::getDrivers() const {
    return m_drivers;
}
void OAINearbyDriversByRideType::setDrivers(const QList<OAINearbyDriver> &drivers) {
    m_drivers = drivers;
    m_drivers_isSet = true;
}

bool OAINearbyDriversByRideType::is_drivers_Set() const{
    return m_drivers_isSet;
}

bool OAINearbyDriversByRideType::is_drivers_Valid() const{
    return m_drivers_isValid;
}

QString OAINearbyDriversByRideType::getRideType() const {
    return m_ride_type;
}
void OAINearbyDriversByRideType::setRideType(const QString &ride_type) {
    m_ride_type = ride_type;
    m_ride_type_isSet = true;
}

bool OAINearbyDriversByRideType::is_ride_type_Set() const{
    return m_ride_type_isSet;
}

bool OAINearbyDriversByRideType::is_ride_type_Valid() const{
    return m_ride_type_isValid;
}

bool OAINearbyDriversByRideType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drivers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINearbyDriversByRideType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
