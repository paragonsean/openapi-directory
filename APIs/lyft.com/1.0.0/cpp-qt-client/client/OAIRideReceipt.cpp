/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideReceipt::OAIRideReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideReceipt::OAIRideReceipt() {
    this->initializeModel();
}

OAIRideReceipt::~OAIRideReceipt() {}

void OAIRideReceipt::initializeModel() {

    m_charges_isSet = false;
    m_charges_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_requested_at_isSet = false;
    m_requested_at_isValid = false;

    m_ride_id_isSet = false;
    m_ride_id_isValid = false;

    m_ride_profile_isSet = false;
    m_ride_profile_isValid = false;
}

void OAIRideReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRideReceipt::fromJsonObject(QJsonObject json) {

    m_charges_isValid = ::OpenAPI::fromJsonValue(m_charges, json[QString("charges")]);
    m_charges_isSet = !json[QString("charges")].isNull() && m_charges_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("line_items")]);
    m_line_items_isSet = !json[QString("line_items")].isNull() && m_line_items_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_requested_at_isValid = ::OpenAPI::fromJsonValue(m_requested_at, json[QString("requested_at")]);
    m_requested_at_isSet = !json[QString("requested_at")].isNull() && m_requested_at_isValid;

    m_ride_id_isValid = ::OpenAPI::fromJsonValue(m_ride_id, json[QString("ride_id")]);
    m_ride_id_isSet = !json[QString("ride_id")].isNull() && m_ride_id_isValid;

    m_ride_profile_isValid = ::OpenAPI::fromJsonValue(m_ride_profile, json[QString("ride_profile")]);
    m_ride_profile_isSet = !json[QString("ride_profile")].isNull() && m_ride_profile_isValid;
}

QString OAIRideReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRideReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_charges.size() > 0) {
        obj.insert(QString("charges"), ::OpenAPI::toJsonValue(m_charges));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("line_items"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_requested_at_isSet) {
        obj.insert(QString("requested_at"), ::OpenAPI::toJsonValue(m_requested_at));
    }
    if (m_ride_id_isSet) {
        obj.insert(QString("ride_id"), ::OpenAPI::toJsonValue(m_ride_id));
    }
    if (m_ride_profile.isSet()) {
        obj.insert(QString("ride_profile"), ::OpenAPI::toJsonValue(m_ride_profile));
    }
    return obj;
}

QList<OAICharge> OAIRideReceipt::getCharges() const {
    return m_charges;
}
void OAIRideReceipt::setCharges(const QList<OAICharge> &charges) {
    m_charges = charges;
    m_charges_isSet = true;
}

bool OAIRideReceipt::is_charges_Set() const{
    return m_charges_isSet;
}

bool OAIRideReceipt::is_charges_Valid() const{
    return m_charges_isValid;
}

QList<OAILineItem> OAIRideReceipt::getLineItems() const {
    return m_line_items;
}
void OAIRideReceipt::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIRideReceipt::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIRideReceipt::is_line_items_Valid() const{
    return m_line_items_isValid;
}

OAICost OAIRideReceipt::getPrice() const {
    return m_price;
}
void OAIRideReceipt::setPrice(const OAICost &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIRideReceipt::is_price_Set() const{
    return m_price_isSet;
}

bool OAIRideReceipt::is_price_Valid() const{
    return m_price_isValid;
}

QDateTime OAIRideReceipt::getRequestedAt() const {
    return m_requested_at;
}
void OAIRideReceipt::setRequestedAt(const QDateTime &requested_at) {
    m_requested_at = requested_at;
    m_requested_at_isSet = true;
}

bool OAIRideReceipt::is_requested_at_Set() const{
    return m_requested_at_isSet;
}

bool OAIRideReceipt::is_requested_at_Valid() const{
    return m_requested_at_isValid;
}

QString OAIRideReceipt::getRideId() const {
    return m_ride_id;
}
void OAIRideReceipt::setRideId(const QString &ride_id) {
    m_ride_id = ride_id;
    m_ride_id_isSet = true;
}

bool OAIRideReceipt::is_ride_id_Set() const{
    return m_ride_id_isSet;
}

bool OAIRideReceipt::is_ride_id_Valid() const{
    return m_ride_id_isValid;
}

OAIRideProfileEnum OAIRideReceipt::getRideProfile() const {
    return m_ride_profile;
}
void OAIRideReceipt::setRideProfile(const OAIRideProfileEnum &ride_profile) {
    m_ride_profile = ride_profile;
    m_ride_profile_isSet = true;
}

bool OAIRideReceipt::is_ride_profile_Set() const{
    return m_ride_profile_isSet;
}

bool OAIRideReceipt::is_ride_profile_Valid() const{
    return m_ride_profile_isValid;
}

bool OAIRideReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRideReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
