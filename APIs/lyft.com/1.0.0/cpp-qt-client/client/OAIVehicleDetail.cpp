/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVehicleDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVehicleDetail::OAIVehicleDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVehicleDetail::OAIVehicleDetail() {
    this->initializeModel();
}

OAIVehicleDetail::~OAIVehicleDetail() {}

void OAIVehicleDetail::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_license_plate_isSet = false;
    m_license_plate_isValid = false;

    m_license_plate_state_isSet = false;
    m_license_plate_state_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIVehicleDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVehicleDetail::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_license_plate_isValid = ::OpenAPI::fromJsonValue(m_license_plate, json[QString("license_plate")]);
    m_license_plate_isSet = !json[QString("license_plate")].isNull() && m_license_plate_isValid;

    m_license_plate_state_isValid = ::OpenAPI::fromJsonValue(m_license_plate_state, json[QString("license_plate_state")]);
    m_license_plate_state_isSet = !json[QString("license_plate_state")].isNull() && m_license_plate_state_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIVehicleDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVehicleDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_license_plate_isSet) {
        obj.insert(QString("license_plate"), ::OpenAPI::toJsonValue(m_license_plate));
    }
    if (m_license_plate_state_isSet) {
        obj.insert(QString("license_plate_state"), ::OpenAPI::toJsonValue(m_license_plate_state));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIVehicleDetail::getColor() const {
    return m_color;
}
void OAIVehicleDetail::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIVehicleDetail::is_color_Set() const{
    return m_color_isSet;
}

bool OAIVehicleDetail::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIVehicleDetail::getImageUrl() const {
    return m_image_url;
}
void OAIVehicleDetail::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIVehicleDetail::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIVehicleDetail::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIVehicleDetail::getLicensePlate() const {
    return m_license_plate;
}
void OAIVehicleDetail::setLicensePlate(const QString &license_plate) {
    m_license_plate = license_plate;
    m_license_plate_isSet = true;
}

bool OAIVehicleDetail::is_license_plate_Set() const{
    return m_license_plate_isSet;
}

bool OAIVehicleDetail::is_license_plate_Valid() const{
    return m_license_plate_isValid;
}

QString OAIVehicleDetail::getLicensePlateState() const {
    return m_license_plate_state;
}
void OAIVehicleDetail::setLicensePlateState(const QString &license_plate_state) {
    m_license_plate_state = license_plate_state;
    m_license_plate_state_isSet = true;
}

bool OAIVehicleDetail::is_license_plate_state_Set() const{
    return m_license_plate_state_isSet;
}

bool OAIVehicleDetail::is_license_plate_state_Valid() const{
    return m_license_plate_state_isValid;
}

QString OAIVehicleDetail::getMake() const {
    return m_make;
}
void OAIVehicleDetail::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIVehicleDetail::is_make_Set() const{
    return m_make_isSet;
}

bool OAIVehicleDetail::is_make_Valid() const{
    return m_make_isValid;
}

QString OAIVehicleDetail::getModel() const {
    return m_model;
}
void OAIVehicleDetail::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIVehicleDetail::is_model_Set() const{
    return m_model_isSet;
}

bool OAIVehicleDetail::is_model_Valid() const{
    return m_model_isValid;
}

qint32 OAIVehicleDetail::getYear() const {
    return m_year;
}
void OAIVehicleDetail::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIVehicleDetail::is_year_Set() const{
    return m_year_isSet;
}

bool OAIVehicleDetail::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIVehicleDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_plate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_plate_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVehicleDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_color_isValid && m_image_url_isValid && m_license_plate_isValid && m_license_plate_state_isValid && m_make_isValid && m_model_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
