/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideRequestError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideRequestError::OAIRideRequestError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideRequestError::OAIRideRequestError() {
    this->initializeModel();
}

OAIRideRequestError::~OAIRideRequestError() {}

void OAIRideRequestError::initializeModel() {

    m_cost_token_isSet = false;
    m_cost_token_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_error_detail_isSet = false;
    m_error_detail_isValid = false;

    m_error_uri_isSet = false;
    m_error_uri_isValid = false;

    m_primetime_confirmation_token_isSet = false;
    m_primetime_confirmation_token_isValid = false;

    m_primetime_multiplier_isSet = false;
    m_primetime_multiplier_isValid = false;

    m_primetime_percentage_isSet = false;
    m_primetime_percentage_isValid = false;

    m_token_duration_isSet = false;
    m_token_duration_isValid = false;
}

void OAIRideRequestError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRideRequestError::fromJsonObject(QJsonObject json) {

    m_cost_token_isValid = ::OpenAPI::fromJsonValue(m_cost_token, json[QString("cost_token")]);
    m_cost_token_isSet = !json[QString("cost_token")].isNull() && m_cost_token_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("error_description")]);
    m_error_description_isSet = !json[QString("error_description")].isNull() && m_error_description_isValid;

    m_error_detail_isValid = ::OpenAPI::fromJsonValue(m_error_detail, json[QString("error_detail")]);
    m_error_detail_isSet = !json[QString("error_detail")].isNull() && m_error_detail_isValid;

    m_error_uri_isValid = ::OpenAPI::fromJsonValue(m_error_uri, json[QString("error_uri")]);
    m_error_uri_isSet = !json[QString("error_uri")].isNull() && m_error_uri_isValid;

    m_primetime_confirmation_token_isValid = ::OpenAPI::fromJsonValue(m_primetime_confirmation_token, json[QString("primetime_confirmation_token")]);
    m_primetime_confirmation_token_isSet = !json[QString("primetime_confirmation_token")].isNull() && m_primetime_confirmation_token_isValid;

    m_primetime_multiplier_isValid = ::OpenAPI::fromJsonValue(m_primetime_multiplier, json[QString("primetime_multiplier")]);
    m_primetime_multiplier_isSet = !json[QString("primetime_multiplier")].isNull() && m_primetime_multiplier_isValid;

    m_primetime_percentage_isValid = ::OpenAPI::fromJsonValue(m_primetime_percentage, json[QString("primetime_percentage")]);
    m_primetime_percentage_isSet = !json[QString("primetime_percentage")].isNull() && m_primetime_percentage_isValid;

    m_token_duration_isValid = ::OpenAPI::fromJsonValue(m_token_duration, json[QString("token_duration")]);
    m_token_duration_isSet = !json[QString("token_duration")].isNull() && m_token_duration_isValid;
}

QString OAIRideRequestError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRideRequestError::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_token_isSet) {
        obj.insert(QString("cost_token"), ::OpenAPI::toJsonValue(m_cost_token));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("error_description"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_error_detail.size() > 0) {
        obj.insert(QString("error_detail"), ::OpenAPI::toJsonValue(m_error_detail));
    }
    if (m_error_uri_isSet) {
        obj.insert(QString("error_uri"), ::OpenAPI::toJsonValue(m_error_uri));
    }
    if (m_primetime_confirmation_token_isSet) {
        obj.insert(QString("primetime_confirmation_token"), ::OpenAPI::toJsonValue(m_primetime_confirmation_token));
    }
    if (m_primetime_multiplier_isSet) {
        obj.insert(QString("primetime_multiplier"), ::OpenAPI::toJsonValue(m_primetime_multiplier));
    }
    if (m_primetime_percentage_isSet) {
        obj.insert(QString("primetime_percentage"), ::OpenAPI::toJsonValue(m_primetime_percentage));
    }
    if (m_token_duration_isSet) {
        obj.insert(QString("token_duration"), ::OpenAPI::toJsonValue(m_token_duration));
    }
    return obj;
}

QString OAIRideRequestError::getCostToken() const {
    return m_cost_token;
}
void OAIRideRequestError::setCostToken(const QString &cost_token) {
    m_cost_token = cost_token;
    m_cost_token_isSet = true;
}

bool OAIRideRequestError::is_cost_token_Set() const{
    return m_cost_token_isSet;
}

bool OAIRideRequestError::is_cost_token_Valid() const{
    return m_cost_token_isValid;
}

QString OAIRideRequestError::getError() const {
    return m_error;
}
void OAIRideRequestError::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRideRequestError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRideRequestError::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIRideRequestError::getErrorDescription() const {
    return m_error_description;
}
void OAIRideRequestError::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIRideRequestError::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIRideRequestError::is_error_description_Valid() const{
    return m_error_description_isValid;
}

QList<OAIErrorDetail> OAIRideRequestError::getErrorDetail() const {
    return m_error_detail;
}
void OAIRideRequestError::setErrorDetail(const QList<OAIErrorDetail> &error_detail) {
    m_error_detail = error_detail;
    m_error_detail_isSet = true;
}

bool OAIRideRequestError::is_error_detail_Set() const{
    return m_error_detail_isSet;
}

bool OAIRideRequestError::is_error_detail_Valid() const{
    return m_error_detail_isValid;
}

QString OAIRideRequestError::getErrorUri() const {
    return m_error_uri;
}
void OAIRideRequestError::setErrorUri(const QString &error_uri) {
    m_error_uri = error_uri;
    m_error_uri_isSet = true;
}

bool OAIRideRequestError::is_error_uri_Set() const{
    return m_error_uri_isSet;
}

bool OAIRideRequestError::is_error_uri_Valid() const{
    return m_error_uri_isValid;
}

QString OAIRideRequestError::getPrimetimeConfirmationToken() const {
    return m_primetime_confirmation_token;
}
void OAIRideRequestError::setPrimetimeConfirmationToken(const QString &primetime_confirmation_token) {
    m_primetime_confirmation_token = primetime_confirmation_token;
    m_primetime_confirmation_token_isSet = true;
}

bool OAIRideRequestError::is_primetime_confirmation_token_Set() const{
    return m_primetime_confirmation_token_isSet;
}

bool OAIRideRequestError::is_primetime_confirmation_token_Valid() const{
    return m_primetime_confirmation_token_isValid;
}

float OAIRideRequestError::getPrimetimeMultiplier() const {
    return m_primetime_multiplier;
}
void OAIRideRequestError::setPrimetimeMultiplier(const float &primetime_multiplier) {
    m_primetime_multiplier = primetime_multiplier;
    m_primetime_multiplier_isSet = true;
}

bool OAIRideRequestError::is_primetime_multiplier_Set() const{
    return m_primetime_multiplier_isSet;
}

bool OAIRideRequestError::is_primetime_multiplier_Valid() const{
    return m_primetime_multiplier_isValid;
}

QString OAIRideRequestError::getPrimetimePercentage() const {
    return m_primetime_percentage;
}
void OAIRideRequestError::setPrimetimePercentage(const QString &primetime_percentage) {
    m_primetime_percentage = primetime_percentage;
    m_primetime_percentage_isSet = true;
}

bool OAIRideRequestError::is_primetime_percentage_Set() const{
    return m_primetime_percentage_isSet;
}

bool OAIRideRequestError::is_primetime_percentage_Valid() const{
    return m_primetime_percentage_isValid;
}

QString OAIRideRequestError::getTokenDuration() const {
    return m_token_duration;
}
void OAIRideRequestError::setTokenDuration(const QString &token_duration) {
    m_token_duration = token_duration;
    m_token_duration_isSet = true;
}

bool OAIRideRequestError::is_token_duration_Set() const{
    return m_token_duration_isSet;
}

bool OAIRideRequestError::is_token_duration_Valid() const{
    return m_token_duration_isValid;
}

bool OAIRideRequestError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_confirmation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRideRequestError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && true;
}

} // namespace OpenAPI
