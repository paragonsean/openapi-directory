/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideDetail::OAIRideDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideDetail::OAIRideDetail() {
    this->initializeModel();
}

OAIRideDetail::~OAIRideDetail() {}

void OAIRideDetail::initializeModel() {

    m_beacon_color_isSet = false;
    m_beacon_color_isValid = false;

    m_can_cancel_isSet = false;
    m_can_cancel_isValid = false;

    m_canceled_by_isSet = false;
    m_canceled_by_isValid = false;

    m_cancellation_price_isSet = false;
    m_cancellation_price_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_distance_miles_isSet = false;
    m_distance_miles_isValid = false;

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_dropoff_isSet = false;
    m_dropoff_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_generated_at_isSet = false;
    m_generated_at_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_passenger_isSet = false;
    m_passenger_isValid = false;

    m_pickup_isSet = false;
    m_pickup_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_pricing_details_url_isSet = false;
    m_pricing_details_url_isValid = false;

    m_primetime_percentage_isSet = false;
    m_primetime_percentage_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_requested_at_isSet = false;
    m_requested_at_isValid = false;

    m_ride_id_isSet = false;
    m_ride_id_isValid = false;

    m_ride_profile_isSet = false;
    m_ride_profile_isValid = false;

    m_ride_type_isSet = false;
    m_ride_type_isValid = false;

    m_route_url_isSet = false;
    m_route_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vehicle_isSet = false;
    m_vehicle_isValid = false;
}

void OAIRideDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRideDetail::fromJsonObject(QJsonObject json) {

    m_beacon_color_isValid = ::OpenAPI::fromJsonValue(m_beacon_color, json[QString("beacon_color")]);
    m_beacon_color_isSet = !json[QString("beacon_color")].isNull() && m_beacon_color_isValid;

    m_can_cancel_isValid = ::OpenAPI::fromJsonValue(m_can_cancel, json[QString("can_cancel")]);
    m_can_cancel_isSet = !json[QString("can_cancel")].isNull() && m_can_cancel_isValid;

    m_canceled_by_isValid = ::OpenAPI::fromJsonValue(m_canceled_by, json[QString("canceled_by")]);
    m_canceled_by_isSet = !json[QString("canceled_by")].isNull() && m_canceled_by_isValid;

    m_cancellation_price_isValid = ::OpenAPI::fromJsonValue(m_cancellation_price, json[QString("cancellation_price")]);
    m_cancellation_price_isSet = !json[QString("cancellation_price")].isNull() && m_cancellation_price_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_distance_miles_isValid = ::OpenAPI::fromJsonValue(m_distance_miles, json[QString("distance_miles")]);
    m_distance_miles_isSet = !json[QString("distance_miles")].isNull() && m_distance_miles_isValid;

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("driver")]);
    m_driver_isSet = !json[QString("driver")].isNull() && m_driver_isValid;

    m_dropoff_isValid = ::OpenAPI::fromJsonValue(m_dropoff, json[QString("dropoff")]);
    m_dropoff_isSet = !json[QString("dropoff")].isNull() && m_dropoff_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("duration_seconds")]);
    m_duration_seconds_isSet = !json[QString("duration_seconds")].isNull() && m_duration_seconds_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_generated_at_isValid = ::OpenAPI::fromJsonValue(m_generated_at, json[QString("generated_at")]);
    m_generated_at_isSet = !json[QString("generated_at")].isNull() && m_generated_at_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("line_items")]);
    m_line_items_isSet = !json[QString("line_items")].isNull() && m_line_items_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_passenger_isValid = ::OpenAPI::fromJsonValue(m_passenger, json[QString("passenger")]);
    m_passenger_isSet = !json[QString("passenger")].isNull() && m_passenger_isValid;

    m_pickup_isValid = ::OpenAPI::fromJsonValue(m_pickup, json[QString("pickup")]);
    m_pickup_isSet = !json[QString("pickup")].isNull() && m_pickup_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_pricing_details_url_isValid = ::OpenAPI::fromJsonValue(m_pricing_details_url, json[QString("pricing_details_url")]);
    m_pricing_details_url_isSet = !json[QString("pricing_details_url")].isNull() && m_pricing_details_url_isValid;

    m_primetime_percentage_isValid = ::OpenAPI::fromJsonValue(m_primetime_percentage, json[QString("primetime_percentage")]);
    m_primetime_percentage_isSet = !json[QString("primetime_percentage")].isNull() && m_primetime_percentage_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_requested_at_isValid = ::OpenAPI::fromJsonValue(m_requested_at, json[QString("requested_at")]);
    m_requested_at_isSet = !json[QString("requested_at")].isNull() && m_requested_at_isValid;

    m_ride_id_isValid = ::OpenAPI::fromJsonValue(m_ride_id, json[QString("ride_id")]);
    m_ride_id_isSet = !json[QString("ride_id")].isNull() && m_ride_id_isValid;

    m_ride_profile_isValid = ::OpenAPI::fromJsonValue(m_ride_profile, json[QString("ride_profile")]);
    m_ride_profile_isSet = !json[QString("ride_profile")].isNull() && m_ride_profile_isValid;

    m_ride_type_isValid = ::OpenAPI::fromJsonValue(m_ride_type, json[QString("ride_type")]);
    m_ride_type_isSet = !json[QString("ride_type")].isNull() && m_ride_type_isValid;

    m_route_url_isValid = ::OpenAPI::fromJsonValue(m_route_url, json[QString("route_url")]);
    m_route_url_isSet = !json[QString("route_url")].isNull() && m_route_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vehicle_isValid = ::OpenAPI::fromJsonValue(m_vehicle, json[QString("vehicle")]);
    m_vehicle_isSet = !json[QString("vehicle")].isNull() && m_vehicle_isValid;
}

QString OAIRideDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRideDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_beacon_color_isSet) {
        obj.insert(QString("beacon_color"), ::OpenAPI::toJsonValue(m_beacon_color));
    }
    if (m_can_cancel.size() > 0) {
        obj.insert(QString("can_cancel"), ::OpenAPI::toJsonValue(m_can_cancel));
    }
    if (m_canceled_by_isSet) {
        obj.insert(QString("canceled_by"), ::OpenAPI::toJsonValue(m_canceled_by));
    }
    if (m_cancellation_price.isSet()) {
        obj.insert(QString("cancellation_price"), ::OpenAPI::toJsonValue(m_cancellation_price));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_distance_miles_isSet) {
        obj.insert(QString("distance_miles"), ::OpenAPI::toJsonValue(m_distance_miles));
    }
    if (m_driver.isSet()) {
        obj.insert(QString("driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_dropoff.isSet()) {
        obj.insert(QString("dropoff"), ::OpenAPI::toJsonValue(m_dropoff));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("duration_seconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_feedback_isSet) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_generated_at_isSet) {
        obj.insert(QString("generated_at"), ::OpenAPI::toJsonValue(m_generated_at));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("line_items"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_passenger.isSet()) {
        obj.insert(QString("passenger"), ::OpenAPI::toJsonValue(m_passenger));
    }
    if (m_pickup.isSet()) {
        obj.insert(QString("pickup"), ::OpenAPI::toJsonValue(m_pickup));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_pricing_details_url_isSet) {
        obj.insert(QString("pricing_details_url"), ::OpenAPI::toJsonValue(m_pricing_details_url));
    }
    if (m_primetime_percentage_isSet) {
        obj.insert(QString("primetime_percentage"), ::OpenAPI::toJsonValue(m_primetime_percentage));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_requested_at_isSet) {
        obj.insert(QString("requested_at"), ::OpenAPI::toJsonValue(m_requested_at));
    }
    if (m_ride_id_isSet) {
        obj.insert(QString("ride_id"), ::OpenAPI::toJsonValue(m_ride_id));
    }
    if (m_ride_profile.isSet()) {
        obj.insert(QString("ride_profile"), ::OpenAPI::toJsonValue(m_ride_profile));
    }
    if (m_ride_type.isSet()) {
        obj.insert(QString("ride_type"), ::OpenAPI::toJsonValue(m_ride_type));
    }
    if (m_route_url_isSet) {
        obj.insert(QString("route_url"), ::OpenAPI::toJsonValue(m_route_url));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vehicle.isSet()) {
        obj.insert(QString("vehicle"), ::OpenAPI::toJsonValue(m_vehicle));
    }
    return obj;
}

QString OAIRideDetail::getBeaconColor() const {
    return m_beacon_color;
}
void OAIRideDetail::setBeaconColor(const QString &beacon_color) {
    m_beacon_color = beacon_color;
    m_beacon_color_isSet = true;
}

bool OAIRideDetail::is_beacon_color_Set() const{
    return m_beacon_color_isSet;
}

bool OAIRideDetail::is_beacon_color_Valid() const{
    return m_beacon_color_isValid;
}

QList<QString> OAIRideDetail::getCanCancel() const {
    return m_can_cancel;
}
void OAIRideDetail::setCanCancel(const QList<QString> &can_cancel) {
    m_can_cancel = can_cancel;
    m_can_cancel_isSet = true;
}

bool OAIRideDetail::is_can_cancel_Set() const{
    return m_can_cancel_isSet;
}

bool OAIRideDetail::is_can_cancel_Valid() const{
    return m_can_cancel_isValid;
}

QString OAIRideDetail::getCanceledBy() const {
    return m_canceled_by;
}
void OAIRideDetail::setCanceledBy(const QString &canceled_by) {
    m_canceled_by = canceled_by;
    m_canceled_by_isSet = true;
}

bool OAIRideDetail::is_canceled_by_Set() const{
    return m_canceled_by_isSet;
}

bool OAIRideDetail::is_canceled_by_Valid() const{
    return m_canceled_by_isValid;
}

OAICancellationCost OAIRideDetail::getCancellationPrice() const {
    return m_cancellation_price;
}
void OAIRideDetail::setCancellationPrice(const OAICancellationCost &cancellation_price) {
    m_cancellation_price = cancellation_price;
    m_cancellation_price_isSet = true;
}

bool OAIRideDetail::is_cancellation_price_Set() const{
    return m_cancellation_price_isSet;
}

bool OAIRideDetail::is_cancellation_price_Valid() const{
    return m_cancellation_price_isValid;
}

OAIRideLocation OAIRideDetail::getDestination() const {
    return m_destination;
}
void OAIRideDetail::setDestination(const OAIRideLocation &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIRideDetail::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIRideDetail::is_destination_Valid() const{
    return m_destination_isValid;
}

float OAIRideDetail::getDistanceMiles() const {
    return m_distance_miles;
}
void OAIRideDetail::setDistanceMiles(const float &distance_miles) {
    m_distance_miles = distance_miles;
    m_distance_miles_isSet = true;
}

bool OAIRideDetail::is_distance_miles_Set() const{
    return m_distance_miles_isSet;
}

bool OAIRideDetail::is_distance_miles_Valid() const{
    return m_distance_miles_isValid;
}

OAIDriverDetail OAIRideDetail::getDriver() const {
    return m_driver;
}
void OAIRideDetail::setDriver(const OAIDriverDetail &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAIRideDetail::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAIRideDetail::is_driver_Valid() const{
    return m_driver_isValid;
}

OAIPickupDropoffLocation OAIRideDetail::getDropoff() const {
    return m_dropoff;
}
void OAIRideDetail::setDropoff(const OAIPickupDropoffLocation &dropoff) {
    m_dropoff = dropoff;
    m_dropoff_isSet = true;
}

bool OAIRideDetail::is_dropoff_Set() const{
    return m_dropoff_isSet;
}

bool OAIRideDetail::is_dropoff_Valid() const{
    return m_dropoff_isValid;
}

qint32 OAIRideDetail::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIRideDetail::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIRideDetail::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIRideDetail::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

QString OAIRideDetail::getFeedback() const {
    return m_feedback;
}
void OAIRideDetail::setFeedback(const QString &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIRideDetail::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIRideDetail::is_feedback_Valid() const{
    return m_feedback_isValid;
}

QDateTime OAIRideDetail::getGeneratedAt() const {
    return m_generated_at;
}
void OAIRideDetail::setGeneratedAt(const QDateTime &generated_at) {
    m_generated_at = generated_at;
    m_generated_at_isSet = true;
}

bool OAIRideDetail::is_generated_at_Set() const{
    return m_generated_at_isSet;
}

bool OAIRideDetail::is_generated_at_Valid() const{
    return m_generated_at_isValid;
}

QList<OAILineItem> OAIRideDetail::getLineItems() const {
    return m_line_items;
}
void OAIRideDetail::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIRideDetail::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIRideDetail::is_line_items_Valid() const{
    return m_line_items_isValid;
}

OAICurrentRideLocation OAIRideDetail::getLocation() const {
    return m_location;
}
void OAIRideDetail::setLocation(const OAICurrentRideLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRideDetail::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRideDetail::is_location_Valid() const{
    return m_location_isValid;
}

OAIRideLocation OAIRideDetail::getOrigin() const {
    return m_origin;
}
void OAIRideDetail::setOrigin(const OAIRideLocation &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIRideDetail::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIRideDetail::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPassengerDetail OAIRideDetail::getPassenger() const {
    return m_passenger;
}
void OAIRideDetail::setPassenger(const OAIPassengerDetail &passenger) {
    m_passenger = passenger;
    m_passenger_isSet = true;
}

bool OAIRideDetail::is_passenger_Set() const{
    return m_passenger_isSet;
}

bool OAIRideDetail::is_passenger_Valid() const{
    return m_passenger_isValid;
}

OAIPickupDropoffLocation OAIRideDetail::getPickup() const {
    return m_pickup;
}
void OAIRideDetail::setPickup(const OAIPickupDropoffLocation &pickup) {
    m_pickup = pickup;
    m_pickup_isSet = true;
}

bool OAIRideDetail::is_pickup_Set() const{
    return m_pickup_isSet;
}

bool OAIRideDetail::is_pickup_Valid() const{
    return m_pickup_isValid;
}

OAICost OAIRideDetail::getPrice() const {
    return m_price;
}
void OAIRideDetail::setPrice(const OAICost &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIRideDetail::is_price_Set() const{
    return m_price_isSet;
}

bool OAIRideDetail::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIRideDetail::getPricingDetailsUrl() const {
    return m_pricing_details_url;
}
void OAIRideDetail::setPricingDetailsUrl(const QString &pricing_details_url) {
    m_pricing_details_url = pricing_details_url;
    m_pricing_details_url_isSet = true;
}

bool OAIRideDetail::is_pricing_details_url_Set() const{
    return m_pricing_details_url_isSet;
}

bool OAIRideDetail::is_pricing_details_url_Valid() const{
    return m_pricing_details_url_isValid;
}

QString OAIRideDetail::getPrimetimePercentage() const {
    return m_primetime_percentage;
}
void OAIRideDetail::setPrimetimePercentage(const QString &primetime_percentage) {
    m_primetime_percentage = primetime_percentage;
    m_primetime_percentage_isSet = true;
}

bool OAIRideDetail::is_primetime_percentage_Set() const{
    return m_primetime_percentage_isSet;
}

bool OAIRideDetail::is_primetime_percentage_Valid() const{
    return m_primetime_percentage_isValid;
}

qint32 OAIRideDetail::getRating() const {
    return m_rating;
}
void OAIRideDetail::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIRideDetail::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIRideDetail::is_rating_Valid() const{
    return m_rating_isValid;
}

QDateTime OAIRideDetail::getRequestedAt() const {
    return m_requested_at;
}
void OAIRideDetail::setRequestedAt(const QDateTime &requested_at) {
    m_requested_at = requested_at;
    m_requested_at_isSet = true;
}

bool OAIRideDetail::is_requested_at_Set() const{
    return m_requested_at_isSet;
}

bool OAIRideDetail::is_requested_at_Valid() const{
    return m_requested_at_isValid;
}

QString OAIRideDetail::getRideId() const {
    return m_ride_id;
}
void OAIRideDetail::setRideId(const QString &ride_id) {
    m_ride_id = ride_id;
    m_ride_id_isSet = true;
}

bool OAIRideDetail::is_ride_id_Set() const{
    return m_ride_id_isSet;
}

bool OAIRideDetail::is_ride_id_Valid() const{
    return m_ride_id_isValid;
}

OAIRideProfileEnum OAIRideDetail::getRideProfile() const {
    return m_ride_profile;
}
void OAIRideDetail::setRideProfile(const OAIRideProfileEnum &ride_profile) {
    m_ride_profile = ride_profile;
    m_ride_profile_isSet = true;
}

bool OAIRideDetail::is_ride_profile_Set() const{
    return m_ride_profile_isSet;
}

bool OAIRideDetail::is_ride_profile_Valid() const{
    return m_ride_profile_isValid;
}

OAIRideTypeEnumWithOther OAIRideDetail::getRideType() const {
    return m_ride_type;
}
void OAIRideDetail::setRideType(const OAIRideTypeEnumWithOther &ride_type) {
    m_ride_type = ride_type;
    m_ride_type_isSet = true;
}

bool OAIRideDetail::is_ride_type_Set() const{
    return m_ride_type_isSet;
}

bool OAIRideDetail::is_ride_type_Valid() const{
    return m_ride_type_isValid;
}

QString OAIRideDetail::getRouteUrl() const {
    return m_route_url;
}
void OAIRideDetail::setRouteUrl(const QString &route_url) {
    m_route_url = route_url;
    m_route_url_isSet = true;
}

bool OAIRideDetail::is_route_url_Set() const{
    return m_route_url_isSet;
}

bool OAIRideDetail::is_route_url_Valid() const{
    return m_route_url_isValid;
}

OAIRideStatusEnum OAIRideDetail::getStatus() const {
    return m_status;
}
void OAIRideDetail::setStatus(const OAIRideStatusEnum &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRideDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRideDetail::is_status_Valid() const{
    return m_status_isValid;
}

OAIVehicleDetail OAIRideDetail::getVehicle() const {
    return m_vehicle;
}
void OAIRideDetail::setVehicle(const OAIVehicleDetail &vehicle) {
    m_vehicle = vehicle;
    m_vehicle_isSet = true;
}

bool OAIRideDetail::is_vehicle_Set() const{
    return m_vehicle_isSet;
}

bool OAIRideDetail::is_vehicle_Valid() const{
    return m_vehicle_isValid;
}

bool OAIRideDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beacon_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_cancel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropoff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passenger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRideDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
