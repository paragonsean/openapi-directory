/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRide.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRide::OAIRide(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRide::OAIRide() {
    this->initializeModel();
}

OAIRide::~OAIRide() {}

void OAIRide::initializeModel() {

    m_cost_token_isSet = false;
    m_cost_token_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_primetime_confirmation_token_isSet = false;
    m_primetime_confirmation_token_isValid = false;

    m_ride_type_isSet = false;
    m_ride_type_isValid = false;
}

void OAIRide::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRide::fromJsonObject(QJsonObject json) {

    m_cost_token_isValid = ::OpenAPI::fromJsonValue(m_cost_token, json[QString("cost_token")]);
    m_cost_token_isSet = !json[QString("cost_token")].isNull() && m_cost_token_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_primetime_confirmation_token_isValid = ::OpenAPI::fromJsonValue(m_primetime_confirmation_token, json[QString("primetime_confirmation_token")]);
    m_primetime_confirmation_token_isSet = !json[QString("primetime_confirmation_token")].isNull() && m_primetime_confirmation_token_isValid;

    m_ride_type_isValid = ::OpenAPI::fromJsonValue(m_ride_type, json[QString("ride_type")]);
    m_ride_type_isSet = !json[QString("ride_type")].isNull() && m_ride_type_isValid;
}

QString OAIRide::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRide::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_token_isSet) {
        obj.insert(QString("cost_token"), ::OpenAPI::toJsonValue(m_cost_token));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_primetime_confirmation_token_isSet) {
        obj.insert(QString("primetime_confirmation_token"), ::OpenAPI::toJsonValue(m_primetime_confirmation_token));
    }
    if (m_ride_type.isSet()) {
        obj.insert(QString("ride_type"), ::OpenAPI::toJsonValue(m_ride_type));
    }
    return obj;
}

QString OAIRide::getCostToken() const {
    return m_cost_token;
}
void OAIRide::setCostToken(const QString &cost_token) {
    m_cost_token = cost_token;
    m_cost_token_isSet = true;
}

bool OAIRide::is_cost_token_Set() const{
    return m_cost_token_isSet;
}

bool OAIRide::is_cost_token_Valid() const{
    return m_cost_token_isValid;
}

OAILocation OAIRide::getDestination() const {
    return m_destination;
}
void OAIRide::setDestination(const OAILocation &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIRide::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIRide::is_destination_Valid() const{
    return m_destination_isValid;
}

OAILocation OAIRide::getOrigin() const {
    return m_origin;
}
void OAIRide::setOrigin(const OAILocation &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIRide::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIRide::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIRide::getPrimetimeConfirmationToken() const {
    return m_primetime_confirmation_token;
}
void OAIRide::setPrimetimeConfirmationToken(const QString &primetime_confirmation_token) {
    m_primetime_confirmation_token = primetime_confirmation_token;
    m_primetime_confirmation_token_isSet = true;
}

bool OAIRide::is_primetime_confirmation_token_Set() const{
    return m_primetime_confirmation_token_isSet;
}

bool OAIRide::is_primetime_confirmation_token_Valid() const{
    return m_primetime_confirmation_token_isValid;
}

OAIRideTypeEnum OAIRide::getRideType() const {
    return m_ride_type;
}
void OAIRide::setRideType(const OAIRideTypeEnum &ride_type) {
    m_ride_type = ride_type;
    m_ride_type_isSet = true;
}

bool OAIRide::is_ride_type_Set() const{
    return m_ride_type_isSet;
}

bool OAIRide::is_ride_type_Valid() const{
    return m_ride_type_isValid;
}

bool OAIRide::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_confirmation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRide::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_origin_isValid && m_ride_type_isValid && true;
}

} // namespace OpenAPI
