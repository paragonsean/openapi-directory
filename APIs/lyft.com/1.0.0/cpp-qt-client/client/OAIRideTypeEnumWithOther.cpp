/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideTypeEnumWithOther.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideTypeEnumWithOther::OAIRideTypeEnumWithOther(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideTypeEnumWithOther::OAIRideTypeEnumWithOther() {
    this->initializeModel();
}

OAIRideTypeEnumWithOther::~OAIRideTypeEnumWithOther() {}

void OAIRideTypeEnumWithOther::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRideTypeEnumWithOther::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRideTypeEnumWithOther::fromJson(QString jsonString) {
    
    if ( jsonString.compare("lyft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::LYFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lyft_line", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::LYFT_LINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lyft_plus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::LYFT_PLUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lyft_premier", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::LYFT_PREMIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lyft_lux", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::LYFT_LUX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lyft_luxsuv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::LYFT_LUXSUV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideTypeEnumWithOther::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRideTypeEnumWithOther::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRideTypeEnumWithOther::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRideTypeEnumWithOther::LYFT:
            val = "lyft";
            break;
        case eOAIRideTypeEnumWithOther::LYFT_LINE:
            val = "lyft_line";
            break;
        case eOAIRideTypeEnumWithOther::LYFT_PLUS:
            val = "lyft_plus";
            break;
        case eOAIRideTypeEnumWithOther::LYFT_PREMIER:
            val = "lyft_premier";
            break;
        case eOAIRideTypeEnumWithOther::LYFT_LUX:
            val = "lyft_lux";
            break;
        case eOAIRideTypeEnumWithOther::LYFT_LUXSUV:
            val = "lyft_luxsuv";
            break;
        case eOAIRideTypeEnumWithOther::OTHER:
            val = "other";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRideTypeEnumWithOther::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRideTypeEnumWithOther::eOAIRideTypeEnumWithOther OAIRideTypeEnumWithOther::getValue() const {
    return m_value;
}

void OAIRideTypeEnumWithOther::setValue(const OAIRideTypeEnumWithOther::eOAIRideTypeEnumWithOther& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRideTypeEnumWithOther::isSet() const {
    
    return m_value_isSet;
}

bool OAIRideTypeEnumWithOther::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
