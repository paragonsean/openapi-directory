/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideType::OAIRideType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideType::OAIRideType() {
    this->initializeModel();
}

OAIRideType::~OAIRideType() {}

void OAIRideType::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_pricing_details_isSet = false;
    m_pricing_details_isValid = false;

    m_ride_type_isSet = false;
    m_ride_type_isValid = false;

    m_scheduled_pricing_details_isSet = false;
    m_scheduled_pricing_details_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;
}

void OAIRideType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRideType::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_pricing_details_isValid = ::OpenAPI::fromJsonValue(m_pricing_details, json[QString("pricing_details")]);
    m_pricing_details_isSet = !json[QString("pricing_details")].isNull() && m_pricing_details_isValid;

    m_ride_type_isValid = ::OpenAPI::fromJsonValue(m_ride_type, json[QString("ride_type")]);
    m_ride_type_isSet = !json[QString("ride_type")].isNull() && m_ride_type_isValid;

    m_scheduled_pricing_details_isValid = ::OpenAPI::fromJsonValue(m_scheduled_pricing_details, json[QString("scheduled_pricing_details")]);
    m_scheduled_pricing_details_isSet = !json[QString("scheduled_pricing_details")].isNull() && m_scheduled_pricing_details_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;
}

QString OAIRideType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRideType::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_pricing_details.isSet()) {
        obj.insert(QString("pricing_details"), ::OpenAPI::toJsonValue(m_pricing_details));
    }
    if (m_ride_type.isSet()) {
        obj.insert(QString("ride_type"), ::OpenAPI::toJsonValue(m_ride_type));
    }
    if (m_scheduled_pricing_details.isSet()) {
        obj.insert(QString("scheduled_pricing_details"), ::OpenAPI::toJsonValue(m_scheduled_pricing_details));
    }
    if (m_seats_isSet) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    return obj;
}

QString OAIRideType::getDisplayName() const {
    return m_display_name;
}
void OAIRideType::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRideType::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRideType::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRideType::getImageUrl() const {
    return m_image_url;
}
void OAIRideType::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIRideType::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIRideType::is_image_url_Valid() const{
    return m_image_url_isValid;
}

OAIPricingDetails OAIRideType::getPricingDetails() const {
    return m_pricing_details;
}
void OAIRideType::setPricingDetails(const OAIPricingDetails &pricing_details) {
    m_pricing_details = pricing_details;
    m_pricing_details_isSet = true;
}

bool OAIRideType::is_pricing_details_Set() const{
    return m_pricing_details_isSet;
}

bool OAIRideType::is_pricing_details_Valid() const{
    return m_pricing_details_isValid;
}

OAIRideTypeEnum OAIRideType::getRideType() const {
    return m_ride_type;
}
void OAIRideType::setRideType(const OAIRideTypeEnum &ride_type) {
    m_ride_type = ride_type;
    m_ride_type_isSet = true;
}

bool OAIRideType::is_ride_type_Set() const{
    return m_ride_type_isSet;
}

bool OAIRideType::is_ride_type_Valid() const{
    return m_ride_type_isValid;
}

OAIPricingDetails OAIRideType::getScheduledPricingDetails() const {
    return m_scheduled_pricing_details;
}
void OAIRideType::setScheduledPricingDetails(const OAIPricingDetails &scheduled_pricing_details) {
    m_scheduled_pricing_details = scheduled_pricing_details;
    m_scheduled_pricing_details_isSet = true;
}

bool OAIRideType::is_scheduled_pricing_details_Set() const{
    return m_scheduled_pricing_details_isSet;
}

bool OAIRideType::is_scheduled_pricing_details_Valid() const{
    return m_scheduled_pricing_details_isValid;
}

qint32 OAIRideType::getSeats() const {
    return m_seats;
}
void OAIRideType::setSeats(const qint32 &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAIRideType::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAIRideType::is_seats_Valid() const{
    return m_seats_isValid;
}

bool OAIRideType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_pricing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRideType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
