/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostEstimate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostEstimate::OAICostEstimate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostEstimate::OAICostEstimate() {
    this->initializeModel();
}

OAICostEstimate::~OAICostEstimate() {}

void OAICostEstimate::initializeModel() {

    m_cost_token_isSet = false;
    m_cost_token_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_estimated_cost_cents_max_isSet = false;
    m_estimated_cost_cents_max_isValid = false;

    m_estimated_cost_cents_min_isSet = false;
    m_estimated_cost_cents_min_isValid = false;

    m_estimated_distance_miles_isSet = false;
    m_estimated_distance_miles_isValid = false;

    m_estimated_duration_seconds_isSet = false;
    m_estimated_duration_seconds_isValid = false;

    m_is_valid_estimate_isSet = false;
    m_is_valid_estimate_isValid = false;

    m_primetime_confirmation_token_isSet = false;
    m_primetime_confirmation_token_isValid = false;

    m_primetime_percentage_isSet = false;
    m_primetime_percentage_isValid = false;

    m_ride_type_isSet = false;
    m_ride_type_isValid = false;
}

void OAICostEstimate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostEstimate::fromJsonObject(QJsonObject json) {

    m_cost_token_isValid = ::OpenAPI::fromJsonValue(m_cost_token, json[QString("cost_token")]);
    m_cost_token_isSet = !json[QString("cost_token")].isNull() && m_cost_token_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_estimated_cost_cents_max_isValid = ::OpenAPI::fromJsonValue(m_estimated_cost_cents_max, json[QString("estimated_cost_cents_max")]);
    m_estimated_cost_cents_max_isSet = !json[QString("estimated_cost_cents_max")].isNull() && m_estimated_cost_cents_max_isValid;

    m_estimated_cost_cents_min_isValid = ::OpenAPI::fromJsonValue(m_estimated_cost_cents_min, json[QString("estimated_cost_cents_min")]);
    m_estimated_cost_cents_min_isSet = !json[QString("estimated_cost_cents_min")].isNull() && m_estimated_cost_cents_min_isValid;

    m_estimated_distance_miles_isValid = ::OpenAPI::fromJsonValue(m_estimated_distance_miles, json[QString("estimated_distance_miles")]);
    m_estimated_distance_miles_isSet = !json[QString("estimated_distance_miles")].isNull() && m_estimated_distance_miles_isValid;

    m_estimated_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_estimated_duration_seconds, json[QString("estimated_duration_seconds")]);
    m_estimated_duration_seconds_isSet = !json[QString("estimated_duration_seconds")].isNull() && m_estimated_duration_seconds_isValid;

    m_is_valid_estimate_isValid = ::OpenAPI::fromJsonValue(m_is_valid_estimate, json[QString("is_valid_estimate")]);
    m_is_valid_estimate_isSet = !json[QString("is_valid_estimate")].isNull() && m_is_valid_estimate_isValid;

    m_primetime_confirmation_token_isValid = ::OpenAPI::fromJsonValue(m_primetime_confirmation_token, json[QString("primetime_confirmation_token")]);
    m_primetime_confirmation_token_isSet = !json[QString("primetime_confirmation_token")].isNull() && m_primetime_confirmation_token_isValid;

    m_primetime_percentage_isValid = ::OpenAPI::fromJsonValue(m_primetime_percentage, json[QString("primetime_percentage")]);
    m_primetime_percentage_isSet = !json[QString("primetime_percentage")].isNull() && m_primetime_percentage_isValid;

    m_ride_type_isValid = ::OpenAPI::fromJsonValue(m_ride_type, json[QString("ride_type")]);
    m_ride_type_isSet = !json[QString("ride_type")].isNull() && m_ride_type_isValid;
}

QString OAICostEstimate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostEstimate::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_token_isSet) {
        obj.insert(QString("cost_token"), ::OpenAPI::toJsonValue(m_cost_token));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_estimated_cost_cents_max_isSet) {
        obj.insert(QString("estimated_cost_cents_max"), ::OpenAPI::toJsonValue(m_estimated_cost_cents_max));
    }
    if (m_estimated_cost_cents_min_isSet) {
        obj.insert(QString("estimated_cost_cents_min"), ::OpenAPI::toJsonValue(m_estimated_cost_cents_min));
    }
    if (m_estimated_distance_miles_isSet) {
        obj.insert(QString("estimated_distance_miles"), ::OpenAPI::toJsonValue(m_estimated_distance_miles));
    }
    if (m_estimated_duration_seconds_isSet) {
        obj.insert(QString("estimated_duration_seconds"), ::OpenAPI::toJsonValue(m_estimated_duration_seconds));
    }
    if (m_is_valid_estimate_isSet) {
        obj.insert(QString("is_valid_estimate"), ::OpenAPI::toJsonValue(m_is_valid_estimate));
    }
    if (m_primetime_confirmation_token_isSet) {
        obj.insert(QString("primetime_confirmation_token"), ::OpenAPI::toJsonValue(m_primetime_confirmation_token));
    }
    if (m_primetime_percentage_isSet) {
        obj.insert(QString("primetime_percentage"), ::OpenAPI::toJsonValue(m_primetime_percentage));
    }
    if (m_ride_type.isSet()) {
        obj.insert(QString("ride_type"), ::OpenAPI::toJsonValue(m_ride_type));
    }
    return obj;
}

QString OAICostEstimate::getCostToken() const {
    return m_cost_token;
}
void OAICostEstimate::setCostToken(const QString &cost_token) {
    m_cost_token = cost_token;
    m_cost_token_isSet = true;
}

bool OAICostEstimate::is_cost_token_Set() const{
    return m_cost_token_isSet;
}

bool OAICostEstimate::is_cost_token_Valid() const{
    return m_cost_token_isValid;
}

QString OAICostEstimate::getCurrency() const {
    return m_currency;
}
void OAICostEstimate::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICostEstimate::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICostEstimate::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICostEstimate::getDisplayName() const {
    return m_display_name;
}
void OAICostEstimate::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICostEstimate::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICostEstimate::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAICostEstimate::getEstimatedCostCentsMax() const {
    return m_estimated_cost_cents_max;
}
void OAICostEstimate::setEstimatedCostCentsMax(const qint32 &estimated_cost_cents_max) {
    m_estimated_cost_cents_max = estimated_cost_cents_max;
    m_estimated_cost_cents_max_isSet = true;
}

bool OAICostEstimate::is_estimated_cost_cents_max_Set() const{
    return m_estimated_cost_cents_max_isSet;
}

bool OAICostEstimate::is_estimated_cost_cents_max_Valid() const{
    return m_estimated_cost_cents_max_isValid;
}

qint32 OAICostEstimate::getEstimatedCostCentsMin() const {
    return m_estimated_cost_cents_min;
}
void OAICostEstimate::setEstimatedCostCentsMin(const qint32 &estimated_cost_cents_min) {
    m_estimated_cost_cents_min = estimated_cost_cents_min;
    m_estimated_cost_cents_min_isSet = true;
}

bool OAICostEstimate::is_estimated_cost_cents_min_Set() const{
    return m_estimated_cost_cents_min_isSet;
}

bool OAICostEstimate::is_estimated_cost_cents_min_Valid() const{
    return m_estimated_cost_cents_min_isValid;
}

double OAICostEstimate::getEstimatedDistanceMiles() const {
    return m_estimated_distance_miles;
}
void OAICostEstimate::setEstimatedDistanceMiles(const double &estimated_distance_miles) {
    m_estimated_distance_miles = estimated_distance_miles;
    m_estimated_distance_miles_isSet = true;
}

bool OAICostEstimate::is_estimated_distance_miles_Set() const{
    return m_estimated_distance_miles_isSet;
}

bool OAICostEstimate::is_estimated_distance_miles_Valid() const{
    return m_estimated_distance_miles_isValid;
}

qint32 OAICostEstimate::getEstimatedDurationSeconds() const {
    return m_estimated_duration_seconds;
}
void OAICostEstimate::setEstimatedDurationSeconds(const qint32 &estimated_duration_seconds) {
    m_estimated_duration_seconds = estimated_duration_seconds;
    m_estimated_duration_seconds_isSet = true;
}

bool OAICostEstimate::is_estimated_duration_seconds_Set() const{
    return m_estimated_duration_seconds_isSet;
}

bool OAICostEstimate::is_estimated_duration_seconds_Valid() const{
    return m_estimated_duration_seconds_isValid;
}

bool OAICostEstimate::isIsValidEstimate() const {
    return m_is_valid_estimate;
}
void OAICostEstimate::setIsValidEstimate(const bool &is_valid_estimate) {
    m_is_valid_estimate = is_valid_estimate;
    m_is_valid_estimate_isSet = true;
}

bool OAICostEstimate::is_is_valid_estimate_Set() const{
    return m_is_valid_estimate_isSet;
}

bool OAICostEstimate::is_is_valid_estimate_Valid() const{
    return m_is_valid_estimate_isValid;
}

QString OAICostEstimate::getPrimetimeConfirmationToken() const {
    return m_primetime_confirmation_token;
}
void OAICostEstimate::setPrimetimeConfirmationToken(const QString &primetime_confirmation_token) {
    m_primetime_confirmation_token = primetime_confirmation_token;
    m_primetime_confirmation_token_isSet = true;
}

bool OAICostEstimate::is_primetime_confirmation_token_Set() const{
    return m_primetime_confirmation_token_isSet;
}

bool OAICostEstimate::is_primetime_confirmation_token_Valid() const{
    return m_primetime_confirmation_token_isValid;
}

QString OAICostEstimate::getPrimetimePercentage() const {
    return m_primetime_percentage;
}
void OAICostEstimate::setPrimetimePercentage(const QString &primetime_percentage) {
    m_primetime_percentage = primetime_percentage;
    m_primetime_percentage_isSet = true;
}

bool OAICostEstimate::is_primetime_percentage_Set() const{
    return m_primetime_percentage_isSet;
}

bool OAICostEstimate::is_primetime_percentage_Valid() const{
    return m_primetime_percentage_isValid;
}

OAIRideTypeEnum OAICostEstimate::getRideType() const {
    return m_ride_type;
}
void OAICostEstimate::setRideType(const OAIRideTypeEnum &ride_type) {
    m_ride_type = ride_type;
    m_ride_type_isSet = true;
}

bool OAICostEstimate::is_ride_type_Set() const{
    return m_ride_type_isSet;
}

bool OAICostEstimate::is_ride_type_Valid() const{
    return m_ride_type_isValid;
}

bool OAICostEstimate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_cost_cents_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_cost_cents_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_distance_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_confirmation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primetime_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostEstimate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
