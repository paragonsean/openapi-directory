/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEta::OAIEta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEta::OAIEta() {
    this->initializeModel();
}

OAIEta::~OAIEta() {}

void OAIEta::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_eta_seconds_isSet = false;
    m_eta_seconds_isValid = false;

    m_eta_seconds_max_isSet = false;
    m_eta_seconds_max_isValid = false;

    m_is_valid_estimate_isSet = false;
    m_is_valid_estimate_isValid = false;

    m_ride_type_isSet = false;
    m_ride_type_isValid = false;
}

void OAIEta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEta::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_eta_seconds_isValid = ::OpenAPI::fromJsonValue(m_eta_seconds, json[QString("eta_seconds")]);
    m_eta_seconds_isSet = !json[QString("eta_seconds")].isNull() && m_eta_seconds_isValid;

    m_eta_seconds_max_isValid = ::OpenAPI::fromJsonValue(m_eta_seconds_max, json[QString("eta_seconds_max")]);
    m_eta_seconds_max_isSet = !json[QString("eta_seconds_max")].isNull() && m_eta_seconds_max_isValid;

    m_is_valid_estimate_isValid = ::OpenAPI::fromJsonValue(m_is_valid_estimate, json[QString("is_valid_estimate")]);
    m_is_valid_estimate_isSet = !json[QString("is_valid_estimate")].isNull() && m_is_valid_estimate_isValid;

    m_ride_type_isValid = ::OpenAPI::fromJsonValue(m_ride_type, json[QString("ride_type")]);
    m_ride_type_isSet = !json[QString("ride_type")].isNull() && m_ride_type_isValid;
}

QString OAIEta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEta::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_eta_seconds_isSet) {
        obj.insert(QString("eta_seconds"), ::OpenAPI::toJsonValue(m_eta_seconds));
    }
    if (m_eta_seconds_max_isSet) {
        obj.insert(QString("eta_seconds_max"), ::OpenAPI::toJsonValue(m_eta_seconds_max));
    }
    if (m_is_valid_estimate_isSet) {
        obj.insert(QString("is_valid_estimate"), ::OpenAPI::toJsonValue(m_is_valid_estimate));
    }
    if (m_ride_type.isSet()) {
        obj.insert(QString("ride_type"), ::OpenAPI::toJsonValue(m_ride_type));
    }
    return obj;
}

QString OAIEta::getDisplayName() const {
    return m_display_name;
}
void OAIEta::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIEta::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIEta::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIEta::getEtaSeconds() const {
    return m_eta_seconds;
}
void OAIEta::setEtaSeconds(const qint32 &eta_seconds) {
    m_eta_seconds = eta_seconds;
    m_eta_seconds_isSet = true;
}

bool OAIEta::is_eta_seconds_Set() const{
    return m_eta_seconds_isSet;
}

bool OAIEta::is_eta_seconds_Valid() const{
    return m_eta_seconds_isValid;
}

qint32 OAIEta::getEtaSecondsMax() const {
    return m_eta_seconds_max;
}
void OAIEta::setEtaSecondsMax(const qint32 &eta_seconds_max) {
    m_eta_seconds_max = eta_seconds_max;
    m_eta_seconds_max_isSet = true;
}

bool OAIEta::is_eta_seconds_max_Set() const{
    return m_eta_seconds_max_isSet;
}

bool OAIEta::is_eta_seconds_max_Valid() const{
    return m_eta_seconds_max_isValid;
}

bool OAIEta::isIsValidEstimate() const {
    return m_is_valid_estimate;
}
void OAIEta::setIsValidEstimate(const bool &is_valid_estimate) {
    m_is_valid_estimate = is_valid_estimate;
    m_is_valid_estimate_isSet = true;
}

bool OAIEta::is_is_valid_estimate_Set() const{
    return m_is_valid_estimate_isSet;
}

bool OAIEta::is_is_valid_estimate_Valid() const{
    return m_is_valid_estimate_isValid;
}

OAIRideTypeEnum OAIEta::getRideType() const {
    return m_ride_type;
}
void OAIEta::setRideType(const OAIRideTypeEnum &ride_type) {
    m_ride_type = ride_type;
    m_ride_type_isSet = true;
}

bool OAIEta::is_ride_type_Set() const{
    return m_ride_type_isSet;
}

bool OAIEta::is_ride_type_Valid() const{
    return m_ride_type_isValid;
}

bool OAIEta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eta_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eta_seconds_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ride_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
