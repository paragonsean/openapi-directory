/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatingRequest::OAIRatingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatingRequest::OAIRatingRequest() {
    this->initializeModel();
}

OAIRatingRequest::~OAIRatingRequest() {}

void OAIRatingRequest::initializeModel() {

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_tip_isSet = false;
    m_tip_isValid = false;
}

void OAIRatingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatingRequest::fromJsonObject(QJsonObject json) {

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_tip_isValid = ::OpenAPI::fromJsonValue(m_tip, json[QString("tip")]);
    m_tip_isSet = !json[QString("tip")].isNull() && m_tip_isValid;
}

QString OAIRatingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_feedback_isSet) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_tip.isSet()) {
        obj.insert(QString("tip"), ::OpenAPI::toJsonValue(m_tip));
    }
    return obj;
}

QString OAIRatingRequest::getFeedback() const {
    return m_feedback;
}
void OAIRatingRequest::setFeedback(const QString &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIRatingRequest::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIRatingRequest::is_feedback_Valid() const{
    return m_feedback_isValid;
}

qint32 OAIRatingRequest::getRating() const {
    return m_rating;
}
void OAIRatingRequest::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIRatingRequest::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIRatingRequest::is_rating_Valid() const{
    return m_rating_isValid;
}

OAITipParams OAIRatingRequest::getTip() const {
    return m_tip;
}
void OAIRatingRequest::setTip(const OAITipParams &tip) {
    m_tip = tip;
    m_tip_isSet = true;
}

bool OAIRatingRequest::is_tip_Set() const{
    return m_tip_isSet;
}

bool OAIRatingRequest::is_tip_Valid() const{
    return m_tip_isValid;
}

bool OAIRatingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_isValid && true;
}

} // namespace OpenAPI
