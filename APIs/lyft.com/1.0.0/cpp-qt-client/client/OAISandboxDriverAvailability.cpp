/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISandboxDriverAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISandboxDriverAvailability::OAISandboxDriverAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISandboxDriverAvailability::OAISandboxDriverAvailability() {
    this->initializeModel();
}

OAISandboxDriverAvailability::~OAISandboxDriverAvailability() {}

void OAISandboxDriverAvailability::initializeModel() {

    m_driver_availability_isSet = false;
    m_driver_availability_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;
}

void OAISandboxDriverAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISandboxDriverAvailability::fromJsonObject(QJsonObject json) {

    m_driver_availability_isValid = ::OpenAPI::fromJsonValue(m_driver_availability, json[QString("driver_availability")]);
    m_driver_availability_isSet = !json[QString("driver_availability")].isNull() && m_driver_availability_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;
}

QString OAISandboxDriverAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISandboxDriverAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_driver_availability_isSet) {
        obj.insert(QString("driver_availability"), ::OpenAPI::toJsonValue(m_driver_availability));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    return obj;
}

bool OAISandboxDriverAvailability::isDriverAvailability() const {
    return m_driver_availability;
}
void OAISandboxDriverAvailability::setDriverAvailability(const bool &driver_availability) {
    m_driver_availability = driver_availability;
    m_driver_availability_isSet = true;
}

bool OAISandboxDriverAvailability::is_driver_availability_Set() const{
    return m_driver_availability_isSet;
}

bool OAISandboxDriverAvailability::is_driver_availability_Valid() const{
    return m_driver_availability_isValid;
}

double OAISandboxDriverAvailability::getLat() const {
    return m_lat;
}
void OAISandboxDriverAvailability::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAISandboxDriverAvailability::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAISandboxDriverAvailability::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAISandboxDriverAvailability::getLng() const {
    return m_lng;
}
void OAISandboxDriverAvailability::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAISandboxDriverAvailability::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAISandboxDriverAvailability::is_lng_Valid() const{
    return m_lng_isValid;
}

bool OAISandboxDriverAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_driver_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISandboxDriverAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_driver_availability_isValid && m_lat_isValid && m_lng_isValid && true;
}

} // namespace OpenAPI
