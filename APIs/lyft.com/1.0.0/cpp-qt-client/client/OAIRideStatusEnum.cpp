/**
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRideStatusEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRideStatusEnum::OAIRideStatusEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRideStatusEnum::OAIRideStatusEnum() {
    this->initializeModel();
}

OAIRideStatusEnum::~OAIRideStatusEnum() {}

void OAIRideStatusEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRideStatusEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRideStatusEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("accepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("arrived", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::ARRIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pickedUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::PICKEDUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("droppedOff", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::DROPPEDOFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("scheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::SCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRideStatusEnum::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRideStatusEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRideStatusEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRideStatusEnum::PENDING:
            val = "pending";
            break;
        case eOAIRideStatusEnum::ACCEPTED:
            val = "accepted";
            break;
        case eOAIRideStatusEnum::ARRIVED:
            val = "arrived";
            break;
        case eOAIRideStatusEnum::PICKEDUP:
            val = "pickedUp";
            break;
        case eOAIRideStatusEnum::DROPPEDOFF:
            val = "droppedOff";
            break;
        case eOAIRideStatusEnum::CANCELED:
            val = "canceled";
            break;
        case eOAIRideStatusEnum::SCHEDULED:
            val = "scheduled";
            break;
        case eOAIRideStatusEnum::UNKNOWN:
            val = "unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRideStatusEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRideStatusEnum::eOAIRideStatusEnum OAIRideStatusEnum::getValue() const {
    return m_value;
}

void OAIRideStatusEnum::setValue(const OAIRideStatusEnum::eOAIRideStatusEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRideStatusEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIRideStatusEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
