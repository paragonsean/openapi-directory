# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VehicleDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, image_url: str=None, license_plate: str=None, license_plate_state: str=None, make: str=None, model: str=None, year: int=None):
        """VehicleDetail - a model defined in OpenAPI

        :param color: The color of this VehicleDetail.
        :param image_url: The image_url of this VehicleDetail.
        :param license_plate: The license_plate of this VehicleDetail.
        :param license_plate_state: The license_plate_state of this VehicleDetail.
        :param make: The make of this VehicleDetail.
        :param model: The model of this VehicleDetail.
        :param year: The year of this VehicleDetail.
        """
        self.openapi_types = {
            'color': str,
            'image_url': str,
            'license_plate': str,
            'license_plate_state': str,
            'make': str,
            'model': str,
            'year': int
        }

        self.attribute_map = {
            'color': 'color',
            'image_url': 'image_url',
            'license_plate': 'license_plate',
            'license_plate_state': 'license_plate_state',
            'make': 'make',
            'model': 'model',
            'year': 'year'
        }

        self._color = color
        self._image_url = image_url
        self._license_plate = license_plate
        self._license_plate_state = license_plate_state
        self._make = make
        self._model = model
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VehicleDetail of this VehicleDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this VehicleDetail.

        The vehicle's color

        :return: The color of this VehicleDetail.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this VehicleDetail.

        The vehicle's color

        :param color: The color of this VehicleDetail.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def image_url(self):
        """Gets the image_url of this VehicleDetail.

        The vehicle's image url

        :return: The image_url of this VehicleDetail.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this VehicleDetail.

        The vehicle's image url

        :param image_url: The image_url of this VehicleDetail.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def license_plate(self):
        """Gets the license_plate of this VehicleDetail.

        The vehicle's license plate

        :return: The license_plate of this VehicleDetail.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this VehicleDetail.

        The vehicle's license plate

        :param license_plate: The license_plate of this VehicleDetail.
        :type license_plate: str
        """
        if license_plate is None:
            raise ValueError("Invalid value for `license_plate`, must not be `None`")

        self._license_plate = license_plate

    @property
    def license_plate_state(self):
        """Gets the license_plate_state of this VehicleDetail.

        The vehicle's license plate state

        :return: The license_plate_state of this VehicleDetail.
        :rtype: str
        """
        return self._license_plate_state

    @license_plate_state.setter
    def license_plate_state(self, license_plate_state):
        """Sets the license_plate_state of this VehicleDetail.

        The vehicle's license plate state

        :param license_plate_state: The license_plate_state of this VehicleDetail.
        :type license_plate_state: str
        """
        if license_plate_state is None:
            raise ValueError("Invalid value for `license_plate_state`, must not be `None`")

        self._license_plate_state = license_plate_state

    @property
    def make(self):
        """Gets the make of this VehicleDetail.

        The vehicle's maker

        :return: The make of this VehicleDetail.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this VehicleDetail.

        The vehicle's maker

        :param make: The make of this VehicleDetail.
        :type make: str
        """
        if make is None:
            raise ValueError("Invalid value for `make`, must not be `None`")

        self._make = make

    @property
    def model(self):
        """Gets the model of this VehicleDetail.

        The vehicle's model

        :return: The model of this VehicleDetail.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VehicleDetail.

        The vehicle's model

        :param model: The model of this VehicleDetail.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def year(self):
        """Gets the year of this VehicleDetail.

        The vehicle's model year

        :return: The year of this VehicleDetail.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this VehicleDetail.

        The vehicle's model year

        :param year: The year of this VehicleDetail.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
