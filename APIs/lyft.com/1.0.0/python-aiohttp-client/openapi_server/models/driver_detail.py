# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriverDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, image_url: str=None, phone_number: str=None, rating: str=None, user_id: str=None):
        """DriverDetail - a model defined in OpenAPI

        :param first_name: The first_name of this DriverDetail.
        :param image_url: The image_url of this DriverDetail.
        :param phone_number: The phone_number of this DriverDetail.
        :param rating: The rating of this DriverDetail.
        :param user_id: The user_id of this DriverDetail.
        """
        self.openapi_types = {
            'first_name': str,
            'image_url': str,
            'phone_number': str,
            'rating': str,
            'user_id': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'image_url': 'image_url',
            'phone_number': 'phone_number',
            'rating': 'rating',
            'user_id': 'user_id'
        }

        self._first_name = first_name
        self._image_url = image_url
        self._phone_number = phone_number
        self._rating = rating
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriverDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriverDetail of this DriverDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this DriverDetail.

        The driver's first name

        :return: The first_name of this DriverDetail.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DriverDetail.

        The driver's first name

        :param first_name: The first_name of this DriverDetail.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def image_url(self):
        """Gets the image_url of this DriverDetail.

        The driver's image url

        :return: The image_url of this DriverDetail.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this DriverDetail.

        The driver's image url

        :param image_url: The image_url of this DriverDetail.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def phone_number(self):
        """Gets the phone_number of this DriverDetail.

        The driver's contact phone number. Must be E.164 formatted. 

        :return: The phone_number of this DriverDetail.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DriverDetail.

        The driver's contact phone number. Must be E.164 formatted. 

        :param phone_number: The phone_number of this DriverDetail.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def rating(self):
        """Gets the rating of this DriverDetail.

        The driver's rating based in 0-5 scale

        :return: The rating of this DriverDetail.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this DriverDetail.

        The driver's rating based in 0-5 scale

        :param rating: The rating of this DriverDetail.
        :type rating: str
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def user_id(self):
        """Gets the user_id of this DriverDetail.

        The driver's id

        :return: The user_id of this DriverDetail.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DriverDetail.

        The driver's id

        :param user_id: The user_id of this DriverDetail.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
