# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SandboxDriverAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, driver_availability: bool=None, lat: float=None, lng: float=None):
        """SandboxDriverAvailability - a model defined in OpenAPI

        :param driver_availability: The driver_availability of this SandboxDriverAvailability.
        :param lat: The lat of this SandboxDriverAvailability.
        :param lng: The lng of this SandboxDriverAvailability.
        """
        self.openapi_types = {
            'driver_availability': bool,
            'lat': float,
            'lng': float
        }

        self.attribute_map = {
            'driver_availability': 'driver_availability',
            'lat': 'lat',
            'lng': 'lng'
        }

        self._driver_availability = driver_availability
        self._lat = lat
        self._lng = lng

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SandboxDriverAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SandboxDriverAvailability of this SandboxDriverAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver_availability(self):
        """Gets the driver_availability of this SandboxDriverAvailability.

        The availability of driver in a region

        :return: The driver_availability of this SandboxDriverAvailability.
        :rtype: bool
        """
        return self._driver_availability

    @driver_availability.setter
    def driver_availability(self, driver_availability):
        """Sets the driver_availability of this SandboxDriverAvailability.

        The availability of driver in a region

        :param driver_availability: The driver_availability of this SandboxDriverAvailability.
        :type driver_availability: bool
        """
        if driver_availability is None:
            raise ValueError("Invalid value for `driver_availability`, must not be `None`")

        self._driver_availability = driver_availability

    @property
    def lat(self):
        """Gets the lat of this SandboxDriverAvailability.

        The latitude component of a location

        :return: The lat of this SandboxDriverAvailability.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SandboxDriverAvailability.

        The latitude component of a location

        :param lat: The lat of this SandboxDriverAvailability.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this SandboxDriverAvailability.

        The longitude component of a location

        :return: The lng of this SandboxDriverAvailability.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this SandboxDriverAvailability.

        The longitude component of a location

        :param lng: The lng of this SandboxDriverAvailability.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")

        self._lng = lng
