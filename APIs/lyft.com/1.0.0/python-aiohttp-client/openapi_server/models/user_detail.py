# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, image_url: str=None, rating: str=None):
        """UserDetail - a model defined in OpenAPI

        :param first_name: The first_name of this UserDetail.
        :param image_url: The image_url of this UserDetail.
        :param rating: The rating of this UserDetail.
        """
        self.openapi_types = {
            'first_name': str,
            'image_url': str,
            'rating': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'image_url': 'image_url',
            'rating': 'rating'
        }

        self._first_name = first_name
        self._image_url = image_url
        self._rating = rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDetail of this UserDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this UserDetail.

        The passenger's first name

        :return: The first_name of this UserDetail.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDetail.

        The passenger's first name

        :param first_name: The first_name of this UserDetail.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def image_url(self):
        """Gets the image_url of this UserDetail.

        The passenger's profile image

        :return: The image_url of this UserDetail.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this UserDetail.

        The passenger's profile image

        :param image_url: The image_url of this UserDetail.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def rating(self):
        """Gets the rating of this UserDetail.

        The passenger's rating

        :return: The rating of this UserDetail.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this UserDetail.

        The passenger's rating

        :param rating: The rating of this UserDetail.
        :type rating: str
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating
