# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tip_params import TipParams
from openapi_server import util


class RatingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feedback: str=None, rating: int=None, tip: TipParams=None):
        """RatingRequest - a model defined in OpenAPI

        :param feedback: The feedback of this RatingRequest.
        :param rating: The rating of this RatingRequest.
        :param tip: The tip of this RatingRequest.
        """
        self.openapi_types = {
            'feedback': str,
            'rating': int,
            'tip': TipParams
        }

        self.attribute_map = {
            'feedback': 'feedback',
            'rating': 'rating',
            'tip': 'tip'
        }

        self._feedback = feedback
        self._rating = rating
        self._tip = tip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatingRequest of this RatingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback(self):
        """Gets the feedback of this RatingRequest.

        The passenger's written feedback about this ride

        :return: The feedback of this RatingRequest.
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this RatingRequest.

        The passenger's written feedback about this ride

        :param feedback: The feedback of this RatingRequest.
        :type feedback: str
        """

        self._feedback = feedback

    @property
    def rating(self):
        """Gets the rating of this RatingRequest.

        The passenger's rating of this ride from 1 to 5

        :return: The rating of this RatingRequest.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this RatingRequest.

        The passenger's rating of this ride from 1 to 5

        :param rating: The rating of this RatingRequest.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")
        if rating is not None and rating > 5:
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `5`")
        if rating is not None and rating < 1:
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `1`")

        self._rating = rating

    @property
    def tip(self):
        """Gets the tip of this RatingRequest.

        Tip amount in minor units and tip currency

        :return: The tip of this RatingRequest.
        :rtype: TipParams
        """
        return self._tip

    @tip.setter
    def tip(self, tip):
        """Sets the tip of this RatingRequest.

        Tip amount in minor units and tip currency

        :param tip: The tip of this RatingRequest.
        :type tip: TipParams
        """

        self._tip = tip
