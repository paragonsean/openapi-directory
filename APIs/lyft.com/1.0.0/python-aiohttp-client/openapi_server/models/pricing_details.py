# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PricingDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_charge: int=None, cancel_penalty_amount: int=None, cost_minimum: int=None, cost_per_mile: int=None, cost_per_minute: int=None, currency: str=None, trust_and_service: int=None):
        """PricingDetails - a model defined in OpenAPI

        :param base_charge: The base_charge of this PricingDetails.
        :param cancel_penalty_amount: The cancel_penalty_amount of this PricingDetails.
        :param cost_minimum: The cost_minimum of this PricingDetails.
        :param cost_per_mile: The cost_per_mile of this PricingDetails.
        :param cost_per_minute: The cost_per_minute of this PricingDetails.
        :param currency: The currency of this PricingDetails.
        :param trust_and_service: The trust_and_service of this PricingDetails.
        """
        self.openapi_types = {
            'base_charge': int,
            'cancel_penalty_amount': int,
            'cost_minimum': int,
            'cost_per_mile': int,
            'cost_per_minute': int,
            'currency': str,
            'trust_and_service': int
        }

        self.attribute_map = {
            'base_charge': 'base_charge',
            'cancel_penalty_amount': 'cancel_penalty_amount',
            'cost_minimum': 'cost_minimum',
            'cost_per_mile': 'cost_per_mile',
            'cost_per_minute': 'cost_per_minute',
            'currency': 'currency',
            'trust_and_service': 'trust_and_service'
        }

        self._base_charge = base_charge
        self._cancel_penalty_amount = cancel_penalty_amount
        self._cost_minimum = cost_minimum
        self._cost_per_mile = cost_per_mile
        self._cost_per_minute = cost_per_minute
        self._currency = currency
        self._trust_and_service = trust_and_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingDetails of this PricingDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_charge(self):
        """Gets the base_charge of this PricingDetails.

        The base charge of the trip

        :return: The base_charge of this PricingDetails.
        :rtype: int
        """
        return self._base_charge

    @base_charge.setter
    def base_charge(self, base_charge):
        """Sets the base_charge of this PricingDetails.

        The base charge of the trip

        :param base_charge: The base_charge of this PricingDetails.
        :type base_charge: int
        """

        self._base_charge = base_charge

    @property
    def cancel_penalty_amount(self):
        """Gets the cancel_penalty_amount of this PricingDetails.

        The charge amount if cancel penalty is involved

        :return: The cancel_penalty_amount of this PricingDetails.
        :rtype: int
        """
        return self._cancel_penalty_amount

    @cancel_penalty_amount.setter
    def cancel_penalty_amount(self, cancel_penalty_amount):
        """Sets the cancel_penalty_amount of this PricingDetails.

        The charge amount if cancel penalty is involved

        :param cancel_penalty_amount: The cancel_penalty_amount of this PricingDetails.
        :type cancel_penalty_amount: int
        """

        self._cancel_penalty_amount = cancel_penalty_amount

    @property
    def cost_minimum(self):
        """Gets the cost_minimum of this PricingDetails.

        The minimum charge for the trip

        :return: The cost_minimum of this PricingDetails.
        :rtype: int
        """
        return self._cost_minimum

    @cost_minimum.setter
    def cost_minimum(self, cost_minimum):
        """Sets the cost_minimum of this PricingDetails.

        The minimum charge for the trip

        :param cost_minimum: The cost_minimum of this PricingDetails.
        :type cost_minimum: int
        """

        self._cost_minimum = cost_minimum

    @property
    def cost_per_mile(self):
        """Gets the cost_per_mile of this PricingDetails.

        The cost per mile

        :return: The cost_per_mile of this PricingDetails.
        :rtype: int
        """
        return self._cost_per_mile

    @cost_per_mile.setter
    def cost_per_mile(self, cost_per_mile):
        """Sets the cost_per_mile of this PricingDetails.

        The cost per mile

        :param cost_per_mile: The cost_per_mile of this PricingDetails.
        :type cost_per_mile: int
        """

        self._cost_per_mile = cost_per_mile

    @property
    def cost_per_minute(self):
        """Gets the cost_per_minute of this PricingDetails.

        The cost per minute

        :return: The cost_per_minute of this PricingDetails.
        :rtype: int
        """
        return self._cost_per_minute

    @cost_per_minute.setter
    def cost_per_minute(self, cost_per_minute):
        """Sets the cost_per_minute of this PricingDetails.

        The cost per minute

        :param cost_per_minute: The cost_per_minute of this PricingDetails.
        :type cost_per_minute: int
        """

        self._cost_per_minute = cost_per_minute

    @property
    def currency(self):
        """Gets the currency of this PricingDetails.

        The ISO 4217 currency code for the amount (e.g. USD)

        :return: The currency of this PricingDetails.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PricingDetails.

        The ISO 4217 currency code for the amount (e.g. USD)

        :param currency: The currency of this PricingDetails.
        :type currency: str
        """

        self._currency = currency

    @property
    def trust_and_service(self):
        """Gets the trust_and_service of this PricingDetails.

        Service fee

        :return: The trust_and_service of this PricingDetails.
        :rtype: int
        """
        return self._trust_and_service

    @trust_and_service.setter
    def trust_and_service(self, trust_and_service):
        """Sets the trust_and_service of this PricingDetails.

        Service fee

        :param trust_and_service: The trust_and_service of this PricingDetails.
        :type trust_and_service: int
        """

        self._trust_and_service = trust_and_service
