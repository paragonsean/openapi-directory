# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.charge import Charge
from openapi_server.models.cost import Cost
from openapi_server.models.line_item import LineItem
from openapi_server.models.ride_profile_enum import RideProfileEnum
from openapi_server import util


class RideReceipt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charges: List[Charge]=None, line_items: List[LineItem]=None, price: Cost=None, requested_at: datetime=None, ride_id: str=None, ride_profile: RideProfileEnum=None):
        """RideReceipt - a model defined in OpenAPI

        :param charges: The charges of this RideReceipt.
        :param line_items: The line_items of this RideReceipt.
        :param price: The price of this RideReceipt.
        :param requested_at: The requested_at of this RideReceipt.
        :param ride_id: The ride_id of this RideReceipt.
        :param ride_profile: The ride_profile of this RideReceipt.
        """
        self.openapi_types = {
            'charges': List[Charge],
            'line_items': List[LineItem],
            'price': Cost,
            'requested_at': datetime,
            'ride_id': str,
            'ride_profile': RideProfileEnum
        }

        self.attribute_map = {
            'charges': 'charges',
            'line_items': 'line_items',
            'price': 'price',
            'requested_at': 'requested_at',
            'ride_id': 'ride_id',
            'ride_profile': 'ride_profile'
        }

        self._charges = charges
        self._line_items = line_items
        self._price = price
        self._requested_at = requested_at
        self._ride_id = ride_id
        self._ride_profile = ride_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RideReceipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RideReceipt of this RideReceipt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charges(self):
        """Gets the charges of this RideReceipt.

        The break down of charge method

        :return: The charges of this RideReceipt.
        :rtype: List[Charge]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this RideReceipt.

        The break down of charge method

        :param charges: The charges of this RideReceipt.
        :type charges: List[Charge]
        """

        self._charges = charges

    @property
    def line_items(self):
        """Gets the line_items of this RideReceipt.

        The break down of line items

        :return: The line_items of this RideReceipt.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this RideReceipt.

        The break down of line items

        :param line_items: The line_items of this RideReceipt.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def price(self):
        """Gets the price of this RideReceipt.

        The total price for the current ride

        :return: The price of this RideReceipt.
        :rtype: Cost
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RideReceipt.

        The total price for the current ride

        :param price: The price of this RideReceipt.
        :type price: Cost
        """

        self._price = price

    @property
    def requested_at(self):
        """Gets the requested_at of this RideReceipt.

        The ride requested timestamp in date and time

        :return: The requested_at of this RideReceipt.
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this RideReceipt.

        The ride requested timestamp in date and time

        :param requested_at: The requested_at of this RideReceipt.
        :type requested_at: datetime
        """

        self._requested_at = requested_at

    @property
    def ride_id(self):
        """Gets the ride_id of this RideReceipt.

        The unique ID of this ride

        :return: The ride_id of this RideReceipt.
        :rtype: str
        """
        return self._ride_id

    @ride_id.setter
    def ride_id(self, ride_id):
        """Sets the ride_id of this RideReceipt.

        The unique ID of this ride

        :param ride_id: The ride_id of this RideReceipt.
        :type ride_id: str
        """

        self._ride_id = ride_id

    @property
    def ride_profile(self):
        """Gets the ride_profile of this RideReceipt.

        Indicates whether the ride was requested from the business profile or personal profile of the user. 

        :return: The ride_profile of this RideReceipt.
        :rtype: RideProfileEnum
        """
        return self._ride_profile

    @ride_profile.setter
    def ride_profile(self, ride_profile):
        """Sets the ride_profile of this RideReceipt.

        Indicates whether the ride was requested from the business profile or personal profile of the user. 

        :param ride_profile: The ride_profile of this RideReceipt.
        :type ride_profile: RideProfileEnum
        """

        self._ride_profile = ride_profile
