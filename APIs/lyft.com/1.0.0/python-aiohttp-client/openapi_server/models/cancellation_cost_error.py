# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server import util


class CancellationCostError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: str=None, description: str=None, token: str=None, token_duration: int=None, error: str=None, error_description: str=None, error_detail: List[ErrorDetail]=None):
        """CancellationCostError - a model defined in OpenAPI

        :param amount: The amount of this CancellationCostError.
        :param currency: The currency of this CancellationCostError.
        :param description: The description of this CancellationCostError.
        :param token: The token of this CancellationCostError.
        :param token_duration: The token_duration of this CancellationCostError.
        :param error: The error of this CancellationCostError.
        :param error_description: The error_description of this CancellationCostError.
        :param error_detail: The error_detail of this CancellationCostError.
        """
        self.openapi_types = {
            'amount': int,
            'currency': str,
            'description': str,
            'token': str,
            'token_duration': int,
            'error': str,
            'error_description': str,
            'error_detail': List[ErrorDetail]
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'description': 'description',
            'token': 'token',
            'token_duration': 'token_duration',
            'error': 'error',
            'error_description': 'error_description',
            'error_detail': 'error_detail'
        }

        self._amount = amount
        self._currency = currency
        self._description = description
        self._token = token
        self._token_duration = token_duration
        self._error = error
        self._error_description = error_description
        self._error_detail = error_detail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancellationCostError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancellationCostError of this CancellationCostError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CancellationCostError.

        Total price of the ride

        :return: The amount of this CancellationCostError.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CancellationCostError.

        Total price of the ride

        :param amount: The amount of this CancellationCostError.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CancellationCostError.

        The ISO 4217 currency code for the amount (e.g. USD)

        :return: The currency of this CancellationCostError.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CancellationCostError.

        The ISO 4217 currency code for the amount (e.g. USD)

        :param currency: The currency of this CancellationCostError.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this CancellationCostError.

        The description for the cost

        :return: The description of this CancellationCostError.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CancellationCostError.

        The description for the cost

        :param description: The description of this CancellationCostError.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def token(self):
        """Gets the token of this CancellationCostError.

        Token used to confirm the fee when cancelling a request

        :return: The token of this CancellationCostError.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CancellationCostError.

        Token used to confirm the fee when cancelling a request

        :param token: The token of this CancellationCostError.
        :type token: str
        """

        self._token = token

    @property
    def token_duration(self):
        """Gets the token_duration of this CancellationCostError.

        How long, in seconds, before the token expires

        :return: The token_duration of this CancellationCostError.
        :rtype: int
        """
        return self._token_duration

    @token_duration.setter
    def token_duration(self, token_duration):
        """Sets the token_duration of this CancellationCostError.

        How long, in seconds, before the token expires

        :param token_duration: The token_duration of this CancellationCostError.
        :type token_duration: int
        """
        if token_duration is not None and token_duration < 0:
            raise ValueError("Invalid value for `token_duration`, must be a value greater than or equal to `0`")

        self._token_duration = token_duration

    @property
    def error(self):
        """Gets the error of this CancellationCostError.

        A \"slug\" that serves as the error code (eg. \"bad_parameter\")

        :return: The error of this CancellationCostError.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CancellationCostError.

        A \"slug\" that serves as the error code (eg. \"bad_parameter\")

        :param error: The error of this CancellationCostError.
        :type error: str
        """

        self._error = error

    @property
    def error_description(self):
        """Gets the error_description of this CancellationCostError.

        A user-friendly description of the error (appropriate to show to an end-user)

        :return: The error_description of this CancellationCostError.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this CancellationCostError.

        A user-friendly description of the error (appropriate to show to an end-user)

        :param error_description: The error_description of this CancellationCostError.
        :type error_description: str
        """

        self._error_description = error_description

    @property
    def error_detail(self):
        """Gets the error_detail of this CancellationCostError.


        :return: The error_detail of this CancellationCostError.
        :rtype: List[ErrorDetail]
        """
        return self._error_detail

    @error_detail.setter
    def error_detail(self, error_detail):
        """Sets the error_detail of this CancellationCostError.


        :param error_detail: The error_detail of this CancellationCostError.
        :type error_detail: List[ErrorDetail]
        """

        self._error_detail = error_detail
