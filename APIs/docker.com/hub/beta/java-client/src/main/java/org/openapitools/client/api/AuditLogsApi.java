/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAuditActionsResponse;
import org.openapitools.client.model.GetAuditLogsResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RpcStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditLogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for auditLogsGetAuditActions
     * @param account Namespace to query audit log actions for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetAuditActionsCall(String account, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/auditlogs/{account}/actions"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditLogsGetAuditActionsValidateBeforeCall(String account, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling auditLogsGetAuditActions(Async)");
        }

        return auditLogsGetAuditActionsCall(account, _callback);

    }

    /**
     * Returns list of audit log actions.
     * Get audit log actions for a namespace to be used as a filter for querying audit events.
     * @param account Namespace to query audit log actions for. (required)
     * @return GetAuditActionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetAuditActionsResponse auditLogsGetAuditActions(String account) throws ApiException {
        ApiResponse<GetAuditActionsResponse> localVarResp = auditLogsGetAuditActionsWithHttpInfo(account);
        return localVarResp.getData();
    }

    /**
     * Returns list of audit log actions.
     * Get audit log actions for a namespace to be used as a filter for querying audit events.
     * @param account Namespace to query audit log actions for. (required)
     * @return ApiResponse&lt;GetAuditActionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuditActionsResponse> auditLogsGetAuditActionsWithHttpInfo(String account) throws ApiException {
        okhttp3.Call localVarCall = auditLogsGetAuditActionsValidateBeforeCall(account, null);
        Type localVarReturnType = new TypeToken<GetAuditActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of audit log actions. (asynchronously)
     * Get audit log actions for a namespace to be used as a filter for querying audit events.
     * @param account Namespace to query audit log actions for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetAuditActionsAsync(String account, final ApiCallback<GetAuditActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditLogsGetAuditActionsValidateBeforeCall(account, _callback);
        Type localVarReturnType = new TypeToken<GetAuditActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditLogsGetAuditLogs
     * @param account Namespace to query audit logs for. (required)
     * @param action action name one of [\&quot;repo.tag.push\&quot;, ...]. Optional parameter to filter specific audit log actions. (optional)
     * @param name name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member. (optional)
     * @param actor actor name. Optional parameter to filter audit log events to the specific user who triggered the event. (optional)
     * @param from Start of the time window you wish to query audit events for. (optional)
     * @param to End of the time window you wish to query audit events for. (optional)
     * @param page page - specify page number. Page number to get. (optional, default to 1)
     * @param pageSize page_size - specify page size. Number of events to return per page. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetAuditLogsCall(String account, String action, String name, String actor, OffsetDateTime from, OffsetDateTime to, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/auditlogs/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (actor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor", actor));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditLogsGetAuditLogsValidateBeforeCall(String account, String action, String name, String actor, OffsetDateTime from, OffsetDateTime to, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling auditLogsGetAuditLogs(Async)");
        }

        return auditLogsGetAuditLogsCall(account, action, name, actor, from, to, page, pageSize, _callback);

    }

    /**
     * Returns list of audit log  events.
     * Get audit log events for a given namespace.
     * @param account Namespace to query audit logs for. (required)
     * @param action action name one of [\&quot;repo.tag.push\&quot;, ...]. Optional parameter to filter specific audit log actions. (optional)
     * @param name name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member. (optional)
     * @param actor actor name. Optional parameter to filter audit log events to the specific user who triggered the event. (optional)
     * @param from Start of the time window you wish to query audit events for. (optional)
     * @param to End of the time window you wish to query audit events for. (optional)
     * @param page page - specify page number. Page number to get. (optional, default to 1)
     * @param pageSize page_size - specify page size. Number of events to return per page. (optional, default to 25)
     * @return GetAuditLogsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetAuditLogsResponse auditLogsGetAuditLogs(String account, String action, String name, String actor, OffsetDateTime from, OffsetDateTime to, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GetAuditLogsResponse> localVarResp = auditLogsGetAuditLogsWithHttpInfo(account, action, name, actor, from, to, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Returns list of audit log  events.
     * Get audit log events for a given namespace.
     * @param account Namespace to query audit logs for. (required)
     * @param action action name one of [\&quot;repo.tag.push\&quot;, ...]. Optional parameter to filter specific audit log actions. (optional)
     * @param name name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member. (optional)
     * @param actor actor name. Optional parameter to filter audit log events to the specific user who triggered the event. (optional)
     * @param from Start of the time window you wish to query audit events for. (optional)
     * @param to End of the time window you wish to query audit events for. (optional)
     * @param page page - specify page number. Page number to get. (optional, default to 1)
     * @param pageSize page_size - specify page size. Number of events to return per page. (optional, default to 25)
     * @return ApiResponse&lt;GetAuditLogsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuditLogsResponse> auditLogsGetAuditLogsWithHttpInfo(String account, String action, String name, String actor, OffsetDateTime from, OffsetDateTime to, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = auditLogsGetAuditLogsValidateBeforeCall(account, action, name, actor, from, to, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GetAuditLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of audit log  events. (asynchronously)
     * Get audit log events for a given namespace.
     * @param account Namespace to query audit logs for. (required)
     * @param action action name one of [\&quot;repo.tag.push\&quot;, ...]. Optional parameter to filter specific audit log actions. (optional)
     * @param name name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member. (optional)
     * @param actor actor name. Optional parameter to filter audit log events to the specific user who triggered the event. (optional)
     * @param from Start of the time window you wish to query audit events for. (optional)
     * @param to End of the time window you wish to query audit events for. (optional)
     * @param page page - specify page number. Page number to get. (optional, default to 1)
     * @param pageSize page_size - specify page size. Number of events to return per page. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditLogsGetAuditLogsAsync(String account, String action, String name, String actor, OffsetDateTime from, OffsetDateTime to, Integer page, Integer pageSize, final ApiCallback<GetAuditLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditLogsGetAuditLogsValidateBeforeCall(account, action, name, actor, from, to, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetAuditLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
