/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostNamespacesDeleteImagesRequestIgnoreWarningsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostNamespacesDeleteImagesRequestIgnoreWarningsInner {
  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  /**
   * Warning to ignore.
   */
  @JsonAdapter(WarningEnum.Adapter.class)
  public enum WarningEnum {
    IS_ACTIVE("is_active"),
    
    CURRENT_TAG("current_tag");

    private String value;

    WarningEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarningEnum fromValue(String value) {
      for (WarningEnum b : WarningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WarningEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarningEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarningEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WarningEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WarningEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WARNING = "warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private WarningEnum warning;

  public PostNamespacesDeleteImagesRequestIgnoreWarningsInner() {
  }

  public PostNamespacesDeleteImagesRequestIgnoreWarningsInner digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Digest of the image to ignore the warning for.
   * @return digest
   */
  @javax.annotation.Nonnull
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }


  public PostNamespacesDeleteImagesRequestIgnoreWarningsInner repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Name of the repository of the image to ignore the warning for.
   * @return repository
   */
  @javax.annotation.Nonnull
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public PostNamespacesDeleteImagesRequestIgnoreWarningsInner tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public PostNamespacesDeleteImagesRequestIgnoreWarningsInner addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Current tags to ignore.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public PostNamespacesDeleteImagesRequestIgnoreWarningsInner warning(WarningEnum warning) {
    this.warning = warning;
    return this;
  }

  /**
   * Warning to ignore.
   * @return warning
   */
  @javax.annotation.Nonnull
  public WarningEnum getWarning() {
    return warning;
  }

  public void setWarning(WarningEnum warning) {
    this.warning = warning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostNamespacesDeleteImagesRequestIgnoreWarningsInner postNamespacesDeleteImagesRequestIgnoreWarningsInner = (PostNamespacesDeleteImagesRequestIgnoreWarningsInner) o;
    return Objects.equals(this.digest, postNamespacesDeleteImagesRequestIgnoreWarningsInner.digest) &&
        Objects.equals(this.repository, postNamespacesDeleteImagesRequestIgnoreWarningsInner.repository) &&
        Objects.equals(this.tags, postNamespacesDeleteImagesRequestIgnoreWarningsInner.tags) &&
        Objects.equals(this.warning, postNamespacesDeleteImagesRequestIgnoreWarningsInner.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digest, repository, tags, warning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostNamespacesDeleteImagesRequestIgnoreWarningsInner {\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digest");
    openapiFields.add("repository");
    openapiFields.add("tags");
    openapiFields.add("warning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("digest");
    openapiRequiredFields.add("repository");
    openapiRequiredFields.add("warning");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostNamespacesDeleteImagesRequestIgnoreWarningsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostNamespacesDeleteImagesRequestIgnoreWarningsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostNamespacesDeleteImagesRequestIgnoreWarningsInner is not found in the empty JSON string", PostNamespacesDeleteImagesRequestIgnoreWarningsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostNamespacesDeleteImagesRequestIgnoreWarningsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostNamespacesDeleteImagesRequestIgnoreWarningsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostNamespacesDeleteImagesRequestIgnoreWarningsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("digest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest").toString()));
      }
      if (!jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("warning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warning").toString()));
      }
      // validate the required field `warning`
      WarningEnum.validateJsonElement(jsonObj.get("warning"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostNamespacesDeleteImagesRequestIgnoreWarningsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostNamespacesDeleteImagesRequestIgnoreWarningsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostNamespacesDeleteImagesRequestIgnoreWarningsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostNamespacesDeleteImagesRequestIgnoreWarningsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PostNamespacesDeleteImagesRequestIgnoreWarningsInner>() {
           @Override
           public void write(JsonWriter out, PostNamespacesDeleteImagesRequestIgnoreWarningsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostNamespacesDeleteImagesRequestIgnoreWarningsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostNamespacesDeleteImagesRequestIgnoreWarningsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostNamespacesDeleteImagesRequestIgnoreWarningsInner
   * @throws IOException if the JSON string is invalid with respect to PostNamespacesDeleteImagesRequestIgnoreWarningsInner
   */
  public static PostNamespacesDeleteImagesRequestIgnoreWarningsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostNamespacesDeleteImagesRequestIgnoreWarningsInner.class);
  }

  /**
   * Convert an instance of PostNamespacesDeleteImagesRequestIgnoreWarningsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

