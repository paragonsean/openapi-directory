/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetNamespaceRepositoryImagesResponseResultsInnerTagsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetNamespaceRepositoryImagesResponseResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetNamespaceRepositoryImagesResponseResultsInner {
  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_LAST_PULLED = "last_pulled";
  @SerializedName(SERIALIZED_NAME_LAST_PULLED)
  private String lastPulled;

  public static final String SERIALIZED_NAME_LAST_PUSHED = "last_pushed";
  @SerializedName(SERIALIZED_NAME_LAST_PUSHED)
  private String lastPushed;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  /**
   * The status of the image based on its last activity against the &#x60;active_from&#x60; time.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<GetNamespaceRepositoryImagesResponseResultsInnerTagsInner> tags = new ArrayList<>();

  public GetNamespaceRepositoryImagesResponseResultsInner() {
  }

  public GetNamespaceRepositoryImagesResponseResultsInner digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * The image&#39;s digest.
   * @return digest
   */
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }


  public GetNamespaceRepositoryImagesResponseResultsInner lastPulled(String lastPulled) {
    this.lastPulled = lastPulled;
    return this;
  }

  /**
   * Time when this image was last pulled. Note this is updated at most once per hour.
   * @return lastPulled
   */
  @javax.annotation.Nullable
  public String getLastPulled() {
    return lastPulled;
  }

  public void setLastPulled(String lastPulled) {
    this.lastPulled = lastPulled;
  }


  public GetNamespaceRepositoryImagesResponseResultsInner lastPushed(String lastPushed) {
    this.lastPushed = lastPushed;
    return this;
  }

  /**
   * Time when this image was last pushed.
   * @return lastPushed
   */
  @javax.annotation.Nullable
  public String getLastPushed() {
    return lastPushed;
  }

  public void setLastPushed(String lastPushed) {
    this.lastPushed = lastPushed;
  }


  public GetNamespaceRepositoryImagesResponseResultsInner namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The repository namespace.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public GetNamespaceRepositoryImagesResponseResultsInner repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * The repository name.
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public GetNamespaceRepositoryImagesResponseResultsInner status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the image based on its last activity against the &#x60;active_from&#x60; time.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetNamespaceRepositoryImagesResponseResultsInner tags(List<GetNamespaceRepositoryImagesResponseResultsInnerTagsInner> tags) {
    this.tags = tags;
    return this;
  }

  public GetNamespaceRepositoryImagesResponseResultsInner addTagsItem(GetNamespaceRepositoryImagesResponseResultsInnerTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The current and historical tags for this image.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<GetNamespaceRepositoryImagesResponseResultsInnerTagsInner> getTags() {
    return tags;
  }

  public void setTags(List<GetNamespaceRepositoryImagesResponseResultsInnerTagsInner> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetNamespaceRepositoryImagesResponseResultsInner getNamespaceRepositoryImagesResponseResultsInner = (GetNamespaceRepositoryImagesResponseResultsInner) o;
    return Objects.equals(this.digest, getNamespaceRepositoryImagesResponseResultsInner.digest) &&
        Objects.equals(this.lastPulled, getNamespaceRepositoryImagesResponseResultsInner.lastPulled) &&
        Objects.equals(this.lastPushed, getNamespaceRepositoryImagesResponseResultsInner.lastPushed) &&
        Objects.equals(this.namespace, getNamespaceRepositoryImagesResponseResultsInner.namespace) &&
        Objects.equals(this.repository, getNamespaceRepositoryImagesResponseResultsInner.repository) &&
        Objects.equals(this.status, getNamespaceRepositoryImagesResponseResultsInner.status) &&
        Objects.equals(this.tags, getNamespaceRepositoryImagesResponseResultsInner.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(digest, lastPulled, lastPushed, namespace, repository, status, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetNamespaceRepositoryImagesResponseResultsInner {\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    lastPulled: ").append(toIndentedString(lastPulled)).append("\n");
    sb.append("    lastPushed: ").append(toIndentedString(lastPushed)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digest");
    openapiFields.add("last_pulled");
    openapiFields.add("last_pushed");
    openapiFields.add("namespace");
    openapiFields.add("repository");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetNamespaceRepositoryImagesResponseResultsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetNamespaceRepositoryImagesResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetNamespaceRepositoryImagesResponseResultsInner is not found in the empty JSON string", GetNamespaceRepositoryImagesResponseResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetNamespaceRepositoryImagesResponseResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetNamespaceRepositoryImagesResponseResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) && !jsonObj.get("digest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest").toString()));
      }
      if ((jsonObj.get("last_pulled") != null && !jsonObj.get("last_pulled").isJsonNull()) && !jsonObj.get("last_pulled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_pulled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_pulled").toString()));
      }
      if ((jsonObj.get("last_pushed") != null && !jsonObj.get("last_pushed").isJsonNull()) && !jsonObj.get("last_pushed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_pushed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_pushed").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            GetNamespaceRepositoryImagesResponseResultsInnerTagsInner.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetNamespaceRepositoryImagesResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetNamespaceRepositoryImagesResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetNamespaceRepositoryImagesResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetNamespaceRepositoryImagesResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetNamespaceRepositoryImagesResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, GetNamespaceRepositoryImagesResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetNamespaceRepositoryImagesResponseResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetNamespaceRepositoryImagesResponseResultsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetNamespaceRepositoryImagesResponseResultsInner
   * @throws IOException if the JSON string is invalid with respect to GetNamespaceRepositoryImagesResponseResultsInner
   */
  public static GetNamespaceRepositoryImagesResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetNamespaceRepositoryImagesResponseResultsInner.class);
  }

  /**
   * Convert an instance of GetNamespaceRepositoryImagesResponseResultsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

