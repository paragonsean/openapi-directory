/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetNamespaceRepositoryImagesResponse;
import org.openapitools.client.model.GetNamespaceRepositoryImagesSummaryResponse;
import org.openapitools.client.model.GetNamespaceRepositoryImagesTagsResponse;
import org.openapitools.client.model.PostNamespacesDeleteImagesRequest;
import org.openapitools.client.model.PostNamespacesDeleteImagesResponseError;
import org.openapitools.client.model.PostNamespacesDeleteImagesResponseSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNamespacesRepositoriesImages
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param status Filters to only show images of this status. (optional)
     * @param currentlyTagged Filters to only show images with: - &#x60;true&#x60;: at least 1 current tag. - &#x60;false&#x60;: no current tags.  (optional)
     * @param ordering Orders the results by this property.  Prefixing with &#x60;-&#x60; sorts by descending order.  (optional)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesRepositoriesImagesCall(String namespace, String repository, String status, Boolean currentlyTagged, String ordering, String activeFrom, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/namespaces/{namespace}/repositories/{repository}/images"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "repository" + "}", localVarApiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (currentlyTagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currently_tagged", currentlyTagged));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (activeFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_from", activeFrom));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacesRepositoriesImagesValidateBeforeCall(String namespace, String repository, String status, Boolean currentlyTagged, String ordering, String activeFrom, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespacesRepositoriesImages(Async)");
        }

        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNamespacesRepositoriesImages(Async)");
        }

        return getNamespacesRepositoriesImagesCall(namespace, repository, status, currentlyTagged, ordering, activeFrom, page, pageSize, _callback);

    }

    /**
     * Get details of repository&#39;s images
     * Gets details on the images in a repository.
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param status Filters to only show images of this status. (optional)
     * @param currentlyTagged Filters to only show images with: - &#x60;true&#x60;: at least 1 current tag. - &#x60;false&#x60;: no current tags.  (optional)
     * @param ordering Orders the results by this property.  Prefixing with &#x60;-&#x60; sorts by descending order.  (optional)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @return GetNamespaceRepositoryImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans. </td><td>  -  </td></tr>
     </table>
     */
    public GetNamespaceRepositoryImagesResponse getNamespacesRepositoriesImages(String namespace, String repository, String status, Boolean currentlyTagged, String ordering, String activeFrom, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GetNamespaceRepositoryImagesResponse> localVarResp = getNamespacesRepositoriesImagesWithHttpInfo(namespace, repository, status, currentlyTagged, ordering, activeFrom, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get details of repository&#39;s images
     * Gets details on the images in a repository.
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param status Filters to only show images of this status. (optional)
     * @param currentlyTagged Filters to only show images with: - &#x60;true&#x60;: at least 1 current tag. - &#x60;false&#x60;: no current tags.  (optional)
     * @param ordering Orders the results by this property.  Prefixing with &#x60;-&#x60; sorts by descending order.  (optional)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @return ApiResponse&lt;GetNamespaceRepositoryImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNamespaceRepositoryImagesResponse> getNamespacesRepositoriesImagesWithHttpInfo(String namespace, String repository, String status, Boolean currentlyTagged, String ordering, String activeFrom, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getNamespacesRepositoriesImagesValidateBeforeCall(namespace, repository, status, currentlyTagged, ordering, activeFrom, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GetNamespaceRepositoryImagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of repository&#39;s images (asynchronously)
     * Gets details on the images in a repository.
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param status Filters to only show images of this status. (optional)
     * @param currentlyTagged Filters to only show images with: - &#x60;true&#x60;: at least 1 current tag. - &#x60;false&#x60;: no current tags.  (optional)
     * @param ordering Orders the results by this property.  Prefixing with &#x60;-&#x60; sorts by descending order.  (optional)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesRepositoriesImagesAsync(String namespace, String repository, String status, Boolean currentlyTagged, String ordering, String activeFrom, Integer page, Integer pageSize, final ApiCallback<GetNamespaceRepositoryImagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacesRepositoriesImagesValidateBeforeCall(namespace, repository, status, currentlyTagged, ordering, activeFrom, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetNamespaceRepositoryImagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespacesRepositoriesImagesSummary
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesRepositoriesImagesSummaryCall(String namespace, String repository, String activeFrom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/namespaces/{namespace}/repositories/{repository}/images-summary"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "repository" + "}", localVarApiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activeFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_from", activeFrom));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacesRepositoriesImagesSummaryValidateBeforeCall(String namespace, String repository, String activeFrom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespacesRepositoriesImagesSummary(Async)");
        }

        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNamespacesRepositoriesImagesSummary(Async)");
        }

        return getNamespacesRepositoriesImagesSummaryCall(namespace, repository, activeFrom, _callback);

    }

    /**
     * Get summary of repository&#39;s images
     * Gets the number of images in a repository and the number of images counted as active and inactive. 
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @return GetNamespaceRepositoryImagesSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
     </table>
     */
    public GetNamespaceRepositoryImagesSummaryResponse getNamespacesRepositoriesImagesSummary(String namespace, String repository, String activeFrom) throws ApiException {
        ApiResponse<GetNamespaceRepositoryImagesSummaryResponse> localVarResp = getNamespacesRepositoriesImagesSummaryWithHttpInfo(namespace, repository, activeFrom);
        return localVarResp.getData();
    }

    /**
     * Get summary of repository&#39;s images
     * Gets the number of images in a repository and the number of images counted as active and inactive. 
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @return ApiResponse&lt;GetNamespaceRepositoryImagesSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNamespaceRepositoryImagesSummaryResponse> getNamespacesRepositoriesImagesSummaryWithHttpInfo(String namespace, String repository, String activeFrom) throws ApiException {
        okhttp3.Call localVarCall = getNamespacesRepositoriesImagesSummaryValidateBeforeCall(namespace, repository, activeFrom, null);
        Type localVarReturnType = new TypeToken<GetNamespaceRepositoryImagesSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary of repository&#39;s images (asynchronously)
     * Gets the number of images in a repository and the number of images counted as active and inactive. 
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param activeFrom Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesRepositoriesImagesSummaryAsync(String namespace, String repository, String activeFrom, final ApiCallback<GetNamespaceRepositoryImagesSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacesRepositoriesImagesSummaryValidateBeforeCall(namespace, repository, activeFrom, _callback);
        Type localVarReturnType = new TypeToken<GetNamespaceRepositoryImagesSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespacesRepositoriesImagesTags
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param digest Digest of the image. (required)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesRepositoriesImagesTagsCall(String namespace, String repository, String digest, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "repository" + "}", localVarApiClient.escapeString(repository.toString()))
            .replace("{" + "digest" + "}", localVarApiClient.escapeString(digest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacesRepositoriesImagesTagsValidateBeforeCall(String namespace, String repository, String digest, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespacesRepositoriesImagesTags(Async)");
        }

        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNamespacesRepositoriesImagesTags(Async)");
        }

        // verify the required parameter 'digest' is set
        if (digest == null) {
            throw new ApiException("Missing the required parameter 'digest' when calling getNamespacesRepositoriesImagesTags(Async)");
        }

        return getNamespacesRepositoriesImagesTagsCall(namespace, repository, digest, page, pageSize, _callback);

    }

    /**
     * Get image&#39;s tags
     * Gets current and historical tags for an image.
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param digest Digest of the image. (required)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @return GetNamespaceRepositoryImagesTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public GetNamespaceRepositoryImagesTagsResponse getNamespacesRepositoriesImagesTags(String namespace, String repository, String digest, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GetNamespaceRepositoryImagesTagsResponse> localVarResp = getNamespacesRepositoriesImagesTagsWithHttpInfo(namespace, repository, digest, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get image&#39;s tags
     * Gets current and historical tags for an image.
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param digest Digest of the image. (required)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @return ApiResponse&lt;GetNamespaceRepositoryImagesTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNamespaceRepositoryImagesTagsResponse> getNamespacesRepositoriesImagesTagsWithHttpInfo(String namespace, String repository, String digest, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getNamespacesRepositoriesImagesTagsValidateBeforeCall(namespace, repository, digest, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GetNamespaceRepositoryImagesTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get image&#39;s tags (asynchronously)
     * Gets current and historical tags for an image.
     * @param namespace Namespace of the repository. (required)
     * @param repository Name of the repository. (required)
     * @param digest Digest of the image. (required)
     * @param page Page number to get. Defaults to 1. (optional)
     * @param pageSize Number of images to get per page. Defaults to 10. Max of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - user does not have read access to the namespace </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesRepositoriesImagesTagsAsync(String namespace, String repository, String digest, Integer page, Integer pageSize, final ApiCallback<GetNamespaceRepositoryImagesTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacesRepositoriesImagesTagsValidateBeforeCall(namespace, repository, digest, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetNamespaceRepositoryImagesTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNamespacesDeleteImages
     * @param namespace Namespace of the repository. (required)
     * @param postNamespacesDeleteImagesRequest Delete request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletion completed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Deletion not possible </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNamespacesDeleteImagesCall(String namespace, PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postNamespacesDeleteImagesRequest;

        // create path and map variables
        String localVarPath = "/v2/namespaces/{namespace}/delete-images"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNamespacesDeleteImagesValidateBeforeCall(String namespace, PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling postNamespacesDeleteImages(Async)");
        }

        // verify the required parameter 'postNamespacesDeleteImagesRequest' is set
        if (postNamespacesDeleteImagesRequest == null) {
            throw new ApiException("Missing the required parameter 'postNamespacesDeleteImagesRequest' when calling postNamespacesDeleteImages(Async)");
        }

        return postNamespacesDeleteImagesCall(namespace, postNamespacesDeleteImagesRequest, _callback);

    }

    /**
     * Delete images
     * Deletes one or more images within a namespace. This is currently limited to a single  repository.  If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings. To continue with the deletion, you must ignore these warnings by putting them in the &#x60;ignore_warnings&#x60; property.  Deleting a currently tagged image deletes the tag from the repository.  You cannot ignore errors. It is not possible to directly delete children of multi-arch images. 
     * @param namespace Namespace of the repository. (required)
     * @param postNamespacesDeleteImagesRequest Delete request. (required)
     * @return PostNamespacesDeleteImagesResponseSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletion completed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Deletion not possible </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public PostNamespacesDeleteImagesResponseSuccess postNamespacesDeleteImages(String namespace, PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest) throws ApiException {
        ApiResponse<PostNamespacesDeleteImagesResponseSuccess> localVarResp = postNamespacesDeleteImagesWithHttpInfo(namespace, postNamespacesDeleteImagesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete images
     * Deletes one or more images within a namespace. This is currently limited to a single  repository.  If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings. To continue with the deletion, you must ignore these warnings by putting them in the &#x60;ignore_warnings&#x60; property.  Deleting a currently tagged image deletes the tag from the repository.  You cannot ignore errors. It is not possible to directly delete children of multi-arch images. 
     * @param namespace Namespace of the repository. (required)
     * @param postNamespacesDeleteImagesRequest Delete request. (required)
     * @return ApiResponse&lt;PostNamespacesDeleteImagesResponseSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletion completed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Deletion not possible </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostNamespacesDeleteImagesResponseSuccess> postNamespacesDeleteImagesWithHttpInfo(String namespace, PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest) throws ApiException {
        okhttp3.Call localVarCall = postNamespacesDeleteImagesValidateBeforeCall(namespace, postNamespacesDeleteImagesRequest, null);
        Type localVarReturnType = new TypeToken<PostNamespacesDeleteImagesResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete images (asynchronously)
     * Deletes one or more images within a namespace. This is currently limited to a single  repository.  If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings. To continue with the deletion, you must ignore these warnings by putting them in the &#x60;ignore_warnings&#x60; property.  Deleting a currently tagged image deletes the tag from the repository.  You cannot ignore errors. It is not possible to directly delete children of multi-arch images. 
     * @param namespace Namespace of the repository. (required)
     * @param postNamespacesDeleteImagesRequest Delete request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletion completed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Deletion not possible </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - this API is only available to users on Pro or Team plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNamespacesDeleteImagesAsync(String namespace, PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest, final ApiCallback<PostNamespacesDeleteImagesResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNamespacesDeleteImagesValidateBeforeCall(namespace, postNamespacesDeleteImagesRequest, _callback);
        Type localVarReturnType = new TypeToken<PostNamespacesDeleteImagesResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
