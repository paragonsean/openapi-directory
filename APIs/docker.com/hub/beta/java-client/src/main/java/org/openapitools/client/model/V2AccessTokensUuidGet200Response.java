/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V2AccessTokensUuidGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V2AccessTokensUuidGet200Response {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATOR_IP = "creator_ip";
  @SerializedName(SERIALIZED_NAME_CREATOR_IP)
  private String creatorIp;

  public static final String SERIALIZED_NAME_CREATOR_UA = "creator_ua";
  @SerializedName(SERIALIZED_NAME_CREATOR_UA)
  private String creatorUa;

  public static final String SERIALIZED_NAME_GENERATED_BY = "generated_by";
  @SerializedName(SERIALIZED_NAME_GENERATED_BY)
  private String generatedBy;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LAST_USED = "last_used";
  @SerializedName(SERIALIZED_NAME_LAST_USED)
  private String lastUsed;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TOKEN_LABEL = "token_label";
  @SerializedName(SERIALIZED_NAME_TOKEN_LABEL)
  private String tokenLabel;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public V2AccessTokensUuidGet200Response() {
  }

  public V2AccessTokensUuidGet200Response clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public V2AccessTokensUuidGet200Response createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public V2AccessTokensUuidGet200Response creatorIp(String creatorIp) {
    this.creatorIp = creatorIp;
    return this;
  }

  /**
   * Get creatorIp
   * @return creatorIp
   */
  @javax.annotation.Nullable
  public String getCreatorIp() {
    return creatorIp;
  }

  public void setCreatorIp(String creatorIp) {
    this.creatorIp = creatorIp;
  }


  public V2AccessTokensUuidGet200Response creatorUa(String creatorUa) {
    this.creatorUa = creatorUa;
    return this;
  }

  /**
   * Get creatorUa
   * @return creatorUa
   */
  @javax.annotation.Nullable
  public String getCreatorUa() {
    return creatorUa;
  }

  public void setCreatorUa(String creatorUa) {
    this.creatorUa = creatorUa;
  }


  public V2AccessTokensUuidGet200Response generatedBy(String generatedBy) {
    this.generatedBy = generatedBy;
    return this;
  }

  /**
   * Get generatedBy
   * @return generatedBy
   */
  @javax.annotation.Nullable
  public String getGeneratedBy() {
    return generatedBy;
  }

  public void setGeneratedBy(String generatedBy) {
    this.generatedBy = generatedBy;
  }


  public V2AccessTokensUuidGet200Response isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public V2AccessTokensUuidGet200Response lastUsed(String lastUsed) {
    this.lastUsed = lastUsed;
    return this;
  }

  /**
   * Get lastUsed
   * @return lastUsed
   */
  @javax.annotation.Nullable
  public String getLastUsed() {
    return lastUsed;
  }

  public void setLastUsed(String lastUsed) {
    this.lastUsed = lastUsed;
  }


  public V2AccessTokensUuidGet200Response scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public V2AccessTokensUuidGet200Response addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public V2AccessTokensUuidGet200Response token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public V2AccessTokensUuidGet200Response tokenLabel(String tokenLabel) {
    this.tokenLabel = tokenLabel;
    return this;
  }

  /**
   * Get tokenLabel
   * @return tokenLabel
   */
  @javax.annotation.Nullable
  public String getTokenLabel() {
    return tokenLabel;
  }

  public void setTokenLabel(String tokenLabel) {
    this.tokenLabel = tokenLabel;
  }


  public V2AccessTokensUuidGet200Response uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2AccessTokensUuidGet200Response v2AccessTokensUuidGet200Response = (V2AccessTokensUuidGet200Response) o;
    return Objects.equals(this.clientId, v2AccessTokensUuidGet200Response.clientId) &&
        Objects.equals(this.createdAt, v2AccessTokensUuidGet200Response.createdAt) &&
        Objects.equals(this.creatorIp, v2AccessTokensUuidGet200Response.creatorIp) &&
        Objects.equals(this.creatorUa, v2AccessTokensUuidGet200Response.creatorUa) &&
        Objects.equals(this.generatedBy, v2AccessTokensUuidGet200Response.generatedBy) &&
        Objects.equals(this.isActive, v2AccessTokensUuidGet200Response.isActive) &&
        Objects.equals(this.lastUsed, v2AccessTokensUuidGet200Response.lastUsed) &&
        Objects.equals(this.scopes, v2AccessTokensUuidGet200Response.scopes) &&
        Objects.equals(this.token, v2AccessTokensUuidGet200Response.token) &&
        Objects.equals(this.tokenLabel, v2AccessTokensUuidGet200Response.tokenLabel) &&
        Objects.equals(this.uuid, v2AccessTokensUuidGet200Response.uuid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, createdAt, creatorIp, creatorUa, generatedBy, isActive, lastUsed, scopes, token, tokenLabel, uuid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2AccessTokensUuidGet200Response {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorIp: ").append(toIndentedString(creatorIp)).append("\n");
    sb.append("    creatorUa: ").append(toIndentedString(creatorUa)).append("\n");
    sb.append("    generatedBy: ").append(toIndentedString(generatedBy)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    tokenLabel: ").append(toIndentedString(tokenLabel)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("created_at");
    openapiFields.add("creator_ip");
    openapiFields.add("creator_ua");
    openapiFields.add("generated_by");
    openapiFields.add("is_active");
    openapiFields.add("last_used");
    openapiFields.add("scopes");
    openapiFields.add("token");
    openapiFields.add("token_label");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V2AccessTokensUuidGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2AccessTokensUuidGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2AccessTokensUuidGet200Response is not found in the empty JSON string", V2AccessTokensUuidGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2AccessTokensUuidGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2AccessTokensUuidGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("creator_ip") != null && !jsonObj.get("creator_ip").isJsonNull()) && !jsonObj.get("creator_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_ip").toString()));
      }
      if ((jsonObj.get("creator_ua") != null && !jsonObj.get("creator_ua").isJsonNull()) && !jsonObj.get("creator_ua").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_ua` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_ua").toString()));
      }
      if ((jsonObj.get("generated_by") != null && !jsonObj.get("generated_by").isJsonNull()) && !jsonObj.get("generated_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generated_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generated_by").toString()));
      }
      if ((jsonObj.get("last_used") != null && !jsonObj.get("last_used").isJsonNull()) && !jsonObj.get("last_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_used").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("token_label") != null && !jsonObj.get("token_label").isJsonNull()) && !jsonObj.get("token_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_label").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2AccessTokensUuidGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2AccessTokensUuidGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2AccessTokensUuidGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2AccessTokensUuidGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<V2AccessTokensUuidGet200Response>() {
           @Override
           public void write(JsonWriter out, V2AccessTokensUuidGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2AccessTokensUuidGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V2AccessTokensUuidGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V2AccessTokensUuidGet200Response
   * @throws IOException if the JSON string is invalid with respect to V2AccessTokensUuidGet200Response
   */
  public static V2AccessTokensUuidGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2AccessTokensUuidGet200Response.class);
  }

  /**
   * Convert an instance of V2AccessTokensUuidGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

