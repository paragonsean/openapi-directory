/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PostNamespacesDeleteImagesRequestIgnoreWarningsInner;
import org.openapitools.client.model.PostNamespacesDeleteImagesRequestManifestsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delete images request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostNamespacesDeleteImagesRequest {
  public static final String SERIALIZED_NAME_ACTIVE_FROM = "active_from";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FROM)
  private String activeFrom;

  public static final String SERIALIZED_NAME_DRY_RUN = "dry_run";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_IGNORE_WARNINGS = "ignore_warnings";
  @SerializedName(SERIALIZED_NAME_IGNORE_WARNINGS)
  private List<PostNamespacesDeleteImagesRequestIgnoreWarningsInner> ignoreWarnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANIFESTS = "manifests";
  @SerializedName(SERIALIZED_NAME_MANIFESTS)
  private List<PostNamespacesDeleteImagesRequestManifestsInner> manifests = new ArrayList<>();

  public PostNamespacesDeleteImagesRequest() {
  }

  public PostNamespacesDeleteImagesRequest activeFrom(String activeFrom) {
    this.activeFrom = activeFrom;
    return this;
  }

  /**
   * Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time. 
   * @return activeFrom
   */
  @javax.annotation.Nullable
  public String getActiveFrom() {
    return activeFrom;
  }

  public void setActiveFrom(String activeFrom) {
    this.activeFrom = activeFrom;
  }


  public PostNamespacesDeleteImagesRequest dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * If &#x60;true&#x60; then will check and return errors and unignored warnings for the deletion request but will not delete any images.
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public PostNamespacesDeleteImagesRequest ignoreWarnings(List<PostNamespacesDeleteImagesRequestIgnoreWarningsInner> ignoreWarnings) {
    this.ignoreWarnings = ignoreWarnings;
    return this;
  }

  public PostNamespacesDeleteImagesRequest addIgnoreWarningsItem(PostNamespacesDeleteImagesRequestIgnoreWarningsInner ignoreWarningsItem) {
    if (this.ignoreWarnings == null) {
      this.ignoreWarnings = new ArrayList<>();
    }
    this.ignoreWarnings.add(ignoreWarningsItem);
    return this;
  }

  /**
   * Warnings to ignore. If a warning is not ignored then no deletions will happen and the  warning is returned in the response.  These warnings include:  - is_active: warning when attempting to delete an image that is marked as active. - current_tag: warning when attempting to delete an image that has one or more current  tags in the repository.  Warnings can be copied from the response to the request. 
   * @return ignoreWarnings
   */
  @javax.annotation.Nullable
  public List<PostNamespacesDeleteImagesRequestIgnoreWarningsInner> getIgnoreWarnings() {
    return ignoreWarnings;
  }

  public void setIgnoreWarnings(List<PostNamespacesDeleteImagesRequestIgnoreWarningsInner> ignoreWarnings) {
    this.ignoreWarnings = ignoreWarnings;
  }


  public PostNamespacesDeleteImagesRequest manifests(List<PostNamespacesDeleteImagesRequestManifestsInner> manifests) {
    this.manifests = manifests;
    return this;
  }

  public PostNamespacesDeleteImagesRequest addManifestsItem(PostNamespacesDeleteImagesRequestManifestsInner manifestsItem) {
    if (this.manifests == null) {
      this.manifests = new ArrayList<>();
    }
    this.manifests.add(manifestsItem);
    return this;
  }

  /**
   * Image manifests to delete.
   * @return manifests
   */
  @javax.annotation.Nullable
  public List<PostNamespacesDeleteImagesRequestManifestsInner> getManifests() {
    return manifests;
  }

  public void setManifests(List<PostNamespacesDeleteImagesRequestManifestsInner> manifests) {
    this.manifests = manifests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest = (PostNamespacesDeleteImagesRequest) o;
    return Objects.equals(this.activeFrom, postNamespacesDeleteImagesRequest.activeFrom) &&
        Objects.equals(this.dryRun, postNamespacesDeleteImagesRequest.dryRun) &&
        Objects.equals(this.ignoreWarnings, postNamespacesDeleteImagesRequest.ignoreWarnings) &&
        Objects.equals(this.manifests, postNamespacesDeleteImagesRequest.manifests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeFrom, dryRun, ignoreWarnings, manifests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostNamespacesDeleteImagesRequest {\n");
    sb.append("    activeFrom: ").append(toIndentedString(activeFrom)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    ignoreWarnings: ").append(toIndentedString(ignoreWarnings)).append("\n");
    sb.append("    manifests: ").append(toIndentedString(manifests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_from");
    openapiFields.add("dry_run");
    openapiFields.add("ignore_warnings");
    openapiFields.add("manifests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostNamespacesDeleteImagesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostNamespacesDeleteImagesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostNamespacesDeleteImagesRequest is not found in the empty JSON string", PostNamespacesDeleteImagesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostNamespacesDeleteImagesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostNamespacesDeleteImagesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active_from") != null && !jsonObj.get("active_from").isJsonNull()) && !jsonObj.get("active_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_from").toString()));
      }
      if (jsonObj.get("ignore_warnings") != null && !jsonObj.get("ignore_warnings").isJsonNull()) {
        JsonArray jsonArrayignoreWarnings = jsonObj.getAsJsonArray("ignore_warnings");
        if (jsonArrayignoreWarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ignore_warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ignore_warnings` to be an array in the JSON string but got `%s`", jsonObj.get("ignore_warnings").toString()));
          }

          // validate the optional field `ignore_warnings` (array)
          for (int i = 0; i < jsonArrayignoreWarnings.size(); i++) {
            PostNamespacesDeleteImagesRequestIgnoreWarningsInner.validateJsonElement(jsonArrayignoreWarnings.get(i));
          };
        }
      }
      if (jsonObj.get("manifests") != null && !jsonObj.get("manifests").isJsonNull()) {
        JsonArray jsonArraymanifests = jsonObj.getAsJsonArray("manifests");
        if (jsonArraymanifests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manifests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manifests` to be an array in the JSON string but got `%s`", jsonObj.get("manifests").toString()));
          }

          // validate the optional field `manifests` (array)
          for (int i = 0; i < jsonArraymanifests.size(); i++) {
            PostNamespacesDeleteImagesRequestManifestsInner.validateJsonElement(jsonArraymanifests.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostNamespacesDeleteImagesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostNamespacesDeleteImagesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostNamespacesDeleteImagesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostNamespacesDeleteImagesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostNamespacesDeleteImagesRequest>() {
           @Override
           public void write(JsonWriter out, PostNamespacesDeleteImagesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostNamespacesDeleteImagesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostNamespacesDeleteImagesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostNamespacesDeleteImagesRequest
   * @throws IOException if the JSON string is invalid with respect to PostNamespacesDeleteImagesRequest
   */
  public static PostNamespacesDeleteImagesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostNamespacesDeleteImagesRequest.class);
  }

  /**
   * Convert an instance of PostNamespacesDeleteImagesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

