/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner {
  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  /**
   * Error type.
   */
  @JsonAdapter(ErrorEnum.Adapter.class)
  public enum ErrorEnum {
    NOT_FOUND("not_found"),
    
    UNAUTHORIZED("unauthorized"),
    
    CHILD_MANIFEST("child_manifest");

    private String value;

    ErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorEnum fromValue(String value) {
      for (ErrorEnum b : ErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ErrorEnum error;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner() {
  }

  public PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Digest of the image that caused the error.
   * @return digest
   */
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }


  public PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner error(ErrorEnum error) {
    this.error = error;
    return this;
  }

  /**
   * Error type.
   * @return error
   */
  @javax.annotation.Nullable
  public ErrorEnum getError() {
    return error;
  }

  public void setError(ErrorEnum error) {
    this.error = error;
  }


  public PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Name of the repository of the image that caused the error.
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner postNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner = (PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner) o;
    return Objects.equals(this.digest, postNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.digest) &&
        Objects.equals(this.error, postNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.error) &&
        Objects.equals(this.repository, postNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.repository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digest, error, repository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner {\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digest");
    openapiFields.add("error");
    openapiFields.add("repository");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner is not found in the empty JSON string", PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) && !jsonObj.get("digest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ErrorEnum.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner>() {
           @Override
           public void write(JsonWriter out, PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner
   * @throws IOException if the JSON string is invalid with respect to PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner
   */
  public static PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.class);
  }

  /**
   * Convert an instance of PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

