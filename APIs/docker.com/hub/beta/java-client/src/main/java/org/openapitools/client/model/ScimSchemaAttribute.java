/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScimSchemaAttribute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScimSchemaAttribute {
  public static final String SERIALIZED_NAME_CASE_EXACT = "caseExact";
  @SerializedName(SERIALIZED_NAME_CASE_EXACT)
  private Boolean caseExact;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MULTI_VALUED = "multiValued";
  @SerializedName(SERIALIZED_NAME_MULTI_VALUED)
  private Boolean multiValued;

  public static final String SERIALIZED_NAME_MUTABILITY = "mutability";
  @SerializedName(SERIALIZED_NAME_MUTABILITY)
  private String mutability;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_RETURNED = "returned";
  @SerializedName(SERIALIZED_NAME_RETURNED)
  private String returned;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("string"),
    
    BOOLEAN("boolean"),
    
    COMPLEX("complex");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIQUENESS = "uniqueness";
  @SerializedName(SERIALIZED_NAME_UNIQUENESS)
  private String uniqueness;

  public ScimSchemaAttribute() {
  }

  public ScimSchemaAttribute caseExact(Boolean caseExact) {
    this.caseExact = caseExact;
    return this;
  }

  /**
   * Get caseExact
   * @return caseExact
   */
  @javax.annotation.Nullable
  public Boolean getCaseExact() {
    return caseExact;
  }

  public void setCaseExact(Boolean caseExact) {
    this.caseExact = caseExact;
  }


  public ScimSchemaAttribute description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ScimSchemaAttribute multiValued(Boolean multiValued) {
    this.multiValued = multiValued;
    return this;
  }

  /**
   * Get multiValued
   * @return multiValued
   */
  @javax.annotation.Nullable
  public Boolean getMultiValued() {
    return multiValued;
  }

  public void setMultiValued(Boolean multiValued) {
    this.multiValued = multiValued;
  }


  public ScimSchemaAttribute mutability(String mutability) {
    this.mutability = mutability;
    return this;
  }

  /**
   * Get mutability
   * @return mutability
   */
  @javax.annotation.Nullable
  public String getMutability() {
    return mutability;
  }

  public void setMutability(String mutability) {
    this.mutability = mutability;
  }


  public ScimSchemaAttribute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScimSchemaAttribute required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ScimSchemaAttribute returned(String returned) {
    this.returned = returned;
    return this;
  }

  /**
   * Get returned
   * @return returned
   */
  @javax.annotation.Nullable
  public String getReturned() {
    return returned;
  }

  public void setReturned(String returned) {
    this.returned = returned;
  }


  public ScimSchemaAttribute type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ScimSchemaAttribute uniqueness(String uniqueness) {
    this.uniqueness = uniqueness;
    return this;
  }

  /**
   * Get uniqueness
   * @return uniqueness
   */
  @javax.annotation.Nullable
  public String getUniqueness() {
    return uniqueness;
  }

  public void setUniqueness(String uniqueness) {
    this.uniqueness = uniqueness;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScimSchemaAttribute scimSchemaAttribute = (ScimSchemaAttribute) o;
    return Objects.equals(this.caseExact, scimSchemaAttribute.caseExact) &&
        Objects.equals(this.description, scimSchemaAttribute.description) &&
        Objects.equals(this.multiValued, scimSchemaAttribute.multiValued) &&
        Objects.equals(this.mutability, scimSchemaAttribute.mutability) &&
        Objects.equals(this.name, scimSchemaAttribute.name) &&
        Objects.equals(this.required, scimSchemaAttribute.required) &&
        Objects.equals(this.returned, scimSchemaAttribute.returned) &&
        Objects.equals(this.type, scimSchemaAttribute.type) &&
        Objects.equals(this.uniqueness, scimSchemaAttribute.uniqueness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseExact, description, multiValued, mutability, name, required, returned, type, uniqueness);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScimSchemaAttribute {\n");
    sb.append("    caseExact: ").append(toIndentedString(caseExact)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    multiValued: ").append(toIndentedString(multiValued)).append("\n");
    sb.append("    mutability: ").append(toIndentedString(mutability)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniqueness: ").append(toIndentedString(uniqueness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseExact");
    openapiFields.add("description");
    openapiFields.add("multiValued");
    openapiFields.add("mutability");
    openapiFields.add("name");
    openapiFields.add("required");
    openapiFields.add("returned");
    openapiFields.add("type");
    openapiFields.add("uniqueness");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScimSchemaAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScimSchemaAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScimSchemaAttribute is not found in the empty JSON string", ScimSchemaAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScimSchemaAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScimSchemaAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mutability") != null && !jsonObj.get("mutability").isJsonNull()) && !jsonObj.get("mutability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mutability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mutability").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("returned") != null && !jsonObj.get("returned").isJsonNull()) && !jsonObj.get("returned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returned").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uniqueness") != null && !jsonObj.get("uniqueness").isJsonNull()) && !jsonObj.get("uniqueness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueness").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScimSchemaAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScimSchemaAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScimSchemaAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScimSchemaAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<ScimSchemaAttribute>() {
           @Override
           public void write(JsonWriter out, ScimSchemaAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScimSchemaAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScimSchemaAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScimSchemaAttribute
   * @throws IOException if the JSON string is invalid with respect to ScimSchemaAttribute
   */
  public static ScimSchemaAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScimSchemaAttribute.class);
  }

  /**
   * Convert an instance of ScimSchemaAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

