/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Image;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tag
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:24.756406-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tag {
  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private Integer creator;

  public static final String SERIALIZED_NAME_FULL_SIZE = "full_size";
  @SerializedName(SERIALIZED_NAME_FULL_SIZE)
  private Integer fullSize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Image images;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_LAST_UPDATER = "last_updater";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATER)
  private Integer lastUpdater;

  public static final String SERIALIZED_NAME_LAST_UPDATER_USERNAME = "last_updater_username";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATER_USERNAME)
  private String lastUpdaterUsername;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private Integer repository;

  /**
   * whether a tag has been pushed to or pulled in the past month
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAG_LAST_PULLED = "tag_last_pulled";
  @SerializedName(SERIALIZED_NAME_TAG_LAST_PULLED)
  private String tagLastPulled;

  public static final String SERIALIZED_NAME_TAG_LAST_PUSHED = "tag_last_pushed";
  @SerializedName(SERIALIZED_NAME_TAG_LAST_PUSHED)
  private String tagLastPushed;

  public static final String SERIALIZED_NAME_V2 = "v2";
  @SerializedName(SERIALIZED_NAME_V2)
  private String v2;

  public Tag() {
  }

  public Tag creator(Integer creator) {
    this.creator = creator;
    return this;
  }

  /**
   * ID of the user that pushed the tag
   * @return creator
   */
  @javax.annotation.Nullable
  public Integer getCreator() {
    return creator;
  }

  public void setCreator(Integer creator) {
    this.creator = creator;
  }


  public Tag fullSize(Integer fullSize) {
    this.fullSize = fullSize;
    return this;
  }

  /**
   * compressed size (sum of all layers) of the tagged image
   * @return fullSize
   */
  @javax.annotation.Nullable
  public Integer getFullSize() {
    return fullSize;
  }

  public void setFullSize(Integer fullSize) {
    this.fullSize = fullSize;
  }


  public Tag id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * tag ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Tag images(Image images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public Image getImages() {
    return images;
  }

  public void setImages(Image images) {
    this.images = images;
  }


  public Tag lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * datetime of last update
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Tag lastUpdater(Integer lastUpdater) {
    this.lastUpdater = lastUpdater;
    return this;
  }

  /**
   * ID of the last user that updated the tag
   * @return lastUpdater
   */
  @javax.annotation.Nullable
  public Integer getLastUpdater() {
    return lastUpdater;
  }

  public void setLastUpdater(Integer lastUpdater) {
    this.lastUpdater = lastUpdater;
  }


  public Tag lastUpdaterUsername(String lastUpdaterUsername) {
    this.lastUpdaterUsername = lastUpdaterUsername;
    return this;
  }

  /**
   * Hub username of the user that updated the tag
   * @return lastUpdaterUsername
   */
  @javax.annotation.Nullable
  public String getLastUpdaterUsername() {
    return lastUpdaterUsername;
  }

  public void setLastUpdaterUsername(String lastUpdaterUsername) {
    this.lastUpdaterUsername = lastUpdaterUsername;
  }


  public Tag name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the tag
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Tag repository(Integer repository) {
    this.repository = repository;
    return this;
  }

  /**
   * repository ID
   * @return repository
   */
  @javax.annotation.Nullable
  public Integer getRepository() {
    return repository;
  }

  public void setRepository(Integer repository) {
    this.repository = repository;
  }


  public Tag status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * whether a tag has been pushed to or pulled in the past month
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Tag tagLastPulled(String tagLastPulled) {
    this.tagLastPulled = tagLastPulled;
    return this;
  }

  /**
   * datetime of last pull
   * @return tagLastPulled
   */
  @javax.annotation.Nullable
  public String getTagLastPulled() {
    return tagLastPulled;
  }

  public void setTagLastPulled(String tagLastPulled) {
    this.tagLastPulled = tagLastPulled;
  }


  public Tag tagLastPushed(String tagLastPushed) {
    this.tagLastPushed = tagLastPushed;
    return this;
  }

  /**
   * datetime of last push
   * @return tagLastPushed
   */
  @javax.annotation.Nullable
  public String getTagLastPushed() {
    return tagLastPushed;
  }

  public void setTagLastPushed(String tagLastPushed) {
    this.tagLastPushed = tagLastPushed;
  }


  public Tag v2(String v2) {
    this.v2 = v2;
    return this;
  }

  /**
   * repository API version
   * @return v2
   */
  @javax.annotation.Nullable
  public String getV2() {
    return v2;
  }

  public void setV2(String v2) {
    this.v2 = v2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tag tag = (Tag) o;
    return Objects.equals(this.creator, tag.creator) &&
        Objects.equals(this.fullSize, tag.fullSize) &&
        Objects.equals(this.id, tag.id) &&
        Objects.equals(this.images, tag.images) &&
        Objects.equals(this.lastUpdated, tag.lastUpdated) &&
        Objects.equals(this.lastUpdater, tag.lastUpdater) &&
        Objects.equals(this.lastUpdaterUsername, tag.lastUpdaterUsername) &&
        Objects.equals(this.name, tag.name) &&
        Objects.equals(this.repository, tag.repository) &&
        Objects.equals(this.status, tag.status) &&
        Objects.equals(this.tagLastPulled, tag.tagLastPulled) &&
        Objects.equals(this.tagLastPushed, tag.tagLastPushed) &&
        Objects.equals(this.v2, tag.v2);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(creator, fullSize, id, images, lastUpdated, lastUpdater, lastUpdaterUsername, name, repository, status, tagLastPulled, tagLastPushed, v2);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tag {\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    fullSize: ").append(toIndentedString(fullSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    lastUpdater: ").append(toIndentedString(lastUpdater)).append("\n");
    sb.append("    lastUpdaterUsername: ").append(toIndentedString(lastUpdaterUsername)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tagLastPulled: ").append(toIndentedString(tagLastPulled)).append("\n");
    sb.append("    tagLastPushed: ").append(toIndentedString(tagLastPushed)).append("\n");
    sb.append("    v2: ").append(toIndentedString(v2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creator");
    openapiFields.add("full_size");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("last_updated");
    openapiFields.add("last_updater");
    openapiFields.add("last_updater_username");
    openapiFields.add("name");
    openapiFields.add("repository");
    openapiFields.add("status");
    openapiFields.add("tag_last_pulled");
    openapiFields.add("tag_last_pushed");
    openapiFields.add("v2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tag is not found in the empty JSON string", Tag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("last_updated") != null && !jsonObj.get("last_updated").isJsonNull()) && !jsonObj.get("last_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated").toString()));
      }
      if ((jsonObj.get("last_updater_username") != null && !jsonObj.get("last_updater_username").isJsonNull()) && !jsonObj.get("last_updater_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updater_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updater_username").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("tag_last_pulled") != null && !jsonObj.get("tag_last_pulled").isJsonNull()) && !jsonObj.get("tag_last_pulled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_last_pulled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_last_pulled").toString()));
      }
      if ((jsonObj.get("tag_last_pushed") != null && !jsonObj.get("tag_last_pushed").isJsonNull()) && !jsonObj.get("tag_last_pushed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_last_pushed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_last_pushed").toString()));
      }
      if ((jsonObj.get("v2") != null && !jsonObj.get("v2").isJsonNull()) && !jsonObj.get("v2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tag.class));

       return (TypeAdapter<T>) new TypeAdapter<Tag>() {
           @Override
           public void write(JsonWriter out, Tag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tag
   * @throws IOException if the JSON string is invalid with respect to Tag
   */
  public static Tag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tag.class);
  }

  /**
   * Convert an instance of Tag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

