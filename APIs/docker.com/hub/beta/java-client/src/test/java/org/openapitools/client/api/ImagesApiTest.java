/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetNamespaceRepositoryImagesResponse;
import org.openapitools.client.model.GetNamespaceRepositoryImagesSummaryResponse;
import org.openapitools.client.model.GetNamespaceRepositoryImagesTagsResponse;
import org.openapitools.client.model.PostNamespacesDeleteImagesRequest;
import org.openapitools.client.model.PostNamespacesDeleteImagesResponseError;
import org.openapitools.client.model.PostNamespacesDeleteImagesResponseSuccess;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImagesApi
 */
@Disabled
public class ImagesApiTest {

    private final ImagesApi api = new ImagesApi();

    /**
     * Get details of repository&#39;s images
     *
     * Gets details on the images in a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacesRepositoriesImagesTest() throws ApiException {
        String namespace = null;
        String repository = null;
        String status = null;
        Boolean currentlyTagged = null;
        String ordering = null;
        String activeFrom = null;
        Integer page = null;
        Integer pageSize = null;
        GetNamespaceRepositoryImagesResponse response = api.getNamespacesRepositoriesImages(namespace, repository, status, currentlyTagged, ordering, activeFrom, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get summary of repository&#39;s images
     *
     * Gets the number of images in a repository and the number of images counted as active and inactive. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacesRepositoriesImagesSummaryTest() throws ApiException {
        String namespace = null;
        String repository = null;
        String activeFrom = null;
        GetNamespaceRepositoryImagesSummaryResponse response = api.getNamespacesRepositoriesImagesSummary(namespace, repository, activeFrom);
        // TODO: test validations
    }

    /**
     * Get image&#39;s tags
     *
     * Gets current and historical tags for an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacesRepositoriesImagesTagsTest() throws ApiException {
        String namespace = null;
        String repository = null;
        String digest = null;
        Integer page = null;
        Integer pageSize = null;
        GetNamespaceRepositoryImagesTagsResponse response = api.getNamespacesRepositoriesImagesTags(namespace, repository, digest, page, pageSize);
        // TODO: test validations
    }

    /**
     * Delete images
     *
     * Deletes one or more images within a namespace. This is currently limited to a single  repository.  If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings. To continue with the deletion, you must ignore these warnings by putting them in the &#x60;ignore_warnings&#x60; property.  Deleting a currently tagged image deletes the tag from the repository.  You cannot ignore errors. It is not possible to directly delete children of multi-arch images. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNamespacesDeleteImagesTest() throws ApiException {
        String namespace = null;
        PostNamespacesDeleteImagesRequest postNamespacesDeleteImagesRequest = null;
        PostNamespacesDeleteImagesResponseSuccess response = api.postNamespacesDeleteImages(namespace, postNamespacesDeleteImagesRequest);
        // TODO: test validations
    }

}
