/*
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ScimResourceType;
import org.openapitools.client.model.ScimSchema;
import org.openapitools.client.model.ScimServiceProviderConfig;
import org.openapitools.client.model.ScimUser;
import org.openapitools.client.model.V2Scim20ResourceTypesGet200Response;
import org.openapitools.client.model.V2Scim20ResourceTypesGet401Response;
import org.openapitools.client.model.V2Scim20ResourceTypesGet500Response;
import org.openapitools.client.model.V2Scim20ResourceTypesNameGet404Response;
import org.openapitools.client.model.V2Scim20SchemasGet200Response;
import org.openapitools.client.model.V2Scim20UsersGet200Response;
import org.openapitools.client.model.V2Scim20UsersGet400Response;
import org.openapitools.client.model.V2Scim20UsersGet403Response;
import org.openapitools.client.model.V2Scim20UsersIdPutRequest;
import org.openapitools.client.model.V2Scim20UsersPost409Response;
import org.openapitools.client.model.V2Scim20UsersPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScimApi
 */
@Disabled
public class ScimApiTest {

    private final ScimApi api = new ScimApi();

    /**
     * List resource types
     *
     * Returns all resource types supported for the SCIM configuration. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20ResourceTypesGetTest() throws ApiException {
        V2Scim20ResourceTypesGet200Response response = api.v2Scim20ResourceTypesGet();
        // TODO: test validations
    }

    /**
     * Get a resource type
     *
     * Returns a resource type by name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20ResourceTypesNameGetTest() throws ApiException {
        String name = null;
        ScimResourceType response = api.v2Scim20ResourceTypesNameGet(name);
        // TODO: test validations
    }

    /**
     * List schemas
     *
     * Returns all schemas supported for the SCIM configuration. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20SchemasGetTest() throws ApiException {
        V2Scim20SchemasGet200Response response = api.v2Scim20SchemasGet();
        // TODO: test validations
    }

    /**
     * Get a schema
     *
     * Returns a schema by ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20SchemasIdGetTest() throws ApiException {
        String id = null;
        ScimSchema response = api.v2Scim20SchemasIdGet(id);
        // TODO: test validations
    }

    /**
     * Get service provider config
     *
     * Returns a service provider config for Docker&#39;s configuration. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20ServiceProviderConfigGetTest() throws ApiException {
        ScimServiceProviderConfig response = api.v2Scim20ServiceProviderConfigGet();
        // TODO: test validations
    }

    /**
     * List users
     *
     * List users, returns paginated users for an organization. Use &#x60;startIndex&#x60; and &#x60;count&#x60; query parameters to receive paginated results.  **Sorting:**&lt;br&gt; Sorting lets you to specify the order of returned resources by specifying a combination of &#x60;sortBy&#x60; and &#x60;sortOrder&#x60; query parameters.  The &#x60;sortBy&#x60; parameter specifies the attribute whose value will be used to order the returned responses. The &#x60;sortOrder&#x60; parameter defines the order in which the &#x60;sortBy&#x60; parameter is applied. Allowed values are \&quot;ascending\&quot; and \&quot;descending\&quot;.  **Filtering:**&lt;br&gt; You can request a subset of resources by specifying the &#x60;filter&#x60; query parameter containing a filter expression. Attribute names and attribute operators used in filters are case insensitive. The filter parameter must contain at least one valid expression. Each expression must contain an attribute name followed by an attribute operator and an optional value.  Supported operators are listed below.  - &#x60;eq&#x60; equal - &#x60;ne&#x60; not equal - &#x60;co&#x60; contains - &#x60;sw&#x60; starts with - &#x60;and&#x60; Logical \&quot;and\&quot; - &#x60;or&#x60; Logical \&quot;or\&quot; - &#x60;not&#x60; \&quot;Not\&quot; function - &#x60;()&#x60; Precedence grouping 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20UsersGetTest() throws ApiException {
        Integer startIndex = null;
        Integer count = null;
        String filter = null;
        String attributes = null;
        String sortOrder = null;
        String sortBy = null;
        V2Scim20UsersGet200Response response = api.v2Scim20UsersGet(startIndex, count, filter, attributes, sortOrder, sortBy);
        // TODO: test validations
    }

    /**
     * Get a user
     *
     * Returns a user by ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20UsersIdGetTest() throws ApiException {
        String id = null;
        ScimUser response = api.v2Scim20UsersIdGet(id);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * Updates a user. Use this route to change the user&#39;s name, activate, and deactivate the user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20UsersIdPutTest() throws ApiException {
        String id = null;
        V2Scim20UsersIdPutRequest v2Scim20UsersIdPutRequest = null;
        ScimUser response = api.v2Scim20UsersIdPut(id, v2Scim20UsersIdPutRequest);
        // TODO: test validations
    }

    /**
     * Create user
     *
     * Creates a user. If the user already exists by email, they are assigned to the organization on the \&quot;company\&quot; team. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Scim20UsersPostTest() throws ApiException {
        V2Scim20UsersPostRequest v2Scim20UsersPostRequest = null;
        ScimUser response = api.v2Scim20UsersPost(v2Scim20UsersPostRequest);
        // TODO: test validations
    }

}
