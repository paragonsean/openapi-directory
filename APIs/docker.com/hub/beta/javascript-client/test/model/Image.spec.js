/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DockerHubApi);
  }
}(this, function(expect, DockerHubApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DockerHubApi.Image();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Image', function() {
    it('should create an instance of Image', function() {
      // uncomment below and update the code to test Image
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be.a(DockerHubApi.Image);
    });

    it('should have the property architecture (base name: "architecture")', function() {
      // uncomment below and update the code to test the property architecture
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property digest (base name: "digest")', function() {
      // uncomment below and update the code to test the property digest
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property lastPulled (base name: "last_pulled")', function() {
      // uncomment below and update the code to test the property lastPulled
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property lastPushed (base name: "last_pushed")', function() {
      // uncomment below and update the code to test the property lastPushed
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property layers (base name: "layers")', function() {
      // uncomment below and update the code to test the property layers
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property os (base name: "os")', function() {
      // uncomment below and update the code to test the property os
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property osFeatures (base name: "os_features")', function() {
      // uncomment below and update the code to test the property osFeatures
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "os_version")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

    it('should have the property variant (base name: "variant")', function() {
      // uncomment below and update the code to test the property variant
      //var instance = new DockerHubApi.Image();
      //expect(instance).to.be();
    });

  });

}));
