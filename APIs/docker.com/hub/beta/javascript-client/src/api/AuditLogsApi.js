/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAuditActionsResponse from '../model/GetAuditActionsResponse';
import GetAuditLogsResponse from '../model/GetAuditLogsResponse';
import RpcStatus from '../model/RpcStatus';

/**
* AuditLogs service.
* @module api/AuditLogsApi
* @version beta
*/
export default class AuditLogsApi {

    /**
    * Constructs a new AuditLogsApi. 
    * @alias module:api/AuditLogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the auditLogsGetAuditActions operation.
     * @callback module:api/AuditLogsApi~auditLogsGetAuditActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuditActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of audit log actions.
     * Get audit log actions for a namespace to be used as a filter for querying audit events.
     * @param {String} account Namespace to query audit log actions for.
     * @param {module:api/AuditLogsApi~auditLogsGetAuditActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuditActionsResponse}
     */
    auditLogsGetAuditActions(account, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling auditLogsGetAuditActions");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuditActionsResponse;
      return this.apiClient.callApi(
        '/v2/auditlogs/{account}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auditLogsGetAuditLogs operation.
     * @callback module:api/AuditLogsApi~auditLogsGetAuditLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuditLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of audit log  events.
     * Get audit log events for a given namespace.
     * @param {String} account Namespace to query audit logs for.
     * @param {Object} opts Optional parameters
     * @param {String} [action] action name one of [\"repo.tag.push\", ...]. Optional parameter to filter specific audit log actions.
     * @param {String} [name] name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member.
     * @param {String} [actor] actor name. Optional parameter to filter audit log events to the specific user who triggered the event.
     * @param {Date} [from] Start of the time window you wish to query audit events for.
     * @param {Date} [to] End of the time window you wish to query audit events for.
     * @param {Number} [page = 1)] page - specify page number. Page number to get.
     * @param {Number} [pageSize = 25)] page_size - specify page size. Number of events to return per page.
     * @param {module:api/AuditLogsApi~auditLogsGetAuditLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuditLogsResponse}
     */
    auditLogsGetAuditLogs(account, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling auditLogsGetAuditLogs");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
        'action': opts['action'],
        'name': opts['name'],
        'actor': opts['actor'],
        'from': opts['from'],
        'to': opts['to'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuditLogsResponse;
      return this.apiClient.callApi(
        '/v2/auditlogs/{account}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
