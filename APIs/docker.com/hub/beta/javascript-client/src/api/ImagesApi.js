/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetNamespaceRepositoryImagesResponse from '../model/GetNamespaceRepositoryImagesResponse';
import GetNamespaceRepositoryImagesSummaryResponse from '../model/GetNamespaceRepositoryImagesSummaryResponse';
import GetNamespaceRepositoryImagesTagsResponse from '../model/GetNamespaceRepositoryImagesTagsResponse';
import PostNamespacesDeleteImagesRequest from '../model/PostNamespacesDeleteImagesRequest';
import PostNamespacesDeleteImagesResponseError from '../model/PostNamespacesDeleteImagesResponseError';
import PostNamespacesDeleteImagesResponseSuccess from '../model/PostNamespacesDeleteImagesResponseSuccess';

/**
* Images service.
* @module api/ImagesApi
* @version beta
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNamespacesRepositoriesImages operation.
     * @callback module:api/ImagesApi~getNamespacesRepositoriesImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNamespaceRepositoryImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of repository's images
     * Gets details on the images in a repository.
     * @param {String} namespace Namespace of the repository.
     * @param {String} repository Name of the repository.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Filters to only show images of this status.
     * @param {Boolean} [currentlyTagged] Filters to only show images with: - `true`: at least 1 current tag. - `false`: no current tags. 
     * @param {module:model/String} [ordering] Orders the results by this property.  Prefixing with `-` sorts by descending order. 
     * @param {String} [activeFrom] Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time. 
     * @param {Number} [page] Page number to get. Defaults to 1.
     * @param {Number} [pageSize] Number of images to get per page. Defaults to 10. Max of 100.
     * @param {module:api/ImagesApi~getNamespacesRepositoriesImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNamespaceRepositoryImagesResponse}
     */
    getNamespacesRepositoriesImages(namespace, repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespacesRepositoriesImages");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getNamespacesRepositoriesImages");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository
      };
      let queryParams = {
        'status': opts['status'],
        'currently_tagged': opts['currentlyTagged'],
        'ordering': opts['ordering'],
        'active_from': opts['activeFrom'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNamespaceRepositoryImagesResponse;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespacesRepositoriesImagesSummary operation.
     * @callback module:api/ImagesApi~getNamespacesRepositoriesImagesSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNamespaceRepositoryImagesSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get summary of repository's images
     * Gets the number of images in a repository and the number of images counted as active and inactive. 
     * @param {String} namespace Namespace of the repository.
     * @param {String} repository Name of the repository.
     * @param {Object} opts Optional parameters
     * @param {String} [activeFrom] Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time. 
     * @param {module:api/ImagesApi~getNamespacesRepositoriesImagesSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNamespaceRepositoryImagesSummaryResponse}
     */
    getNamespacesRepositoriesImagesSummary(namespace, repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespacesRepositoriesImagesSummary");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getNamespacesRepositoriesImagesSummary");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository
      };
      let queryParams = {
        'active_from': opts['activeFrom']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNamespaceRepositoryImagesSummaryResponse;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/images-summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespacesRepositoriesImagesTags operation.
     * @callback module:api/ImagesApi~getNamespacesRepositoriesImagesTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNamespaceRepositoryImagesTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get image's tags
     * Gets current and historical tags for an image.
     * @param {String} namespace Namespace of the repository.
     * @param {String} repository Name of the repository.
     * @param {String} digest Digest of the image.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number to get. Defaults to 1.
     * @param {Number} [pageSize] Number of images to get per page. Defaults to 10. Max of 100.
     * @param {module:api/ImagesApi~getNamespacesRepositoriesImagesTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNamespaceRepositoryImagesTagsResponse}
     */
    getNamespacesRepositoriesImagesTags(namespace, repository, digest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespacesRepositoriesImagesTags");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getNamespacesRepositoriesImagesTags");
      }
      // verify the required parameter 'digest' is set
      if (digest === undefined || digest === null) {
        throw new Error("Missing the required parameter 'digest' when calling getNamespacesRepositoriesImagesTags");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository,
        'digest': digest
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNamespaceRepositoryImagesTagsResponse;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNamespacesDeleteImages operation.
     * @callback module:api/ImagesApi~postNamespacesDeleteImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostNamespacesDeleteImagesResponseSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete images
     * Deletes one or more images within a namespace. This is currently limited to a single  repository.  If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings. To continue with the deletion, you must ignore these warnings by putting them in the `ignore_warnings` property.  Deleting a currently tagged image deletes the tag from the repository.  You cannot ignore errors. It is not possible to directly delete children of multi-arch images. 
     * @param {String} namespace Namespace of the repository.
     * @param {module:model/PostNamespacesDeleteImagesRequest} postNamespacesDeleteImagesRequest Delete request.
     * @param {module:api/ImagesApi~postNamespacesDeleteImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostNamespacesDeleteImagesResponseSuccess}
     */
    postNamespacesDeleteImages(namespace, postNamespacesDeleteImagesRequest, callback) {
      let postBody = postNamespacesDeleteImagesRequest;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postNamespacesDeleteImages");
      }
      // verify the required parameter 'postNamespacesDeleteImagesRequest' is set
      if (postNamespacesDeleteImagesRequest === undefined || postNamespacesDeleteImagesRequest === null) {
        throw new Error("Missing the required parameter 'postNamespacesDeleteImagesRequest' when calling postNamespacesDeleteImages");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostNamespacesDeleteImagesResponseSuccess;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/delete-images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
