/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import OrgSettings from '../model/OrgSettings';
import V2OrgsNameSettingsPutRequest from '../model/V2OrgsNameSettingsPutRequest';

/**
* OrgSettings service.
* @module api/OrgSettingsApi
* @version beta
*/
export default class OrgSettingsApi {

    /**
    * Constructs a new OrgSettingsApi. 
    * @alias module:api/OrgSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2OrgsNameSettingsGet operation.
     * @callback module:api/OrgSettingsApi~v2OrgsNameSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization settings
     * Returns organization settings by name. 
     * @param {String} name Name of the organization.
     * @param {module:api/OrgSettingsApi~v2OrgsNameSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgSettings}
     */
    v2OrgsNameSettingsGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling v2OrgsNameSettingsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgSettings;
      return this.apiClient.callApi(
        '/v2/orgs/{name}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2OrgsNameSettingsPut operation.
     * @callback module:api/OrgSettingsApi~v2OrgsNameSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization settings
     * Updates an organization's settings. Some settings are only used when the organization is on a business plan.  ***Only users in the \"owners\" group of the organization can use this endpoint.***  The following settings are only used on a business plan: - `restricted_images` 
     * @param {String} name Name of the organization.
     * @param {module:model/V2OrgsNameSettingsPutRequest} v2OrgsNameSettingsPutRequest 
     * @param {module:api/OrgSettingsApi~v2OrgsNameSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgSettings}
     */
    v2OrgsNameSettingsPut(name, v2OrgsNameSettingsPutRequest, callback) {
      let postBody = v2OrgsNameSettingsPutRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling v2OrgsNameSettingsPut");
      }
      // verify the required parameter 'v2OrgsNameSettingsPutRequest' is set
      if (v2OrgsNameSettingsPutRequest === undefined || v2OrgsNameSettingsPutRequest === null) {
        throw new Error("Missing the required parameter 'v2OrgsNameSettingsPutRequest' when calling v2OrgsNameSettingsPut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgSettings;
      return this.apiClient.callApi(
        '/v2/orgs/{name}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
