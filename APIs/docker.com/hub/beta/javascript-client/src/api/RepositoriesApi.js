/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import PaginatedTags from '../model/PaginatedTags';
import Tag from '../model/Tag';

/**
* Repositories service.
* @module api/RepositoriesApi
* @version beta
*/
export default class RepositoriesApi {

    /**
    * Constructs a new RepositoriesApi. 
    * @alias module:api/RepositoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2NamespacesNamespaceRepositoriesRepositoryTagsGet operation.
     * @callback module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository tags
     * @param {String} namespace 
     * @param {String} repository 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number to get. Defaults to 1.
     * @param {Number} [pageSize] Number of items to get per page. Defaults to 10. Max of 100.
     * @param {module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTags}
     */
    v2NamespacesNamespaceRepositoriesRepositoryTagsGet(namespace, repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsGet");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsGet");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedTags;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NamespacesNamespaceRepositoriesRepositoryTagsHead operation.
     * @callback module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsHeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check repository tags
     * @param {String} namespace 
     * @param {String} repository 
     * @param {module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsHeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2NamespacesNamespaceRepositoriesRepositoryTagsHead(namespace, repository, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsHead");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsHead");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/tags', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NamespacesNamespaceRepositoriesRepositoryTagsTagGet operation.
     * @callback module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsTagGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read repository tag
     * @param {String} namespace 
     * @param {String} repository 
     * @param {String} tag 
     * @param {module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsTagGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    v2NamespacesNamespaceRepositoriesRepositoryTagsTagGet(namespace, repository, tag, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsTagGet");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsTagGet");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsTagGet");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NamespacesNamespaceRepositoriesRepositoryTagsTagHead operation.
     * @callback module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsTagHeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check repository tag
     * @param {String} namespace 
     * @param {String} repository 
     * @param {String} tag 
     * @param {module:api/RepositoriesApi~v2NamespacesNamespaceRepositoriesRepositoryTagsTagHeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2NamespacesNamespaceRepositoriesRepositoryTagsTagHead(namespace, repository, tag, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsTagHead");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsTagHead");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling v2NamespacesNamespaceRepositoriesRepositoryTagsTagHead");
      }

      let pathParams = {
        'namespace': namespace,
        'repository': repository,
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
