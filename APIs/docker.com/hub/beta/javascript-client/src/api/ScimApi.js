/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScimResourceType from '../model/ScimResourceType';
import ScimSchema from '../model/ScimSchema';
import ScimServiceProviderConfig from '../model/ScimServiceProviderConfig';
import ScimUser from '../model/ScimUser';
import V2Scim20ResourceTypesGet200Response from '../model/V2Scim20ResourceTypesGet200Response';
import V2Scim20ResourceTypesGet401Response from '../model/V2Scim20ResourceTypesGet401Response';
import V2Scim20ResourceTypesGet500Response from '../model/V2Scim20ResourceTypesGet500Response';
import V2Scim20ResourceTypesNameGet404Response from '../model/V2Scim20ResourceTypesNameGet404Response';
import V2Scim20SchemasGet200Response from '../model/V2Scim20SchemasGet200Response';
import V2Scim20UsersGet200Response from '../model/V2Scim20UsersGet200Response';
import V2Scim20UsersGet400Response from '../model/V2Scim20UsersGet400Response';
import V2Scim20UsersGet403Response from '../model/V2Scim20UsersGet403Response';
import V2Scim20UsersIdPutRequest from '../model/V2Scim20UsersIdPutRequest';
import V2Scim20UsersPost409Response from '../model/V2Scim20UsersPost409Response';
import V2Scim20UsersPostRequest from '../model/V2Scim20UsersPostRequest';

/**
* Scim service.
* @module api/ScimApi
* @version beta
*/
export default class ScimApi {

    /**
    * Constructs a new ScimApi. 
    * @alias module:api/ScimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2Scim20ResourceTypesGet operation.
     * @callback module:api/ScimApi~v2Scim20ResourceTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Scim20ResourceTypesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List resource types
     * Returns all resource types supported for the SCIM configuration. 
     * @param {module:api/ScimApi~v2Scim20ResourceTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2Scim20ResourceTypesGet200Response}
     */
    v2Scim20ResourceTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = V2Scim20ResourceTypesGet200Response;
      return this.apiClient.callApi(
        '/v2/scim/2.0/ResourceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20ResourceTypesNameGet operation.
     * @callback module:api/ScimApi~v2Scim20ResourceTypesNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimResourceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a resource type
     * Returns a resource type by name. 
     * @param {String} name 
     * @param {module:api/ScimApi~v2Scim20ResourceTypesNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimResourceType}
     */
    v2Scim20ResourceTypesNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling v2Scim20ResourceTypesNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimResourceType;
      return this.apiClient.callApi(
        '/v2/scim/2.0/ResourceTypes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20SchemasGet operation.
     * @callback module:api/ScimApi~v2Scim20SchemasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Scim20SchemasGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List schemas
     * Returns all schemas supported for the SCIM configuration. 
     * @param {module:api/ScimApi~v2Scim20SchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2Scim20SchemasGet200Response}
     */
    v2Scim20SchemasGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = V2Scim20SchemasGet200Response;
      return this.apiClient.callApi(
        '/v2/scim/2.0/Schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20SchemasIdGet operation.
     * @callback module:api/ScimApi~v2Scim20SchemasIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a schema
     * Returns a schema by ID. 
     * @param {String} id 
     * @param {module:api/ScimApi~v2Scim20SchemasIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimSchema}
     */
    v2Scim20SchemasIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2Scim20SchemasIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimSchema;
      return this.apiClient.callApi(
        '/v2/scim/2.0/Schemas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20ServiceProviderConfigGet operation.
     * @callback module:api/ScimApi~v2Scim20ServiceProviderConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimServiceProviderConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service provider config
     * Returns a service provider config for Docker's configuration. 
     * @param {module:api/ScimApi~v2Scim20ServiceProviderConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimServiceProviderConfig}
     */
    v2Scim20ServiceProviderConfigGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimServiceProviderConfig;
      return this.apiClient.callApi(
        '/v2/scim/2.0/ServiceProviderConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20UsersGet operation.
     * @callback module:api/ScimApi~v2Scim20UsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Scim20UsersGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * List users, returns paginated users for an organization. Use `startIndex` and `count` query parameters to receive paginated results.  **Sorting:**<br> Sorting lets you to specify the order of returned resources by specifying a combination of `sortBy` and `sortOrder` query parameters.  The `sortBy` parameter specifies the attribute whose value will be used to order the returned responses. The `sortOrder` parameter defines the order in which the `sortBy` parameter is applied. Allowed values are \"ascending\" and \"descending\".  **Filtering:**<br> You can request a subset of resources by specifying the `filter` query parameter containing a filter expression. Attribute names and attribute operators used in filters are case insensitive. The filter parameter must contain at least one valid expression. Each expression must contain an attribute name followed by an attribute operator and an optional value.  Supported operators are listed below.  - `eq` equal - `ne` not equal - `co` contains - `sw` starts with - `and` Logical \"and\" - `or` Logical \"or\" - `not` \"Not\" function - `()` Precedence grouping 
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] 
     * @param {Number} [count] 
     * @param {String} [filter] 
     * @param {String} [attributes] Comma delimited list of attributes to limit to in the response.
     * @param {module:model/String} [sortOrder] 
     * @param {String} [sortBy] User attribute to sort by.
     * @param {module:api/ScimApi~v2Scim20UsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V2Scim20UsersGet200Response}
     */
    v2Scim20UsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'count': opts['count'],
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = V2Scim20UsersGet200Response;
      return this.apiClient.callApi(
        '/v2/scim/2.0/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20UsersIdGet operation.
     * @callback module:api/ScimApi~v2Scim20UsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * Returns a user by ID. 
     * @param {String} id The user ID.
     * @param {module:api/ScimApi~v2Scim20UsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimUser}
     */
    v2Scim20UsersIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2Scim20UsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimUser;
      return this.apiClient.callApi(
        '/v2/scim/2.0/Users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20UsersIdPut operation.
     * @callback module:api/ScimApi~v2Scim20UsersIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Updates a user. Use this route to change the user's name, activate, and deactivate the user. 
     * @param {String} id The user ID.
     * @param {module:model/V2Scim20UsersIdPutRequest} v2Scim20UsersIdPutRequest 
     * @param {module:api/ScimApi~v2Scim20UsersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimUser}
     */
    v2Scim20UsersIdPut(id, v2Scim20UsersIdPutRequest, callback) {
      let postBody = v2Scim20UsersIdPutRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2Scim20UsersIdPut");
      }
      // verify the required parameter 'v2Scim20UsersIdPutRequest' is set
      if (v2Scim20UsersIdPutRequest === undefined || v2Scim20UsersIdPutRequest === null) {
        throw new Error("Missing the required parameter 'v2Scim20UsersIdPutRequest' when calling v2Scim20UsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimUser;
      return this.apiClient.callApi(
        '/v2/scim/2.0/Users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Scim20UsersPost operation.
     * @callback module:api/ScimApi~v2Scim20UsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * Creates a user. If the user already exists by email, they are assigned to the organization on the \"company\" team. 
     * @param {module:model/V2Scim20UsersPostRequest} v2Scim20UsersPostRequest 
     * @param {module:api/ScimApi~v2Scim20UsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimUser}
     */
    v2Scim20UsersPost(v2Scim20UsersPostRequest, callback) {
      let postBody = v2Scim20UsersPostRequest;
      // verify the required parameter 'v2Scim20UsersPostRequest' is set
      if (v2Scim20UsersPostRequest === undefined || v2Scim20UsersPostRequest === null) {
        throw new Error("Missing the required parameter 'v2Scim20UsersPostRequest' when calling v2Scim20UsersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimUser;
      return this.apiClient.callApi(
        '/v2/scim/2.0/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
