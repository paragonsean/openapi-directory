/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';

/**
 * The Tag model module.
 * @module model/Tag
 * @version beta
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * @alias module:model/Tag
     */
    constructor() { 
        
        Tag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'Number');
            }
            if (data.hasOwnProperty('full_size')) {
                obj['full_size'] = ApiClient.convertToType(data['full_size'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = Image.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'String');
            }
            if (data.hasOwnProperty('last_updater')) {
                obj['last_updater'] = ApiClient.convertToType(data['last_updater'], 'Number');
            }
            if (data.hasOwnProperty('last_updater_username')) {
                obj['last_updater_username'] = ApiClient.convertToType(data['last_updater_username'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tag_last_pulled')) {
                obj['tag_last_pulled'] = ApiClient.convertToType(data['tag_last_pulled'], 'String');
            }
            if (data.hasOwnProperty('tag_last_pushed')) {
                obj['tag_last_pushed'] = ApiClient.convertToType(data['tag_last_pushed'], 'String');
            }
            if (data.hasOwnProperty('v2')) {
                obj['v2'] = ApiClient.convertToType(data['v2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['last_updated'] && !(typeof data['last_updated'] === 'string' || data['last_updated'] instanceof String)) {
            throw new Error("Expected the field `last_updated` to be a primitive type in the JSON string but got " + data['last_updated']);
        }
        // ensure the json data is a string
        if (data['last_updater_username'] && !(typeof data['last_updater_username'] === 'string' || data['last_updater_username'] instanceof String)) {
            throw new Error("Expected the field `last_updater_username` to be a primitive type in the JSON string but got " + data['last_updater_username']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tag_last_pulled'] && !(typeof data['tag_last_pulled'] === 'string' || data['tag_last_pulled'] instanceof String)) {
            throw new Error("Expected the field `tag_last_pulled` to be a primitive type in the JSON string but got " + data['tag_last_pulled']);
        }
        // ensure the json data is a string
        if (data['tag_last_pushed'] && !(typeof data['tag_last_pushed'] === 'string' || data['tag_last_pushed'] instanceof String)) {
            throw new Error("Expected the field `tag_last_pushed` to be a primitive type in the JSON string but got " + data['tag_last_pushed']);
        }
        // ensure the json data is a string
        if (data['v2'] && !(typeof data['v2'] === 'string' || data['v2'] instanceof String)) {
            throw new Error("Expected the field `v2` to be a primitive type in the JSON string but got " + data['v2']);
        }

        return true;
    }


}



/**
 * ID of the user that pushed the tag
 * @member {Number} creator
 */
Tag.prototype['creator'] = undefined;

/**
 * compressed size (sum of all layers) of the tagged image
 * @member {Number} full_size
 */
Tag.prototype['full_size'] = undefined;

/**
 * tag ID
 * @member {Number} id
 */
Tag.prototype['id'] = undefined;

/**
 * @member {module:model/Image} images
 */
Tag.prototype['images'] = undefined;

/**
 * datetime of last update
 * @member {String} last_updated
 */
Tag.prototype['last_updated'] = undefined;

/**
 * ID of the last user that updated the tag
 * @member {Number} last_updater
 */
Tag.prototype['last_updater'] = undefined;

/**
 * Hub username of the user that updated the tag
 * @member {String} last_updater_username
 */
Tag.prototype['last_updater_username'] = undefined;

/**
 * name of the tag
 * @member {String} name
 */
Tag.prototype['name'] = undefined;

/**
 * repository ID
 * @member {Number} repository
 */
Tag.prototype['repository'] = undefined;

/**
 * whether a tag has been pushed to or pulled in the past month
 * @member {module:model/Tag.StatusEnum} status
 */
Tag.prototype['status'] = undefined;

/**
 * datetime of last pull
 * @member {String} tag_last_pulled
 */
Tag.prototype['tag_last_pulled'] = undefined;

/**
 * datetime of last push
 * @member {String} tag_last_pushed
 */
Tag.prototype['tag_last_pushed'] = undefined;

/**
 * repository API version
 * @member {String} v2
 */
Tag.prototype['v2'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Tag['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default Tag;

