/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScimServiceProviderConfigAuthenticationSchemes from './ScimServiceProviderConfigAuthenticationSchemes';
import ScimServiceProviderConfigBulk from './ScimServiceProviderConfigBulk';
import ScimServiceProviderConfigChangePassword from './ScimServiceProviderConfigChangePassword';
import ScimServiceProviderConfigFilter from './ScimServiceProviderConfigFilter';
import ScimServiceProviderConfigPatch from './ScimServiceProviderConfigPatch';
import ScimServiceProviderConfigSort from './ScimServiceProviderConfigSort';

/**
 * The ScimServiceProviderConfig model module.
 * @module model/ScimServiceProviderConfig
 * @version beta
 */
class ScimServiceProviderConfig {
    /**
     * Constructs a new <code>ScimServiceProviderConfig</code>.
     * @alias module:model/ScimServiceProviderConfig
     */
    constructor() { 
        
        ScimServiceProviderConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScimServiceProviderConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScimServiceProviderConfig} obj Optional instance to populate.
     * @return {module:model/ScimServiceProviderConfig} The populated <code>ScimServiceProviderConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimServiceProviderConfig();

            if (data.hasOwnProperty('authenticationSchemes')) {
                obj['authenticationSchemes'] = ScimServiceProviderConfigAuthenticationSchemes.constructFromObject(data['authenticationSchemes']);
            }
            if (data.hasOwnProperty('bulk')) {
                obj['bulk'] = ScimServiceProviderConfigBulk.constructFromObject(data['bulk']);
            }
            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ScimServiceProviderConfigChangePassword.constructFromObject(data['changePassword']);
            }
            if (data.hasOwnProperty('documentationUri')) {
                obj['documentationUri'] = ApiClient.convertToType(data['documentationUri'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ScimServiceProviderConfigChangePassword.constructFromObject(data['etag']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ScimServiceProviderConfigFilter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = ScimServiceProviderConfigPatch.constructFromObject(data['patch']);
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ScimServiceProviderConfigSort.constructFromObject(data['sort']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScimServiceProviderConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScimServiceProviderConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authenticationSchemes`
        if (data['authenticationSchemes']) { // data not null
          ScimServiceProviderConfigAuthenticationSchemes.validateJSON(data['authenticationSchemes']);
        }
        // validate the optional field `bulk`
        if (data['bulk']) { // data not null
          ScimServiceProviderConfigBulk.validateJSON(data['bulk']);
        }
        // validate the optional field `changePassword`
        if (data['changePassword']) { // data not null
          ScimServiceProviderConfigChangePassword.validateJSON(data['changePassword']);
        }
        // ensure the json data is a string
        if (data['documentationUri'] && !(typeof data['documentationUri'] === 'string' || data['documentationUri'] instanceof String)) {
            throw new Error("Expected the field `documentationUri` to be a primitive type in the JSON string but got " + data['documentationUri']);
        }
        // validate the optional field `etag`
        if (data['etag']) { // data not null
          ScimServiceProviderConfigChangePassword.validateJSON(data['etag']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          ScimServiceProviderConfigFilter.validateJSON(data['filter']);
        }
        // validate the optional field `patch`
        if (data['patch']) { // data not null
          ScimServiceProviderConfigPatch.validateJSON(data['patch']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['schemas'])) {
            throw new Error("Expected the field `schemas` to be an array in the JSON data but got " + data['schemas']);
        }
        // validate the optional field `sort`
        if (data['sort']) { // data not null
          ScimServiceProviderConfigSort.validateJSON(data['sort']);
        }

        return true;
    }


}



/**
 * @member {module:model/ScimServiceProviderConfigAuthenticationSchemes} authenticationSchemes
 */
ScimServiceProviderConfig.prototype['authenticationSchemes'] = undefined;

/**
 * @member {module:model/ScimServiceProviderConfigBulk} bulk
 */
ScimServiceProviderConfig.prototype['bulk'] = undefined;

/**
 * @member {module:model/ScimServiceProviderConfigChangePassword} changePassword
 */
ScimServiceProviderConfig.prototype['changePassword'] = undefined;

/**
 * @member {String} documentationUri
 */
ScimServiceProviderConfig.prototype['documentationUri'] = undefined;

/**
 * @member {module:model/ScimServiceProviderConfigChangePassword} etag
 */
ScimServiceProviderConfig.prototype['etag'] = undefined;

/**
 * @member {module:model/ScimServiceProviderConfigFilter} filter
 */
ScimServiceProviderConfig.prototype['filter'] = undefined;

/**
 * @member {module:model/ScimServiceProviderConfigPatch} patch
 */
ScimServiceProviderConfig.prototype['patch'] = undefined;

/**
 * @member {Array.<String>} schemas
 */
ScimServiceProviderConfig.prototype['schemas'] = undefined;

/**
 * @member {module:model/ScimServiceProviderConfigSort} sort
 */
ScimServiceProviderConfig.prototype['sort'] = undefined;






export default ScimServiceProviderConfig;

