/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RestrictedImages from './RestrictedImages';

/**
 * The V2OrgsNameSettingsPutRequestRestrictedImages model module.
 * @module model/V2OrgsNameSettingsPutRequestRestrictedImages
 * @version beta
 */
class V2OrgsNameSettingsPutRequestRestrictedImages {
    /**
     * Constructs a new <code>V2OrgsNameSettingsPutRequestRestrictedImages</code>.
     * @alias module:model/V2OrgsNameSettingsPutRequestRestrictedImages
     * @implements module:model/RestrictedImages
     * @param allowOfficialImages {Boolean} Allow usage of official images if \"enabled\" is `true`.
     * @param allowVerifiedPublishers {Boolean} Allow usage of verified publisher images if \"enabled\" is `true`.
     * @param enabled {Boolean} Whether or not to restrict image usage for users in the organization.
     */
    constructor(allowOfficialImages, allowVerifiedPublishers, enabled) { 
        RestrictedImages.initialize(this);
        V2OrgsNameSettingsPutRequestRestrictedImages.initialize(this, allowOfficialImages, allowVerifiedPublishers, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowOfficialImages, allowVerifiedPublishers, enabled) { 
        obj['allow_official_images'] = allowOfficialImages;
        obj['allow_verified_publishers'] = allowVerifiedPublishers;
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>V2OrgsNameSettingsPutRequestRestrictedImages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2OrgsNameSettingsPutRequestRestrictedImages} obj Optional instance to populate.
     * @return {module:model/V2OrgsNameSettingsPutRequestRestrictedImages} The populated <code>V2OrgsNameSettingsPutRequestRestrictedImages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2OrgsNameSettingsPutRequestRestrictedImages();
            RestrictedImages.constructFromObject(data, obj);

            if (data.hasOwnProperty('allow_official_images')) {
                obj['allow_official_images'] = ApiClient.convertToType(data['allow_official_images'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_verified_publishers')) {
                obj['allow_verified_publishers'] = ApiClient.convertToType(data['allow_verified_publishers'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2OrgsNameSettingsPutRequestRestrictedImages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2OrgsNameSettingsPutRequestRestrictedImages</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of V2OrgsNameSettingsPutRequestRestrictedImages.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

V2OrgsNameSettingsPutRequestRestrictedImages.RequiredProperties = ["allow_official_images", "allow_verified_publishers", "enabled"];

/**
 * Allow usage of official images if \"enabled\" is `true`.
 * @member {Boolean} allow_official_images
 */
V2OrgsNameSettingsPutRequestRestrictedImages.prototype['allow_official_images'] = undefined;

/**
 * Allow usage of verified publisher images if \"enabled\" is `true`.
 * @member {Boolean} allow_verified_publishers
 */
V2OrgsNameSettingsPutRequestRestrictedImages.prototype['allow_verified_publishers'] = undefined;

/**
 * Whether or not to restrict image usage for users in the organization.
 * @member {Boolean} enabled
 */
V2OrgsNameSettingsPutRequestRestrictedImages.prototype['enabled'] = undefined;


// Implement RestrictedImages interface:
/**
 * Allow usage of official images if \"enabled\" is `true`.
 * @member {Boolean} allow_official_images
 */
RestrictedImages.prototype['allow_official_images'] = undefined;
/**
 * Allow usage of verified publisher images if \"enabled\" is `true`.
 * @member {Boolean} allow_verified_publishers
 */
RestrictedImages.prototype['allow_verified_publishers'] = undefined;
/**
 * Whether or not to restrict image usage for users in the organization.
 * @member {Boolean} enabled
 */
RestrictedImages.prototype['enabled'] = undefined;




export default V2OrgsNameSettingsPutRequestRestrictedImages;

