/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner from './PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner';
import PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsWarningsInner from './PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsWarningsInner';

/**
 * The PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails model module.
 * @module model/PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails
 * @version beta
 */
class PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails {
    /**
     * Constructs a new <code>PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails</code>.
     * @alias module:model/PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails
     */
    constructor() { 
        
        PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails} obj Optional instance to populate.
     * @return {module:model/PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails} The populated <code>PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsWarningsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.validateJSON(item);
            };
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsWarningsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Errors from validating delete request. These cannot be ignored.
 * @member {Array.<module:model/PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner>} errors
 */
PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails.prototype['errors'] = undefined;

/**
 * Warnings that can be ignored.  These warnings include:  - is_active: warning when attempting to delete an image that is marked as  active. - current_tag: warning when attempting to delete an image that has one or  more current tags in the repository.  Warnings can be copied from the response to the request. 
 * @member {Array.<module:model/PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsWarningsInner>} warnings
 */
PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails.prototype['warnings'] = undefined;






export default PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetails;

