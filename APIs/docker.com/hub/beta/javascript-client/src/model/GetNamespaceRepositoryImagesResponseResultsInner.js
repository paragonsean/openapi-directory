/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNamespaceRepositoryImagesResponseResultsInnerTagsInner from './GetNamespaceRepositoryImagesResponseResultsInnerTagsInner';

/**
 * The GetNamespaceRepositoryImagesResponseResultsInner model module.
 * @module model/GetNamespaceRepositoryImagesResponseResultsInner
 * @version beta
 */
class GetNamespaceRepositoryImagesResponseResultsInner {
    /**
     * Constructs a new <code>GetNamespaceRepositoryImagesResponseResultsInner</code>.
     * @alias module:model/GetNamespaceRepositoryImagesResponseResultsInner
     */
    constructor() { 
        
        GetNamespaceRepositoryImagesResponseResultsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetNamespaceRepositoryImagesResponseResultsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetNamespaceRepositoryImagesResponseResultsInner} obj Optional instance to populate.
     * @return {module:model/GetNamespaceRepositoryImagesResponseResultsInner} The populated <code>GetNamespaceRepositoryImagesResponseResultsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetNamespaceRepositoryImagesResponseResultsInner();

            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('last_pulled')) {
                obj['last_pulled'] = ApiClient.convertToType(data['last_pulled'], 'String');
            }
            if (data.hasOwnProperty('last_pushed')) {
                obj['last_pushed'] = ApiClient.convertToType(data['last_pushed'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [GetNamespaceRepositoryImagesResponseResultsInnerTagsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetNamespaceRepositoryImagesResponseResultsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetNamespaceRepositoryImagesResponseResultsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['digest'] && !(typeof data['digest'] === 'string' || data['digest'] instanceof String)) {
            throw new Error("Expected the field `digest` to be a primitive type in the JSON string but got " + data['digest']);
        }
        // ensure the json data is a string
        if (data['last_pulled'] && !(typeof data['last_pulled'] === 'string' || data['last_pulled'] instanceof String)) {
            throw new Error("Expected the field `last_pulled` to be a primitive type in the JSON string but got " + data['last_pulled']);
        }
        // ensure the json data is a string
        if (data['last_pushed'] && !(typeof data['last_pushed'] === 'string' || data['last_pushed'] instanceof String)) {
            throw new Error("Expected the field `last_pushed` to be a primitive type in the JSON string but got " + data['last_pushed']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                GetNamespaceRepositoryImagesResponseResultsInnerTagsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The image's digest.
 * @member {String} digest
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['digest'] = undefined;

/**
 * Time when this image was last pulled. Note this is updated at most once per hour.
 * @member {String} last_pulled
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['last_pulled'] = undefined;

/**
 * Time when this image was last pushed.
 * @member {String} last_pushed
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['last_pushed'] = undefined;

/**
 * The repository namespace.
 * @member {String} namespace
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['namespace'] = undefined;

/**
 * The repository name.
 * @member {String} repository
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['repository'] = undefined;

/**
 * The status of the image based on its last activity against the `active_from` time.
 * @member {module:model/GetNamespaceRepositoryImagesResponseResultsInner.StatusEnum} status
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['status'] = undefined;

/**
 * The current and historical tags for this image.
 * @member {Array.<module:model/GetNamespaceRepositoryImagesResponseResultsInnerTagsInner>} tags
 */
GetNamespaceRepositoryImagesResponseResultsInner.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GetNamespaceRepositoryImagesResponseResultsInner['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default GetNamespaceRepositoryImagesResponseResultsInner;

