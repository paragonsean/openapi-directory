/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScimSchemaAttribute model module.
 * @module model/ScimSchemaAttribute
 * @version beta
 */
class ScimSchemaAttribute {
    /**
     * Constructs a new <code>ScimSchemaAttribute</code>.
     * @alias module:model/ScimSchemaAttribute
     */
    constructor() { 
        
        ScimSchemaAttribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScimSchemaAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScimSchemaAttribute} obj Optional instance to populate.
     * @return {module:model/ScimSchemaAttribute} The populated <code>ScimSchemaAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimSchemaAttribute();

            if (data.hasOwnProperty('caseExact')) {
                obj['caseExact'] = ApiClient.convertToType(data['caseExact'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('multiValued')) {
                obj['multiValued'] = ApiClient.convertToType(data['multiValued'], 'Boolean');
            }
            if (data.hasOwnProperty('mutability')) {
                obj['mutability'] = ApiClient.convertToType(data['mutability'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('returned')) {
                obj['returned'] = ApiClient.convertToType(data['returned'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uniqueness')) {
                obj['uniqueness'] = ApiClient.convertToType(data['uniqueness'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScimSchemaAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScimSchemaAttribute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mutability'] && !(typeof data['mutability'] === 'string' || data['mutability'] instanceof String)) {
            throw new Error("Expected the field `mutability` to be a primitive type in the JSON string but got " + data['mutability']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['returned'] && !(typeof data['returned'] === 'string' || data['returned'] instanceof String)) {
            throw new Error("Expected the field `returned` to be a primitive type in the JSON string but got " + data['returned']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uniqueness'] && !(typeof data['uniqueness'] === 'string' || data['uniqueness'] instanceof String)) {
            throw new Error("Expected the field `uniqueness` to be a primitive type in the JSON string but got " + data['uniqueness']);
        }

        return true;
    }


}



/**
 * @member {Boolean} caseExact
 */
ScimSchemaAttribute.prototype['caseExact'] = undefined;

/**
 * @member {String} description
 */
ScimSchemaAttribute.prototype['description'] = undefined;

/**
 * @member {Boolean} multiValued
 */
ScimSchemaAttribute.prototype['multiValued'] = undefined;

/**
 * @member {String} mutability
 */
ScimSchemaAttribute.prototype['mutability'] = undefined;

/**
 * @member {String} name
 */
ScimSchemaAttribute.prototype['name'] = undefined;

/**
 * @member {Boolean} required
 */
ScimSchemaAttribute.prototype['required'] = undefined;

/**
 * @member {String} returned
 */
ScimSchemaAttribute.prototype['returned'] = undefined;

/**
 * @member {module:model/ScimSchemaAttribute.TypeEnum} type
 */
ScimSchemaAttribute.prototype['type'] = undefined;

/**
 * @member {String} uniqueness
 */
ScimSchemaAttribute.prototype['uniqueness'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ScimSchemaAttribute['TypeEnum'] = {

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",

    /**
     * value: "complex"
     * @const
     */
    "complex": "complex"
};



export default ScimSchemaAttribute;

