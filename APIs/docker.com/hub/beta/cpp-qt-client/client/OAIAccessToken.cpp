/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_ip_isSet = false;
    m_creator_ip_isValid = false;

    m_creator_ua_isSet = false;
    m_creator_ua_isValid = false;

    m_generated_by_isSet = false;
    m_generated_by_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_used_isSet = false;
    m_last_used_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_label_isSet = false;
    m_token_label_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_ip_isValid = ::OpenAPI::fromJsonValue(m_creator_ip, json[QString("creator_ip")]);
    m_creator_ip_isSet = !json[QString("creator_ip")].isNull() && m_creator_ip_isValid;

    m_creator_ua_isValid = ::OpenAPI::fromJsonValue(m_creator_ua, json[QString("creator_ua")]);
    m_creator_ua_isSet = !json[QString("creator_ua")].isNull() && m_creator_ua_isValid;

    m_generated_by_isValid = ::OpenAPI::fromJsonValue(m_generated_by, json[QString("generated_by")]);
    m_generated_by_isSet = !json[QString("generated_by")].isNull() && m_generated_by_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_last_used_isValid = ::OpenAPI::fromJsonValue(m_last_used, json[QString("last_used")]);
    m_last_used_isSet = !json[QString("last_used")].isNull() && m_last_used_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_token_label_isValid = ::OpenAPI::fromJsonValue(m_token_label, json[QString("token_label")]);
    m_token_label_isSet = !json[QString("token_label")].isNull() && m_token_label_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_ip_isSet) {
        obj.insert(QString("creator_ip"), ::OpenAPI::toJsonValue(m_creator_ip));
    }
    if (m_creator_ua_isSet) {
        obj.insert(QString("creator_ua"), ::OpenAPI::toJsonValue(m_creator_ua));
    }
    if (m_generated_by_isSet) {
        obj.insert(QString("generated_by"), ::OpenAPI::toJsonValue(m_generated_by));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_used_isSet) {
        obj.insert(QString("last_used"), ::OpenAPI::toJsonValue(m_last_used));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_label_isSet) {
        obj.insert(QString("token_label"), ::OpenAPI::toJsonValue(m_token_label));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIAccessToken::getClientId() const {
    return m_client_id;
}
void OAIAccessToken::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAccessToken::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAccessToken::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAccessToken::getCreatedAt() const {
    return m_created_at;
}
void OAIAccessToken::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccessToken::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccessToken::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAccessToken::getCreatorIp() const {
    return m_creator_ip;
}
void OAIAccessToken::setCreatorIp(const QString &creator_ip) {
    m_creator_ip = creator_ip;
    m_creator_ip_isSet = true;
}

bool OAIAccessToken::is_creator_ip_Set() const{
    return m_creator_ip_isSet;
}

bool OAIAccessToken::is_creator_ip_Valid() const{
    return m_creator_ip_isValid;
}

QString OAIAccessToken::getCreatorUa() const {
    return m_creator_ua;
}
void OAIAccessToken::setCreatorUa(const QString &creator_ua) {
    m_creator_ua = creator_ua;
    m_creator_ua_isSet = true;
}

bool OAIAccessToken::is_creator_ua_Set() const{
    return m_creator_ua_isSet;
}

bool OAIAccessToken::is_creator_ua_Valid() const{
    return m_creator_ua_isValid;
}

QString OAIAccessToken::getGeneratedBy() const {
    return m_generated_by;
}
void OAIAccessToken::setGeneratedBy(const QString &generated_by) {
    m_generated_by = generated_by;
    m_generated_by_isSet = true;
}

bool OAIAccessToken::is_generated_by_Set() const{
    return m_generated_by_isSet;
}

bool OAIAccessToken::is_generated_by_Valid() const{
    return m_generated_by_isValid;
}

bool OAIAccessToken::isIsActive() const {
    return m_is_active;
}
void OAIAccessToken::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIAccessToken::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIAccessToken::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIAccessToken::getLastUsed() const {
    return m_last_used;
}
void OAIAccessToken::setLastUsed(const QString &last_used) {
    m_last_used = last_used;
    m_last_used_isSet = true;
}

bool OAIAccessToken::is_last_used_Set() const{
    return m_last_used_isSet;
}

bool OAIAccessToken::is_last_used_Valid() const{
    return m_last_used_isValid;
}

QList<QString> OAIAccessToken::getScopes() const {
    return m_scopes;
}
void OAIAccessToken::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIAccessToken::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIAccessToken::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIAccessToken::getToken() const {
    return m_token;
}
void OAIAccessToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAccessToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAccessToken::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIAccessToken::getTokenLabel() const {
    return m_token_label;
}
void OAIAccessToken::setTokenLabel(const QString &token_label) {
    m_token_label = token_label;
    m_token_label_isSet = true;
}

bool OAIAccessToken::is_token_label_Set() const{
    return m_token_label_isSet;
}

bool OAIAccessToken::is_token_label_Valid() const{
    return m_token_label_isValid;
}

QString OAIAccessToken::getUuid() const {
    return m_uuid;
}
void OAIAccessToken::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIAccessToken::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIAccessToken::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_ua_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
