/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag::OAITag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag::OAITag() {
    this->initializeModel();
}

OAITag::~OAITag() {}

void OAITag::initializeModel() {

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_full_size_isSet = false;
    m_full_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_last_updater_isSet = false;
    m_last_updater_isValid = false;

    m_last_updater_username_isSet = false;
    m_last_updater_username_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_last_pulled_isSet = false;
    m_tag_last_pulled_isValid = false;

    m_tag_last_pushed_isSet = false;
    m_tag_last_pushed_isValid = false;

    m_v2_isSet = false;
    m_v2_isValid = false;
}

void OAITag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag::fromJsonObject(QJsonObject json) {

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_full_size_isValid = ::OpenAPI::fromJsonValue(m_full_size, json[QString("full_size")]);
    m_full_size_isSet = !json[QString("full_size")].isNull() && m_full_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_last_updater_isValid = ::OpenAPI::fromJsonValue(m_last_updater, json[QString("last_updater")]);
    m_last_updater_isSet = !json[QString("last_updater")].isNull() && m_last_updater_isValid;

    m_last_updater_username_isValid = ::OpenAPI::fromJsonValue(m_last_updater_username, json[QString("last_updater_username")]);
    m_last_updater_username_isSet = !json[QString("last_updater_username")].isNull() && m_last_updater_username_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_last_pulled_isValid = ::OpenAPI::fromJsonValue(m_tag_last_pulled, json[QString("tag_last_pulled")]);
    m_tag_last_pulled_isSet = !json[QString("tag_last_pulled")].isNull() && m_tag_last_pulled_isValid;

    m_tag_last_pushed_isValid = ::OpenAPI::fromJsonValue(m_tag_last_pushed, json[QString("tag_last_pushed")]);
    m_tag_last_pushed_isSet = !json[QString("tag_last_pushed")].isNull() && m_tag_last_pushed_isValid;

    m_v2_isValid = ::OpenAPI::fromJsonValue(m_v2, json[QString("v2")]);
    m_v2_isSet = !json[QString("v2")].isNull() && m_v2_isValid;
}

QString OAITag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_full_size_isSet) {
        obj.insert(QString("full_size"), ::OpenAPI::toJsonValue(m_full_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images_isSet) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_last_updater_isSet) {
        obj.insert(QString("last_updater"), ::OpenAPI::toJsonValue(m_last_updater));
    }
    if (m_last_updater_username_isSet) {
        obj.insert(QString("last_updater_username"), ::OpenAPI::toJsonValue(m_last_updater_username));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_last_pulled_isSet) {
        obj.insert(QString("tag_last_pulled"), ::OpenAPI::toJsonValue(m_tag_last_pulled));
    }
    if (m_tag_last_pushed_isSet) {
        obj.insert(QString("tag_last_pushed"), ::OpenAPI::toJsonValue(m_tag_last_pushed));
    }
    if (m_v2_isSet) {
        obj.insert(QString("v2"), ::OpenAPI::toJsonValue(m_v2));
    }
    return obj;
}

qint32 OAITag::getCreator() const {
    return m_creator;
}
void OAITag::setCreator(const qint32 &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAITag::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAITag::is_creator_Valid() const{
    return m_creator_isValid;
}

qint32 OAITag::getFullSize() const {
    return m_full_size;
}
void OAITag::setFullSize(const qint32 &full_size) {
    m_full_size = full_size;
    m_full_size_isSet = true;
}

bool OAITag::is_full_size_Set() const{
    return m_full_size_isSet;
}

bool OAITag::is_full_size_Valid() const{
    return m_full_size_isValid;
}

qint32 OAITag::getId() const {
    return m_id;
}
void OAITag::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITag::is_id_Set() const{
    return m_id_isSet;
}

bool OAITag::is_id_Valid() const{
    return m_id_isValid;
}

OAIImage OAITag::getImages() const {
    return m_images;
}
void OAITag::setImages(const OAIImage &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAITag::is_images_Set() const{
    return m_images_isSet;
}

bool OAITag::is_images_Valid() const{
    return m_images_isValid;
}

QString OAITag::getLastUpdated() const {
    return m_last_updated;
}
void OAITag::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAITag::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAITag::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAITag::getLastUpdater() const {
    return m_last_updater;
}
void OAITag::setLastUpdater(const qint32 &last_updater) {
    m_last_updater = last_updater;
    m_last_updater_isSet = true;
}

bool OAITag::is_last_updater_Set() const{
    return m_last_updater_isSet;
}

bool OAITag::is_last_updater_Valid() const{
    return m_last_updater_isValid;
}

QString OAITag::getLastUpdaterUsername() const {
    return m_last_updater_username;
}
void OAITag::setLastUpdaterUsername(const QString &last_updater_username) {
    m_last_updater_username = last_updater_username;
    m_last_updater_username_isSet = true;
}

bool OAITag::is_last_updater_username_Set() const{
    return m_last_updater_username_isSet;
}

bool OAITag::is_last_updater_username_Valid() const{
    return m_last_updater_username_isValid;
}

QString OAITag::getName() const {
    return m_name;
}
void OAITag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITag::is_name_Set() const{
    return m_name_isSet;
}

bool OAITag::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITag::getRepository() const {
    return m_repository;
}
void OAITag::setRepository(const qint32 &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAITag::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAITag::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAITag::getStatus() const {
    return m_status;
}
void OAITag::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITag::is_status_Set() const{
    return m_status_isSet;
}

bool OAITag::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITag::getTagLastPulled() const {
    return m_tag_last_pulled;
}
void OAITag::setTagLastPulled(const QString &tag_last_pulled) {
    m_tag_last_pulled = tag_last_pulled;
    m_tag_last_pulled_isSet = true;
}

bool OAITag::is_tag_last_pulled_Set() const{
    return m_tag_last_pulled_isSet;
}

bool OAITag::is_tag_last_pulled_Valid() const{
    return m_tag_last_pulled_isValid;
}

QString OAITag::getTagLastPushed() const {
    return m_tag_last_pushed;
}
void OAITag::setTagLastPushed(const QString &tag_last_pushed) {
    m_tag_last_pushed = tag_last_pushed;
    m_tag_last_pushed_isSet = true;
}

bool OAITag::is_tag_last_pushed_Set() const{
    return m_tag_last_pushed_isSet;
}

bool OAITag::is_tag_last_pushed_Valid() const{
    return m_tag_last_pushed_isValid;
}

QString OAITag::getV2() const {
    return m_v2;
}
void OAITag::setV2(const QString &v2) {
    m_v2 = v2;
    m_v2_isSet = true;
}

bool OAITag::is_v2_Set() const{
    return m_v2_isSet;
}

bool OAITag::is_v2_Valid() const{
    return m_v2_isValid;
}

bool OAITag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_last_pulled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_last_pushed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
