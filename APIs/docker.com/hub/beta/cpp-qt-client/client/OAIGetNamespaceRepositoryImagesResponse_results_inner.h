/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetNamespaceRepositoryImagesResponse_results_inner.h
 *
 * 
 */

#ifndef OAIGetNamespaceRepositoryImagesResponse_results_inner_H
#define OAIGetNamespaceRepositoryImagesResponse_results_inner_H

#include <QJsonObject>

#include "OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner;

class OAIGetNamespaceRepositoryImagesResponse_results_inner : public OAIObject {
public:
    OAIGetNamespaceRepositoryImagesResponse_results_inner();
    OAIGetNamespaceRepositoryImagesResponse_results_inner(QString json);
    ~OAIGetNamespaceRepositoryImagesResponse_results_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDigest() const;
    void setDigest(const QString &digest);
    bool is_digest_Set() const;
    bool is_digest_Valid() const;

    QString getLastPulled() const;
    void setLastPulled(const QString &last_pulled);
    bool is_last_pulled_Set() const;
    bool is_last_pulled_Valid() const;

    QString getLastPushed() const;
    void setLastPushed(const QString &last_pushed);
    bool is_last_pushed_Set() const;
    bool is_last_pushed_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getRepository() const;
    void setRepository(const QString &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner> getTags() const;
    void setTags(const QList<OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_digest;
    bool m_digest_isSet;
    bool m_digest_isValid;

    QString m_last_pulled;
    bool m_last_pulled_isSet;
    bool m_last_pulled_isValid;

    QString m_last_pushed;
    bool m_last_pushed_isSet;
    bool m_last_pushed_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetNamespaceRepositoryImagesResponse_results_inner)

#endif // OAIGetNamespaceRepositoryImagesResponse_results_inner_H
