/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_v2_orgs__name__settings_put_request_restricted_images.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_v2_orgs__name__settings_put_request_restricted_images::OAI_v2_orgs__name__settings_put_request_restricted_images(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_v2_orgs__name__settings_put_request_restricted_images::OAI_v2_orgs__name__settings_put_request_restricted_images() {
    this->initializeModel();
}

OAI_v2_orgs__name__settings_put_request_restricted_images::~OAI_v2_orgs__name__settings_put_request_restricted_images() {}

void OAI_v2_orgs__name__settings_put_request_restricted_images::initializeModel() {

    m_allow_official_images_isSet = false;
    m_allow_official_images_isValid = false;

    m_allow_verified_publishers_isSet = false;
    m_allow_verified_publishers_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAI_v2_orgs__name__settings_put_request_restricted_images::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_v2_orgs__name__settings_put_request_restricted_images::fromJsonObject(QJsonObject json) {

    m_allow_official_images_isValid = ::OpenAPI::fromJsonValue(m_allow_official_images, json[QString("allow_official_images")]);
    m_allow_official_images_isSet = !json[QString("allow_official_images")].isNull() && m_allow_official_images_isValid;

    m_allow_verified_publishers_isValid = ::OpenAPI::fromJsonValue(m_allow_verified_publishers, json[QString("allow_verified_publishers")]);
    m_allow_verified_publishers_isSet = !json[QString("allow_verified_publishers")].isNull() && m_allow_verified_publishers_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;
}

QString OAI_v2_orgs__name__settings_put_request_restricted_images::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_v2_orgs__name__settings_put_request_restricted_images::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_official_images_isSet) {
        obj.insert(QString("allow_official_images"), ::OpenAPI::toJsonValue(m_allow_official_images));
    }
    if (m_allow_verified_publishers_isSet) {
        obj.insert(QString("allow_verified_publishers"), ::OpenAPI::toJsonValue(m_allow_verified_publishers));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::isAllowOfficialImages() const {
    return m_allow_official_images;
}
void OAI_v2_orgs__name__settings_put_request_restricted_images::setAllowOfficialImages(const bool &allow_official_images) {
    m_allow_official_images = allow_official_images;
    m_allow_official_images_isSet = true;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::is_allow_official_images_Set() const{
    return m_allow_official_images_isSet;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::is_allow_official_images_Valid() const{
    return m_allow_official_images_isValid;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::isAllowVerifiedPublishers() const {
    return m_allow_verified_publishers;
}
void OAI_v2_orgs__name__settings_put_request_restricted_images::setAllowVerifiedPublishers(const bool &allow_verified_publishers) {
    m_allow_verified_publishers = allow_verified_publishers;
    m_allow_verified_publishers_isSet = true;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::is_allow_verified_publishers_Set() const{
    return m_allow_verified_publishers_isSet;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::is_allow_verified_publishers_Valid() const{
    return m_allow_verified_publishers_isValid;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::isEnabled() const {
    return m_enabled;
}
void OAI_v2_orgs__name__settings_put_request_restricted_images::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_official_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_verified_publishers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_v2_orgs__name__settings_put_request_restricted_images::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_official_images_isValid && m_allow_verified_publishers_isValid && m_enabled_isValid && true;
}

} // namespace OpenAPI
