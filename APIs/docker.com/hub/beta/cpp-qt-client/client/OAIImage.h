/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImage.h
 *
 * 
 */

#ifndef OAIImage_H
#define OAIImage_H

#include <QJsonObject>

#include "OAILayer.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILayer;

class OAIImage : public OAIObject {
public:
    OAIImage();
    OAIImage(QString json);
    ~OAIImage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getDigest() const;
    void setDigest(const QString &digest);
    bool is_digest_Set() const;
    bool is_digest_Valid() const;

    QString getFeatures() const;
    void setFeatures(const QString &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    QString getLastPulled() const;
    void setLastPulled(const QString &last_pulled);
    bool is_last_pulled_Set() const;
    bool is_last_pulled_Valid() const;

    QString getLastPushed() const;
    void setLastPushed(const QString &last_pushed);
    bool is_last_pushed_Set() const;
    bool is_last_pushed_Valid() const;

    QList<OAILayer> getLayers() const;
    void setLayers(const QList<OAILayer> &layers);
    bool is_layers_Set() const;
    bool is_layers_Valid() const;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    QString getOsFeatures() const;
    void setOsFeatures(const QString &os_features);
    bool is_os_features_Set() const;
    bool is_os_features_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getVariant() const;
    void setVariant(const QString &variant);
    bool is_variant_Set() const;
    bool is_variant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_digest;
    bool m_digest_isSet;
    bool m_digest_isValid;

    QString m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    QString m_last_pulled;
    bool m_last_pulled_isSet;
    bool m_last_pulled_isValid;

    QString m_last_pushed;
    bool m_last_pushed_isSet;
    bool m_last_pushed_isValid;

    QList<OAILayer> m_layers;
    bool m_layers_isSet;
    bool m_layers_isValid;

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    QString m_os_features;
    bool m_os_features_isSet;
    bool m_os_features_isValid;

    QString m_os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_variant;
    bool m_variant_isSet;
    bool m_variant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImage)

#endif // OAIImage_H
