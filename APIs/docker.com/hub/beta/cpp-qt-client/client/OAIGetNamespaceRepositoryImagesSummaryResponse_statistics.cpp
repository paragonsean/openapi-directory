/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNamespaceRepositoryImagesSummaryResponse_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::OAIGetNamespaceRepositoryImagesSummaryResponse_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::OAIGetNamespaceRepositoryImagesSummaryResponse_statistics() {
    this->initializeModel();
}

OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::~OAIGetNamespaceRepositoryImagesSummaryResponse_statistics() {}

void OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_inactive_isSet = false;
    m_inactive_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_inactive_isValid = ::OpenAPI::fromJsonValue(m_inactive, json[QString("inactive")]);
    m_inactive_isSet = !json[QString("inactive")].isNull() && m_inactive_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_inactive_isSet) {
        obj.insert(QString("inactive"), ::OpenAPI::toJsonValue(m_inactive));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::getActive() const {
    return m_active;
}
void OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::setActive(const qint32 &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::is_active_Set() const{
    return m_active_isSet;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::getInactive() const {
    return m_inactive;
}
void OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::setInactive(const qint32 &inactive) {
    m_inactive = inactive;
    m_inactive_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::is_inactive_Set() const{
    return m_inactive_isSet;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::is_inactive_Valid() const{
    return m_inactive_isValid;
}

qint32 OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::getTotal() const {
    return m_total;
}
void OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
