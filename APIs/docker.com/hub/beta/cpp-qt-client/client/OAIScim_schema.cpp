/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_schema::OAIScim_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_schema::OAIScim_schema() {
    this->initializeModel();
}

OAIScim_schema::~OAIScim_schema() {}

void OAIScim_schema::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;
}

void OAIScim_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_schema::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;
}

QString OAIScim_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    return obj;
}

QList<OAIScim_schema_parent_attribute> OAIScim_schema::getAttributes() const {
    return m_attributes;
}
void OAIScim_schema::setAttributes(const QList<OAIScim_schema_parent_attribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIScim_schema::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIScim_schema::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIScim_schema::getDescription() const {
    return m_description;
}
void OAIScim_schema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScim_schema::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScim_schema::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIScim_schema::getId() const {
    return m_id;
}
void OAIScim_schema::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScim_schema::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScim_schema::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScim_schema::getName() const {
    return m_name;
}
void OAIScim_schema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScim_schema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScim_schema::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIScim_schema::getSchemas() const {
    return m_schemas;
}
void OAIScim_schema::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIScim_schema::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIScim_schema::is_schemas_Valid() const{
    return m_schemas_isValid;
}

bool OAIScim_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
