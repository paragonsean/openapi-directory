/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_user::OAIScim_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_user::OAIScim_user() {
    this->initializeModel();
}

OAIScim_user::~OAIScim_user() {}

void OAIScim_user::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIScim_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_user::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIScim_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_user::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

bool OAIScim_user::isActive() const {
    return m_active;
}
void OAIScim_user::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIScim_user::is_active_Set() const{
    return m_active_isSet;
}

bool OAIScim_user::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIScim_user::getDisplayName() const {
    return m_display_name;
}
void OAIScim_user::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIScim_user::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIScim_user::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIScim_email> OAIScim_user::getEmails() const {
    return m_emails;
}
void OAIScim_user::setEmails(const QList<OAIScim_email> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIScim_user::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIScim_user::is_emails_Valid() const{
    return m_emails_isValid;
}

QList<OAIScim_group> OAIScim_user::getGroups() const {
    return m_groups;
}
void OAIScim_user::setGroups(const QList<OAIScim_group> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIScim_user::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIScim_user::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIScim_user::getId() const {
    return m_id;
}
void OAIScim_user::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScim_user::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScim_user::is_id_Valid() const{
    return m_id_isValid;
}

OAIScim_user_meta OAIScim_user::getMeta() const {
    return m_meta;
}
void OAIScim_user::setMeta(const OAIScim_user_meta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIScim_user::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIScim_user::is_meta_Valid() const{
    return m_meta_isValid;
}

OAIScim_user_name OAIScim_user::getName() const {
    return m_name;
}
void OAIScim_user::setName(const OAIScim_user_name &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScim_user::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScim_user::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIScim_user::getSchemas() const {
    return m_schemas;
}
void OAIScim_user::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIScim_user::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIScim_user::is_schemas_Valid() const{
    return m_schemas_isValid;
}

QString OAIScim_user::getUserName() const {
    return m_user_name;
}
void OAIScim_user::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIScim_user::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIScim_user::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIScim_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
