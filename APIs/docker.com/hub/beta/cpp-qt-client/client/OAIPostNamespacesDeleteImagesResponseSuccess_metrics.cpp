/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostNamespacesDeleteImagesResponseSuccess_metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostNamespacesDeleteImagesResponseSuccess_metrics::OAIPostNamespacesDeleteImagesResponseSuccess_metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostNamespacesDeleteImagesResponseSuccess_metrics::OAIPostNamespacesDeleteImagesResponseSuccess_metrics() {
    this->initializeModel();
}

OAIPostNamespacesDeleteImagesResponseSuccess_metrics::~OAIPostNamespacesDeleteImagesResponseSuccess_metrics() {}

void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::initializeModel() {

    m_manifest_deletes_isSet = false;
    m_manifest_deletes_isValid = false;

    m_manifest_errors_isSet = false;
    m_manifest_errors_isValid = false;

    m_tag_deletes_isSet = false;
    m_tag_deletes_isValid = false;

    m_tag_errors_isSet = false;
    m_tag_errors_isValid = false;
}

void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::fromJsonObject(QJsonObject json) {

    m_manifest_deletes_isValid = ::OpenAPI::fromJsonValue(m_manifest_deletes, json[QString("manifest_deletes")]);
    m_manifest_deletes_isSet = !json[QString("manifest_deletes")].isNull() && m_manifest_deletes_isValid;

    m_manifest_errors_isValid = ::OpenAPI::fromJsonValue(m_manifest_errors, json[QString("manifest_errors")]);
    m_manifest_errors_isSet = !json[QString("manifest_errors")].isNull() && m_manifest_errors_isValid;

    m_tag_deletes_isValid = ::OpenAPI::fromJsonValue(m_tag_deletes, json[QString("tag_deletes")]);
    m_tag_deletes_isSet = !json[QString("tag_deletes")].isNull() && m_tag_deletes_isValid;

    m_tag_errors_isValid = ::OpenAPI::fromJsonValue(m_tag_errors, json[QString("tag_errors")]);
    m_tag_errors_isSet = !json[QString("tag_errors")].isNull() && m_tag_errors_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseSuccess_metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostNamespacesDeleteImagesResponseSuccess_metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_manifest_deletes_isSet) {
        obj.insert(QString("manifest_deletes"), ::OpenAPI::toJsonValue(m_manifest_deletes));
    }
    if (m_manifest_errors_isSet) {
        obj.insert(QString("manifest_errors"), ::OpenAPI::toJsonValue(m_manifest_errors));
    }
    if (m_tag_deletes_isSet) {
        obj.insert(QString("tag_deletes"), ::OpenAPI::toJsonValue(m_tag_deletes));
    }
    if (m_tag_errors_isSet) {
        obj.insert(QString("tag_errors"), ::OpenAPI::toJsonValue(m_tag_errors));
    }
    return obj;
}

qint32 OAIPostNamespacesDeleteImagesResponseSuccess_metrics::getManifestDeletes() const {
    return m_manifest_deletes;
}
void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::setManifestDeletes(const qint32 &manifest_deletes) {
    m_manifest_deletes = manifest_deletes;
    m_manifest_deletes_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_manifest_deletes_Set() const{
    return m_manifest_deletes_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_manifest_deletes_Valid() const{
    return m_manifest_deletes_isValid;
}

qint32 OAIPostNamespacesDeleteImagesResponseSuccess_metrics::getManifestErrors() const {
    return m_manifest_errors;
}
void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::setManifestErrors(const qint32 &manifest_errors) {
    m_manifest_errors = manifest_errors;
    m_manifest_errors_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_manifest_errors_Set() const{
    return m_manifest_errors_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_manifest_errors_Valid() const{
    return m_manifest_errors_isValid;
}

qint32 OAIPostNamespacesDeleteImagesResponseSuccess_metrics::getTagDeletes() const {
    return m_tag_deletes;
}
void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::setTagDeletes(const qint32 &tag_deletes) {
    m_tag_deletes = tag_deletes;
    m_tag_deletes_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_tag_deletes_Set() const{
    return m_tag_deletes_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_tag_deletes_Valid() const{
    return m_tag_deletes_isValid;
}

qint32 OAIPostNamespacesDeleteImagesResponseSuccess_metrics::getTagErrors() const {
    return m_tag_errors;
}
void OAIPostNamespacesDeleteImagesResponseSuccess_metrics::setTagErrors(const qint32 &tag_errors) {
    m_tag_errors = tag_errors;
    m_tag_errors_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_tag_errors_Set() const{
    return m_tag_errors_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::is_tag_errors_Valid() const{
    return m_tag_errors_isValid;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_manifest_deletes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_deletes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_errors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess_metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
