/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScimApi_H
#define OAI_OAIScimApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScim_resource_type.h"
#include "OAIScim_schema.h"
#include "OAIScim_service_provider_config.h"
#include "OAIScim_user.h"
#include "OAI_v2_scim_2_0_ResourceTypes__name__get_404_response.h"
#include "OAI_v2_scim_2_0_ResourceTypes_get_200_response.h"
#include "OAI_v2_scim_2_0_ResourceTypes_get_401_response.h"
#include "OAI_v2_scim_2_0_ResourceTypes_get_500_response.h"
#include "OAI_v2_scim_2_0_Schemas_get_200_response.h"
#include "OAI_v2_scim_2_0_Users__id__put_request.h"
#include "OAI_v2_scim_2_0_Users_get_200_response.h"
#include "OAI_v2_scim_2_0_Users_get_400_response.h"
#include "OAI_v2_scim_2_0_Users_get_403_response.h"
#include "OAI_v2_scim_2_0_Users_post_409_response.h"
#include "OAI_v2_scim_2_0_Users_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScimApi : public QObject {
    Q_OBJECT

public:
    OAIScimApi(const int timeOut = 0);
    ~OAIScimApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void v2Scim20ResourceTypesGet();

    /**
    * @param[in]  name QString [required]
    */
    virtual void v2Scim20ResourceTypesNameGet(const QString &name);


    virtual void v2Scim20SchemasGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2Scim20SchemasIdGet(const QString &id);


    virtual void v2Scim20ServiceProviderConfigGet();

    /**
    * @param[in]  start_index qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void v2Scim20UsersGet(const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2Scim20UsersIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_v2_scim_2_0_users__id__put_request OAI_v2_scim_2_0_Users__id__put_request [required]
    */
    virtual void v2Scim20UsersIdPut(const QString &id, const OAI_v2_scim_2_0_Users__id__put_request &oai_v2_scim_2_0_users__id__put_request);

    /**
    * @param[in]  oai_v2_scim_2_0_users_post_request OAI_v2_scim_2_0_Users_post_request [required]
    */
    virtual void v2Scim20UsersPost(const OAI_v2_scim_2_0_Users_post_request &oai_v2_scim_2_0_users_post_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2Scim20ResourceTypesGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20ResourceTypesNameGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20SchemasGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20SchemasIdGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20ServiceProviderConfigGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20UsersGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20UsersIdGetCallback(OAIHttpRequestWorker *worker);
    void v2Scim20UsersIdPutCallback(OAIHttpRequestWorker *worker);
    void v2Scim20UsersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2Scim20ResourceTypesGetSignal(OAI_v2_scim_2_0_ResourceTypes_get_200_response summary);
    void v2Scim20ResourceTypesNameGetSignal(OAIScim_resource_type summary);
    void v2Scim20SchemasGetSignal(OAI_v2_scim_2_0_Schemas_get_200_response summary);
    void v2Scim20SchemasIdGetSignal(OAIScim_schema summary);
    void v2Scim20ServiceProviderConfigGetSignal(OAIScim_service_provider_config summary);
    void v2Scim20UsersGetSignal(OAI_v2_scim_2_0_Users_get_200_response summary);
    void v2Scim20UsersIdGetSignal(OAIScim_user summary);
    void v2Scim20UsersIdPutSignal(OAIScim_user summary);
    void v2Scim20UsersPostSignal(OAIScim_user summary);


    void v2Scim20ResourceTypesGetSignalFull(OAIHttpRequestWorker *worker, OAI_v2_scim_2_0_ResourceTypes_get_200_response summary);
    void v2Scim20ResourceTypesNameGetSignalFull(OAIHttpRequestWorker *worker, OAIScim_resource_type summary);
    void v2Scim20SchemasGetSignalFull(OAIHttpRequestWorker *worker, OAI_v2_scim_2_0_Schemas_get_200_response summary);
    void v2Scim20SchemasIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScim_schema summary);
    void v2Scim20ServiceProviderConfigGetSignalFull(OAIHttpRequestWorker *worker, OAIScim_service_provider_config summary);
    void v2Scim20UsersGetSignalFull(OAIHttpRequestWorker *worker, OAI_v2_scim_2_0_Users_get_200_response summary);
    void v2Scim20UsersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScim_user summary);
    void v2Scim20UsersIdPutSignalFull(OAIHttpRequestWorker *worker, OAIScim_user summary);
    void v2Scim20UsersPostSignalFull(OAIHttpRequestWorker *worker, OAIScim_user summary);

    Q_DECL_DEPRECATED_X("Use v2Scim20ResourceTypesGetSignalError() instead")
    void v2Scim20ResourceTypesGetSignalE(OAI_v2_scim_2_0_ResourceTypes_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20ResourceTypesGetSignalError(OAI_v2_scim_2_0_ResourceTypes_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20ResourceTypesNameGetSignalError() instead")
    void v2Scim20ResourceTypesNameGetSignalE(OAIScim_resource_type summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20ResourceTypesNameGetSignalError(OAIScim_resource_type summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20SchemasGetSignalError() instead")
    void v2Scim20SchemasGetSignalE(OAI_v2_scim_2_0_Schemas_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20SchemasGetSignalError(OAI_v2_scim_2_0_Schemas_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20SchemasIdGetSignalError() instead")
    void v2Scim20SchemasIdGetSignalE(OAIScim_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20SchemasIdGetSignalError(OAIScim_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20ServiceProviderConfigGetSignalError() instead")
    void v2Scim20ServiceProviderConfigGetSignalE(OAIScim_service_provider_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20ServiceProviderConfigGetSignalError(OAIScim_service_provider_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersGetSignalError() instead")
    void v2Scim20UsersGetSignalE(OAI_v2_scim_2_0_Users_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersGetSignalError(OAI_v2_scim_2_0_Users_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersIdGetSignalError() instead")
    void v2Scim20UsersIdGetSignalE(OAIScim_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersIdGetSignalError(OAIScim_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersIdPutSignalError() instead")
    void v2Scim20UsersIdPutSignalE(OAIScim_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersIdPutSignalError(OAIScim_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersPostSignalError() instead")
    void v2Scim20UsersPostSignalE(OAIScim_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersPostSignalError(OAIScim_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2Scim20ResourceTypesGetSignalErrorFull() instead")
    void v2Scim20ResourceTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20ResourceTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20ResourceTypesNameGetSignalErrorFull() instead")
    void v2Scim20ResourceTypesNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20ResourceTypesNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20SchemasGetSignalErrorFull() instead")
    void v2Scim20SchemasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20SchemasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20SchemasIdGetSignalErrorFull() instead")
    void v2Scim20SchemasIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20SchemasIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20ServiceProviderConfigGetSignalErrorFull() instead")
    void v2Scim20ServiceProviderConfigGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20ServiceProviderConfigGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersGetSignalErrorFull() instead")
    void v2Scim20UsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersIdGetSignalErrorFull() instead")
    void v2Scim20UsersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersIdPutSignalErrorFull() instead")
    void v2Scim20UsersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Scim20UsersPostSignalErrorFull() instead")
    void v2Scim20UsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Scim20UsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
