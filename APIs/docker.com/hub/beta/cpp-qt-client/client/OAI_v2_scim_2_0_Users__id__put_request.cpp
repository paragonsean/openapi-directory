/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_v2_scim_2_0_Users__id__put_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_v2_scim_2_0_Users__id__put_request::OAI_v2_scim_2_0_Users__id__put_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_v2_scim_2_0_Users__id__put_request::OAI_v2_scim_2_0_Users__id__put_request() {
    this->initializeModel();
}

OAI_v2_scim_2_0_Users__id__put_request::~OAI_v2_scim_2_0_Users__id__put_request() {}

void OAI_v2_scim_2_0_Users__id__put_request::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;
}

void OAI_v2_scim_2_0_Users__id__put_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_v2_scim_2_0_Users__id__put_request::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;
}

QString OAI_v2_scim_2_0_Users__id__put_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_v2_scim_2_0_Users__id__put_request::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    return obj;
}

bool OAI_v2_scim_2_0_Users__id__put_request::isEnabled() const {
    return m_enabled;
}
void OAI_v2_scim_2_0_Users__id__put_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAI_v2_scim_2_0_Users__id__put_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAI_v2_scim_2_0_Users__id__put_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAI_v2_scim_2_0_Users__id__put_request_name OAI_v2_scim_2_0_Users__id__put_request::getName() const {
    return m_name;
}
void OAI_v2_scim_2_0_Users__id__put_request::setName(const OAI_v2_scim_2_0_Users__id__put_request_name &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_v2_scim_2_0_Users__id__put_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_v2_scim_2_0_Users__id__put_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAI_v2_scim_2_0_Users__id__put_request::getSchemas() const {
    return m_schemas;
}
void OAI_v2_scim_2_0_Users__id__put_request::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAI_v2_scim_2_0_Users__id__put_request::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAI_v2_scim_2_0_Users__id__put_request::is_schemas_Valid() const{
    return m_schemas_isValid;
}

bool OAI_v2_scim_2_0_Users__id__put_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_v2_scim_2_0_Users__id__put_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schemas_isValid && true;
}

} // namespace OpenAPI
