/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayer::OAILayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayer::OAILayer() {
    this->initializeModel();
}

OAILayer::~OAILayer() {}

void OAILayer::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_instruction_isSet = false;
    m_instruction_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAILayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayer::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_instruction_isValid = ::OpenAPI::fromJsonValue(m_instruction, json[QString("instruction")]);
    m_instruction_isSet = !json[QString("instruction")].isNull() && m_instruction_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAILayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayer::asJsonObject() const {
    QJsonObject obj;
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_instruction_isSet) {
        obj.insert(QString("instruction"), ::OpenAPI::toJsonValue(m_instruction));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAILayer::getDigest() const {
    return m_digest;
}
void OAILayer::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAILayer::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAILayer::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAILayer::getInstruction() const {
    return m_instruction;
}
void OAILayer::setInstruction(const QString &instruction) {
    m_instruction = instruction;
    m_instruction_isSet = true;
}

bool OAILayer::is_instruction_Set() const{
    return m_instruction_isSet;
}

bool OAILayer::is_instruction_Valid() const{
    return m_instruction_isValid;
}

qint32 OAILayer::getSize() const {
    return m_size;
}
void OAILayer::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILayer::is_size_Set() const{
    return m_size_isSet;
}

bool OAILayer::is_size_Valid() const{
    return m_size_isValid;
}

bool OAILayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
