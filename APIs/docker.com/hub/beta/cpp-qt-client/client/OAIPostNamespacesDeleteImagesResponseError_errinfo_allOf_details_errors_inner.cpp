/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner() {
    this->initializeModel();
}

OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::~OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner() {}

void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

QString OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::getDigest() const {
    return m_digest;
}
void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::getError() const {
    return m_error;
}
void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::getRepository() const {
    return m_repository;
}
void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
