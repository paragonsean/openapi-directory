/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_v2_scim_2_0_Users_get_200_response.h
 *
 * 
 */

#ifndef OAI_v2_scim_2_0_Users_get_200_response_H
#define OAI_v2_scim_2_0_Users_get_200_response_H

#include <QJsonObject>

#include "OAIScim_user.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScim_user;

class OAI_v2_scim_2_0_Users_get_200_response : public OAIObject {
public:
    OAI_v2_scim_2_0_Users_get_200_response();
    OAI_v2_scim_2_0_Users_get_200_response(QString json);
    ~OAI_v2_scim_2_0_Users_get_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getItemsPerPage() const;
    void setItemsPerPage(const qint32 &items_per_page);
    bool is_items_per_page_Set() const;
    bool is_items_per_page_Valid() const;

    QList<OAIScim_user> getResources() const;
    void setResources(const QList<OAIScim_user> &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    QList<QString> getSchemas() const;
    void setSchemas(const QList<QString> &schemas);
    bool is_schemas_Set() const;
    bool is_schemas_Valid() const;

    qint32 getStartIndex() const;
    void setStartIndex(const qint32 &start_index);
    bool is_start_index_Set() const;
    bool is_start_index_Valid() const;

    qint32 getTotalResults() const;
    void setTotalResults(const qint32 &total_results);
    bool is_total_results_Set() const;
    bool is_total_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_items_per_page;
    bool m_items_per_page_isSet;
    bool m_items_per_page_isValid;

    QList<OAIScim_user> m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    QList<QString> m_schemas;
    bool m_schemas_isSet;
    bool m_schemas_isValid;

    qint32 m_start_index;
    bool m_start_index_isSet;
    bool m_start_index_isValid;

    qint32 m_total_results;
    bool m_total_results_isSet;
    bool m_total_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_v2_scim_2_0_Users_get_200_response)

#endif // OAI_v2_scim_2_0_Users_get_200_response_H
