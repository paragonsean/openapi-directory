/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccessTokensApi_H
#define OAI_OAIAccessTokensApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessToken.h"
#include "OAICreateAccessTokenRequest.h"
#include "OAIError.h"
#include "OAIGetAccessTokensResponse.h"
#include "OAIPatchAccessTokenRequest.h"
#include "OAIValueError.h"
#include "OAI_v2_access_tokens__uuid__get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccessTokensApi : public QObject {
    Q_OBJECT

public:
    OAIAccessTokensApi(const int timeOut = 0);
    ~OAIAccessTokensApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page double [optional]
    * @param[in]  page_size double [optional]
    */
    virtual void v2AccessTokensGet(const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page_size = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  oai_create_access_token_request OAICreateAccessTokenRequest [required]
    */
    virtual void v2AccessTokensPost(const OAICreateAccessTokenRequest &oai_create_access_token_request);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void v2AccessTokensUuidDelete(const QString &uuid);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void v2AccessTokensUuidGet(const QString &uuid);

    /**
    * @param[in]  uuid QString [required]
    * @param[in]  oai_patch_access_token_request OAIPatchAccessTokenRequest [required]
    */
    virtual void v2AccessTokensUuidPatch(const QString &uuid, const OAIPatchAccessTokenRequest &oai_patch_access_token_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2AccessTokensGetCallback(OAIHttpRequestWorker *worker);
    void v2AccessTokensPostCallback(OAIHttpRequestWorker *worker);
    void v2AccessTokensUuidDeleteCallback(OAIHttpRequestWorker *worker);
    void v2AccessTokensUuidGetCallback(OAIHttpRequestWorker *worker);
    void v2AccessTokensUuidPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2AccessTokensGetSignal(OAIGetAccessTokensResponse summary);
    void v2AccessTokensPostSignal(OAIAccessToken summary);
    void v2AccessTokensUuidDeleteSignal();
    void v2AccessTokensUuidGetSignal(OAI_v2_access_tokens__uuid__get_200_response summary);
    void v2AccessTokensUuidPatchSignal(OAIAccessToken summary);


    void v2AccessTokensGetSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessTokensResponse summary);
    void v2AccessTokensPostSignalFull(OAIHttpRequestWorker *worker, OAIAccessToken summary);
    void v2AccessTokensUuidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v2AccessTokensUuidGetSignalFull(OAIHttpRequestWorker *worker, OAI_v2_access_tokens__uuid__get_200_response summary);
    void v2AccessTokensUuidPatchSignalFull(OAIHttpRequestWorker *worker, OAIAccessToken summary);

    Q_DECL_DEPRECATED_X("Use v2AccessTokensGetSignalError() instead")
    void v2AccessTokensGetSignalE(OAIGetAccessTokensResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensGetSignalError(OAIGetAccessTokensResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensPostSignalError() instead")
    void v2AccessTokensPostSignalE(OAIAccessToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensPostSignalError(OAIAccessToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensUuidDeleteSignalError() instead")
    void v2AccessTokensUuidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensUuidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensUuidGetSignalError() instead")
    void v2AccessTokensUuidGetSignalE(OAI_v2_access_tokens__uuid__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensUuidGetSignalError(OAI_v2_access_tokens__uuid__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensUuidPatchSignalError() instead")
    void v2AccessTokensUuidPatchSignalE(OAIAccessToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensUuidPatchSignalError(OAIAccessToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2AccessTokensGetSignalErrorFull() instead")
    void v2AccessTokensGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensPostSignalErrorFull() instead")
    void v2AccessTokensPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensUuidDeleteSignalErrorFull() instead")
    void v2AccessTokensUuidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensUuidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensUuidGetSignalErrorFull() instead")
    void v2AccessTokensUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccessTokensUuidPatchSignalErrorFull() instead")
    void v2AccessTokensUuidPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccessTokensUuidPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
