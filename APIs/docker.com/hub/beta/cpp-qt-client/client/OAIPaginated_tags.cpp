/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaginated_tags.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaginated_tags::OAIPaginated_tags(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaginated_tags::OAIPaginated_tags() {
    this->initializeModel();
}

OAIPaginated_tags::~OAIPaginated_tags() {}

void OAIPaginated_tags::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIPaginated_tags::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaginated_tags::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIPaginated_tags::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaginated_tags::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

qint32 OAIPaginated_tags::getCount() const {
    return m_count;
}
void OAIPaginated_tags::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIPaginated_tags::is_count_Set() const{
    return m_count_isSet;
}

bool OAIPaginated_tags::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIPaginated_tags::getNext() const {
    return m_next;
}
void OAIPaginated_tags::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIPaginated_tags::is_next_Set() const{
    return m_next_isSet;
}

bool OAIPaginated_tags::is_next_Valid() const{
    return m_next_isValid;
}

QString OAIPaginated_tags::getPrevious() const {
    return m_previous;
}
void OAIPaginated_tags::setPrevious(const QString &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIPaginated_tags::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIPaginated_tags::is_previous_Valid() const{
    return m_previous_isValid;
}

QList<OAITag> OAIPaginated_tags::getResults() const {
    return m_results;
}
void OAIPaginated_tags::setResults(const QList<OAITag> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPaginated_tags::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPaginated_tags::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIPaginated_tags::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaginated_tags::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
