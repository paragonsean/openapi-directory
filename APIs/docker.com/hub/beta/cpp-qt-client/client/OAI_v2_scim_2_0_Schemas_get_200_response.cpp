/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_v2_scim_2_0_Schemas_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_v2_scim_2_0_Schemas_get_200_response::OAI_v2_scim_2_0_Schemas_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_v2_scim_2_0_Schemas_get_200_response::OAI_v2_scim_2_0_Schemas_get_200_response() {
    this->initializeModel();
}

OAI_v2_scim_2_0_Schemas_get_200_response::~OAI_v2_scim_2_0_Schemas_get_200_response() {}

void OAI_v2_scim_2_0_Schemas_get_200_response::initializeModel() {

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAI_v2_scim_2_0_Schemas_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_v2_scim_2_0_Schemas_get_200_response::fromJsonObject(QJsonObject json) {

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAI_v2_scim_2_0_Schemas_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_v2_scim_2_0_Schemas_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QList<OAIScim_schema> OAI_v2_scim_2_0_Schemas_get_200_response::getResources() const {
    return m_resources;
}
void OAI_v2_scim_2_0_Schemas_get_200_response::setResources(const QList<OAIScim_schema> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<QString> OAI_v2_scim_2_0_Schemas_get_200_response::getSchemas() const {
    return m_schemas;
}
void OAI_v2_scim_2_0_Schemas_get_200_response::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::is_schemas_Valid() const{
    return m_schemas_isValid;
}

qint32 OAI_v2_scim_2_0_Schemas_get_200_response::getTotalResults() const {
    return m_total_results;
}
void OAI_v2_scim_2_0_Schemas_get_200_response::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_v2_scim_2_0_Schemas_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
