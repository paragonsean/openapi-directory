/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNamespaceRepositoryImagesResponse_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNamespaceRepositoryImagesResponse_results_inner::OAIGetNamespaceRepositoryImagesResponse_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNamespaceRepositoryImagesResponse_results_inner::OAIGetNamespaceRepositoryImagesResponse_results_inner() {
    this->initializeModel();
}

OAIGetNamespaceRepositoryImagesResponse_results_inner::~OAIGetNamespaceRepositoryImagesResponse_results_inner() {}

void OAIGetNamespaceRepositoryImagesResponse_results_inner::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_last_pulled_isSet = false;
    m_last_pulled_isValid = false;

    m_last_pushed_isSet = false;
    m_last_pushed_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetNamespaceRepositoryImagesResponse_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNamespaceRepositoryImagesResponse_results_inner::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_last_pulled_isValid = ::OpenAPI::fromJsonValue(m_last_pulled, json[QString("last_pulled")]);
    m_last_pulled_isSet = !json[QString("last_pulled")].isNull() && m_last_pulled_isValid;

    m_last_pushed_isValid = ::OpenAPI::fromJsonValue(m_last_pushed, json[QString("last_pushed")]);
    m_last_pushed_isSet = !json[QString("last_pushed")].isNull() && m_last_pushed_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNamespaceRepositoryImagesResponse_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_last_pulled_isSet) {
        obj.insert(QString("last_pulled"), ::OpenAPI::toJsonValue(m_last_pulled));
    }
    if (m_last_pushed_isSet) {
        obj.insert(QString("last_pushed"), ::OpenAPI::toJsonValue(m_last_pushed));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::getDigest() const {
    return m_digest;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::getLastPulled() const {
    return m_last_pulled;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setLastPulled(const QString &last_pulled) {
    m_last_pulled = last_pulled;
    m_last_pulled_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_last_pulled_Set() const{
    return m_last_pulled_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_last_pulled_Valid() const{
    return m_last_pulled_isValid;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::getLastPushed() const {
    return m_last_pushed;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setLastPushed(const QString &last_pushed) {
    m_last_pushed = last_pushed;
    m_last_pushed_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_last_pushed_Set() const{
    return m_last_pushed_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_last_pushed_Valid() const{
    return m_last_pushed_isValid;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::getRNamespace() const {
    return m_r_namespace;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::getRepository() const {
    return m_repository;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIGetNamespaceRepositoryImagesResponse_results_inner::getStatus() const {
    return m_status;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner> OAIGetNamespaceRepositoryImagesResponse_results_inner::getTags() const {
    return m_tags;
}
void OAIGetNamespaceRepositoryImagesResponse_results_inner::setTags(const QList<OAIGetNamespaceRepositoryImagesResponse_results_inner_tags_inner> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_pulled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_pushed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNamespaceRepositoryImagesResponse_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
