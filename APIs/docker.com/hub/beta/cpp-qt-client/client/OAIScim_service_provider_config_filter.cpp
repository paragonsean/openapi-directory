/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_service_provider_config_filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_service_provider_config_filter::OAIScim_service_provider_config_filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_service_provider_config_filter::OAIScim_service_provider_config_filter() {
    this->initializeModel();
}

OAIScim_service_provider_config_filter::~OAIScim_service_provider_config_filter() {}

void OAIScim_service_provider_config_filter::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_supported_isSet = false;
    m_supported_isValid = false;
}

void OAIScim_service_provider_config_filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_service_provider_config_filter::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_supported_isValid = ::OpenAPI::fromJsonValue(m_supported, json[QString("supported")]);
    m_supported_isSet = !json[QString("supported")].isNull() && m_supported_isValid;
}

QString OAIScim_service_provider_config_filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_service_provider_config_filter::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_supported_isSet) {
        obj.insert(QString("supported"), ::OpenAPI::toJsonValue(m_supported));
    }
    return obj;
}

qint32 OAIScim_service_provider_config_filter::getMaxResults() const {
    return m_max_results;
}
void OAIScim_service_provider_config_filter::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIScim_service_provider_config_filter::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIScim_service_provider_config_filter::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIScim_service_provider_config_filter::isSupported() const {
    return m_supported;
}
void OAIScim_service_provider_config_filter::setSupported(const bool &supported) {
    m_supported = supported;
    m_supported_isSet = true;
}

bool OAIScim_service_provider_config_filter::is_supported_Set() const{
    return m_supported_isSet;
}

bool OAIScim_service_provider_config_filter::is_supported_Valid() const{
    return m_supported_isValid;
}

bool OAIScim_service_provider_config_filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_service_provider_config_filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
