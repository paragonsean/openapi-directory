/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorInfo::OAIErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorInfo::OAIErrorInfo() {
    this->initializeModel();
}

OAIErrorInfo::~OAIErrorInfo() {}

void OAIErrorInfo::initializeModel() {

    m_api_call_docker_id_isSet = false;
    m_api_call_docker_id_isValid = false;

    m_api_call_name_isSet = false;
    m_api_call_name_isValid = false;

    m_api_call_start_isSet = false;
    m_api_call_start_isValid = false;

    m_api_call_txnid_isSet = false;
    m_api_call_txnid_isValid = false;
}

void OAIErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorInfo::fromJsonObject(QJsonObject json) {

    m_api_call_docker_id_isValid = ::OpenAPI::fromJsonValue(m_api_call_docker_id, json[QString("api_call_docker_id")]);
    m_api_call_docker_id_isSet = !json[QString("api_call_docker_id")].isNull() && m_api_call_docker_id_isValid;

    m_api_call_name_isValid = ::OpenAPI::fromJsonValue(m_api_call_name, json[QString("api_call_name")]);
    m_api_call_name_isSet = !json[QString("api_call_name")].isNull() && m_api_call_name_isValid;

    m_api_call_start_isValid = ::OpenAPI::fromJsonValue(m_api_call_start, json[QString("api_call_start")]);
    m_api_call_start_isSet = !json[QString("api_call_start")].isNull() && m_api_call_start_isValid;

    m_api_call_txnid_isValid = ::OpenAPI::fromJsonValue(m_api_call_txnid, json[QString("api_call_txnid")]);
    m_api_call_txnid_isSet = !json[QString("api_call_txnid")].isNull() && m_api_call_txnid_isValid;
}

QString OAIErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_api_call_docker_id_isSet) {
        obj.insert(QString("api_call_docker_id"), ::OpenAPI::toJsonValue(m_api_call_docker_id));
    }
    if (m_api_call_name_isSet) {
        obj.insert(QString("api_call_name"), ::OpenAPI::toJsonValue(m_api_call_name));
    }
    if (m_api_call_start_isSet) {
        obj.insert(QString("api_call_start"), ::OpenAPI::toJsonValue(m_api_call_start));
    }
    if (m_api_call_txnid_isSet) {
        obj.insert(QString("api_call_txnid"), ::OpenAPI::toJsonValue(m_api_call_txnid));
    }
    return obj;
}

QString OAIErrorInfo::getApiCallDockerId() const {
    return m_api_call_docker_id;
}
void OAIErrorInfo::setApiCallDockerId(const QString &api_call_docker_id) {
    m_api_call_docker_id = api_call_docker_id;
    m_api_call_docker_id_isSet = true;
}

bool OAIErrorInfo::is_api_call_docker_id_Set() const{
    return m_api_call_docker_id_isSet;
}

bool OAIErrorInfo::is_api_call_docker_id_Valid() const{
    return m_api_call_docker_id_isValid;
}

QString OAIErrorInfo::getApiCallName() const {
    return m_api_call_name;
}
void OAIErrorInfo::setApiCallName(const QString &api_call_name) {
    m_api_call_name = api_call_name;
    m_api_call_name_isSet = true;
}

bool OAIErrorInfo::is_api_call_name_Set() const{
    return m_api_call_name_isSet;
}

bool OAIErrorInfo::is_api_call_name_Valid() const{
    return m_api_call_name_isValid;
}

QString OAIErrorInfo::getApiCallStart() const {
    return m_api_call_start;
}
void OAIErrorInfo::setApiCallStart(const QString &api_call_start) {
    m_api_call_start = api_call_start;
    m_api_call_start_isSet = true;
}

bool OAIErrorInfo::is_api_call_start_Set() const{
    return m_api_call_start_isSet;
}

bool OAIErrorInfo::is_api_call_start_Valid() const{
    return m_api_call_start_isValid;
}

QString OAIErrorInfo::getApiCallTxnid() const {
    return m_api_call_txnid;
}
void OAIErrorInfo::setApiCallTxnid(const QString &api_call_txnid) {
    m_api_call_txnid = api_call_txnid;
    m_api_call_txnid_isSet = true;
}

bool OAIErrorInfo::is_api_call_txnid_Set() const{
    return m_api_call_txnid_isSet;
}

bool OAIErrorInfo::is_api_call_txnid_Valid() const{
    return m_api_call_txnid_isValid;
}

bool OAIErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_call_docker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_call_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_call_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_call_txnid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
