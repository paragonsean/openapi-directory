/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_resource_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_resource_type::OAIScim_resource_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_resource_type::OAIScim_resource_type() {
    this->initializeModel();
}

OAIScim_resource_type::~OAIScim_resource_type() {}

void OAIScim_resource_type::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;
}

void OAIScim_resource_type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_resource_type::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;
}

QString OAIScim_resource_type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_resource_type::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    return obj;
}

QString OAIScim_resource_type::getDescription() const {
    return m_description;
}
void OAIScim_resource_type::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScim_resource_type::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScim_resource_type::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIScim_resource_type::getEndpoint() const {
    return m_endpoint;
}
void OAIScim_resource_type::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIScim_resource_type::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIScim_resource_type::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIScim_resource_type::getId() const {
    return m_id;
}
void OAIScim_resource_type::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScim_resource_type::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScim_resource_type::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScim_resource_type::getName() const {
    return m_name;
}
void OAIScim_resource_type::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScim_resource_type::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScim_resource_type::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScim_resource_type::getSchema() const {
    return m_schema;
}
void OAIScim_resource_type::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIScim_resource_type::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIScim_resource_type::is_schema_Valid() const{
    return m_schema_isValid;
}

QList<QString> OAIScim_resource_type::getSchemas() const {
    return m_schemas;
}
void OAIScim_resource_type::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIScim_resource_type::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIScim_resource_type::is_schemas_Valid() const{
    return m_schemas_isValid;
}

bool OAIScim_resource_type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_resource_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
