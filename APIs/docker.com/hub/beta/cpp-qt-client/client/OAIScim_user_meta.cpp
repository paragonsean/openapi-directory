/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_user_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_user_meta::OAIScim_user_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_user_meta::OAIScim_user_meta() {
    this->initializeModel();
}

OAIScim_user_meta::~OAIScim_user_meta() {}

void OAIScim_user_meta::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIScim_user_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_user_meta::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;
}

QString OAIScim_user_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_user_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QString OAIScim_user_meta::getCreated() const {
    return m_created;
}
void OAIScim_user_meta::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIScim_user_meta::is_created_Set() const{
    return m_created_isSet;
}

bool OAIScim_user_meta::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIScim_user_meta::getLastModified() const {
    return m_last_modified;
}
void OAIScim_user_meta::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIScim_user_meta::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIScim_user_meta::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIScim_user_meta::getLocation() const {
    return m_location;
}
void OAIScim_user_meta::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIScim_user_meta::is_location_Set() const{
    return m_location_isSet;
}

bool OAIScim_user_meta::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIScim_user_meta::getResourceType() const {
    return m_resource_type;
}
void OAIScim_user_meta::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIScim_user_meta::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIScim_user_meta::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIScim_user_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_user_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
