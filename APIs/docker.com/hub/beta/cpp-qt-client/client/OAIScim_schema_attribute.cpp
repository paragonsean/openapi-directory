/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_schema_attribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_schema_attribute::OAIScim_schema_attribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_schema_attribute::OAIScim_schema_attribute() {
    this->initializeModel();
}

OAIScim_schema_attribute::~OAIScim_schema_attribute() {}

void OAIScim_schema_attribute::initializeModel() {

    m_case_exact_isSet = false;
    m_case_exact_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_multi_valued_isSet = false;
    m_multi_valued_isValid = false;

    m_mutability_isSet = false;
    m_mutability_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_returned_isSet = false;
    m_returned_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uniqueness_isSet = false;
    m_uniqueness_isValid = false;
}

void OAIScim_schema_attribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_schema_attribute::fromJsonObject(QJsonObject json) {

    m_case_exact_isValid = ::OpenAPI::fromJsonValue(m_case_exact, json[QString("caseExact")]);
    m_case_exact_isSet = !json[QString("caseExact")].isNull() && m_case_exact_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_multi_valued_isValid = ::OpenAPI::fromJsonValue(m_multi_valued, json[QString("multiValued")]);
    m_multi_valued_isSet = !json[QString("multiValued")].isNull() && m_multi_valued_isValid;

    m_mutability_isValid = ::OpenAPI::fromJsonValue(m_mutability, json[QString("mutability")]);
    m_mutability_isSet = !json[QString("mutability")].isNull() && m_mutability_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_returned_isValid = ::OpenAPI::fromJsonValue(m_returned, json[QString("returned")]);
    m_returned_isSet = !json[QString("returned")].isNull() && m_returned_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uniqueness_isValid = ::OpenAPI::fromJsonValue(m_uniqueness, json[QString("uniqueness")]);
    m_uniqueness_isSet = !json[QString("uniqueness")].isNull() && m_uniqueness_isValid;
}

QString OAIScim_schema_attribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_schema_attribute::asJsonObject() const {
    QJsonObject obj;
    if (m_case_exact_isSet) {
        obj.insert(QString("caseExact"), ::OpenAPI::toJsonValue(m_case_exact));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_multi_valued_isSet) {
        obj.insert(QString("multiValued"), ::OpenAPI::toJsonValue(m_multi_valued));
    }
    if (m_mutability_isSet) {
        obj.insert(QString("mutability"), ::OpenAPI::toJsonValue(m_mutability));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_returned_isSet) {
        obj.insert(QString("returned"), ::OpenAPI::toJsonValue(m_returned));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uniqueness_isSet) {
        obj.insert(QString("uniqueness"), ::OpenAPI::toJsonValue(m_uniqueness));
    }
    return obj;
}

bool OAIScim_schema_attribute::isCaseExact() const {
    return m_case_exact;
}
void OAIScim_schema_attribute::setCaseExact(const bool &case_exact) {
    m_case_exact = case_exact;
    m_case_exact_isSet = true;
}

bool OAIScim_schema_attribute::is_case_exact_Set() const{
    return m_case_exact_isSet;
}

bool OAIScim_schema_attribute::is_case_exact_Valid() const{
    return m_case_exact_isValid;
}

QString OAIScim_schema_attribute::getDescription() const {
    return m_description;
}
void OAIScim_schema_attribute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScim_schema_attribute::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScim_schema_attribute::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIScim_schema_attribute::isMultiValued() const {
    return m_multi_valued;
}
void OAIScim_schema_attribute::setMultiValued(const bool &multi_valued) {
    m_multi_valued = multi_valued;
    m_multi_valued_isSet = true;
}

bool OAIScim_schema_attribute::is_multi_valued_Set() const{
    return m_multi_valued_isSet;
}

bool OAIScim_schema_attribute::is_multi_valued_Valid() const{
    return m_multi_valued_isValid;
}

QString OAIScim_schema_attribute::getMutability() const {
    return m_mutability;
}
void OAIScim_schema_attribute::setMutability(const QString &mutability) {
    m_mutability = mutability;
    m_mutability_isSet = true;
}

bool OAIScim_schema_attribute::is_mutability_Set() const{
    return m_mutability_isSet;
}

bool OAIScim_schema_attribute::is_mutability_Valid() const{
    return m_mutability_isValid;
}

QString OAIScim_schema_attribute::getName() const {
    return m_name;
}
void OAIScim_schema_attribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScim_schema_attribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScim_schema_attribute::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIScim_schema_attribute::isRequired() const {
    return m_required;
}
void OAIScim_schema_attribute::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIScim_schema_attribute::is_required_Set() const{
    return m_required_isSet;
}

bool OAIScim_schema_attribute::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIScim_schema_attribute::getReturned() const {
    return m_returned;
}
void OAIScim_schema_attribute::setReturned(const QString &returned) {
    m_returned = returned;
    m_returned_isSet = true;
}

bool OAIScim_schema_attribute::is_returned_Set() const{
    return m_returned_isSet;
}

bool OAIScim_schema_attribute::is_returned_Valid() const{
    return m_returned_isValid;
}

QString OAIScim_schema_attribute::getType() const {
    return m_type;
}
void OAIScim_schema_attribute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScim_schema_attribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScim_schema_attribute::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIScim_schema_attribute::getUniqueness() const {
    return m_uniqueness;
}
void OAIScim_schema_attribute::setUniqueness(const QString &uniqueness) {
    m_uniqueness = uniqueness;
    m_uniqueness_isSet = true;
}

bool OAIScim_schema_attribute::is_uniqueness_Set() const{
    return m_uniqueness_isSet;
}

bool OAIScim_schema_attribute::is_uniqueness_Valid() const{
    return m_uniqueness_isValid;
}

bool OAIScim_schema_attribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_valued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uniqueness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_schema_attribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
