/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIGetNamespaceRepositoryImagesResponse.h"
#include "OAIGetNamespaceRepositoryImagesSummaryResponse.h"
#include "OAIGetNamespaceRepositoryImagesTagsResponse.h"
#include "OAIPostNamespacesDeleteImagesRequest.h"
#include "OAIPostNamespacesDeleteImagesResponseError.h"
#include "OAIPostNamespacesDeleteImagesResponseSuccess.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  currently_tagged bool [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  active_from QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getNamespacesRepositoriesImages(const QString &r_namespace, const QString &repository, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &currently_tagged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &active_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  active_from QString [optional]
    */
    virtual void getNamespacesRepositoriesImagesSummary(const QString &r_namespace, const QString &repository, const ::OpenAPI::OptionalParam<QString> &active_from = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  digest QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getNamespacesRepositoriesImagesTags(const QString &r_namespace, const QString &repository, const QString &digest, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  r_namespace QString [required]
    * @param[in]  oai_post_namespaces_delete_images_request OAIPostNamespacesDeleteImagesRequest [required]
    */
    virtual void postNamespacesDeleteImages(const QString &r_namespace, const OAIPostNamespacesDeleteImagesRequest &oai_post_namespaces_delete_images_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getNamespacesRepositoriesImagesCallback(OAIHttpRequestWorker *worker);
    void getNamespacesRepositoriesImagesSummaryCallback(OAIHttpRequestWorker *worker);
    void getNamespacesRepositoriesImagesTagsCallback(OAIHttpRequestWorker *worker);
    void postNamespacesDeleteImagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getNamespacesRepositoriesImagesSignal(OAIGetNamespaceRepositoryImagesResponse summary);
    void getNamespacesRepositoriesImagesSummarySignal(OAIGetNamespaceRepositoryImagesSummaryResponse summary);
    void getNamespacesRepositoriesImagesTagsSignal(OAIGetNamespaceRepositoryImagesTagsResponse summary);
    void postNamespacesDeleteImagesSignal(OAIPostNamespacesDeleteImagesResponseSuccess summary);


    void getNamespacesRepositoriesImagesSignalFull(OAIHttpRequestWorker *worker, OAIGetNamespaceRepositoryImagesResponse summary);
    void getNamespacesRepositoriesImagesSummarySignalFull(OAIHttpRequestWorker *worker, OAIGetNamespaceRepositoryImagesSummaryResponse summary);
    void getNamespacesRepositoriesImagesTagsSignalFull(OAIHttpRequestWorker *worker, OAIGetNamespaceRepositoryImagesTagsResponse summary);
    void postNamespacesDeleteImagesSignalFull(OAIHttpRequestWorker *worker, OAIPostNamespacesDeleteImagesResponseSuccess summary);

    Q_DECL_DEPRECATED_X("Use getNamespacesRepositoriesImagesSignalError() instead")
    void getNamespacesRepositoriesImagesSignalE(OAIGetNamespaceRepositoryImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacesRepositoriesImagesSignalError(OAIGetNamespaceRepositoryImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacesRepositoriesImagesSummarySignalError() instead")
    void getNamespacesRepositoriesImagesSummarySignalE(OAIGetNamespaceRepositoryImagesSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacesRepositoriesImagesSummarySignalError(OAIGetNamespaceRepositoryImagesSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacesRepositoriesImagesTagsSignalError() instead")
    void getNamespacesRepositoriesImagesTagsSignalE(OAIGetNamespaceRepositoryImagesTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacesRepositoriesImagesTagsSignalError(OAIGetNamespaceRepositoryImagesTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNamespacesDeleteImagesSignalError() instead")
    void postNamespacesDeleteImagesSignalE(OAIPostNamespacesDeleteImagesResponseSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNamespacesDeleteImagesSignalError(OAIPostNamespacesDeleteImagesResponseSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getNamespacesRepositoriesImagesSignalErrorFull() instead")
    void getNamespacesRepositoriesImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacesRepositoriesImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacesRepositoriesImagesSummarySignalErrorFull() instead")
    void getNamespacesRepositoriesImagesSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacesRepositoriesImagesSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamespacesRepositoriesImagesTagsSignalErrorFull() instead")
    void getNamespacesRepositoriesImagesTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamespacesRepositoriesImagesTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNamespacesDeleteImagesSignalErrorFull() instead")
    void postNamespacesDeleteImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNamespacesDeleteImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
