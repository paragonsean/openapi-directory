/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNamespaceRepositoryImagesSummaryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNamespaceRepositoryImagesSummaryResponse::OAIGetNamespaceRepositoryImagesSummaryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNamespaceRepositoryImagesSummaryResponse::OAIGetNamespaceRepositoryImagesSummaryResponse() {
    this->initializeModel();
}

OAIGetNamespaceRepositoryImagesSummaryResponse::~OAIGetNamespaceRepositoryImagesSummaryResponse() {}

void OAIGetNamespaceRepositoryImagesSummaryResponse::initializeModel() {

    m_active_from_isSet = false;
    m_active_from_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIGetNamespaceRepositoryImagesSummaryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNamespaceRepositoryImagesSummaryResponse::fromJsonObject(QJsonObject json) {

    m_active_from_isValid = ::OpenAPI::fromJsonValue(m_active_from, json[QString("active_from")]);
    m_active_from_isSet = !json[QString("active_from")].isNull() && m_active_from_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIGetNamespaceRepositoryImagesSummaryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNamespaceRepositoryImagesSummaryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_active_from_isSet) {
        obj.insert(QString("active_from"), ::OpenAPI::toJsonValue(m_active_from));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QString OAIGetNamespaceRepositoryImagesSummaryResponse::getActiveFrom() const {
    return m_active_from;
}
void OAIGetNamespaceRepositoryImagesSummaryResponse::setActiveFrom(const QString &active_from) {
    m_active_from = active_from;
    m_active_from_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse::is_active_from_Set() const{
    return m_active_from_isSet;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse::is_active_from_Valid() const{
    return m_active_from_isValid;
}

OAIGetNamespaceRepositoryImagesSummaryResponse_statistics OAIGetNamespaceRepositoryImagesSummaryResponse::getStatistics() const {
    return m_statistics;
}
void OAIGetNamespaceRepositoryImagesSummaryResponse::setStatistics(const OAIGetNamespaceRepositoryImagesSummaryResponse_statistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNamespaceRepositoryImagesSummaryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
