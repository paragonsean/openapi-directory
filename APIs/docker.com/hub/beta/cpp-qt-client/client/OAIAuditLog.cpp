/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLog::OAIAuditLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLog::OAIAuditLog() {
    this->initializeModel();
}

OAIAuditLog::~OAIAuditLog() {}

void OAIAuditLog::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_action_description_isSet = false;
    m_action_description_isValid = false;

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIAuditLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLog::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_action_description_isValid = ::OpenAPI::fromJsonValue(m_action_description, json[QString("action_description")]);
    m_action_description_isSet = !json[QString("action_description")].isNull() && m_action_description_isValid;

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIAuditLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLog::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_action_description_isSet) {
        obj.insert(QString("action_description"), ::OpenAPI::toJsonValue(m_action_description));
    }
    if (m_actor_isSet) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIAuditLog::getAccount() const {
    return m_account;
}
void OAIAuditLog::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIAuditLog::is_account_Set() const{
    return m_account_isSet;
}

bool OAIAuditLog::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIAuditLog::getAction() const {
    return m_action;
}
void OAIAuditLog::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAuditLog::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAuditLog::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIAuditLog::getActionDescription() const {
    return m_action_description;
}
void OAIAuditLog::setActionDescription(const QString &action_description) {
    m_action_description = action_description;
    m_action_description_isSet = true;
}

bool OAIAuditLog::is_action_description_Set() const{
    return m_action_description_isSet;
}

bool OAIAuditLog::is_action_description_Valid() const{
    return m_action_description_isValid;
}

QString OAIAuditLog::getActor() const {
    return m_actor;
}
void OAIAuditLog::setActor(const QString &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIAuditLog::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIAuditLog::is_actor_Valid() const{
    return m_actor_isValid;
}

QMap<QString, QString> OAIAuditLog::getData() const {
    return m_data;
}
void OAIAuditLog::setData(const QMap<QString, QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAuditLog::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAuditLog::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIAuditLog::getName() const {
    return m_name;
}
void OAIAuditLog::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuditLog::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuditLog::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIAuditLog::getTimestamp() const {
    return m_timestamp;
}
void OAIAuditLog::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAuditLog::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAuditLog::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIAuditLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
