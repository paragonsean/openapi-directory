/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details() {
    this->initializeModel();
}

OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::~OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details() {}

void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner> OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::getErrors() const {
    return m_errors;
}
void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::setErrors(const QList<OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_warnings_inner> OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::getWarnings() const {
    return m_warnings;
}
void OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::setWarnings(const QList<OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details_warnings_inner> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostNamespacesDeleteImagesResponseError_errinfo_allOf_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
