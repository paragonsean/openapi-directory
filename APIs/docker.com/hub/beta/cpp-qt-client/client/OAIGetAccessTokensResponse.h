/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAccessTokensResponse.h
 *
 * 
 */

#ifndef OAIGetAccessTokensResponse_H
#define OAIGetAccessTokensResponse_H

#include <QJsonObject>

#include "OAI_v2_access_tokens__uuid__get_200_response.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAI_v2_access_tokens__uuid__get_200_response;

class OAIGetAccessTokensResponse : public OAIObject {
public:
    OAIGetAccessTokensResponse();
    OAIGetAccessTokensResponse(QString json);
    ~OAIGetAccessTokensResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getActiveCount() const;
    void setActiveCount(const double &active_count);
    bool is_active_count_Set() const;
    bool is_active_count_Valid() const;

    double getCount() const;
    void setCount(const double &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QString getNext() const;
    void setNext(const QString &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    QString getPrevious() const;
    void setPrevious(const QString &previous);
    bool is_previous_Set() const;
    bool is_previous_Valid() const;

    QList<OAI_v2_access_tokens__uuid__get_200_response> getResults() const;
    void setResults(const QList<OAI_v2_access_tokens__uuid__get_200_response> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_active_count;
    bool m_active_count_isSet;
    bool m_active_count_isValid;

    double m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QString m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    QString m_previous;
    bool m_previous_isSet;
    bool m_previous_isValid;

    QList<OAI_v2_access_tokens__uuid__get_200_response> m_results;
    bool m_results_isSet;
    bool m_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAccessTokensResponse)

#endif // OAIGetAccessTokensResponse_H
