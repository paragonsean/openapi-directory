/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchAccessTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchAccessTokenRequest::OAIPatchAccessTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchAccessTokenRequest::OAIPatchAccessTokenRequest() {
    this->initializeModel();
}

OAIPatchAccessTokenRequest::~OAIPatchAccessTokenRequest() {}

void OAIPatchAccessTokenRequest::initializeModel() {

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_token_label_isSet = false;
    m_token_label_isValid = false;
}

void OAIPatchAccessTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchAccessTokenRequest::fromJsonObject(QJsonObject json) {

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_token_label_isValid = ::OpenAPI::fromJsonValue(m_token_label, json[QString("token_label")]);
    m_token_label_isSet = !json[QString("token_label")].isNull() && m_token_label_isValid;
}

QString OAIPatchAccessTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchAccessTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_token_label_isSet) {
        obj.insert(QString("token_label"), ::OpenAPI::toJsonValue(m_token_label));
    }
    return obj;
}

bool OAIPatchAccessTokenRequest::isIsActive() const {
    return m_is_active;
}
void OAIPatchAccessTokenRequest::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPatchAccessTokenRequest::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPatchAccessTokenRequest::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIPatchAccessTokenRequest::getTokenLabel() const {
    return m_token_label;
}
void OAIPatchAccessTokenRequest::setTokenLabel(const QString &token_label) {
    m_token_label = token_label;
    m_token_label_isSet = true;
}

bool OAIPatchAccessTokenRequest::is_token_label_Set() const{
    return m_token_label_isSet;
}

bool OAIPatchAccessTokenRequest::is_token_label_Valid() const{
    return m_token_label_isValid;
}

bool OAIPatchAccessTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchAccessTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
