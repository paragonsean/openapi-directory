/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_service_provider_config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_service_provider_config::OAIScim_service_provider_config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_service_provider_config::OAIScim_service_provider_config() {
    this->initializeModel();
}

OAIScim_service_provider_config::~OAIScim_service_provider_config() {}

void OAIScim_service_provider_config::initializeModel() {

    m_authentication_schemes_isSet = false;
    m_authentication_schemes_isValid = false;

    m_bulk_isSet = false;
    m_bulk_isValid = false;

    m_change_password_isSet = false;
    m_change_password_isValid = false;

    m_documentation_uri_isSet = false;
    m_documentation_uri_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_patch_isSet = false;
    m_patch_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAIScim_service_provider_config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_service_provider_config::fromJsonObject(QJsonObject json) {

    m_authentication_schemes_isValid = ::OpenAPI::fromJsonValue(m_authentication_schemes, json[QString("authenticationSchemes")]);
    m_authentication_schemes_isSet = !json[QString("authenticationSchemes")].isNull() && m_authentication_schemes_isValid;

    m_bulk_isValid = ::OpenAPI::fromJsonValue(m_bulk, json[QString("bulk")]);
    m_bulk_isSet = !json[QString("bulk")].isNull() && m_bulk_isValid;

    m_change_password_isValid = ::OpenAPI::fromJsonValue(m_change_password, json[QString("changePassword")]);
    m_change_password_isSet = !json[QString("changePassword")].isNull() && m_change_password_isValid;

    m_documentation_uri_isValid = ::OpenAPI::fromJsonValue(m_documentation_uri, json[QString("documentationUri")]);
    m_documentation_uri_isSet = !json[QString("documentationUri")].isNull() && m_documentation_uri_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_patch_isValid = ::OpenAPI::fromJsonValue(m_patch, json[QString("patch")]);
    m_patch_isSet = !json[QString("patch")].isNull() && m_patch_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAIScim_service_provider_config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_service_provider_config::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_schemes.isSet()) {
        obj.insert(QString("authenticationSchemes"), ::OpenAPI::toJsonValue(m_authentication_schemes));
    }
    if (m_bulk.isSet()) {
        obj.insert(QString("bulk"), ::OpenAPI::toJsonValue(m_bulk));
    }
    if (m_change_password.isSet()) {
        obj.insert(QString("changePassword"), ::OpenAPI::toJsonValue(m_change_password));
    }
    if (m_documentation_uri_isSet) {
        obj.insert(QString("documentationUri"), ::OpenAPI::toJsonValue(m_documentation_uri));
    }
    if (m_etag.isSet()) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_patch.isSet()) {
        obj.insert(QString("patch"), ::OpenAPI::toJsonValue(m_patch));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

OAIScim_service_provider_config_authenticationSchemes OAIScim_service_provider_config::getAuthenticationSchemes() const {
    return m_authentication_schemes;
}
void OAIScim_service_provider_config::setAuthenticationSchemes(const OAIScim_service_provider_config_authenticationSchemes &authentication_schemes) {
    m_authentication_schemes = authentication_schemes;
    m_authentication_schemes_isSet = true;
}

bool OAIScim_service_provider_config::is_authentication_schemes_Set() const{
    return m_authentication_schemes_isSet;
}

bool OAIScim_service_provider_config::is_authentication_schemes_Valid() const{
    return m_authentication_schemes_isValid;
}

OAIScim_service_provider_config_bulk OAIScim_service_provider_config::getBulk() const {
    return m_bulk;
}
void OAIScim_service_provider_config::setBulk(const OAIScim_service_provider_config_bulk &bulk) {
    m_bulk = bulk;
    m_bulk_isSet = true;
}

bool OAIScim_service_provider_config::is_bulk_Set() const{
    return m_bulk_isSet;
}

bool OAIScim_service_provider_config::is_bulk_Valid() const{
    return m_bulk_isValid;
}

OAIScim_service_provider_config_changePassword OAIScim_service_provider_config::getChangePassword() const {
    return m_change_password;
}
void OAIScim_service_provider_config::setChangePassword(const OAIScim_service_provider_config_changePassword &change_password) {
    m_change_password = change_password;
    m_change_password_isSet = true;
}

bool OAIScim_service_provider_config::is_change_password_Set() const{
    return m_change_password_isSet;
}

bool OAIScim_service_provider_config::is_change_password_Valid() const{
    return m_change_password_isValid;
}

QString OAIScim_service_provider_config::getDocumentationUri() const {
    return m_documentation_uri;
}
void OAIScim_service_provider_config::setDocumentationUri(const QString &documentation_uri) {
    m_documentation_uri = documentation_uri;
    m_documentation_uri_isSet = true;
}

bool OAIScim_service_provider_config::is_documentation_uri_Set() const{
    return m_documentation_uri_isSet;
}

bool OAIScim_service_provider_config::is_documentation_uri_Valid() const{
    return m_documentation_uri_isValid;
}

OAIScim_service_provider_config_changePassword OAIScim_service_provider_config::getEtag() const {
    return m_etag;
}
void OAIScim_service_provider_config::setEtag(const OAIScim_service_provider_config_changePassword &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIScim_service_provider_config::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIScim_service_provider_config::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIScim_service_provider_config_filter OAIScim_service_provider_config::getFilter() const {
    return m_filter;
}
void OAIScim_service_provider_config::setFilter(const OAIScim_service_provider_config_filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIScim_service_provider_config::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIScim_service_provider_config::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIScim_service_provider_config_patch OAIScim_service_provider_config::getPatch() const {
    return m_patch;
}
void OAIScim_service_provider_config::setPatch(const OAIScim_service_provider_config_patch &patch) {
    m_patch = patch;
    m_patch_isSet = true;
}

bool OAIScim_service_provider_config::is_patch_Set() const{
    return m_patch_isSet;
}

bool OAIScim_service_provider_config::is_patch_Valid() const{
    return m_patch_isValid;
}

QList<QString> OAIScim_service_provider_config::getSchemas() const {
    return m_schemas;
}
void OAIScim_service_provider_config::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIScim_service_provider_config::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIScim_service_provider_config::is_schemas_Valid() const{
    return m_schemas_isValid;
}

OAIScim_service_provider_config_sort OAIScim_service_provider_config::getSort() const {
    return m_sort;
}
void OAIScim_service_provider_config::setSort(const OAIScim_service_provider_config_sort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIScim_service_provider_config::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIScim_service_provider_config::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIScim_service_provider_config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_schemes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_service_provider_config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
