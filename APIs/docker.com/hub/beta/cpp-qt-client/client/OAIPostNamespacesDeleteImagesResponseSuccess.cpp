/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostNamespacesDeleteImagesResponseSuccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostNamespacesDeleteImagesResponseSuccess::OAIPostNamespacesDeleteImagesResponseSuccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostNamespacesDeleteImagesResponseSuccess::OAIPostNamespacesDeleteImagesResponseSuccess() {
    this->initializeModel();
}

OAIPostNamespacesDeleteImagesResponseSuccess::~OAIPostNamespacesDeleteImagesResponseSuccess() {}

void OAIPostNamespacesDeleteImagesResponseSuccess::initializeModel() {

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIPostNamespacesDeleteImagesResponseSuccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostNamespacesDeleteImagesResponseSuccess::fromJsonObject(QJsonObject json) {

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dry_run")]);
    m_dry_run_isSet = !json[QString("dry_run")].isNull() && m_dry_run_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseSuccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostNamespacesDeleteImagesResponseSuccess::asJsonObject() const {
    QJsonObject obj;
    if (m_dry_run_isSet) {
        obj.insert(QString("dry_run"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::isDryRun() const {
    return m_dry_run;
}
void OAIPostNamespacesDeleteImagesResponseSuccess::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

OAIPostNamespacesDeleteImagesResponseSuccess_metrics OAIPostNamespacesDeleteImagesResponseSuccess::getMetrics() const {
    return m_metrics;
}
void OAIPostNamespacesDeleteImagesResponseSuccess::setMetrics(const OAIPostNamespacesDeleteImagesResponseSuccess_metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostNamespacesDeleteImagesResponseSuccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
