/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_last_pulled_isSet = false;
    m_last_pulled_isValid = false;

    m_last_pushed_isSet = false;
    m_last_pushed_isValid = false;

    m_layers_isSet = false;
    m_layers_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_os_features_isSet = false;
    m_os_features_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_last_pulled_isValid = ::OpenAPI::fromJsonValue(m_last_pulled, json[QString("last_pulled")]);
    m_last_pulled_isSet = !json[QString("last_pulled")].isNull() && m_last_pulled_isValid;

    m_last_pushed_isValid = ::OpenAPI::fromJsonValue(m_last_pushed, json[QString("last_pushed")]);
    m_last_pushed_isSet = !json[QString("last_pushed")].isNull() && m_last_pushed_isValid;

    m_layers_isValid = ::OpenAPI::fromJsonValue(m_layers, json[QString("layers")]);
    m_layers_isSet = !json[QString("layers")].isNull() && m_layers_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_os_features_isValid = ::OpenAPI::fromJsonValue(m_os_features, json[QString("os_features")]);
    m_os_features_isSet = !json[QString("os_features")].isNull() && m_os_features_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os_version")]);
    m_os_version_isSet = !json[QString("os_version")].isNull() && m_os_version_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_features_isSet) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_last_pulled_isSet) {
        obj.insert(QString("last_pulled"), ::OpenAPI::toJsonValue(m_last_pulled));
    }
    if (m_last_pushed_isSet) {
        obj.insert(QString("last_pushed"), ::OpenAPI::toJsonValue(m_last_pushed));
    }
    if (m_layers.size() > 0) {
        obj.insert(QString("layers"), ::OpenAPI::toJsonValue(m_layers));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_os_features_isSet) {
        obj.insert(QString("os_features"), ::OpenAPI::toJsonValue(m_os_features));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os_version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QString OAIImage::getArchitecture() const {
    return m_architecture;
}
void OAIImage::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIImage::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIImage::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIImage::getDigest() const {
    return m_digest;
}
void OAIImage::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImage::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImage::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIImage::getFeatures() const {
    return m_features;
}
void OAIImage::setFeatures(const QString &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIImage::is_features_Set() const{
    return m_features_isSet;
}

bool OAIImage::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIImage::getLastPulled() const {
    return m_last_pulled;
}
void OAIImage::setLastPulled(const QString &last_pulled) {
    m_last_pulled = last_pulled;
    m_last_pulled_isSet = true;
}

bool OAIImage::is_last_pulled_Set() const{
    return m_last_pulled_isSet;
}

bool OAIImage::is_last_pulled_Valid() const{
    return m_last_pulled_isValid;
}

QString OAIImage::getLastPushed() const {
    return m_last_pushed;
}
void OAIImage::setLastPushed(const QString &last_pushed) {
    m_last_pushed = last_pushed;
    m_last_pushed_isSet = true;
}

bool OAIImage::is_last_pushed_Set() const{
    return m_last_pushed_isSet;
}

bool OAIImage::is_last_pushed_Valid() const{
    return m_last_pushed_isValid;
}

QList<OAILayer> OAIImage::getLayers() const {
    return m_layers;
}
void OAIImage::setLayers(const QList<OAILayer> &layers) {
    m_layers = layers;
    m_layers_isSet = true;
}

bool OAIImage::is_layers_Set() const{
    return m_layers_isSet;
}

bool OAIImage::is_layers_Valid() const{
    return m_layers_isValid;
}

QString OAIImage::getOs() const {
    return m_os;
}
void OAIImage::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIImage::is_os_Set() const{
    return m_os_isSet;
}

bool OAIImage::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIImage::getOsFeatures() const {
    return m_os_features;
}
void OAIImage::setOsFeatures(const QString &os_features) {
    m_os_features = os_features;
    m_os_features_isSet = true;
}

bool OAIImage::is_os_features_Set() const{
    return m_os_features_isSet;
}

bool OAIImage::is_os_features_Valid() const{
    return m_os_features_isValid;
}

QString OAIImage::getOsVersion() const {
    return m_os_version;
}
void OAIImage::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIImage::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIImage::is_os_version_Valid() const{
    return m_os_version_isValid;
}

qint32 OAIImage::getSize() const {
    return m_size;
}
void OAIImage::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIImage::is_size_Set() const{
    return m_size_isSet;
}

bool OAIImage::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIImage::getStatus() const {
    return m_status;
}
void OAIImage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIImage::getVariant() const {
    return m_variant;
}
void OAIImage::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIImage::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIImage::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_pulled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_pushed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
