/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostNamespacesDeleteImagesResponseError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostNamespacesDeleteImagesResponseError::OAIPostNamespacesDeleteImagesResponseError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostNamespacesDeleteImagesResponseError::OAIPostNamespacesDeleteImagesResponseError() {
    this->initializeModel();
}

OAIPostNamespacesDeleteImagesResponseError::~OAIPostNamespacesDeleteImagesResponseError() {}

void OAIPostNamespacesDeleteImagesResponseError::initializeModel() {

    m_errinfo_isSet = false;
    m_errinfo_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_txnid_isSet = false;
    m_txnid_isValid = false;
}

void OAIPostNamespacesDeleteImagesResponseError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostNamespacesDeleteImagesResponseError::fromJsonObject(QJsonObject json) {

    m_errinfo_isValid = ::OpenAPI::fromJsonValue(m_errinfo, json[QString("errinfo")]);
    m_errinfo_isSet = !json[QString("errinfo")].isNull() && m_errinfo_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_txnid_isValid = ::OpenAPI::fromJsonValue(m_txnid, json[QString("txnid")]);
    m_txnid_isSet = !json[QString("txnid")].isNull() && m_txnid_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostNamespacesDeleteImagesResponseError::asJsonObject() const {
    QJsonObject obj;
    if (m_errinfo.isSet()) {
        obj.insert(QString("errinfo"), ::OpenAPI::toJsonValue(m_errinfo));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_txnid_isSet) {
        obj.insert(QString("txnid"), ::OpenAPI::toJsonValue(m_txnid));
    }
    return obj;
}

OAIPostNamespacesDeleteImagesResponseError_errinfo OAIPostNamespacesDeleteImagesResponseError::getErrinfo() const {
    return m_errinfo;
}
void OAIPostNamespacesDeleteImagesResponseError::setErrinfo(const OAIPostNamespacesDeleteImagesResponseError_errinfo &errinfo) {
    m_errinfo = errinfo;
    m_errinfo_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError::is_errinfo_Set() const{
    return m_errinfo_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError::is_errinfo_Valid() const{
    return m_errinfo_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError::getMessage() const {
    return m_message;
}
void OAIPostNamespacesDeleteImagesResponseError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPostNamespacesDeleteImagesResponseError::getTxnid() const {
    return m_txnid;
}
void OAIPostNamespacesDeleteImagesResponseError::setTxnid(const QString &txnid) {
    m_txnid = txnid;
    m_txnid_isSet = true;
}

bool OAIPostNamespacesDeleteImagesResponseError::is_txnid_Set() const{
    return m_txnid_isSet;
}

bool OAIPostNamespacesDeleteImagesResponseError::is_txnid_Valid() const{
    return m_txnid_isValid;
}

bool OAIPostNamespacesDeleteImagesResponseError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errinfo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txnid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostNamespacesDeleteImagesResponseError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
