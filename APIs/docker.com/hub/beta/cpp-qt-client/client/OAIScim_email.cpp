/**
 * Docker HUB API
 * Docker Hub is a service provided by Docker for finding and sharing container images with your team.  It is the world's largest library and community for container images.  In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),  Docker provides an API that allows you to interact with Docker Hub.  Browse through the Docker Hub API documentation to explore the supported endpoints. 
 *
 * The version of the OpenAPI document: beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_email.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_email::OAIScim_email(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_email::OAIScim_email() {
    this->initializeModel();
}

OAIScim_email::~OAIScim_email() {}

void OAIScim_email::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIScim_email::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_email::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIScim_email::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_email::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIScim_email::getDisplay() const {
    return m_display;
}
void OAIScim_email::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIScim_email::is_display_Set() const{
    return m_display_isSet;
}

bool OAIScim_email::is_display_Valid() const{
    return m_display_isValid;
}

bool OAIScim_email::isPrimary() const {
    return m_primary;
}
void OAIScim_email::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIScim_email::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIScim_email::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIScim_email::getValue() const {
    return m_value;
}
void OAIScim_email::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIScim_email::is_value_Set() const{
    return m_value_isSet;
}

bool OAIScim_email::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIScim_email::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_email::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
