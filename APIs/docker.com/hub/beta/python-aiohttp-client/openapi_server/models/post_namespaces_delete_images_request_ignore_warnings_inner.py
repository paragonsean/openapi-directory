# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostNamespacesDeleteImagesRequestIgnoreWarningsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, repository: str=None, tags: List[str]=None, warning: str=None):
        """PostNamespacesDeleteImagesRequestIgnoreWarningsInner - a model defined in OpenAPI

        :param digest: The digest of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :param repository: The repository of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :param tags: The tags of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :param warning: The warning of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        """
        self.openapi_types = {
            'digest': str,
            'repository': str,
            'tags': List[str],
            'warning': str
        }

        self.attribute_map = {
            'digest': 'digest',
            'repository': 'repository',
            'tags': 'tags',
            'warning': 'warning'
        }

        self._digest = digest
        self._repository = repository
        self._tags = tags
        self._warning = warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostNamespacesDeleteImagesRequestIgnoreWarningsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostNamespacesDeleteImagesRequest_ignore_warnings_inner of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Digest of the image to ignore the warning for.

        :return: The digest of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Digest of the image to ignore the warning for.

        :param digest: The digest of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :type digest: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")

        self._digest = digest

    @property
    def repository(self):
        """Gets the repository of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Name of the repository of the image to ignore the warning for.

        :return: The repository of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Name of the repository of the image to ignore the warning for.

        :param repository: The repository of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def tags(self):
        """Gets the tags of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Current tags to ignore.

        :return: The tags of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Current tags to ignore.

        :param tags: The tags of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def warning(self):
        """Gets the warning of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Warning to ignore.

        :return: The warning of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.

        Warning to ignore.

        :param warning: The warning of this PostNamespacesDeleteImagesRequestIgnoreWarningsInner.
        :type warning: str
        """
        allowed_values = ["is_active", "current_tag"]  # noqa: E501
        if warning not in allowed_values:
            raise ValueError(
                "Invalid value for `warning` ({0}), must be one of {1}"
                .format(warning, allowed_values)
            )

        self._warning = warning
