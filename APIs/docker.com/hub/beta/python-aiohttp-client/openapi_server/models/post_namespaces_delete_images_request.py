# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_namespaces_delete_images_request_ignore_warnings_inner import PostNamespacesDeleteImagesRequestIgnoreWarningsInner
from openapi_server.models.post_namespaces_delete_images_request_manifests_inner import PostNamespacesDeleteImagesRequestManifestsInner
from openapi_server import util


class PostNamespacesDeleteImagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_from: str=None, dry_run: bool=None, ignore_warnings: List[PostNamespacesDeleteImagesRequestIgnoreWarningsInner]=None, manifests: List[PostNamespacesDeleteImagesRequestManifestsInner]=None):
        """PostNamespacesDeleteImagesRequest - a model defined in OpenAPI

        :param active_from: The active_from of this PostNamespacesDeleteImagesRequest.
        :param dry_run: The dry_run of this PostNamespacesDeleteImagesRequest.
        :param ignore_warnings: The ignore_warnings of this PostNamespacesDeleteImagesRequest.
        :param manifests: The manifests of this PostNamespacesDeleteImagesRequest.
        """
        self.openapi_types = {
            'active_from': str,
            'dry_run': bool,
            'ignore_warnings': List[PostNamespacesDeleteImagesRequestIgnoreWarningsInner],
            'manifests': List[PostNamespacesDeleteImagesRequestManifestsInner]
        }

        self.attribute_map = {
            'active_from': 'active_from',
            'dry_run': 'dry_run',
            'ignore_warnings': 'ignore_warnings',
            'manifests': 'manifests'
        }

        self._active_from = active_from
        self._dry_run = dry_run
        self._ignore_warnings = ignore_warnings
        self._manifests = manifests

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostNamespacesDeleteImagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostNamespacesDeleteImagesRequest of this PostNamespacesDeleteImagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_from(self):
        """Gets the active_from of this PostNamespacesDeleteImagesRequest.

        Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time. 

        :return: The active_from of this PostNamespacesDeleteImagesRequest.
        :rtype: str
        """
        return self._active_from

    @active_from.setter
    def active_from(self, active_from):
        """Sets the active_from of this PostNamespacesDeleteImagesRequest.

        Sets the time from which an image must have been pushed or pulled to be counted as active.  Defaults to 1 month before the current time. 

        :param active_from: The active_from of this PostNamespacesDeleteImagesRequest.
        :type active_from: str
        """

        self._active_from = active_from

    @property
    def dry_run(self):
        """Gets the dry_run of this PostNamespacesDeleteImagesRequest.

        If `true` then will check and return errors and unignored warnings for the deletion request but will not delete any images.

        :return: The dry_run of this PostNamespacesDeleteImagesRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this PostNamespacesDeleteImagesRequest.

        If `true` then will check and return errors and unignored warnings for the deletion request but will not delete any images.

        :param dry_run: The dry_run of this PostNamespacesDeleteImagesRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def ignore_warnings(self):
        """Gets the ignore_warnings of this PostNamespacesDeleteImagesRequest.

        Warnings to ignore. If a warning is not ignored then no deletions will happen and the  warning is returned in the response.  These warnings include:  - is_active: warning when attempting to delete an image that is marked as active. - current_tag: warning when attempting to delete an image that has one or more current  tags in the repository.  Warnings can be copied from the response to the request. 

        :return: The ignore_warnings of this PostNamespacesDeleteImagesRequest.
        :rtype: List[PostNamespacesDeleteImagesRequestIgnoreWarningsInner]
        """
        return self._ignore_warnings

    @ignore_warnings.setter
    def ignore_warnings(self, ignore_warnings):
        """Sets the ignore_warnings of this PostNamespacesDeleteImagesRequest.

        Warnings to ignore. If a warning is not ignored then no deletions will happen and the  warning is returned in the response.  These warnings include:  - is_active: warning when attempting to delete an image that is marked as active. - current_tag: warning when attempting to delete an image that has one or more current  tags in the repository.  Warnings can be copied from the response to the request. 

        :param ignore_warnings: The ignore_warnings of this PostNamespacesDeleteImagesRequest.
        :type ignore_warnings: List[PostNamespacesDeleteImagesRequestIgnoreWarningsInner]
        """

        self._ignore_warnings = ignore_warnings

    @property
    def manifests(self):
        """Gets the manifests of this PostNamespacesDeleteImagesRequest.

        Image manifests to delete.

        :return: The manifests of this PostNamespacesDeleteImagesRequest.
        :rtype: List[PostNamespacesDeleteImagesRequestManifestsInner]
        """
        return self._manifests

    @manifests.setter
    def manifests(self, manifests):
        """Sets the manifests of this PostNamespacesDeleteImagesRequest.

        Image manifests to delete.

        :param manifests: The manifests of this PostNamespacesDeleteImagesRequest.
        :type manifests: List[PostNamespacesDeleteImagesRequestManifestsInner]
        """

        self._manifests = manifests
