# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Users2FALoginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, login_2fa_token: str=None):
        """Users2FALoginRequest - a model defined in OpenAPI

        :param code: The code of this Users2FALoginRequest.
        :param login_2fa_token: The login_2fa_token of this Users2FALoginRequest.
        """
        self.openapi_types = {
            'code': str,
            'login_2fa_token': str
        }

        self.attribute_map = {
            'code': 'code',
            'login_2fa_token': 'login_2fa_token'
        }

        self._code = code
        self._login_2fa_token = login_2fa_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Users2FALoginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Users2FALoginRequest of this Users2FALoginRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Users2FALoginRequest.

        The Time-based One-Time Password of the Docker Hub account to authenticate with.

        :return: The code of this Users2FALoginRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Users2FALoginRequest.

        The Time-based One-Time Password of the Docker Hub account to authenticate with.

        :param code: The code of this Users2FALoginRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def login_2fa_token(self):
        """Gets the login_2fa_token of this Users2FALoginRequest.

        The intermediate 2FA token returned from `/v2/users/login` API.

        :return: The login_2fa_token of this Users2FALoginRequest.
        :rtype: str
        """
        return self._login_2fa_token

    @login_2fa_token.setter
    def login_2fa_token(self, login_2fa_token):
        """Sets the login_2fa_token of this Users2FALoginRequest.

        The intermediate 2FA token returned from `/v2/users/login` API.

        :param login_2fa_token: The login_2fa_token of this Users2FALoginRequest.
        :type login_2fa_token: str
        """
        if login_2fa_token is None:
            raise ValueError("Invalid value for `login_2fa_token`, must not be `None`")

        self._login_2fa_token = login_2fa_token
