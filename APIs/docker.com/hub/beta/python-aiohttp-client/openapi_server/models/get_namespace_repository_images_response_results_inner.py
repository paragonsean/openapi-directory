# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_namespace_repository_images_response_results_inner_tags_inner import GetNamespaceRepositoryImagesResponseResultsInnerTagsInner
from openapi_server import util


class GetNamespaceRepositoryImagesResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, last_pulled: str=None, last_pushed: str=None, namespace: str=None, repository: str=None, status: str=None, tags: List[GetNamespaceRepositoryImagesResponseResultsInnerTagsInner]=None):
        """GetNamespaceRepositoryImagesResponseResultsInner - a model defined in OpenAPI

        :param digest: The digest of this GetNamespaceRepositoryImagesResponseResultsInner.
        :param last_pulled: The last_pulled of this GetNamespaceRepositoryImagesResponseResultsInner.
        :param last_pushed: The last_pushed of this GetNamespaceRepositoryImagesResponseResultsInner.
        :param namespace: The namespace of this GetNamespaceRepositoryImagesResponseResultsInner.
        :param repository: The repository of this GetNamespaceRepositoryImagesResponseResultsInner.
        :param status: The status of this GetNamespaceRepositoryImagesResponseResultsInner.
        :param tags: The tags of this GetNamespaceRepositoryImagesResponseResultsInner.
        """
        self.openapi_types = {
            'digest': str,
            'last_pulled': str,
            'last_pushed': str,
            'namespace': str,
            'repository': str,
            'status': str,
            'tags': List[GetNamespaceRepositoryImagesResponseResultsInnerTagsInner]
        }

        self.attribute_map = {
            'digest': 'digest',
            'last_pulled': 'last_pulled',
            'last_pushed': 'last_pushed',
            'namespace': 'namespace',
            'repository': 'repository',
            'status': 'status',
            'tags': 'tags'
        }

        self._digest = digest
        self._last_pulled = last_pulled
        self._last_pushed = last_pushed
        self._namespace = namespace
        self._repository = repository
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNamespaceRepositoryImagesResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetNamespaceRepositoryImagesResponse_results_inner of this GetNamespaceRepositoryImagesResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this GetNamespaceRepositoryImagesResponseResultsInner.

        The image's digest.

        :return: The digest of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this GetNamespaceRepositoryImagesResponseResultsInner.

        The image's digest.

        :param digest: The digest of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type digest: str
        """

        self._digest = digest

    @property
    def last_pulled(self):
        """Gets the last_pulled of this GetNamespaceRepositoryImagesResponseResultsInner.

        Time when this image was last pulled. Note this is updated at most once per hour.

        :return: The last_pulled of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: str
        """
        return self._last_pulled

    @last_pulled.setter
    def last_pulled(self, last_pulled):
        """Sets the last_pulled of this GetNamespaceRepositoryImagesResponseResultsInner.

        Time when this image was last pulled. Note this is updated at most once per hour.

        :param last_pulled: The last_pulled of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type last_pulled: str
        """

        self._last_pulled = last_pulled

    @property
    def last_pushed(self):
        """Gets the last_pushed of this GetNamespaceRepositoryImagesResponseResultsInner.

        Time when this image was last pushed.

        :return: The last_pushed of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: str
        """
        return self._last_pushed

    @last_pushed.setter
    def last_pushed(self, last_pushed):
        """Sets the last_pushed of this GetNamespaceRepositoryImagesResponseResultsInner.

        Time when this image was last pushed.

        :param last_pushed: The last_pushed of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type last_pushed: str
        """

        self._last_pushed = last_pushed

    @property
    def namespace(self):
        """Gets the namespace of this GetNamespaceRepositoryImagesResponseResultsInner.

        The repository namespace.

        :return: The namespace of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this GetNamespaceRepositoryImagesResponseResultsInner.

        The repository namespace.

        :param namespace: The namespace of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def repository(self):
        """Gets the repository of this GetNamespaceRepositoryImagesResponseResultsInner.

        The repository name.

        :return: The repository of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this GetNamespaceRepositoryImagesResponseResultsInner.

        The repository name.

        :param repository: The repository of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type repository: str
        """

        self._repository = repository

    @property
    def status(self):
        """Gets the status of this GetNamespaceRepositoryImagesResponseResultsInner.

        The status of the image based on its last activity against the `active_from` time.

        :return: The status of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetNamespaceRepositoryImagesResponseResultsInner.

        The status of the image based on its last activity against the `active_from` time.

        :param status: The status of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this GetNamespaceRepositoryImagesResponseResultsInner.

        The current and historical tags for this image.

        :return: The tags of this GetNamespaceRepositoryImagesResponseResultsInner.
        :rtype: List[GetNamespaceRepositoryImagesResponseResultsInnerTagsInner]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetNamespaceRepositoryImagesResponseResultsInner.

        The current and historical tags for this image.

        :param tags: The tags of this GetNamespaceRepositoryImagesResponseResultsInner.
        :type tags: List[GetNamespaceRepositoryImagesResponseResultsInnerTagsInner]
        """

        self._tags = tags
