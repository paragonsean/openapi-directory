# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V2OrgsNameSettingsPutRequestRestrictedImages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_official_images: bool=None, allow_verified_publishers: bool=None, enabled: bool=None):
        """V2OrgsNameSettingsPutRequestRestrictedImages - a model defined in OpenAPI

        :param allow_official_images: The allow_official_images of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :param allow_verified_publishers: The allow_verified_publishers of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :param enabled: The enabled of this V2OrgsNameSettingsPutRequestRestrictedImages.
        """
        self.openapi_types = {
            'allow_official_images': bool,
            'allow_verified_publishers': bool,
            'enabled': bool
        }

        self.attribute_map = {
            'allow_official_images': 'allow_official_images',
            'allow_verified_publishers': 'allow_verified_publishers',
            'enabled': 'enabled'
        }

        self._allow_official_images = allow_official_images
        self._allow_verified_publishers = allow_verified_publishers
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V2OrgsNameSettingsPutRequestRestrictedImages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _v2_orgs__name__settings_put_request_restricted_images of this V2OrgsNameSettingsPutRequestRestrictedImages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_official_images(self):
        """Gets the allow_official_images of this V2OrgsNameSettingsPutRequestRestrictedImages.

        Allow usage of official images if \"enabled\" is `true`.

        :return: The allow_official_images of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :rtype: bool
        """
        return self._allow_official_images

    @allow_official_images.setter
    def allow_official_images(self, allow_official_images):
        """Sets the allow_official_images of this V2OrgsNameSettingsPutRequestRestrictedImages.

        Allow usage of official images if \"enabled\" is `true`.

        :param allow_official_images: The allow_official_images of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :type allow_official_images: bool
        """
        if allow_official_images is None:
            raise ValueError("Invalid value for `allow_official_images`, must not be `None`")

        self._allow_official_images = allow_official_images

    @property
    def allow_verified_publishers(self):
        """Gets the allow_verified_publishers of this V2OrgsNameSettingsPutRequestRestrictedImages.

        Allow usage of verified publisher images if \"enabled\" is `true`.

        :return: The allow_verified_publishers of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :rtype: bool
        """
        return self._allow_verified_publishers

    @allow_verified_publishers.setter
    def allow_verified_publishers(self, allow_verified_publishers):
        """Sets the allow_verified_publishers of this V2OrgsNameSettingsPutRequestRestrictedImages.

        Allow usage of verified publisher images if \"enabled\" is `true`.

        :param allow_verified_publishers: The allow_verified_publishers of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :type allow_verified_publishers: bool
        """
        if allow_verified_publishers is None:
            raise ValueError("Invalid value for `allow_verified_publishers`, must not be `None`")

        self._allow_verified_publishers = allow_verified_publishers

    @property
    def enabled(self):
        """Gets the enabled of this V2OrgsNameSettingsPutRequestRestrictedImages.

        Whether or not to restrict image usage for users in the organization.

        :return: The enabled of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V2OrgsNameSettingsPutRequestRestrictedImages.

        Whether or not to restrict image usage for users in the organization.

        :param enabled: The enabled of this V2OrgsNameSettingsPutRequestRestrictedImages.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
