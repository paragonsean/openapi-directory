# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scim_email import ScimEmail
from openapi_server.models.scim_group import ScimGroup
from openapi_server.models.scim_user_meta import ScimUserMeta
from openapi_server.models.scim_user_name import ScimUserName
from openapi_server import util


class ScimUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, display_name: str=None, emails: List[ScimEmail]=None, groups: List[ScimGroup]=None, id: str=None, meta: ScimUserMeta=None, name: ScimUserName=None, schemas: List[str]=None, user_name: str=None):
        """ScimUser - a model defined in OpenAPI

        :param active: The active of this ScimUser.
        :param display_name: The display_name of this ScimUser.
        :param emails: The emails of this ScimUser.
        :param groups: The groups of this ScimUser.
        :param id: The id of this ScimUser.
        :param meta: The meta of this ScimUser.
        :param name: The name of this ScimUser.
        :param schemas: The schemas of this ScimUser.
        :param user_name: The user_name of this ScimUser.
        """
        self.openapi_types = {
            'active': bool,
            'display_name': str,
            'emails': List[ScimEmail],
            'groups': List[ScimGroup],
            'id': str,
            'meta': ScimUserMeta,
            'name': ScimUserName,
            'schemas': List[str],
            'user_name': str
        }

        self.attribute_map = {
            'active': 'active',
            'display_name': 'displayName',
            'emails': 'emails',
            'groups': 'groups',
            'id': 'id',
            'meta': 'meta',
            'name': 'name',
            'schemas': 'schemas',
            'user_name': 'userName'
        }

        self._active = active
        self._display_name = display_name
        self._emails = emails
        self._groups = groups
        self._id = id
        self._meta = meta
        self._name = name
        self._schemas = schemas
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScimUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scim_user of this ScimUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ScimUser.


        :return: The active of this ScimUser.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ScimUser.


        :param active: The active of this ScimUser.
        :type active: bool
        """

        self._active = active

    @property
    def display_name(self):
        """Gets the display_name of this ScimUser.

        The username in Docker. Also known as the \"Docker ID\".

        :return: The display_name of this ScimUser.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ScimUser.

        The username in Docker. Also known as the \"Docker ID\".

        :param display_name: The display_name of this ScimUser.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def emails(self):
        """Gets the emails of this ScimUser.


        :return: The emails of this ScimUser.
        :rtype: List[ScimEmail]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ScimUser.


        :param emails: The emails of this ScimUser.
        :type emails: List[ScimEmail]
        """

        self._emails = emails

    @property
    def groups(self):
        """Gets the groups of this ScimUser.


        :return: The groups of this ScimUser.
        :rtype: List[ScimGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ScimUser.


        :param groups: The groups of this ScimUser.
        :type groups: List[ScimGroup]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this ScimUser.

        The unique identifier for the user. A v4 UUID.

        :return: The id of this ScimUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScimUser.

        The unique identifier for the user. A v4 UUID.

        :param id: The id of this ScimUser.
        :type id: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this ScimUser.


        :return: The meta of this ScimUser.
        :rtype: ScimUserMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ScimUser.


        :param meta: The meta of this ScimUser.
        :type meta: ScimUserMeta
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this ScimUser.


        :return: The name of this ScimUser.
        :rtype: ScimUserName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScimUser.


        :param name: The name of this ScimUser.
        :type name: ScimUserName
        """

        self._name = name

    @property
    def schemas(self):
        """Gets the schemas of this ScimUser.


        :return: The schemas of this ScimUser.
        :rtype: List[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ScimUser.


        :param schemas: The schemas of this ScimUser.
        :type schemas: List[str]
        """

        self._schemas = schemas

    @property
    def user_name(self):
        """Gets the user_name of this ScimUser.

        The user's email address. This must be reachable via email.

        :return: The user_name of this ScimUser.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ScimUser.

        The user's email address. This must be reachable via email.

        :param user_name: The user_name of this ScimUser.
        :type user_name: str
        """

        self._user_name = user_name
