# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostNamespacesDeleteImagesRequestManifestsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, repository: str=None):
        """PostNamespacesDeleteImagesRequestManifestsInner - a model defined in OpenAPI

        :param digest: The digest of this PostNamespacesDeleteImagesRequestManifestsInner.
        :param repository: The repository of this PostNamespacesDeleteImagesRequestManifestsInner.
        """
        self.openapi_types = {
            'digest': str,
            'repository': str
        }

        self.attribute_map = {
            'digest': 'digest',
            'repository': 'repository'
        }

        self._digest = digest
        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostNamespacesDeleteImagesRequestManifestsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostNamespacesDeleteImagesRequest_manifests_inner of this PostNamespacesDeleteImagesRequestManifestsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this PostNamespacesDeleteImagesRequestManifestsInner.

        Digest of the image to delete.

        :return: The digest of this PostNamespacesDeleteImagesRequestManifestsInner.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this PostNamespacesDeleteImagesRequestManifestsInner.

        Digest of the image to delete.

        :param digest: The digest of this PostNamespacesDeleteImagesRequestManifestsInner.
        :type digest: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")

        self._digest = digest

    @property
    def repository(self):
        """Gets the repository of this PostNamespacesDeleteImagesRequestManifestsInner.

        Name of the repository to delete the image from.

        :return: The repository of this PostNamespacesDeleteImagesRequestManifestsInner.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this PostNamespacesDeleteImagesRequestManifestsInner.

        Name of the repository to delete the image from.

        :param repository: The repository of this PostNamespacesDeleteImagesRequestManifestsInner.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository
