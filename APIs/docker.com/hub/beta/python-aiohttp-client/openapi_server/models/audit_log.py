# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuditLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, action: str=None, action_description: str=None, actor: str=None, data: Dict[str, str]=None, name: str=None, timestamp: datetime=None):
        """AuditLog - a model defined in OpenAPI

        :param account: The account of this AuditLog.
        :param action: The action of this AuditLog.
        :param action_description: The action_description of this AuditLog.
        :param actor: The actor of this AuditLog.
        :param data: The data of this AuditLog.
        :param name: The name of this AuditLog.
        :param timestamp: The timestamp of this AuditLog.
        """
        self.openapi_types = {
            'account': str,
            'action': str,
            'action_description': str,
            'actor': str,
            'data': Dict[str, str],
            'name': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'account': 'account',
            'action': 'action',
            'action_description': 'action_description',
            'actor': 'actor',
            'data': 'data',
            'name': 'name',
            'timestamp': 'timestamp'
        }

        self._account = account
        self._action = action
        self._action_description = action_description
        self._actor = actor
        self._data = data
        self._name = name
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditLog of this AuditLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this AuditLog.


        :return: The account of this AuditLog.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AuditLog.


        :param account: The account of this AuditLog.
        :type account: str
        """

        self._account = account

    @property
    def action(self):
        """Gets the action of this AuditLog.


        :return: The action of this AuditLog.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLog.


        :param action: The action of this AuditLog.
        :type action: str
        """

        self._action = action

    @property
    def action_description(self):
        """Gets the action_description of this AuditLog.


        :return: The action_description of this AuditLog.
        :rtype: str
        """
        return self._action_description

    @action_description.setter
    def action_description(self, action_description):
        """Sets the action_description of this AuditLog.


        :param action_description: The action_description of this AuditLog.
        :type action_description: str
        """

        self._action_description = action_description

    @property
    def actor(self):
        """Gets the actor of this AuditLog.


        :return: The actor of this AuditLog.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this AuditLog.


        :param actor: The actor of this AuditLog.
        :type actor: str
        """

        self._actor = actor

    @property
    def data(self):
        """Gets the data of this AuditLog.


        :return: The data of this AuditLog.
        :rtype: Dict[str, str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AuditLog.


        :param data: The data of this AuditLog.
        :type data: Dict[str, str]
        """

        self._data = data

    @property
    def name(self):
        """Gets the name of this AuditLog.


        :return: The name of this AuditLog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuditLog.


        :param name: The name of this AuditLog.
        :type name: str
        """

        self._name = name

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditLog.


        :return: The timestamp of this AuditLog.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditLog.


        :param timestamp: The timestamp of this AuditLog.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
