# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetNamespaceRepositoryImagesSummaryResponseStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, inactive: int=None, total: int=None):
        """GetNamespaceRepositoryImagesSummaryResponseStatistics - a model defined in OpenAPI

        :param active: The active of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :param inactive: The inactive of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :param total: The total of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        """
        self.openapi_types = {
            'active': int,
            'inactive': int,
            'total': int
        }

        self.attribute_map = {
            'active': 'active',
            'inactive': 'inactive',
            'total': 'total'
        }

        self._active = active
        self._inactive = inactive
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNamespaceRepositoryImagesSummaryResponseStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetNamespaceRepositoryImagesSummaryResponse_statistics of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this GetNamespaceRepositoryImagesSummaryResponseStatistics.

        Number of images counted as active in this repository.

        :return: The active of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetNamespaceRepositoryImagesSummaryResponseStatistics.

        Number of images counted as active in this repository.

        :param active: The active of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :type active: int
        """

        self._active = active

    @property
    def inactive(self):
        """Gets the inactive of this GetNamespaceRepositoryImagesSummaryResponseStatistics.

        Number of images counted as inactive in this repository.

        :return: The inactive of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :rtype: int
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this GetNamespaceRepositoryImagesSummaryResponseStatistics.

        Number of images counted as inactive in this repository.

        :param inactive: The inactive of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :type inactive: int
        """

        self._inactive = inactive

    @property
    def total(self):
        """Gets the total of this GetNamespaceRepositoryImagesSummaryResponseStatistics.

        Number of images in this repository.

        :return: The total of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetNamespaceRepositoryImagesSummaryResponseStatistics.

        Number of images in this repository.

        :param total: The total of this GetNamespaceRepositoryImagesSummaryResponseStatistics.
        :type total: int
        """

        self._total = total
