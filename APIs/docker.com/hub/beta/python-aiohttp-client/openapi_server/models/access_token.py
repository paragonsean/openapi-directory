# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, created_at: str=None, creator_ip: str=None, creator_ua: str=None, generated_by: str=None, is_active: bool=None, last_used: str=None, scopes: List[str]=None, token: str=None, token_label: str=None, uuid: str=None):
        """AccessToken - a model defined in OpenAPI

        :param client_id: The client_id of this AccessToken.
        :param created_at: The created_at of this AccessToken.
        :param creator_ip: The creator_ip of this AccessToken.
        :param creator_ua: The creator_ua of this AccessToken.
        :param generated_by: The generated_by of this AccessToken.
        :param is_active: The is_active of this AccessToken.
        :param last_used: The last_used of this AccessToken.
        :param scopes: The scopes of this AccessToken.
        :param token: The token of this AccessToken.
        :param token_label: The token_label of this AccessToken.
        :param uuid: The uuid of this AccessToken.
        """
        self.openapi_types = {
            'client_id': str,
            'created_at': str,
            'creator_ip': str,
            'creator_ua': str,
            'generated_by': str,
            'is_active': bool,
            'last_used': str,
            'scopes': List[str],
            'token': str,
            'token_label': str,
            'uuid': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'created_at': 'created_at',
            'creator_ip': 'creator_ip',
            'creator_ua': 'creator_ua',
            'generated_by': 'generated_by',
            'is_active': 'is_active',
            'last_used': 'last_used',
            'scopes': 'scopes',
            'token': 'token',
            'token_label': 'token_label',
            'uuid': 'uuid'
        }

        self._client_id = client_id
        self._created_at = created_at
        self._creator_ip = creator_ip
        self._creator_ua = creator_ua
        self._generated_by = generated_by
        self._is_active = is_active
        self._last_used = last_used
        self._scopes = scopes
        self._token = token
        self._token_label = token_label
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accessToken of this AccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this AccessToken.


        :return: The client_id of this AccessToken.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AccessToken.


        :param client_id: The client_id of this AccessToken.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this AccessToken.


        :return: The created_at of this AccessToken.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccessToken.


        :param created_at: The created_at of this AccessToken.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def creator_ip(self):
        """Gets the creator_ip of this AccessToken.


        :return: The creator_ip of this AccessToken.
        :rtype: str
        """
        return self._creator_ip

    @creator_ip.setter
    def creator_ip(self, creator_ip):
        """Sets the creator_ip of this AccessToken.


        :param creator_ip: The creator_ip of this AccessToken.
        :type creator_ip: str
        """

        self._creator_ip = creator_ip

    @property
    def creator_ua(self):
        """Gets the creator_ua of this AccessToken.


        :return: The creator_ua of this AccessToken.
        :rtype: str
        """
        return self._creator_ua

    @creator_ua.setter
    def creator_ua(self, creator_ua):
        """Sets the creator_ua of this AccessToken.


        :param creator_ua: The creator_ua of this AccessToken.
        :type creator_ua: str
        """

        self._creator_ua = creator_ua

    @property
    def generated_by(self):
        """Gets the generated_by of this AccessToken.


        :return: The generated_by of this AccessToken.
        :rtype: str
        """
        return self._generated_by

    @generated_by.setter
    def generated_by(self, generated_by):
        """Sets the generated_by of this AccessToken.


        :param generated_by: The generated_by of this AccessToken.
        :type generated_by: str
        """

        self._generated_by = generated_by

    @property
    def is_active(self):
        """Gets the is_active of this AccessToken.


        :return: The is_active of this AccessToken.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AccessToken.


        :param is_active: The is_active of this AccessToken.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def last_used(self):
        """Gets the last_used of this AccessToken.


        :return: The last_used of this AccessToken.
        :rtype: str
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this AccessToken.


        :param last_used: The last_used of this AccessToken.
        :type last_used: str
        """

        self._last_used = last_used

    @property
    def scopes(self):
        """Gets the scopes of this AccessToken.


        :return: The scopes of this AccessToken.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessToken.


        :param scopes: The scopes of this AccessToken.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def token(self):
        """Gets the token of this AccessToken.


        :return: The token of this AccessToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AccessToken.


        :param token: The token of this AccessToken.
        :type token: str
        """

        self._token = token

    @property
    def token_label(self):
        """Gets the token_label of this AccessToken.


        :return: The token_label of this AccessToken.
        :rtype: str
        """
        return self._token_label

    @token_label.setter
    def token_label(self, token_label):
        """Sets the token_label of this AccessToken.


        :param token_label: The token_label of this AccessToken.
        :type token_label: str
        """

        self._token_label = token_label

    @property
    def uuid(self):
        """Gets the uuid of this AccessToken.


        :return: The uuid of this AccessToken.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AccessToken.


        :param uuid: The uuid of this AccessToken.
        :type uuid: str
        """

        self._uuid = uuid
