# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v2_scim20_users_id_put_request_name import V2Scim20UsersIdPutRequestName
from openapi_server import util


class V2Scim20UsersIdPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=False, name: V2Scim20UsersIdPutRequestName=None, schemas: List[str]=None):
        """V2Scim20UsersIdPutRequest - a model defined in OpenAPI

        :param enabled: The enabled of this V2Scim20UsersIdPutRequest.
        :param name: The name of this V2Scim20UsersIdPutRequest.
        :param schemas: The schemas of this V2Scim20UsersIdPutRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'name': V2Scim20UsersIdPutRequestName,
            'schemas': List[str]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'name': 'name',
            'schemas': 'schemas'
        }

        self._enabled = enabled
        self._name = name
        self._schemas = schemas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V2Scim20UsersIdPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _v2_scim_2_0_Users__id__put_request of this V2Scim20UsersIdPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this V2Scim20UsersIdPutRequest.

        If this is omitted from the request, it will default to false resulting in a deactivated user.

        :return: The enabled of this V2Scim20UsersIdPutRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V2Scim20UsersIdPutRequest.

        If this is omitted from the request, it will default to false resulting in a deactivated user.

        :param enabled: The enabled of this V2Scim20UsersIdPutRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this V2Scim20UsersIdPutRequest.


        :return: The name of this V2Scim20UsersIdPutRequest.
        :rtype: V2Scim20UsersIdPutRequestName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2Scim20UsersIdPutRequest.


        :param name: The name of this V2Scim20UsersIdPutRequest.
        :type name: V2Scim20UsersIdPutRequestName
        """

        self._name = name

    @property
    def schemas(self):
        """Gets the schemas of this V2Scim20UsersIdPutRequest.


        :return: The schemas of this V2Scim20UsersIdPutRequest.
        :rtype: List[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this V2Scim20UsersIdPutRequest.


        :param schemas: The schemas of this V2Scim20UsersIdPutRequest.
        :type schemas: List[str]
        """
        if schemas is None:
            raise ValueError("Invalid value for `schemas`, must not be `None`")

        self._schemas = schemas
