# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScimSchemaAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_exact: bool=None, description: str=None, multi_valued: bool=None, mutability: str=None, name: str=None, required: bool=None, returned: str=None, type: str=None, uniqueness: str=None):
        """ScimSchemaAttribute - a model defined in OpenAPI

        :param case_exact: The case_exact of this ScimSchemaAttribute.
        :param description: The description of this ScimSchemaAttribute.
        :param multi_valued: The multi_valued of this ScimSchemaAttribute.
        :param mutability: The mutability of this ScimSchemaAttribute.
        :param name: The name of this ScimSchemaAttribute.
        :param required: The required of this ScimSchemaAttribute.
        :param returned: The returned of this ScimSchemaAttribute.
        :param type: The type of this ScimSchemaAttribute.
        :param uniqueness: The uniqueness of this ScimSchemaAttribute.
        """
        self.openapi_types = {
            'case_exact': bool,
            'description': str,
            'multi_valued': bool,
            'mutability': str,
            'name': str,
            'required': bool,
            'returned': str,
            'type': str,
            'uniqueness': str
        }

        self.attribute_map = {
            'case_exact': 'caseExact',
            'description': 'description',
            'multi_valued': 'multiValued',
            'mutability': 'mutability',
            'name': 'name',
            'required': 'required',
            'returned': 'returned',
            'type': 'type',
            'uniqueness': 'uniqueness'
        }

        self._case_exact = case_exact
        self._description = description
        self._multi_valued = multi_valued
        self._mutability = mutability
        self._name = name
        self._required = required
        self._returned = returned
        self._type = type
        self._uniqueness = uniqueness

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScimSchemaAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scim_schema_attribute of this ScimSchemaAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_exact(self):
        """Gets the case_exact of this ScimSchemaAttribute.


        :return: The case_exact of this ScimSchemaAttribute.
        :rtype: bool
        """
        return self._case_exact

    @case_exact.setter
    def case_exact(self, case_exact):
        """Sets the case_exact of this ScimSchemaAttribute.


        :param case_exact: The case_exact of this ScimSchemaAttribute.
        :type case_exact: bool
        """

        self._case_exact = case_exact

    @property
    def description(self):
        """Gets the description of this ScimSchemaAttribute.


        :return: The description of this ScimSchemaAttribute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScimSchemaAttribute.


        :param description: The description of this ScimSchemaAttribute.
        :type description: str
        """

        self._description = description

    @property
    def multi_valued(self):
        """Gets the multi_valued of this ScimSchemaAttribute.


        :return: The multi_valued of this ScimSchemaAttribute.
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this ScimSchemaAttribute.


        :param multi_valued: The multi_valued of this ScimSchemaAttribute.
        :type multi_valued: bool
        """

        self._multi_valued = multi_valued

    @property
    def mutability(self):
        """Gets the mutability of this ScimSchemaAttribute.


        :return: The mutability of this ScimSchemaAttribute.
        :rtype: str
        """
        return self._mutability

    @mutability.setter
    def mutability(self, mutability):
        """Sets the mutability of this ScimSchemaAttribute.


        :param mutability: The mutability of this ScimSchemaAttribute.
        :type mutability: str
        """

        self._mutability = mutability

    @property
    def name(self):
        """Gets the name of this ScimSchemaAttribute.


        :return: The name of this ScimSchemaAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScimSchemaAttribute.


        :param name: The name of this ScimSchemaAttribute.
        :type name: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this ScimSchemaAttribute.


        :return: The required of this ScimSchemaAttribute.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ScimSchemaAttribute.


        :param required: The required of this ScimSchemaAttribute.
        :type required: bool
        """

        self._required = required

    @property
    def returned(self):
        """Gets the returned of this ScimSchemaAttribute.


        :return: The returned of this ScimSchemaAttribute.
        :rtype: str
        """
        return self._returned

    @returned.setter
    def returned(self, returned):
        """Sets the returned of this ScimSchemaAttribute.


        :param returned: The returned of this ScimSchemaAttribute.
        :type returned: str
        """

        self._returned = returned

    @property
    def type(self):
        """Gets the type of this ScimSchemaAttribute.


        :return: The type of this ScimSchemaAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScimSchemaAttribute.


        :param type: The type of this ScimSchemaAttribute.
        :type type: str
        """
        allowed_values = ["string", "boolean", "complex"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uniqueness(self):
        """Gets the uniqueness of this ScimSchemaAttribute.


        :return: The uniqueness of this ScimSchemaAttribute.
        :rtype: str
        """
        return self._uniqueness

    @uniqueness.setter
    def uniqueness(self, uniqueness):
        """Sets the uniqueness of this ScimSchemaAttribute.


        :param uniqueness: The uniqueness of this ScimSchemaAttribute.
        :type uniqueness: str
        """

        self._uniqueness = uniqueness
