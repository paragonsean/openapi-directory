# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.layer import Layer
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, digest: str=None, features: str=None, last_pulled: str=None, last_pushed: str=None, layers: List[Layer]=None, os: str=None, os_features: str=None, os_version: str=None, size: int=None, status: str=None, variant: str=None):
        """Image - a model defined in OpenAPI

        :param architecture: The architecture of this Image.
        :param digest: The digest of this Image.
        :param features: The features of this Image.
        :param last_pulled: The last_pulled of this Image.
        :param last_pushed: The last_pushed of this Image.
        :param layers: The layers of this Image.
        :param os: The os of this Image.
        :param os_features: The os_features of this Image.
        :param os_version: The os_version of this Image.
        :param size: The size of this Image.
        :param status: The status of this Image.
        :param variant: The variant of this Image.
        """
        self.openapi_types = {
            'architecture': str,
            'digest': str,
            'features': str,
            'last_pulled': str,
            'last_pushed': str,
            'layers': List[Layer],
            'os': str,
            'os_features': str,
            'os_version': str,
            'size': int,
            'status': str,
            'variant': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'digest': 'digest',
            'features': 'features',
            'last_pulled': 'last_pulled',
            'last_pushed': 'last_pushed',
            'layers': 'layers',
            'os': 'os',
            'os_features': 'os_features',
            'os_version': 'os_version',
            'size': 'size',
            'status': 'status',
            'variant': 'variant'
        }

        self._architecture = architecture
        self._digest = digest
        self._features = features
        self._last_pulled = last_pulled
        self._last_pushed = last_pushed
        self._layers = layers
        self._os = os
        self._os_features = os_features
        self._os_version = os_version
        self._size = size
        self._status = status
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this Image.

        CPU architecture

        :return: The architecture of this Image.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Image.

        CPU architecture

        :param architecture: The architecture of this Image.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def digest(self):
        """Gets the digest of this Image.

        image digest

        :return: The digest of this Image.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this Image.

        image digest

        :param digest: The digest of this Image.
        :type digest: str
        """

        self._digest = digest

    @property
    def features(self):
        """Gets the features of this Image.

        CPU features

        :return: The features of this Image.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Image.

        CPU features

        :param features: The features of this Image.
        :type features: str
        """

        self._features = features

    @property
    def last_pulled(self):
        """Gets the last_pulled of this Image.

        datetime of last pull

        :return: The last_pulled of this Image.
        :rtype: str
        """
        return self._last_pulled

    @last_pulled.setter
    def last_pulled(self, last_pulled):
        """Sets the last_pulled of this Image.

        datetime of last pull

        :param last_pulled: The last_pulled of this Image.
        :type last_pulled: str
        """

        self._last_pulled = last_pulled

    @property
    def last_pushed(self):
        """Gets the last_pushed of this Image.

        datetime of last push

        :return: The last_pushed of this Image.
        :rtype: str
        """
        return self._last_pushed

    @last_pushed.setter
    def last_pushed(self, last_pushed):
        """Sets the last_pushed of this Image.

        datetime of last push

        :param last_pushed: The last_pushed of this Image.
        :type last_pushed: str
        """

        self._last_pushed = last_pushed

    @property
    def layers(self):
        """Gets the layers of this Image.


        :return: The layers of this Image.
        :rtype: List[Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this Image.


        :param layers: The layers of this Image.
        :type layers: List[Layer]
        """

        self._layers = layers

    @property
    def os(self):
        """Gets the os of this Image.

        operating system

        :return: The os of this Image.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Image.

        operating system

        :param os: The os of this Image.
        :type os: str
        """

        self._os = os

    @property
    def os_features(self):
        """Gets the os_features of this Image.

        OS features

        :return: The os_features of this Image.
        :rtype: str
        """
        return self._os_features

    @os_features.setter
    def os_features(self, os_features):
        """Sets the os_features of this Image.

        OS features

        :param os_features: The os_features of this Image.
        :type os_features: str
        """

        self._os_features = os_features

    @property
    def os_version(self):
        """Gets the os_version of this Image.

        OS version

        :return: The os_version of this Image.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Image.

        OS version

        :param os_version: The os_version of this Image.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def size(self):
        """Gets the size of this Image.

        size of the image

        :return: The size of this Image.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Image.

        size of the image

        :param size: The size of this Image.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this Image.

        Status of the image

        :return: The status of this Image.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Image.

        Status of the image

        :param status: The status of this Image.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def variant(self):
        """Gets the variant of this Image.

        CPU variant

        :return: The variant of this Image.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this Image.

        CPU variant

        :param variant: The variant of this Image.
        :type variant: str
        """

        self._variant = variant
