# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator: int=None, full_size: int=None, id: int=None, images: Image=None, last_updated: str=None, last_updater: int=None, last_updater_username: str=None, name: str=None, repository: int=None, status: str=None, tag_last_pulled: str=None, tag_last_pushed: str=None, v2: str=None):
        """Tag - a model defined in OpenAPI

        :param creator: The creator of this Tag.
        :param full_size: The full_size of this Tag.
        :param id: The id of this Tag.
        :param images: The images of this Tag.
        :param last_updated: The last_updated of this Tag.
        :param last_updater: The last_updater of this Tag.
        :param last_updater_username: The last_updater_username of this Tag.
        :param name: The name of this Tag.
        :param repository: The repository of this Tag.
        :param status: The status of this Tag.
        :param tag_last_pulled: The tag_last_pulled of this Tag.
        :param tag_last_pushed: The tag_last_pushed of this Tag.
        :param v2: The v2 of this Tag.
        """
        self.openapi_types = {
            'creator': int,
            'full_size': int,
            'id': int,
            'images': Image,
            'last_updated': str,
            'last_updater': int,
            'last_updater_username': str,
            'name': str,
            'repository': int,
            'status': str,
            'tag_last_pulled': str,
            'tag_last_pushed': str,
            'v2': str
        }

        self.attribute_map = {
            'creator': 'creator',
            'full_size': 'full_size',
            'id': 'id',
            'images': 'images',
            'last_updated': 'last_updated',
            'last_updater': 'last_updater',
            'last_updater_username': 'last_updater_username',
            'name': 'name',
            'repository': 'repository',
            'status': 'status',
            'tag_last_pulled': 'tag_last_pulled',
            'tag_last_pushed': 'tag_last_pushed',
            'v2': 'v2'
        }

        self._creator = creator
        self._full_size = full_size
        self._id = id
        self._images = images
        self._last_updated = last_updated
        self._last_updater = last_updater
        self._last_updater_username = last_updater_username
        self._name = name
        self._repository = repository
        self._status = status
        self._tag_last_pulled = tag_last_pulled
        self._tag_last_pushed = tag_last_pushed
        self._v2 = v2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator(self):
        """Gets the creator of this Tag.

        ID of the user that pushed the tag

        :return: The creator of this Tag.
        :rtype: int
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Tag.

        ID of the user that pushed the tag

        :param creator: The creator of this Tag.
        :type creator: int
        """

        self._creator = creator

    @property
    def full_size(self):
        """Gets the full_size of this Tag.

        compressed size (sum of all layers) of the tagged image

        :return: The full_size of this Tag.
        :rtype: int
        """
        return self._full_size

    @full_size.setter
    def full_size(self, full_size):
        """Sets the full_size of this Tag.

        compressed size (sum of all layers) of the tagged image

        :param full_size: The full_size of this Tag.
        :type full_size: int
        """

        self._full_size = full_size

    @property
    def id(self):
        """Gets the id of this Tag.

        tag ID

        :return: The id of this Tag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        tag ID

        :param id: The id of this Tag.
        :type id: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this Tag.


        :return: The images of this Tag.
        :rtype: Image
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Tag.


        :param images: The images of this Tag.
        :type images: Image
        """

        self._images = images

    @property
    def last_updated(self):
        """Gets the last_updated of this Tag.

        datetime of last update

        :return: The last_updated of this Tag.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Tag.

        datetime of last update

        :param last_updated: The last_updated of this Tag.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def last_updater(self):
        """Gets the last_updater of this Tag.

        ID of the last user that updated the tag

        :return: The last_updater of this Tag.
        :rtype: int
        """
        return self._last_updater

    @last_updater.setter
    def last_updater(self, last_updater):
        """Sets the last_updater of this Tag.

        ID of the last user that updated the tag

        :param last_updater: The last_updater of this Tag.
        :type last_updater: int
        """

        self._last_updater = last_updater

    @property
    def last_updater_username(self):
        """Gets the last_updater_username of this Tag.

        Hub username of the user that updated the tag

        :return: The last_updater_username of this Tag.
        :rtype: str
        """
        return self._last_updater_username

    @last_updater_username.setter
    def last_updater_username(self, last_updater_username):
        """Sets the last_updater_username of this Tag.

        Hub username of the user that updated the tag

        :param last_updater_username: The last_updater_username of this Tag.
        :type last_updater_username: str
        """

        self._last_updater_username = last_updater_username

    @property
    def name(self):
        """Gets the name of this Tag.

        name of the tag

        :return: The name of this Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.

        name of the tag

        :param name: The name of this Tag.
        :type name: str
        """

        self._name = name

    @property
    def repository(self):
        """Gets the repository of this Tag.

        repository ID

        :return: The repository of this Tag.
        :rtype: int
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Tag.

        repository ID

        :param repository: The repository of this Tag.
        :type repository: int
        """

        self._repository = repository

    @property
    def status(self):
        """Gets the status of this Tag.

        whether a tag has been pushed to or pulled in the past month

        :return: The status of this Tag.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Tag.

        whether a tag has been pushed to or pulled in the past month

        :param status: The status of this Tag.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tag_last_pulled(self):
        """Gets the tag_last_pulled of this Tag.

        datetime of last pull

        :return: The tag_last_pulled of this Tag.
        :rtype: str
        """
        return self._tag_last_pulled

    @tag_last_pulled.setter
    def tag_last_pulled(self, tag_last_pulled):
        """Sets the tag_last_pulled of this Tag.

        datetime of last pull

        :param tag_last_pulled: The tag_last_pulled of this Tag.
        :type tag_last_pulled: str
        """

        self._tag_last_pulled = tag_last_pulled

    @property
    def tag_last_pushed(self):
        """Gets the tag_last_pushed of this Tag.

        datetime of last push

        :return: The tag_last_pushed of this Tag.
        :rtype: str
        """
        return self._tag_last_pushed

    @tag_last_pushed.setter
    def tag_last_pushed(self, tag_last_pushed):
        """Sets the tag_last_pushed of this Tag.

        datetime of last push

        :param tag_last_pushed: The tag_last_pushed of this Tag.
        :type tag_last_pushed: str
        """

        self._tag_last_pushed = tag_last_pushed

    @property
    def v2(self):
        """Gets the v2 of this Tag.

        repository API version

        :return: The v2 of this Tag.
        :rtype: str
        """
        return self._v2

    @v2.setter
    def v2(self, v2):
        """Sets the v2 of this Tag.

        repository API version

        :param v2: The v2 of this Tag.
        :type v2: str
        """

        self._v2 = v2
