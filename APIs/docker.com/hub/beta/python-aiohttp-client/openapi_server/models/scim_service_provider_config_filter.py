# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScimServiceProviderConfigFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, supported: bool=None):
        """ScimServiceProviderConfigFilter - a model defined in OpenAPI

        :param max_results: The max_results of this ScimServiceProviderConfigFilter.
        :param supported: The supported of this ScimServiceProviderConfigFilter.
        """
        self.openapi_types = {
            'max_results': int,
            'supported': bool
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'supported': 'supported'
        }

        self._max_results = max_results
        self._supported = supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScimServiceProviderConfigFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scim_service_provider_config_filter of this ScimServiceProviderConfigFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ScimServiceProviderConfigFilter.


        :return: The max_results of this ScimServiceProviderConfigFilter.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ScimServiceProviderConfigFilter.


        :param max_results: The max_results of this ScimServiceProviderConfigFilter.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def supported(self):
        """Gets the supported of this ScimServiceProviderConfigFilter.


        :return: The supported of this ScimServiceProviderConfigFilter.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this ScimServiceProviderConfigFilter.


        :param supported: The supported of this ScimServiceProviderConfigFilter.
        :type supported: bool
        """

        self._supported = supported
