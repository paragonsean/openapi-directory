# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAccessTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scopes: List[str]=None, token_label: str=None):
        """CreateAccessTokenRequest - a model defined in OpenAPI

        :param scopes: The scopes of this CreateAccessTokenRequest.
        :param token_label: The token_label of this CreateAccessTokenRequest.
        """
        self.openapi_types = {
            'scopes': List[str],
            'token_label': str
        }

        self.attribute_map = {
            'scopes': 'scopes',
            'token_label': 'token_label'
        }

        self._scopes = scopes
        self._token_label = token_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccessTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createAccessTokenRequest of this CreateAccessTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scopes(self):
        """Gets the scopes of this CreateAccessTokenRequest.

        Valid scopes: \"repo:admin\", \"repo:write\", \"repo:read\", \"repo:public_read\" 

        :return: The scopes of this CreateAccessTokenRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this CreateAccessTokenRequest.

        Valid scopes: \"repo:admin\", \"repo:write\", \"repo:read\", \"repo:public_read\" 

        :param scopes: The scopes of this CreateAccessTokenRequest.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def token_label(self):
        """Gets the token_label of this CreateAccessTokenRequest.

        Friendly name for you to identify the token.

        :return: The token_label of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._token_label

    @token_label.setter
    def token_label(self, token_label):
        """Sets the token_label of this CreateAccessTokenRequest.

        Friendly name for you to identify the token.

        :param token_label: The token_label of this CreateAccessTokenRequest.
        :type token_label: str
        """
        if token_label is None:
            raise ValueError("Invalid value for `token_label`, must not be `None`")

        self._token_label = token_label
