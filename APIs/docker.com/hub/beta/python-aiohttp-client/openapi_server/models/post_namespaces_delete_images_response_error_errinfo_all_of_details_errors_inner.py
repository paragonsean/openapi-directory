# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, error: str=None, repository: str=None):
        """PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner - a model defined in OpenAPI

        :param digest: The digest of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :param error: The error of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :param repository: The repository of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        """
        self.openapi_types = {
            'digest': str,
            'error': str,
            'repository': str
        }

        self.attribute_map = {
            'digest': 'digest',
            'error': 'error',
            'repository': 'repository'
        }

        self._digest = digest
        self._error = error
        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostNamespacesDeleteImagesResponseError_errinfo_allOf_details_errors_inner of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.

        Digest of the image that caused the error.

        :return: The digest of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.

        Digest of the image that caused the error.

        :param digest: The digest of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :type digest: str
        """

        self._digest = digest

    @property
    def error(self):
        """Gets the error of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.

        Error type.

        :return: The error of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.

        Error type.

        :param error: The error of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :type error: str
        """
        allowed_values = ["not_found", "unauthorized", "child_manifest"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def repository(self):
        """Gets the repository of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.

        Name of the repository of the image that caused the error.

        :return: The repository of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.

        Name of the repository of the image that caused the error.

        :param repository: The repository of this PostNamespacesDeleteImagesResponseErrorErrinfoAllOfDetailsErrorsInner.
        :type repository: str
        """

        self._repository = repository
