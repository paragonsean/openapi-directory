# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scim_user_name import ScimUserName
from openapi_server import util


class V2Scim20UsersPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ScimUserName=None, schemas: List[str]=None, user_name: str=None):
        """V2Scim20UsersPostRequest - a model defined in OpenAPI

        :param name: The name of this V2Scim20UsersPostRequest.
        :param schemas: The schemas of this V2Scim20UsersPostRequest.
        :param user_name: The user_name of this V2Scim20UsersPostRequest.
        """
        self.openapi_types = {
            'name': ScimUserName,
            'schemas': List[str],
            'user_name': str
        }

        self.attribute_map = {
            'name': 'name',
            'schemas': 'schemas',
            'user_name': 'userName'
        }

        self._name = name
        self._schemas = schemas
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V2Scim20UsersPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _v2_scim_2_0_Users_post_request of this V2Scim20UsersPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this V2Scim20UsersPostRequest.


        :return: The name of this V2Scim20UsersPostRequest.
        :rtype: ScimUserName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2Scim20UsersPostRequest.


        :param name: The name of this V2Scim20UsersPostRequest.
        :type name: ScimUserName
        """

        self._name = name

    @property
    def schemas(self):
        """Gets the schemas of this V2Scim20UsersPostRequest.


        :return: The schemas of this V2Scim20UsersPostRequest.
        :rtype: List[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this V2Scim20UsersPostRequest.


        :param schemas: The schemas of this V2Scim20UsersPostRequest.
        :type schemas: List[str]
        """
        if schemas is None:
            raise ValueError("Invalid value for `schemas`, must not be `None`")

        self._schemas = schemas

    @property
    def user_name(self):
        """Gets the user_name of this V2Scim20UsersPostRequest.

        The user's email address. This must be reachable via email.

        :return: The user_name of this V2Scim20UsersPostRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this V2Scim20UsersPostRequest.

        The user's email address. This must be reachable via email.

        :param user_name: The user_name of this V2Scim20UsersPostRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
