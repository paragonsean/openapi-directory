# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostUsersLoginErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, login_2fa_token: str=None):
        """PostUsersLoginErrorResponse - a model defined in OpenAPI

        :param detail: The detail of this PostUsersLoginErrorResponse.
        :param login_2fa_token: The login_2fa_token of this PostUsersLoginErrorResponse.
        """
        self.openapi_types = {
            'detail': str,
            'login_2fa_token': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'login_2fa_token': 'login_2fa_token'
        }

        self._detail = detail
        self._login_2fa_token = login_2fa_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostUsersLoginErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostUsersLoginErrorResponse of this PostUsersLoginErrorResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this PostUsersLoginErrorResponse.

        Description of the error.

        :return: The detail of this PostUsersLoginErrorResponse.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this PostUsersLoginErrorResponse.

        Description of the error.

        :param detail: The detail of this PostUsersLoginErrorResponse.
        :type detail: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def login_2fa_token(self):
        """Gets the login_2fa_token of this PostUsersLoginErrorResponse.

        Short time lived token to be used on `/v2/users/2fa-login` to complete the authentication. This field is present only if 2FA is enabled.

        :return: The login_2fa_token of this PostUsersLoginErrorResponse.
        :rtype: str
        """
        return self._login_2fa_token

    @login_2fa_token.setter
    def login_2fa_token(self, login_2fa_token):
        """Sets the login_2fa_token of this PostUsersLoginErrorResponse.

        Short time lived token to be used on `/v2/users/2fa-login` to complete the authentication. This field is present only if 2FA is enabled.

        :param login_2fa_token: The login_2fa_token of this PostUsersLoginErrorResponse.
        :type login_2fa_token: str
        """

        self._login_2fa_token = login_2fa_token
