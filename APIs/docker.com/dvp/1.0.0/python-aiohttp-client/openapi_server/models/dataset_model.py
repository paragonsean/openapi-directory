# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_type import DatasetType
from openapi_server.models.dataview_type import DataviewType
from openapi_server.models.timespan_type import TimespanType
from openapi_server import util


class DatasetModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: DatasetType=None, timespans: List[TimespanType]=None, views: List[DataviewType]=None):
        """DatasetModel - a model defined in OpenAPI

        :param name: The name of this DatasetModel.
        :param timespans: The timespans of this DatasetModel.
        :param views: The views of this DatasetModel.
        """
        self.openapi_types = {
            'name': DatasetType,
            'timespans': List[TimespanType],
            'views': List[DataviewType]
        }

        self.attribute_map = {
            'name': 'name',
            'timespans': 'timespans',
            'views': 'views'
        }

        self._name = name
        self._timespans = timespans
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetModel of this DatasetModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DatasetModel.


        :return: The name of this DatasetModel.
        :rtype: DatasetType
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetModel.


        :param name: The name of this DatasetModel.
        :type name: DatasetType
        """

        self._name = name

    @property
    def timespans(self):
        """Gets the timespans of this DatasetModel.


        :return: The timespans of this DatasetModel.
        :rtype: List[TimespanType]
        """
        return self._timespans

    @timespans.setter
    def timespans(self, timespans):
        """Sets the timespans of this DatasetModel.


        :param timespans: The timespans of this DatasetModel.
        :type timespans: List[TimespanType]
        """

        self._timespans = timespans

    @property
    def views(self):
        """Gets the views of this DatasetModel.


        :return: The views of this DatasetModel.
        :rtype: List[DataviewType]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this DatasetModel.


        :param views: The views of this DatasetModel.
        :type views: List[DataviewType]
        """

        self._views = views
