/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Users2FALoginRequest model module.
 * @module model/Users2FALoginRequest
 * @version 1.0.0
 */
class Users2FALoginRequest {
    /**
     * Constructs a new <code>Users2FALoginRequest</code>.
     * Second factor user login details
     * @alias module:model/Users2FALoginRequest
     * @param code {String} The Time-based One-Time Password of the Docker Hub account to authenticate with.
     * @param login2faToken {String} The intermediate 2FA token returned from `/v2/users/login` API.
     */
    constructor(code, login2faToken) { 
        
        Users2FALoginRequest.initialize(this, code, login2faToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, login2faToken) { 
        obj['code'] = code;
        obj['login_2fa_token'] = login2faToken;
    }

    /**
     * Constructs a <code>Users2FALoginRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Users2FALoginRequest} obj Optional instance to populate.
     * @return {module:model/Users2FALoginRequest} The populated <code>Users2FALoginRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Users2FALoginRequest();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('login_2fa_token')) {
                obj['login_2fa_token'] = ApiClient.convertToType(data['login_2fa_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Users2FALoginRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Users2FALoginRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Users2FALoginRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['login_2fa_token'] && !(typeof data['login_2fa_token'] === 'string' || data['login_2fa_token'] instanceof String)) {
            throw new Error("Expected the field `login_2fa_token` to be a primitive type in the JSON string but got " + data['login_2fa_token']);
        }

        return true;
    }


}

Users2FALoginRequest.RequiredProperties = ["code", "login_2fa_token"];

/**
 * The Time-based One-Time Password of the Docker Hub account to authenticate with.
 * @member {String} code
 */
Users2FALoginRequest.prototype['code'] = undefined;

/**
 * The intermediate 2FA token returned from `/v2/users/login` API.
 * @member {String} login_2fa_token
 */
Users2FALoginRequest.prototype['login_2fa_token'] = undefined;






export default Users2FALoginRequest;

