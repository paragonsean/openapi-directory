/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MonthData from './MonthData';
import MonthModel from './MonthModel';
import WeekData from './WeekData';
import WeekModel from './WeekModel';

/**
 * The TimespanData model module.
 * @module model/TimespanData
 * @version 1.0.0
 */
class TimespanData {
    /**
     * Constructs a new <code>TimespanData</code>.
     * @alias module:model/TimespanData
     * @param {(module:model/MonthData|module:model/WeekData)} instance The actual instance to initialize TimespanData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "MonthData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MonthData.validateJSON(instance); // throw an exception if no match
                // create MonthData from JS object
                this.actualInstance = MonthData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MonthData
            errorMessages.push("Failed to construct MonthData: " + err)
        }

        try {
            if (typeof instance === "WeekData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WeekData.validateJSON(instance); // throw an exception if no match
                // create WeekData from JS object
                this.actualInstance = WeekData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WeekData
            errorMessages.push("Failed to construct WeekData: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `TimespanData` with oneOf schemas MonthData, WeekData. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `TimespanData` with oneOf schemas MonthData, WeekData. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TimespanData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimespanData} obj Optional instance to populate.
     * @return {module:model/TimespanData} The populated <code>TimespanData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TimespanData(data);
    }

    /**
     * Gets the actual instance, which can be <code>MonthData</code>, <code>WeekData</code>.
     * @return {(module:model/MonthData|module:model/WeekData)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MonthData</code>, <code>WeekData</code>.
     * @param {(module:model/MonthData|module:model/WeekData)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TimespanData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TimespanData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TimespanData} An instance of TimespanData.
     */
    static fromJSON = function(json_string){
        return TimespanData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Array.<module:model/MonthModel>} months
 */
TimespanData.prototype['months'] = undefined;

/**
 * @member {Array.<module:model/WeekModel>} weeks
 */
TimespanData.prototype['weeks'] = undefined;


TimespanData.OneOf = ["MonthData", "WeekData"];

export default TimespanData;

