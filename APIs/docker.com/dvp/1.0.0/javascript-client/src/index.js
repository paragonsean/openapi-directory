/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DatasetModel from './model/DatasetModel';
import DatasetType from './model/DatasetType';
import DataviewType from './model/DataviewType';
import MonthData from './model/MonthData';
import MonthModel from './model/MonthModel';
import NamespaceData from './model/NamespaceData';
import NamespaceMetadata from './model/NamespaceMetadata';
import PostUsers2FALoginErrorResponse from './model/PostUsers2FALoginErrorResponse';
import PostUsersLoginErrorResponse from './model/PostUsersLoginErrorResponse';
import PostUsersLoginSuccessResponse from './model/PostUsersLoginSuccessResponse';
import ResponseData from './model/ResponseData';
import ResponseDataFile from './model/ResponseDataFile';
import TimespanData from './model/TimespanData';
import TimespanModel from './model/TimespanModel';
import TimespanType from './model/TimespanType';
import Users2FALoginRequest from './model/Users2FALoginRequest';
import UsersLoginRequest from './model/UsersLoginRequest';
import WeekData from './model/WeekData';
import WeekModel from './model/WeekModel';
import YearData from './model/YearData';
import YearModel from './model/YearModel';
import AuthenticationApi from './api/AuthenticationApi';
import DiscoveryApi from './api/DiscoveryApi';
import NamespacesApi from './api/NamespacesApi';


/**
* The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DvpDataApi = require('index'); // See note below*.
* var xxxSvc = new DvpDataApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DvpDataApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DvpDataApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DvpDataApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DatasetModel model constructor.
     * @property {module:model/DatasetModel}
     */
    DatasetModel,

    /**
     * The DatasetType model constructor.
     * @property {module:model/DatasetType}
     */
    DatasetType,

    /**
     * The DataviewType model constructor.
     * @property {module:model/DataviewType}
     */
    DataviewType,

    /**
     * The MonthData model constructor.
     * @property {module:model/MonthData}
     */
    MonthData,

    /**
     * The MonthModel model constructor.
     * @property {module:model/MonthModel}
     */
    MonthModel,

    /**
     * The NamespaceData model constructor.
     * @property {module:model/NamespaceData}
     */
    NamespaceData,

    /**
     * The NamespaceMetadata model constructor.
     * @property {module:model/NamespaceMetadata}
     */
    NamespaceMetadata,

    /**
     * The PostUsers2FALoginErrorResponse model constructor.
     * @property {module:model/PostUsers2FALoginErrorResponse}
     */
    PostUsers2FALoginErrorResponse,

    /**
     * The PostUsersLoginErrorResponse model constructor.
     * @property {module:model/PostUsersLoginErrorResponse}
     */
    PostUsersLoginErrorResponse,

    /**
     * The PostUsersLoginSuccessResponse model constructor.
     * @property {module:model/PostUsersLoginSuccessResponse}
     */
    PostUsersLoginSuccessResponse,

    /**
     * The ResponseData model constructor.
     * @property {module:model/ResponseData}
     */
    ResponseData,

    /**
     * The ResponseDataFile model constructor.
     * @property {module:model/ResponseDataFile}
     */
    ResponseDataFile,

    /**
     * The TimespanData model constructor.
     * @property {module:model/TimespanData}
     */
    TimespanData,

    /**
     * The TimespanModel model constructor.
     * @property {module:model/TimespanModel}
     */
    TimespanModel,

    /**
     * The TimespanType model constructor.
     * @property {module:model/TimespanType}
     */
    TimespanType,

    /**
     * The Users2FALoginRequest model constructor.
     * @property {module:model/Users2FALoginRequest}
     */
    Users2FALoginRequest,

    /**
     * The UsersLoginRequest model constructor.
     * @property {module:model/UsersLoginRequest}
     */
    UsersLoginRequest,

    /**
     * The WeekData model constructor.
     * @property {module:model/WeekData}
     */
    WeekData,

    /**
     * The WeekModel model constructor.
     * @property {module:model/WeekModel}
     */
    WeekModel,

    /**
     * The YearData model constructor.
     * @property {module:model/YearData}
     */
    YearData,

    /**
     * The YearModel model constructor.
     * @property {module:model/YearModel}
     */
    YearModel,

    /**
    * The AuthenticationApi service constructor.
    * @property {module:api/AuthenticationApi}
    */
    AuthenticationApi,

    /**
    * The DiscoveryApi service constructor.
    * @property {module:api/DiscoveryApi}
    */
    DiscoveryApi,

    /**
    * The NamespacesApi service constructor.
    * @property {module:api/NamespacesApi}
    */
    NamespacesApi
};
