/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataviewType from '../model/DataviewType';
import ResponseData from '../model/ResponseData';
import TimespanData from '../model/TimespanData';
import TimespanModel from '../model/TimespanModel';
import TimespanType from '../model/TimespanType';
import YearData from '../model/YearData';

/**
* Namespaces service.
* @module api/NamespacesApi
* @version 1.0.0
*/
export default class NamespacesApi {

    /**
    * Constructs a new NamespacesApi. 
    * @alias module:api/NamespacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNamespaceDataByTimespan operation.
     * @callback module:api/NamespacesApi~getNamespaceDataByTimespanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get namespace data for timespan
     * Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
     * @param {String} namespace Namespace to fetch data for
     * @param {Number} year Year to fetch data for
     * @param {module:model/TimespanType} timespantype Type of timespan to fetch data for
     * @param {Number} timespan Timespan to fetch data for
     * @param {module:model/DataviewType} dataview Type of data to fetch
     * @param {module:api/NamespacesApi~getNamespaceDataByTimespanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseData}
     */
    getNamespaceDataByTimespan(namespace, year, timespantype, timespan, dataview, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespaceDataByTimespan");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getNamespaceDataByTimespan");
      }
      // verify the required parameter 'timespantype' is set
      if (timespantype === undefined || timespantype === null) {
        throw new Error("Missing the required parameter 'timespantype' when calling getNamespaceDataByTimespan");
      }
      // verify the required parameter 'timespan' is set
      if (timespan === undefined || timespan === null) {
        throw new Error("Missing the required parameter 'timespan' when calling getNamespaceDataByTimespan");
      }
      // verify the required parameter 'dataview' is set
      if (dataview === undefined || dataview === null) {
        throw new Error("Missing the required parameter 'dataview' when calling getNamespaceDataByTimespan");
      }

      let pathParams = {
        'namespace': namespace,
        'year': year,
        'timespantype': timespantype,
        'timespan': timespan,
        'dataview': dataview
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HubAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseData;
      return this.apiClient.callApi(
        '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespaceTimespanMetadata operation.
     * @callback module:api/NamespacesApi~getNamespaceTimespanMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimespanModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get namespace metadata for timespan
     * Gets info about data for the given namespace and timespan
     * @param {String} namespace Namespace to fetch data for
     * @param {Number} year Year to fetch data for
     * @param {module:model/TimespanType} timespantype Type of timespan to fetch data for
     * @param {Number} timespan Timespan to fetch data for
     * @param {module:api/NamespacesApi~getNamespaceTimespanMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimespanModel}
     */
    getNamespaceTimespanMetadata(namespace, year, timespantype, timespan, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespaceTimespanMetadata");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getNamespaceTimespanMetadata");
      }
      // verify the required parameter 'timespantype' is set
      if (timespantype === undefined || timespantype === null) {
        throw new Error("Missing the required parameter 'timespantype' when calling getNamespaceTimespanMetadata");
      }
      // verify the required parameter 'timespan' is set
      if (timespan === undefined || timespan === null) {
        throw new Error("Missing the required parameter 'timespan' when calling getNamespaceTimespanMetadata");
      }

      let pathParams = {
        'namespace': namespace,
        'year': year,
        'timespantype': timespantype,
        'timespan': timespan
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HubAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimespanModel;
      return this.apiClient.callApi(
        '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespaceTimespans operation.
     * @callback module:api/NamespacesApi~getNamespaceTimespansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimespanData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get timespans with data
     * Gets a list of timespans of the given type that have data for the given namespace and year
     * @param {String} namespace Namespace to fetch data for
     * @param {Number} year Year to fetch data for
     * @param {module:model/TimespanType} timespantype Type of timespan to fetch data for
     * @param {module:api/NamespacesApi~getNamespaceTimespansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimespanData}
     */
    getNamespaceTimespans(namespace, year, timespantype, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespaceTimespans");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getNamespaceTimespans");
      }
      // verify the required parameter 'timespantype' is set
      if (timespantype === undefined || timespantype === null) {
        throw new Error("Missing the required parameter 'timespantype' when calling getNamespaceTimespans");
      }

      let pathParams = {
        'namespace': namespace,
        'year': year,
        'timespantype': timespantype
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HubAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimespanData;
      return this.apiClient.callApi(
        '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespaceYears operation.
     * @callback module:api/NamespacesApi~getNamespaceYearsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YearData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get years with data
     * Gets a list of years that have data for the given namespace
     * @param {String} namespace Namespace to fetch data for
     * @param {module:api/NamespacesApi~getNamespaceYearsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YearData}
     */
    getNamespaceYears(namespace, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getNamespaceYears");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HubAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = YearData;
      return this.apiClient.callApi(
        '/namespaces/{namespace}/pulls/exports/years', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
