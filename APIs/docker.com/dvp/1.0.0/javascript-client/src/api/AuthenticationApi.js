/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PostUsers2FALoginErrorResponse from '../model/PostUsers2FALoginErrorResponse';
import PostUsersLoginErrorResponse from '../model/PostUsersLoginErrorResponse';
import PostUsersLoginSuccessResponse from '../model/PostUsersLoginSuccessResponse';
import Users2FALoginRequest from '../model/Users2FALoginRequest';
import UsersLoginRequest from '../model/UsersLoginRequest';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postUsers2FALogin operation.
     * @callback module:api/AuthenticationApi~postUsers2FALoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUsersLoginSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Second factor authentication.
     * When a user has 2FA enabled, this is the second call to perform after `/v2/users/login` call.  Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param {module:model/Users2FALoginRequest} users2FALoginRequest Login details.
     * @param {module:api/AuthenticationApi~postUsers2FALoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostUsersLoginSuccessResponse}
     */
    postUsers2FALogin(users2FALoginRequest, opts, callback) {
      opts = opts || {};
      let postBody = users2FALoginRequest;
      // verify the required parameter 'users2FALoginRequest' is set
      if (users2FALoginRequest === undefined || users2FALoginRequest === null) {
        throw new Error("Missing the required parameter 'users2FALoginRequest' when calling postUsers2FALogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUsersLoginSuccessResponse;
      let basePaths = ['https://hub.docker.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/users/2fa-login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the postUsersLogin operation.
     * @callback module:api/AuthenticationApi~postUsersLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUsersLoginSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an authentication token
     * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param {module:model/UsersLoginRequest} usersLoginRequest Login details.
     * @param {module:api/AuthenticationApi~postUsersLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostUsersLoginSuccessResponse}
     */
    postUsersLogin(usersLoginRequest, opts, callback) {
      opts = opts || {};
      let postBody = usersLoginRequest;
      // verify the required parameter 'usersLoginRequest' is set
      if (usersLoginRequest === undefined || usersLoginRequest === null) {
        throw new Error("Missing the required parameter 'usersLoginRequest' when calling postUsersLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUsersLoginSuccessResponse;
      let basePaths = ['https://hub.docker.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
