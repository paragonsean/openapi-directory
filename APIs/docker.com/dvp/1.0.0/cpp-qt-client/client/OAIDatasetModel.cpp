/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetModel::OAIDatasetModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetModel::OAIDatasetModel() {
    this->initializeModel();
}

OAIDatasetModel::~OAIDatasetModel() {}

void OAIDatasetModel::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_timespans_isSet = false;
    m_timespans_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIDatasetModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetModel::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timespans_isValid = ::OpenAPI::fromJsonValue(m_timespans, json[QString("timespans")]);
    m_timespans_isSet = !json[QString("timespans")].isNull() && m_timespans_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIDatasetModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetModel::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timespans.size() > 0) {
        obj.insert(QString("timespans"), ::OpenAPI::toJsonValue(m_timespans));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

OAIDatasetType OAIDatasetModel::getName() const {
    return m_name;
}
void OAIDatasetModel::setName(const OAIDatasetType &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatasetModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatasetModel::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITimespanType> OAIDatasetModel::getTimespans() const {
    return m_timespans;
}
void OAIDatasetModel::setTimespans(const QList<OAITimespanType> &timespans) {
    m_timespans = timespans;
    m_timespans_isSet = true;
}

bool OAIDatasetModel::is_timespans_Set() const{
    return m_timespans_isSet;
}

bool OAIDatasetModel::is_timespans_Valid() const{
    return m_timespans_isValid;
}

QList<OAIDataviewType> OAIDatasetModel::getViews() const {
    return m_views;
}
void OAIDatasetModel::setViews(const QList<OAIDataviewType> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIDatasetModel::is_views_Set() const{
    return m_views_isSet;
}

bool OAIDatasetModel::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIDatasetModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timespans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
