/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataviewType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataviewType::OAIDataviewType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataviewType::OAIDataviewType() {
    this->initializeModel();
}

OAIDataviewType::~OAIDataviewType() {}

void OAIDataviewType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataviewType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataviewType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("raw", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataviewType::RAW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("summary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataviewType::SUMMARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("repo-summary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataviewType::REPO_SUMMARY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataviewType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataviewType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataviewType::RAW:
            val = "raw";
            break;
        case eOAIDataviewType::SUMMARY:
            val = "summary";
            break;
        case eOAIDataviewType::REPO_SUMMARY:
            val = "repo-summary";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataviewType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataviewType::eOAIDataviewType OAIDataviewType::getValue() const {
    return m_value;
}

void OAIDataviewType::setValue(const OAIDataviewType::eOAIDataviewType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataviewType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataviewType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
