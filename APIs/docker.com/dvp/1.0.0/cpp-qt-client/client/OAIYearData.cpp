/**
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYearData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYearData::OAIYearData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYearData::OAIYearData() {
    this->initializeModel();
}

OAIYearData::~OAIYearData() {}

void OAIYearData::initializeModel() {

    m_years_isSet = false;
    m_years_isValid = false;
}

void OAIYearData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYearData::fromJsonObject(QJsonObject json) {

    m_years_isValid = ::OpenAPI::fromJsonValue(m_years, json[QString("years")]);
    m_years_isSet = !json[QString("years")].isNull() && m_years_isValid;
}

QString OAIYearData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYearData::asJsonObject() const {
    QJsonObject obj;
    if (m_years.size() > 0) {
        obj.insert(QString("years"), ::OpenAPI::toJsonValue(m_years));
    }
    return obj;
}

QList<OAIYearModel> OAIYearData::getYears() const {
    return m_years;
}
void OAIYearData::setYears(const QList<OAIYearModel> &years) {
    m_years = years;
    m_years_isSet = true;
}

bool OAIYearData::is_years_Set() const{
    return m_years_isSet;
}

bool OAIYearData::is_years_Valid() const{
    return m_years_isValid;
}

bool OAIYearData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_years.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYearData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
