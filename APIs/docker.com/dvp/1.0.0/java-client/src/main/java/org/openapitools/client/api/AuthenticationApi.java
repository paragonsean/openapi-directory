/*
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PostUsers2FALoginErrorResponse;
import org.openapitools.client.model.PostUsersLoginErrorResponse;
import org.openapitools.client.model.PostUsersLoginSuccessResponse;
import org.openapitools.client.model.Users2FALoginRequest;
import org.openapitools.client.model.UsersLoginRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postUsers2FALogin
     * @param users2FALoginRequest Login details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsers2FALoginCall(Users2FALoginRequest users2FALoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://hub.docker.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = users2FALoginRequest;

        // create path and map variables
        String localVarPath = "/v2/users/2fa-login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUsers2FALoginValidateBeforeCall(Users2FALoginRequest users2FALoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'users2FALoginRequest' is set
        if (users2FALoginRequest == null) {
            throw new ApiException("Missing the required parameter 'users2FALoginRequest' when calling postUsers2FALogin(Async)");
        }

        return postUsers2FALoginCall(users2FALoginRequest, _callback);

    }

    /**
     * Second factor authentication.
     * When a user has 2FA enabled, this is the second call to perform after &#x60;/v2/users/login&#x60; call.  Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param users2FALoginRequest Login details. (required)
     * @return PostUsersLoginSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public PostUsersLoginSuccessResponse postUsers2FALogin(Users2FALoginRequest users2FALoginRequest) throws ApiException {
        ApiResponse<PostUsersLoginSuccessResponse> localVarResp = postUsers2FALoginWithHttpInfo(users2FALoginRequest);
        return localVarResp.getData();
    }

    /**
     * Second factor authentication.
     * When a user has 2FA enabled, this is the second call to perform after &#x60;/v2/users/login&#x60; call.  Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param users2FALoginRequest Login details. (required)
     * @return ApiResponse&lt;PostUsersLoginSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostUsersLoginSuccessResponse> postUsers2FALoginWithHttpInfo(Users2FALoginRequest users2FALoginRequest) throws ApiException {
        okhttp3.Call localVarCall = postUsers2FALoginValidateBeforeCall(users2FALoginRequest, null);
        Type localVarReturnType = new TypeToken<PostUsersLoginSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Second factor authentication. (asynchronously)
     * When a user has 2FA enabled, this is the second call to perform after &#x60;/v2/users/login&#x60; call.  Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param users2FALoginRequest Login details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsers2FALoginAsync(Users2FALoginRequest users2FALoginRequest, final ApiCallback<PostUsersLoginSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUsers2FALoginValidateBeforeCall(users2FALoginRequest, _callback);
        Type localVarReturnType = new TypeToken<PostUsersLoginSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUsersLogin
     * @param usersLoginRequest Login details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersLoginCall(UsersLoginRequest usersLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://hub.docker.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersLoginRequest;

        // create path and map variables
        String localVarPath = "/v2/users/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUsersLoginValidateBeforeCall(UsersLoginRequest usersLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersLoginRequest' is set
        if (usersLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'usersLoginRequest' when calling postUsersLogin(Async)");
        }

        return postUsersLoginCall(usersLoginRequest, _callback);

    }

    /**
     * Create an authentication token
     * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param usersLoginRequest Login details. (required)
     * @return PostUsersLoginSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public PostUsersLoginSuccessResponse postUsersLogin(UsersLoginRequest usersLoginRequest) throws ApiException {
        ApiResponse<PostUsersLoginSuccessResponse> localVarResp = postUsersLoginWithHttpInfo(usersLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Create an authentication token
     * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param usersLoginRequest Login details. (required)
     * @return ApiResponse&lt;PostUsersLoginSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostUsersLoginSuccessResponse> postUsersLoginWithHttpInfo(UsersLoginRequest usersLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = postUsersLoginValidateBeforeCall(usersLoginRequest, null);
        Type localVarReturnType = new TypeToken<PostUsersLoginSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an authentication token (asynchronously)
     * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     * @param usersLoginRequest Login details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authentication successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or second factor required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersLoginAsync(UsersLoginRequest usersLoginRequest, final ApiCallback<PostUsersLoginSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUsersLoginValidateBeforeCall(usersLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<PostUsersLoginSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
