/*
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataviewType;
import org.openapitools.client.model.ResponseData;
import org.openapitools.client.model.TimespanData;
import org.openapitools.client.model.TimespanModel;
import org.openapitools.client.model.TimespanType;
import org.openapitools.client.model.YearData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamespacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NamespacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamespacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNamespaceDataByTimespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @param dataview Type of data to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceDataByTimespanCall(String namespace, Integer year, TimespanType timespantype, Integer timespan, DataviewType dataview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "timespantype" + "}", localVarApiClient.escapeString(timespantype.toString()))
            .replace("{" + "timespan" + "}", localVarApiClient.escapeString(timespan.toString()))
            .replace("{" + "dataview" + "}", localVarApiClient.escapeString(dataview.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HubAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespaceDataByTimespanValidateBeforeCall(String namespace, Integer year, TimespanType timespantype, Integer timespan, DataviewType dataview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespaceDataByTimespan(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getNamespaceDataByTimespan(Async)");
        }

        // verify the required parameter 'timespantype' is set
        if (timespantype == null) {
            throw new ApiException("Missing the required parameter 'timespantype' when calling getNamespaceDataByTimespan(Async)");
        }

        // verify the required parameter 'timespan' is set
        if (timespan == null) {
            throw new ApiException("Missing the required parameter 'timespan' when calling getNamespaceDataByTimespan(Async)");
        }

        // verify the required parameter 'dataview' is set
        if (dataview == null) {
            throw new ApiException("Missing the required parameter 'dataview' when calling getNamespaceDataByTimespan(Async)");
        }

        return getNamespaceDataByTimespanCall(namespace, year, timespantype, timespan, dataview, _callback);

    }

    /**
     * Get namespace data for timespan
     * Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @param dataview Type of data to fetch (required)
     * @return ResponseData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResponseData getNamespaceDataByTimespan(String namespace, Integer year, TimespanType timespantype, Integer timespan, DataviewType dataview) throws ApiException {
        ApiResponse<ResponseData> localVarResp = getNamespaceDataByTimespanWithHttpInfo(namespace, year, timespantype, timespan, dataview);
        return localVarResp.getData();
    }

    /**
     * Get namespace data for timespan
     * Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @param dataview Type of data to fetch (required)
     * @return ApiResponse&lt;ResponseData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseData> getNamespaceDataByTimespanWithHttpInfo(String namespace, Integer year, TimespanType timespantype, Integer timespan, DataviewType dataview) throws ApiException {
        okhttp3.Call localVarCall = getNamespaceDataByTimespanValidateBeforeCall(namespace, year, timespantype, timespan, dataview, null);
        Type localVarReturnType = new TypeToken<ResponseData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get namespace data for timespan (asynchronously)
     * Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @param dataview Type of data to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceDataByTimespanAsync(String namespace, Integer year, TimespanType timespantype, Integer timespan, DataviewType dataview, final ApiCallback<ResponseData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespaceDataByTimespanValidateBeforeCall(namespace, year, timespantype, timespan, dataview, _callback);
        Type localVarReturnType = new TypeToken<ResponseData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespaceTimespanMetadata
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceTimespanMetadataCall(String namespace, Integer year, TimespanType timespantype, Integer timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "timespantype" + "}", localVarApiClient.escapeString(timespantype.toString()))
            .replace("{" + "timespan" + "}", localVarApiClient.escapeString(timespan.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HubAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespaceTimespanMetadataValidateBeforeCall(String namespace, Integer year, TimespanType timespantype, Integer timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespaceTimespanMetadata(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getNamespaceTimespanMetadata(Async)");
        }

        // verify the required parameter 'timespantype' is set
        if (timespantype == null) {
            throw new ApiException("Missing the required parameter 'timespantype' when calling getNamespaceTimespanMetadata(Async)");
        }

        // verify the required parameter 'timespan' is set
        if (timespan == null) {
            throw new ApiException("Missing the required parameter 'timespan' when calling getNamespaceTimespanMetadata(Async)");
        }

        return getNamespaceTimespanMetadataCall(namespace, year, timespantype, timespan, _callback);

    }

    /**
     * Get namespace metadata for timespan
     * Gets info about data for the given namespace and timespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @return TimespanModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TimespanModel getNamespaceTimespanMetadata(String namespace, Integer year, TimespanType timespantype, Integer timespan) throws ApiException {
        ApiResponse<TimespanModel> localVarResp = getNamespaceTimespanMetadataWithHttpInfo(namespace, year, timespantype, timespan);
        return localVarResp.getData();
    }

    /**
     * Get namespace metadata for timespan
     * Gets info about data for the given namespace and timespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @return ApiResponse&lt;TimespanModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimespanModel> getNamespaceTimespanMetadataWithHttpInfo(String namespace, Integer year, TimespanType timespantype, Integer timespan) throws ApiException {
        okhttp3.Call localVarCall = getNamespaceTimespanMetadataValidateBeforeCall(namespace, year, timespantype, timespan, null);
        Type localVarReturnType = new TypeToken<TimespanModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get namespace metadata for timespan (asynchronously)
     * Gets info about data for the given namespace and timespan
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param timespan Timespan to fetch data for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceTimespanMetadataAsync(String namespace, Integer year, TimespanType timespantype, Integer timespan, final ApiCallback<TimespanModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespaceTimespanMetadataValidateBeforeCall(namespace, year, timespantype, timespan, _callback);
        Type localVarReturnType = new TypeToken<TimespanModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespaceTimespans
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceTimespansCall(String namespace, Integer year, TimespanType timespantype, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "timespantype" + "}", localVarApiClient.escapeString(timespantype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HubAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespaceTimespansValidateBeforeCall(String namespace, Integer year, TimespanType timespantype, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespaceTimespans(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getNamespaceTimespans(Async)");
        }

        // verify the required parameter 'timespantype' is set
        if (timespantype == null) {
            throw new ApiException("Missing the required parameter 'timespantype' when calling getNamespaceTimespans(Async)");
        }

        return getNamespaceTimespansCall(namespace, year, timespantype, _callback);

    }

    /**
     * Get timespans with data
     * Gets a list of timespans of the given type that have data for the given namespace and year
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @return TimespanData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TimespanData getNamespaceTimespans(String namespace, Integer year, TimespanType timespantype) throws ApiException {
        ApiResponse<TimespanData> localVarResp = getNamespaceTimespansWithHttpInfo(namespace, year, timespantype);
        return localVarResp.getData();
    }

    /**
     * Get timespans with data
     * Gets a list of timespans of the given type that have data for the given namespace and year
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @return ApiResponse&lt;TimespanData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimespanData> getNamespaceTimespansWithHttpInfo(String namespace, Integer year, TimespanType timespantype) throws ApiException {
        okhttp3.Call localVarCall = getNamespaceTimespansValidateBeforeCall(namespace, year, timespantype, null);
        Type localVarReturnType = new TypeToken<TimespanData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get timespans with data (asynchronously)
     * Gets a list of timespans of the given type that have data for the given namespace and year
     * @param namespace Namespace to fetch data for (required)
     * @param year Year to fetch data for (required)
     * @param timespantype Type of timespan to fetch data for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceTimespansAsync(String namespace, Integer year, TimespanType timespantype, final ApiCallback<TimespanData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespaceTimespansValidateBeforeCall(namespace, year, timespantype, _callback);
        Type localVarReturnType = new TypeToken<TimespanData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespaceYears
     * @param namespace Namespace to fetch data for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceYearsCall(String namespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/pulls/exports/years"
            .replace("{" + "namespace" + "}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HubAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespaceYearsValidateBeforeCall(String namespace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getNamespaceYears(Async)");
        }

        return getNamespaceYearsCall(namespace, _callback);

    }

    /**
     * Get years with data
     * Gets a list of years that have data for the given namespace
     * @param namespace Namespace to fetch data for (required)
     * @return YearData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public YearData getNamespaceYears(String namespace) throws ApiException {
        ApiResponse<YearData> localVarResp = getNamespaceYearsWithHttpInfo(namespace);
        return localVarResp.getData();
    }

    /**
     * Get years with data
     * Gets a list of years that have data for the given namespace
     * @param namespace Namespace to fetch data for (required)
     * @return ApiResponse&lt;YearData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<YearData> getNamespaceYearsWithHttpInfo(String namespace) throws ApiException {
        okhttp3.Call localVarCall = getNamespaceYearsValidateBeforeCall(namespace, null);
        Type localVarReturnType = new TypeToken<YearData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get years with data (asynchronously)
     * Gets a list of years that have data for the given namespace
     * @param namespace Namespace to fetch data for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceYearsAsync(String namespace, final ApiCallback<YearData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespaceYearsValidateBeforeCall(namespace, _callback);
        Type localVarReturnType = new TypeToken<YearData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
