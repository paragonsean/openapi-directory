/*
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatasetType;
import org.openapitools.client.model.DataviewType;
import org.openapitools.client.model.TimespanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatasetModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:19.448053-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetModel {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private DatasetType name;

  public static final String SERIALIZED_NAME_TIMESPANS = "timespans";
  @SerializedName(SERIALIZED_NAME_TIMESPANS)
  private List<TimespanType> timespans = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<DataviewType> views = new ArrayList<>();

  public DatasetModel() {
  }

  public DatasetModel name(DatasetType name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public DatasetType getName() {
    return name;
  }

  public void setName(DatasetType name) {
    this.name = name;
  }


  public DatasetModel timespans(List<TimespanType> timespans) {
    this.timespans = timespans;
    return this;
  }

  public DatasetModel addTimespansItem(TimespanType timespansItem) {
    if (this.timespans == null) {
      this.timespans = new ArrayList<>();
    }
    this.timespans.add(timespansItem);
    return this;
  }

  /**
   * Get timespans
   * @return timespans
   */
  @javax.annotation.Nullable
  public List<TimespanType> getTimespans() {
    return timespans;
  }

  public void setTimespans(List<TimespanType> timespans) {
    this.timespans = timespans;
  }


  public DatasetModel views(List<DataviewType> views) {
    this.views = views;
    return this;
  }

  public DatasetModel addViewsItem(DataviewType viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nullable
  public List<DataviewType> getViews() {
    return views;
  }

  public void setViews(List<DataviewType> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetModel datasetModel = (DatasetModel) o;
    return Objects.equals(this.name, datasetModel.name) &&
        Objects.equals(this.timespans, datasetModel.timespans) &&
        Objects.equals(this.views, datasetModel.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, timespans, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetModel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timespans: ").append(toIndentedString(timespans)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("timespans");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetModel is not found in the empty JSON string", DatasetModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        DatasetType.validateJsonElement(jsonObj.get("name"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timespans") != null && !jsonObj.get("timespans").isJsonNull() && !jsonObj.get("timespans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timespans` to be an array in the JSON string but got `%s`", jsonObj.get("timespans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull() && !jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetModel>() {
           @Override
           public void write(JsonWriter out, DatasetModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetModel
   * @throws IOException if the JSON string is invalid with respect to DatasetModel
   */
  public static DatasetModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetModel.class);
  }

  /**
   * Convert an instance of DatasetModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

