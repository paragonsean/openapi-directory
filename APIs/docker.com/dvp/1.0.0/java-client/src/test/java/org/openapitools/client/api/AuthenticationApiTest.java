/*
 * DVP Data API
 * The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.    #### Summary data  In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month).   There are two levels of summary data:  - Repository-level, a summary of every namespace and repository - Tag- or digest-level, a summary of every namespace, repository, and reference   (tag or digest)   The summary data formats contain the following data points:  - Unique IP address count - Pulls by tag count - Pulls by digest count - Version check count  #### Raw data  In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.  - Type (industry) - Host (cloud provider) - Country (geolocation) - Timestamp - Namespace - Repository - Reference (digest is always included, tag is provided when available) - HTTP request method - Action, one of the following:   - Pull by tag   - Pull by digest   - Version check - User-Agent 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PostUsers2FALoginErrorResponse;
import org.openapitools.client.model.PostUsersLoginErrorResponse;
import org.openapitools.client.model.PostUsersLoginSuccessResponse;
import org.openapitools.client.model.Users2FALoginRequest;
import org.openapitools.client.model.UsersLoginRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * Second factor authentication.
     *
     * When a user has 2FA enabled, this is the second call to perform after &#x60;/v2/users/login&#x60; call.  Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsers2FALoginTest() throws ApiException {
        Users2FALoginRequest users2FALoginRequest = null;
        PostUsersLoginSuccessResponse response = api.postUsers2FALogin(users2FALoginRequest);
        // TODO: test validations
    }

    /**
     * Create an authentication token
     *
     * Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.  The returned token is used in the HTTP Authorization header like &#x60;Authorization: Bearer {TOKEN}&#x60;.  Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsersLoginTest() throws ApiException {
        UsersLoginRequest usersLoginRequest = null;
        PostUsersLoginSuccessResponse response = api.postUsersLogin(usersLoginRequest);
        // TODO: test validations
    }

}
