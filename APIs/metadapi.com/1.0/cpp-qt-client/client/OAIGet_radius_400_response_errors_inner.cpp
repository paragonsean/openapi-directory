/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_radius_400_response_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_radius_400_response_errors_inner::OAIGet_radius_400_response_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_radius_400_response_errors_inner::OAIGet_radius_400_response_errors_inner() {
    this->initializeModel();
}

OAIGet_radius_400_response_errors_inner::~OAIGet_radius_400_response_errors_inner() {}

void OAIGet_radius_400_response_errors_inner::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGet_radius_400_response_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_radius_400_response_errors_inner::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGet_radius_400_response_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_radius_400_response_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIGet_radius_400_response_errors_inner::getDetail() const {
    return m_detail;
}
void OAIGet_radius_400_response_errors_inner::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIGet_radius_400_response_errors_inner::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIGet_radius_400_response_errors_inner::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIGet_radius_400_response_errors_inner::getStatus() const {
    return m_status;
}
void OAIGet_radius_400_response_errors_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGet_radius_400_response_errors_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGet_radius_400_response_errors_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGet_radius_400_response_errors_inner::getTitle() const {
    return m_title;
}
void OAIGet_radius_400_response_errors_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_radius_400_response_errors_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_radius_400_response_errors_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGet_radius_400_response_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_radius_400_response_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detail_isValid && m_status_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
