/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinks::OAILinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinks::OAILinks() {
    this->initializeModel();
}

OAILinks::~OAILinks() {}

void OAILinks::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAILinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinks::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAILinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinks::asJsonObject() const {
    QJsonObject obj;
    if (m_first_isSet) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QString OAILinks::getFirst() const {
    return m_first;
}
void OAILinks::setFirst(const QString &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAILinks::is_first_Set() const{
    return m_first_isSet;
}

bool OAILinks::is_first_Valid() const{
    return m_first_isValid;
}

QString OAILinks::getLast() const {
    return m_last;
}
void OAILinks::setLast(const QString &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAILinks::is_last_Set() const{
    return m_last_isSet;
}

bool OAILinks::is_last_Valid() const{
    return m_last_isValid;
}

QString OAILinks::getNext() const {
    return m_next;
}
void OAILinks::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAILinks::is_next_Set() const{
    return m_next_isSet;
}

bool OAILinks::is_next_Valid() const{
    return m_next_isValid;
}

QString OAILinks::getPrev() const {
    return m_prev;
}
void OAILinks::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAILinks::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAILinks::is_prev_Valid() const{
    return m_prev_isValid;
}

QString OAILinks::getSelf() const {
    return m_self;
}
void OAILinks::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAILinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAILinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAILinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
