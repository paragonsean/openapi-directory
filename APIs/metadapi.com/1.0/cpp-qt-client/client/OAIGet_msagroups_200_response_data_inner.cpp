/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_msagroups_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_msagroups_200_response_data_inner::OAIGet_msagroups_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_msagroups_200_response_data_inner::OAIGet_msagroups_200_response_data_inner() {
    this->initializeModel();
}

OAIGet_msagroups_200_response_data_inner::~OAIGet_msagroups_200_response_data_inner() {}

void OAIGet_msagroups_200_response_data_inner::initializeModel() {

    m_msa_code_isSet = false;
    m_msa_code_isValid = false;

    m_msa_name_isSet = false;
    m_msa_name_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;
}

void OAIGet_msagroups_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_msagroups_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_msa_code_isValid = ::OpenAPI::fromJsonValue(m_msa_code, json[QString("msaCode")]);
    m_msa_code_isSet = !json[QString("msaCode")].isNull() && m_msa_code_isValid;

    m_msa_name_isValid = ::OpenAPI::fromJsonValue(m_msa_name, json[QString("msaName")]);
    m_msa_name_isSet = !json[QString("msaName")].isNull() && m_msa_name_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;
}

QString OAIGet_msagroups_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_msagroups_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_msa_code_isSet) {
        obj.insert(QString("msaCode"), ::OpenAPI::toJsonValue(m_msa_code));
    }
    if (m_msa_name_isSet) {
        obj.insert(QString("msaName"), ::OpenAPI::toJsonValue(m_msa_name));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    return obj;
}

QString OAIGet_msagroups_200_response_data_inner::getMsaCode() const {
    return m_msa_code;
}
void OAIGet_msagroups_200_response_data_inner::setMsaCode(const QString &msa_code) {
    m_msa_code = msa_code;
    m_msa_code_isSet = true;
}

bool OAIGet_msagroups_200_response_data_inner::is_msa_code_Set() const{
    return m_msa_code_isSet;
}

bool OAIGet_msagroups_200_response_data_inner::is_msa_code_Valid() const{
    return m_msa_code_isValid;
}

QString OAIGet_msagroups_200_response_data_inner::getMsaName() const {
    return m_msa_name;
}
void OAIGet_msagroups_200_response_data_inner::setMsaName(const QString &msa_name) {
    m_msa_name = msa_name;
    m_msa_name_isSet = true;
}

bool OAIGet_msagroups_200_response_data_inner::is_msa_name_Set() const{
    return m_msa_name_isSet;
}

bool OAIGet_msagroups_200_response_data_inner::is_msa_name_Valid() const{
    return m_msa_name_isValid;
}

QSet<OAIGet_msagroups_200_response_data_inner_states_inner> OAIGet_msagroups_200_response_data_inner::getStates() const {
    return m_states;
}
void OAIGet_msagroups_200_response_data_inner::setStates(const QSet<OAIGet_msagroups_200_response_data_inner_states_inner> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIGet_msagroups_200_response_data_inner::is_states_Set() const{
    return m_states_isSet;
}

bool OAIGet_msagroups_200_response_data_inner::is_states_Valid() const{
    return m_states_isValid;
}

bool OAIGet_msagroups_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_msa_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msa_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_msagroups_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_msa_code_isValid && m_msa_name_isValid && m_states_isValid && true;
}

} // namespace OpenAPI
