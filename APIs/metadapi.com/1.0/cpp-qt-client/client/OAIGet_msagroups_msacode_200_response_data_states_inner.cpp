/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_msagroups_msacode_200_response_data_states_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_msagroups_msacode_200_response_data_states_inner::OAIGet_msagroups_msacode_200_response_data_states_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_msagroups_msacode_200_response_data_states_inner::OAIGet_msagroups_msacode_200_response_data_states_inner() {
    this->initializeModel();
}

OAIGet_msagroups_msacode_200_response_data_states_inner::~OAIGet_msagroups_msacode_200_response_data_states_inner() {}

void OAIGet_msagroups_msacode_200_response_data_states_inner::initializeModel() {

    m_counties_isSet = false;
    m_counties_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_state_fips_code_isSet = false;
    m_state_fips_code_isValid = false;

    m_state_name_isSet = false;
    m_state_name_isValid = false;
}

void OAIGet_msagroups_msacode_200_response_data_states_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_msagroups_msacode_200_response_data_states_inner::fromJsonObject(QJsonObject json) {

    m_counties_isValid = ::OpenAPI::fromJsonValue(m_counties, json[QString("counties")]);
    m_counties_isSet = !json[QString("counties")].isNull() && m_counties_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("stateCode")]);
    m_state_code_isSet = !json[QString("stateCode")].isNull() && m_state_code_isValid;

    m_state_fips_code_isValid = ::OpenAPI::fromJsonValue(m_state_fips_code, json[QString("stateFipsCode")]);
    m_state_fips_code_isSet = !json[QString("stateFipsCode")].isNull() && m_state_fips_code_isValid;

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;
}

QString OAIGet_msagroups_msacode_200_response_data_states_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_msagroups_msacode_200_response_data_states_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_counties.size() > 0) {
        obj.insert(QString("counties"), ::OpenAPI::toJsonValue(m_counties));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("stateCode"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_state_fips_code_isSet) {
        obj.insert(QString("stateFipsCode"), ::OpenAPI::toJsonValue(m_state_fips_code));
    }
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    return obj;
}

QSet<OAIGet_msagroups_msacode_200_response_data_states_inner_counties_inner> OAIGet_msagroups_msacode_200_response_data_states_inner::getCounties() const {
    return m_counties;
}
void OAIGet_msagroups_msacode_200_response_data_states_inner::setCounties(const QSet<OAIGet_msagroups_msacode_200_response_data_states_inner_counties_inner> &counties) {
    m_counties = counties;
    m_counties_isSet = true;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_counties_Set() const{
    return m_counties_isSet;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_counties_Valid() const{
    return m_counties_isValid;
}

QString OAIGet_msagroups_msacode_200_response_data_states_inner::getStateCode() const {
    return m_state_code;
}
void OAIGet_msagroups_msacode_200_response_data_states_inner::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QString OAIGet_msagroups_msacode_200_response_data_states_inner::getStateFipsCode() const {
    return m_state_fips_code;
}
void OAIGet_msagroups_msacode_200_response_data_states_inner::setStateFipsCode(const QString &state_fips_code) {
    m_state_fips_code = state_fips_code;
    m_state_fips_code_isSet = true;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_state_fips_code_Set() const{
    return m_state_fips_code_isSet;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_state_fips_code_Valid() const{
    return m_state_fips_code_isValid;
}

QString OAIGet_msagroups_msacode_200_response_data_states_inner::getStateName() const {
    return m_state_name;
}
void OAIGet_msagroups_msacode_200_response_data_states_inner::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::is_state_name_Valid() const{
    return m_state_name_isValid;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_msagroups_msacode_200_response_data_states_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_code_isValid && m_state_fips_code_isValid && m_state_name_isValid && true;
}

} // namespace OpenAPI
