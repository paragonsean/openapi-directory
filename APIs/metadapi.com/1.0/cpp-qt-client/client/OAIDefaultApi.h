/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrors.h"
#include "OAIGet_distance_200_response.h"
#include "OAIGet_msagroups_200_response.h"
#include "OAIGet_msagroups_msacode_200_response.h"
#include "OAIGet_radius_200_response.h"
#include "OAIGet_radius_400_response.h"
#include "OAIGet_radius_401_response.h"
#include "OAIGet_zipc_v1_401_response.h"
#include "OAIGet_zipcode_200_response.h"
#include "OAIGet_zipcode_401_response.h"
#include "OAIGet_zipcode_403_response.h"
#include "OAIZipCodeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  zip_code1 QString [required]
    * @param[in]  zip_code2 QString [required]
    */
    virtual void getDistance(const QString &zip_code1, const QString &zip_code2);

    /**
    * @param[in]  limit qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  state_code QString [optional]
    */
    virtual void getMsagroups(const qint32 &limit, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &state_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  msa_code QString [required]
    */
    virtual void getMsagroupsMsacode(const QString &msa_code);

    /**
    * @param[in]  zip_code QString [required]
    * @param[in]  radius qint32 [required]
    * @param[in]  uom QString [required]
    */
    virtual void getRadius(const QString &zip_code, const qint32 &radius, const QString &uom);


    virtual void getZipcV1();

    /**
    * @param[in]  zipcode QString [required]
    */
    virtual void getZipcode(const QString &zipcode);

    /**
    * @param[in]  offset double [optional]
    * @param[in]  limit double [optional]
    * @param[in]  zipcode QString [optional]
    * @param[in]  usps_main_city_key QString [optional]
    * @param[in]  zip_classification_code QString [optional]
    * @param[in]  usps_facility_code QString [optional]
    * @param[in]  usps_delivery_code QString [optional]
    * @param[in]  usps_carrier_route_sort_code QString [optional]
    * @param[in]  unique_zip_name_ind bool [optional]
    * @param[in]  usps_finance_number QString [optional]
    * @param[in]  state_code QString [optional]
    * @param[in]  state_fips_code QString [optional]
    * @param[in]  county_fips_code QString [optional]
    * @param[in]  division_code QString [optional]
    * @param[in]  region_code QString [optional]
    * @param[in]  msa_code QString [optional]
    */
    virtual void getZipcodes(const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &zipcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usps_main_city_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip_classification_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usps_facility_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usps_delivery_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &usps_carrier_route_sort_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unique_zip_name_ind = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &usps_finance_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state_fips_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &county_fips_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &division_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &msa_code = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistanceCallback(OAIHttpRequestWorker *worker);
    void getMsagroupsCallback(OAIHttpRequestWorker *worker);
    void getMsagroupsMsacodeCallback(OAIHttpRequestWorker *worker);
    void getRadiusCallback(OAIHttpRequestWorker *worker);
    void getZipcV1Callback(OAIHttpRequestWorker *worker);
    void getZipcodeCallback(OAIHttpRequestWorker *worker);
    void getZipcodesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistanceSignal(OAIGet_distance_200_response summary);
    void getMsagroupsSignal(OAIGet_msagroups_200_response summary);
    void getMsagroupsMsacodeSignal(OAIGet_msagroups_msacode_200_response summary);
    void getRadiusSignal(OAIGet_radius_200_response summary);
    void getZipcV1Signal();
    void getZipcodeSignal(OAIGet_zipcode_200_response summary);
    void getZipcodesSignal(OAIZipCodeResponse summary);


    void getDistanceSignalFull(OAIHttpRequestWorker *worker, OAIGet_distance_200_response summary);
    void getMsagroupsSignalFull(OAIHttpRequestWorker *worker, OAIGet_msagroups_200_response summary);
    void getMsagroupsMsacodeSignalFull(OAIHttpRequestWorker *worker, OAIGet_msagroups_msacode_200_response summary);
    void getRadiusSignalFull(OAIHttpRequestWorker *worker, OAIGet_radius_200_response summary);
    void getZipcV1SignalFull(OAIHttpRequestWorker *worker);
    void getZipcodeSignalFull(OAIHttpRequestWorker *worker, OAIGet_zipcode_200_response summary);
    void getZipcodesSignalFull(OAIHttpRequestWorker *worker, OAIZipCodeResponse summary);

    Q_DECL_DEPRECATED_X("Use getDistanceSignalError() instead")
    void getDistanceSignalE(OAIGet_distance_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistanceSignalError(OAIGet_distance_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMsagroupsSignalError() instead")
    void getMsagroupsSignalE(OAIGet_msagroups_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMsagroupsSignalError(OAIGet_msagroups_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMsagroupsMsacodeSignalError() instead")
    void getMsagroupsMsacodeSignalE(OAIGet_msagroups_msacode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMsagroupsMsacodeSignalError(OAIGet_msagroups_msacode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadiusSignalError() instead")
    void getRadiusSignalE(OAIGet_radius_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadiusSignalError(OAIGet_radius_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getZipcV1SignalError() instead")
    void getZipcV1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getZipcV1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getZipcodeSignalError() instead")
    void getZipcodeSignalE(OAIGet_zipcode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getZipcodeSignalError(OAIGet_zipcode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getZipcodesSignalError() instead")
    void getZipcodesSignalE(OAIZipCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getZipcodesSignalError(OAIZipCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistanceSignalErrorFull() instead")
    void getDistanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMsagroupsSignalErrorFull() instead")
    void getMsagroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMsagroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMsagroupsMsacodeSignalErrorFull() instead")
    void getMsagroupsMsacodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMsagroupsMsacodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadiusSignalErrorFull() instead")
    void getRadiusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadiusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getZipcV1SignalErrorFull() instead")
    void getZipcV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getZipcV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getZipcodeSignalErrorFull() instead")
    void getZipcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getZipcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getZipcodesSignalErrorFull() instead")
    void getZipcodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getZipcodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
