/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZipcode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZipcode::OAIZipcode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZipcode::OAIZipcode() {
    this->initializeModel();
}

OAIZipcode::~OAIZipcode() {}

void OAIZipcode::initializeModel() {

    m_city_aliases_isSet = false;
    m_city_aliases_isValid = false;

    m_county_fips_code_isSet = false;
    m_county_fips_code_isValid = false;

    m_division_code_isSet = false;
    m_division_code_isValid = false;

    m_division_name_isSet = false;
    m_division_name_isValid = false;

    m_land_area_km2_isSet = false;
    m_land_area_km2_isValid = false;

    m_land_area_mi2_isSet = false;
    m_land_area_mi2_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_msa_code_isSet = false;
    m_msa_code_isValid = false;

    m_msa_name_isSet = false;
    m_msa_name_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_region_name_isSet = false;
    m_region_name_isValid = false;

    m_state_abbr_isSet = false;
    m_state_abbr_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_state_fips_code_isSet = false;
    m_state_fips_code_isValid = false;

    m_state_name_isSet = false;
    m_state_name_isValid = false;

    m_title_case_city_name_isSet = false;
    m_title_case_city_name_isValid = false;

    m_title_case_county_name_isSet = false;
    m_title_case_county_name_isValid = false;

    m_unique_zip_name_ind_isSet = false;
    m_unique_zip_name_ind_isValid = false;

    m_usps_carrier_route_rate_sort_desc_isSet = false;
    m_usps_carrier_route_rate_sort_desc_isValid = false;

    m_usps_carrier_route_sort_code_isSet = false;
    m_usps_carrier_route_sort_code_isValid = false;

    m_usps_city_mailing_ind_isSet = false;
    m_usps_city_mailing_ind_isValid = false;

    m_usps_county_name_isSet = false;
    m_usps_county_name_isValid = false;

    m_usps_delivery_code_isSet = false;
    m_usps_delivery_code_isValid = false;

    m_usps_delivery_desc_isSet = false;
    m_usps_delivery_desc_isValid = false;

    m_usps_facility_code_isSet = false;
    m_usps_facility_code_isValid = false;

    m_usps_facility_name_isSet = false;
    m_usps_facility_name_isValid = false;

    m_usps_finance_number_isSet = false;
    m_usps_finance_number_isValid = false;

    m_usps_main_city_key_isSet = false;
    m_usps_main_city_key_isValid = false;

    m_usps_main_city_name_isSet = false;
    m_usps_main_city_name_isValid = false;

    m_water_area_km2_isSet = false;
    m_water_area_km2_isValid = false;

    m_water_area_mi2_isSet = false;
    m_water_area_mi2_isValid = false;

    m_zip_classification_code_isSet = false;
    m_zip_classification_code_isValid = false;

    m_zip_classification_desc_isSet = false;
    m_zip_classification_desc_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;

    m_zip_code_statistics_isSet = false;
    m_zip_code_statistics_isValid = false;
}

void OAIZipcode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZipcode::fromJsonObject(QJsonObject json) {

    m_city_aliases_isValid = ::OpenAPI::fromJsonValue(m_city_aliases, json[QString("cityAliases")]);
    m_city_aliases_isSet = !json[QString("cityAliases")].isNull() && m_city_aliases_isValid;

    m_county_fips_code_isValid = ::OpenAPI::fromJsonValue(m_county_fips_code, json[QString("countyFipsCode")]);
    m_county_fips_code_isSet = !json[QString("countyFipsCode")].isNull() && m_county_fips_code_isValid;

    m_division_code_isValid = ::OpenAPI::fromJsonValue(m_division_code, json[QString("divisionCode")]);
    m_division_code_isSet = !json[QString("divisionCode")].isNull() && m_division_code_isValid;

    m_division_name_isValid = ::OpenAPI::fromJsonValue(m_division_name, json[QString("divisionName")]);
    m_division_name_isSet = !json[QString("divisionName")].isNull() && m_division_name_isValid;

    m_land_area_km2_isValid = ::OpenAPI::fromJsonValue(m_land_area_km2, json[QString("landAreaKm2")]);
    m_land_area_km2_isSet = !json[QString("landAreaKm2")].isNull() && m_land_area_km2_isValid;

    m_land_area_mi2_isValid = ::OpenAPI::fromJsonValue(m_land_area_mi2, json[QString("landAreaMi2")]);
    m_land_area_mi2_isSet = !json[QString("landAreaMi2")].isNull() && m_land_area_mi2_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_msa_code_isValid = ::OpenAPI::fromJsonValue(m_msa_code, json[QString("msaCode")]);
    m_msa_code_isSet = !json[QString("msaCode")].isNull() && m_msa_code_isValid;

    m_msa_name_isValid = ::OpenAPI::fromJsonValue(m_msa_name, json[QString("msaName")]);
    m_msa_name_isSet = !json[QString("msaName")].isNull() && m_msa_name_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_region_name_isValid = ::OpenAPI::fromJsonValue(m_region_name, json[QString("regionName")]);
    m_region_name_isSet = !json[QString("regionName")].isNull() && m_region_name_isValid;

    m_state_abbr_isValid = ::OpenAPI::fromJsonValue(m_state_abbr, json[QString("stateAbbr")]);
    m_state_abbr_isSet = !json[QString("stateAbbr")].isNull() && m_state_abbr_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("stateCode")]);
    m_state_code_isSet = !json[QString("stateCode")].isNull() && m_state_code_isValid;

    m_state_fips_code_isValid = ::OpenAPI::fromJsonValue(m_state_fips_code, json[QString("stateFipsCode")]);
    m_state_fips_code_isSet = !json[QString("stateFipsCode")].isNull() && m_state_fips_code_isValid;

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;

    m_title_case_city_name_isValid = ::OpenAPI::fromJsonValue(m_title_case_city_name, json[QString("titleCaseCityName")]);
    m_title_case_city_name_isSet = !json[QString("titleCaseCityName")].isNull() && m_title_case_city_name_isValid;

    m_title_case_county_name_isValid = ::OpenAPI::fromJsonValue(m_title_case_county_name, json[QString("titleCaseCountyName")]);
    m_title_case_county_name_isSet = !json[QString("titleCaseCountyName")].isNull() && m_title_case_county_name_isValid;

    m_unique_zip_name_ind_isValid = ::OpenAPI::fromJsonValue(m_unique_zip_name_ind, json[QString("uniqueZipNameInd")]);
    m_unique_zip_name_ind_isSet = !json[QString("uniqueZipNameInd")].isNull() && m_unique_zip_name_ind_isValid;

    m_usps_carrier_route_rate_sort_desc_isValid = ::OpenAPI::fromJsonValue(m_usps_carrier_route_rate_sort_desc, json[QString("uspsCarrierRouteRateSortDesc")]);
    m_usps_carrier_route_rate_sort_desc_isSet = !json[QString("uspsCarrierRouteRateSortDesc")].isNull() && m_usps_carrier_route_rate_sort_desc_isValid;

    m_usps_carrier_route_sort_code_isValid = ::OpenAPI::fromJsonValue(m_usps_carrier_route_sort_code, json[QString("uspsCarrierRouteSortCode")]);
    m_usps_carrier_route_sort_code_isSet = !json[QString("uspsCarrierRouteSortCode")].isNull() && m_usps_carrier_route_sort_code_isValid;

    m_usps_city_mailing_ind_isValid = ::OpenAPI::fromJsonValue(m_usps_city_mailing_ind, json[QString("uspsCityMailingInd")]);
    m_usps_city_mailing_ind_isSet = !json[QString("uspsCityMailingInd")].isNull() && m_usps_city_mailing_ind_isValid;

    m_usps_county_name_isValid = ::OpenAPI::fromJsonValue(m_usps_county_name, json[QString("uspsCountyName")]);
    m_usps_county_name_isSet = !json[QString("uspsCountyName")].isNull() && m_usps_county_name_isValid;

    m_usps_delivery_code_isValid = ::OpenAPI::fromJsonValue(m_usps_delivery_code, json[QString("uspsDeliveryCode")]);
    m_usps_delivery_code_isSet = !json[QString("uspsDeliveryCode")].isNull() && m_usps_delivery_code_isValid;

    m_usps_delivery_desc_isValid = ::OpenAPI::fromJsonValue(m_usps_delivery_desc, json[QString("uspsDeliveryDesc")]);
    m_usps_delivery_desc_isSet = !json[QString("uspsDeliveryDesc")].isNull() && m_usps_delivery_desc_isValid;

    m_usps_facility_code_isValid = ::OpenAPI::fromJsonValue(m_usps_facility_code, json[QString("uspsFacilityCode")]);
    m_usps_facility_code_isSet = !json[QString("uspsFacilityCode")].isNull() && m_usps_facility_code_isValid;

    m_usps_facility_name_isValid = ::OpenAPI::fromJsonValue(m_usps_facility_name, json[QString("uspsFacilityName")]);
    m_usps_facility_name_isSet = !json[QString("uspsFacilityName")].isNull() && m_usps_facility_name_isValid;

    m_usps_finance_number_isValid = ::OpenAPI::fromJsonValue(m_usps_finance_number, json[QString("uspsFinanceNumber")]);
    m_usps_finance_number_isSet = !json[QString("uspsFinanceNumber")].isNull() && m_usps_finance_number_isValid;

    m_usps_main_city_key_isValid = ::OpenAPI::fromJsonValue(m_usps_main_city_key, json[QString("uspsMainCityKey")]);
    m_usps_main_city_key_isSet = !json[QString("uspsMainCityKey")].isNull() && m_usps_main_city_key_isValid;

    m_usps_main_city_name_isValid = ::OpenAPI::fromJsonValue(m_usps_main_city_name, json[QString("uspsMainCityName")]);
    m_usps_main_city_name_isSet = !json[QString("uspsMainCityName")].isNull() && m_usps_main_city_name_isValid;

    m_water_area_km2_isValid = ::OpenAPI::fromJsonValue(m_water_area_km2, json[QString("waterAreaKm2")]);
    m_water_area_km2_isSet = !json[QString("waterAreaKm2")].isNull() && m_water_area_km2_isValid;

    m_water_area_mi2_isValid = ::OpenAPI::fromJsonValue(m_water_area_mi2, json[QString("waterAreaMi2")]);
    m_water_area_mi2_isSet = !json[QString("waterAreaMi2")].isNull() && m_water_area_mi2_isValid;

    m_zip_classification_code_isValid = ::OpenAPI::fromJsonValue(m_zip_classification_code, json[QString("zipClassificationCode")]);
    m_zip_classification_code_isSet = !json[QString("zipClassificationCode")].isNull() && m_zip_classification_code_isValid;

    m_zip_classification_desc_isValid = ::OpenAPI::fromJsonValue(m_zip_classification_desc, json[QString("zipClassificationDesc")]);
    m_zip_classification_desc_isSet = !json[QString("zipClassificationDesc")].isNull() && m_zip_classification_desc_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;

    m_zip_code_statistics_isValid = ::OpenAPI::fromJsonValue(m_zip_code_statistics, json[QString("zipCodeStatistics")]);
    m_zip_code_statistics_isSet = !json[QString("zipCodeStatistics")].isNull() && m_zip_code_statistics_isValid;
}

QString OAIZipcode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZipcode::asJsonObject() const {
    QJsonObject obj;
    if (m_city_aliases.size() > 0) {
        obj.insert(QString("cityAliases"), ::OpenAPI::toJsonValue(m_city_aliases));
    }
    if (m_county_fips_code_isSet) {
        obj.insert(QString("countyFipsCode"), ::OpenAPI::toJsonValue(m_county_fips_code));
    }
    if (m_division_code_isSet) {
        obj.insert(QString("divisionCode"), ::OpenAPI::toJsonValue(m_division_code));
    }
    if (m_division_name_isSet) {
        obj.insert(QString("divisionName"), ::OpenAPI::toJsonValue(m_division_name));
    }
    if (m_land_area_km2_isSet) {
        obj.insert(QString("landAreaKm2"), ::OpenAPI::toJsonValue(m_land_area_km2));
    }
    if (m_land_area_mi2_isSet) {
        obj.insert(QString("landAreaMi2"), ::OpenAPI::toJsonValue(m_land_area_mi2));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_msa_code_isSet) {
        obj.insert(QString("msaCode"), ::OpenAPI::toJsonValue(m_msa_code));
    }
    if (m_msa_name_isSet) {
        obj.insert(QString("msaName"), ::OpenAPI::toJsonValue(m_msa_name));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_region_name_isSet) {
        obj.insert(QString("regionName"), ::OpenAPI::toJsonValue(m_region_name));
    }
    if (m_state_abbr_isSet) {
        obj.insert(QString("stateAbbr"), ::OpenAPI::toJsonValue(m_state_abbr));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("stateCode"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_state_fips_code_isSet) {
        obj.insert(QString("stateFipsCode"), ::OpenAPI::toJsonValue(m_state_fips_code));
    }
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    if (m_title_case_city_name_isSet) {
        obj.insert(QString("titleCaseCityName"), ::OpenAPI::toJsonValue(m_title_case_city_name));
    }
    if (m_title_case_county_name_isSet) {
        obj.insert(QString("titleCaseCountyName"), ::OpenAPI::toJsonValue(m_title_case_county_name));
    }
    if (m_unique_zip_name_ind_isSet) {
        obj.insert(QString("uniqueZipNameInd"), ::OpenAPI::toJsonValue(m_unique_zip_name_ind));
    }
    if (m_usps_carrier_route_rate_sort_desc_isSet) {
        obj.insert(QString("uspsCarrierRouteRateSortDesc"), ::OpenAPI::toJsonValue(m_usps_carrier_route_rate_sort_desc));
    }
    if (m_usps_carrier_route_sort_code_isSet) {
        obj.insert(QString("uspsCarrierRouteSortCode"), ::OpenAPI::toJsonValue(m_usps_carrier_route_sort_code));
    }
    if (m_usps_city_mailing_ind_isSet) {
        obj.insert(QString("uspsCityMailingInd"), ::OpenAPI::toJsonValue(m_usps_city_mailing_ind));
    }
    if (m_usps_county_name_isSet) {
        obj.insert(QString("uspsCountyName"), ::OpenAPI::toJsonValue(m_usps_county_name));
    }
    if (m_usps_delivery_code_isSet) {
        obj.insert(QString("uspsDeliveryCode"), ::OpenAPI::toJsonValue(m_usps_delivery_code));
    }
    if (m_usps_delivery_desc_isSet) {
        obj.insert(QString("uspsDeliveryDesc"), ::OpenAPI::toJsonValue(m_usps_delivery_desc));
    }
    if (m_usps_facility_code_isSet) {
        obj.insert(QString("uspsFacilityCode"), ::OpenAPI::toJsonValue(m_usps_facility_code));
    }
    if (m_usps_facility_name_isSet) {
        obj.insert(QString("uspsFacilityName"), ::OpenAPI::toJsonValue(m_usps_facility_name));
    }
    if (m_usps_finance_number_isSet) {
        obj.insert(QString("uspsFinanceNumber"), ::OpenAPI::toJsonValue(m_usps_finance_number));
    }
    if (m_usps_main_city_key_isSet) {
        obj.insert(QString("uspsMainCityKey"), ::OpenAPI::toJsonValue(m_usps_main_city_key));
    }
    if (m_usps_main_city_name_isSet) {
        obj.insert(QString("uspsMainCityName"), ::OpenAPI::toJsonValue(m_usps_main_city_name));
    }
    if (m_water_area_km2_isSet) {
        obj.insert(QString("waterAreaKm2"), ::OpenAPI::toJsonValue(m_water_area_km2));
    }
    if (m_water_area_mi2_isSet) {
        obj.insert(QString("waterAreaMi2"), ::OpenAPI::toJsonValue(m_water_area_mi2));
    }
    if (m_zip_classification_code_isSet) {
        obj.insert(QString("zipClassificationCode"), ::OpenAPI::toJsonValue(m_zip_classification_code));
    }
    if (m_zip_classification_desc_isSet) {
        obj.insert(QString("zipClassificationDesc"), ::OpenAPI::toJsonValue(m_zip_classification_desc));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    if (m_zip_code_statistics.size() > 0) {
        obj.insert(QString("zipCodeStatistics"), ::OpenAPI::toJsonValue(m_zip_code_statistics));
    }
    return obj;
}

QSet<OAIZipcode_cityAliases_inner> OAIZipcode::getCityAliases() const {
    return m_city_aliases;
}
void OAIZipcode::setCityAliases(const QSet<OAIZipcode_cityAliases_inner> &city_aliases) {
    m_city_aliases = city_aliases;
    m_city_aliases_isSet = true;
}

bool OAIZipcode::is_city_aliases_Set() const{
    return m_city_aliases_isSet;
}

bool OAIZipcode::is_city_aliases_Valid() const{
    return m_city_aliases_isValid;
}

QString OAIZipcode::getCountyFipsCode() const {
    return m_county_fips_code;
}
void OAIZipcode::setCountyFipsCode(const QString &county_fips_code) {
    m_county_fips_code = county_fips_code;
    m_county_fips_code_isSet = true;
}

bool OAIZipcode::is_county_fips_code_Set() const{
    return m_county_fips_code_isSet;
}

bool OAIZipcode::is_county_fips_code_Valid() const{
    return m_county_fips_code_isValid;
}

QString OAIZipcode::getDivisionCode() const {
    return m_division_code;
}
void OAIZipcode::setDivisionCode(const QString &division_code) {
    m_division_code = division_code;
    m_division_code_isSet = true;
}

bool OAIZipcode::is_division_code_Set() const{
    return m_division_code_isSet;
}

bool OAIZipcode::is_division_code_Valid() const{
    return m_division_code_isValid;
}

QString OAIZipcode::getDivisionName() const {
    return m_division_name;
}
void OAIZipcode::setDivisionName(const QString &division_name) {
    m_division_name = division_name;
    m_division_name_isSet = true;
}

bool OAIZipcode::is_division_name_Set() const{
    return m_division_name_isSet;
}

bool OAIZipcode::is_division_name_Valid() const{
    return m_division_name_isValid;
}

double OAIZipcode::getLandAreaKm2() const {
    return m_land_area_km2;
}
void OAIZipcode::setLandAreaKm2(const double &land_area_km2) {
    m_land_area_km2 = land_area_km2;
    m_land_area_km2_isSet = true;
}

bool OAIZipcode::is_land_area_km2_Set() const{
    return m_land_area_km2_isSet;
}

bool OAIZipcode::is_land_area_km2_Valid() const{
    return m_land_area_km2_isValid;
}

double OAIZipcode::getLandAreaMi2() const {
    return m_land_area_mi2;
}
void OAIZipcode::setLandAreaMi2(const double &land_area_mi2) {
    m_land_area_mi2 = land_area_mi2;
    m_land_area_mi2_isSet = true;
}

bool OAIZipcode::is_land_area_mi2_Set() const{
    return m_land_area_mi2_isSet;
}

bool OAIZipcode::is_land_area_mi2_Valid() const{
    return m_land_area_mi2_isValid;
}

double OAIZipcode::getLatitude() const {
    return m_latitude;
}
void OAIZipcode::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIZipcode::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIZipcode::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIZipcode::getLongitude() const {
    return m_longitude;
}
void OAIZipcode::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIZipcode::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIZipcode::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIZipcode::getMsaCode() const {
    return m_msa_code;
}
void OAIZipcode::setMsaCode(const QString &msa_code) {
    m_msa_code = msa_code;
    m_msa_code_isSet = true;
}

bool OAIZipcode::is_msa_code_Set() const{
    return m_msa_code_isSet;
}

bool OAIZipcode::is_msa_code_Valid() const{
    return m_msa_code_isValid;
}

QString OAIZipcode::getMsaName() const {
    return m_msa_name;
}
void OAIZipcode::setMsaName(const QString &msa_name) {
    m_msa_name = msa_name;
    m_msa_name_isSet = true;
}

bool OAIZipcode::is_msa_name_Set() const{
    return m_msa_name_isSet;
}

bool OAIZipcode::is_msa_name_Valid() const{
    return m_msa_name_isValid;
}

QString OAIZipcode::getRegionCode() const {
    return m_region_code;
}
void OAIZipcode::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIZipcode::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIZipcode::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAIZipcode::getRegionName() const {
    return m_region_name;
}
void OAIZipcode::setRegionName(const QString &region_name) {
    m_region_name = region_name;
    m_region_name_isSet = true;
}

bool OAIZipcode::is_region_name_Set() const{
    return m_region_name_isSet;
}

bool OAIZipcode::is_region_name_Valid() const{
    return m_region_name_isValid;
}

QString OAIZipcode::getStateAbbr() const {
    return m_state_abbr;
}
void OAIZipcode::setStateAbbr(const QString &state_abbr) {
    m_state_abbr = state_abbr;
    m_state_abbr_isSet = true;
}

bool OAIZipcode::is_state_abbr_Set() const{
    return m_state_abbr_isSet;
}

bool OAIZipcode::is_state_abbr_Valid() const{
    return m_state_abbr_isValid;
}

QString OAIZipcode::getStateCode() const {
    return m_state_code;
}
void OAIZipcode::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAIZipcode::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAIZipcode::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QString OAIZipcode::getStateFipsCode() const {
    return m_state_fips_code;
}
void OAIZipcode::setStateFipsCode(const QString &state_fips_code) {
    m_state_fips_code = state_fips_code;
    m_state_fips_code_isSet = true;
}

bool OAIZipcode::is_state_fips_code_Set() const{
    return m_state_fips_code_isSet;
}

bool OAIZipcode::is_state_fips_code_Valid() const{
    return m_state_fips_code_isValid;
}

QString OAIZipcode::getStateName() const {
    return m_state_name;
}
void OAIZipcode::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIZipcode::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIZipcode::is_state_name_Valid() const{
    return m_state_name_isValid;
}

QString OAIZipcode::getTitleCaseCityName() const {
    return m_title_case_city_name;
}
void OAIZipcode::setTitleCaseCityName(const QString &title_case_city_name) {
    m_title_case_city_name = title_case_city_name;
    m_title_case_city_name_isSet = true;
}

bool OAIZipcode::is_title_case_city_name_Set() const{
    return m_title_case_city_name_isSet;
}

bool OAIZipcode::is_title_case_city_name_Valid() const{
    return m_title_case_city_name_isValid;
}

QString OAIZipcode::getTitleCaseCountyName() const {
    return m_title_case_county_name;
}
void OAIZipcode::setTitleCaseCountyName(const QString &title_case_county_name) {
    m_title_case_county_name = title_case_county_name;
    m_title_case_county_name_isSet = true;
}

bool OAIZipcode::is_title_case_county_name_Set() const{
    return m_title_case_county_name_isSet;
}

bool OAIZipcode::is_title_case_county_name_Valid() const{
    return m_title_case_county_name_isValid;
}

bool OAIZipcode::isUniqueZipNameInd() const {
    return m_unique_zip_name_ind;
}
void OAIZipcode::setUniqueZipNameInd(const bool &unique_zip_name_ind) {
    m_unique_zip_name_ind = unique_zip_name_ind;
    m_unique_zip_name_ind_isSet = true;
}

bool OAIZipcode::is_unique_zip_name_ind_Set() const{
    return m_unique_zip_name_ind_isSet;
}

bool OAIZipcode::is_unique_zip_name_ind_Valid() const{
    return m_unique_zip_name_ind_isValid;
}

QString OAIZipcode::getUspsCarrierRouteRateSortDesc() const {
    return m_usps_carrier_route_rate_sort_desc;
}
void OAIZipcode::setUspsCarrierRouteRateSortDesc(const QString &usps_carrier_route_rate_sort_desc) {
    m_usps_carrier_route_rate_sort_desc = usps_carrier_route_rate_sort_desc;
    m_usps_carrier_route_rate_sort_desc_isSet = true;
}

bool OAIZipcode::is_usps_carrier_route_rate_sort_desc_Set() const{
    return m_usps_carrier_route_rate_sort_desc_isSet;
}

bool OAIZipcode::is_usps_carrier_route_rate_sort_desc_Valid() const{
    return m_usps_carrier_route_rate_sort_desc_isValid;
}

QString OAIZipcode::getUspsCarrierRouteSortCode() const {
    return m_usps_carrier_route_sort_code;
}
void OAIZipcode::setUspsCarrierRouteSortCode(const QString &usps_carrier_route_sort_code) {
    m_usps_carrier_route_sort_code = usps_carrier_route_sort_code;
    m_usps_carrier_route_sort_code_isSet = true;
}

bool OAIZipcode::is_usps_carrier_route_sort_code_Set() const{
    return m_usps_carrier_route_sort_code_isSet;
}

bool OAIZipcode::is_usps_carrier_route_sort_code_Valid() const{
    return m_usps_carrier_route_sort_code_isValid;
}

bool OAIZipcode::isUspsCityMailingInd() const {
    return m_usps_city_mailing_ind;
}
void OAIZipcode::setUspsCityMailingInd(const bool &usps_city_mailing_ind) {
    m_usps_city_mailing_ind = usps_city_mailing_ind;
    m_usps_city_mailing_ind_isSet = true;
}

bool OAIZipcode::is_usps_city_mailing_ind_Set() const{
    return m_usps_city_mailing_ind_isSet;
}

bool OAIZipcode::is_usps_city_mailing_ind_Valid() const{
    return m_usps_city_mailing_ind_isValid;
}

QString OAIZipcode::getUspsCountyName() const {
    return m_usps_county_name;
}
void OAIZipcode::setUspsCountyName(const QString &usps_county_name) {
    m_usps_county_name = usps_county_name;
    m_usps_county_name_isSet = true;
}

bool OAIZipcode::is_usps_county_name_Set() const{
    return m_usps_county_name_isSet;
}

bool OAIZipcode::is_usps_county_name_Valid() const{
    return m_usps_county_name_isValid;
}

QString OAIZipcode::getUspsDeliveryCode() const {
    return m_usps_delivery_code;
}
void OAIZipcode::setUspsDeliveryCode(const QString &usps_delivery_code) {
    m_usps_delivery_code = usps_delivery_code;
    m_usps_delivery_code_isSet = true;
}

bool OAIZipcode::is_usps_delivery_code_Set() const{
    return m_usps_delivery_code_isSet;
}

bool OAIZipcode::is_usps_delivery_code_Valid() const{
    return m_usps_delivery_code_isValid;
}

QString OAIZipcode::getUspsDeliveryDesc() const {
    return m_usps_delivery_desc;
}
void OAIZipcode::setUspsDeliveryDesc(const QString &usps_delivery_desc) {
    m_usps_delivery_desc = usps_delivery_desc;
    m_usps_delivery_desc_isSet = true;
}

bool OAIZipcode::is_usps_delivery_desc_Set() const{
    return m_usps_delivery_desc_isSet;
}

bool OAIZipcode::is_usps_delivery_desc_Valid() const{
    return m_usps_delivery_desc_isValid;
}

QString OAIZipcode::getUspsFacilityCode() const {
    return m_usps_facility_code;
}
void OAIZipcode::setUspsFacilityCode(const QString &usps_facility_code) {
    m_usps_facility_code = usps_facility_code;
    m_usps_facility_code_isSet = true;
}

bool OAIZipcode::is_usps_facility_code_Set() const{
    return m_usps_facility_code_isSet;
}

bool OAIZipcode::is_usps_facility_code_Valid() const{
    return m_usps_facility_code_isValid;
}

QString OAIZipcode::getUspsFacilityName() const {
    return m_usps_facility_name;
}
void OAIZipcode::setUspsFacilityName(const QString &usps_facility_name) {
    m_usps_facility_name = usps_facility_name;
    m_usps_facility_name_isSet = true;
}

bool OAIZipcode::is_usps_facility_name_Set() const{
    return m_usps_facility_name_isSet;
}

bool OAIZipcode::is_usps_facility_name_Valid() const{
    return m_usps_facility_name_isValid;
}

QString OAIZipcode::getUspsFinanceNumber() const {
    return m_usps_finance_number;
}
void OAIZipcode::setUspsFinanceNumber(const QString &usps_finance_number) {
    m_usps_finance_number = usps_finance_number;
    m_usps_finance_number_isSet = true;
}

bool OAIZipcode::is_usps_finance_number_Set() const{
    return m_usps_finance_number_isSet;
}

bool OAIZipcode::is_usps_finance_number_Valid() const{
    return m_usps_finance_number_isValid;
}

QString OAIZipcode::getUspsMainCityKey() const {
    return m_usps_main_city_key;
}
void OAIZipcode::setUspsMainCityKey(const QString &usps_main_city_key) {
    m_usps_main_city_key = usps_main_city_key;
    m_usps_main_city_key_isSet = true;
}

bool OAIZipcode::is_usps_main_city_key_Set() const{
    return m_usps_main_city_key_isSet;
}

bool OAIZipcode::is_usps_main_city_key_Valid() const{
    return m_usps_main_city_key_isValid;
}

QString OAIZipcode::getUspsMainCityName() const {
    return m_usps_main_city_name;
}
void OAIZipcode::setUspsMainCityName(const QString &usps_main_city_name) {
    m_usps_main_city_name = usps_main_city_name;
    m_usps_main_city_name_isSet = true;
}

bool OAIZipcode::is_usps_main_city_name_Set() const{
    return m_usps_main_city_name_isSet;
}

bool OAIZipcode::is_usps_main_city_name_Valid() const{
    return m_usps_main_city_name_isValid;
}

double OAIZipcode::getWaterAreaKm2() const {
    return m_water_area_km2;
}
void OAIZipcode::setWaterAreaKm2(const double &water_area_km2) {
    m_water_area_km2 = water_area_km2;
    m_water_area_km2_isSet = true;
}

bool OAIZipcode::is_water_area_km2_Set() const{
    return m_water_area_km2_isSet;
}

bool OAIZipcode::is_water_area_km2_Valid() const{
    return m_water_area_km2_isValid;
}

double OAIZipcode::getWaterAreaMi2() const {
    return m_water_area_mi2;
}
void OAIZipcode::setWaterAreaMi2(const double &water_area_mi2) {
    m_water_area_mi2 = water_area_mi2;
    m_water_area_mi2_isSet = true;
}

bool OAIZipcode::is_water_area_mi2_Set() const{
    return m_water_area_mi2_isSet;
}

bool OAIZipcode::is_water_area_mi2_Valid() const{
    return m_water_area_mi2_isValid;
}

QString OAIZipcode::getZipClassificationCode() const {
    return m_zip_classification_code;
}
void OAIZipcode::setZipClassificationCode(const QString &zip_classification_code) {
    m_zip_classification_code = zip_classification_code;
    m_zip_classification_code_isSet = true;
}

bool OAIZipcode::is_zip_classification_code_Set() const{
    return m_zip_classification_code_isSet;
}

bool OAIZipcode::is_zip_classification_code_Valid() const{
    return m_zip_classification_code_isValid;
}

QString OAIZipcode::getZipClassificationDesc() const {
    return m_zip_classification_desc;
}
void OAIZipcode::setZipClassificationDesc(const QString &zip_classification_desc) {
    m_zip_classification_desc = zip_classification_desc;
    m_zip_classification_desc_isSet = true;
}

bool OAIZipcode::is_zip_classification_desc_Set() const{
    return m_zip_classification_desc_isSet;
}

bool OAIZipcode::is_zip_classification_desc_Valid() const{
    return m_zip_classification_desc_isValid;
}

QString OAIZipcode::getZipCode() const {
    return m_zip_code;
}
void OAIZipcode::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIZipcode::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIZipcode::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

QSet<OAIZipcode_zipCodeStatistics_inner> OAIZipcode::getZipCodeStatistics() const {
    return m_zip_code_statistics;
}
void OAIZipcode::setZipCodeStatistics(const QSet<OAIZipcode_zipCodeStatistics_inner> &zip_code_statistics) {
    m_zip_code_statistics = zip_code_statistics;
    m_zip_code_statistics_isSet = true;
}

bool OAIZipcode::is_zip_code_statistics_Set() const{
    return m_zip_code_statistics_isSet;
}

bool OAIZipcode::is_zip_code_statistics_Valid() const{
    return m_zip_code_statistics_isValid;
}

bool OAIZipcode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_land_area_km2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_land_area_mi2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msa_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msa_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_abbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_fips_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_case_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_case_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_zip_name_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_carrier_route_rate_sort_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_carrier_route_sort_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_city_mailing_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_delivery_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_delivery_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_facility_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_facility_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_finance_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_main_city_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usps_main_city_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_area_km2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_area_mi2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_classification_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_classification_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_statistics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZipcode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_aliases_isValid && m_county_fips_code_isValid && m_division_code_isValid && m_division_name_isValid && m_land_area_km2_isValid && m_land_area_mi2_isValid && m_msa_code_isValid && m_msa_name_isValid && m_region_code_isValid && m_region_name_isValid && m_state_abbr_isValid && m_state_code_isValid && m_state_fips_code_isValid && m_state_name_isValid && m_title_case_city_name_isValid && m_title_case_county_name_isValid && m_unique_zip_name_ind_isValid && m_usps_carrier_route_rate_sort_desc_isValid && m_usps_carrier_route_sort_code_isValid && m_usps_city_mailing_ind_isValid && m_usps_county_name_isValid && m_usps_delivery_code_isValid && m_usps_delivery_desc_isValid && m_usps_facility_code_isValid && m_usps_facility_name_isValid && m_usps_finance_number_isValid && m_usps_main_city_key_isValid && m_usps_main_city_name_isValid && m_water_area_km2_isValid && m_water_area_mi2_isValid && m_zip_classification_code_isValid && m_zip_classification_desc_isValid && m_zip_code_isValid && m_zip_code_statistics_isValid && true;
}

} // namespace OpenAPI
