/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_distance_200_response_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_distance_200_response_data::OAIGet_distance_200_response_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_distance_200_response_data::OAIGet_distance_200_response_data() {
    this->initializeModel();
}

OAIGet_distance_200_response_data::~OAIGet_distance_200_response_data() {}

void OAIGet_distance_200_response_data::initializeModel() {

    m_distance_km_isSet = false;
    m_distance_km_isValid = false;

    m_distance_mi_isSet = false;
    m_distance_mi_isValid = false;

    m_zip_code1_isSet = false;
    m_zip_code1_isValid = false;

    m_zip_code2_isSet = false;
    m_zip_code2_isValid = false;
}

void OAIGet_distance_200_response_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_distance_200_response_data::fromJsonObject(QJsonObject json) {

    m_distance_km_isValid = ::OpenAPI::fromJsonValue(m_distance_km, json[QString("distanceKm")]);
    m_distance_km_isSet = !json[QString("distanceKm")].isNull() && m_distance_km_isValid;

    m_distance_mi_isValid = ::OpenAPI::fromJsonValue(m_distance_mi, json[QString("distanceMi")]);
    m_distance_mi_isSet = !json[QString("distanceMi")].isNull() && m_distance_mi_isValid;

    m_zip_code1_isValid = ::OpenAPI::fromJsonValue(m_zip_code1, json[QString("zipCode1")]);
    m_zip_code1_isSet = !json[QString("zipCode1")].isNull() && m_zip_code1_isValid;

    m_zip_code2_isValid = ::OpenAPI::fromJsonValue(m_zip_code2, json[QString("zipCode2")]);
    m_zip_code2_isSet = !json[QString("zipCode2")].isNull() && m_zip_code2_isValid;
}

QString OAIGet_distance_200_response_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_distance_200_response_data::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_km_isSet) {
        obj.insert(QString("distanceKm"), ::OpenAPI::toJsonValue(m_distance_km));
    }
    if (m_distance_mi_isSet) {
        obj.insert(QString("distanceMi"), ::OpenAPI::toJsonValue(m_distance_mi));
    }
    if (m_zip_code1_isSet) {
        obj.insert(QString("zipCode1"), ::OpenAPI::toJsonValue(m_zip_code1));
    }
    if (m_zip_code2_isSet) {
        obj.insert(QString("zipCode2"), ::OpenAPI::toJsonValue(m_zip_code2));
    }
    return obj;
}

double OAIGet_distance_200_response_data::getDistanceKm() const {
    return m_distance_km;
}
void OAIGet_distance_200_response_data::setDistanceKm(const double &distance_km) {
    m_distance_km = distance_km;
    m_distance_km_isSet = true;
}

bool OAIGet_distance_200_response_data::is_distance_km_Set() const{
    return m_distance_km_isSet;
}

bool OAIGet_distance_200_response_data::is_distance_km_Valid() const{
    return m_distance_km_isValid;
}

double OAIGet_distance_200_response_data::getDistanceMi() const {
    return m_distance_mi;
}
void OAIGet_distance_200_response_data::setDistanceMi(const double &distance_mi) {
    m_distance_mi = distance_mi;
    m_distance_mi_isSet = true;
}

bool OAIGet_distance_200_response_data::is_distance_mi_Set() const{
    return m_distance_mi_isSet;
}

bool OAIGet_distance_200_response_data::is_distance_mi_Valid() const{
    return m_distance_mi_isValid;
}

QString OAIGet_distance_200_response_data::getZipCode1() const {
    return m_zip_code1;
}
void OAIGet_distance_200_response_data::setZipCode1(const QString &zip_code1) {
    m_zip_code1 = zip_code1;
    m_zip_code1_isSet = true;
}

bool OAIGet_distance_200_response_data::is_zip_code1_Set() const{
    return m_zip_code1_isSet;
}

bool OAIGet_distance_200_response_data::is_zip_code1_Valid() const{
    return m_zip_code1_isValid;
}

QString OAIGet_distance_200_response_data::getZipCode2() const {
    return m_zip_code2;
}
void OAIGet_distance_200_response_data::setZipCode2(const QString &zip_code2) {
    m_zip_code2 = zip_code2;
    m_zip_code2_isSet = true;
}

bool OAIGet_distance_200_response_data::is_zip_code2_Set() const{
    return m_zip_code2_isSet;
}

bool OAIGet_distance_200_response_data::is_zip_code2_Valid() const{
    return m_zip_code2_isValid;
}

bool OAIGet_distance_200_response_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_mi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_distance_200_response_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_km_isValid && m_distance_mi_isValid && m_zip_code1_isValid && m_zip_code2_isValid && true;
}

} // namespace OpenAPI
