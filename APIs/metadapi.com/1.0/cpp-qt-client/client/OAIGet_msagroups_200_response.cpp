/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_msagroups_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_msagroups_200_response::OAIGet_msagroups_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_msagroups_200_response::OAIGet_msagroups_200_response() {
    this->initializeModel();
}

OAIGet_msagroups_200_response::~OAIGet_msagroups_200_response() {}

void OAIGet_msagroups_200_response::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIGet_msagroups_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_msagroups_200_response::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIGet_msagroups_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_msagroups_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QSet<OAIGet_msagroups_200_response_data_inner> OAIGet_msagroups_200_response::getData() const {
    return m_data;
}
void OAIGet_msagroups_200_response::setData(const QSet<OAIGet_msagroups_200_response_data_inner> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGet_msagroups_200_response::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGet_msagroups_200_response::is_data_Valid() const{
    return m_data_isValid;
}

OAIGet_msagroups_200_response_links OAIGet_msagroups_200_response::getLinks() const {
    return m_links;
}
void OAIGet_msagroups_200_response::setLinks(const OAIGet_msagroups_200_response_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIGet_msagroups_200_response::is_links_Set() const{
    return m_links_isSet;
}

bool OAIGet_msagroups_200_response::is_links_Valid() const{
    return m_links_isValid;
}

OAIGet_msagroups_200_response_meta OAIGet_msagroups_200_response::getMeta() const {
    return m_meta;
}
void OAIGet_msagroups_200_response::setMeta(const OAIGet_msagroups_200_response_meta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIGet_msagroups_200_response::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIGet_msagroups_200_response::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIGet_msagroups_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_msagroups_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_links_isValid && m_meta_isValid && true;
}

} // namespace OpenAPI
