/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_radius_401_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_radius_401_response::OAIGet_radius_401_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_radius_401_response::OAIGet_radius_401_response() {
    this->initializeModel();
}

OAIGet_radius_401_response::~OAIGet_radius_401_response() {}

void OAIGet_radius_401_response::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIGet_radius_401_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_radius_401_response::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIGet_radius_401_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_radius_401_response::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QString OAIGet_radius_401_response::getMessage() const {
    return m_message;
}
void OAIGet_radius_401_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGet_radius_401_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGet_radius_401_response::is_message_Valid() const{
    return m_message_isValid;
}

double OAIGet_radius_401_response::getStatusCode() const {
    return m_status_code;
}
void OAIGet_radius_401_response::setStatusCode(const double &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIGet_radius_401_response::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIGet_radius_401_response::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIGet_radius_401_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_radius_401_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_status_code_isValid && true;
}

} // namespace OpenAPI
