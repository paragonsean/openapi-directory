/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_radius_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_radius_200_response_data_inner::OAIGet_radius_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_radius_200_response_data_inner::OAIGet_radius_200_response_data_inner() {
    this->initializeModel();
}

OAIGet_radius_200_response_data_inner::~OAIGet_radius_200_response_data_inner() {}

void OAIGet_radius_200_response_data_inner::initializeModel() {

    m_distance_km_isSet = false;
    m_distance_km_isValid = false;

    m_distance_mi_isSet = false;
    m_distance_mi_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;

    m_zip_code_url_isSet = false;
    m_zip_code_url_isValid = false;
}

void OAIGet_radius_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_radius_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_distance_km_isValid = ::OpenAPI::fromJsonValue(m_distance_km, json[QString("distanceKm")]);
    m_distance_km_isSet = !json[QString("distanceKm")].isNull() && m_distance_km_isValid;

    m_distance_mi_isValid = ::OpenAPI::fromJsonValue(m_distance_mi, json[QString("distanceMi")]);
    m_distance_mi_isSet = !json[QString("distanceMi")].isNull() && m_distance_mi_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;

    m_zip_code_url_isValid = ::OpenAPI::fromJsonValue(m_zip_code_url, json[QString("zipCodeUrl")]);
    m_zip_code_url_isSet = !json[QString("zipCodeUrl")].isNull() && m_zip_code_url_isValid;
}

QString OAIGet_radius_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_radius_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_km_isSet) {
        obj.insert(QString("distanceKm"), ::OpenAPI::toJsonValue(m_distance_km));
    }
    if (m_distance_mi_isSet) {
        obj.insert(QString("distanceMi"), ::OpenAPI::toJsonValue(m_distance_mi));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    if (m_zip_code_url_isSet) {
        obj.insert(QString("zipCodeUrl"), ::OpenAPI::toJsonValue(m_zip_code_url));
    }
    return obj;
}

double OAIGet_radius_200_response_data_inner::getDistanceKm() const {
    return m_distance_km;
}
void OAIGet_radius_200_response_data_inner::setDistanceKm(const double &distance_km) {
    m_distance_km = distance_km;
    m_distance_km_isSet = true;
}

bool OAIGet_radius_200_response_data_inner::is_distance_km_Set() const{
    return m_distance_km_isSet;
}

bool OAIGet_radius_200_response_data_inner::is_distance_km_Valid() const{
    return m_distance_km_isValid;
}

double OAIGet_radius_200_response_data_inner::getDistanceMi() const {
    return m_distance_mi;
}
void OAIGet_radius_200_response_data_inner::setDistanceMi(const double &distance_mi) {
    m_distance_mi = distance_mi;
    m_distance_mi_isSet = true;
}

bool OAIGet_radius_200_response_data_inner::is_distance_mi_Set() const{
    return m_distance_mi_isSet;
}

bool OAIGet_radius_200_response_data_inner::is_distance_mi_Valid() const{
    return m_distance_mi_isValid;
}

double OAIGet_radius_200_response_data_inner::getLatitude() const {
    return m_latitude;
}
void OAIGet_radius_200_response_data_inner::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGet_radius_200_response_data_inner::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGet_radius_200_response_data_inner::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIGet_radius_200_response_data_inner::getLongitude() const {
    return m_longitude;
}
void OAIGet_radius_200_response_data_inner::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGet_radius_200_response_data_inner::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGet_radius_200_response_data_inner::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIGet_radius_200_response_data_inner::getZipCode() const {
    return m_zip_code;
}
void OAIGet_radius_200_response_data_inner::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIGet_radius_200_response_data_inner::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIGet_radius_200_response_data_inner::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

QString OAIGet_radius_200_response_data_inner::getZipCodeUrl() const {
    return m_zip_code_url;
}
void OAIGet_radius_200_response_data_inner::setZipCodeUrl(const QString &zip_code_url) {
    m_zip_code_url = zip_code_url;
    m_zip_code_url_isSet = true;
}

bool OAIGet_radius_200_response_data_inner::is_zip_code_url_Set() const{
    return m_zip_code_url_isSet;
}

bool OAIGet_radius_200_response_data_inner::is_zip_code_url_Valid() const{
    return m_zip_code_url_isValid;
}

bool OAIGet_radius_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_mi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_radius_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_km_isValid && m_distance_mi_isValid && m_latitude_isValid && m_longitude_isValid && m_zip_code_isValid && m_zip_code_url_isValid && true;
}

} // namespace OpenAPI
