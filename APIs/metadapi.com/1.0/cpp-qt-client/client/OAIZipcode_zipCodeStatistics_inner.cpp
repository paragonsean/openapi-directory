/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZipcode_zipCodeStatistics_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZipcode_zipCodeStatistics_inner::OAIZipcode_zipCodeStatistics_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZipcode_zipCodeStatistics_inner::OAIZipcode_zipCodeStatistics_inner() {
    this->initializeModel();
}

OAIZipcode_zipCodeStatistics_inner::~OAIZipcode_zipCodeStatistics_inner() {}

void OAIZipcode_zipCodeStatistics_inner::initializeModel() {

    m_female_population_isSet = false;
    m_female_population_isValid = false;

    m_male_population_isSet = false;
    m_male_population_isValid = false;

    m_total_population_isSet = false;
    m_total_population_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIZipcode_zipCodeStatistics_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZipcode_zipCodeStatistics_inner::fromJsonObject(QJsonObject json) {

    m_female_population_isValid = ::OpenAPI::fromJsonValue(m_female_population, json[QString("femalePopulation")]);
    m_female_population_isSet = !json[QString("femalePopulation")].isNull() && m_female_population_isValid;

    m_male_population_isValid = ::OpenAPI::fromJsonValue(m_male_population, json[QString("malePopulation")]);
    m_male_population_isSet = !json[QString("malePopulation")].isNull() && m_male_population_isValid;

    m_total_population_isValid = ::OpenAPI::fromJsonValue(m_total_population, json[QString("totalPopulation")]);
    m_total_population_isSet = !json[QString("totalPopulation")].isNull() && m_total_population_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIZipcode_zipCodeStatistics_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZipcode_zipCodeStatistics_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_female_population_isSet) {
        obj.insert(QString("femalePopulation"), ::OpenAPI::toJsonValue(m_female_population));
    }
    if (m_male_population_isSet) {
        obj.insert(QString("malePopulation"), ::OpenAPI::toJsonValue(m_male_population));
    }
    if (m_total_population_isSet) {
        obj.insert(QString("totalPopulation"), ::OpenAPI::toJsonValue(m_total_population));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

double OAIZipcode_zipCodeStatistics_inner::getFemalePopulation() const {
    return m_female_population;
}
void OAIZipcode_zipCodeStatistics_inner::setFemalePopulation(const double &female_population) {
    m_female_population = female_population;
    m_female_population_isSet = true;
}

bool OAIZipcode_zipCodeStatistics_inner::is_female_population_Set() const{
    return m_female_population_isSet;
}

bool OAIZipcode_zipCodeStatistics_inner::is_female_population_Valid() const{
    return m_female_population_isValid;
}

double OAIZipcode_zipCodeStatistics_inner::getMalePopulation() const {
    return m_male_population;
}
void OAIZipcode_zipCodeStatistics_inner::setMalePopulation(const double &male_population) {
    m_male_population = male_population;
    m_male_population_isSet = true;
}

bool OAIZipcode_zipCodeStatistics_inner::is_male_population_Set() const{
    return m_male_population_isSet;
}

bool OAIZipcode_zipCodeStatistics_inner::is_male_population_Valid() const{
    return m_male_population_isValid;
}

double OAIZipcode_zipCodeStatistics_inner::getTotalPopulation() const {
    return m_total_population;
}
void OAIZipcode_zipCodeStatistics_inner::setTotalPopulation(const double &total_population) {
    m_total_population = total_population;
    m_total_population_isSet = true;
}

bool OAIZipcode_zipCodeStatistics_inner::is_total_population_Set() const{
    return m_total_population_isSet;
}

bool OAIZipcode_zipCodeStatistics_inner::is_total_population_Valid() const{
    return m_total_population_isValid;
}

double OAIZipcode_zipCodeStatistics_inner::getYear() const {
    return m_year;
}
void OAIZipcode_zipCodeStatistics_inner::setYear(const double &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIZipcode_zipCodeStatistics_inner::is_year_Set() const{
    return m_year_isSet;
}

bool OAIZipcode_zipCodeStatistics_inner::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIZipcode_zipCodeStatistics_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_female_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_male_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZipcode_zipCodeStatistics_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_female_population_isValid && m_male_population_isValid && m_total_population_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
