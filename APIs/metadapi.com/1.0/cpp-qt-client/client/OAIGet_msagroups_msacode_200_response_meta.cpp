/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_msagroups_msacode_200_response_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_msagroups_msacode_200_response_meta::OAIGet_msagroups_msacode_200_response_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_msagroups_msacode_200_response_meta::OAIGet_msagroups_msacode_200_response_meta() {
    this->initializeModel();
}

OAIGet_msagroups_msacode_200_response_meta::~OAIGet_msagroups_msacode_200_response_meta() {}

void OAIGet_msagroups_msacode_200_response_meta::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;
}

void OAIGet_msagroups_msacode_200_response_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_msagroups_msacode_200_response_meta::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;
}

QString OAIGet_msagroups_msacode_200_response_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_msagroups_msacode_200_response_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    return obj;
}

double OAIGet_msagroups_msacode_200_response_meta::getCount() const {
    return m_count;
}
void OAIGet_msagroups_msacode_200_response_meta::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGet_msagroups_msacode_200_response_meta::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGet_msagroups_msacode_200_response_meta::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIGet_msagroups_msacode_200_response_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_msagroups_msacode_200_response_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && true;
}

} // namespace OpenAPI
