# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZipcodeZipCodeStatisticsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, female_population: float=None, male_population: float=None, total_population: float=None, year: float=None):
        """ZipcodeZipCodeStatisticsInner - a model defined in OpenAPI

        :param female_population: The female_population of this ZipcodeZipCodeStatisticsInner.
        :param male_population: The male_population of this ZipcodeZipCodeStatisticsInner.
        :param total_population: The total_population of this ZipcodeZipCodeStatisticsInner.
        :param year: The year of this ZipcodeZipCodeStatisticsInner.
        """
        self.openapi_types = {
            'female_population': float,
            'male_population': float,
            'total_population': float,
            'year': float
        }

        self.attribute_map = {
            'female_population': 'femalePopulation',
            'male_population': 'malePopulation',
            'total_population': 'totalPopulation',
            'year': 'year'
        }

        self._female_population = female_population
        self._male_population = male_population
        self._total_population = total_population
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZipcodeZipCodeStatisticsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zipcode_zipCodeStatistics_inner of this ZipcodeZipCodeStatisticsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def female_population(self):
        """Gets the female_population of this ZipcodeZipCodeStatisticsInner.

        Total female population of the zip code.

        :return: The female_population of this ZipcodeZipCodeStatisticsInner.
        :rtype: float
        """
        return self._female_population

    @female_population.setter
    def female_population(self, female_population):
        """Sets the female_population of this ZipcodeZipCodeStatisticsInner.

        Total female population of the zip code.

        :param female_population: The female_population of this ZipcodeZipCodeStatisticsInner.
        :type female_population: float
        """
        if female_population is None:
            raise ValueError("Invalid value for `female_population`, must not be `None`")

        self._female_population = female_population

    @property
    def male_population(self):
        """Gets the male_population of this ZipcodeZipCodeStatisticsInner.

        Total Male population of the zip code.

        :return: The male_population of this ZipcodeZipCodeStatisticsInner.
        :rtype: float
        """
        return self._male_population

    @male_population.setter
    def male_population(self, male_population):
        """Sets the male_population of this ZipcodeZipCodeStatisticsInner.

        Total Male population of the zip code.

        :param male_population: The male_population of this ZipcodeZipCodeStatisticsInner.
        :type male_population: float
        """
        if male_population is None:
            raise ValueError("Invalid value for `male_population`, must not be `None`")

        self._male_population = male_population

    @property
    def total_population(self):
        """Gets the total_population of this ZipcodeZipCodeStatisticsInner.

        Total population of the zip code

        :return: The total_population of this ZipcodeZipCodeStatisticsInner.
        :rtype: float
        """
        return self._total_population

    @total_population.setter
    def total_population(self, total_population):
        """Sets the total_population of this ZipcodeZipCodeStatisticsInner.

        Total population of the zip code

        :param total_population: The total_population of this ZipcodeZipCodeStatisticsInner.
        :type total_population: float
        """
        if total_population is None:
            raise ValueError("Invalid value for `total_population`, must not be `None`")

        self._total_population = total_population

    @property
    def year(self):
        """Gets the year of this ZipcodeZipCodeStatisticsInner.

        Year for the captured statistic

        :return: The year of this ZipcodeZipCodeStatisticsInner.
        :rtype: float
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ZipcodeZipCodeStatisticsInner.

        Year for the captured statistic

        :param year: The year of this ZipcodeZipCodeStatisticsInner.
        :type year: float
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
