# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDistance200ResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance_km: float=None, distance_mi: float=None, zip_code1: str=None, zip_code2: str=None):
        """GetDistance200ResponseData - a model defined in OpenAPI

        :param distance_km: The distance_km of this GetDistance200ResponseData.
        :param distance_mi: The distance_mi of this GetDistance200ResponseData.
        :param zip_code1: The zip_code1 of this GetDistance200ResponseData.
        :param zip_code2: The zip_code2 of this GetDistance200ResponseData.
        """
        self.openapi_types = {
            'distance_km': float,
            'distance_mi': float,
            'zip_code1': str,
            'zip_code2': str
        }

        self.attribute_map = {
            'distance_km': 'distanceKm',
            'distance_mi': 'distanceMi',
            'zip_code1': 'zipCode1',
            'zip_code2': 'zipCode2'
        }

        self._distance_km = distance_km
        self._distance_mi = distance_mi
        self._zip_code1 = zip_code1
        self._zip_code2 = zip_code2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDistance200ResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_distance_200_response_data of this GetDistance200ResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance_km(self):
        """Gets the distance_km of this GetDistance200ResponseData.


        :return: The distance_km of this GetDistance200ResponseData.
        :rtype: float
        """
        return self._distance_km

    @distance_km.setter
    def distance_km(self, distance_km):
        """Sets the distance_km of this GetDistance200ResponseData.


        :param distance_km: The distance_km of this GetDistance200ResponseData.
        :type distance_km: float
        """
        if distance_km is None:
            raise ValueError("Invalid value for `distance_km`, must not be `None`")

        self._distance_km = distance_km

    @property
    def distance_mi(self):
        """Gets the distance_mi of this GetDistance200ResponseData.


        :return: The distance_mi of this GetDistance200ResponseData.
        :rtype: float
        """
        return self._distance_mi

    @distance_mi.setter
    def distance_mi(self, distance_mi):
        """Sets the distance_mi of this GetDistance200ResponseData.


        :param distance_mi: The distance_mi of this GetDistance200ResponseData.
        :type distance_mi: float
        """
        if distance_mi is None:
            raise ValueError("Invalid value for `distance_mi`, must not be `None`")

        self._distance_mi = distance_mi

    @property
    def zip_code1(self):
        """Gets the zip_code1 of this GetDistance200ResponseData.


        :return: The zip_code1 of this GetDistance200ResponseData.
        :rtype: str
        """
        return self._zip_code1

    @zip_code1.setter
    def zip_code1(self, zip_code1):
        """Sets the zip_code1 of this GetDistance200ResponseData.


        :param zip_code1: The zip_code1 of this GetDistance200ResponseData.
        :type zip_code1: str
        """
        if zip_code1 is None:
            raise ValueError("Invalid value for `zip_code1`, must not be `None`")
        if zip_code1 is not None and len(zip_code1) < 1:
            raise ValueError("Invalid value for `zip_code1`, length must be greater than or equal to `1`")

        self._zip_code1 = zip_code1

    @property
    def zip_code2(self):
        """Gets the zip_code2 of this GetDistance200ResponseData.


        :return: The zip_code2 of this GetDistance200ResponseData.
        :rtype: str
        """
        return self._zip_code2

    @zip_code2.setter
    def zip_code2(self, zip_code2):
        """Sets the zip_code2 of this GetDistance200ResponseData.


        :param zip_code2: The zip_code2 of this GetDistance200ResponseData.
        :type zip_code2: str
        """
        if zip_code2 is None:
            raise ValueError("Invalid value for `zip_code2`, must not be `None`")
        if zip_code2 is not None and len(zip_code2) < 1:
            raise ValueError("Invalid value for `zip_code2`, length must be greater than or equal to `1`")

        self._zip_code2 = zip_code2
