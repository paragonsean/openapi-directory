# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_msagroups200_response_data_inner_states_inner import GetMsagroups200ResponseDataInnerStatesInner
from openapi_server import util


class GetMsagroups200ResponseDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msa_code: str=None, msa_name: str=None, states: list[GetMsagroups200ResponseDataInnerStatesInner]=None):
        """GetMsagroups200ResponseDataInner - a model defined in OpenAPI

        :param msa_code: The msa_code of this GetMsagroups200ResponseDataInner.
        :param msa_name: The msa_name of this GetMsagroups200ResponseDataInner.
        :param states: The states of this GetMsagroups200ResponseDataInner.
        """
        self.openapi_types = {
            'msa_code': str,
            'msa_name': str,
            'states': list[GetMsagroups200ResponseDataInnerStatesInner]
        }

        self.attribute_map = {
            'msa_code': 'msaCode',
            'msa_name': 'msaName',
            'states': 'states'
        }

        self._msa_code = msa_code
        self._msa_name = msa_name
        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMsagroups200ResponseDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_msagroups_200_response_data_inner of this GetMsagroups200ResponseDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msa_code(self):
        """Gets the msa_code of this GetMsagroups200ResponseDataInner.

        5 digit MSA (Metropolitan Statistical Area) code.

        :return: The msa_code of this GetMsagroups200ResponseDataInner.
        :rtype: str
        """
        return self._msa_code

    @msa_code.setter
    def msa_code(self, msa_code):
        """Sets the msa_code of this GetMsagroups200ResponseDataInner.

        5 digit MSA (Metropolitan Statistical Area) code.

        :param msa_code: The msa_code of this GetMsagroups200ResponseDataInner.
        :type msa_code: str
        """
        if msa_code is None:
            raise ValueError("Invalid value for `msa_code`, must not be `None`")
        if msa_code is not None and len(msa_code) < 1:
            raise ValueError("Invalid value for `msa_code`, length must be greater than or equal to `1`")

        self._msa_code = msa_code

    @property
    def msa_name(self):
        """Gets the msa_name of this GetMsagroups200ResponseDataInner.

        Name of the defined MSA code.

        :return: The msa_name of this GetMsagroups200ResponseDataInner.
        :rtype: str
        """
        return self._msa_name

    @msa_name.setter
    def msa_name(self, msa_name):
        """Sets the msa_name of this GetMsagroups200ResponseDataInner.

        Name of the defined MSA code.

        :param msa_name: The msa_name of this GetMsagroups200ResponseDataInner.
        :type msa_name: str
        """
        if msa_name is None:
            raise ValueError("Invalid value for `msa_name`, must not be `None`")
        if msa_name is not None and len(msa_name) < 1:
            raise ValueError("Invalid value for `msa_name`, length must be greater than or equal to `1`")

        self._msa_name = msa_name

    @property
    def states(self):
        """Gets the states of this GetMsagroups200ResponseDataInner.

        Array with states and counties that make up MSA Group

        :return: The states of this GetMsagroups200ResponseDataInner.
        :rtype: list[GetMsagroups200ResponseDataInnerStatesInner]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this GetMsagroups200ResponseDataInner.

        Array with states and counties that make up MSA Group

        :param states: The states of this GetMsagroups200ResponseDataInner.
        :type states: list[GetMsagroups200ResponseDataInnerStatesInner]
        """
        if states is None:
            raise ValueError("Invalid value for `states`, must not be `None`")
        if states is not None and len(states) < 1:
            raise ValueError("Invalid value for `states`, number of items must be greater than or equal to `1`")

        self._states = states
