# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZipcodeCityAliasesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title_case_city_name: str=None, usps_city_abbr: str=None, usps_city_key: str=None, usps_city_mailing_ind: bool=None, usps_city_name: str=None, usps_main_city_ind: bool=None):
        """ZipcodeCityAliasesInner - a model defined in OpenAPI

        :param title_case_city_name: The title_case_city_name of this ZipcodeCityAliasesInner.
        :param usps_city_abbr: The usps_city_abbr of this ZipcodeCityAliasesInner.
        :param usps_city_key: The usps_city_key of this ZipcodeCityAliasesInner.
        :param usps_city_mailing_ind: The usps_city_mailing_ind of this ZipcodeCityAliasesInner.
        :param usps_city_name: The usps_city_name of this ZipcodeCityAliasesInner.
        :param usps_main_city_ind: The usps_main_city_ind of this ZipcodeCityAliasesInner.
        """
        self.openapi_types = {
            'title_case_city_name': str,
            'usps_city_abbr': str,
            'usps_city_key': str,
            'usps_city_mailing_ind': bool,
            'usps_city_name': str,
            'usps_main_city_ind': bool
        }

        self.attribute_map = {
            'title_case_city_name': 'titleCaseCityName',
            'usps_city_abbr': 'uspsCityAbbr',
            'usps_city_key': 'uspsCityKey',
            'usps_city_mailing_ind': 'uspsCityMailingInd',
            'usps_city_name': 'uspsCityName',
            'usps_main_city_ind': 'uspsMainCityInd'
        }

        self._title_case_city_name = title_case_city_name
        self._usps_city_abbr = usps_city_abbr
        self._usps_city_key = usps_city_key
        self._usps_city_mailing_ind = usps_city_mailing_ind
        self._usps_city_name = usps_city_name
        self._usps_main_city_ind = usps_main_city_ind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZipcodeCityAliasesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zipcode_cityAliases_inner of this ZipcodeCityAliasesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title_case_city_name(self):
        """Gets the title_case_city_name of this ZipcodeCityAliasesInner.

        USPS City / Town Name for the zip code.

        :return: The title_case_city_name of this ZipcodeCityAliasesInner.
        :rtype: str
        """
        return self._title_case_city_name

    @title_case_city_name.setter
    def title_case_city_name(self, title_case_city_name):
        """Sets the title_case_city_name of this ZipcodeCityAliasesInner.

        USPS City / Town Name for the zip code.

        :param title_case_city_name: The title_case_city_name of this ZipcodeCityAliasesInner.
        :type title_case_city_name: str
        """
        if title_case_city_name is None:
            raise ValueError("Invalid value for `title_case_city_name`, must not be `None`")
        if title_case_city_name is not None and len(title_case_city_name) < 1:
            raise ValueError("Invalid value for `title_case_city_name`, length must be greater than or equal to `1`")

        self._title_case_city_name = title_case_city_name

    @property
    def usps_city_abbr(self):
        """Gets the usps_city_abbr of this ZipcodeCityAliasesInner.

        Main city abbreviation provided by USPS. Null if not provided. Uppercase.

        :return: The usps_city_abbr of this ZipcodeCityAliasesInner.
        :rtype: str
        """
        return self._usps_city_abbr

    @usps_city_abbr.setter
    def usps_city_abbr(self, usps_city_abbr):
        """Sets the usps_city_abbr of this ZipcodeCityAliasesInner.

        Main city abbreviation provided by USPS. Null if not provided. Uppercase.

        :param usps_city_abbr: The usps_city_abbr of this ZipcodeCityAliasesInner.
        :type usps_city_abbr: str
        """
        if usps_city_abbr is None:
            raise ValueError("Invalid value for `usps_city_abbr`, must not be `None`")
        if usps_city_abbr is not None and len(usps_city_abbr) < 1:
            raise ValueError("Invalid value for `usps_city_abbr`, length must be greater than or equal to `1`")

        self._usps_city_abbr = usps_city_abbr

    @property
    def usps_city_key(self):
        """Gets the usps_city_key of this ZipcodeCityAliasesInner.

        USPS City / Town key identifier city of the zip code.

        :return: The usps_city_key of this ZipcodeCityAliasesInner.
        :rtype: str
        """
        return self._usps_city_key

    @usps_city_key.setter
    def usps_city_key(self, usps_city_key):
        """Sets the usps_city_key of this ZipcodeCityAliasesInner.

        USPS City / Town key identifier city of the zip code.

        :param usps_city_key: The usps_city_key of this ZipcodeCityAliasesInner.
        :type usps_city_key: str
        """
        if usps_city_key is None:
            raise ValueError("Invalid value for `usps_city_key`, must not be `None`")
        if usps_city_key is not None and len(usps_city_key) < 1:
            raise ValueError("Invalid value for `usps_city_key`, length must be greater than or equal to `1`")

        self._usps_city_key = usps_city_key

    @property
    def usps_city_mailing_ind(self):
        """Gets the usps_city_mailing_ind of this ZipcodeCityAliasesInner.

        City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.

        :return: The usps_city_mailing_ind of this ZipcodeCityAliasesInner.
        :rtype: bool
        """
        return self._usps_city_mailing_ind

    @usps_city_mailing_ind.setter
    def usps_city_mailing_ind(self, usps_city_mailing_ind):
        """Sets the usps_city_mailing_ind of this ZipcodeCityAliasesInner.

        City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.

        :param usps_city_mailing_ind: The usps_city_mailing_ind of this ZipcodeCityAliasesInner.
        :type usps_city_mailing_ind: bool
        """
        if usps_city_mailing_ind is None:
            raise ValueError("Invalid value for `usps_city_mailing_ind`, must not be `None`")

        self._usps_city_mailing_ind = usps_city_mailing_ind

    @property
    def usps_city_name(self):
        """Gets the usps_city_name of this ZipcodeCityAliasesInner.

        USPS City / Town Name for the zip code. All uppercase.

        :return: The usps_city_name of this ZipcodeCityAliasesInner.
        :rtype: str
        """
        return self._usps_city_name

    @usps_city_name.setter
    def usps_city_name(self, usps_city_name):
        """Sets the usps_city_name of this ZipcodeCityAliasesInner.

        USPS City / Town Name for the zip code. All uppercase.

        :param usps_city_name: The usps_city_name of this ZipcodeCityAliasesInner.
        :type usps_city_name: str
        """
        if usps_city_name is None:
            raise ValueError("Invalid value for `usps_city_name`, must not be `None`")
        if usps_city_name is not None and len(usps_city_name) < 1:
            raise ValueError("Invalid value for `usps_city_name`, length must be greater than or equal to `1`")

        self._usps_city_name = usps_city_name

    @property
    def usps_main_city_ind(self):
        """Gets the usps_main_city_ind of this ZipcodeCityAliasesInner.

        If true, the city name and code is the main zip code city name.  (Preferred USPS city).

        :return: The usps_main_city_ind of this ZipcodeCityAliasesInner.
        :rtype: bool
        """
        return self._usps_main_city_ind

    @usps_main_city_ind.setter
    def usps_main_city_ind(self, usps_main_city_ind):
        """Sets the usps_main_city_ind of this ZipcodeCityAliasesInner.

        If true, the city name and code is the main zip code city name.  (Preferred USPS city).

        :param usps_main_city_ind: The usps_main_city_ind of this ZipcodeCityAliasesInner.
        :type usps_main_city_ind: bool
        """
        if usps_main_city_ind is None:
            raise ValueError("Invalid value for `usps_main_city_ind`, must not be `None`")

        self._usps_main_city_ind = usps_main_city_ind
