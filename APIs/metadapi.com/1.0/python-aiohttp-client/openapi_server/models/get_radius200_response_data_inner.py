# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRadius200ResponseDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance_km: float=None, distance_mi: float=None, latitude: float=None, longitude: float=None, zip_code: str=None, zip_code_url: str=None):
        """GetRadius200ResponseDataInner - a model defined in OpenAPI

        :param distance_km: The distance_km of this GetRadius200ResponseDataInner.
        :param distance_mi: The distance_mi of this GetRadius200ResponseDataInner.
        :param latitude: The latitude of this GetRadius200ResponseDataInner.
        :param longitude: The longitude of this GetRadius200ResponseDataInner.
        :param zip_code: The zip_code of this GetRadius200ResponseDataInner.
        :param zip_code_url: The zip_code_url of this GetRadius200ResponseDataInner.
        """
        self.openapi_types = {
            'distance_km': float,
            'distance_mi': float,
            'latitude': float,
            'longitude': float,
            'zip_code': str,
            'zip_code_url': str
        }

        self.attribute_map = {
            'distance_km': 'distanceKm',
            'distance_mi': 'distanceMi',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'zip_code': 'zipCode',
            'zip_code_url': 'zipCodeUrl'
        }

        self._distance_km = distance_km
        self._distance_mi = distance_mi
        self._latitude = latitude
        self._longitude = longitude
        self._zip_code = zip_code
        self._zip_code_url = zip_code_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRadius200ResponseDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_radius_200_response_data_inner of this GetRadius200ResponseDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance_km(self):
        """Gets the distance_km of this GetRadius200ResponseDataInner.

        Distance to query parameter zip code in kilometers

        :return: The distance_km of this GetRadius200ResponseDataInner.
        :rtype: float
        """
        return self._distance_km

    @distance_km.setter
    def distance_km(self, distance_km):
        """Sets the distance_km of this GetRadius200ResponseDataInner.

        Distance to query parameter zip code in kilometers

        :param distance_km: The distance_km of this GetRadius200ResponseDataInner.
        :type distance_km: float
        """
        if distance_km is None:
            raise ValueError("Invalid value for `distance_km`, must not be `None`")

        self._distance_km = distance_km

    @property
    def distance_mi(self):
        """Gets the distance_mi of this GetRadius200ResponseDataInner.

        Distance to query parameter zip code in miles

        :return: The distance_mi of this GetRadius200ResponseDataInner.
        :rtype: float
        """
        return self._distance_mi

    @distance_mi.setter
    def distance_mi(self, distance_mi):
        """Sets the distance_mi of this GetRadius200ResponseDataInner.

        Distance to query parameter zip code in miles

        :param distance_mi: The distance_mi of this GetRadius200ResponseDataInner.
        :type distance_mi: float
        """
        if distance_mi is None:
            raise ValueError("Invalid value for `distance_mi`, must not be `None`")

        self._distance_mi = distance_mi

    @property
    def latitude(self):
        """Gets the latitude of this GetRadius200ResponseDataInner.

        Zip Code Latitude

        :return: The latitude of this GetRadius200ResponseDataInner.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GetRadius200ResponseDataInner.

        Zip Code Latitude

        :param latitude: The latitude of this GetRadius200ResponseDataInner.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GetRadius200ResponseDataInner.

        Zip Code Longitude

        :return: The longitude of this GetRadius200ResponseDataInner.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GetRadius200ResponseDataInner.

        Zip Code Longitude

        :param longitude: The longitude of this GetRadius200ResponseDataInner.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def zip_code(self):
        """Gets the zip_code of this GetRadius200ResponseDataInner.

        5 Digit Zip Code. Zone Improvement Plan.

        :return: The zip_code of this GetRadius200ResponseDataInner.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this GetRadius200ResponseDataInner.

        5 Digit Zip Code. Zone Improvement Plan.

        :param zip_code: The zip_code of this GetRadius200ResponseDataInner.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")
        if zip_code is not None and len(zip_code) > 5:
            raise ValueError("Invalid value for `zip_code`, length must be less than or equal to `5`")
        if zip_code is not None and len(zip_code) < 5:
            raise ValueError("Invalid value for `zip_code`, length must be greater than or equal to `5`")

        self._zip_code = zip_code

    @property
    def zip_code_url(self):
        """Gets the zip_code_url of this GetRadius200ResponseDataInner.

        URL to Zip Code

        :return: The zip_code_url of this GetRadius200ResponseDataInner.
        :rtype: str
        """
        return self._zip_code_url

    @zip_code_url.setter
    def zip_code_url(self, zip_code_url):
        """Sets the zip_code_url of this GetRadius200ResponseDataInner.

        URL to Zip Code

        :param zip_code_url: The zip_code_url of this GetRadius200ResponseDataInner.
        :type zip_code_url: str
        """
        if zip_code_url is None:
            raise ValueError("Invalid value for `zip_code_url`, must not be `None`")
        if zip_code_url is not None and len(zip_code_url) < 1:
            raise ValueError("Invalid value for `zip_code_url`, length must be greater than or equal to `1`")

        self._zip_code_url = zip_code_url
