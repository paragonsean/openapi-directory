# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, limit: float=None, offset: float=None):
        """Meta - a model defined in OpenAPI

        :param count: The count of this Meta.
        :param limit: The limit of this Meta.
        :param offset: The offset of this Meta.
        """
        self.openapi_types = {
            'count': float,
            'limit': float,
            'offset': float
        }

        self.attribute_map = {
            'count': 'count',
            'limit': 'limit',
            'offset': 'offset'
        }

        self._count = count
        self._limit = limit
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The meta of this Meta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Meta.

        Total number of records of the response. Note: the data object always has a limit number of records retrieved.

        :return: The count of this Meta.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Meta.

        Total number of records of the response. Note: the data object always has a limit number of records retrieved.

        :param count: The count of this Meta.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def limit(self):
        """Gets the limit of this Meta.

        Total number of records returned in the data array. 

        :return: The limit of this Meta.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Meta.

        Total number of records returned in the data array. 

        :param limit: The limit of this Meta.
        :type limit: float
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this Meta.

        Offset position of where the first record returned.

        :return: The offset of this Meta.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Meta.

        Offset position of where the first record returned.

        :param offset: The offset of this Meta.
        :type offset: float
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset
