# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMsagroups200ResponseDataInnerStatesInnerCountiesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, county_fips_code: str=None, title_case_county_name: str=None, usps_county_name: str=None):
        """GetMsagroups200ResponseDataInnerStatesInnerCountiesInner - a model defined in OpenAPI

        :param county_fips_code: The county_fips_code of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :param title_case_county_name: The title_case_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :param usps_county_name: The usps_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        """
        self.openapi_types = {
            'county_fips_code': str,
            'title_case_county_name': str,
            'usps_county_name': str
        }

        self.attribute_map = {
            'county_fips_code': 'countyFipsCode',
            'title_case_county_name': 'titleCaseCountyName',
            'usps_county_name': 'uspsCountyName'
        }

        self._county_fips_code = county_fips_code
        self._title_case_county_name = title_case_county_name
        self._usps_county_name = usps_county_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMsagroups200ResponseDataInnerStatesInnerCountiesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_msagroups_200_response_data_inner_states_inner_counties_inner of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def county_fips_code(self):
        """Gets the county_fips_code of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.

        FIPS code assigned to the county of the main city of the zip code.

        :return: The county_fips_code of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :rtype: str
        """
        return self._county_fips_code

    @county_fips_code.setter
    def county_fips_code(self, county_fips_code):
        """Sets the county_fips_code of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.

        FIPS code assigned to the county of the main city of the zip code.

        :param county_fips_code: The county_fips_code of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :type county_fips_code: str
        """
        if county_fips_code is None:
            raise ValueError("Invalid value for `county_fips_code`, must not be `None`")
        if county_fips_code is not None and len(county_fips_code) < 1:
            raise ValueError("Invalid value for `county_fips_code`, length must be greater than or equal to `1`")

        self._county_fips_code = county_fips_code

    @property
    def title_case_county_name(self):
        """Gets the title_case_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.

        County Name in Title Case

        :return: The title_case_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :rtype: str
        """
        return self._title_case_county_name

    @title_case_county_name.setter
    def title_case_county_name(self, title_case_county_name):
        """Sets the title_case_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.

        County Name in Title Case

        :param title_case_county_name: The title_case_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :type title_case_county_name: str
        """
        if title_case_county_name is None:
            raise ValueError("Invalid value for `title_case_county_name`, must not be `None`")
        if title_case_county_name is not None and len(title_case_county_name) < 1:
            raise ValueError("Invalid value for `title_case_county_name`, length must be greater than or equal to `1`")

        self._title_case_county_name = title_case_county_name

    @property
    def usps_county_name(self):
        """Gets the usps_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.

        Name of the county of the main city for the zip code. USPS Standard.

        :return: The usps_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :rtype: str
        """
        return self._usps_county_name

    @usps_county_name.setter
    def usps_county_name(self, usps_county_name):
        """Sets the usps_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.

        Name of the county of the main city for the zip code. USPS Standard.

        :param usps_county_name: The usps_county_name of this GetMsagroups200ResponseDataInnerStatesInnerCountiesInner.
        :type usps_county_name: str
        """
        if usps_county_name is None:
            raise ValueError("Invalid value for `usps_county_name`, must not be `None`")
        if usps_county_name is not None and len(usps_county_name) < 1:
            raise ValueError("Invalid value for `usps_county_name`, length must be greater than or equal to `1`")

        self._usps_county_name = usps_county_name
