# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_msagroups200_response_data_inner_states_inner_counties_inner import GetMsagroups200ResponseDataInnerStatesInnerCountiesInner
from openapi_server import util


class GetMsagroups200ResponseDataInnerStatesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counties: list[GetMsagroups200ResponseDataInnerStatesInnerCountiesInner]=None, state_code: str=None, state_fips_code: str=None, state_name: str=None):
        """GetMsagroups200ResponseDataInnerStatesInner - a model defined in OpenAPI

        :param counties: The counties of this GetMsagroups200ResponseDataInnerStatesInner.
        :param state_code: The state_code of this GetMsagroups200ResponseDataInnerStatesInner.
        :param state_fips_code: The state_fips_code of this GetMsagroups200ResponseDataInnerStatesInner.
        :param state_name: The state_name of this GetMsagroups200ResponseDataInnerStatesInner.
        """
        self.openapi_types = {
            'counties': list[GetMsagroups200ResponseDataInnerStatesInnerCountiesInner],
            'state_code': str,
            'state_fips_code': str,
            'state_name': str
        }

        self.attribute_map = {
            'counties': 'counties',
            'state_code': 'stateCode',
            'state_fips_code': 'stateFipsCode',
            'state_name': 'stateName'
        }

        self._counties = counties
        self._state_code = state_code
        self._state_fips_code = state_fips_code
        self._state_name = state_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMsagroups200ResponseDataInnerStatesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_msagroups_200_response_data_inner_states_inner of this GetMsagroups200ResponseDataInnerStatesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counties(self):
        """Gets the counties of this GetMsagroups200ResponseDataInnerStatesInner.

        Array with counties related to MSA group in the state.

        :return: The counties of this GetMsagroups200ResponseDataInnerStatesInner.
        :rtype: list[GetMsagroups200ResponseDataInnerStatesInnerCountiesInner]
        """
        return self._counties

    @counties.setter
    def counties(self, counties):
        """Sets the counties of this GetMsagroups200ResponseDataInnerStatesInner.

        Array with counties related to MSA group in the state.

        :param counties: The counties of this GetMsagroups200ResponseDataInnerStatesInner.
        :type counties: list[GetMsagroups200ResponseDataInnerStatesInnerCountiesInner]
        """
        if counties is None:
            raise ValueError("Invalid value for `counties`, must not be `None`")
        if counties is not None and len(counties) < 1:
            raise ValueError("Invalid value for `counties`, number of items must be greater than or equal to `1`")

        self._counties = counties

    @property
    def state_code(self):
        """Gets the state_code of this GetMsagroups200ResponseDataInnerStatesInner.

        Standard 2 character state code.

        :return: The state_code of this GetMsagroups200ResponseDataInnerStatesInner.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this GetMsagroups200ResponseDataInnerStatesInner.

        Standard 2 character state code.

        :param state_code: The state_code of this GetMsagroups200ResponseDataInnerStatesInner.
        :type state_code: str
        """
        if state_code is None:
            raise ValueError("Invalid value for `state_code`, must not be `None`")
        if state_code is not None and len(state_code) > 2:
            raise ValueError("Invalid value for `state_code`, length must be less than or equal to `2`")
        if state_code is not None and len(state_code) < 2:
            raise ValueError("Invalid value for `state_code`, length must be greater than or equal to `2`")

        self._state_code = state_code

    @property
    def state_fips_code(self):
        """Gets the state_fips_code of this GetMsagroups200ResponseDataInnerStatesInner.

        Federal Information Processing Standards 2 digit assigned code.

        :return: The state_fips_code of this GetMsagroups200ResponseDataInnerStatesInner.
        :rtype: str
        """
        return self._state_fips_code

    @state_fips_code.setter
    def state_fips_code(self, state_fips_code):
        """Sets the state_fips_code of this GetMsagroups200ResponseDataInnerStatesInner.

        Federal Information Processing Standards 2 digit assigned code.

        :param state_fips_code: The state_fips_code of this GetMsagroups200ResponseDataInnerStatesInner.
        :type state_fips_code: str
        """
        if state_fips_code is None:
            raise ValueError("Invalid value for `state_fips_code`, must not be `None`")
        if state_fips_code is not None and len(state_fips_code) < 1:
            raise ValueError("Invalid value for `state_fips_code`, length must be greater than or equal to `1`")

        self._state_fips_code = state_fips_code

    @property
    def state_name(self):
        """Gets the state_name of this GetMsagroups200ResponseDataInnerStatesInner.

        State Name

        :return: The state_name of this GetMsagroups200ResponseDataInnerStatesInner.
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this GetMsagroups200ResponseDataInnerStatesInner.

        State Name

        :param state_name: The state_name of this GetMsagroups200ResponseDataInnerStatesInner.
        :type state_name: str
        """
        if state_name is None:
            raise ValueError("Invalid value for `state_name`, must not be `None`")
        if state_name is not None and len(state_name) < 1:
            raise ValueError("Invalid value for `state_name`, length must be greater than or equal to `1`")

        self._state_name = state_name
