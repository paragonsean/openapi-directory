# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.zipcode_city_aliases_inner import ZipcodeCityAliasesInner
from openapi_server.models.zipcode_zip_code_statistics_inner import ZipcodeZipCodeStatisticsInner
from openapi_server import util


class Zipcode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city_aliases: list[ZipcodeCityAliasesInner]=None, county_fips_code: str=None, division_code: str=None, division_name: str=None, land_area_km2: float=None, land_area_mi2: float=None, latitude: float=None, longitude: float=None, msa_code: str=None, msa_name: str=None, region_code: str=None, region_name: str=None, state_abbr: str=None, state_code: str=None, state_fips_code: str=None, state_name: str=None, title_case_city_name: str=None, title_case_county_name: str=None, unique_zip_name_ind: bool=None, usps_carrier_route_rate_sort_desc: str=None, usps_carrier_route_sort_code: str=None, usps_city_mailing_ind: bool=None, usps_county_name: str=None, usps_delivery_code: str=None, usps_delivery_desc: str=None, usps_facility_code: str=None, usps_facility_name: str=None, usps_finance_number: str=None, usps_main_city_key: str=None, usps_main_city_name: str=None, water_area_km2: float=None, water_area_mi2: float=None, zip_classification_code: str=None, zip_classification_desc: str=None, zip_code: str=None, zip_code_statistics: list[ZipcodeZipCodeStatisticsInner]=None):
        """Zipcode - a model defined in OpenAPI

        :param city_aliases: The city_aliases of this Zipcode.
        :param county_fips_code: The county_fips_code of this Zipcode.
        :param division_code: The division_code of this Zipcode.
        :param division_name: The division_name of this Zipcode.
        :param land_area_km2: The land_area_km2 of this Zipcode.
        :param land_area_mi2: The land_area_mi2 of this Zipcode.
        :param latitude: The latitude of this Zipcode.
        :param longitude: The longitude of this Zipcode.
        :param msa_code: The msa_code of this Zipcode.
        :param msa_name: The msa_name of this Zipcode.
        :param region_code: The region_code of this Zipcode.
        :param region_name: The region_name of this Zipcode.
        :param state_abbr: The state_abbr of this Zipcode.
        :param state_code: The state_code of this Zipcode.
        :param state_fips_code: The state_fips_code of this Zipcode.
        :param state_name: The state_name of this Zipcode.
        :param title_case_city_name: The title_case_city_name of this Zipcode.
        :param title_case_county_name: The title_case_county_name of this Zipcode.
        :param unique_zip_name_ind: The unique_zip_name_ind of this Zipcode.
        :param usps_carrier_route_rate_sort_desc: The usps_carrier_route_rate_sort_desc of this Zipcode.
        :param usps_carrier_route_sort_code: The usps_carrier_route_sort_code of this Zipcode.
        :param usps_city_mailing_ind: The usps_city_mailing_ind of this Zipcode.
        :param usps_county_name: The usps_county_name of this Zipcode.
        :param usps_delivery_code: The usps_delivery_code of this Zipcode.
        :param usps_delivery_desc: The usps_delivery_desc of this Zipcode.
        :param usps_facility_code: The usps_facility_code of this Zipcode.
        :param usps_facility_name: The usps_facility_name of this Zipcode.
        :param usps_finance_number: The usps_finance_number of this Zipcode.
        :param usps_main_city_key: The usps_main_city_key of this Zipcode.
        :param usps_main_city_name: The usps_main_city_name of this Zipcode.
        :param water_area_km2: The water_area_km2 of this Zipcode.
        :param water_area_mi2: The water_area_mi2 of this Zipcode.
        :param zip_classification_code: The zip_classification_code of this Zipcode.
        :param zip_classification_desc: The zip_classification_desc of this Zipcode.
        :param zip_code: The zip_code of this Zipcode.
        :param zip_code_statistics: The zip_code_statistics of this Zipcode.
        """
        self.openapi_types = {
            'city_aliases': list[ZipcodeCityAliasesInner],
            'county_fips_code': str,
            'division_code': str,
            'division_name': str,
            'land_area_km2': float,
            'land_area_mi2': float,
            'latitude': float,
            'longitude': float,
            'msa_code': str,
            'msa_name': str,
            'region_code': str,
            'region_name': str,
            'state_abbr': str,
            'state_code': str,
            'state_fips_code': str,
            'state_name': str,
            'title_case_city_name': str,
            'title_case_county_name': str,
            'unique_zip_name_ind': bool,
            'usps_carrier_route_rate_sort_desc': str,
            'usps_carrier_route_sort_code': str,
            'usps_city_mailing_ind': bool,
            'usps_county_name': str,
            'usps_delivery_code': str,
            'usps_delivery_desc': str,
            'usps_facility_code': str,
            'usps_facility_name': str,
            'usps_finance_number': str,
            'usps_main_city_key': str,
            'usps_main_city_name': str,
            'water_area_km2': float,
            'water_area_mi2': float,
            'zip_classification_code': str,
            'zip_classification_desc': str,
            'zip_code': str,
            'zip_code_statistics': list[ZipcodeZipCodeStatisticsInner]
        }

        self.attribute_map = {
            'city_aliases': 'cityAliases',
            'county_fips_code': 'countyFipsCode',
            'division_code': 'divisionCode',
            'division_name': 'divisionName',
            'land_area_km2': 'landAreaKm2',
            'land_area_mi2': 'landAreaMi2',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'msa_code': 'msaCode',
            'msa_name': 'msaName',
            'region_code': 'regionCode',
            'region_name': 'regionName',
            'state_abbr': 'stateAbbr',
            'state_code': 'stateCode',
            'state_fips_code': 'stateFipsCode',
            'state_name': 'stateName',
            'title_case_city_name': 'titleCaseCityName',
            'title_case_county_name': 'titleCaseCountyName',
            'unique_zip_name_ind': 'uniqueZipNameInd',
            'usps_carrier_route_rate_sort_desc': 'uspsCarrierRouteRateSortDesc',
            'usps_carrier_route_sort_code': 'uspsCarrierRouteSortCode',
            'usps_city_mailing_ind': 'uspsCityMailingInd',
            'usps_county_name': 'uspsCountyName',
            'usps_delivery_code': 'uspsDeliveryCode',
            'usps_delivery_desc': 'uspsDeliveryDesc',
            'usps_facility_code': 'uspsFacilityCode',
            'usps_facility_name': 'uspsFacilityName',
            'usps_finance_number': 'uspsFinanceNumber',
            'usps_main_city_key': 'uspsMainCityKey',
            'usps_main_city_name': 'uspsMainCityName',
            'water_area_km2': 'waterAreaKm2',
            'water_area_mi2': 'waterAreaMi2',
            'zip_classification_code': 'zipClassificationCode',
            'zip_classification_desc': 'zipClassificationDesc',
            'zip_code': 'zipCode',
            'zip_code_statistics': 'zipCodeStatistics'
        }

        self._city_aliases = city_aliases
        self._county_fips_code = county_fips_code
        self._division_code = division_code
        self._division_name = division_name
        self._land_area_km2 = land_area_km2
        self._land_area_mi2 = land_area_mi2
        self._latitude = latitude
        self._longitude = longitude
        self._msa_code = msa_code
        self._msa_name = msa_name
        self._region_code = region_code
        self._region_name = region_name
        self._state_abbr = state_abbr
        self._state_code = state_code
        self._state_fips_code = state_fips_code
        self._state_name = state_name
        self._title_case_city_name = title_case_city_name
        self._title_case_county_name = title_case_county_name
        self._unique_zip_name_ind = unique_zip_name_ind
        self._usps_carrier_route_rate_sort_desc = usps_carrier_route_rate_sort_desc
        self._usps_carrier_route_sort_code = usps_carrier_route_sort_code
        self._usps_city_mailing_ind = usps_city_mailing_ind
        self._usps_county_name = usps_county_name
        self._usps_delivery_code = usps_delivery_code
        self._usps_delivery_desc = usps_delivery_desc
        self._usps_facility_code = usps_facility_code
        self._usps_facility_name = usps_facility_name
        self._usps_finance_number = usps_finance_number
        self._usps_main_city_key = usps_main_city_key
        self._usps_main_city_name = usps_main_city_name
        self._water_area_km2 = water_area_km2
        self._water_area_mi2 = water_area_mi2
        self._zip_classification_code = zip_classification_code
        self._zip_classification_desc = zip_classification_desc
        self._zip_code = zip_code
        self._zip_code_statistics = zip_code_statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Zipcode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zipcode of this Zipcode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city_aliases(self):
        """Gets the city_aliases of this Zipcode.

        Array that contains all the city aliases for the given zip code.

        :return: The city_aliases of this Zipcode.
        :rtype: list[ZipcodeCityAliasesInner]
        """
        return self._city_aliases

    @city_aliases.setter
    def city_aliases(self, city_aliases):
        """Sets the city_aliases of this Zipcode.

        Array that contains all the city aliases for the given zip code.

        :param city_aliases: The city_aliases of this Zipcode.
        :type city_aliases: list[ZipcodeCityAliasesInner]
        """
        if city_aliases is None:
            raise ValueError("Invalid value for `city_aliases`, must not be `None`")
        if city_aliases is not None and len(city_aliases) < 1:
            raise ValueError("Invalid value for `city_aliases`, number of items must be greater than or equal to `1`")

        self._city_aliases = city_aliases

    @property
    def county_fips_code(self):
        """Gets the county_fips_code of this Zipcode.

        FIPS code assigned to the county of the main city of the zip code.

        :return: The county_fips_code of this Zipcode.
        :rtype: str
        """
        return self._county_fips_code

    @county_fips_code.setter
    def county_fips_code(self, county_fips_code):
        """Sets the county_fips_code of this Zipcode.

        FIPS code assigned to the county of the main city of the zip code.

        :param county_fips_code: The county_fips_code of this Zipcode.
        :type county_fips_code: str
        """
        if county_fips_code is None:
            raise ValueError("Invalid value for `county_fips_code`, must not be `None`")
        if county_fips_code is not None and len(county_fips_code) < 1:
            raise ValueError("Invalid value for `county_fips_code`, length must be greater than or equal to `1`")

        self._county_fips_code = county_fips_code

    @property
    def division_code(self):
        """Gets the division_code of this Zipcode.

        Division Code. Part of the geographical hierarchy of the US provided by the united states census.

        :return: The division_code of this Zipcode.
        :rtype: str
        """
        return self._division_code

    @division_code.setter
    def division_code(self, division_code):
        """Sets the division_code of this Zipcode.

        Division Code. Part of the geographical hierarchy of the US provided by the united states census.

        :param division_code: The division_code of this Zipcode.
        :type division_code: str
        """
        if division_code is None:
            raise ValueError("Invalid value for `division_code`, must not be `None`")
        if division_code is not None and len(division_code) < 1:
            raise ValueError("Invalid value for `division_code`, length must be greater than or equal to `1`")

        self._division_code = division_code

    @property
    def division_name(self):
        """Gets the division_name of this Zipcode.

        Division Name. Part of the geographical hierarchy of the US provided by the united states census.

        :return: The division_name of this Zipcode.
        :rtype: str
        """
        return self._division_name

    @division_name.setter
    def division_name(self, division_name):
        """Sets the division_name of this Zipcode.

        Division Name. Part of the geographical hierarchy of the US provided by the united states census.

        :param division_name: The division_name of this Zipcode.
        :type division_name: str
        """
        if division_name is None:
            raise ValueError("Invalid value for `division_name`, must not be `None`")
        if division_name is not None and len(division_name) < 1:
            raise ValueError("Invalid value for `division_name`, length must be greater than or equal to `1`")

        self._division_name = division_name

    @property
    def land_area_km2(self):
        """Gets the land_area_km2 of this Zipcode.

        Zip Code Land Area in square kilometers.

        :return: The land_area_km2 of this Zipcode.
        :rtype: float
        """
        return self._land_area_km2

    @land_area_km2.setter
    def land_area_km2(self, land_area_km2):
        """Sets the land_area_km2 of this Zipcode.

        Zip Code Land Area in square kilometers.

        :param land_area_km2: The land_area_km2 of this Zipcode.
        :type land_area_km2: float
        """
        if land_area_km2 is None:
            raise ValueError("Invalid value for `land_area_km2`, must not be `None`")

        self._land_area_km2 = land_area_km2

    @property
    def land_area_mi2(self):
        """Gets the land_area_mi2 of this Zipcode.

        Zip Code Land area in Square Miles

        :return: The land_area_mi2 of this Zipcode.
        :rtype: float
        """
        return self._land_area_mi2

    @land_area_mi2.setter
    def land_area_mi2(self, land_area_mi2):
        """Sets the land_area_mi2 of this Zipcode.

        Zip Code Land area in Square Miles

        :param land_area_mi2: The land_area_mi2 of this Zipcode.
        :type land_area_mi2: float
        """
        if land_area_mi2 is None:
            raise ValueError("Invalid value for `land_area_mi2`, must not be `None`")

        self._land_area_mi2 = land_area_mi2

    @property
    def latitude(self):
        """Gets the latitude of this Zipcode.

        Zip Code Latitude

        :return: The latitude of this Zipcode.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Zipcode.

        Zip Code Latitude

        :param latitude: The latitude of this Zipcode.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Zipcode.

        Zip Code Longitude

        :return: The longitude of this Zipcode.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Zipcode.

        Zip Code Longitude

        :param longitude: The longitude of this Zipcode.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def msa_code(self):
        """Gets the msa_code of this Zipcode.

        5 digit MSA (Metropolitan Statistical Area) code.

        :return: The msa_code of this Zipcode.
        :rtype: str
        """
        return self._msa_code

    @msa_code.setter
    def msa_code(self, msa_code):
        """Sets the msa_code of this Zipcode.

        5 digit MSA (Metropolitan Statistical Area) code.

        :param msa_code: The msa_code of this Zipcode.
        :type msa_code: str
        """
        if msa_code is None:
            raise ValueError("Invalid value for `msa_code`, must not be `None`")
        if msa_code is not None and len(msa_code) < 1:
            raise ValueError("Invalid value for `msa_code`, length must be greater than or equal to `1`")

        self._msa_code = msa_code

    @property
    def msa_name(self):
        """Gets the msa_name of this Zipcode.

        Name of the defined MSA code.

        :return: The msa_name of this Zipcode.
        :rtype: str
        """
        return self._msa_name

    @msa_name.setter
    def msa_name(self, msa_name):
        """Sets the msa_name of this Zipcode.

        Name of the defined MSA code.

        :param msa_name: The msa_name of this Zipcode.
        :type msa_name: str
        """
        if msa_name is None:
            raise ValueError("Invalid value for `msa_name`, must not be `None`")
        if msa_name is not None and len(msa_name) < 1:
            raise ValueError("Invalid value for `msa_name`, length must be greater than or equal to `1`")

        self._msa_name = msa_name

    @property
    def region_code(self):
        """Gets the region_code of this Zipcode.

        Region Code. Part of the geographical hierarchy of the US provided by the united states census.

        :return: The region_code of this Zipcode.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this Zipcode.

        Region Code. Part of the geographical hierarchy of the US provided by the united states census.

        :param region_code: The region_code of this Zipcode.
        :type region_code: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")
        if region_code is not None and len(region_code) < 1:
            raise ValueError("Invalid value for `region_code`, length must be greater than or equal to `1`")

        self._region_code = region_code

    @property
    def region_name(self):
        """Gets the region_name of this Zipcode.

        Region Name. Part of the geographical hierarchy of the US provided by the united states census.

        :return: The region_name of this Zipcode.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this Zipcode.

        Region Name. Part of the geographical hierarchy of the US provided by the united states census.

        :param region_name: The region_name of this Zipcode.
        :type region_name: str
        """
        if region_name is None:
            raise ValueError("Invalid value for `region_name`, must not be `None`")
        if region_name is not None and len(region_name) < 1:
            raise ValueError("Invalid value for `region_name`, length must be greater than or equal to `1`")

        self._region_name = region_name

    @property
    def state_abbr(self):
        """Gets the state_abbr of this Zipcode.

        Abbreviation for state name.

        :return: The state_abbr of this Zipcode.
        :rtype: str
        """
        return self._state_abbr

    @state_abbr.setter
    def state_abbr(self, state_abbr):
        """Sets the state_abbr of this Zipcode.

        Abbreviation for state name.

        :param state_abbr: The state_abbr of this Zipcode.
        :type state_abbr: str
        """
        if state_abbr is None:
            raise ValueError("Invalid value for `state_abbr`, must not be `None`")
        if state_abbr is not None and len(state_abbr) < 1:
            raise ValueError("Invalid value for `state_abbr`, length must be greater than or equal to `1`")

        self._state_abbr = state_abbr

    @property
    def state_code(self):
        """Gets the state_code of this Zipcode.

        Standard 2 character state code.

        :return: The state_code of this Zipcode.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Zipcode.

        Standard 2 character state code.

        :param state_code: The state_code of this Zipcode.
        :type state_code: str
        """
        if state_code is None:
            raise ValueError("Invalid value for `state_code`, must not be `None`")
        if state_code is not None and len(state_code) < 1:
            raise ValueError("Invalid value for `state_code`, length must be greater than or equal to `1`")

        self._state_code = state_code

    @property
    def state_fips_code(self):
        """Gets the state_fips_code of this Zipcode.

        Federal Information Processing Standards 2 digit assigned code.

        :return: The state_fips_code of this Zipcode.
        :rtype: str
        """
        return self._state_fips_code

    @state_fips_code.setter
    def state_fips_code(self, state_fips_code):
        """Sets the state_fips_code of this Zipcode.

        Federal Information Processing Standards 2 digit assigned code.

        :param state_fips_code: The state_fips_code of this Zipcode.
        :type state_fips_code: str
        """
        if state_fips_code is None:
            raise ValueError("Invalid value for `state_fips_code`, must not be `None`")
        if state_fips_code is not None and len(state_fips_code) < 1:
            raise ValueError("Invalid value for `state_fips_code`, length must be greater than or equal to `1`")

        self._state_fips_code = state_fips_code

    @property
    def state_name(self):
        """Gets the state_name of this Zipcode.

        State Name

        :return: The state_name of this Zipcode.
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this Zipcode.

        State Name

        :param state_name: The state_name of this Zipcode.
        :type state_name: str
        """
        if state_name is None:
            raise ValueError("Invalid value for `state_name`, must not be `None`")
        if state_name is not None and len(state_name) < 1:
            raise ValueError("Invalid value for `state_name`, length must be greater than or equal to `1`")

        self._state_name = state_name

    @property
    def title_case_city_name(self):
        """Gets the title_case_city_name of this Zipcode.

        USPS City / Town Name for the main city of the zip code. Title Case Format.

        :return: The title_case_city_name of this Zipcode.
        :rtype: str
        """
        return self._title_case_city_name

    @title_case_city_name.setter
    def title_case_city_name(self, title_case_city_name):
        """Sets the title_case_city_name of this Zipcode.

        USPS City / Town Name for the main city of the zip code. Title Case Format.

        :param title_case_city_name: The title_case_city_name of this Zipcode.
        :type title_case_city_name: str
        """
        if title_case_city_name is None:
            raise ValueError("Invalid value for `title_case_city_name`, must not be `None`")
        if title_case_city_name is not None and len(title_case_city_name) < 1:
            raise ValueError("Invalid value for `title_case_city_name`, length must be greater than or equal to `1`")

        self._title_case_city_name = title_case_city_name

    @property
    def title_case_county_name(self):
        """Gets the title_case_county_name of this Zipcode.

        Main County Name in Title Case

        :return: The title_case_county_name of this Zipcode.
        :rtype: str
        """
        return self._title_case_county_name

    @title_case_county_name.setter
    def title_case_county_name(self, title_case_county_name):
        """Sets the title_case_county_name of this Zipcode.

        Main County Name in Title Case

        :param title_case_county_name: The title_case_county_name of this Zipcode.
        :type title_case_county_name: str
        """
        if title_case_county_name is None:
            raise ValueError("Invalid value for `title_case_county_name`, must not be `None`")
        if title_case_county_name is not None and len(title_case_county_name) < 1:
            raise ValueError("Invalid value for `title_case_county_name`, length must be greater than or equal to `1`")

        self._title_case_county_name = title_case_county_name

    @property
    def unique_zip_name_ind(self):
        """Gets the unique_zip_name_ind of this Zipcode.

        True = Unique Zip Code Name. False the zip code name is not unique.

        :return: The unique_zip_name_ind of this Zipcode.
        :rtype: bool
        """
        return self._unique_zip_name_ind

    @unique_zip_name_ind.setter
    def unique_zip_name_ind(self, unique_zip_name_ind):
        """Sets the unique_zip_name_ind of this Zipcode.

        True = Unique Zip Code Name. False the zip code name is not unique.

        :param unique_zip_name_ind: The unique_zip_name_ind of this Zipcode.
        :type unique_zip_name_ind: bool
        """
        if unique_zip_name_ind is None:
            raise ValueError("Invalid value for `unique_zip_name_ind`, must not be `None`")

        self._unique_zip_name_ind = unique_zip_name_ind

    @property
    def usps_carrier_route_rate_sort_desc(self):
        """Gets the usps_carrier_route_rate_sort_desc of this Zipcode.

        Description for the carrier route code.

        :return: The usps_carrier_route_rate_sort_desc of this Zipcode.
        :rtype: str
        """
        return self._usps_carrier_route_rate_sort_desc

    @usps_carrier_route_rate_sort_desc.setter
    def usps_carrier_route_rate_sort_desc(self, usps_carrier_route_rate_sort_desc):
        """Sets the usps_carrier_route_rate_sort_desc of this Zipcode.

        Description for the carrier route code.

        :param usps_carrier_route_rate_sort_desc: The usps_carrier_route_rate_sort_desc of this Zipcode.
        :type usps_carrier_route_rate_sort_desc: str
        """
        if usps_carrier_route_rate_sort_desc is None:
            raise ValueError("Invalid value for `usps_carrier_route_rate_sort_desc`, must not be `None`")
        if usps_carrier_route_rate_sort_desc is not None and len(usps_carrier_route_rate_sort_desc) < 1:
            raise ValueError("Invalid value for `usps_carrier_route_rate_sort_desc`, length must be greater than or equal to `1`")

        self._usps_carrier_route_rate_sort_desc = usps_carrier_route_rate_sort_desc

    @property
    def usps_carrier_route_sort_code(self):
        """Gets the usps_carrier_route_sort_code of this Zipcode.

        Code for the available carrier route.

        :return: The usps_carrier_route_sort_code of this Zipcode.
        :rtype: str
        """
        return self._usps_carrier_route_sort_code

    @usps_carrier_route_sort_code.setter
    def usps_carrier_route_sort_code(self, usps_carrier_route_sort_code):
        """Sets the usps_carrier_route_sort_code of this Zipcode.

        Code for the available carrier route.

        :param usps_carrier_route_sort_code: The usps_carrier_route_sort_code of this Zipcode.
        :type usps_carrier_route_sort_code: str
        """
        if usps_carrier_route_sort_code is None:
            raise ValueError("Invalid value for `usps_carrier_route_sort_code`, must not be `None`")
        if usps_carrier_route_sort_code is not None and len(usps_carrier_route_sort_code) < 1:
            raise ValueError("Invalid value for `usps_carrier_route_sort_code`, length must be greater than or equal to `1`")

        self._usps_carrier_route_sort_code = usps_carrier_route_sort_code

    @property
    def usps_city_mailing_ind(self):
        """Gets the usps_city_mailing_ind of this Zipcode.

        City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.

        :return: The usps_city_mailing_ind of this Zipcode.
        :rtype: bool
        """
        return self._usps_city_mailing_ind

    @usps_city_mailing_ind.setter
    def usps_city_mailing_ind(self, usps_city_mailing_ind):
        """Sets the usps_city_mailing_ind of this Zipcode.

        City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.

        :param usps_city_mailing_ind: The usps_city_mailing_ind of this Zipcode.
        :type usps_city_mailing_ind: bool
        """
        if usps_city_mailing_ind is None:
            raise ValueError("Invalid value for `usps_city_mailing_ind`, must not be `None`")

        self._usps_city_mailing_ind = usps_city_mailing_ind

    @property
    def usps_county_name(self):
        """Gets the usps_county_name of this Zipcode.

        Name of the county of the main city for the zip code.

        :return: The usps_county_name of this Zipcode.
        :rtype: str
        """
        return self._usps_county_name

    @usps_county_name.setter
    def usps_county_name(self, usps_county_name):
        """Sets the usps_county_name of this Zipcode.

        Name of the county of the main city for the zip code.

        :param usps_county_name: The usps_county_name of this Zipcode.
        :type usps_county_name: str
        """
        if usps_county_name is None:
            raise ValueError("Invalid value for `usps_county_name`, must not be `None`")
        if usps_county_name is not None and len(usps_county_name) < 1:
            raise ValueError("Invalid value for `usps_county_name`, length must be greater than or equal to `1`")

        self._usps_county_name = usps_county_name

    @property
    def usps_delivery_code(self):
        """Gets the usps_delivery_code of this Zipcode.

        Determines if the zip code city has Carrier Routes.

        :return: The usps_delivery_code of this Zipcode.
        :rtype: str
        """
        return self._usps_delivery_code

    @usps_delivery_code.setter
    def usps_delivery_code(self, usps_delivery_code):
        """Sets the usps_delivery_code of this Zipcode.

        Determines if the zip code city has Carrier Routes.

        :param usps_delivery_code: The usps_delivery_code of this Zipcode.
        :type usps_delivery_code: str
        """
        if usps_delivery_code is None:
            raise ValueError("Invalid value for `usps_delivery_code`, must not be `None`")
        if usps_delivery_code is not None and len(usps_delivery_code) < 1:
            raise ValueError("Invalid value for `usps_delivery_code`, length must be greater than or equal to `1`")

        self._usps_delivery_code = usps_delivery_code

    @property
    def usps_delivery_desc(self):
        """Gets the usps_delivery_desc of this Zipcode.

        Determines if the zip code city has Carrier Routes.

        :return: The usps_delivery_desc of this Zipcode.
        :rtype: str
        """
        return self._usps_delivery_desc

    @usps_delivery_desc.setter
    def usps_delivery_desc(self, usps_delivery_desc):
        """Sets the usps_delivery_desc of this Zipcode.

        Determines if the zip code city has Carrier Routes.

        :param usps_delivery_desc: The usps_delivery_desc of this Zipcode.
        :type usps_delivery_desc: str
        """
        if usps_delivery_desc is None:
            raise ValueError("Invalid value for `usps_delivery_desc`, must not be `None`")
        if usps_delivery_desc is not None and len(usps_delivery_desc) < 1:
            raise ValueError("Invalid value for `usps_delivery_desc`, length must be greater than or equal to `1`")

        self._usps_delivery_desc = usps_delivery_desc

    @property
    def usps_facility_code(self):
        """Gets the usps_facility_code of this Zipcode.

        Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization

        :return: The usps_facility_code of this Zipcode.
        :rtype: str
        """
        return self._usps_facility_code

    @usps_facility_code.setter
    def usps_facility_code(self, usps_facility_code):
        """Sets the usps_facility_code of this Zipcode.

        Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization

        :param usps_facility_code: The usps_facility_code of this Zipcode.
        :type usps_facility_code: str
        """
        if usps_facility_code is None:
            raise ValueError("Invalid value for `usps_facility_code`, must not be `None`")
        if usps_facility_code is not None and len(usps_facility_code) < 1:
            raise ValueError("Invalid value for `usps_facility_code`, length must be greater than or equal to `1`")

        self._usps_facility_code = usps_facility_code

    @property
    def usps_facility_name(self):
        """Gets the usps_facility_name of this Zipcode.

        USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization

        :return: The usps_facility_name of this Zipcode.
        :rtype: str
        """
        return self._usps_facility_name

    @usps_facility_name.setter
    def usps_facility_name(self, usps_facility_name):
        """Sets the usps_facility_name of this Zipcode.

        USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization

        :param usps_facility_name: The usps_facility_name of this Zipcode.
        :type usps_facility_name: str
        """
        if usps_facility_name is None:
            raise ValueError("Invalid value for `usps_facility_name`, must not be `None`")
        if usps_facility_name is not None and len(usps_facility_name) < 1:
            raise ValueError("Invalid value for `usps_facility_name`, length must be greater than or equal to `1`")

        self._usps_facility_name = usps_facility_name

    @property
    def usps_finance_number(self):
        """Gets the usps_finance_number of this Zipcode.

        USPS Provided Finance Number. This code is assigned to postal service facilities.

        :return: The usps_finance_number of this Zipcode.
        :rtype: str
        """
        return self._usps_finance_number

    @usps_finance_number.setter
    def usps_finance_number(self, usps_finance_number):
        """Sets the usps_finance_number of this Zipcode.

        USPS Provided Finance Number. This code is assigned to postal service facilities.

        :param usps_finance_number: The usps_finance_number of this Zipcode.
        :type usps_finance_number: str
        """
        if usps_finance_number is None:
            raise ValueError("Invalid value for `usps_finance_number`, must not be `None`")
        if usps_finance_number is not None and len(usps_finance_number) < 1:
            raise ValueError("Invalid value for `usps_finance_number`, length must be greater than or equal to `1`")

        self._usps_finance_number = usps_finance_number

    @property
    def usps_main_city_key(self):
        """Gets the usps_main_city_key of this Zipcode.

        USPS City / Town key identifier for the main city of the zip code.

        :return: The usps_main_city_key of this Zipcode.
        :rtype: str
        """
        return self._usps_main_city_key

    @usps_main_city_key.setter
    def usps_main_city_key(self, usps_main_city_key):
        """Sets the usps_main_city_key of this Zipcode.

        USPS City / Town key identifier for the main city of the zip code.

        :param usps_main_city_key: The usps_main_city_key of this Zipcode.
        :type usps_main_city_key: str
        """
        if usps_main_city_key is None:
            raise ValueError("Invalid value for `usps_main_city_key`, must not be `None`")
        if usps_main_city_key is not None and len(usps_main_city_key) < 1:
            raise ValueError("Invalid value for `usps_main_city_key`, length must be greater than or equal to `1`")

        self._usps_main_city_key = usps_main_city_key

    @property
    def usps_main_city_name(self):
        """Gets the usps_main_city_name of this Zipcode.

        USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.

        :return: The usps_main_city_name of this Zipcode.
        :rtype: str
        """
        return self._usps_main_city_name

    @usps_main_city_name.setter
    def usps_main_city_name(self, usps_main_city_name):
        """Sets the usps_main_city_name of this Zipcode.

        USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.

        :param usps_main_city_name: The usps_main_city_name of this Zipcode.
        :type usps_main_city_name: str
        """
        if usps_main_city_name is None:
            raise ValueError("Invalid value for `usps_main_city_name`, must not be `None`")
        if usps_main_city_name is not None and len(usps_main_city_name) < 1:
            raise ValueError("Invalid value for `usps_main_city_name`, length must be greater than or equal to `1`")

        self._usps_main_city_name = usps_main_city_name

    @property
    def water_area_km2(self):
        """Gets the water_area_km2 of this Zipcode.

        Zip Code water area in Square kilometers.

        :return: The water_area_km2 of this Zipcode.
        :rtype: float
        """
        return self._water_area_km2

    @water_area_km2.setter
    def water_area_km2(self, water_area_km2):
        """Sets the water_area_km2 of this Zipcode.

        Zip Code water area in Square kilometers.

        :param water_area_km2: The water_area_km2 of this Zipcode.
        :type water_area_km2: float
        """
        if water_area_km2 is None:
            raise ValueError("Invalid value for `water_area_km2`, must not be `None`")

        self._water_area_km2 = water_area_km2

    @property
    def water_area_mi2(self):
        """Gets the water_area_mi2 of this Zipcode.

        Zip Code Water Area in Square Miles

        :return: The water_area_mi2 of this Zipcode.
        :rtype: float
        """
        return self._water_area_mi2

    @water_area_mi2.setter
    def water_area_mi2(self, water_area_mi2):
        """Sets the water_area_mi2 of this Zipcode.

        Zip Code Water Area in Square Miles

        :param water_area_mi2: The water_area_mi2 of this Zipcode.
        :type water_area_mi2: float
        """
        if water_area_mi2 is None:
            raise ValueError("Invalid value for `water_area_mi2`, must not be `None`")

        self._water_area_mi2 = water_area_mi2

    @property
    def zip_classification_code(self):
        """Gets the zip_classification_code of this Zipcode.

        Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.

        :return: The zip_classification_code of this Zipcode.
        :rtype: str
        """
        return self._zip_classification_code

    @zip_classification_code.setter
    def zip_classification_code(self, zip_classification_code):
        """Sets the zip_classification_code of this Zipcode.

        Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.

        :param zip_classification_code: The zip_classification_code of this Zipcode.
        :type zip_classification_code: str
        """
        if zip_classification_code is None:
            raise ValueError("Invalid value for `zip_classification_code`, must not be `None`")
        if zip_classification_code is not None and len(zip_classification_code) < 1:
            raise ValueError("Invalid value for `zip_classification_code`, length must be greater than or equal to `1`")

        self._zip_classification_code = zip_classification_code

    @property
    def zip_classification_desc(self):
        """Gets the zip_classification_desc of this Zipcode.

        Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.

        :return: The zip_classification_desc of this Zipcode.
        :rtype: str
        """
        return self._zip_classification_desc

    @zip_classification_desc.setter
    def zip_classification_desc(self, zip_classification_desc):
        """Sets the zip_classification_desc of this Zipcode.

        Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.

        :param zip_classification_desc: The zip_classification_desc of this Zipcode.
        :type zip_classification_desc: str
        """
        if zip_classification_desc is None:
            raise ValueError("Invalid value for `zip_classification_desc`, must not be `None`")
        if zip_classification_desc is not None and len(zip_classification_desc) < 1:
            raise ValueError("Invalid value for `zip_classification_desc`, length must be greater than or equal to `1`")

        self._zip_classification_desc = zip_classification_desc

    @property
    def zip_code(self):
        """Gets the zip_code of this Zipcode.

        5 Digit Zip Code. Zone Improvement Plan.

        :return: The zip_code of this Zipcode.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Zipcode.

        5 Digit Zip Code. Zone Improvement Plan.

        :param zip_code: The zip_code of this Zipcode.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")
        if zip_code is not None and len(zip_code) > 5:
            raise ValueError("Invalid value for `zip_code`, length must be less than or equal to `5`")
        if zip_code is not None and len(zip_code) < 5:
            raise ValueError("Invalid value for `zip_code`, length must be greater than or equal to `5`")

        self._zip_code = zip_code

    @property
    def zip_code_statistics(self):
        """Gets the zip_code_statistics of this Zipcode.

        Available statistics by year of the Zip Code.

        :return: The zip_code_statistics of this Zipcode.
        :rtype: list[ZipcodeZipCodeStatisticsInner]
        """
        return self._zip_code_statistics

    @zip_code_statistics.setter
    def zip_code_statistics(self, zip_code_statistics):
        """Sets the zip_code_statistics of this Zipcode.

        Available statistics by year of the Zip Code.

        :param zip_code_statistics: The zip_code_statistics of this Zipcode.
        :type zip_code_statistics: list[ZipcodeZipCodeStatisticsInner]
        """
        if zip_code_statistics is None:
            raise ValueError("Invalid value for `zip_code_statistics`, must not be `None`")
        if zip_code_statistics is not None and len(zip_code_statistics) < 1:
            raise ValueError("Invalid value for `zip_code_statistics`, number of items must be greater than or equal to `1`")

        self._zip_code_statistics = zip_code_statistics
