/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZipcodeZipCodeStatisticsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.826870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZipcodeZipCodeStatisticsInner {
  public static final String SERIALIZED_NAME_FEMALE_POPULATION = "femalePopulation";
  @SerializedName(SERIALIZED_NAME_FEMALE_POPULATION)
  private BigDecimal femalePopulation;

  public static final String SERIALIZED_NAME_MALE_POPULATION = "malePopulation";
  @SerializedName(SERIALIZED_NAME_MALE_POPULATION)
  private BigDecimal malePopulation;

  public static final String SERIALIZED_NAME_TOTAL_POPULATION = "totalPopulation";
  @SerializedName(SERIALIZED_NAME_TOTAL_POPULATION)
  private BigDecimal totalPopulation;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private BigDecimal year;

  public ZipcodeZipCodeStatisticsInner() {
  }

  public ZipcodeZipCodeStatisticsInner femalePopulation(BigDecimal femalePopulation) {
    this.femalePopulation = femalePopulation;
    return this;
  }

  /**
   * Total female population of the zip code.
   * @return femalePopulation
   */
  @javax.annotation.Nonnull
  public BigDecimal getFemalePopulation() {
    return femalePopulation;
  }

  public void setFemalePopulation(BigDecimal femalePopulation) {
    this.femalePopulation = femalePopulation;
  }


  public ZipcodeZipCodeStatisticsInner malePopulation(BigDecimal malePopulation) {
    this.malePopulation = malePopulation;
    return this;
  }

  /**
   * Total Male population of the zip code.
   * @return malePopulation
   */
  @javax.annotation.Nonnull
  public BigDecimal getMalePopulation() {
    return malePopulation;
  }

  public void setMalePopulation(BigDecimal malePopulation) {
    this.malePopulation = malePopulation;
  }


  public ZipcodeZipCodeStatisticsInner totalPopulation(BigDecimal totalPopulation) {
    this.totalPopulation = totalPopulation;
    return this;
  }

  /**
   * Total population of the zip code
   * @return totalPopulation
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalPopulation() {
    return totalPopulation;
  }

  public void setTotalPopulation(BigDecimal totalPopulation) {
    this.totalPopulation = totalPopulation;
  }


  public ZipcodeZipCodeStatisticsInner year(BigDecimal year) {
    this.year = year;
    return this;
  }

  /**
   * Year for the captured statistic
   * @return year
   */
  @javax.annotation.Nonnull
  public BigDecimal getYear() {
    return year;
  }

  public void setYear(BigDecimal year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZipcodeZipCodeStatisticsInner zipcodeZipCodeStatisticsInner = (ZipcodeZipCodeStatisticsInner) o;
    return Objects.equals(this.femalePopulation, zipcodeZipCodeStatisticsInner.femalePopulation) &&
        Objects.equals(this.malePopulation, zipcodeZipCodeStatisticsInner.malePopulation) &&
        Objects.equals(this.totalPopulation, zipcodeZipCodeStatisticsInner.totalPopulation) &&
        Objects.equals(this.year, zipcodeZipCodeStatisticsInner.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(femalePopulation, malePopulation, totalPopulation, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZipcodeZipCodeStatisticsInner {\n");
    sb.append("    femalePopulation: ").append(toIndentedString(femalePopulation)).append("\n");
    sb.append("    malePopulation: ").append(toIndentedString(malePopulation)).append("\n");
    sb.append("    totalPopulation: ").append(toIndentedString(totalPopulation)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("femalePopulation");
    openapiFields.add("malePopulation");
    openapiFields.add("totalPopulation");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("femalePopulation");
    openapiRequiredFields.add("malePopulation");
    openapiRequiredFields.add("totalPopulation");
    openapiRequiredFields.add("year");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZipcodeZipCodeStatisticsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZipcodeZipCodeStatisticsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZipcodeZipCodeStatisticsInner is not found in the empty JSON string", ZipcodeZipCodeStatisticsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZipcodeZipCodeStatisticsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZipcodeZipCodeStatisticsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZipcodeZipCodeStatisticsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZipcodeZipCodeStatisticsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZipcodeZipCodeStatisticsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZipcodeZipCodeStatisticsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZipcodeZipCodeStatisticsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ZipcodeZipCodeStatisticsInner>() {
           @Override
           public void write(JsonWriter out, ZipcodeZipCodeStatisticsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZipcodeZipCodeStatisticsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZipcodeZipCodeStatisticsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZipcodeZipCodeStatisticsInner
   * @throws IOException if the JSON string is invalid with respect to ZipcodeZipCodeStatisticsInner
   */
  public static ZipcodeZipCodeStatisticsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZipcodeZipCodeStatisticsInner.class);
  }

  /**
   * Convert an instance of ZipcodeZipCodeStatisticsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

