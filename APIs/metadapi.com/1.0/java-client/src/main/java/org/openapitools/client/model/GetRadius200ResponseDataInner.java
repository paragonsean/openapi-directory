/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRadius200ResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.826870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRadius200ResponseDataInner {
  public static final String SERIALIZED_NAME_DISTANCE_KM = "distanceKm";
  @SerializedName(SERIALIZED_NAME_DISTANCE_KM)
  private BigDecimal distanceKm;

  public static final String SERIALIZED_NAME_DISTANCE_MI = "distanceMi";
  @SerializedName(SERIALIZED_NAME_DISTANCE_MI)
  private BigDecimal distanceMi;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_ZIP_CODE_URL = "zipCodeUrl";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_URL)
  private String zipCodeUrl;

  public GetRadius200ResponseDataInner() {
  }

  public GetRadius200ResponseDataInner distanceKm(BigDecimal distanceKm) {
    this.distanceKm = distanceKm;
    return this;
  }

  /**
   * Distance to query parameter zip code in kilometers
   * @return distanceKm
   */
  @javax.annotation.Nonnull
  public BigDecimal getDistanceKm() {
    return distanceKm;
  }

  public void setDistanceKm(BigDecimal distanceKm) {
    this.distanceKm = distanceKm;
  }


  public GetRadius200ResponseDataInner distanceMi(BigDecimal distanceMi) {
    this.distanceMi = distanceMi;
    return this;
  }

  /**
   * Distance to query parameter zip code in miles
   * @return distanceMi
   */
  @javax.annotation.Nonnull
  public BigDecimal getDistanceMi() {
    return distanceMi;
  }

  public void setDistanceMi(BigDecimal distanceMi) {
    this.distanceMi = distanceMi;
  }


  public GetRadius200ResponseDataInner latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Zip Code Latitude
   * @return latitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public GetRadius200ResponseDataInner longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Zip Code Longitude
   * @return longitude
   */
  @javax.annotation.Nonnull
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public GetRadius200ResponseDataInner zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * 5 Digit Zip Code. Zone Improvement Plan.
   * @return zipCode
   */
  @javax.annotation.Nonnull
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public GetRadius200ResponseDataInner zipCodeUrl(String zipCodeUrl) {
    this.zipCodeUrl = zipCodeUrl;
    return this;
  }

  /**
   * URL to Zip Code
   * @return zipCodeUrl
   */
  @javax.annotation.Nonnull
  public String getZipCodeUrl() {
    return zipCodeUrl;
  }

  public void setZipCodeUrl(String zipCodeUrl) {
    this.zipCodeUrl = zipCodeUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRadius200ResponseDataInner getRadius200ResponseDataInner = (GetRadius200ResponseDataInner) o;
    return Objects.equals(this.distanceKm, getRadius200ResponseDataInner.distanceKm) &&
        Objects.equals(this.distanceMi, getRadius200ResponseDataInner.distanceMi) &&
        Objects.equals(this.latitude, getRadius200ResponseDataInner.latitude) &&
        Objects.equals(this.longitude, getRadius200ResponseDataInner.longitude) &&
        Objects.equals(this.zipCode, getRadius200ResponseDataInner.zipCode) &&
        Objects.equals(this.zipCodeUrl, getRadius200ResponseDataInner.zipCodeUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distanceKm, distanceMi, latitude, longitude, zipCode, zipCodeUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRadius200ResponseDataInner {\n");
    sb.append("    distanceKm: ").append(toIndentedString(distanceKm)).append("\n");
    sb.append("    distanceMi: ").append(toIndentedString(distanceMi)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    zipCodeUrl: ").append(toIndentedString(zipCodeUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distanceKm");
    openapiFields.add("distanceMi");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("zipCode");
    openapiFields.add("zipCodeUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distanceKm");
    openapiRequiredFields.add("distanceMi");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("zipCode");
    openapiRequiredFields.add("zipCodeUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRadius200ResponseDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRadius200ResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRadius200ResponseDataInner is not found in the empty JSON string", GetRadius200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRadius200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRadius200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetRadius200ResponseDataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      if (!jsonObj.get("zipCodeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRadius200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRadius200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRadius200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRadius200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRadius200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, GetRadius200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRadius200ResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRadius200ResponseDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRadius200ResponseDataInner
   * @throws IOException if the JSON string is invalid with respect to GetRadius200ResponseDataInner
   */
  public static GetRadius200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRadius200ResponseDataInner.class);
  }

  /**
   * Convert an instance of GetRadius200ResponseDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

