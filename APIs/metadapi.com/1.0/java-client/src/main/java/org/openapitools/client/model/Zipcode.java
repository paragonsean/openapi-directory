/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ZipcodeCityAliasesInner;
import org.openapitools.client.model.ZipcodeZipCodeStatisticsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zip Code Data Model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.826870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Zipcode {
  public static final String SERIALIZED_NAME_CITY_ALIASES = "cityAliases";
  @SerializedName(SERIALIZED_NAME_CITY_ALIASES)
  private Set<ZipcodeCityAliasesInner> cityAliases = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_COUNTY_FIPS_CODE = "countyFipsCode";
  @SerializedName(SERIALIZED_NAME_COUNTY_FIPS_CODE)
  private String countyFipsCode;

  public static final String SERIALIZED_NAME_DIVISION_CODE = "divisionCode";
  @SerializedName(SERIALIZED_NAME_DIVISION_CODE)
  private String divisionCode;

  public static final String SERIALIZED_NAME_DIVISION_NAME = "divisionName";
  @SerializedName(SERIALIZED_NAME_DIVISION_NAME)
  private String divisionName;

  public static final String SERIALIZED_NAME_LAND_AREA_KM2 = "landAreaKm2";
  @SerializedName(SERIALIZED_NAME_LAND_AREA_KM2)
  private BigDecimal landAreaKm2;

  public static final String SERIALIZED_NAME_LAND_AREA_MI2 = "landAreaMi2";
  @SerializedName(SERIALIZED_NAME_LAND_AREA_MI2)
  private BigDecimal landAreaMi2;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_MSA_CODE = "msaCode";
  @SerializedName(SERIALIZED_NAME_MSA_CODE)
  private String msaCode;

  public static final String SERIALIZED_NAME_MSA_NAME = "msaName";
  @SerializedName(SERIALIZED_NAME_MSA_NAME)
  private String msaName;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_REGION_NAME = "regionName";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  private String regionName;

  public static final String SERIALIZED_NAME_STATE_ABBR = "stateAbbr";
  @SerializedName(SERIALIZED_NAME_STATE_ABBR)
  private String stateAbbr;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_STATE_FIPS_CODE = "stateFipsCode";
  @SerializedName(SERIALIZED_NAME_STATE_FIPS_CODE)
  private String stateFipsCode;

  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private String stateName;

  public static final String SERIALIZED_NAME_TITLE_CASE_CITY_NAME = "titleCaseCityName";
  @SerializedName(SERIALIZED_NAME_TITLE_CASE_CITY_NAME)
  private String titleCaseCityName;

  public static final String SERIALIZED_NAME_TITLE_CASE_COUNTY_NAME = "titleCaseCountyName";
  @SerializedName(SERIALIZED_NAME_TITLE_CASE_COUNTY_NAME)
  private String titleCaseCountyName;

  public static final String SERIALIZED_NAME_UNIQUE_ZIP_NAME_IND = "uniqueZipNameInd";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ZIP_NAME_IND)
  private Boolean uniqueZipNameInd;

  public static final String SERIALIZED_NAME_USPS_CARRIER_ROUTE_RATE_SORT_DESC = "uspsCarrierRouteRateSortDesc";
  @SerializedName(SERIALIZED_NAME_USPS_CARRIER_ROUTE_RATE_SORT_DESC)
  private String uspsCarrierRouteRateSortDesc;

  public static final String SERIALIZED_NAME_USPS_CARRIER_ROUTE_SORT_CODE = "uspsCarrierRouteSortCode";
  @SerializedName(SERIALIZED_NAME_USPS_CARRIER_ROUTE_SORT_CODE)
  private String uspsCarrierRouteSortCode;

  public static final String SERIALIZED_NAME_USPS_CITY_MAILING_IND = "uspsCityMailingInd";
  @SerializedName(SERIALIZED_NAME_USPS_CITY_MAILING_IND)
  private Boolean uspsCityMailingInd;

  public static final String SERIALIZED_NAME_USPS_COUNTY_NAME = "uspsCountyName";
  @SerializedName(SERIALIZED_NAME_USPS_COUNTY_NAME)
  private String uspsCountyName;

  public static final String SERIALIZED_NAME_USPS_DELIVERY_CODE = "uspsDeliveryCode";
  @SerializedName(SERIALIZED_NAME_USPS_DELIVERY_CODE)
  private String uspsDeliveryCode;

  public static final String SERIALIZED_NAME_USPS_DELIVERY_DESC = "uspsDeliveryDesc";
  @SerializedName(SERIALIZED_NAME_USPS_DELIVERY_DESC)
  private String uspsDeliveryDesc;

  public static final String SERIALIZED_NAME_USPS_FACILITY_CODE = "uspsFacilityCode";
  @SerializedName(SERIALIZED_NAME_USPS_FACILITY_CODE)
  private String uspsFacilityCode;

  public static final String SERIALIZED_NAME_USPS_FACILITY_NAME = "uspsFacilityName";
  @SerializedName(SERIALIZED_NAME_USPS_FACILITY_NAME)
  private String uspsFacilityName;

  public static final String SERIALIZED_NAME_USPS_FINANCE_NUMBER = "uspsFinanceNumber";
  @SerializedName(SERIALIZED_NAME_USPS_FINANCE_NUMBER)
  private String uspsFinanceNumber;

  public static final String SERIALIZED_NAME_USPS_MAIN_CITY_KEY = "uspsMainCityKey";
  @SerializedName(SERIALIZED_NAME_USPS_MAIN_CITY_KEY)
  private String uspsMainCityKey;

  public static final String SERIALIZED_NAME_USPS_MAIN_CITY_NAME = "uspsMainCityName";
  @SerializedName(SERIALIZED_NAME_USPS_MAIN_CITY_NAME)
  private String uspsMainCityName;

  public static final String SERIALIZED_NAME_WATER_AREA_KM2 = "waterAreaKm2";
  @SerializedName(SERIALIZED_NAME_WATER_AREA_KM2)
  private BigDecimal waterAreaKm2;

  public static final String SERIALIZED_NAME_WATER_AREA_MI2 = "waterAreaMi2";
  @SerializedName(SERIALIZED_NAME_WATER_AREA_MI2)
  private BigDecimal waterAreaMi2;

  public static final String SERIALIZED_NAME_ZIP_CLASSIFICATION_CODE = "zipClassificationCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CLASSIFICATION_CODE)
  private String zipClassificationCode;

  public static final String SERIALIZED_NAME_ZIP_CLASSIFICATION_DESC = "zipClassificationDesc";
  @SerializedName(SERIALIZED_NAME_ZIP_CLASSIFICATION_DESC)
  private String zipClassificationDesc;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_ZIP_CODE_STATISTICS = "zipCodeStatistics";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_STATISTICS)
  private Set<ZipcodeZipCodeStatisticsInner> zipCodeStatistics;

  public Zipcode() {
  }

  public Zipcode cityAliases(Set<ZipcodeCityAliasesInner> cityAliases) {
    this.cityAliases = cityAliases;
    return this;
  }

  public Zipcode addCityAliasesItem(ZipcodeCityAliasesInner cityAliasesItem) {
    if (this.cityAliases == null) {
      this.cityAliases = new LinkedHashSet<>();
    }
    this.cityAliases.add(cityAliasesItem);
    return this;
  }

  /**
   * Array that contains all the city aliases for the given zip code.
   * @return cityAliases
   */
  @javax.annotation.Nonnull
  public Set<ZipcodeCityAliasesInner> getCityAliases() {
    return cityAliases;
  }

  public void setCityAliases(Set<ZipcodeCityAliasesInner> cityAliases) {
    this.cityAliases = cityAliases;
  }


  public Zipcode countyFipsCode(String countyFipsCode) {
    this.countyFipsCode = countyFipsCode;
    return this;
  }

  /**
   * FIPS code assigned to the county of the main city of the zip code.
   * @return countyFipsCode
   */
  @javax.annotation.Nonnull
  public String getCountyFipsCode() {
    return countyFipsCode;
  }

  public void setCountyFipsCode(String countyFipsCode) {
    this.countyFipsCode = countyFipsCode;
  }


  public Zipcode divisionCode(String divisionCode) {
    this.divisionCode = divisionCode;
    return this;
  }

  /**
   * Division Code. Part of the geographical hierarchy of the US provided by the united states census.
   * @return divisionCode
   */
  @javax.annotation.Nonnull
  public String getDivisionCode() {
    return divisionCode;
  }

  public void setDivisionCode(String divisionCode) {
    this.divisionCode = divisionCode;
  }


  public Zipcode divisionName(String divisionName) {
    this.divisionName = divisionName;
    return this;
  }

  /**
   * Division Name. Part of the geographical hierarchy of the US provided by the united states census.
   * @return divisionName
   */
  @javax.annotation.Nonnull
  public String getDivisionName() {
    return divisionName;
  }

  public void setDivisionName(String divisionName) {
    this.divisionName = divisionName;
  }


  public Zipcode landAreaKm2(BigDecimal landAreaKm2) {
    this.landAreaKm2 = landAreaKm2;
    return this;
  }

  /**
   * Zip Code Land Area in square kilometers.
   * @return landAreaKm2
   */
  @javax.annotation.Nullable
  public BigDecimal getLandAreaKm2() {
    return landAreaKm2;
  }

  public void setLandAreaKm2(BigDecimal landAreaKm2) {
    this.landAreaKm2 = landAreaKm2;
  }


  public Zipcode landAreaMi2(BigDecimal landAreaMi2) {
    this.landAreaMi2 = landAreaMi2;
    return this;
  }

  /**
   * Zip Code Land area in Square Miles
   * @return landAreaMi2
   */
  @javax.annotation.Nullable
  public BigDecimal getLandAreaMi2() {
    return landAreaMi2;
  }

  public void setLandAreaMi2(BigDecimal landAreaMi2) {
    this.landAreaMi2 = landAreaMi2;
  }


  public Zipcode latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Zip Code Latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public Zipcode longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Zip Code Longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public Zipcode msaCode(String msaCode) {
    this.msaCode = msaCode;
    return this;
  }

  /**
   * 5 digit MSA (Metropolitan Statistical Area) code.
   * @return msaCode
   */
  @javax.annotation.Nonnull
  public String getMsaCode() {
    return msaCode;
  }

  public void setMsaCode(String msaCode) {
    this.msaCode = msaCode;
  }


  public Zipcode msaName(String msaName) {
    this.msaName = msaName;
    return this;
  }

  /**
   * Name of the defined MSA code.
   * @return msaName
   */
  @javax.annotation.Nonnull
  public String getMsaName() {
    return msaName;
  }

  public void setMsaName(String msaName) {
    this.msaName = msaName;
  }


  public Zipcode regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Region Code. Part of the geographical hierarchy of the US provided by the united states census.
   * @return regionCode
   */
  @javax.annotation.Nonnull
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public Zipcode regionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  /**
   * Region Name. Part of the geographical hierarchy of the US provided by the united states census.
   * @return regionName
   */
  @javax.annotation.Nonnull
  public String getRegionName() {
    return regionName;
  }

  public void setRegionName(String regionName) {
    this.regionName = regionName;
  }


  public Zipcode stateAbbr(String stateAbbr) {
    this.stateAbbr = stateAbbr;
    return this;
  }

  /**
   * Abbreviation for state name.
   * @return stateAbbr
   */
  @javax.annotation.Nonnull
  public String getStateAbbr() {
    return stateAbbr;
  }

  public void setStateAbbr(String stateAbbr) {
    this.stateAbbr = stateAbbr;
  }


  public Zipcode stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * Standard 2 character state code.
   * @return stateCode
   */
  @javax.annotation.Nonnull
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public Zipcode stateFipsCode(String stateFipsCode) {
    this.stateFipsCode = stateFipsCode;
    return this;
  }

  /**
   * Federal Information Processing Standards 2 digit assigned code.
   * @return stateFipsCode
   */
  @javax.annotation.Nonnull
  public String getStateFipsCode() {
    return stateFipsCode;
  }

  public void setStateFipsCode(String stateFipsCode) {
    this.stateFipsCode = stateFipsCode;
  }


  public Zipcode stateName(String stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * State Name
   * @return stateName
   */
  @javax.annotation.Nonnull
  public String getStateName() {
    return stateName;
  }

  public void setStateName(String stateName) {
    this.stateName = stateName;
  }


  public Zipcode titleCaseCityName(String titleCaseCityName) {
    this.titleCaseCityName = titleCaseCityName;
    return this;
  }

  /**
   * USPS City / Town Name for the main city of the zip code. Title Case Format.
   * @return titleCaseCityName
   */
  @javax.annotation.Nonnull
  public String getTitleCaseCityName() {
    return titleCaseCityName;
  }

  public void setTitleCaseCityName(String titleCaseCityName) {
    this.titleCaseCityName = titleCaseCityName;
  }


  public Zipcode titleCaseCountyName(String titleCaseCountyName) {
    this.titleCaseCountyName = titleCaseCountyName;
    return this;
  }

  /**
   * Main County Name in Title Case
   * @return titleCaseCountyName
   */
  @javax.annotation.Nonnull
  public String getTitleCaseCountyName() {
    return titleCaseCountyName;
  }

  public void setTitleCaseCountyName(String titleCaseCountyName) {
    this.titleCaseCountyName = titleCaseCountyName;
  }


  public Zipcode uniqueZipNameInd(Boolean uniqueZipNameInd) {
    this.uniqueZipNameInd = uniqueZipNameInd;
    return this;
  }

  /**
   * True &#x3D; Unique Zip Code Name. False the zip code name is not unique.
   * @return uniqueZipNameInd
   */
  @javax.annotation.Nonnull
  public Boolean getUniqueZipNameInd() {
    return uniqueZipNameInd;
  }

  public void setUniqueZipNameInd(Boolean uniqueZipNameInd) {
    this.uniqueZipNameInd = uniqueZipNameInd;
  }


  public Zipcode uspsCarrierRouteRateSortDesc(String uspsCarrierRouteRateSortDesc) {
    this.uspsCarrierRouteRateSortDesc = uspsCarrierRouteRateSortDesc;
    return this;
  }

  /**
   * Description for the carrier route code.
   * @return uspsCarrierRouteRateSortDesc
   */
  @javax.annotation.Nonnull
  public String getUspsCarrierRouteRateSortDesc() {
    return uspsCarrierRouteRateSortDesc;
  }

  public void setUspsCarrierRouteRateSortDesc(String uspsCarrierRouteRateSortDesc) {
    this.uspsCarrierRouteRateSortDesc = uspsCarrierRouteRateSortDesc;
  }


  public Zipcode uspsCarrierRouteSortCode(String uspsCarrierRouteSortCode) {
    this.uspsCarrierRouteSortCode = uspsCarrierRouteSortCode;
    return this;
  }

  /**
   * Code for the available carrier route.
   * @return uspsCarrierRouteSortCode
   */
  @javax.annotation.Nonnull
  public String getUspsCarrierRouteSortCode() {
    return uspsCarrierRouteSortCode;
  }

  public void setUspsCarrierRouteSortCode(String uspsCarrierRouteSortCode) {
    this.uspsCarrierRouteSortCode = uspsCarrierRouteSortCode;
  }


  public Zipcode uspsCityMailingInd(Boolean uspsCityMailingInd) {
    this.uspsCityMailingInd = uspsCityMailingInd;
    return this;
  }

  /**
   * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
   * @return uspsCityMailingInd
   */
  @javax.annotation.Nonnull
  public Boolean getUspsCityMailingInd() {
    return uspsCityMailingInd;
  }

  public void setUspsCityMailingInd(Boolean uspsCityMailingInd) {
    this.uspsCityMailingInd = uspsCityMailingInd;
  }


  public Zipcode uspsCountyName(String uspsCountyName) {
    this.uspsCountyName = uspsCountyName;
    return this;
  }

  /**
   * Name of the county of the main city for the zip code.
   * @return uspsCountyName
   */
  @javax.annotation.Nonnull
  public String getUspsCountyName() {
    return uspsCountyName;
  }

  public void setUspsCountyName(String uspsCountyName) {
    this.uspsCountyName = uspsCountyName;
  }


  public Zipcode uspsDeliveryCode(String uspsDeliveryCode) {
    this.uspsDeliveryCode = uspsDeliveryCode;
    return this;
  }

  /**
   * Determines if the zip code city has Carrier Routes.
   * @return uspsDeliveryCode
   */
  @javax.annotation.Nonnull
  public String getUspsDeliveryCode() {
    return uspsDeliveryCode;
  }

  public void setUspsDeliveryCode(String uspsDeliveryCode) {
    this.uspsDeliveryCode = uspsDeliveryCode;
  }


  public Zipcode uspsDeliveryDesc(String uspsDeliveryDesc) {
    this.uspsDeliveryDesc = uspsDeliveryDesc;
    return this;
  }

  /**
   * Determines if the zip code city has Carrier Routes.
   * @return uspsDeliveryDesc
   */
  @javax.annotation.Nonnull
  public String getUspsDeliveryDesc() {
    return uspsDeliveryDesc;
  }

  public void setUspsDeliveryDesc(String uspsDeliveryDesc) {
    this.uspsDeliveryDesc = uspsDeliveryDesc;
  }


  public Zipcode uspsFacilityCode(String uspsFacilityCode) {
    this.uspsFacilityCode = uspsFacilityCode;
    return this;
  }

  /**
   * Facility code provided by the USPS. B&#x3D;Branch, C&#x3D;Community Post Office, N &#x3D; Non-Postal Community Name, former postal facility or place name, P&#x3D; Post Office, S&#x3D;Station, U &#x3D; Urbanization
   * @return uspsFacilityCode
   */
  @javax.annotation.Nonnull
  public String getUspsFacilityCode() {
    return uspsFacilityCode;
  }

  public void setUspsFacilityCode(String uspsFacilityCode) {
    this.uspsFacilityCode = uspsFacilityCode;
  }


  public Zipcode uspsFacilityName(String uspsFacilityName) {
    this.uspsFacilityName = uspsFacilityName;
    return this;
  }

  /**
   * USPS Facility Name  B&#x3D;Branch, C&#x3D;Community Post Office, N &#x3D; Non-Postal Community Name, former postal facility or place name, P&#x3D; Post Office, S&#x3D;Station, U &#x3D; Urbanization
   * @return uspsFacilityName
   */
  @javax.annotation.Nonnull
  public String getUspsFacilityName() {
    return uspsFacilityName;
  }

  public void setUspsFacilityName(String uspsFacilityName) {
    this.uspsFacilityName = uspsFacilityName;
  }


  public Zipcode uspsFinanceNumber(String uspsFinanceNumber) {
    this.uspsFinanceNumber = uspsFinanceNumber;
    return this;
  }

  /**
   * USPS Provided Finance Number. This code is assigned to postal service facilities.
   * @return uspsFinanceNumber
   */
  @javax.annotation.Nonnull
  public String getUspsFinanceNumber() {
    return uspsFinanceNumber;
  }

  public void setUspsFinanceNumber(String uspsFinanceNumber) {
    this.uspsFinanceNumber = uspsFinanceNumber;
  }


  public Zipcode uspsMainCityKey(String uspsMainCityKey) {
    this.uspsMainCityKey = uspsMainCityKey;
    return this;
  }

  /**
   * USPS City / Town key identifier for the main city of the zip code.
   * @return uspsMainCityKey
   */
  @javax.annotation.Nonnull
  public String getUspsMainCityKey() {
    return uspsMainCityKey;
  }

  public void setUspsMainCityKey(String uspsMainCityKey) {
    this.uspsMainCityKey = uspsMainCityKey;
  }


  public Zipcode uspsMainCityName(String uspsMainCityName) {
    this.uspsMainCityName = uspsMainCityName;
    return this;
  }

  /**
   * USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.
   * @return uspsMainCityName
   */
  @javax.annotation.Nonnull
  public String getUspsMainCityName() {
    return uspsMainCityName;
  }

  public void setUspsMainCityName(String uspsMainCityName) {
    this.uspsMainCityName = uspsMainCityName;
  }


  public Zipcode waterAreaKm2(BigDecimal waterAreaKm2) {
    this.waterAreaKm2 = waterAreaKm2;
    return this;
  }

  /**
   * Zip Code water area in Square kilometers.
   * @return waterAreaKm2
   */
  @javax.annotation.Nullable
  public BigDecimal getWaterAreaKm2() {
    return waterAreaKm2;
  }

  public void setWaterAreaKm2(BigDecimal waterAreaKm2) {
    this.waterAreaKm2 = waterAreaKm2;
  }


  public Zipcode waterAreaMi2(BigDecimal waterAreaMi2) {
    this.waterAreaMi2 = waterAreaMi2;
    return this;
  }

  /**
   * Zip Code Water Area in Square Miles
   * @return waterAreaMi2
   */
  @javax.annotation.Nullable
  public BigDecimal getWaterAreaMi2() {
    return waterAreaMi2;
  }

  public void setWaterAreaMi2(BigDecimal waterAreaMi2) {
    this.waterAreaMi2 = waterAreaMi2;
  }


  public Zipcode zipClassificationCode(String zipClassificationCode) {
    this.zipClassificationCode = zipClassificationCode;
    return this;
  }

  /**
   * Code provided by USPS for the type of Zip Code it represents.  P &#x3D; PO Box Zip, U &#x3D; Unique Zip, M &#x3D; APO/FPO Military Zip , null (not provided by USPS),N &#x3D; Non-Unique Zip.
   * @return zipClassificationCode
   */
  @javax.annotation.Nullable
  public String getZipClassificationCode() {
    return zipClassificationCode;
  }

  public void setZipClassificationCode(String zipClassificationCode) {
    this.zipClassificationCode = zipClassificationCode;
  }


  public Zipcode zipClassificationDesc(String zipClassificationDesc) {
    this.zipClassificationDesc = zipClassificationDesc;
    return this;
  }

  /**
   * Description of the zip classification code.   P &#x3D; PO Box Zip, U &#x3D; Unique Zip, M &#x3D; APO/FPO Military Zip , null (not provided by USPS), &#x3D; Non-Unique Zip.
   * @return zipClassificationDesc
   */
  @javax.annotation.Nonnull
  public String getZipClassificationDesc() {
    return zipClassificationDesc;
  }

  public void setZipClassificationDesc(String zipClassificationDesc) {
    this.zipClassificationDesc = zipClassificationDesc;
  }


  public Zipcode zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * 5 Digit Zip Code. Zone Improvement Plan.
   * @return zipCode
   */
  @javax.annotation.Nonnull
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public Zipcode zipCodeStatistics(Set<ZipcodeZipCodeStatisticsInner> zipCodeStatistics) {
    this.zipCodeStatistics = zipCodeStatistics;
    return this;
  }

  public Zipcode addZipCodeStatisticsItem(ZipcodeZipCodeStatisticsInner zipCodeStatisticsItem) {
    if (this.zipCodeStatistics == null) {
      this.zipCodeStatistics = new LinkedHashSet<>();
    }
    this.zipCodeStatistics.add(zipCodeStatisticsItem);
    return this;
  }

  /**
   * Available statistics by year of the Zip Code.
   * @return zipCodeStatistics
   */
  @javax.annotation.Nullable
  public Set<ZipcodeZipCodeStatisticsInner> getZipCodeStatistics() {
    return zipCodeStatistics;
  }

  public void setZipCodeStatistics(Set<ZipcodeZipCodeStatisticsInner> zipCodeStatistics) {
    this.zipCodeStatistics = zipCodeStatistics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Zipcode zipcode = (Zipcode) o;
    return Objects.equals(this.cityAliases, zipcode.cityAliases) &&
        Objects.equals(this.countyFipsCode, zipcode.countyFipsCode) &&
        Objects.equals(this.divisionCode, zipcode.divisionCode) &&
        Objects.equals(this.divisionName, zipcode.divisionName) &&
        Objects.equals(this.landAreaKm2, zipcode.landAreaKm2) &&
        Objects.equals(this.landAreaMi2, zipcode.landAreaMi2) &&
        Objects.equals(this.latitude, zipcode.latitude) &&
        Objects.equals(this.longitude, zipcode.longitude) &&
        Objects.equals(this.msaCode, zipcode.msaCode) &&
        Objects.equals(this.msaName, zipcode.msaName) &&
        Objects.equals(this.regionCode, zipcode.regionCode) &&
        Objects.equals(this.regionName, zipcode.regionName) &&
        Objects.equals(this.stateAbbr, zipcode.stateAbbr) &&
        Objects.equals(this.stateCode, zipcode.stateCode) &&
        Objects.equals(this.stateFipsCode, zipcode.stateFipsCode) &&
        Objects.equals(this.stateName, zipcode.stateName) &&
        Objects.equals(this.titleCaseCityName, zipcode.titleCaseCityName) &&
        Objects.equals(this.titleCaseCountyName, zipcode.titleCaseCountyName) &&
        Objects.equals(this.uniqueZipNameInd, zipcode.uniqueZipNameInd) &&
        Objects.equals(this.uspsCarrierRouteRateSortDesc, zipcode.uspsCarrierRouteRateSortDesc) &&
        Objects.equals(this.uspsCarrierRouteSortCode, zipcode.uspsCarrierRouteSortCode) &&
        Objects.equals(this.uspsCityMailingInd, zipcode.uspsCityMailingInd) &&
        Objects.equals(this.uspsCountyName, zipcode.uspsCountyName) &&
        Objects.equals(this.uspsDeliveryCode, zipcode.uspsDeliveryCode) &&
        Objects.equals(this.uspsDeliveryDesc, zipcode.uspsDeliveryDesc) &&
        Objects.equals(this.uspsFacilityCode, zipcode.uspsFacilityCode) &&
        Objects.equals(this.uspsFacilityName, zipcode.uspsFacilityName) &&
        Objects.equals(this.uspsFinanceNumber, zipcode.uspsFinanceNumber) &&
        Objects.equals(this.uspsMainCityKey, zipcode.uspsMainCityKey) &&
        Objects.equals(this.uspsMainCityName, zipcode.uspsMainCityName) &&
        Objects.equals(this.waterAreaKm2, zipcode.waterAreaKm2) &&
        Objects.equals(this.waterAreaMi2, zipcode.waterAreaMi2) &&
        Objects.equals(this.zipClassificationCode, zipcode.zipClassificationCode) &&
        Objects.equals(this.zipClassificationDesc, zipcode.zipClassificationDesc) &&
        Objects.equals(this.zipCode, zipcode.zipCode) &&
        Objects.equals(this.zipCodeStatistics, zipcode.zipCodeStatistics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cityAliases, countyFipsCode, divisionCode, divisionName, landAreaKm2, landAreaMi2, latitude, longitude, msaCode, msaName, regionCode, regionName, stateAbbr, stateCode, stateFipsCode, stateName, titleCaseCityName, titleCaseCountyName, uniqueZipNameInd, uspsCarrierRouteRateSortDesc, uspsCarrierRouteSortCode, uspsCityMailingInd, uspsCountyName, uspsDeliveryCode, uspsDeliveryDesc, uspsFacilityCode, uspsFacilityName, uspsFinanceNumber, uspsMainCityKey, uspsMainCityName, waterAreaKm2, waterAreaMi2, zipClassificationCode, zipClassificationDesc, zipCode, zipCodeStatistics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Zipcode {\n");
    sb.append("    cityAliases: ").append(toIndentedString(cityAliases)).append("\n");
    sb.append("    countyFipsCode: ").append(toIndentedString(countyFipsCode)).append("\n");
    sb.append("    divisionCode: ").append(toIndentedString(divisionCode)).append("\n");
    sb.append("    divisionName: ").append(toIndentedString(divisionName)).append("\n");
    sb.append("    landAreaKm2: ").append(toIndentedString(landAreaKm2)).append("\n");
    sb.append("    landAreaMi2: ").append(toIndentedString(landAreaMi2)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    msaCode: ").append(toIndentedString(msaCode)).append("\n");
    sb.append("    msaName: ").append(toIndentedString(msaName)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    stateAbbr: ").append(toIndentedString(stateAbbr)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    stateFipsCode: ").append(toIndentedString(stateFipsCode)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    titleCaseCityName: ").append(toIndentedString(titleCaseCityName)).append("\n");
    sb.append("    titleCaseCountyName: ").append(toIndentedString(titleCaseCountyName)).append("\n");
    sb.append("    uniqueZipNameInd: ").append(toIndentedString(uniqueZipNameInd)).append("\n");
    sb.append("    uspsCarrierRouteRateSortDesc: ").append(toIndentedString(uspsCarrierRouteRateSortDesc)).append("\n");
    sb.append("    uspsCarrierRouteSortCode: ").append(toIndentedString(uspsCarrierRouteSortCode)).append("\n");
    sb.append("    uspsCityMailingInd: ").append(toIndentedString(uspsCityMailingInd)).append("\n");
    sb.append("    uspsCountyName: ").append(toIndentedString(uspsCountyName)).append("\n");
    sb.append("    uspsDeliveryCode: ").append(toIndentedString(uspsDeliveryCode)).append("\n");
    sb.append("    uspsDeliveryDesc: ").append(toIndentedString(uspsDeliveryDesc)).append("\n");
    sb.append("    uspsFacilityCode: ").append(toIndentedString(uspsFacilityCode)).append("\n");
    sb.append("    uspsFacilityName: ").append(toIndentedString(uspsFacilityName)).append("\n");
    sb.append("    uspsFinanceNumber: ").append(toIndentedString(uspsFinanceNumber)).append("\n");
    sb.append("    uspsMainCityKey: ").append(toIndentedString(uspsMainCityKey)).append("\n");
    sb.append("    uspsMainCityName: ").append(toIndentedString(uspsMainCityName)).append("\n");
    sb.append("    waterAreaKm2: ").append(toIndentedString(waterAreaKm2)).append("\n");
    sb.append("    waterAreaMi2: ").append(toIndentedString(waterAreaMi2)).append("\n");
    sb.append("    zipClassificationCode: ").append(toIndentedString(zipClassificationCode)).append("\n");
    sb.append("    zipClassificationDesc: ").append(toIndentedString(zipClassificationDesc)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    zipCodeStatistics: ").append(toIndentedString(zipCodeStatistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cityAliases");
    openapiFields.add("countyFipsCode");
    openapiFields.add("divisionCode");
    openapiFields.add("divisionName");
    openapiFields.add("landAreaKm2");
    openapiFields.add("landAreaMi2");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("msaCode");
    openapiFields.add("msaName");
    openapiFields.add("regionCode");
    openapiFields.add("regionName");
    openapiFields.add("stateAbbr");
    openapiFields.add("stateCode");
    openapiFields.add("stateFipsCode");
    openapiFields.add("stateName");
    openapiFields.add("titleCaseCityName");
    openapiFields.add("titleCaseCountyName");
    openapiFields.add("uniqueZipNameInd");
    openapiFields.add("uspsCarrierRouteRateSortDesc");
    openapiFields.add("uspsCarrierRouteSortCode");
    openapiFields.add("uspsCityMailingInd");
    openapiFields.add("uspsCountyName");
    openapiFields.add("uspsDeliveryCode");
    openapiFields.add("uspsDeliveryDesc");
    openapiFields.add("uspsFacilityCode");
    openapiFields.add("uspsFacilityName");
    openapiFields.add("uspsFinanceNumber");
    openapiFields.add("uspsMainCityKey");
    openapiFields.add("uspsMainCityName");
    openapiFields.add("waterAreaKm2");
    openapiFields.add("waterAreaMi2");
    openapiFields.add("zipClassificationCode");
    openapiFields.add("zipClassificationDesc");
    openapiFields.add("zipCode");
    openapiFields.add("zipCodeStatistics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cityAliases");
    openapiRequiredFields.add("countyFipsCode");
    openapiRequiredFields.add("divisionCode");
    openapiRequiredFields.add("divisionName");
    openapiRequiredFields.add("landAreaKm2");
    openapiRequiredFields.add("landAreaMi2");
    openapiRequiredFields.add("msaCode");
    openapiRequiredFields.add("msaName");
    openapiRequiredFields.add("regionCode");
    openapiRequiredFields.add("regionName");
    openapiRequiredFields.add("stateAbbr");
    openapiRequiredFields.add("stateCode");
    openapiRequiredFields.add("stateFipsCode");
    openapiRequiredFields.add("stateName");
    openapiRequiredFields.add("titleCaseCityName");
    openapiRequiredFields.add("titleCaseCountyName");
    openapiRequiredFields.add("uniqueZipNameInd");
    openapiRequiredFields.add("uspsCarrierRouteRateSortDesc");
    openapiRequiredFields.add("uspsCarrierRouteSortCode");
    openapiRequiredFields.add("uspsCityMailingInd");
    openapiRequiredFields.add("uspsCountyName");
    openapiRequiredFields.add("uspsDeliveryCode");
    openapiRequiredFields.add("uspsDeliveryDesc");
    openapiRequiredFields.add("uspsFacilityCode");
    openapiRequiredFields.add("uspsFacilityName");
    openapiRequiredFields.add("uspsFinanceNumber");
    openapiRequiredFields.add("uspsMainCityKey");
    openapiRequiredFields.add("uspsMainCityName");
    openapiRequiredFields.add("waterAreaKm2");
    openapiRequiredFields.add("waterAreaMi2");
    openapiRequiredFields.add("zipClassificationCode");
    openapiRequiredFields.add("zipClassificationDesc");
    openapiRequiredFields.add("zipCode");
    openapiRequiredFields.add("zipCodeStatistics");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Zipcode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Zipcode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Zipcode is not found in the empty JSON string", Zipcode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Zipcode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Zipcode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Zipcode.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("cityAliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityAliases` to be an array in the JSON string but got `%s`", jsonObj.get("cityAliases").toString()));
      }

      JsonArray jsonArraycityAliases = jsonObj.getAsJsonArray("cityAliases");
      // validate the required field `cityAliases` (array)
      for (int i = 0; i < jsonArraycityAliases.size(); i++) {
        ZipcodeCityAliasesInner.validateJsonElement(jsonArraycityAliases.get(i));
      };
      if (!jsonObj.get("countyFipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countyFipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countyFipsCode").toString()));
      }
      if (!jsonObj.get("divisionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `divisionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("divisionCode").toString()));
      }
      if (!jsonObj.get("divisionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `divisionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("divisionName").toString()));
      }
      if (!jsonObj.get("msaCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msaCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msaCode").toString()));
      }
      if (!jsonObj.get("msaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msaName").toString()));
      }
      if (!jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
      if (!jsonObj.get("regionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionName").toString()));
      }
      if (!jsonObj.get("stateAbbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateAbbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateAbbr").toString()));
      }
      if (!jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if (!jsonObj.get("stateFipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateFipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateFipsCode").toString()));
      }
      if (!jsonObj.get("stateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateName").toString()));
      }
      if (!jsonObj.get("titleCaseCityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleCaseCityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleCaseCityName").toString()));
      }
      if (!jsonObj.get("titleCaseCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleCaseCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleCaseCountyName").toString()));
      }
      if (!jsonObj.get("uspsCarrierRouteRateSortDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsCarrierRouteRateSortDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsCarrierRouteRateSortDesc").toString()));
      }
      if (!jsonObj.get("uspsCarrierRouteSortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsCarrierRouteSortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsCarrierRouteSortCode").toString()));
      }
      if (!jsonObj.get("uspsCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsCountyName").toString()));
      }
      if (!jsonObj.get("uspsDeliveryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsDeliveryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsDeliveryCode").toString()));
      }
      if (!jsonObj.get("uspsDeliveryDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsDeliveryDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsDeliveryDesc").toString()));
      }
      if (!jsonObj.get("uspsFacilityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsFacilityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsFacilityCode").toString()));
      }
      if (!jsonObj.get("uspsFacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsFacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsFacilityName").toString()));
      }
      if (!jsonObj.get("uspsFinanceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsFinanceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsFinanceNumber").toString()));
      }
      if (!jsonObj.get("uspsMainCityKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsMainCityKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsMainCityKey").toString()));
      }
      if (!jsonObj.get("uspsMainCityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsMainCityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsMainCityName").toString()));
      }
      if ((jsonObj.get("zipClassificationCode") != null && !jsonObj.get("zipClassificationCode").isJsonNull()) && !jsonObj.get("zipClassificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipClassificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipClassificationCode").toString()));
      }
      if (!jsonObj.get("zipClassificationDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipClassificationDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipClassificationDesc").toString()));
      }
      if (!jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("zipCodeStatistics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeStatistics` to be an array in the JSON string but got `%s`", jsonObj.get("zipCodeStatistics").toString()));
      }

      JsonArray jsonArrayzipCodeStatistics = jsonObj.getAsJsonArray("zipCodeStatistics");
      // validate the required field `zipCodeStatistics` (array)
      for (int i = 0; i < jsonArrayzipCodeStatistics.size(); i++) {
        ZipcodeZipCodeStatisticsInner.validateJsonElement(jsonArrayzipCodeStatistics.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Zipcode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Zipcode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Zipcode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Zipcode.class));

       return (TypeAdapter<T>) new TypeAdapter<Zipcode>() {
           @Override
           public void write(JsonWriter out, Zipcode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Zipcode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Zipcode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Zipcode
   * @throws IOException if the JSON string is invalid with respect to Zipcode
   */
  public static Zipcode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Zipcode.class);
  }

  /**
   * Convert an instance of Zipcode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

