/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZipcodeCityAliasesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.826870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZipcodeCityAliasesInner {
  public static final String SERIALIZED_NAME_TITLE_CASE_CITY_NAME = "titleCaseCityName";
  @SerializedName(SERIALIZED_NAME_TITLE_CASE_CITY_NAME)
  private String titleCaseCityName;

  public static final String SERIALIZED_NAME_USPS_CITY_ABBR = "uspsCityAbbr";
  @SerializedName(SERIALIZED_NAME_USPS_CITY_ABBR)
  private String uspsCityAbbr;

  public static final String SERIALIZED_NAME_USPS_CITY_KEY = "uspsCityKey";
  @SerializedName(SERIALIZED_NAME_USPS_CITY_KEY)
  private String uspsCityKey;

  public static final String SERIALIZED_NAME_USPS_CITY_MAILING_IND = "uspsCityMailingInd";
  @SerializedName(SERIALIZED_NAME_USPS_CITY_MAILING_IND)
  private Boolean uspsCityMailingInd;

  public static final String SERIALIZED_NAME_USPS_CITY_NAME = "uspsCityName";
  @SerializedName(SERIALIZED_NAME_USPS_CITY_NAME)
  private String uspsCityName;

  public static final String SERIALIZED_NAME_USPS_MAIN_CITY_IND = "uspsMainCityInd";
  @SerializedName(SERIALIZED_NAME_USPS_MAIN_CITY_IND)
  private Boolean uspsMainCityInd;

  public ZipcodeCityAliasesInner() {
  }

  public ZipcodeCityAliasesInner titleCaseCityName(String titleCaseCityName) {
    this.titleCaseCityName = titleCaseCityName;
    return this;
  }

  /**
   * USPS City / Town Name for the zip code.
   * @return titleCaseCityName
   */
  @javax.annotation.Nonnull
  public String getTitleCaseCityName() {
    return titleCaseCityName;
  }

  public void setTitleCaseCityName(String titleCaseCityName) {
    this.titleCaseCityName = titleCaseCityName;
  }


  public ZipcodeCityAliasesInner uspsCityAbbr(String uspsCityAbbr) {
    this.uspsCityAbbr = uspsCityAbbr;
    return this;
  }

  /**
   * Main city abbreviation provided by USPS. Null if not provided. Uppercase.
   * @return uspsCityAbbr
   */
  @javax.annotation.Nullable
  public String getUspsCityAbbr() {
    return uspsCityAbbr;
  }

  public void setUspsCityAbbr(String uspsCityAbbr) {
    this.uspsCityAbbr = uspsCityAbbr;
  }


  public ZipcodeCityAliasesInner uspsCityKey(String uspsCityKey) {
    this.uspsCityKey = uspsCityKey;
    return this;
  }

  /**
   * USPS City / Town key identifier city of the zip code.
   * @return uspsCityKey
   */
  @javax.annotation.Nonnull
  public String getUspsCityKey() {
    return uspsCityKey;
  }

  public void setUspsCityKey(String uspsCityKey) {
    this.uspsCityKey = uspsCityKey;
  }


  public ZipcodeCityAliasesInner uspsCityMailingInd(Boolean uspsCityMailingInd) {
    this.uspsCityMailingInd = uspsCityMailingInd;
    return this;
  }

  /**
   * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
   * @return uspsCityMailingInd
   */
  @javax.annotation.Nonnull
  public Boolean getUspsCityMailingInd() {
    return uspsCityMailingInd;
  }

  public void setUspsCityMailingInd(Boolean uspsCityMailingInd) {
    this.uspsCityMailingInd = uspsCityMailingInd;
  }


  public ZipcodeCityAliasesInner uspsCityName(String uspsCityName) {
    this.uspsCityName = uspsCityName;
    return this;
  }

  /**
   * USPS City / Town Name for the zip code. All uppercase.
   * @return uspsCityName
   */
  @javax.annotation.Nonnull
  public String getUspsCityName() {
    return uspsCityName;
  }

  public void setUspsCityName(String uspsCityName) {
    this.uspsCityName = uspsCityName;
  }


  public ZipcodeCityAliasesInner uspsMainCityInd(Boolean uspsMainCityInd) {
    this.uspsMainCityInd = uspsMainCityInd;
    return this;
  }

  /**
   * If true, the city name and code is the main zip code city name.  (Preferred USPS city).
   * @return uspsMainCityInd
   */
  @javax.annotation.Nonnull
  public Boolean getUspsMainCityInd() {
    return uspsMainCityInd;
  }

  public void setUspsMainCityInd(Boolean uspsMainCityInd) {
    this.uspsMainCityInd = uspsMainCityInd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZipcodeCityAliasesInner zipcodeCityAliasesInner = (ZipcodeCityAliasesInner) o;
    return Objects.equals(this.titleCaseCityName, zipcodeCityAliasesInner.titleCaseCityName) &&
        Objects.equals(this.uspsCityAbbr, zipcodeCityAliasesInner.uspsCityAbbr) &&
        Objects.equals(this.uspsCityKey, zipcodeCityAliasesInner.uspsCityKey) &&
        Objects.equals(this.uspsCityMailingInd, zipcodeCityAliasesInner.uspsCityMailingInd) &&
        Objects.equals(this.uspsCityName, zipcodeCityAliasesInner.uspsCityName) &&
        Objects.equals(this.uspsMainCityInd, zipcodeCityAliasesInner.uspsMainCityInd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(titleCaseCityName, uspsCityAbbr, uspsCityKey, uspsCityMailingInd, uspsCityName, uspsMainCityInd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZipcodeCityAliasesInner {\n");
    sb.append("    titleCaseCityName: ").append(toIndentedString(titleCaseCityName)).append("\n");
    sb.append("    uspsCityAbbr: ").append(toIndentedString(uspsCityAbbr)).append("\n");
    sb.append("    uspsCityKey: ").append(toIndentedString(uspsCityKey)).append("\n");
    sb.append("    uspsCityMailingInd: ").append(toIndentedString(uspsCityMailingInd)).append("\n");
    sb.append("    uspsCityName: ").append(toIndentedString(uspsCityName)).append("\n");
    sb.append("    uspsMainCityInd: ").append(toIndentedString(uspsMainCityInd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("titleCaseCityName");
    openapiFields.add("uspsCityAbbr");
    openapiFields.add("uspsCityKey");
    openapiFields.add("uspsCityMailingInd");
    openapiFields.add("uspsCityName");
    openapiFields.add("uspsMainCityInd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("titleCaseCityName");
    openapiRequiredFields.add("uspsCityAbbr");
    openapiRequiredFields.add("uspsCityKey");
    openapiRequiredFields.add("uspsCityMailingInd");
    openapiRequiredFields.add("uspsCityName");
    openapiRequiredFields.add("uspsMainCityInd");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZipcodeCityAliasesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZipcodeCityAliasesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZipcodeCityAliasesInner is not found in the empty JSON string", ZipcodeCityAliasesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZipcodeCityAliasesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZipcodeCityAliasesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZipcodeCityAliasesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("titleCaseCityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleCaseCityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleCaseCityName").toString()));
      }
      if ((jsonObj.get("uspsCityAbbr") != null && !jsonObj.get("uspsCityAbbr").isJsonNull()) && !jsonObj.get("uspsCityAbbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsCityAbbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsCityAbbr").toString()));
      }
      if (!jsonObj.get("uspsCityKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsCityKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsCityKey").toString()));
      }
      if (!jsonObj.get("uspsCityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uspsCityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uspsCityName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZipcodeCityAliasesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZipcodeCityAliasesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZipcodeCityAliasesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZipcodeCityAliasesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ZipcodeCityAliasesInner>() {
           @Override
           public void write(JsonWriter out, ZipcodeCityAliasesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZipcodeCityAliasesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZipcodeCityAliasesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZipcodeCityAliasesInner
   * @throws IOException if the JSON string is invalid with respect to ZipcodeCityAliasesInner
   */
  public static ZipcodeCityAliasesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZipcodeCityAliasesInner.class);
  }

  /**
   * Convert an instance of ZipcodeCityAliasesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

