/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.GetMsagroups200ResponseDataInnerStatesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MSA Groups Data Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.826870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMsagroups200ResponseDataInner {
  public static final String SERIALIZED_NAME_MSA_CODE = "msaCode";
  @SerializedName(SERIALIZED_NAME_MSA_CODE)
  private String msaCode;

  public static final String SERIALIZED_NAME_MSA_NAME = "msaName";
  @SerializedName(SERIALIZED_NAME_MSA_NAME)
  private String msaName;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private Set<GetMsagroups200ResponseDataInnerStatesInner> states = new LinkedHashSet<>();

  public GetMsagroups200ResponseDataInner() {
  }

  public GetMsagroups200ResponseDataInner msaCode(String msaCode) {
    this.msaCode = msaCode;
    return this;
  }

  /**
   * 5 digit MSA (Metropolitan Statistical Area) code.
   * @return msaCode
   */
  @javax.annotation.Nonnull
  public String getMsaCode() {
    return msaCode;
  }

  public void setMsaCode(String msaCode) {
    this.msaCode = msaCode;
  }


  public GetMsagroups200ResponseDataInner msaName(String msaName) {
    this.msaName = msaName;
    return this;
  }

  /**
   * Name of the defined MSA code.
   * @return msaName
   */
  @javax.annotation.Nonnull
  public String getMsaName() {
    return msaName;
  }

  public void setMsaName(String msaName) {
    this.msaName = msaName;
  }


  public GetMsagroups200ResponseDataInner states(Set<GetMsagroups200ResponseDataInnerStatesInner> states) {
    this.states = states;
    return this;
  }

  public GetMsagroups200ResponseDataInner addStatesItem(GetMsagroups200ResponseDataInnerStatesInner statesItem) {
    if (this.states == null) {
      this.states = new LinkedHashSet<>();
    }
    this.states.add(statesItem);
    return this;
  }

  /**
   * Array with states and counties that make up MSA Group
   * @return states
   */
  @javax.annotation.Nonnull
  public Set<GetMsagroups200ResponseDataInnerStatesInner> getStates() {
    return states;
  }

  public void setStates(Set<GetMsagroups200ResponseDataInnerStatesInner> states) {
    this.states = states;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMsagroups200ResponseDataInner getMsagroups200ResponseDataInner = (GetMsagroups200ResponseDataInner) o;
    return Objects.equals(this.msaCode, getMsagroups200ResponseDataInner.msaCode) &&
        Objects.equals(this.msaName, getMsagroups200ResponseDataInner.msaName) &&
        Objects.equals(this.states, getMsagroups200ResponseDataInner.states);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msaCode, msaName, states);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMsagroups200ResponseDataInner {\n");
    sb.append("    msaCode: ").append(toIndentedString(msaCode)).append("\n");
    sb.append("    msaName: ").append(toIndentedString(msaName)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msaCode");
    openapiFields.add("msaName");
    openapiFields.add("states");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("msaCode");
    openapiRequiredFields.add("msaName");
    openapiRequiredFields.add("states");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMsagroups200ResponseDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMsagroups200ResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMsagroups200ResponseDataInner is not found in the empty JSON string", GetMsagroups200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMsagroups200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMsagroups200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetMsagroups200ResponseDataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("msaCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msaCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msaCode").toString()));
      }
      if (!jsonObj.get("msaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msaName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }

      JsonArray jsonArraystates = jsonObj.getAsJsonArray("states");
      // validate the required field `states` (array)
      for (int i = 0; i < jsonArraystates.size(); i++) {
        GetMsagroups200ResponseDataInnerStatesInner.validateJsonElement(jsonArraystates.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMsagroups200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMsagroups200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMsagroups200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMsagroups200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMsagroups200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, GetMsagroups200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMsagroups200ResponseDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMsagroups200ResponseDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMsagroups200ResponseDataInner
   * @throws IOException if the JSON string is invalid with respect to GetMsagroups200ResponseDataInner
   */
  public static GetMsagroups200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMsagroups200ResponseDataInner.class);
  }

  /**
   * Convert an instance of GetMsagroups200ResponseDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

