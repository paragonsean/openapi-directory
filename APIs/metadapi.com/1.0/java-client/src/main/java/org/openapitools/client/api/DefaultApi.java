/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.GetDistance200Response;
import org.openapitools.client.model.GetMsagroups200Response;
import org.openapitools.client.model.GetMsagroupsMsacode200Response;
import org.openapitools.client.model.GetRadius200Response;
import org.openapitools.client.model.GetRadius400Response;
import org.openapitools.client.model.GetRadius401Response;
import org.openapitools.client.model.GetZipcV1401Response;
import org.openapitools.client.model.GetZipcode200Response;
import org.openapitools.client.model.GetZipcode401Response;
import org.openapitools.client.model.GetZipcode403Response;
import org.openapitools.client.model.ZipCodeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDistance
     * @param zipCode1 Zip Code 1 (required)
     * @param zipCode2 Zip Code 2 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistanceCall(String zipCode1, String zipCode2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1/distance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipCode1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode1", zipCode1));
        }

        if (zipCode2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode2", zipCode2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistanceValidateBeforeCall(String zipCode1, String zipCode2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zipCode1' is set
        if (zipCode1 == null) {
            throw new ApiException("Missing the required parameter 'zipCode1' when calling getDistance(Async)");
        }

        // verify the required parameter 'zipCode2' is set
        if (zipCode2 == null) {
            throw new ApiException("Missing the required parameter 'zipCode2' when calling getDistance(Async)");
        }

        return getDistanceCall(zipCode1, zipCode2, _callback);

    }

    /**
     * Distance Between 2 Zip Codes
     * Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2). 
     * @param zipCode1 Zip Code 1 (required)
     * @param zipCode2 Zip Code 2 (required)
     * @return GetDistance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetDistance200Response getDistance(String zipCode1, String zipCode2) throws ApiException {
        ApiResponse<GetDistance200Response> localVarResp = getDistanceWithHttpInfo(zipCode1, zipCode2);
        return localVarResp.getData();
    }

    /**
     * Distance Between 2 Zip Codes
     * Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2). 
     * @param zipCode1 Zip Code 1 (required)
     * @param zipCode2 Zip Code 2 (required)
     * @return ApiResponse&lt;GetDistance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistance200Response> getDistanceWithHttpInfo(String zipCode1, String zipCode2) throws ApiException {
        okhttp3.Call localVarCall = getDistanceValidateBeforeCall(zipCode1, zipCode2, null);
        Type localVarReturnType = new TypeToken<GetDistance200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Distance Between 2 Zip Codes (asynchronously)
     * Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2). 
     * @param zipCode1 Zip Code 1 (required)
     * @param zipCode2 Zip Code 2 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistanceAsync(String zipCode1, String zipCode2, final ApiCallback<GetDistance200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistanceValidateBeforeCall(zipCode1, zipCode2, _callback);
        Type localVarReturnType = new TypeToken<GetDistance200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMsagroups
     * @param limit Number of records to return in each page. Max value: 50. (required)
     * @param offset Offset is the position in the dataset to start retrieval of records. (required)
     * @param stateCode Parameter for state code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMsagroupsCall(Integer limit, Integer offset, String stateCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1/msagroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (stateCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateCode", stateCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMsagroupsValidateBeforeCall(Integer limit, Integer offset, String stateCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getMsagroups(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getMsagroups(Async)");
        }

        return getMsagroupsCall(limit, offset, stateCode, _callback);

    }

    /**
     * List All MSA Groups
     * This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group. 
     * @param limit Number of records to return in each page. Max value: 50. (required)
     * @param offset Offset is the position in the dataset to start retrieval of records. (required)
     * @param stateCode Parameter for state code. (optional)
     * @return GetMsagroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetMsagroups200Response getMsagroups(Integer limit, Integer offset, String stateCode) throws ApiException {
        ApiResponse<GetMsagroups200Response> localVarResp = getMsagroupsWithHttpInfo(limit, offset, stateCode);
        return localVarResp.getData();
    }

    /**
     * List All MSA Groups
     * This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group. 
     * @param limit Number of records to return in each page. Max value: 50. (required)
     * @param offset Offset is the position in the dataset to start retrieval of records. (required)
     * @param stateCode Parameter for state code. (optional)
     * @return ApiResponse&lt;GetMsagroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMsagroups200Response> getMsagroupsWithHttpInfo(Integer limit, Integer offset, String stateCode) throws ApiException {
        okhttp3.Call localVarCall = getMsagroupsValidateBeforeCall(limit, offset, stateCode, null);
        Type localVarReturnType = new TypeToken<GetMsagroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All MSA Groups (asynchronously)
     * This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group. 
     * @param limit Number of records to return in each page. Max value: 50. (required)
     * @param offset Offset is the position in the dataset to start retrieval of records. (required)
     * @param stateCode Parameter for state code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMsagroupsAsync(Integer limit, Integer offset, String stateCode, final ApiCallback<GetMsagroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMsagroupsValidateBeforeCall(limit, offset, stateCode, _callback);
        Type localVarReturnType = new TypeToken<GetMsagroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMsagroupsMsacode
     * @param msaCode 5 digit MSA (Metropolitan Statistical Area) code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMsagroupsMsacodeCall(String msaCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1/msagroups/{msaCode}"
            .replace("{" + "msaCode" + "}", localVarApiClient.escapeString(msaCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMsagroupsMsacodeValidateBeforeCall(String msaCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'msaCode' is set
        if (msaCode == null) {
            throw new ApiException("Missing the required parameter 'msaCode' when calling getMsagroupsMsacode(Async)");
        }

        return getMsagroupsMsacodeCall(msaCode, _callback);

    }

    /**
     * Metro/Micro Statistical Area Details
     * Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
     * @param msaCode 5 digit MSA (Metropolitan Statistical Area) code. (required)
     * @return GetMsagroupsMsacode200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetMsagroupsMsacode200Response getMsagroupsMsacode(String msaCode) throws ApiException {
        ApiResponse<GetMsagroupsMsacode200Response> localVarResp = getMsagroupsMsacodeWithHttpInfo(msaCode);
        return localVarResp.getData();
    }

    /**
     * Metro/Micro Statistical Area Details
     * Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
     * @param msaCode 5 digit MSA (Metropolitan Statistical Area) code. (required)
     * @return ApiResponse&lt;GetMsagroupsMsacode200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMsagroupsMsacode200Response> getMsagroupsMsacodeWithHttpInfo(String msaCode) throws ApiException {
        okhttp3.Call localVarCall = getMsagroupsMsacodeValidateBeforeCall(msaCode, null);
        Type localVarReturnType = new TypeToken<GetMsagroupsMsacode200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metro/Micro Statistical Area Details (asynchronously)
     * Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
     * @param msaCode 5 digit MSA (Metropolitan Statistical Area) code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMsagroupsMsacodeAsync(String msaCode, final ApiCallback<GetMsagroupsMsacode200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMsagroupsMsacodeValidateBeforeCall(msaCode, _callback);
        Type localVarReturnType = new TypeToken<GetMsagroupsMsacode200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRadius
     * @param zipCode 5 Digit US Zip Code (required)
     * @param radius Radius distance.  Max 322 km or 200 mi (required)
     * @param uom Unit of Measure (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRadiusCall(String zipCode, Integer radius, String uom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1/radius";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (uom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uom", uom));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRadiusValidateBeforeCall(String zipCode, Integer radius, String uom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zipCode' is set
        if (zipCode == null) {
            throw new ApiException("Missing the required parameter 'zipCode' when calling getRadius(Async)");
        }

        // verify the required parameter 'radius' is set
        if (radius == null) {
            throw new ApiException("Missing the required parameter 'radius' when calling getRadius(Async)");
        }

        // verify the required parameter 'uom' is set
        if (uom == null) {
            throw new ApiException("Missing the required parameter 'uom' when calling getRadius(Async)");
        }

        return getRadiusCall(zipCode, radius, uom, _callback);

    }

    /**
     * Zip Code Radius
     * Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
     * @param zipCode 5 Digit US Zip Code (required)
     * @param radius Radius distance.  Max 322 km or 200 mi (required)
     * @param uom Unit of Measure (required)
     * @return GetRadius200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public GetRadius200Response getRadius(String zipCode, Integer radius, String uom) throws ApiException {
        ApiResponse<GetRadius200Response> localVarResp = getRadiusWithHttpInfo(zipCode, radius, uom);
        return localVarResp.getData();
    }

    /**
     * Zip Code Radius
     * Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
     * @param zipCode 5 Digit US Zip Code (required)
     * @param radius Radius distance.  Max 322 km or 200 mi (required)
     * @param uom Unit of Measure (required)
     * @return ApiResponse&lt;GetRadius200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRadius200Response> getRadiusWithHttpInfo(String zipCode, Integer radius, String uom) throws ApiException {
        okhttp3.Call localVarCall = getRadiusValidateBeforeCall(zipCode, radius, uom, null);
        Type localVarReturnType = new TypeToken<GetRadius200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Zip Code Radius (asynchronously)
     * Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
     * @param zipCode 5 Digit US Zip Code (required)
     * @param radius Radius distance.  Max 322 km or 200 mi (required)
     * @param uom Unit of Measure (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRadiusAsync(String zipCode, Integer radius, String uom, final ApiCallback<GetRadius200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRadiusValidateBeforeCall(zipCode, radius, uom, _callback);
        Type localVarReturnType = new TypeToken<GetRadius200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZipcV1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipcV1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZipcV1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getZipcV1Call(_callback);

    }

    /**
     * Validate License Key
     * Endpoint used to validate license key only. Returns 204 on Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void getZipcV1() throws ApiException {
        getZipcV1WithHttpInfo();
    }

    /**
     * Validate License Key
     * Endpoint used to validate license key only. Returns 204 on Success
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getZipcV1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getZipcV1ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate License Key (asynchronously)
     * Endpoint used to validate license key only. Returns 204 on Success
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipcV1Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZipcV1ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZipcode
     * @param zipcode 5 Digit US Zip Code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipcodeCall(String zipcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1/zipcodes/{zipcode}"
            .replace("{" + "zipcode" + "}", localVarApiClient.escapeString(zipcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZipcodeValidateBeforeCall(String zipcode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zipcode' is set
        if (zipcode == null) {
            throw new ApiException("Missing the required parameter 'zipcode' when calling getZipcode(Async)");
        }

        return getZipcodeCall(zipcode, _callback);

    }

    /**
     * Zip Code Details
     * Gets the details of a single Zip code. 
     * @param zipcode 5 Digit US Zip Code (required)
     * @return GetZipcode200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public GetZipcode200Response getZipcode(String zipcode) throws ApiException {
        ApiResponse<GetZipcode200Response> localVarResp = getZipcodeWithHttpInfo(zipcode);
        return localVarResp.getData();
    }

    /**
     * Zip Code Details
     * Gets the details of a single Zip code. 
     * @param zipcode 5 Digit US Zip Code (required)
     * @return ApiResponse&lt;GetZipcode200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetZipcode200Response> getZipcodeWithHttpInfo(String zipcode) throws ApiException {
        okhttp3.Call localVarCall = getZipcodeValidateBeforeCall(zipcode, null);
        Type localVarReturnType = new TypeToken<GetZipcode200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Zip Code Details (asynchronously)
     * Gets the details of a single Zip code. 
     * @param zipcode 5 Digit US Zip Code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Quota Exceeded. The error message will display how long in dd:hh:mi:ss for the quota to be reset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipcodeAsync(String zipcode, final ApiCallback<GetZipcode200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZipcodeValidateBeforeCall(zipcode, _callback);
        Type localVarReturnType = new TypeToken<GetZipcode200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZipcodes
     * @param offset Offset is the position in the dataset to start retrieval of records. (optional)
     * @param limit Number of records to return in each page. (optional)
     * @param zipcode 5 Digit Zip Code query parameter. Can have multiple values (separated by comma). (optional)
     * @param uspsMainCityKey Parameter for USPS City / Town key identifier for the main city of the zip code. (optional)
     * @param zipClassificationCode Parameter for zipClassificationCode (optional)
     * @param uspsFacilityCode Parameter for facility code. (optional)
     * @param uspsDeliveryCode Parameter for delivery code. (optional)
     * @param uspsCarrierRouteSortCode Parameter for carrier route sort code. (optional)
     * @param uniqueZipNameInd Parameter for unique zip name indicator. (optional)
     * @param uspsFinanceNumber Parameter for finance number. (optional)
     * @param stateCode Parameter for state code. (optional)
     * @param stateFipsCode Parameter for State FIPS code. (optional)
     * @param countyFipsCode Parameter for county FIPS code. (optional)
     * @param divisionCode Parameter for division code.  (optional)
     * @param regionCode Parameter for region code.  (optional)
     * @param msaCode Parameter for msaCode. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipcodesCall(BigDecimal offset, BigDecimal limit, String zipcode, String uspsMainCityKey, String zipClassificationCode, String uspsFacilityCode, String uspsDeliveryCode, String uspsCarrierRouteSortCode, Boolean uniqueZipNameInd, String uspsFinanceNumber, String stateCode, String stateFipsCode, String countyFipsCode, String divisionCode, String regionCode, String msaCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zipc/v1/zipcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (zipcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipcode", zipcode));
        }

        if (uspsMainCityKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uspsMainCityKey", uspsMainCityKey));
        }

        if (zipClassificationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipClassificationCode", zipClassificationCode));
        }

        if (uspsFacilityCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uspsFacilityCode", uspsFacilityCode));
        }

        if (uspsDeliveryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uspsDeliveryCode", uspsDeliveryCode));
        }

        if (uspsCarrierRouteSortCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uspsCarrierRouteSortCode", uspsCarrierRouteSortCode));
        }

        if (uniqueZipNameInd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueZipNameInd", uniqueZipNameInd));
        }

        if (uspsFinanceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uspsFinanceNumber", uspsFinanceNumber));
        }

        if (stateCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateCode", stateCode));
        }

        if (stateFipsCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateFipsCode", stateFipsCode));
        }

        if (countyFipsCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countyFipsCode", countyFipsCode));
        }

        if (divisionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("divisionCode", divisionCode));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (msaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msaCode", msaCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "subscription-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZipcodesValidateBeforeCall(BigDecimal offset, BigDecimal limit, String zipcode, String uspsMainCityKey, String zipClassificationCode, String uspsFacilityCode, String uspsDeliveryCode, String uspsCarrierRouteSortCode, Boolean uniqueZipNameInd, String uspsFinanceNumber, String stateCode, String stateFipsCode, String countyFipsCode, String divisionCode, String regionCode, String msaCode, final ApiCallback _callback) throws ApiException {
        return getZipcodesCall(offset, limit, zipcode, uspsMainCityKey, zipClassificationCode, uspsFacilityCode, uspsDeliveryCode, uspsCarrierRouteSortCode, uniqueZipNameInd, uspsFinanceNumber, stateCode, stateFipsCode, countyFipsCode, divisionCode, regionCode, msaCode, _callback);

    }

    /**
     * List all Zip Codes
     * Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
     * @param offset Offset is the position in the dataset to start retrieval of records. (optional)
     * @param limit Number of records to return in each page. (optional)
     * @param zipcode 5 Digit Zip Code query parameter. Can have multiple values (separated by comma). (optional)
     * @param uspsMainCityKey Parameter for USPS City / Town key identifier for the main city of the zip code. (optional)
     * @param zipClassificationCode Parameter for zipClassificationCode (optional)
     * @param uspsFacilityCode Parameter for facility code. (optional)
     * @param uspsDeliveryCode Parameter for delivery code. (optional)
     * @param uspsCarrierRouteSortCode Parameter for carrier route sort code. (optional)
     * @param uniqueZipNameInd Parameter for unique zip name indicator. (optional)
     * @param uspsFinanceNumber Parameter for finance number. (optional)
     * @param stateCode Parameter for state code. (optional)
     * @param stateFipsCode Parameter for State FIPS code. (optional)
     * @param countyFipsCode Parameter for county FIPS code. (optional)
     * @param divisionCode Parameter for division code.  (optional)
     * @param regionCode Parameter for region code.  (optional)
     * @param msaCode Parameter for msaCode. (optional)
     * @return ZipCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ZipCodeResponse getZipcodes(BigDecimal offset, BigDecimal limit, String zipcode, String uspsMainCityKey, String zipClassificationCode, String uspsFacilityCode, String uspsDeliveryCode, String uspsCarrierRouteSortCode, Boolean uniqueZipNameInd, String uspsFinanceNumber, String stateCode, String stateFipsCode, String countyFipsCode, String divisionCode, String regionCode, String msaCode) throws ApiException {
        ApiResponse<ZipCodeResponse> localVarResp = getZipcodesWithHttpInfo(offset, limit, zipcode, uspsMainCityKey, zipClassificationCode, uspsFacilityCode, uspsDeliveryCode, uspsCarrierRouteSortCode, uniqueZipNameInd, uspsFinanceNumber, stateCode, stateFipsCode, countyFipsCode, divisionCode, regionCode, msaCode);
        return localVarResp.getData();
    }

    /**
     * List all Zip Codes
     * Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
     * @param offset Offset is the position in the dataset to start retrieval of records. (optional)
     * @param limit Number of records to return in each page. (optional)
     * @param zipcode 5 Digit Zip Code query parameter. Can have multiple values (separated by comma). (optional)
     * @param uspsMainCityKey Parameter for USPS City / Town key identifier for the main city of the zip code. (optional)
     * @param zipClassificationCode Parameter for zipClassificationCode (optional)
     * @param uspsFacilityCode Parameter for facility code. (optional)
     * @param uspsDeliveryCode Parameter for delivery code. (optional)
     * @param uspsCarrierRouteSortCode Parameter for carrier route sort code. (optional)
     * @param uniqueZipNameInd Parameter for unique zip name indicator. (optional)
     * @param uspsFinanceNumber Parameter for finance number. (optional)
     * @param stateCode Parameter for state code. (optional)
     * @param stateFipsCode Parameter for State FIPS code. (optional)
     * @param countyFipsCode Parameter for county FIPS code. (optional)
     * @param divisionCode Parameter for division code.  (optional)
     * @param regionCode Parameter for region code.  (optional)
     * @param msaCode Parameter for msaCode. (optional)
     * @return ApiResponse&lt;ZipCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZipCodeResponse> getZipcodesWithHttpInfo(BigDecimal offset, BigDecimal limit, String zipcode, String uspsMainCityKey, String zipClassificationCode, String uspsFacilityCode, String uspsDeliveryCode, String uspsCarrierRouteSortCode, Boolean uniqueZipNameInd, String uspsFinanceNumber, String stateCode, String stateFipsCode, String countyFipsCode, String divisionCode, String regionCode, String msaCode) throws ApiException {
        okhttp3.Call localVarCall = getZipcodesValidateBeforeCall(offset, limit, zipcode, uspsMainCityKey, zipClassificationCode, uspsFacilityCode, uspsDeliveryCode, uspsCarrierRouteSortCode, uniqueZipNameInd, uspsFinanceNumber, stateCode, stateFipsCode, countyFipsCode, divisionCode, regionCode, msaCode, null);
        Type localVarReturnType = new TypeToken<ZipCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Zip Codes (asynchronously)
     * Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
     * @param offset Offset is the position in the dataset to start retrieval of records. (optional)
     * @param limit Number of records to return in each page. (optional)
     * @param zipcode 5 Digit Zip Code query parameter. Can have multiple values (separated by comma). (optional)
     * @param uspsMainCityKey Parameter for USPS City / Town key identifier for the main city of the zip code. (optional)
     * @param zipClassificationCode Parameter for zipClassificationCode (optional)
     * @param uspsFacilityCode Parameter for facility code. (optional)
     * @param uspsDeliveryCode Parameter for delivery code. (optional)
     * @param uspsCarrierRouteSortCode Parameter for carrier route sort code. (optional)
     * @param uniqueZipNameInd Parameter for unique zip name indicator. (optional)
     * @param uspsFinanceNumber Parameter for finance number. (optional)
     * @param stateCode Parameter for state code. (optional)
     * @param stateFipsCode Parameter for State FIPS code. (optional)
     * @param countyFipsCode Parameter for county FIPS code. (optional)
     * @param divisionCode Parameter for division code.  (optional)
     * @param regionCode Parameter for region code.  (optional)
     * @param msaCode Parameter for msaCode. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipcodesAsync(BigDecimal offset, BigDecimal limit, String zipcode, String uspsMainCityKey, String zipClassificationCode, String uspsFacilityCode, String uspsDeliveryCode, String uspsCarrierRouteSortCode, Boolean uniqueZipNameInd, String uspsFinanceNumber, String stateCode, String stateFipsCode, String countyFipsCode, String divisionCode, String regionCode, String msaCode, final ApiCallback<ZipCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZipcodesValidateBeforeCall(offset, limit, zipcode, uspsMainCityKey, zipClassificationCode, uspsFacilityCode, uspsDeliveryCode, uspsCarrierRouteSortCode, uniqueZipNameInd, uspsFinanceNumber, stateCode, stateFipsCode, countyFipsCode, divisionCode, regionCode, msaCode, _callback);
        Type localVarReturnType = new TypeToken<ZipCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
