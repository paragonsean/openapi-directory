/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDistance200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.826870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDistance200ResponseData {
  public static final String SERIALIZED_NAME_DISTANCE_KM = "distanceKm";
  @SerializedName(SERIALIZED_NAME_DISTANCE_KM)
  private BigDecimal distanceKm;

  public static final String SERIALIZED_NAME_DISTANCE_MI = "distanceMi";
  @SerializedName(SERIALIZED_NAME_DISTANCE_MI)
  private BigDecimal distanceMi;

  public static final String SERIALIZED_NAME_ZIP_CODE1 = "zipCode1";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE1)
  private String zipCode1;

  public static final String SERIALIZED_NAME_ZIP_CODE2 = "zipCode2";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE2)
  private String zipCode2;

  public GetDistance200ResponseData() {
  }

  public GetDistance200ResponseData distanceKm(BigDecimal distanceKm) {
    this.distanceKm = distanceKm;
    return this;
  }

  /**
   * Get distanceKm
   * @return distanceKm
   */
  @javax.annotation.Nonnull
  public BigDecimal getDistanceKm() {
    return distanceKm;
  }

  public void setDistanceKm(BigDecimal distanceKm) {
    this.distanceKm = distanceKm;
  }


  public GetDistance200ResponseData distanceMi(BigDecimal distanceMi) {
    this.distanceMi = distanceMi;
    return this;
  }

  /**
   * Get distanceMi
   * @return distanceMi
   */
  @javax.annotation.Nonnull
  public BigDecimal getDistanceMi() {
    return distanceMi;
  }

  public void setDistanceMi(BigDecimal distanceMi) {
    this.distanceMi = distanceMi;
  }


  public GetDistance200ResponseData zipCode1(String zipCode1) {
    this.zipCode1 = zipCode1;
    return this;
  }

  /**
   * Get zipCode1
   * @return zipCode1
   */
  @javax.annotation.Nonnull
  public String getZipCode1() {
    return zipCode1;
  }

  public void setZipCode1(String zipCode1) {
    this.zipCode1 = zipCode1;
  }


  public GetDistance200ResponseData zipCode2(String zipCode2) {
    this.zipCode2 = zipCode2;
    return this;
  }

  /**
   * Get zipCode2
   * @return zipCode2
   */
  @javax.annotation.Nonnull
  public String getZipCode2() {
    return zipCode2;
  }

  public void setZipCode2(String zipCode2) {
    this.zipCode2 = zipCode2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDistance200ResponseData getDistance200ResponseData = (GetDistance200ResponseData) o;
    return Objects.equals(this.distanceKm, getDistance200ResponseData.distanceKm) &&
        Objects.equals(this.distanceMi, getDistance200ResponseData.distanceMi) &&
        Objects.equals(this.zipCode1, getDistance200ResponseData.zipCode1) &&
        Objects.equals(this.zipCode2, getDistance200ResponseData.zipCode2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distanceKm, distanceMi, zipCode1, zipCode2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDistance200ResponseData {\n");
    sb.append("    distanceKm: ").append(toIndentedString(distanceKm)).append("\n");
    sb.append("    distanceMi: ").append(toIndentedString(distanceMi)).append("\n");
    sb.append("    zipCode1: ").append(toIndentedString(zipCode1)).append("\n");
    sb.append("    zipCode2: ").append(toIndentedString(zipCode2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distanceKm");
    openapiFields.add("distanceMi");
    openapiFields.add("zipCode1");
    openapiFields.add("zipCode2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distanceKm");
    openapiRequiredFields.add("distanceMi");
    openapiRequiredFields.add("zipCode1");
    openapiRequiredFields.add("zipCode2");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDistance200ResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDistance200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDistance200ResponseData is not found in the empty JSON string", GetDistance200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDistance200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDistance200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDistance200ResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("zipCode1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode1").toString()));
      }
      if (!jsonObj.get("zipCode2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDistance200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDistance200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDistance200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDistance200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDistance200ResponseData>() {
           @Override
           public void write(JsonWriter out, GetDistance200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDistance200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDistance200ResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDistance200ResponseData
   * @throws IOException if the JSON string is invalid with respect to GetDistance200ResponseData
   */
  public static GetDistance200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDistance200ResponseData.class);
  }

  /**
   * Convert an instance of GetDistance200ResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

