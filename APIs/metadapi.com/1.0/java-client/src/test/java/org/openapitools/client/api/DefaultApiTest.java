/*
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.GetDistance200Response;
import org.openapitools.client.model.GetMsagroups200Response;
import org.openapitools.client.model.GetMsagroupsMsacode200Response;
import org.openapitools.client.model.GetRadius200Response;
import org.openapitools.client.model.GetRadius400Response;
import org.openapitools.client.model.GetRadius401Response;
import org.openapitools.client.model.GetZipcV1401Response;
import org.openapitools.client.model.GetZipcode200Response;
import org.openapitools.client.model.GetZipcode401Response;
import org.openapitools.client.model.GetZipcode403Response;
import org.openapitools.client.model.ZipCodeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Distance Between 2 Zip Codes
     *
     * Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistanceTest() throws ApiException {
        String zipCode1 = null;
        String zipCode2 = null;
        GetDistance200Response response = api.getDistance(zipCode1, zipCode2);
        // TODO: test validations
    }

    /**
     * List All MSA Groups
     *
     * This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMsagroupsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String stateCode = null;
        GetMsagroups200Response response = api.getMsagroups(limit, offset, stateCode);
        // TODO: test validations
    }

    /**
     * Metro/Micro Statistical Area Details
     *
     * Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMsagroupsMsacodeTest() throws ApiException {
        String msaCode = null;
        GetMsagroupsMsacode200Response response = api.getMsagroupsMsacode(msaCode);
        // TODO: test validations
    }

    /**
     * Zip Code Radius
     *
     * Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRadiusTest() throws ApiException {
        String zipCode = null;
        Integer radius = null;
        String uom = null;
        GetRadius200Response response = api.getRadius(zipCode, radius, uom);
        // TODO: test validations
    }

    /**
     * Validate License Key
     *
     * Endpoint used to validate license key only. Returns 204 on Success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZipcV1Test() throws ApiException {
        api.getZipcV1();
        // TODO: test validations
    }

    /**
     * Zip Code Details
     *
     * Gets the details of a single Zip code. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZipcodeTest() throws ApiException {
        String zipcode = null;
        GetZipcode200Response response = api.getZipcode(zipcode);
        // TODO: test validations
    }

    /**
     * List all Zip Codes
     *
     * Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZipcodesTest() throws ApiException {
        BigDecimal offset = null;
        BigDecimal limit = null;
        String zipcode = null;
        String uspsMainCityKey = null;
        String zipClassificationCode = null;
        String uspsFacilityCode = null;
        String uspsDeliveryCode = null;
        String uspsCarrierRouteSortCode = null;
        Boolean uniqueZipNameInd = null;
        String uspsFinanceNumber = null;
        String stateCode = null;
        String stateFipsCode = null;
        String countyFipsCode = null;
        String divisionCode = null;
        String regionCode = null;
        String msaCode = null;
        ZipCodeResponse response = api.getZipcodes(offset, limit, zipcode, uspsMainCityKey, zipClassificationCode, uspsFacilityCode, uspsDeliveryCode, uspsCarrierRouteSortCode, uniqueZipNameInd, uspsFinanceNumber, stateCode, stateFipsCode, countyFipsCode, divisionCode, regionCode, msaCode);
        // TODO: test validations
    }

}
