/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import GetDistance200Response from '../model/GetDistance200Response';
import GetMsagroups200Response from '../model/GetMsagroups200Response';
import GetMsagroupsMsacode200Response from '../model/GetMsagroupsMsacode200Response';
import GetRadius200Response from '../model/GetRadius200Response';
import GetRadius400Response from '../model/GetRadius400Response';
import GetRadius401Response from '../model/GetRadius401Response';
import GetZipcV1401Response from '../model/GetZipcV1401Response';
import GetZipcode200Response from '../model/GetZipcode200Response';
import GetZipcode401Response from '../model/GetZipcode401Response';
import GetZipcode403Response from '../model/GetZipcode403Response';
import ZipCodeResponse from '../model/ZipCodeResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDistance operation.
     * @callback module:api/DefaultApi~getDistanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDistance200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Distance Between 2 Zip Codes
     * Gets the distance (in miles and kilometers) between 2 zip codes passed as parameters. There are 2 mandatory query parameters (zipCode1 and zipCode2). 
     * @param {String} zipCode1 Zip Code 1
     * @param {String} zipCode2 Zip Code 2
     * @param {module:api/DefaultApi~getDistanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDistance200Response}
     */
    getDistance(zipCode1, zipCode2, callback) {
      let postBody = null;
      // verify the required parameter 'zipCode1' is set
      if (zipCode1 === undefined || zipCode1 === null) {
        throw new Error("Missing the required parameter 'zipCode1' when calling getDistance");
      }
      // verify the required parameter 'zipCode2' is set
      if (zipCode2 === undefined || zipCode2 === null) {
        throw new Error("Missing the required parameter 'zipCode2' when calling getDistance");
      }

      let pathParams = {
      };
      let queryParams = {
        'zipCode1': zipCode1,
        'zipCode2': zipCode2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDistance200Response;
      return this.apiClient.callApi(
        '/zipc/v1/distance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMsagroups operation.
     * @callback module:api/DefaultApi~getMsagroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMsagroups200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All MSA Groups
     * This end point lists all the Metropolitan and Micropolitan Statistical Areas in the United States with the corresponding states and counties that make up the group. 
     * @param {Number} limit Number of records to return in each page. Max value: 50.
     * @param {Number} offset Offset is the position in the dataset to start retrieval of records.
     * @param {Object} opts Optional parameters
     * @param {String} [stateCode] Parameter for state code.
     * @param {module:api/DefaultApi~getMsagroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMsagroups200Response}
     */
    getMsagroups(limit, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getMsagroups");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getMsagroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': limit,
        'offset': offset,
        'stateCode': opts['stateCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMsagroups200Response;
      return this.apiClient.callApi(
        '/zipc/v1/msagroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMsagroupsMsacode operation.
     * @callback module:api/DefaultApi~getMsagroupsMsacodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMsagroupsMsacode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Metro/Micro Statistical Area Details
     * Gets the details of a single Metropolitan Statistical Area code passed as a path parameter.
     * @param {String} msaCode 5 digit MSA (Metropolitan Statistical Area) code.
     * @param {module:api/DefaultApi~getMsagroupsMsacodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMsagroupsMsacode200Response}
     */
    getMsagroupsMsacode(msaCode, callback) {
      let postBody = null;
      // verify the required parameter 'msaCode' is set
      if (msaCode === undefined || msaCode === null) {
        throw new Error("Missing the required parameter 'msaCode' when calling getMsagroupsMsacode");
      }

      let pathParams = {
        'msaCode': msaCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMsagroupsMsacode200Response;
      return this.apiClient.callApi(
        '/zipc/v1/msagroups/{msaCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRadius operation.
     * @callback module:api/DefaultApi~getRadiusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRadius200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Zip Code Radius
     * Endpoint that returns the zip codes that fall within the specified radius of another zip code. The returned zip codes are sorted by distance.
     * @param {String} zipCode 5 Digit US Zip Code
     * @param {Number} radius Radius distance.  Max 322 km or 200 mi
     * @param {module:model/String} uom Unit of Measure
     * @param {module:api/DefaultApi~getRadiusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRadius200Response}
     */
    getRadius(zipCode, radius, uom, callback) {
      let postBody = null;
      // verify the required parameter 'zipCode' is set
      if (zipCode === undefined || zipCode === null) {
        throw new Error("Missing the required parameter 'zipCode' when calling getRadius");
      }
      // verify the required parameter 'radius' is set
      if (radius === undefined || radius === null) {
        throw new Error("Missing the required parameter 'radius' when calling getRadius");
      }
      // verify the required parameter 'uom' is set
      if (uom === undefined || uom === null) {
        throw new Error("Missing the required parameter 'uom' when calling getRadius");
      }

      let pathParams = {
      };
      let queryParams = {
        'zipCode': zipCode,
        'radius': radius,
        'uom': uom
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRadius200Response;
      return this.apiClient.callApi(
        '/zipc/v1/radius', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZipcV1 operation.
     * @callback module:api/DefaultApi~getZipcV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate License Key
     * Endpoint used to validate license key only. Returns 204 on Success
     * @param {module:api/DefaultApi~getZipcV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getZipcV1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/zipc/v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZipcode operation.
     * @callback module:api/DefaultApi~getZipcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetZipcode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Zip Code Details
     * Gets the details of a single Zip code. 
     * @param {String} zipcode 5 Digit US Zip Code
     * @param {module:api/DefaultApi~getZipcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetZipcode200Response}
     */
    getZipcode(zipcode, callback) {
      let postBody = null;
      // verify the required parameter 'zipcode' is set
      if (zipcode === undefined || zipcode === null) {
        throw new Error("Missing the required parameter 'zipcode' when calling getZipcode");
      }

      let pathParams = {
        'zipcode': zipcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetZipcode200Response;
      return this.apiClient.callApi(
        '/zipc/v1/zipcodes/{zipcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZipcodes operation.
     * @callback module:api/DefaultApi~getZipcodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZipCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Zip Codes
     * Returns a list of zip codes. Results are always paginated. Visit the [Zip Code Data API](https://www.metadapi.com/API-Products/API-Product-Details/zip-code-api) product page for information on how to get an API key.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset is the position in the dataset to start retrieval of records.
     * @param {Number} [limit] Number of records to return in each page.
     * @param {String} [zipcode] 5 Digit Zip Code query parameter. Can have multiple values (separated by comma).
     * @param {String} [uspsMainCityKey] Parameter for USPS City / Town key identifier for the main city of the zip code.
     * @param {String} [zipClassificationCode] Parameter for zipClassificationCode
     * @param {String} [uspsFacilityCode] Parameter for facility code.
     * @param {String} [uspsDeliveryCode] Parameter for delivery code.
     * @param {String} [uspsCarrierRouteSortCode] Parameter for carrier route sort code.
     * @param {Boolean} [uniqueZipNameInd] Parameter for unique zip name indicator.
     * @param {String} [uspsFinanceNumber] Parameter for finance number.
     * @param {String} [stateCode] Parameter for state code.
     * @param {String} [stateFipsCode] Parameter for State FIPS code.
     * @param {String} [countyFipsCode] Parameter for county FIPS code.
     * @param {String} [divisionCode] Parameter for division code. 
     * @param {String} [regionCode] Parameter for region code. 
     * @param {String} [msaCode] Parameter for msaCode.
     * @param {module:api/DefaultApi~getZipcodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZipCodeResponse}
     */
    getZipcodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'zipcode': opts['zipcode'],
        'uspsMainCityKey': opts['uspsMainCityKey'],
        'zipClassificationCode': opts['zipClassificationCode'],
        'uspsFacilityCode': opts['uspsFacilityCode'],
        'uspsDeliveryCode': opts['uspsDeliveryCode'],
        'uspsCarrierRouteSortCode': opts['uspsCarrierRouteSortCode'],
        'uniqueZipNameInd': opts['uniqueZipNameInd'],
        'uspsFinanceNumber': opts['uspsFinanceNumber'],
        'stateCode': opts['stateCode'],
        'stateFipsCode': opts['stateFipsCode'],
        'countyFipsCode': opts['countyFipsCode'],
        'divisionCode': opts['divisionCode'],
        'regionCode': opts['regionCode'],
        'msaCode': opts['msaCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['subscription-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZipCodeResponse;
      return this.apiClient.callApi(
        '/zipc/v1/zipcodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
