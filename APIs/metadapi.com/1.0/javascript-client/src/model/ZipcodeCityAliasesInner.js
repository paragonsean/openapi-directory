/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ZipcodeCityAliasesInner model module.
 * @module model/ZipcodeCityAliasesInner
 * @version 1.0
 */
class ZipcodeCityAliasesInner {
    /**
     * Constructs a new <code>ZipcodeCityAliasesInner</code>.
     * @alias module:model/ZipcodeCityAliasesInner
     * @param titleCaseCityName {String} USPS City / Town Name for the zip code.
     * @param uspsCityAbbr {String} Main city abbreviation provided by USPS. Null if not provided. Uppercase.
     * @param uspsCityKey {String} USPS City / Town key identifier city of the zip code.
     * @param uspsCityMailingInd {Boolean} City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
     * @param uspsCityName {String} USPS City / Town Name for the zip code. All uppercase.
     * @param uspsMainCityInd {Boolean} If true, the city name and code is the main zip code city name.  (Preferred USPS city).
     */
    constructor(titleCaseCityName, uspsCityAbbr, uspsCityKey, uspsCityMailingInd, uspsCityName, uspsMainCityInd) { 
        
        ZipcodeCityAliasesInner.initialize(this, titleCaseCityName, uspsCityAbbr, uspsCityKey, uspsCityMailingInd, uspsCityName, uspsMainCityInd);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, titleCaseCityName, uspsCityAbbr, uspsCityKey, uspsCityMailingInd, uspsCityName, uspsMainCityInd) { 
        obj['titleCaseCityName'] = titleCaseCityName;
        obj['uspsCityAbbr'] = uspsCityAbbr;
        obj['uspsCityKey'] = uspsCityKey;
        obj['uspsCityMailingInd'] = uspsCityMailingInd;
        obj['uspsCityName'] = uspsCityName;
        obj['uspsMainCityInd'] = uspsMainCityInd;
    }

    /**
     * Constructs a <code>ZipcodeCityAliasesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZipcodeCityAliasesInner} obj Optional instance to populate.
     * @return {module:model/ZipcodeCityAliasesInner} The populated <code>ZipcodeCityAliasesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZipcodeCityAliasesInner();

            if (data.hasOwnProperty('titleCaseCityName')) {
                obj['titleCaseCityName'] = ApiClient.convertToType(data['titleCaseCityName'], 'String');
            }
            if (data.hasOwnProperty('uspsCityAbbr')) {
                obj['uspsCityAbbr'] = ApiClient.convertToType(data['uspsCityAbbr'], 'String');
            }
            if (data.hasOwnProperty('uspsCityKey')) {
                obj['uspsCityKey'] = ApiClient.convertToType(data['uspsCityKey'], 'String');
            }
            if (data.hasOwnProperty('uspsCityMailingInd')) {
                obj['uspsCityMailingInd'] = ApiClient.convertToType(data['uspsCityMailingInd'], 'Boolean');
            }
            if (data.hasOwnProperty('uspsCityName')) {
                obj['uspsCityName'] = ApiClient.convertToType(data['uspsCityName'], 'String');
            }
            if (data.hasOwnProperty('uspsMainCityInd')) {
                obj['uspsMainCityInd'] = ApiClient.convertToType(data['uspsMainCityInd'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZipcodeCityAliasesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZipcodeCityAliasesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ZipcodeCityAliasesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['titleCaseCityName'] && !(typeof data['titleCaseCityName'] === 'string' || data['titleCaseCityName'] instanceof String)) {
            throw new Error("Expected the field `titleCaseCityName` to be a primitive type in the JSON string but got " + data['titleCaseCityName']);
        }
        // ensure the json data is a string
        if (data['uspsCityAbbr'] && !(typeof data['uspsCityAbbr'] === 'string' || data['uspsCityAbbr'] instanceof String)) {
            throw new Error("Expected the field `uspsCityAbbr` to be a primitive type in the JSON string but got " + data['uspsCityAbbr']);
        }
        // ensure the json data is a string
        if (data['uspsCityKey'] && !(typeof data['uspsCityKey'] === 'string' || data['uspsCityKey'] instanceof String)) {
            throw new Error("Expected the field `uspsCityKey` to be a primitive type in the JSON string but got " + data['uspsCityKey']);
        }
        // ensure the json data is a string
        if (data['uspsCityName'] && !(typeof data['uspsCityName'] === 'string' || data['uspsCityName'] instanceof String)) {
            throw new Error("Expected the field `uspsCityName` to be a primitive type in the JSON string but got " + data['uspsCityName']);
        }

        return true;
    }


}

ZipcodeCityAliasesInner.RequiredProperties = ["titleCaseCityName", "uspsCityAbbr", "uspsCityKey", "uspsCityMailingInd", "uspsCityName", "uspsMainCityInd"];

/**
 * USPS City / Town Name for the zip code.
 * @member {String} titleCaseCityName
 */
ZipcodeCityAliasesInner.prototype['titleCaseCityName'] = undefined;

/**
 * Main city abbreviation provided by USPS. Null if not provided. Uppercase.
 * @member {String} uspsCityAbbr
 */
ZipcodeCityAliasesInner.prototype['uspsCityAbbr'] = undefined;

/**
 * USPS City / Town key identifier city of the zip code.
 * @member {String} uspsCityKey
 */
ZipcodeCityAliasesInner.prototype['uspsCityKey'] = undefined;

/**
 * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
 * @member {Boolean} uspsCityMailingInd
 */
ZipcodeCityAliasesInner.prototype['uspsCityMailingInd'] = undefined;

/**
 * USPS City / Town Name for the zip code. All uppercase.
 * @member {String} uspsCityName
 */
ZipcodeCityAliasesInner.prototype['uspsCityName'] = undefined;

/**
 * If true, the city name and code is the main zip code city name.  (Preferred USPS city).
 * @member {Boolean} uspsMainCityInd
 */
ZipcodeCityAliasesInner.prototype['uspsMainCityInd'] = undefined;






export default ZipcodeCityAliasesInner;

