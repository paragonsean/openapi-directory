/**
 * Zip Code Data API
 * The Zip Code API provides United States zip code data with a comprehensive data model in JSON format. Using REST design, this API can help you build zip validations, city searches, distance calculations, radius searches and many other key functions for your applications.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@metadapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ZipcodeCityAliasesInner from './ZipcodeCityAliasesInner';
import ZipcodeZipCodeStatisticsInner from './ZipcodeZipCodeStatisticsInner';

/**
 * The Zipcode model module.
 * @module model/Zipcode
 * @version 1.0
 */
class Zipcode {
    /**
     * Constructs a new <code>Zipcode</code>.
     * Zip Code Data Model
     * @alias module:model/Zipcode
     * @param cityAliases {Array.<module:model/ZipcodeCityAliasesInner>} Array that contains all the city aliases for the given zip code.
     * @param countyFipsCode {String} FIPS code assigned to the county of the main city of the zip code.
     * @param divisionCode {String} Division Code. Part of the geographical hierarchy of the US provided by the united states census.
     * @param divisionName {String} Division Name. Part of the geographical hierarchy of the US provided by the united states census.
     * @param landAreaKm2 {Number} Zip Code Land Area in square kilometers.
     * @param landAreaMi2 {Number} Zip Code Land area in Square Miles
     * @param msaCode {String} 5 digit MSA (Metropolitan Statistical Area) code.
     * @param msaName {String} Name of the defined MSA code.
     * @param regionCode {String} Region Code. Part of the geographical hierarchy of the US provided by the united states census.
     * @param regionName {String} Region Name. Part of the geographical hierarchy of the US provided by the united states census.
     * @param stateAbbr {String} Abbreviation for state name.
     * @param stateCode {String} Standard 2 character state code.
     * @param stateFipsCode {String} Federal Information Processing Standards 2 digit assigned code.
     * @param stateName {String} State Name
     * @param titleCaseCityName {String} USPS City / Town Name for the main city of the zip code. Title Case Format.
     * @param titleCaseCountyName {String} Main County Name in Title Case
     * @param uniqueZipNameInd {Boolean} True = Unique Zip Code Name. False the zip code name is not unique.
     * @param uspsCarrierRouteRateSortDesc {String} Description for the carrier route code.
     * @param uspsCarrierRouteSortCode {String} Code for the available carrier route.
     * @param uspsCityMailingInd {Boolean} City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
     * @param uspsCountyName {String} Name of the county of the main city for the zip code.
     * @param uspsDeliveryCode {String} Determines if the zip code city has Carrier Routes.
     * @param uspsDeliveryDesc {String} Determines if the zip code city has Carrier Routes.
     * @param uspsFacilityCode {String} Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
     * @param uspsFacilityName {String} USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
     * @param uspsFinanceNumber {String} USPS Provided Finance Number. This code is assigned to postal service facilities.
     * @param uspsMainCityKey {String} USPS City / Town key identifier for the main city of the zip code.
     * @param uspsMainCityName {String} USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.
     * @param waterAreaKm2 {Number} Zip Code water area in Square kilometers.
     * @param waterAreaMi2 {Number} Zip Code Water Area in Square Miles
     * @param zipClassificationCode {String} Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.
     * @param zipClassificationDesc {String} Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.
     * @param zipCode {String} 5 Digit Zip Code. Zone Improvement Plan.
     * @param zipCodeStatistics {Array.<module:model/ZipcodeZipCodeStatisticsInner>} Available statistics by year of the Zip Code.
     */
    constructor(cityAliases, countyFipsCode, divisionCode, divisionName, landAreaKm2, landAreaMi2, msaCode, msaName, regionCode, regionName, stateAbbr, stateCode, stateFipsCode, stateName, titleCaseCityName, titleCaseCountyName, uniqueZipNameInd, uspsCarrierRouteRateSortDesc, uspsCarrierRouteSortCode, uspsCityMailingInd, uspsCountyName, uspsDeliveryCode, uspsDeliveryDesc, uspsFacilityCode, uspsFacilityName, uspsFinanceNumber, uspsMainCityKey, uspsMainCityName, waterAreaKm2, waterAreaMi2, zipClassificationCode, zipClassificationDesc, zipCode, zipCodeStatistics) { 
        
        Zipcode.initialize(this, cityAliases, countyFipsCode, divisionCode, divisionName, landAreaKm2, landAreaMi2, msaCode, msaName, regionCode, regionName, stateAbbr, stateCode, stateFipsCode, stateName, titleCaseCityName, titleCaseCountyName, uniqueZipNameInd, uspsCarrierRouteRateSortDesc, uspsCarrierRouteSortCode, uspsCityMailingInd, uspsCountyName, uspsDeliveryCode, uspsDeliveryDesc, uspsFacilityCode, uspsFacilityName, uspsFinanceNumber, uspsMainCityKey, uspsMainCityName, waterAreaKm2, waterAreaMi2, zipClassificationCode, zipClassificationDesc, zipCode, zipCodeStatistics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cityAliases, countyFipsCode, divisionCode, divisionName, landAreaKm2, landAreaMi2, msaCode, msaName, regionCode, regionName, stateAbbr, stateCode, stateFipsCode, stateName, titleCaseCityName, titleCaseCountyName, uniqueZipNameInd, uspsCarrierRouteRateSortDesc, uspsCarrierRouteSortCode, uspsCityMailingInd, uspsCountyName, uspsDeliveryCode, uspsDeliveryDesc, uspsFacilityCode, uspsFacilityName, uspsFinanceNumber, uspsMainCityKey, uspsMainCityName, waterAreaKm2, waterAreaMi2, zipClassificationCode, zipClassificationDesc, zipCode, zipCodeStatistics) { 
        obj['cityAliases'] = cityAliases;
        obj['countyFipsCode'] = countyFipsCode;
        obj['divisionCode'] = divisionCode;
        obj['divisionName'] = divisionName;
        obj['landAreaKm2'] = landAreaKm2;
        obj['landAreaMi2'] = landAreaMi2;
        obj['msaCode'] = msaCode;
        obj['msaName'] = msaName;
        obj['regionCode'] = regionCode;
        obj['regionName'] = regionName;
        obj['stateAbbr'] = stateAbbr;
        obj['stateCode'] = stateCode;
        obj['stateFipsCode'] = stateFipsCode;
        obj['stateName'] = stateName;
        obj['titleCaseCityName'] = titleCaseCityName;
        obj['titleCaseCountyName'] = titleCaseCountyName;
        obj['uniqueZipNameInd'] = uniqueZipNameInd;
        obj['uspsCarrierRouteRateSortDesc'] = uspsCarrierRouteRateSortDesc;
        obj['uspsCarrierRouteSortCode'] = uspsCarrierRouteSortCode;
        obj['uspsCityMailingInd'] = uspsCityMailingInd;
        obj['uspsCountyName'] = uspsCountyName;
        obj['uspsDeliveryCode'] = uspsDeliveryCode;
        obj['uspsDeliveryDesc'] = uspsDeliveryDesc;
        obj['uspsFacilityCode'] = uspsFacilityCode;
        obj['uspsFacilityName'] = uspsFacilityName;
        obj['uspsFinanceNumber'] = uspsFinanceNumber;
        obj['uspsMainCityKey'] = uspsMainCityKey;
        obj['uspsMainCityName'] = uspsMainCityName;
        obj['waterAreaKm2'] = waterAreaKm2;
        obj['waterAreaMi2'] = waterAreaMi2;
        obj['zipClassificationCode'] = zipClassificationCode;
        obj['zipClassificationDesc'] = zipClassificationDesc;
        obj['zipCode'] = zipCode;
        obj['zipCodeStatistics'] = zipCodeStatistics;
    }

    /**
     * Constructs a <code>Zipcode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Zipcode} obj Optional instance to populate.
     * @return {module:model/Zipcode} The populated <code>Zipcode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Zipcode();

            if (data.hasOwnProperty('cityAliases')) {
                obj['cityAliases'] = ApiClient.convertToType(data['cityAliases'], [ZipcodeCityAliasesInner]);
            }
            if (data.hasOwnProperty('countyFipsCode')) {
                obj['countyFipsCode'] = ApiClient.convertToType(data['countyFipsCode'], 'String');
            }
            if (data.hasOwnProperty('divisionCode')) {
                obj['divisionCode'] = ApiClient.convertToType(data['divisionCode'], 'String');
            }
            if (data.hasOwnProperty('divisionName')) {
                obj['divisionName'] = ApiClient.convertToType(data['divisionName'], 'String');
            }
            if (data.hasOwnProperty('landAreaKm2')) {
                obj['landAreaKm2'] = ApiClient.convertToType(data['landAreaKm2'], 'Number');
            }
            if (data.hasOwnProperty('landAreaMi2')) {
                obj['landAreaMi2'] = ApiClient.convertToType(data['landAreaMi2'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('msaCode')) {
                obj['msaCode'] = ApiClient.convertToType(data['msaCode'], 'String');
            }
            if (data.hasOwnProperty('msaName')) {
                obj['msaName'] = ApiClient.convertToType(data['msaName'], 'String');
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('regionName')) {
                obj['regionName'] = ApiClient.convertToType(data['regionName'], 'String');
            }
            if (data.hasOwnProperty('stateAbbr')) {
                obj['stateAbbr'] = ApiClient.convertToType(data['stateAbbr'], 'String');
            }
            if (data.hasOwnProperty('stateCode')) {
                obj['stateCode'] = ApiClient.convertToType(data['stateCode'], 'String');
            }
            if (data.hasOwnProperty('stateFipsCode')) {
                obj['stateFipsCode'] = ApiClient.convertToType(data['stateFipsCode'], 'String');
            }
            if (data.hasOwnProperty('stateName')) {
                obj['stateName'] = ApiClient.convertToType(data['stateName'], 'String');
            }
            if (data.hasOwnProperty('titleCaseCityName')) {
                obj['titleCaseCityName'] = ApiClient.convertToType(data['titleCaseCityName'], 'String');
            }
            if (data.hasOwnProperty('titleCaseCountyName')) {
                obj['titleCaseCountyName'] = ApiClient.convertToType(data['titleCaseCountyName'], 'String');
            }
            if (data.hasOwnProperty('uniqueZipNameInd')) {
                obj['uniqueZipNameInd'] = ApiClient.convertToType(data['uniqueZipNameInd'], 'Boolean');
            }
            if (data.hasOwnProperty('uspsCarrierRouteRateSortDesc')) {
                obj['uspsCarrierRouteRateSortDesc'] = ApiClient.convertToType(data['uspsCarrierRouteRateSortDesc'], 'String');
            }
            if (data.hasOwnProperty('uspsCarrierRouteSortCode')) {
                obj['uspsCarrierRouteSortCode'] = ApiClient.convertToType(data['uspsCarrierRouteSortCode'], 'String');
            }
            if (data.hasOwnProperty('uspsCityMailingInd')) {
                obj['uspsCityMailingInd'] = ApiClient.convertToType(data['uspsCityMailingInd'], 'Boolean');
            }
            if (data.hasOwnProperty('uspsCountyName')) {
                obj['uspsCountyName'] = ApiClient.convertToType(data['uspsCountyName'], 'String');
            }
            if (data.hasOwnProperty('uspsDeliveryCode')) {
                obj['uspsDeliveryCode'] = ApiClient.convertToType(data['uspsDeliveryCode'], 'String');
            }
            if (data.hasOwnProperty('uspsDeliveryDesc')) {
                obj['uspsDeliveryDesc'] = ApiClient.convertToType(data['uspsDeliveryDesc'], 'String');
            }
            if (data.hasOwnProperty('uspsFacilityCode')) {
                obj['uspsFacilityCode'] = ApiClient.convertToType(data['uspsFacilityCode'], 'String');
            }
            if (data.hasOwnProperty('uspsFacilityName')) {
                obj['uspsFacilityName'] = ApiClient.convertToType(data['uspsFacilityName'], 'String');
            }
            if (data.hasOwnProperty('uspsFinanceNumber')) {
                obj['uspsFinanceNumber'] = ApiClient.convertToType(data['uspsFinanceNumber'], 'String');
            }
            if (data.hasOwnProperty('uspsMainCityKey')) {
                obj['uspsMainCityKey'] = ApiClient.convertToType(data['uspsMainCityKey'], 'String');
            }
            if (data.hasOwnProperty('uspsMainCityName')) {
                obj['uspsMainCityName'] = ApiClient.convertToType(data['uspsMainCityName'], 'String');
            }
            if (data.hasOwnProperty('waterAreaKm2')) {
                obj['waterAreaKm2'] = ApiClient.convertToType(data['waterAreaKm2'], 'Number');
            }
            if (data.hasOwnProperty('waterAreaMi2')) {
                obj['waterAreaMi2'] = ApiClient.convertToType(data['waterAreaMi2'], 'Number');
            }
            if (data.hasOwnProperty('zipClassificationCode')) {
                obj['zipClassificationCode'] = ApiClient.convertToType(data['zipClassificationCode'], 'String');
            }
            if (data.hasOwnProperty('zipClassificationDesc')) {
                obj['zipClassificationDesc'] = ApiClient.convertToType(data['zipClassificationDesc'], 'String');
            }
            if (data.hasOwnProperty('zipCode')) {
                obj['zipCode'] = ApiClient.convertToType(data['zipCode'], 'String');
            }
            if (data.hasOwnProperty('zipCodeStatistics')) {
                obj['zipCodeStatistics'] = ApiClient.convertToType(data['zipCodeStatistics'], [ZipcodeZipCodeStatisticsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Zipcode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Zipcode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Zipcode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['cityAliases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cityAliases'])) {
                throw new Error("Expected the field `cityAliases` to be an array in the JSON data but got " + data['cityAliases']);
            }
            // validate the optional field `cityAliases` (array)
            for (const item of data['cityAliases']) {
                ZipcodeCityAliasesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['countyFipsCode'] && !(typeof data['countyFipsCode'] === 'string' || data['countyFipsCode'] instanceof String)) {
            throw new Error("Expected the field `countyFipsCode` to be a primitive type in the JSON string but got " + data['countyFipsCode']);
        }
        // ensure the json data is a string
        if (data['divisionCode'] && !(typeof data['divisionCode'] === 'string' || data['divisionCode'] instanceof String)) {
            throw new Error("Expected the field `divisionCode` to be a primitive type in the JSON string but got " + data['divisionCode']);
        }
        // ensure the json data is a string
        if (data['divisionName'] && !(typeof data['divisionName'] === 'string' || data['divisionName'] instanceof String)) {
            throw new Error("Expected the field `divisionName` to be a primitive type in the JSON string but got " + data['divisionName']);
        }
        // ensure the json data is a string
        if (data['msaCode'] && !(typeof data['msaCode'] === 'string' || data['msaCode'] instanceof String)) {
            throw new Error("Expected the field `msaCode` to be a primitive type in the JSON string but got " + data['msaCode']);
        }
        // ensure the json data is a string
        if (data['msaName'] && !(typeof data['msaName'] === 'string' || data['msaName'] instanceof String)) {
            throw new Error("Expected the field `msaName` to be a primitive type in the JSON string but got " + data['msaName']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // ensure the json data is a string
        if (data['regionName'] && !(typeof data['regionName'] === 'string' || data['regionName'] instanceof String)) {
            throw new Error("Expected the field `regionName` to be a primitive type in the JSON string but got " + data['regionName']);
        }
        // ensure the json data is a string
        if (data['stateAbbr'] && !(typeof data['stateAbbr'] === 'string' || data['stateAbbr'] instanceof String)) {
            throw new Error("Expected the field `stateAbbr` to be a primitive type in the JSON string but got " + data['stateAbbr']);
        }
        // ensure the json data is a string
        if (data['stateCode'] && !(typeof data['stateCode'] === 'string' || data['stateCode'] instanceof String)) {
            throw new Error("Expected the field `stateCode` to be a primitive type in the JSON string but got " + data['stateCode']);
        }
        // ensure the json data is a string
        if (data['stateFipsCode'] && !(typeof data['stateFipsCode'] === 'string' || data['stateFipsCode'] instanceof String)) {
            throw new Error("Expected the field `stateFipsCode` to be a primitive type in the JSON string but got " + data['stateFipsCode']);
        }
        // ensure the json data is a string
        if (data['stateName'] && !(typeof data['stateName'] === 'string' || data['stateName'] instanceof String)) {
            throw new Error("Expected the field `stateName` to be a primitive type in the JSON string but got " + data['stateName']);
        }
        // ensure the json data is a string
        if (data['titleCaseCityName'] && !(typeof data['titleCaseCityName'] === 'string' || data['titleCaseCityName'] instanceof String)) {
            throw new Error("Expected the field `titleCaseCityName` to be a primitive type in the JSON string but got " + data['titleCaseCityName']);
        }
        // ensure the json data is a string
        if (data['titleCaseCountyName'] && !(typeof data['titleCaseCountyName'] === 'string' || data['titleCaseCountyName'] instanceof String)) {
            throw new Error("Expected the field `titleCaseCountyName` to be a primitive type in the JSON string but got " + data['titleCaseCountyName']);
        }
        // ensure the json data is a string
        if (data['uspsCarrierRouteRateSortDesc'] && !(typeof data['uspsCarrierRouteRateSortDesc'] === 'string' || data['uspsCarrierRouteRateSortDesc'] instanceof String)) {
            throw new Error("Expected the field `uspsCarrierRouteRateSortDesc` to be a primitive type in the JSON string but got " + data['uspsCarrierRouteRateSortDesc']);
        }
        // ensure the json data is a string
        if (data['uspsCarrierRouteSortCode'] && !(typeof data['uspsCarrierRouteSortCode'] === 'string' || data['uspsCarrierRouteSortCode'] instanceof String)) {
            throw new Error("Expected the field `uspsCarrierRouteSortCode` to be a primitive type in the JSON string but got " + data['uspsCarrierRouteSortCode']);
        }
        // ensure the json data is a string
        if (data['uspsCountyName'] && !(typeof data['uspsCountyName'] === 'string' || data['uspsCountyName'] instanceof String)) {
            throw new Error("Expected the field `uspsCountyName` to be a primitive type in the JSON string but got " + data['uspsCountyName']);
        }
        // ensure the json data is a string
        if (data['uspsDeliveryCode'] && !(typeof data['uspsDeliveryCode'] === 'string' || data['uspsDeliveryCode'] instanceof String)) {
            throw new Error("Expected the field `uspsDeliveryCode` to be a primitive type in the JSON string but got " + data['uspsDeliveryCode']);
        }
        // ensure the json data is a string
        if (data['uspsDeliveryDesc'] && !(typeof data['uspsDeliveryDesc'] === 'string' || data['uspsDeliveryDesc'] instanceof String)) {
            throw new Error("Expected the field `uspsDeliveryDesc` to be a primitive type in the JSON string but got " + data['uspsDeliveryDesc']);
        }
        // ensure the json data is a string
        if (data['uspsFacilityCode'] && !(typeof data['uspsFacilityCode'] === 'string' || data['uspsFacilityCode'] instanceof String)) {
            throw new Error("Expected the field `uspsFacilityCode` to be a primitive type in the JSON string but got " + data['uspsFacilityCode']);
        }
        // ensure the json data is a string
        if (data['uspsFacilityName'] && !(typeof data['uspsFacilityName'] === 'string' || data['uspsFacilityName'] instanceof String)) {
            throw new Error("Expected the field `uspsFacilityName` to be a primitive type in the JSON string but got " + data['uspsFacilityName']);
        }
        // ensure the json data is a string
        if (data['uspsFinanceNumber'] && !(typeof data['uspsFinanceNumber'] === 'string' || data['uspsFinanceNumber'] instanceof String)) {
            throw new Error("Expected the field `uspsFinanceNumber` to be a primitive type in the JSON string but got " + data['uspsFinanceNumber']);
        }
        // ensure the json data is a string
        if (data['uspsMainCityKey'] && !(typeof data['uspsMainCityKey'] === 'string' || data['uspsMainCityKey'] instanceof String)) {
            throw new Error("Expected the field `uspsMainCityKey` to be a primitive type in the JSON string but got " + data['uspsMainCityKey']);
        }
        // ensure the json data is a string
        if (data['uspsMainCityName'] && !(typeof data['uspsMainCityName'] === 'string' || data['uspsMainCityName'] instanceof String)) {
            throw new Error("Expected the field `uspsMainCityName` to be a primitive type in the JSON string but got " + data['uspsMainCityName']);
        }
        // ensure the json data is a string
        if (data['zipClassificationCode'] && !(typeof data['zipClassificationCode'] === 'string' || data['zipClassificationCode'] instanceof String)) {
            throw new Error("Expected the field `zipClassificationCode` to be a primitive type in the JSON string but got " + data['zipClassificationCode']);
        }
        // ensure the json data is a string
        if (data['zipClassificationDesc'] && !(typeof data['zipClassificationDesc'] === 'string' || data['zipClassificationDesc'] instanceof String)) {
            throw new Error("Expected the field `zipClassificationDesc` to be a primitive type in the JSON string but got " + data['zipClassificationDesc']);
        }
        // ensure the json data is a string
        if (data['zipCode'] && !(typeof data['zipCode'] === 'string' || data['zipCode'] instanceof String)) {
            throw new Error("Expected the field `zipCode` to be a primitive type in the JSON string but got " + data['zipCode']);
        }
        if (data['zipCodeStatistics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['zipCodeStatistics'])) {
                throw new Error("Expected the field `zipCodeStatistics` to be an array in the JSON data but got " + data['zipCodeStatistics']);
            }
            // validate the optional field `zipCodeStatistics` (array)
            for (const item of data['zipCodeStatistics']) {
                ZipcodeZipCodeStatisticsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Zipcode.RequiredProperties = ["cityAliases", "countyFipsCode", "divisionCode", "divisionName", "landAreaKm2", "landAreaMi2", "msaCode", "msaName", "regionCode", "regionName", "stateAbbr", "stateCode", "stateFipsCode", "stateName", "titleCaseCityName", "titleCaseCountyName", "uniqueZipNameInd", "uspsCarrierRouteRateSortDesc", "uspsCarrierRouteSortCode", "uspsCityMailingInd", "uspsCountyName", "uspsDeliveryCode", "uspsDeliveryDesc", "uspsFacilityCode", "uspsFacilityName", "uspsFinanceNumber", "uspsMainCityKey", "uspsMainCityName", "waterAreaKm2", "waterAreaMi2", "zipClassificationCode", "zipClassificationDesc", "zipCode", "zipCodeStatistics"];

/**
 * Array that contains all the city aliases for the given zip code.
 * @member {Array.<module:model/ZipcodeCityAliasesInner>} cityAliases
 */
Zipcode.prototype['cityAliases'] = undefined;

/**
 * FIPS code assigned to the county of the main city of the zip code.
 * @member {String} countyFipsCode
 */
Zipcode.prototype['countyFipsCode'] = undefined;

/**
 * Division Code. Part of the geographical hierarchy of the US provided by the united states census.
 * @member {String} divisionCode
 */
Zipcode.prototype['divisionCode'] = undefined;

/**
 * Division Name. Part of the geographical hierarchy of the US provided by the united states census.
 * @member {String} divisionName
 */
Zipcode.prototype['divisionName'] = undefined;

/**
 * Zip Code Land Area in square kilometers.
 * @member {Number} landAreaKm2
 */
Zipcode.prototype['landAreaKm2'] = undefined;

/**
 * Zip Code Land area in Square Miles
 * @member {Number} landAreaMi2
 */
Zipcode.prototype['landAreaMi2'] = undefined;

/**
 * Zip Code Latitude
 * @member {Number} latitude
 */
Zipcode.prototype['latitude'] = undefined;

/**
 * Zip Code Longitude
 * @member {Number} longitude
 */
Zipcode.prototype['longitude'] = undefined;

/**
 * 5 digit MSA (Metropolitan Statistical Area) code.
 * @member {String} msaCode
 */
Zipcode.prototype['msaCode'] = undefined;

/**
 * Name of the defined MSA code.
 * @member {String} msaName
 */
Zipcode.prototype['msaName'] = undefined;

/**
 * Region Code. Part of the geographical hierarchy of the US provided by the united states census.
 * @member {String} regionCode
 */
Zipcode.prototype['regionCode'] = undefined;

/**
 * Region Name. Part of the geographical hierarchy of the US provided by the united states census.
 * @member {String} regionName
 */
Zipcode.prototype['regionName'] = undefined;

/**
 * Abbreviation for state name.
 * @member {String} stateAbbr
 */
Zipcode.prototype['stateAbbr'] = undefined;

/**
 * Standard 2 character state code.
 * @member {String} stateCode
 */
Zipcode.prototype['stateCode'] = undefined;

/**
 * Federal Information Processing Standards 2 digit assigned code.
 * @member {String} stateFipsCode
 */
Zipcode.prototype['stateFipsCode'] = undefined;

/**
 * State Name
 * @member {String} stateName
 */
Zipcode.prototype['stateName'] = undefined;

/**
 * USPS City / Town Name for the main city of the zip code. Title Case Format.
 * @member {String} titleCaseCityName
 */
Zipcode.prototype['titleCaseCityName'] = undefined;

/**
 * Main County Name in Title Case
 * @member {String} titleCaseCountyName
 */
Zipcode.prototype['titleCaseCountyName'] = undefined;

/**
 * True = Unique Zip Code Name. False the zip code name is not unique.
 * @member {Boolean} uniqueZipNameInd
 */
Zipcode.prototype['uniqueZipNameInd'] = undefined;

/**
 * Description for the carrier route code.
 * @member {String} uspsCarrierRouteRateSortDesc
 */
Zipcode.prototype['uspsCarrierRouteRateSortDesc'] = undefined;

/**
 * Code for the available carrier route.
 * @member {String} uspsCarrierRouteSortCode
 */
Zipcode.prototype['uspsCarrierRouteSortCode'] = undefined;

/**
 * City names with the City State Mailing Name indicator flag set to True are considered part of a complete and standardized address; city names with the flag set to false  file should not be used in a complete and standardized address.
 * @member {Boolean} uspsCityMailingInd
 */
Zipcode.prototype['uspsCityMailingInd'] = undefined;

/**
 * Name of the county of the main city for the zip code.
 * @member {String} uspsCountyName
 */
Zipcode.prototype['uspsCountyName'] = undefined;

/**
 * Determines if the zip code city has Carrier Routes.
 * @member {String} uspsDeliveryCode
 */
Zipcode.prototype['uspsDeliveryCode'] = undefined;

/**
 * Determines if the zip code city has Carrier Routes.
 * @member {String} uspsDeliveryDesc
 */
Zipcode.prototype['uspsDeliveryDesc'] = undefined;

/**
 * Facility code provided by the USPS. B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
 * @member {String} uspsFacilityCode
 */
Zipcode.prototype['uspsFacilityCode'] = undefined;

/**
 * USPS Facility Name  B=Branch, C=Community Post Office, N = Non-Postal Community Name, former postal facility or place name, P= Post Office, S=Station, U = Urbanization
 * @member {String} uspsFacilityName
 */
Zipcode.prototype['uspsFacilityName'] = undefined;

/**
 * USPS Provided Finance Number. This code is assigned to postal service facilities.
 * @member {String} uspsFinanceNumber
 */
Zipcode.prototype['uspsFinanceNumber'] = undefined;

/**
 * USPS City / Town key identifier for the main city of the zip code.
 * @member {String} uspsMainCityKey
 */
Zipcode.prototype['uspsMainCityKey'] = undefined;

/**
 * USPS City / Town Name for the main city of the zip code. USPS Upper Case Format.
 * @member {String} uspsMainCityName
 */
Zipcode.prototype['uspsMainCityName'] = undefined;

/**
 * Zip Code water area in Square kilometers.
 * @member {Number} waterAreaKm2
 */
Zipcode.prototype['waterAreaKm2'] = undefined;

/**
 * Zip Code Water Area in Square Miles
 * @member {Number} waterAreaMi2
 */
Zipcode.prototype['waterAreaMi2'] = undefined;

/**
 * Code provided by USPS for the type of Zip Code it represents.  P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS),N = Non-Unique Zip.
 * @member {String} zipClassificationCode
 */
Zipcode.prototype['zipClassificationCode'] = undefined;

/**
 * Description of the zip classification code.   P = PO Box Zip, U = Unique Zip, M = APO/FPO Military Zip , null (not provided by USPS), = Non-Unique Zip.
 * @member {String} zipClassificationDesc
 */
Zipcode.prototype['zipClassificationDesc'] = undefined;

/**
 * 5 Digit Zip Code. Zone Improvement Plan.
 * @member {String} zipCode
 */
Zipcode.prototype['zipCode'] = undefined;

/**
 * Available statistics by year of the Zip Code.
 * @member {Array.<module:model/ZipcodeZipCodeStatisticsInner>} zipCodeStatistics
 */
Zipcode.prototype['zipCodeStatistics'] = undefined;






export default Zipcode;

