# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_params import LogParams
from openapi_server import util


class Attributes13(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, _date: datetime=None, params: LogParams=None):
        """Attributes13 - a model defined in OpenAPI

        :param action: The action of this Attributes13.
        :param _date: The _date of this Attributes13.
        :param params: The params of this Attributes13.
        """
        self.openapi_types = {
            'action': str,
            '_date': datetime,
            'params': LogParams
        }

        self.attribute_map = {
            'action': 'action',
            '_date': 'date',
            'params': 'params'
        }

        self._action = action
        self.__date = _date
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes13':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_13 of this Attributes13.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Attributes13.

        The type of action performed on the OSF. See actions section for full list of possible actions.

        :return: The action of this Attributes13.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Attributes13.

        The type of action performed on the OSF. See actions section for full list of possible actions.

        :param action: The action of this Attributes13.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def _date(self):
        """Gets the _date of this Attributes13.

        The date and time at which the log was created, as an iso8601 formatted timestamp.

        :return: The _date of this Attributes13.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Attributes13.

        The date and time at which the log was created, as an iso8601 formatted timestamp.

        :param _date: The _date of this Attributes13.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def params(self):
        """Gets the params of this Attributes13.


        :return: The params of this Attributes13.
        :rtype: LogParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Attributes13.


        :param params: The params of this Attributes13.
        :type params: LogParams
        """

        self._params = params
