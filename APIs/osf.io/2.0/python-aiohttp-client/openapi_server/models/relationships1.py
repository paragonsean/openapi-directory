# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node: str=None, replies: str=None, reports: str=None, target: str=None, user: str=None):
        """Relationships1 - a model defined in OpenAPI

        :param node: The node of this Relationships1.
        :param replies: The replies of this Relationships1.
        :param reports: The reports of this Relationships1.
        :param target: The target of this Relationships1.
        :param user: The user of this Relationships1.
        """
        self.openapi_types = {
            'node': str,
            'replies': str,
            'reports': str,
            'target': str,
            'user': str
        }

        self.attribute_map = {
            'node': 'node',
            'replies': 'replies',
            'reports': 'reports',
            'target': 'target',
            'user': 'user'
        }

        self._node = node
        self._replies = replies
        self._reports = reports
        self._target = target
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships_1 of this Relationships1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node(self):
        """Gets the node of this Relationships1.

        A relationship to the node the comment is on.

        :return: The node of this Relationships1.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Relationships1.

        A relationship to the node the comment is on.

        :param node: The node of this Relationships1.
        :type node: str
        """

        self._node = node

    @property
    def replies(self):
        """Gets the replies of this Relationships1.

        A relationship to the replies to the comment.

        :return: The replies of this Relationships1.
        :rtype: str
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this Relationships1.

        A relationship to the replies to the comment.

        :param replies: The replies of this Relationships1.
        :type replies: str
        """

        self._replies = replies

    @property
    def reports(self):
        """Gets the reports of this Relationships1.

        A relationship to the reports connected to the comment.

        :return: The reports of this Relationships1.
        :rtype: str
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this Relationships1.

        A relationship to the reports connected to the comment.

        :param reports: The reports of this Relationships1.
        :type reports: str
        """

        self._reports = reports

    @property
    def target(self):
        """Gets the target of this Relationships1.

        A relationship to the target of the comment.

        :return: The target of this Relationships1.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Relationships1.

        A relationship to the target of the comment.

        :param target: The target of this Relationships1.
        :type target: str
        """

        self._target = target

    @property
    def user(self):
        """Gets the user of this Relationships1.

        A relationship to the user who created the comment.

        :return: The user of this Relationships1.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Relationships1.

        A relationship to the user who created the comment.

        :param user: The user of this Relationships1.
        :type user: str
        """

        self._user = user
