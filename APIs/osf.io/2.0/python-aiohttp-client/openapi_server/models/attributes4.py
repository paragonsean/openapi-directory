# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_license import NodeLicense
from openapi_server import util


class Attributes4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, current_user_permissions: List[str]=None, datetime_initiated: datetime=None, datetime_updated: datetime=None, description: str=None, has_project: bool=None, node_license: NodeLicense=None, registration_metadata: object=None, registration_responses: object=None, tags: List[str]=None, title: str=None):
        """Attributes4 - a model defined in OpenAPI

        :param category: The category of this Attributes4.
        :param current_user_permissions: The current_user_permissions of this Attributes4.
        :param datetime_initiated: The datetime_initiated of this Attributes4.
        :param datetime_updated: The datetime_updated of this Attributes4.
        :param description: The description of this Attributes4.
        :param has_project: The has_project of this Attributes4.
        :param node_license: The node_license of this Attributes4.
        :param registration_metadata: The registration_metadata of this Attributes4.
        :param registration_responses: The registration_responses of this Attributes4.
        :param tags: The tags of this Attributes4.
        :param title: The title of this Attributes4.
        """
        self.openapi_types = {
            'category': str,
            'current_user_permissions': List[str],
            'datetime_initiated': datetime,
            'datetime_updated': datetime,
            'description': str,
            'has_project': bool,
            'node_license': NodeLicense,
            'registration_metadata': object,
            'registration_responses': object,
            'tags': List[str],
            'title': str
        }

        self.attribute_map = {
            'category': 'category',
            'current_user_permissions': 'current_user_permissions',
            'datetime_initiated': 'datetime_initiated',
            'datetime_updated': 'datetime_updated',
            'description': 'description',
            'has_project': 'has_project',
            'node_license': 'node_license',
            'registration_metadata': 'registration_metadata',
            'registration_responses': 'registration_responses',
            'tags': 'tags',
            'title': 'title'
        }

        self._category = category
        self._current_user_permissions = current_user_permissions
        self._datetime_initiated = datetime_initiated
        self._datetime_updated = datetime_updated
        self._description = description
        self._has_project = has_project
        self._node_license = node_license
        self._registration_metadata = registration_metadata
        self._registration_responses = registration_responses
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_4 of this Attributes4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Attributes4.

        The category of the Draft Registration.

        :return: The category of this Attributes4.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Attributes4.

        The category of the Draft Registration.

        :param category: The category of this Attributes4.
        :type category: str
        """

        self._category = category

    @property
    def current_user_permissions(self):
        """Gets the current_user_permissions of this Attributes4.

        The current users permission level for the Draft Registration.

        :return: The current_user_permissions of this Attributes4.
        :rtype: List[str]
        """
        return self._current_user_permissions

    @current_user_permissions.setter
    def current_user_permissions(self, current_user_permissions):
        """Sets the current_user_permissions of this Attributes4.

        The current users permission level for the Draft Registration.

        :param current_user_permissions: The current_user_permissions of this Attributes4.
        :type current_user_permissions: List[str]
        """

        self._current_user_permissions = current_user_permissions

    @property
    def datetime_initiated(self):
        """Gets the datetime_initiated of this Attributes4.

        The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.

        :return: The datetime_initiated of this Attributes4.
        :rtype: datetime
        """
        return self._datetime_initiated

    @datetime_initiated.setter
    def datetime_initiated(self, datetime_initiated):
        """Sets the datetime_initiated of this Attributes4.

        The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.

        :param datetime_initiated: The datetime_initiated of this Attributes4.
        :type datetime_initiated: datetime
        """

        self._datetime_initiated = datetime_initiated

    @property
    def datetime_updated(self):
        """Gets the datetime_updated of this Attributes4.

        The time at which the draft registration was last updated, as an iso8601 formatted timestamp.

        :return: The datetime_updated of this Attributes4.
        :rtype: datetime
        """
        return self._datetime_updated

    @datetime_updated.setter
    def datetime_updated(self, datetime_updated):
        """Sets the datetime_updated of this Attributes4.

        The time at which the draft registration was last updated, as an iso8601 formatted timestamp.

        :param datetime_updated: The datetime_updated of this Attributes4.
        :type datetime_updated: datetime
        """

        self._datetime_updated = datetime_updated

    @property
    def description(self):
        """Gets the description of this Attributes4.

        The description of the Draft Registration.

        :return: The description of this Attributes4.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attributes4.

        The description of the Draft Registration.

        :param description: The description of this Attributes4.
        :type description: str
        """

        self._description = description

    @property
    def has_project(self):
        """Gets the has_project of this Attributes4.

        This indicates whether a Draft Registration was branched from a project.

        :return: The has_project of this Attributes4.
        :rtype: bool
        """
        return self._has_project

    @has_project.setter
    def has_project(self, has_project):
        """Sets the has_project of this Attributes4.

        This indicates whether a Draft Registration was branched from a project.

        :param has_project: The has_project of this Attributes4.
        :type has_project: bool
        """

        self._has_project = has_project

    @property
    def node_license(self):
        """Gets the node_license of this Attributes4.


        :return: The node_license of this Attributes4.
        :rtype: NodeLicense
        """
        return self._node_license

    @node_license.setter
    def node_license(self, node_license):
        """Sets the node_license of this Attributes4.


        :param node_license: The node_license of this Attributes4.
        :type node_license: NodeLicense
        """

        self._node_license = node_license

    @property
    def registration_metadata(self):
        """Gets the registration_metadata of this Attributes4.

        This is a legacy format for `registration_responses`.

        :return: The registration_metadata of this Attributes4.
        :rtype: object
        """
        return self._registration_metadata

    @registration_metadata.setter
    def registration_metadata(self, registration_metadata):
        """Sets the registration_metadata of this Attributes4.

        This is a legacy format for `registration_responses`.

        :param registration_metadata: The registration_metadata of this Attributes4.
        :type registration_metadata: object
        """

        self._registration_metadata = registration_metadata

    @property
    def registration_responses(self):
        """Gets the registration_responses of this Attributes4.

        A dictionary of question IDs and responses from the registration schema.

        :return: The registration_responses of this Attributes4.
        :rtype: object
        """
        return self._registration_responses

    @registration_responses.setter
    def registration_responses(self, registration_responses):
        """Sets the registration_responses of this Attributes4.

        A dictionary of question IDs and responses from the registration schema.

        :param registration_responses: The registration_responses of this Attributes4.
        :type registration_responses: object
        """

        self._registration_responses = registration_responses

    @property
    def tags(self):
        """Gets the tags of this Attributes4.

        The searchable tags of the Draft Registration.

        :return: The tags of this Attributes4.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Attributes4.

        The searchable tags of the Draft Registration.

        :param tags: The tags of this Attributes4.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Attributes4.

        The title of the Draft Registration.

        :return: The title of this Attributes4.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attributes4.

        The title of the Draft Registration.

        :param title: The title of this Attributes4.
        :type title: str
        """

        self._title = title
