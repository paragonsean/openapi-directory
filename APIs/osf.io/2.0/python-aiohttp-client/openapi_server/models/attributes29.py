# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes29(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_has_auth: bool=None):
        """Attributes29 - a model defined in OpenAPI

        :param user_has_auth: The user_has_auth of this Attributes29.
        """
        self.openapi_types = {
            'user_has_auth': bool
        }

        self.attribute_map = {
            'user_has_auth': 'user_has_auth'
        }

        self._user_has_auth = user_has_auth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes29':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_29 of this Attributes29.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_has_auth(self):
        """Gets the user_has_auth of this Attributes29.

        Whether or not the user has access to this user addon.

        :return: The user_has_auth of this Attributes29.
        :rtype: bool
        """
        return self._user_has_auth

    @user_has_auth.setter
    def user_has_auth(self, user_has_auth):
        """Sets the user_has_auth of this Attributes29.

        Whether or not the user has access to this user addon.

        :param user_has_auth: The user_has_auth of this Attributes29.
        :type user_has_auth: bool
        """
        if user_has_auth is None:
            raise ValueError("Invalid value for `user_has_auth`, must not be `None`")

        self._user_has_auth = user_has_auth
