# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bibliographic_contributors: str=None, citation: str=None, identifiers: str=None, license: str=None, node: str=None, primary_file: str=None, provider: str=None):
        """Relationships11 - a model defined in OpenAPI

        :param bibliographic_contributors: The bibliographic_contributors of this Relationships11.
        :param citation: The citation of this Relationships11.
        :param identifiers: The identifiers of this Relationships11.
        :param license: The license of this Relationships11.
        :param node: The node of this Relationships11.
        :param primary_file: The primary_file of this Relationships11.
        :param provider: The provider of this Relationships11.
        """
        self.openapi_types = {
            'bibliographic_contributors': str,
            'citation': str,
            'identifiers': str,
            'license': str,
            'node': str,
            'primary_file': str,
            'provider': str
        }

        self.attribute_map = {
            'bibliographic_contributors': 'bibliographic_contributors',
            'citation': 'citation',
            'identifiers': 'identifiers',
            'license': 'license',
            'node': 'node',
            'primary_file': 'primary_file',
            'provider': 'provider'
        }

        self._bibliographic_contributors = bibliographic_contributors
        self._citation = citation
        self._identifiers = identifiers
        self._license = license
        self._node = node
        self._primary_file = primary_file
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships_11 of this Relationships11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bibliographic_contributors(self):
        """Gets the bibliographic_contributors of this Relationships11.

        A relationship to the bibliographic contributors that are listed as contributing to this preprint.

        :return: The bibliographic_contributors of this Relationships11.
        :rtype: str
        """
        return self._bibliographic_contributors

    @bibliographic_contributors.setter
    def bibliographic_contributors(self, bibliographic_contributors):
        """Sets the bibliographic_contributors of this Relationships11.

        A relationship to the bibliographic contributors that are listed as contributing to this preprint.

        :param bibliographic_contributors: The bibliographic_contributors of this Relationships11.
        :type bibliographic_contributors: str
        """

        self._bibliographic_contributors = bibliographic_contributors

    @property
    def citation(self):
        """Gets the citation of this Relationships11.

        A relationship to the citation of the preprint.

        :return: The citation of this Relationships11.
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this Relationships11.

        A relationship to the citation of the preprint.

        :param citation: The citation of this Relationships11.
        :type citation: str
        """

        self._citation = citation

    @property
    def identifiers(self):
        """Gets the identifiers of this Relationships11.

        A relationship to the identifiers associated with the preprint.

        :return: The identifiers of this Relationships11.
        :rtype: str
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Relationships11.

        A relationship to the identifiers associated with the preprint.

        :param identifiers: The identifiers of this Relationships11.
        :type identifiers: str
        """

        self._identifiers = identifiers

    @property
    def license(self):
        """Gets the license of this Relationships11.

        A relationship to the license that has been applied to the preprint.

        :return: The license of this Relationships11.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Relationships11.

        A relationship to the license that has been applied to the preprint.

        :param license: The license of this Relationships11.
        :type license: str
        """

        self._license = license

    @property
    def node(self):
        """Gets the node of this Relationships11.

        A relationship to the node that was created for the preprint, or from which the preprint was created.

        :return: The node of this Relationships11.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Relationships11.

        A relationship to the node that was created for the preprint, or from which the preprint was created.

        :param node: The node of this Relationships11.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")

        self._node = node

    @property
    def primary_file(self):
        """Gets the primary_file of this Relationships11.

        A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.

        :return: The primary_file of this Relationships11.
        :rtype: str
        """
        return self._primary_file

    @primary_file.setter
    def primary_file(self, primary_file):
        """Sets the primary_file of this Relationships11.

        A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.

        :param primary_file: The primary_file of this Relationships11.
        :type primary_file: str
        """
        if primary_file is None:
            raise ValueError("Invalid value for `primary_file`, must not be `None`")

        self._primary_file = primary_file

    @property
    def provider(self):
        """Gets the provider of this Relationships11.

        A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.).

        :return: The provider of this Relationships11.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Relationships11.

        A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.).

        :param provider: The provider of this Relationships11.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
