# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes24(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bibliographic: bool=None, index: int=None, permission: str=None, unregistered_contributor: str=None):
        """Attributes24 - a model defined in OpenAPI

        :param bibliographic: The bibliographic of this Attributes24.
        :param index: The index of this Attributes24.
        :param permission: The permission of this Attributes24.
        :param unregistered_contributor: The unregistered_contributor of this Attributes24.
        """
        self.openapi_types = {
            'bibliographic': bool,
            'index': int,
            'permission': str,
            'unregistered_contributor': str
        }

        self.attribute_map = {
            'bibliographic': 'bibliographic',
            'index': 'index',
            'permission': 'permission',
            'unregistered_contributor': 'unregistered_contributor'
        }

        self._bibliographic = bibliographic
        self._index = index
        self._permission = permission
        self._unregistered_contributor = unregistered_contributor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes24':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_24 of this Attributes24.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bibliographic(self):
        """Gets the bibliographic of this Attributes24.

        Whether or not the contributor will be included in citations for the Preprint. The default value is true.

        :return: The bibliographic of this Attributes24.
        :rtype: bool
        """
        return self._bibliographic

    @bibliographic.setter
    def bibliographic(self, bibliographic):
        """Sets the bibliographic of this Attributes24.

        Whether or not the contributor will be included in citations for the Preprint. The default value is true.

        :param bibliographic: The bibliographic of this Attributes24.
        :type bibliographic: bool
        """

        self._bibliographic = bibliographic

    @property
    def index(self):
        """Gets the index of this Attributes24.

        The position of this contributor in the list of Preprint's contributors and in a Preprint's citations.

        :return: The index of this Attributes24.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Attributes24.

        The position of this contributor in the list of Preprint's contributors and in a Preprint's citations.

        :param index: The index of this Attributes24.
        :type index: int
        """

        self._index = index

    @property
    def permission(self):
        """Gets the permission of this Attributes24.

        The permission level of the contributor. The default value is 'write'.

        :return: The permission of this Attributes24.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this Attributes24.

        The permission level of the contributor. The default value is 'write'.

        :param permission: The permission of this Attributes24.
        :type permission: str
        """
        allowed_values = ["read", "write", "admin"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def unregistered_contributor(self):
        """Gets the unregistered_contributor of this Attributes24.

        The assigned name of the contributor if the contributor has not yet claimed their account.

        :return: The unregistered_contributor of this Attributes24.
        :rtype: str
        """
        return self._unregistered_contributor

    @unregistered_contributor.setter
    def unregistered_contributor(self, unregistered_contributor):
        """Sets the unregistered_contributor of this Attributes24.

        The assigned name of the contributor if the contributor has not yet claimed their account.

        :param unregistered_contributor: The unregistered_contributor of this Attributes24.
        :type unregistered_contributor: str
        """

        self._unregistered_contributor = unregistered_contributor
