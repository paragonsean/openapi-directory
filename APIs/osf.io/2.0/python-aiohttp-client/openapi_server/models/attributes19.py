# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes19(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, collection: bool=None, current_user_can_comment: bool=None, current_user_permissions: List[str]=None, date_created: datetime=None, date_modified: datetime=None, date_registered: datetime=None, date_withdrawn: datetime=None, description: str=None, embargo_end_date: datetime=None, fork: bool=None, node_license: str=None, pending_embargo_approval: bool=None, pending_registration_approval: bool=None, pending_withdrawal: bool=None, preprint: bool=None, public: bool=None, registered_meta: str=None, registration: bool=None, registration_supplement: str=None, tags: List[str]=None, template_from: str=None, title: str=None, withdrawal_justification: str=None, withdrawn: bool=None):
        """Attributes19 - a model defined in OpenAPI

        :param category: The category of this Attributes19.
        :param collection: The collection of this Attributes19.
        :param current_user_can_comment: The current_user_can_comment of this Attributes19.
        :param current_user_permissions: The current_user_permissions of this Attributes19.
        :param date_created: The date_created of this Attributes19.
        :param date_modified: The date_modified of this Attributes19.
        :param date_registered: The date_registered of this Attributes19.
        :param date_withdrawn: The date_withdrawn of this Attributes19.
        :param description: The description of this Attributes19.
        :param embargo_end_date: The embargo_end_date of this Attributes19.
        :param fork: The fork of this Attributes19.
        :param node_license: The node_license of this Attributes19.
        :param pending_embargo_approval: The pending_embargo_approval of this Attributes19.
        :param pending_registration_approval: The pending_registration_approval of this Attributes19.
        :param pending_withdrawal: The pending_withdrawal of this Attributes19.
        :param preprint: The preprint of this Attributes19.
        :param public: The public of this Attributes19.
        :param registered_meta: The registered_meta of this Attributes19.
        :param registration: The registration of this Attributes19.
        :param registration_supplement: The registration_supplement of this Attributes19.
        :param tags: The tags of this Attributes19.
        :param template_from: The template_from of this Attributes19.
        :param title: The title of this Attributes19.
        :param withdrawal_justification: The withdrawal_justification of this Attributes19.
        :param withdrawn: The withdrawn of this Attributes19.
        """
        self.openapi_types = {
            'category': str,
            'collection': bool,
            'current_user_can_comment': bool,
            'current_user_permissions': List[str],
            'date_created': datetime,
            'date_modified': datetime,
            'date_registered': datetime,
            'date_withdrawn': datetime,
            'description': str,
            'embargo_end_date': datetime,
            'fork': bool,
            'node_license': str,
            'pending_embargo_approval': bool,
            'pending_registration_approval': bool,
            'pending_withdrawal': bool,
            'preprint': bool,
            'public': bool,
            'registered_meta': str,
            'registration': bool,
            'registration_supplement': str,
            'tags': List[str],
            'template_from': str,
            'title': str,
            'withdrawal_justification': str,
            'withdrawn': bool
        }

        self.attribute_map = {
            'category': 'category',
            'collection': 'collection',
            'current_user_can_comment': 'current_user_can_comment',
            'current_user_permissions': 'current_user_permissions',
            'date_created': 'date_created',
            'date_modified': 'date_modified',
            'date_registered': 'date_registered',
            'date_withdrawn': 'date_withdrawn',
            'description': 'description',
            'embargo_end_date': 'embargo_end_date',
            'fork': 'fork',
            'node_license': 'node_license',
            'pending_embargo_approval': 'pending_embargo_approval',
            'pending_registration_approval': 'pending_registration_approval',
            'pending_withdrawal': 'pending_withdrawal',
            'preprint': 'preprint',
            'public': 'public',
            'registered_meta': 'registered_meta',
            'registration': 'registration',
            'registration_supplement': 'registration_supplement',
            'tags': 'tags',
            'template_from': 'template_from',
            'title': 'title',
            'withdrawal_justification': 'withdrawal_justification',
            'withdrawn': 'withdrawn'
        }

        self._category = category
        self._collection = collection
        self._current_user_can_comment = current_user_can_comment
        self._current_user_permissions = current_user_permissions
        self._date_created = date_created
        self._date_modified = date_modified
        self._date_registered = date_registered
        self._date_withdrawn = date_withdrawn
        self._description = description
        self._embargo_end_date = embargo_end_date
        self._fork = fork
        self._node_license = node_license
        self._pending_embargo_approval = pending_embargo_approval
        self._pending_registration_approval = pending_registration_approval
        self._pending_withdrawal = pending_withdrawal
        self._preprint = preprint
        self._public = public
        self._registered_meta = registered_meta
        self._registration = registration
        self._registration_supplement = registration_supplement
        self._tags = tags
        self._template_from = template_from
        self._title = title
        self._withdrawal_justification = withdrawal_justification
        self._withdrawn = withdrawn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes19':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_19 of this Attributes19.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Attributes19.

        The category of the registered node.

        :return: The category of this Attributes19.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Attributes19.

        The category of the registered node.

        :param category: The category of this Attributes19.
        :type category: str
        """
        allowed_values = ["analysis", "communication", "data", "hypothesis", "instrumentation", "methods and measures", "procedure", "project", "software", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def collection(self):
        """Gets the collection of this Attributes19.

        Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.

        :return: The collection of this Attributes19.
        :rtype: bool
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Attributes19.

        Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.

        :param collection: The collection of this Attributes19.
        :type collection: bool
        """

        self._collection = collection

    @property
    def current_user_can_comment(self):
        """Gets the current_user_can_comment of this Attributes19.

        Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.

        :return: The current_user_can_comment of this Attributes19.
        :rtype: bool
        """
        return self._current_user_can_comment

    @current_user_can_comment.setter
    def current_user_can_comment(self, current_user_can_comment):
        """Sets the current_user_can_comment of this Attributes19.

        Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.

        :param current_user_can_comment: The current_user_can_comment of this Attributes19.
        :type current_user_can_comment: bool
        """

        self._current_user_can_comment = current_user_can_comment

    @property
    def current_user_permissions(self):
        """Gets the current_user_permissions of this Attributes19.

        A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\".

        :return: The current_user_permissions of this Attributes19.
        :rtype: List[str]
        """
        return self._current_user_permissions

    @current_user_permissions.setter
    def current_user_permissions(self, current_user_permissions):
        """Sets the current_user_permissions of this Attributes19.

        A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\".

        :param current_user_permissions: The current_user_permissions of this Attributes19.
        :type current_user_permissions: List[str]
        """

        self._current_user_permissions = current_user_permissions

    @property
    def date_created(self):
        """Gets the date_created of this Attributes19.

        The time at which the registered node was created, as an iso8601 formatted timestamp.

        :return: The date_created of this Attributes19.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Attributes19.

        The time at which the registered node was created, as an iso8601 formatted timestamp.

        :param date_created: The date_created of this Attributes19.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this Attributes19.

        The time at which the registered node was last modified, as an iso8601 formatted timestamp.

        :return: The date_modified of this Attributes19.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Attributes19.

        The time at which the registered node was last modified, as an iso8601 formatted timestamp.

        :param date_modified: The date_modified of this Attributes19.
        :type date_modified: datetime
        """

        self._date_modified = date_modified

    @property
    def date_registered(self):
        """Gets the date_registered of this Attributes19.

        The time at which this registration was created, as an iso8601 formatted timestamp.

        :return: The date_registered of this Attributes19.
        :rtype: datetime
        """
        return self._date_registered

    @date_registered.setter
    def date_registered(self, date_registered):
        """Sets the date_registered of this Attributes19.

        The time at which this registration was created, as an iso8601 formatted timestamp.

        :param date_registered: The date_registered of this Attributes19.
        :type date_registered: datetime
        """

        self._date_registered = date_registered

    @property
    def date_withdrawn(self):
        """Gets the date_withdrawn of this Attributes19.

        The time at which this registration was withdrawn, as an iso8601 formatted timestamp.

        :return: The date_withdrawn of this Attributes19.
        :rtype: datetime
        """
        return self._date_withdrawn

    @date_withdrawn.setter
    def date_withdrawn(self, date_withdrawn):
        """Sets the date_withdrawn of this Attributes19.

        The time at which this registration was withdrawn, as an iso8601 formatted timestamp.

        :param date_withdrawn: The date_withdrawn of this Attributes19.
        :type date_withdrawn: datetime
        """

        self._date_withdrawn = date_withdrawn

    @property
    def description(self):
        """Gets the description of this Attributes19.

        The description of the registered node.

        :return: The description of this Attributes19.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attributes19.

        The description of the registered node.

        :param description: The description of this Attributes19.
        :type description: str
        """

        self._description = description

    @property
    def embargo_end_date(self):
        """Gets the embargo_end_date of this Attributes19.

        The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.

        :return: The embargo_end_date of this Attributes19.
        :rtype: datetime
        """
        return self._embargo_end_date

    @embargo_end_date.setter
    def embargo_end_date(self, embargo_end_date):
        """Sets the embargo_end_date of this Attributes19.

        The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.

        :param embargo_end_date: The embargo_end_date of this Attributes19.
        :type embargo_end_date: datetime
        """

        self._embargo_end_date = embargo_end_date

    @property
    def fork(self):
        """Gets the fork of this Attributes19.

        Whether or not this registration represents a fork of another node.

        :return: The fork of this Attributes19.
        :rtype: bool
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this Attributes19.

        Whether or not this registration represents a fork of another node.

        :param fork: The fork of this Attributes19.
        :type fork: bool
        """

        self._fork = fork

    @property
    def node_license(self):
        """Gets the node_license of this Attributes19.

        A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).

        :return: The node_license of this Attributes19.
        :rtype: str
        """
        return self._node_license

    @node_license.setter
    def node_license(self, node_license):
        """Sets the node_license of this Attributes19.

        A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).

        :param node_license: The node_license of this Attributes19.
        :type node_license: str
        """

        self._node_license = node_license

    @property
    def pending_embargo_approval(self):
        """Gets the pending_embargo_approval of this Attributes19.

        Whether or not the embargo associated with this registration is pending approval from project administrators.

        :return: The pending_embargo_approval of this Attributes19.
        :rtype: bool
        """
        return self._pending_embargo_approval

    @pending_embargo_approval.setter
    def pending_embargo_approval(self, pending_embargo_approval):
        """Sets the pending_embargo_approval of this Attributes19.

        Whether or not the embargo associated with this registration is pending approval from project administrators.

        :param pending_embargo_approval: The pending_embargo_approval of this Attributes19.
        :type pending_embargo_approval: bool
        """

        self._pending_embargo_approval = pending_embargo_approval

    @property
    def pending_registration_approval(self):
        """Gets the pending_registration_approval of this Attributes19.

        Whether or not the registration is pending approval from project administrators.

        :return: The pending_registration_approval of this Attributes19.
        :rtype: bool
        """
        return self._pending_registration_approval

    @pending_registration_approval.setter
    def pending_registration_approval(self, pending_registration_approval):
        """Sets the pending_registration_approval of this Attributes19.

        Whether or not the registration is pending approval from project administrators.

        :param pending_registration_approval: The pending_registration_approval of this Attributes19.
        :type pending_registration_approval: bool
        """

        self._pending_registration_approval = pending_registration_approval

    @property
    def pending_withdrawal(self):
        """Gets the pending_withdrawal of this Attributes19.

        Whether or not the registration is pending approval for withdrawal from project administrators.

        :return: The pending_withdrawal of this Attributes19.
        :rtype: bool
        """
        return self._pending_withdrawal

    @pending_withdrawal.setter
    def pending_withdrawal(self, pending_withdrawal):
        """Sets the pending_withdrawal of this Attributes19.

        Whether or not the registration is pending approval for withdrawal from project administrators.

        :param pending_withdrawal: The pending_withdrawal of this Attributes19.
        :type pending_withdrawal: bool
        """

        self._pending_withdrawal = pending_withdrawal

    @property
    def preprint(self):
        """Gets the preprint of this Attributes19.

        Whether or not a preprint has been created from this node, or if this node was created for a preprint.

        :return: The preprint of this Attributes19.
        :rtype: bool
        """
        return self._preprint

    @preprint.setter
    def preprint(self, preprint):
        """Sets the preprint of this Attributes19.

        Whether or not a preprint has been created from this node, or if this node was created for a preprint.

        :param preprint: The preprint of this Attributes19.
        :type preprint: bool
        """

        self._preprint = preprint

    @property
    def public(self):
        """Gets the public of this Attributes19.

        Whether or not the registration is publicly visible.

        :return: The public of this Attributes19.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Attributes19.

        Whether or not the registration is publicly visible.

        :param public: The public of this Attributes19.
        :type public: bool
        """

        self._public = public

    @property
    def registered_meta(self):
        """Gets the registered_meta of this Attributes19.

        A dictionary with supplemental registration questions and responses.

        :return: The registered_meta of this Attributes19.
        :rtype: str
        """
        return self._registered_meta

    @registered_meta.setter
    def registered_meta(self, registered_meta):
        """Sets the registered_meta of this Attributes19.

        A dictionary with supplemental registration questions and responses.

        :param registered_meta: The registered_meta of this Attributes19.
        :type registered_meta: str
        """

        self._registered_meta = registered_meta

    @property
    def registration(self):
        """Gets the registration of this Attributes19.

        Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.

        :return: The registration of this Attributes19.
        :rtype: bool
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this Attributes19.

        Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.

        :param registration: The registration of this Attributes19.
        :type registration: bool
        """

        self._registration = registration

    @property
    def registration_supplement(self):
        """Gets the registration_supplement of this Attributes19.

        The title of the registration schema this registration conforms to.

        :return: The registration_supplement of this Attributes19.
        :rtype: str
        """
        return self._registration_supplement

    @registration_supplement.setter
    def registration_supplement(self, registration_supplement):
        """Sets the registration_supplement of this Attributes19.

        The title of the registration schema this registration conforms to.

        :param registration_supplement: The registration_supplement of this Attributes19.
        :type registration_supplement: str
        """

        self._registration_supplement = registration_supplement

    @property
    def tags(self):
        """Gets the tags of this Attributes19.

        A list of strings that describe the registered node.

        :return: The tags of this Attributes19.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Attributes19.

        A list of strings that describe the registered node.

        :param tags: The tags of this Attributes19.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def template_from(self):
        """Gets the template_from of this Attributes19.

        The unique ID of the node from which the registered node was templated, if the registered node was created from a template.

        :return: The template_from of this Attributes19.
        :rtype: str
        """
        return self._template_from

    @template_from.setter
    def template_from(self, template_from):
        """Sets the template_from of this Attributes19.

        The unique ID of the node from which the registered node was templated, if the registered node was created from a template.

        :param template_from: The template_from of this Attributes19.
        :type template_from: str
        """

        self._template_from = template_from

    @property
    def title(self):
        """Gets the title of this Attributes19.

        The title of the registered node.

        :return: The title of this Attributes19.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attributes19.

        The title of the registered node.

        :param title: The title of this Attributes19.
        :type title: str
        """

        self._title = title

    @property
    def withdrawal_justification(self):
        """Gets the withdrawal_justification of this Attributes19.

        The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.

        :return: The withdrawal_justification of this Attributes19.
        :rtype: str
        """
        return self._withdrawal_justification

    @withdrawal_justification.setter
    def withdrawal_justification(self, withdrawal_justification):
        """Sets the withdrawal_justification of this Attributes19.

        The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.

        :param withdrawal_justification: The withdrawal_justification of this Attributes19.
        :type withdrawal_justification: str
        """

        self._withdrawal_justification = withdrawal_justification

    @property
    def withdrawn(self):
        """Gets the withdrawn of this Attributes19.

        Whether or not this registration has been withdrawn.

        :return: The withdrawn of this Attributes19.
        :rtype: bool
        """
        return self._withdrawn

    @withdrawn.setter
    def withdrawn(self, withdrawn):
        """Sets the withdrawn of this Attributes19.

        Whether or not this registration has been withdrawn.

        :param withdrawn: The withdrawn of this Attributes19.
        :type withdrawn: bool
        """

        self._withdrawn = withdrawn
