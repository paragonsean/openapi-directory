# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes14(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured: bool=None, enabled: bool=None, external_account_id: str=None, folder_id: str=None, folder_path: str=None, label: str=None, node_has_auth: bool=None, url: str=None):
        """Attributes14 - a model defined in OpenAPI

        :param configured: The configured of this Attributes14.
        :param enabled: The enabled of this Attributes14.
        :param external_account_id: The external_account_id of this Attributes14.
        :param folder_id: The folder_id of this Attributes14.
        :param folder_path: The folder_path of this Attributes14.
        :param label: The label of this Attributes14.
        :param node_has_auth: The node_has_auth of this Attributes14.
        :param url: The url of this Attributes14.
        """
        self.openapi_types = {
            'configured': bool,
            'enabled': bool,
            'external_account_id': str,
            'folder_id': str,
            'folder_path': str,
            'label': str,
            'node_has_auth': bool,
            'url': str
        }

        self.attribute_map = {
            'configured': 'configured',
            'enabled': 'enabled',
            'external_account_id': 'external_account_id',
            'folder_id': 'folder_id',
            'folder_path': 'folder_path',
            'label': 'label',
            'node_has_auth': 'node_has_auth',
            'url': 'url'
        }

        self._configured = configured
        self._enabled = enabled
        self._external_account_id = external_account_id
        self._folder_id = folder_id
        self._folder_path = folder_path
        self._label = label
        self._node_has_auth = node_has_auth
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes14':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_14 of this Attributes14.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured(self):
        """Gets the configured of this Attributes14.

        Whether or not this node has been configured with an addon folder.

        :return: The configured of this Attributes14.
        :rtype: bool
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this Attributes14.

        Whether or not this node has been configured with an addon folder.

        :param configured: The configured of this Attributes14.
        :type configured: bool
        """

        self._configured = configured

    @property
    def enabled(self):
        """Gets the enabled of this Attributes14.

        Whether or not this node has a NodeSettings object associated with it.

        :return: The enabled of this Attributes14.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Attributes14.

        Whether or not this node has a NodeSettings object associated with it.

        :param enabled: The enabled of this Attributes14.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def external_account_id(self):
        """Gets the external_account_id of this Attributes14.

        The ID of the associated node addon account, if any.

        :return: The external_account_id of this Attributes14.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this Attributes14.

        The ID of the associated node addon account, if any.

        :param external_account_id: The external_account_id of this Attributes14.
        :type external_account_id: str
        """

        self._external_account_id = external_account_id

    @property
    def folder_id(self):
        """Gets the folder_id of this Attributes14.

        The ID of the linked folder from the addon provider.

        :return: The folder_id of this Attributes14.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Attributes14.

        The ID of the linked folder from the addon provider.

        :param folder_id: The folder_id of this Attributes14.
        :type folder_id: str
        """

        self._folder_id = folder_id

    @property
    def folder_path(self):
        """Gets the folder_path of this Attributes14.

        The folder path of the linked folder from the addon provider. Google Drive specific

        :return: The folder_path of this Attributes14.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this Attributes14.

        The folder path of the linked folder from the addon provider. Google Drive specific

        :param folder_path: The folder_path of this Attributes14.
        :type folder_path: str
        """

        self._folder_path = folder_path

    @property
    def label(self):
        """Gets the label of this Attributes14.

        A label specific to the addon provider.

        :return: The label of this Attributes14.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Attributes14.

        A label specific to the addon provider.

        :param label: The label of this Attributes14.
        :type label: str
        """

        self._label = label

    @property
    def node_has_auth(self):
        """Gets the node_has_auth of this Attributes14.

        Whether or not this node is fully authorized to use this node addon.

        :return: The node_has_auth of this Attributes14.
        :rtype: bool
        """
        return self._node_has_auth

    @node_has_auth.setter
    def node_has_auth(self, node_has_auth):
        """Sets the node_has_auth of this Attributes14.

        Whether or not this node is fully authorized to use this node addon.

        :param node_has_auth: The node_has_auth of this Attributes14.
        :type node_has_auth: bool
        """

        self._node_has_auth = node_has_auth

    @property
    def url(self):
        """Gets the url of this Attributes14.

        An external link specific to the addon provider.

        :return: The url of this Attributes14.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Attributes14.

        An external link specific to the addon provider.

        :param url: The url of this Attributes14.
        :type url: str
        """

        self._url = url
