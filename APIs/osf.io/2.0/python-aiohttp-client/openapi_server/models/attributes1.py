# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_parsed: datetime=None, short_title: str=None, summary: str=None, title: str=None):
        """Attributes1 - a model defined in OpenAPI

        :param date_parsed: The date_parsed of this Attributes1.
        :param short_title: The short_title of this Attributes1.
        :param summary: The summary of this Attributes1.
        :param title: The title of this Attributes1.
        """
        self.openapi_types = {
            'date_parsed': datetime,
            'short_title': str,
            'summary': str,
            'title': str
        }

        self.attribute_map = {
            'date_parsed': 'date_parsed',
            'short_title': 'short_title',
            'summary': 'summary',
            'title': 'title'
        }

        self._date_parsed = date_parsed
        self._short_title = short_title
        self._summary = summary
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_1 of this Attributes1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_parsed(self):
        """Gets the date_parsed of this Attributes1.

        The time at which the citation style was first parsed, as an iso8601 formatted timestamp.

        :return: The date_parsed of this Attributes1.
        :rtype: datetime
        """
        return self._date_parsed

    @date_parsed.setter
    def date_parsed(self, date_parsed):
        """Sets the date_parsed of this Attributes1.

        The time at which the citation style was first parsed, as an iso8601 formatted timestamp.

        :param date_parsed: The date_parsed of this Attributes1.
        :type date_parsed: datetime
        """
        if date_parsed is None:
            raise ValueError("Invalid value for `date_parsed`, must not be `None`")

        self._date_parsed = date_parsed

    @property
    def short_title(self):
        """Gets the short_title of this Attributes1.

        The short name for the citation style.

        :return: The short_title of this Attributes1.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this Attributes1.

        The short name for the citation style.

        :param short_title: The short_title of this Attributes1.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def summary(self):
        """Gets the summary of this Attributes1.

        The summary of the citation style.

        :return: The summary of this Attributes1.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Attributes1.

        The summary of the citation style.

        :param summary: The summary of this Attributes1.
        :type summary: str
        """

        self._summary = summary

    @property
    def title(self):
        """Gets the title of this Attributes1.

        The official name of the citation style.

        :return: The title of this Attributes1.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attributes1.

        The official name of the citation style.

        :param title: The title of this Attributes1.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
