# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes27(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_type: str=None, display_text: str=None, example_text: str=None, index: int=None, registration_response_key: str=None, required: bool=None, schema_block_group_key: str=None):
        """Attributes27 - a model defined in OpenAPI

        :param block_type: The block_type of this Attributes27.
        :param display_text: The display_text of this Attributes27.
        :param example_text: The example_text of this Attributes27.
        :param index: The index of this Attributes27.
        :param registration_response_key: The registration_response_key of this Attributes27.
        :param required: The required of this Attributes27.
        :param schema_block_group_key: The schema_block_group_key of this Attributes27.
        """
        self.openapi_types = {
            'block_type': str,
            'display_text': str,
            'example_text': str,
            'index': int,
            'registration_response_key': str,
            'required': bool,
            'schema_block_group_key': str
        }

        self.attribute_map = {
            'block_type': 'block_type',
            'display_text': 'display_text',
            'example_text': 'example_text',
            'index': 'index',
            'registration_response_key': 'registration_response_key',
            'required': 'required',
            'schema_block_group_key': 'schema_block_group_key'
        }

        self._block_type = block_type
        self._display_text = display_text
        self._example_text = example_text
        self._index = index
        self._registration_response_key = registration_response_key
        self._required = required
        self._schema_block_group_key = schema_block_group_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes27':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_27 of this Attributes27.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_type(self):
        """Gets the block_type of this Attributes27.

        A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.

        :return: The block_type of this Attributes27.
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type):
        """Sets the block_type of this Attributes27.

        A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.

        :param block_type: The block_type of this Attributes27.
        :type block_type: str
        """
        allowed_values = ["page-heading", "section-heading", "subsection-heading", "paragraph", "question-label", "short-text-input", "long-text-input", "file-input", "contributors-input", "single-select-input", "multi-select-input", "select-input-option", "select-other-option"]  # noqa: E501
        if block_type not in allowed_values:
            raise ValueError(
                "Invalid value for `block_type` ({0}), must be one of {1}"
                .format(block_type, allowed_values)
            )

        self._block_type = block_type

    @property
    def display_text(self):
        """Gets the display_text of this Attributes27.

        The text that will accompany the UI element displayed on this Registration Schema Block.

        :return: The display_text of this Attributes27.
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this Attributes27.

        The text that will accompany the UI element displayed on this Registration Schema Block.

        :param display_text: The display_text of this Attributes27.
        :type display_text: str
        """

        self._display_text = display_text

    @property
    def example_text(self):
        """Gets the example_text of this Attributes27.

        The text that will accompany the UI element displayed on this Registration Schema Block.

        :return: The example_text of this Attributes27.
        :rtype: str
        """
        return self._example_text

    @example_text.setter
    def example_text(self, example_text):
        """Sets the example_text of this Attributes27.

        The text that will accompany the UI element displayed on this Registration Schema Block.

        :param example_text: The example_text of this Attributes27.
        :type example_text: str
        """

        self._example_text = example_text

    @property
    def index(self):
        """Gets the index of this Attributes27.

        Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema.

        :return: The index of this Attributes27.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Attributes27.

        Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema.

        :param index: The index of this Attributes27.
        :type index: int
        """

        self._index = index

    @property
    def registration_response_key(self):
        """Gets the registration_response_key of this Attributes27.

        This string is the the block key for the Registration Schema Block's corresponding block on the Schema Response.

        :return: The registration_response_key of this Attributes27.
        :rtype: str
        """
        return self._registration_response_key

    @registration_response_key.setter
    def registration_response_key(self, registration_response_key):
        """Sets the registration_response_key of this Attributes27.

        This string is the the block key for the Registration Schema Block's corresponding block on the Schema Response.

        :param registration_response_key: The registration_response_key of this Attributes27.
        :type registration_response_key: str
        """

        self._registration_response_key = registration_response_key

    @property
    def required(self):
        """Gets the required of this Attributes27.

        Bool that represents if this field is required for creation of a Schema Response.

        :return: The required of this Attributes27.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Attributes27.

        Bool that represents if this field is required for creation of a Schema Response.

        :param required: The required of this Attributes27.
        :type required: bool
        """

        self._required = required

    @property
    def schema_block_group_key(self):
        """Gets the schema_block_group_key of this Attributes27.

        This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together.

        :return: The schema_block_group_key of this Attributes27.
        :rtype: str
        """
        return self._schema_block_group_key

    @schema_block_group_key.setter
    def schema_block_group_key(self, schema_block_group_key):
        """Sets the schema_block_group_key of this Attributes27.

        This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together.

        :param schema_block_group_key: The schema_block_group_key of this Attributes27.
        :type schema_block_group_key: str
        """

        self._schema_block_group_key = schema_block_group_key
