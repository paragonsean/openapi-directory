# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes10(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, collection: bool=None, current_user_can_comment: bool=None, current_user_permissions: List[str]=None, date_created: datetime=None, date_modified: datetime=None, description: str=None, fork: bool=None, forked_date: datetime=None, node_license: str=None, preprint: bool=None, public: bool=None, registration: bool=None, tags: List[str]=None, template_from: str=None, title: str=None):
        """Attributes10 - a model defined in OpenAPI

        :param category: The category of this Attributes10.
        :param collection: The collection of this Attributes10.
        :param current_user_can_comment: The current_user_can_comment of this Attributes10.
        :param current_user_permissions: The current_user_permissions of this Attributes10.
        :param date_created: The date_created of this Attributes10.
        :param date_modified: The date_modified of this Attributes10.
        :param description: The description of this Attributes10.
        :param fork: The fork of this Attributes10.
        :param forked_date: The forked_date of this Attributes10.
        :param node_license: The node_license of this Attributes10.
        :param preprint: The preprint of this Attributes10.
        :param public: The public of this Attributes10.
        :param registration: The registration of this Attributes10.
        :param tags: The tags of this Attributes10.
        :param template_from: The template_from of this Attributes10.
        :param title: The title of this Attributes10.
        """
        self.openapi_types = {
            'category': str,
            'collection': bool,
            'current_user_can_comment': bool,
            'current_user_permissions': List[str],
            'date_created': datetime,
            'date_modified': datetime,
            'description': str,
            'fork': bool,
            'forked_date': datetime,
            'node_license': str,
            'preprint': bool,
            'public': bool,
            'registration': bool,
            'tags': List[str],
            'template_from': str,
            'title': str
        }

        self.attribute_map = {
            'category': 'category',
            'collection': 'collection',
            'current_user_can_comment': 'current_user_can_comment',
            'current_user_permissions': 'current_user_permissions',
            'date_created': 'date_created',
            'date_modified': 'date_modified',
            'description': 'description',
            'fork': 'fork',
            'forked_date': 'forked_date',
            'node_license': 'node_license',
            'preprint': 'preprint',
            'public': 'public',
            'registration': 'registration',
            'tags': 'tags',
            'template_from': 'template_from',
            'title': 'title'
        }

        self._category = category
        self._collection = collection
        self._current_user_can_comment = current_user_can_comment
        self._current_user_permissions = current_user_permissions
        self._date_created = date_created
        self._date_modified = date_modified
        self._description = description
        self._fork = fork
        self._forked_date = forked_date
        self._node_license = node_license
        self._preprint = preprint
        self._public = public
        self._registration = registration
        self._tags = tags
        self._template_from = template_from
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes10':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_10 of this Attributes10.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Attributes10.

        The category of the node, as selected by project contributors.

        :return: The category of this Attributes10.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Attributes10.

        The category of the node, as selected by project contributors.

        :param category: The category of this Attributes10.
        :type category: str
        """
        allowed_values = ["analysis", "communication", "data", "hypothesis", "instrumentation", "methods and measures", "procedure", "project", "software", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def collection(self):
        """Gets the collection of this Attributes10.

        Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions.

        :return: The collection of this Attributes10.
        :rtype: bool
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Attributes10.

        Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions.

        :param collection: The collection of this Attributes10.
        :type collection: bool
        """

        self._collection = collection

    @property
    def current_user_can_comment(self):
        """Gets the current_user_can_comment of this Attributes10.

        Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.

        :return: The current_user_can_comment of this Attributes10.
        :rtype: bool
        """
        return self._current_user_can_comment

    @current_user_can_comment.setter
    def current_user_can_comment(self, current_user_can_comment):
        """Sets the current_user_can_comment of this Attributes10.

        Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.

        :param current_user_can_comment: The current_user_can_comment of this Attributes10.
        :type current_user_can_comment: bool
        """

        self._current_user_can_comment = current_user_can_comment

    @property
    def current_user_permissions(self):
        """Gets the current_user_permissions of this Attributes10.

        A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\".

        :return: The current_user_permissions of this Attributes10.
        :rtype: List[str]
        """
        return self._current_user_permissions

    @current_user_permissions.setter
    def current_user_permissions(self, current_user_permissions):
        """Sets the current_user_permissions of this Attributes10.

        A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\".

        :param current_user_permissions: The current_user_permissions of this Attributes10.
        :type current_user_permissions: List[str]
        """

        self._current_user_permissions = current_user_permissions

    @property
    def date_created(self):
        """Gets the date_created of this Attributes10.

        The time at which the node was created, as an iso8601 formatted timestamp.

        :return: The date_created of this Attributes10.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Attributes10.

        The time at which the node was created, as an iso8601 formatted timestamp.

        :param date_created: The date_created of this Attributes10.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this Attributes10.

        The time at which the node was last modified, as an iso8601 formatted timestamp.

        :return: The date_modified of this Attributes10.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Attributes10.

        The time at which the node was last modified, as an iso8601 formatted timestamp.

        :param date_modified: The date_modified of this Attributes10.
        :type date_modified: datetime
        """

        self._date_modified = date_modified

    @property
    def description(self):
        """Gets the description of this Attributes10.

        The description of the node.

        :return: The description of this Attributes10.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attributes10.

        The description of the node.

        :param description: The description of this Attributes10.
        :type description: str
        """

        self._description = description

    @property
    def fork(self):
        """Gets the fork of this Attributes10.

        Whether or not this node represents a fork of another node.

        :return: The fork of this Attributes10.
        :rtype: bool
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this Attributes10.

        Whether or not this node represents a fork of another node.

        :param fork: The fork of this Attributes10.
        :type fork: bool
        """

        self._fork = fork

    @property
    def forked_date(self):
        """Gets the forked_date of this Attributes10.

        If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.

        :return: The forked_date of this Attributes10.
        :rtype: datetime
        """
        return self._forked_date

    @forked_date.setter
    def forked_date(self, forked_date):
        """Sets the forked_date of this Attributes10.

        If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.

        :param forked_date: The forked_date of this Attributes10.
        :type forked_date: datetime
        """

        self._forked_date = forked_date

    @property
    def node_license(self):
        """Gets the node_license of this Attributes10.

        A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).

        :return: The node_license of this Attributes10.
        :rtype: str
        """
        return self._node_license

    @node_license.setter
    def node_license(self, node_license):
        """Sets the node_license of this Attributes10.

        A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).

        :param node_license: The node_license of this Attributes10.
        :type node_license: str
        """

        self._node_license = node_license

    @property
    def preprint(self):
        """Gets the preprint of this Attributes10.

        Whether or not a preprint has been created from this node, or if this node was created for a preprint.

        :return: The preprint of this Attributes10.
        :rtype: bool
        """
        return self._preprint

    @preprint.setter
    def preprint(self, preprint):
        """Sets the preprint of this Attributes10.

        Whether or not a preprint has been created from this node, or if this node was created for a preprint.

        :param preprint: The preprint of this Attributes10.
        :type preprint: bool
        """

        self._preprint = preprint

    @property
    def public(self):
        """Gets the public of this Attributes10.

        Whether or not the node is publicly visible. This field is only editable by project administrators.

        :return: The public of this Attributes10.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Attributes10.

        Whether or not the node is publicly visible. This field is only editable by project administrators.

        :param public: The public of this Attributes10.
        :type public: bool
        """

        self._public = public

    @property
    def registration(self):
        """Gets the registration of this Attributes10.

        Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions.

        :return: The registration of this Attributes10.
        :rtype: bool
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this Attributes10.

        Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions.

        :param registration: The registration of this Attributes10.
        :type registration: bool
        """

        self._registration = registration

    @property
    def tags(self):
        """Gets the tags of this Attributes10.

        A list of strings that describe this node, as entered by project contributors.

        :return: The tags of this Attributes10.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Attributes10.

        A list of strings that describe this node, as entered by project contributors.

        :param tags: The tags of this Attributes10.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def template_from(self):
        """Gets the template_from of this Attributes10.

        The unique ID of the node from which this node was templated, if this node was created from a template.

        :return: The template_from of this Attributes10.
        :rtype: str
        """
        return self._template_from

    @template_from.setter
    def template_from(self, template_from):
        """Sets the template_from of this Attributes10.

        The unique ID of the node from which this node was templated, if this node was created from a template.

        :param template_from: The template_from of this Attributes10.
        :type template_from: str
        """

        self._template_from = template_from

    @property
    def title(self):
        """Gets the title of this Attributes10.

        The title of the node.

        :return: The title of this Attributes10.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attributes10.

        The title of the node.

        :param title: The title of this Attributes10.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
