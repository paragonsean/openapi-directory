# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, description: str=None, name: str=None, url: str=None):
        """Attributes - a model defined in OpenAPI

        :param categories: The categories of this Attributes.
        :param description: The description of this Attributes.
        :param name: The name of this Attributes.
        :param url: The url of this Attributes.
        """
        self.openapi_types = {
            'categories': List[str],
            'description': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'description': 'description',
            'name': 'name',
            'url': 'url'
        }

        self._categories = categories
        self._description = description
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes of this Attributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this Attributes.

        List of categories this addon belongs to.

        :return: The categories of this Attributes.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Attributes.

        List of categories this addon belongs to.

        :param categories: The categories of this Attributes.
        :type categories: List[str]
        """
        allowed_values = ["documentation", "storage", "bibliography", "other", "security", "citations"]  # noqa: E501
        if not set(categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this Attributes.

        The description of the service provider.

        :return: The description of this Attributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attributes.

        The description of the service provider.

        :param description: The description of this Attributes.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this Attributes.

        The name of the third-party service provider.

        :return: The name of this Attributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attributes.

        The name of the third-party service provider.

        :param name: The name of this Attributes.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Attributes.

        The URL to the third-party service provider.

        :return: The url of this Attributes.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Attributes.

        The URL to the third-party service provider.

        :param url: The url of this Attributes.
        :type url: str
        """

        self._url = url
