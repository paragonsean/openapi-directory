# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships12(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliated_institutions: str=None, children: str=None, citation: str=None, comments: str=None, contributors: str=None, files: str=None, forks: str=None, identifiers: str=None, linked_nodes: str=None, logs: str=None, node_links: str=None, parent: str=None, registered_by: str=None, registered_from: str=None, registration_schema: str=None, root: str=None, view_only_links: str=None, wikis: str=None):
        """Relationships12 - a model defined in OpenAPI

        :param affiliated_institutions: The affiliated_institutions of this Relationships12.
        :param children: The children of this Relationships12.
        :param citation: The citation of this Relationships12.
        :param comments: The comments of this Relationships12.
        :param contributors: The contributors of this Relationships12.
        :param files: The files of this Relationships12.
        :param forks: The forks of this Relationships12.
        :param identifiers: The identifiers of this Relationships12.
        :param linked_nodes: The linked_nodes of this Relationships12.
        :param logs: The logs of this Relationships12.
        :param node_links: The node_links of this Relationships12.
        :param parent: The parent of this Relationships12.
        :param registered_by: The registered_by of this Relationships12.
        :param registered_from: The registered_from of this Relationships12.
        :param registration_schema: The registration_schema of this Relationships12.
        :param root: The root of this Relationships12.
        :param view_only_links: The view_only_links of this Relationships12.
        :param wikis: The wikis of this Relationships12.
        """
        self.openapi_types = {
            'affiliated_institutions': str,
            'children': str,
            'citation': str,
            'comments': str,
            'contributors': str,
            'files': str,
            'forks': str,
            'identifiers': str,
            'linked_nodes': str,
            'logs': str,
            'node_links': str,
            'parent': str,
            'registered_by': str,
            'registered_from': str,
            'registration_schema': str,
            'root': str,
            'view_only_links': str,
            'wikis': str
        }

        self.attribute_map = {
            'affiliated_institutions': 'affiliated_institutions',
            'children': 'children',
            'citation': 'citation',
            'comments': 'comments',
            'contributors': 'contributors',
            'files': 'files',
            'forks': 'forks',
            'identifiers': 'identifiers',
            'linked_nodes': 'linked_nodes',
            'logs': 'logs',
            'node_links': 'node_links',
            'parent': 'parent',
            'registered_by': 'registered_by',
            'registered_from': 'registered_from',
            'registration_schema': 'registration_schema',
            'root': 'root',
            'view_only_links': 'view_only_links',
            'wikis': 'wikis'
        }

        self._affiliated_institutions = affiliated_institutions
        self._children = children
        self._citation = citation
        self._comments = comments
        self._contributors = contributors
        self._files = files
        self._forks = forks
        self._identifiers = identifiers
        self._linked_nodes = linked_nodes
        self._logs = logs
        self._node_links = node_links
        self._parent = parent
        self._registered_by = registered_by
        self._registered_from = registered_from
        self._registration_schema = registration_schema
        self._root = root
        self._view_only_links = view_only_links
        self._wikis = wikis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships12':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships_12 of this Relationships12.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliated_institutions(self):
        """Gets the affiliated_institutions of this Relationships12.

        A link to the list of institutions this registration is affiliated with.

        :return: The affiliated_institutions of this Relationships12.
        :rtype: str
        """
        return self._affiliated_institutions

    @affiliated_institutions.setter
    def affiliated_institutions(self, affiliated_institutions):
        """Sets the affiliated_institutions of this Relationships12.

        A link to the list of institutions this registration is affiliated with.

        :param affiliated_institutions: The affiliated_institutions of this Relationships12.
        :type affiliated_institutions: str
        """

        self._affiliated_institutions = affiliated_institutions

    @property
    def children(self):
        """Gets the children of this Relationships12.

        A link to the list of the registered node's children (components).

        :return: The children of this Relationships12.
        :rtype: str
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Relationships12.

        A link to the list of the registered node's children (components).

        :param children: The children of this Relationships12.
        :type children: str
        """

        self._children = children

    @property
    def citation(self):
        """Gets the citation of this Relationships12.

        A link to the citation details of this registration.

        :return: The citation of this Relationships12.
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this Relationships12.

        A link to the citation details of this registration.

        :param citation: The citation of this Relationships12.
        :type citation: str
        """

        self._citation = citation

    @property
    def comments(self):
        """Gets the comments of this Relationships12.

        A link to the list of comments on this registration.

        :return: The comments of this Relationships12.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Relationships12.

        A link to the list of comments on this registration.

        :param comments: The comments of this Relationships12.
        :type comments: str
        """

        self._comments = comments

    @property
    def contributors(self):
        """Gets the contributors of this Relationships12.

        A link to the list of contributors on this registration.

        :return: The contributors of this Relationships12.
        :rtype: str
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this Relationships12.

        A link to the list of contributors on this registration.

        :param contributors: The contributors of this Relationships12.
        :type contributors: str
        """

        self._contributors = contributors

    @property
    def files(self):
        """Gets the files of this Relationships12.

        A link to the list of storage providers that have been enabled on this registration.

        :return: The files of this Relationships12.
        :rtype: str
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Relationships12.

        A link to the list of storage providers that have been enabled on this registration.

        :param files: The files of this Relationships12.
        :type files: str
        """

        self._files = files

    @property
    def forks(self):
        """Gets the forks of this Relationships12.

        A link to the list of nodes that are forks of this registration.

        :return: The forks of this Relationships12.
        :rtype: str
        """
        return self._forks

    @forks.setter
    def forks(self, forks):
        """Sets the forks of this Relationships12.

        A link to the list of nodes that are forks of this registration.

        :param forks: The forks of this Relationships12.
        :type forks: str
        """

        self._forks = forks

    @property
    def identifiers(self):
        """Gets the identifiers of this Relationships12.

        A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers).

        :return: The identifiers of this Relationships12.
        :rtype: str
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Relationships12.

        A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers).

        :param identifiers: The identifiers of this Relationships12.
        :type identifiers: str
        """

        self._identifiers = identifiers

    @property
    def linked_nodes(self):
        """Gets the linked_nodes of this Relationships12.

        A link to the list of nodes that are linked to this registration.

        :return: The linked_nodes of this Relationships12.
        :rtype: str
        """
        return self._linked_nodes

    @linked_nodes.setter
    def linked_nodes(self, linked_nodes):
        """Sets the linked_nodes of this Relationships12.

        A link to the list of nodes that are linked to this registration.

        :param linked_nodes: The linked_nodes of this Relationships12.
        :type linked_nodes: str
        """

        self._linked_nodes = linked_nodes

    @property
    def logs(self):
        """Gets the logs of this Relationships12.

        A link to the list of log actions pertaining to this registration.

        :return: The logs of this Relationships12.
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Relationships12.

        A link to the list of log actions pertaining to this registration.

        :param logs: The logs of this Relationships12.
        :type logs: str
        """

        self._logs = logs

    @property
    def node_links(self):
        """Gets the node_links of this Relationships12.

        A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead.

        :return: The node_links of this Relationships12.
        :rtype: str
        """
        return self._node_links

    @node_links.setter
    def node_links(self, node_links):
        """Sets the node_links of this Relationships12.

        A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead.

        :param node_links: The node_links of this Relationships12.
        :type node_links: str
        """

        self._node_links = node_links

    @property
    def parent(self):
        """Gets the parent of this Relationships12.

        A link to the node that is the direct parent of the current registration, if the current registration is a child registration.

        :return: The parent of this Relationships12.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Relationships12.

        A link to the node that is the direct parent of the current registration, if the current registration is a child registration.

        :param parent: The parent of this Relationships12.
        :type parent: str
        """

        self._parent = parent

    @property
    def registered_by(self):
        """Gets the registered_by of this Relationships12.

        A link to the user that initiated this registration.

        :return: The registered_by of this Relationships12.
        :rtype: str
        """
        return self._registered_by

    @registered_by.setter
    def registered_by(self, registered_by):
        """Sets the registered_by of this Relationships12.

        A link to the user that initiated this registration.

        :param registered_by: The registered_by of this Relationships12.
        :type registered_by: str
        """

        self._registered_by = registered_by

    @property
    def registered_from(self):
        """Gets the registered_from of this Relationships12.

        A link to the node that this registration was registered from.

        :return: The registered_from of this Relationships12.
        :rtype: str
        """
        return self._registered_from

    @registered_from.setter
    def registered_from(self, registered_from):
        """Sets the registered_from of this Relationships12.

        A link to the node that this registration was registered from.

        :param registered_from: The registered_from of this Relationships12.
        :type registered_from: str
        """

        self._registered_from = registered_from

    @property
    def registration_schema(self):
        """Gets the registration_schema of this Relationships12.

        A link to the metaschema that this registration conforms to.

        :return: The registration_schema of this Relationships12.
        :rtype: str
        """
        return self._registration_schema

    @registration_schema.setter
    def registration_schema(self, registration_schema):
        """Sets the registration_schema of this Relationships12.

        A link to the metaschema that this registration conforms to.

        :param registration_schema: The registration_schema of this Relationships12.
        :type registration_schema: str
        """

        self._registration_schema = registration_schema

    @property
    def root(self):
        """Gets the root of this Relationships12.

        A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration.

        :return: The root of this Relationships12.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Relationships12.

        A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration.

        :param root: The root of this Relationships12.
        :type root: str
        """

        self._root = root

    @property
    def view_only_links(self):
        """Gets the view_only_links of this Relationships12.

        A link to the list of view only links that have been created for this registration.

        :return: The view_only_links of this Relationships12.
        :rtype: str
        """
        return self._view_only_links

    @view_only_links.setter
    def view_only_links(self, view_only_links):
        """Sets the view_only_links of this Relationships12.

        A link to the list of view only links that have been created for this registration.

        :param view_only_links: The view_only_links of this Relationships12.
        :type view_only_links: str
        """

        self._view_only_links = view_only_links

    @property
    def wikis(self):
        """Gets the wikis of this Relationships12.

        A link to the list of wiki pages for this registration.

        :return: The wikis of this Relationships12.
        :rtype: str
        """
        return self._wikis

    @wikis.setter
    def wikis(self, wikis):
        """Sets the wikis of this Relationships12.

        A link to the list of wiki pages for this registration.

        :param wikis: The wikis of this Relationships12.
        :type wikis: str
        """

        self._wikis = wikis
