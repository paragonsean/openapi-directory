# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships14(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, node: str=None, user: str=None):
        """Relationships14 - a model defined in OpenAPI

        :param comments: The comments of this Relationships14.
        :param node: The node of this Relationships14.
        :param user: The user of this Relationships14.
        """
        self.openapi_types = {
            'comments': str,
            'node': str,
            'user': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'node': 'node',
            'user': 'user'
        }

        self._comments = comments
        self._node = node
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships14':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships_14 of this Relationships14.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this Relationships14.

        A relationship to the comments related to this wiki.

        :return: The comments of this Relationships14.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Relationships14.

        A relationship to the comments related to this wiki.

        :param comments: The comments of this Relationships14.
        :type comments: str
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def node(self):
        """Gets the node of this Relationships14.

        A relationship to the associated node.

        :return: The node of this Relationships14.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Relationships14.

        A relationship to the associated node.

        :param node: The node of this Relationships14.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")

        self._node = node

    @property
    def user(self):
        """Gets the user of this Relationships14.

        A relationship to the user associated with this wiki.

        :return: The user of this Relationships14.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Relationships14.

        A relationship to the user associated with this wiki.

        :param user: The user of this Relationships14.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
