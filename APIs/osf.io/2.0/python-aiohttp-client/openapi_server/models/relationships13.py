# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships13(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator: str=None, nodes: str=None):
        """Relationships13 - a model defined in OpenAPI

        :param creator: The creator of this Relationships13.
        :param nodes: The nodes of this Relationships13.
        """
        self.openapi_types = {
            'creator': str,
            'nodes': str
        }

        self.attribute_map = {
            'creator': 'creator',
            'nodes': 'nodes'
        }

        self._creator = creator
        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships13':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships_13 of this Relationships13.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator(self):
        """Gets the creator of this Relationships13.

        A relationship to the user who created this view only link.

        :return: The creator of this Relationships13.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Relationships13.

        A relationship to the user who created this view only link.

        :param creator: The creator of this Relationships13.
        :type creator: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def nodes(self):
        """Gets the nodes of this Relationships13.

        A relationship to the nodes which this view only link gives read-only access to.

        :return: The nodes of this Relationships13.
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Relationships13.

        A relationship to the nodes which this view only link gives read-only access to.

        :param nodes: The nodes of this Relationships13.
        :type nodes: str
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")

        self._nodes = nodes
