# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships9(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, linked_node: str=None, node: str=None, original_node: str=None, template_node: str=None, user: str=None):
        """Relationships9 - a model defined in OpenAPI

        :param linked_node: The linked_node of this Relationships9.
        :param node: The node of this Relationships9.
        :param original_node: The original_node of this Relationships9.
        :param template_node: The template_node of this Relationships9.
        :param user: The user of this Relationships9.
        """
        self.openapi_types = {
            'linked_node': str,
            'node': str,
            'original_node': str,
            'template_node': str,
            'user': str
        }

        self.attribute_map = {
            'linked_node': 'linked_node',
            'node': 'node',
            'original_node': 'original_node',
            'template_node': 'template_node',
            'user': 'user'
        }

        self._linked_node = linked_node
        self._node = node
        self._original_node = original_node
        self._template_node = template_node
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships9':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships_9 of this Relationships9.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def linked_node(self):
        """Gets the linked_node of this Relationships9.

        A relationship to the node linked to this log.

        :return: The linked_node of this Relationships9.
        :rtype: str
        """
        return self._linked_node

    @linked_node.setter
    def linked_node(self, linked_node):
        """Sets the linked_node of this Relationships9.

        A relationship to the node linked to this log.

        :param linked_node: The linked_node of this Relationships9.
        :type linked_node: str
        """

        self._linked_node = linked_node

    @property
    def node(self):
        """Gets the node of this Relationships9.

        A relationship to the node associated with this log.

        :return: The node of this Relationships9.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Relationships9.

        A relationship to the node associated with this log.

        :param node: The node of this Relationships9.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")

        self._node = node

    @property
    def original_node(self):
        """Gets the original_node of this Relationships9.

        A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.

        :return: The original_node of this Relationships9.
        :rtype: str
        """
        return self._original_node

    @original_node.setter
    def original_node(self, original_node):
        """Sets the original_node of this Relationships9.

        A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.

        :param original_node: The original_node of this Relationships9.
        :type original_node: str
        """

        self._original_node = original_node

    @property
    def template_node(self):
        """Gets the template_node of this Relationships9.

        A relationship to the node used as a template for this log.

        :return: The template_node of this Relationships9.
        :rtype: str
        """
        return self._template_node

    @template_node.setter
    def template_node(self, template_node):
        """Sets the template_node of this Relationships9.

        A relationship to the node used as a template for this log.

        :param template_node: The template_node of this Relationships9.
        :type template_node: str
        """

        self._template_node = template_node

    @property
    def user(self):
        """Gets the user of this Relationships9.

        A relationship to the user who performed the log action.

        :return: The user of this Relationships9.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Relationships9.

        A relationship to the user who performed the log action.

        :param user: The user of this Relationships9.
        :type user: str
        """

        self._user = user
