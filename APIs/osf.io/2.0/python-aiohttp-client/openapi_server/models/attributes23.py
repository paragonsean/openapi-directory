# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes23(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_count: int=None, parents: List[str]=None, text: str=None):
        """Attributes23 - a model defined in OpenAPI

        :param child_count: The child_count of this Attributes23.
        :param parents: The parents of this Attributes23.
        :param text: The text of this Attributes23.
        """
        self.openapi_types = {
            'child_count': int,
            'parents': List[str],
            'text': str
        }

        self.attribute_map = {
            'child_count': 'child_count',
            'parents': 'parents',
            'text': 'text'
        }

        self._child_count = child_count
        self._parents = parents
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes23':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_23 of this Attributes23.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_count(self):
        """Gets the child_count of this Attributes23.

        The number of children this taxonomy contains.

        :return: The child_count of this Attributes23.
        :rtype: int
        """
        return self._child_count

    @child_count.setter
    def child_count(self, child_count):
        """Sets the child_count of this Attributes23.

        The number of children this taxonomy contains.

        :param child_count: The child_count of this Attributes23.
        :type child_count: int
        """

        self._child_count = child_count

    @property
    def parents(self):
        """Gets the parents of this Attributes23.

        An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents

        :return: The parents of this Attributes23.
        :rtype: List[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this Attributes23.

        An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents

        :param parents: The parents of this Attributes23.
        :type parents: List[str]
        """

        self._parents = parents

    @property
    def text(self):
        """Gets the text of this Attributes23.

        The text name of the taxonomy

        :return: The text of this Attributes23.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Attributes23.

        The text name of the taxonomy

        :param text: The text of this Attributes23.
        :type text: str
        """

        self._text = text
