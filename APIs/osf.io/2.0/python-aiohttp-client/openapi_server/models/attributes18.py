# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes18(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_created: datetime=None, date_modified: datetime=None, date_published: datetime=None, doi: str=None, is_preprint_orphan: bool=None, license_record: str=None, subjects: List[str]=None):
        """Attributes18 - a model defined in OpenAPI

        :param date_created: The date_created of this Attributes18.
        :param date_modified: The date_modified of this Attributes18.
        :param date_published: The date_published of this Attributes18.
        :param doi: The doi of this Attributes18.
        :param is_preprint_orphan: The is_preprint_orphan of this Attributes18.
        :param license_record: The license_record of this Attributes18.
        :param subjects: The subjects of this Attributes18.
        """
        self.openapi_types = {
            'date_created': datetime,
            'date_modified': datetime,
            'date_published': datetime,
            'doi': str,
            'is_preprint_orphan': bool,
            'license_record': str,
            'subjects': List[str]
        }

        self.attribute_map = {
            'date_created': 'date_created',
            'date_modified': 'date_modified',
            'date_published': 'date_published',
            'doi': 'doi',
            'is_preprint_orphan': 'is_preprint_orphan',
            'license_record': 'license_record',
            'subjects': 'subjects'
        }

        self._date_created = date_created
        self._date_modified = date_modified
        self._date_published = date_published
        self._doi = doi
        self._is_preprint_orphan = is_preprint_orphan
        self._license_record = license_record
        self._subjects = subjects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes18':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_18 of this Attributes18.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_created(self):
        """Gets the date_created of this Attributes18.

        The time at which the preprint was created, as an iso8601 formatted timestamp.

        :return: The date_created of this Attributes18.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Attributes18.

        The time at which the preprint was created, as an iso8601 formatted timestamp.

        :param date_created: The date_created of this Attributes18.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this Attributes18.

        The time at which the preprint was last modified, as an iso8601 formatted timestamp.

        :return: The date_modified of this Attributes18.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Attributes18.

        The time at which the preprint was last modified, as an iso8601 formatted timestamp.

        :param date_modified: The date_modified of this Attributes18.
        :type date_modified: datetime
        """

        self._date_modified = date_modified

    @property
    def date_published(self):
        """Gets the date_published of this Attributes18.

        The time at which the preprint was published, as an iso8601 formatted timestamp.

        :return: The date_published of this Attributes18.
        :rtype: datetime
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this Attributes18.

        The time at which the preprint was published, as an iso8601 formatted timestamp.

        :param date_published: The date_published of this Attributes18.
        :type date_published: datetime
        """

        self._date_published = date_published

    @property
    def doi(self):
        """Gets the doi of this Attributes18.

        The DOI of the associated journal article, as entered by the user, if the preprint is published.

        :return: The doi of this Attributes18.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Attributes18.

        The DOI of the associated journal article, as entered by the user, if the preprint is published.

        :param doi: The doi of this Attributes18.
        :type doi: str
        """

        self._doi = doi

    @property
    def is_preprint_orphan(self):
        """Gets the is_preprint_orphan of this Attributes18.

        Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions.

        :return: The is_preprint_orphan of this Attributes18.
        :rtype: bool
        """
        return self._is_preprint_orphan

    @is_preprint_orphan.setter
    def is_preprint_orphan(self, is_preprint_orphan):
        """Sets the is_preprint_orphan of this Attributes18.

        Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions.

        :param is_preprint_orphan: The is_preprint_orphan of this Attributes18.
        :type is_preprint_orphan: bool
        """

        self._is_preprint_orphan = is_preprint_orphan

    @property
    def license_record(self):
        """Gets the license_record of this Attributes18.

        The metadata (copyright year and holder) associated with a license, required for certain licenses.

        :return: The license_record of this Attributes18.
        :rtype: str
        """
        return self._license_record

    @license_record.setter
    def license_record(self, license_record):
        """Sets the license_record of this Attributes18.

        The metadata (copyright year and holder) associated with a license, required for certain licenses.

        :param license_record: The license_record of this Attributes18.
        :type license_record: str
        """

        self._license_record = license_record

    @property
    def subjects(self):
        """Gets the subjects of this Attributes18.

        A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject.

        :return: The subjects of this Attributes18.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Attributes18.

        A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject.

        :param subjects: The subjects of this Attributes18.
        :type subjects: List[str]
        """

        self._subjects = subjects
