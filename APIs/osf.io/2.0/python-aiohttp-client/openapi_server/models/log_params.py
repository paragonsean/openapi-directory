# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addon: str=None, anonymous_link: bool=None, bucket: str=None, citation_name: str=None, contributors: str=None, data_set: str=None, destination: str=None, figshare_title: str=None, file: str=None, filename: str=None, folder: str=None, folder_name: str=None, forward_url: str=None, github_repo: str=None, github_user: str=None, identifiers: str=None, institution: str=None, kind: str=None, license: str=None, old_page: str=None, page: str=None, page_id: str=None, params_node: str=None, params_project: str=None, path: str=None, pointer: str=None, preprint: str=None, preprint_provider: str=None, previous_institution: str=None, source: str=None, study: str=None, tag: str=None, tags: str=None, target: str=None, template_node: str=None, title_new: str=None, title_original: str=None, updated_fields: str=None, urls: str=None, version: str=None, wiki: str=None):
        """LogParams - a model defined in OpenAPI

        :param addon: The addon of this LogParams.
        :param anonymous_link: The anonymous_link of this LogParams.
        :param bucket: The bucket of this LogParams.
        :param citation_name: The citation_name of this LogParams.
        :param contributors: The contributors of this LogParams.
        :param data_set: The data_set of this LogParams.
        :param destination: The destination of this LogParams.
        :param figshare_title: The figshare_title of this LogParams.
        :param file: The file of this LogParams.
        :param filename: The filename of this LogParams.
        :param folder: The folder of this LogParams.
        :param folder_name: The folder_name of this LogParams.
        :param forward_url: The forward_url of this LogParams.
        :param github_repo: The github_repo of this LogParams.
        :param github_user: The github_user of this LogParams.
        :param identifiers: The identifiers of this LogParams.
        :param institution: The institution of this LogParams.
        :param kind: The kind of this LogParams.
        :param license: The license of this LogParams.
        :param old_page: The old_page of this LogParams.
        :param page: The page of this LogParams.
        :param page_id: The page_id of this LogParams.
        :param params_node: The params_node of this LogParams.
        :param params_project: The params_project of this LogParams.
        :param path: The path of this LogParams.
        :param pointer: The pointer of this LogParams.
        :param preprint: The preprint of this LogParams.
        :param preprint_provider: The preprint_provider of this LogParams.
        :param previous_institution: The previous_institution of this LogParams.
        :param source: The source of this LogParams.
        :param study: The study of this LogParams.
        :param tag: The tag of this LogParams.
        :param tags: The tags of this LogParams.
        :param target: The target of this LogParams.
        :param template_node: The template_node of this LogParams.
        :param title_new: The title_new of this LogParams.
        :param title_original: The title_original of this LogParams.
        :param updated_fields: The updated_fields of this LogParams.
        :param urls: The urls of this LogParams.
        :param version: The version of this LogParams.
        :param wiki: The wiki of this LogParams.
        """
        self.openapi_types = {
            'addon': str,
            'anonymous_link': bool,
            'bucket': str,
            'citation_name': str,
            'contributors': str,
            'data_set': str,
            'destination': str,
            'figshare_title': str,
            'file': str,
            'filename': str,
            'folder': str,
            'folder_name': str,
            'forward_url': str,
            'github_repo': str,
            'github_user': str,
            'identifiers': str,
            'institution': str,
            'kind': str,
            'license': str,
            'old_page': str,
            'page': str,
            'page_id': str,
            'params_node': str,
            'params_project': str,
            'path': str,
            'pointer': str,
            'preprint': str,
            'preprint_provider': str,
            'previous_institution': str,
            'source': str,
            'study': str,
            'tag': str,
            'tags': str,
            'target': str,
            'template_node': str,
            'title_new': str,
            'title_original': str,
            'updated_fields': str,
            'urls': str,
            'version': str,
            'wiki': str
        }

        self.attribute_map = {
            'addon': 'addon',
            'anonymous_link': 'anonymous_link',
            'bucket': 'bucket',
            'citation_name': 'citation_name',
            'contributors': 'contributors',
            'data_set': 'data_set',
            'destination': 'destination',
            'figshare_title': 'figshare_title',
            'file': 'file',
            'filename': 'filename',
            'folder': 'folder',
            'folder_name': 'folder_name',
            'forward_url': 'forward_url',
            'github_repo': 'github_repo',
            'github_user': 'github_user',
            'identifiers': 'identifiers',
            'institution': 'institution',
            'kind': 'kind',
            'license': 'license',
            'old_page': 'old_page',
            'page': 'page',
            'page_id': 'page_id',
            'params_node': 'params_node',
            'params_project': 'params_project',
            'path': 'path',
            'pointer': 'pointer',
            'preprint': 'preprint',
            'preprint_provider': 'preprint_provider',
            'previous_institution': 'previous_institution',
            'source': 'source',
            'study': 'study',
            'tag': 'tag',
            'tags': 'tags',
            'target': 'target',
            'template_node': 'template_node',
            'title_new': 'title_new',
            'title_original': 'title_original',
            'updated_fields': 'updated_fields',
            'urls': 'urls',
            'version': 'version',
            'wiki': 'wiki'
        }

        self._addon = addon
        self._anonymous_link = anonymous_link
        self._bucket = bucket
        self._citation_name = citation_name
        self._contributors = contributors
        self._data_set = data_set
        self._destination = destination
        self._figshare_title = figshare_title
        self._file = file
        self._filename = filename
        self._folder = folder
        self._folder_name = folder_name
        self._forward_url = forward_url
        self._github_repo = github_repo
        self._github_user = github_user
        self._identifiers = identifiers
        self._institution = institution
        self._kind = kind
        self._license = license
        self._old_page = old_page
        self._page = page
        self._page_id = page_id
        self._params_node = params_node
        self._params_project = params_project
        self._path = path
        self._pointer = pointer
        self._preprint = preprint
        self._preprint_provider = preprint_provider
        self._previous_institution = previous_institution
        self._source = source
        self._study = study
        self._tag = tag
        self._tags = tags
        self._target = target
        self._template_node = template_node
        self._title_new = title_new
        self._title_original = title_original
        self._updated_fields = updated_fields
        self._urls = urls
        self._version = version
        self._wiki = wiki

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Log_Params of this LogParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addon(self):
        """Gets the addon of this LogParams.

        The addon associated with the connected node.

        :return: The addon of this LogParams.
        :rtype: str
        """
        return self._addon

    @addon.setter
    def addon(self, addon):
        """Sets the addon of this LogParams.

        The addon associated with the connected node.

        :param addon: The addon of this LogParams.
        :type addon: str
        """

        self._addon = addon

    @property
    def anonymous_link(self):
        """Gets the anonymous_link of this LogParams.

        The view only link added to the node was anonymous.

        :return: The anonymous_link of this LogParams.
        :rtype: bool
        """
        return self._anonymous_link

    @anonymous_link.setter
    def anonymous_link(self, anonymous_link):
        """Sets the anonymous_link of this LogParams.

        The view only link added to the node was anonymous.

        :param anonymous_link: The anonymous_link of this LogParams.
        :type anonymous_link: bool
        """

        self._anonymous_link = anonymous_link

    @property
    def bucket(self):
        """Gets the bucket of this LogParams.

        The Amazon s3 bucket connected to the connected node.

        :return: The bucket of this LogParams.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this LogParams.

        The Amazon s3 bucket connected to the connected node.

        :param bucket: The bucket of this LogParams.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def citation_name(self):
        """Gets the citation_name of this LogParams.

        Name of citation associated with the connected node.

        :return: The citation_name of this LogParams.
        :rtype: str
        """
        return self._citation_name

    @citation_name.setter
    def citation_name(self, citation_name):
        """Sets the citation_name of this LogParams.

        Name of citation associated with the connected node.

        :param citation_name: The citation_name of this LogParams.
        :type citation_name: str
        """

        self._citation_name = citation_name

    @property
    def contributors(self):
        """Gets the contributors of this LogParams.

        List of contributors on the connected node involved in the action represented by this node log.

        :return: The contributors of this LogParams.
        :rtype: str
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this LogParams.

        List of contributors on the connected node involved in the action represented by this node log.

        :param contributors: The contributors of this LogParams.
        :type contributors: str
        """

        self._contributors = contributors

    @property
    def data_set(self):
        """Gets the data_set of this LogParams.

        The dataset associated with the connected node.

        :return: The data_set of this LogParams.
        :rtype: str
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this LogParams.

        The dataset associated with the connected node.

        :param data_set: The data_set of this LogParams.
        :type data_set: str
        """

        self._data_set = data_set

    @property
    def destination(self):
        """Gets the destination of this LogParams.

        A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title.

        :return: The destination of this LogParams.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this LogParams.

        A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title.

        :param destination: The destination of this LogParams.
        :type destination: str
        """

        self._destination = destination

    @property
    def figshare_title(self):
        """Gets the figshare_title of this LogParams.

        Title of the fighshare project associated with this node log

        :return: The figshare_title of this LogParams.
        :rtype: str
        """
        return self._figshare_title

    @figshare_title.setter
    def figshare_title(self, figshare_title):
        """Sets the figshare_title of this LogParams.

        Title of the fighshare project associated with this node log

        :param figshare_title: The figshare_title of this LogParams.
        :type figshare_title: str
        """

        self._figshare_title = figshare_title

    @property
    def file(self):
        """Gets the file of this LogParams.

        Dictionary with information about the file involved with the log.

        :return: The file of this LogParams.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this LogParams.

        Dictionary with information about the file involved with the log.

        :param file: The file of this LogParams.
        :type file: str
        """

        self._file = file

    @property
    def filename(self):
        """Gets the filename of this LogParams.

        Filename for the file associated with the log.

        :return: The filename of this LogParams.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this LogParams.

        Filename for the file associated with the log.

        :param filename: The filename of this LogParams.
        :type filename: str
        """

        self._filename = filename

    @property
    def folder(self):
        """Gets the folder of this LogParams.

        Folder associated with the log.

        :return: The folder of this LogParams.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this LogParams.

        Folder associated with the log.

        :param folder: The folder of this LogParams.
        :type folder: str
        """

        self._folder = folder

    @property
    def folder_name(self):
        """Gets the folder_name of this LogParams.

        Name of the folder associated with the log.

        :return: The folder_name of this LogParams.
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this LogParams.

        Name of the folder associated with the log.

        :param folder_name: The folder_name of this LogParams.
        :type folder_name: str
        """

        self._folder_name = folder_name

    @property
    def forward_url(self):
        """Gets the forward_url of this LogParams.

        URL that the connected node forwards to.

        :return: The forward_url of this LogParams.
        :rtype: str
        """
        return self._forward_url

    @forward_url.setter
    def forward_url(self, forward_url):
        """Sets the forward_url of this LogParams.

        URL that the connected node forwards to.

        :param forward_url: The forward_url of this LogParams.
        :type forward_url: str
        """

        self._forward_url = forward_url

    @property
    def github_repo(self):
        """Gets the github_repo of this LogParams.

        The github repository involved with the action represented by this node log.

        :return: The github_repo of this LogParams.
        :rtype: str
        """
        return self._github_repo

    @github_repo.setter
    def github_repo(self, github_repo):
        """Sets the github_repo of this LogParams.

        The github repository involved with the action represented by this node log.

        :param github_repo: The github_repo of this LogParams.
        :type github_repo: str
        """

        self._github_repo = github_repo

    @property
    def github_user(self):
        """Gets the github_user of this LogParams.

        The github user involved with the action represented by this node log.

        :return: The github_user of this LogParams.
        :rtype: str
        """
        return self._github_user

    @github_user.setter
    def github_user(self, github_user):
        """Sets the github_user of this LogParams.

        The github user involved with the action represented by this node log.

        :param github_user: The github_user of this LogParams.
        :type github_user: str
        """

        self._github_user = github_user

    @property
    def identifiers(self):
        """Gets the identifiers of this LogParams.

        Dictionary containing the DOI and ARK ID for a preprint associated with the log.

        :return: The identifiers of this LogParams.
        :rtype: str
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this LogParams.

        Dictionary containing the DOI and ARK ID for a preprint associated with the log.

        :param identifiers: The identifiers of this LogParams.
        :type identifiers: str
        """

        self._identifiers = identifiers

    @property
    def institution(self):
        """Gets the institution of this LogParams.

        Dictionary containing the ID and Name of the institution associated with the log.

        :return: The institution of this LogParams.
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this LogParams.

        Dictionary containing the ID and Name of the institution associated with the log.

        :param institution: The institution of this LogParams.
        :type institution: str
        """

        self._institution = institution

    @property
    def kind(self):
        """Gets the kind of this LogParams.

        Kind of the object associated with the log.

        :return: The kind of this LogParams.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LogParams.

        Kind of the object associated with the log.

        :param kind: The kind of this LogParams.
        :type kind: str
        """

        self._kind = kind

    @property
    def license(self):
        """Gets the license of this LogParams.

        License for the associated node.

        :return: The license of this LogParams.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this LogParams.

        License for the associated node.

        :param license: The license of this LogParams.
        :type license: str
        """

        self._license = license

    @property
    def old_page(self):
        """Gets the old_page of this LogParams.

        Old name of wiki page for a wiki rename log action.

        :return: The old_page of this LogParams.
        :rtype: str
        """
        return self._old_page

    @old_page.setter
    def old_page(self, old_page):
        """Sets the old_page of this LogParams.

        Old name of wiki page for a wiki rename log action.

        :param old_page: The old_page of this LogParams.
        :type old_page: str
        """

        self._old_page = old_page

    @property
    def page(self):
        """Gets the page of this LogParams.

        Current name of wiki page for rename log action.

        :return: The page of this LogParams.
        :rtype: str
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this LogParams.

        Current name of wiki page for rename log action.

        :param page: The page of this LogParams.
        :type page: str
        """

        self._page = page

    @property
    def page_id(self):
        """Gets the page_id of this LogParams.

        Primary key of the wiki page associated with the log.

        :return: The page_id of this LogParams.
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this LogParams.

        Primary key of the wiki page associated with the log.

        :param page_id: The page_id of this LogParams.
        :type page_id: str
        """

        self._page_id = page_id

    @property
    def params_node(self):
        """Gets the params_node of this LogParams.

        Node that is refered to in the params of the log.

        :return: The params_node of this LogParams.
        :rtype: str
        """
        return self._params_node

    @params_node.setter
    def params_node(self, params_node):
        """Sets the params_node of this LogParams.

        Node that is refered to in the params of the log.

        :param params_node: The params_node of this LogParams.
        :type params_node: str
        """

        self._params_node = params_node

    @property
    def params_project(self):
        """Gets the params_project of this LogParams.

        Project that is refered to in the params of the log.

        :return: The params_project of this LogParams.
        :rtype: str
        """
        return self._params_project

    @params_project.setter
    def params_project(self, params_project):
        """Sets the params_project of this LogParams.

        Project that is refered to in the params of the log.

        :param params_project: The params_project of this LogParams.
        :type params_project: str
        """

        self._params_project = params_project

    @property
    def path(self):
        """Gets the path of this LogParams.

        Path for a file associated with the log.

        :return: The path of this LogParams.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LogParams.

        Path for a file associated with the log.

        :param path: The path of this LogParams.
        :type path: str
        """

        self._path = path

    @property
    def pointer(self):
        """Gets the pointer of this LogParams.

        A dictionary with information about the node that is linked to the associated node.

        :return: The pointer of this LogParams.
        :rtype: str
        """
        return self._pointer

    @pointer.setter
    def pointer(self, pointer):
        """Sets the pointer of this LogParams.

        A dictionary with information about the node that is linked to the associated node.

        :param pointer: The pointer of this LogParams.
        :type pointer: str
        """

        self._pointer = pointer

    @property
    def preprint(self):
        """Gets the preprint of this LogParams.

        Preprint related to the associated node.

        :return: The preprint of this LogParams.
        :rtype: str
        """
        return self._preprint

    @preprint.setter
    def preprint(self, preprint):
        """Sets the preprint of this LogParams.

        Preprint related to the associated node.

        :param preprint: The preprint of this LogParams.
        :type preprint: str
        """

        self._preprint = preprint

    @property
    def preprint_provider(self):
        """Gets the preprint_provider of this LogParams.

        Preprint provider for the associated node.

        :return: The preprint_provider of this LogParams.
        :rtype: str
        """
        return self._preprint_provider

    @preprint_provider.setter
    def preprint_provider(self, preprint_provider):
        """Sets the preprint_provider of this LogParams.

        Preprint provider for the associated node.

        :param preprint_provider: The preprint_provider of this LogParams.
        :type preprint_provider: str
        """

        self._preprint_provider = preprint_provider

    @property
    def previous_institution(self):
        """Gets the previous_institution of this LogParams.

        If a primary institution for the associated node is changed, this will show the previous institution.

        :return: The previous_institution of this LogParams.
        :rtype: str
        """
        return self._previous_institution

    @previous_institution.setter
    def previous_institution(self, previous_institution):
        """Sets the previous_institution of this LogParams.

        If a primary institution for the associated node is changed, this will show the previous institution.

        :param previous_institution: The previous_institution of this LogParams.
        :type previous_institution: str
        """

        self._previous_institution = previous_institution

    @property
    def source(self):
        """Gets the source of this LogParams.

        A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title.

        :return: The source of this LogParams.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LogParams.

        A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title.

        :param source: The source of this LogParams.
        :type source: str
        """

        self._source = source

    @property
    def study(self):
        """Gets the study of this LogParams.

        Dataverse study linked to the associated node.

        :return: The study of this LogParams.
        :rtype: str
        """
        return self._study

    @study.setter
    def study(self, study):
        """Sets the study of this LogParams.

        Dataverse study linked to the associated node.

        :param study: The study of this LogParams.
        :type study: str
        """

        self._study = study

    @property
    def tag(self):
        """Gets the tag of this LogParams.

        Tag associated with the associated node.

        :return: The tag of this LogParams.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this LogParams.

        Tag associated with the associated node.

        :param tag: The tag of this LogParams.
        :type tag: str
        """

        self._tag = tag

    @property
    def tags(self):
        """Gets the tags of this LogParams.

        Tags associated with the associated node.

        :return: The tags of this LogParams.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LogParams.

        Tags associated with the associated node.

        :param tags: The tags of this LogParams.
        :type tags: str
        """

        self._tags = tags

    @property
    def target(self):
        """Gets the target of this LogParams.

        A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title.

        :return: The target of this LogParams.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this LogParams.

        A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title.

        :param target: The target of this LogParams.
        :type target: str
        """

        self._target = target

    @property
    def template_node(self):
        """Gets the template_node of this LogParams.

        A dictionary containing information about the node that was used as a template for the associated node.

        :return: The template_node of this LogParams.
        :rtype: str
        """
        return self._template_node

    @template_node.setter
    def template_node(self, template_node):
        """Sets the template_node of this LogParams.

        A dictionary containing information about the node that was used as a template for the associated node.

        :param template_node: The template_node of this LogParams.
        :type template_node: str
        """

        self._template_node = template_node

    @property
    def title_new(self):
        """Gets the title_new of this LogParams.

        The new title for the associated node.

        :return: The title_new of this LogParams.
        :rtype: str
        """
        return self._title_new

    @title_new.setter
    def title_new(self, title_new):
        """Sets the title_new of this LogParams.

        The new title for the associated node.

        :param title_new: The title_new of this LogParams.
        :type title_new: str
        """

        self._title_new = title_new

    @property
    def title_original(self):
        """Gets the title_original of this LogParams.

        The original title for the associated node

        :return: The title_original of this LogParams.
        :rtype: str
        """
        return self._title_original

    @title_original.setter
    def title_original(self, title_original):
        """Sets the title_original of this LogParams.

        The original title for the associated node

        :param title_original: The title_original of this LogParams.
        :type title_original: str
        """

        self._title_original = title_original

    @property
    def updated_fields(self):
        """Gets the updated_fields of this LogParams.

        A dictionary containing all of the fields updated on the associated node.

        :return: The updated_fields of this LogParams.
        :rtype: str
        """
        return self._updated_fields

    @updated_fields.setter
    def updated_fields(self, updated_fields):
        """Sets the updated_fields of this LogParams.

        A dictionary containing all of the fields updated on the associated node.

        :param updated_fields: The updated_fields of this LogParams.
        :type updated_fields: str
        """

        self._updated_fields = updated_fields

    @property
    def urls(self):
        """Gets the urls of this LogParams.

        Links to access information about the file associated with this log.

        :return: The urls of this LogParams.
        :rtype: str
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this LogParams.

        Links to access information about the file associated with this log.

        :param urls: The urls of this LogParams.
        :type urls: str
        """

        self._urls = urls

    @property
    def version(self):
        """Gets the version of this LogParams.

        Version of the wiki page associated with this log.

        :return: The version of this LogParams.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LogParams.

        Version of the wiki page associated with this log.

        :param version: The version of this LogParams.
        :type version: str
        """

        self._version = version

    @property
    def wiki(self):
        """Gets the wiki of this LogParams.

        A dictionary with information about the wiki page associated with the log.

        :return: The wiki of this LogParams.
        :rtype: str
        """
        return self._wiki

    @wiki.setter
    def wiki(self, wiki):
        """Sets the wiki of this LogParams.

        A dictionary with information about the wiki page associated with the log.

        :param wiki: The wiki of this LogParams.
        :type wiki: str
        """

        self._wiki = wiki
