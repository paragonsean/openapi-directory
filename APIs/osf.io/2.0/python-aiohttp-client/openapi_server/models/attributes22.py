# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes22(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advisory_board: str=None, banner_path: str=None, description: str=None, domain: str=None, domain_redirect_enabled: bool=None, email_contact: str=None, email_support: str=None, example: str=None, logo_path: str=None, name: str=None, social_facebook: str=None, social_instagram: str=None, subjects_acceptable: str=None):
        """Attributes22 - a model defined in OpenAPI

        :param advisory_board: The advisory_board of this Attributes22.
        :param banner_path: The banner_path of this Attributes22.
        :param description: The description of this Attributes22.
        :param domain: The domain of this Attributes22.
        :param domain_redirect_enabled: The domain_redirect_enabled of this Attributes22.
        :param email_contact: The email_contact of this Attributes22.
        :param email_support: The email_support of this Attributes22.
        :param example: The example of this Attributes22.
        :param logo_path: The logo_path of this Attributes22.
        :param name: The name of this Attributes22.
        :param social_facebook: The social_facebook of this Attributes22.
        :param social_instagram: The social_instagram of this Attributes22.
        :param subjects_acceptable: The subjects_acceptable of this Attributes22.
        """
        self.openapi_types = {
            'advisory_board': str,
            'banner_path': str,
            'description': str,
            'domain': str,
            'domain_redirect_enabled': bool,
            'email_contact': str,
            'email_support': str,
            'example': str,
            'logo_path': str,
            'name': str,
            'social_facebook': str,
            'social_instagram': str,
            'subjects_acceptable': str
        }

        self.attribute_map = {
            'advisory_board': 'advisory_board',
            'banner_path': 'banner_path',
            'description': 'description',
            'domain': 'domain',
            'domain_redirect_enabled': 'domain_redirect_enabled',
            'email_contact': 'email_contact',
            'email_support': 'email_support',
            'example': 'example',
            'logo_path': 'logo_path',
            'name': 'name',
            'social_facebook': 'social_facebook',
            'social_instagram': 'social_instagram',
            'subjects_acceptable': 'subjects_acceptable'
        }

        self._advisory_board = advisory_board
        self._banner_path = banner_path
        self._description = description
        self._domain = domain
        self._domain_redirect_enabled = domain_redirect_enabled
        self._email_contact = email_contact
        self._email_support = email_support
        self._example = example
        self._logo_path = logo_path
        self._name = name
        self._social_facebook = social_facebook
        self._social_instagram = social_instagram
        self._subjects_acceptable = subjects_acceptable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes22':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_22 of this Attributes22.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advisory_board(self):
        """Gets the advisory_board of this Attributes22.

        The HTML representation of the preprint provider's advisory board.

        :return: The advisory_board of this Attributes22.
        :rtype: str
        """
        return self._advisory_board

    @advisory_board.setter
    def advisory_board(self, advisory_board):
        """Sets the advisory_board of this Attributes22.

        The HTML representation of the preprint provider's advisory board.

        :param advisory_board: The advisory_board of this Attributes22.
        :type advisory_board: str
        """

        self._advisory_board = advisory_board

    @property
    def banner_path(self):
        """Gets the banner_path of this Attributes22.

        A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4.

        :return: The banner_path of this Attributes22.
        :rtype: str
        """
        return self._banner_path

    @banner_path.setter
    def banner_path(self, banner_path):
        """Sets the banner_path of this Attributes22.

        A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4.

        :param banner_path: The banner_path of this Attributes22.
        :type banner_path: str
        """

        self._banner_path = banner_path

    @property
    def description(self):
        """Gets the description of this Attributes22.

        The description of the preprint provider.

        :return: The description of this Attributes22.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attributes22.

        The description of the preprint provider.

        :param description: The description of this Attributes22.
        :type description: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this Attributes22.

        The preprint provider's domain, if the provider is using a domain to for their preprint service.

        :return: The domain of this Attributes22.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Attributes22.

        The preprint provider's domain, if the provider is using a domain to for their preprint service.

        :param domain: The domain of this Attributes22.
        :type domain: str
        """

        self._domain = domain

    @property
    def domain_redirect_enabled(self):
        """Gets the domain_redirect_enabled of this Attributes22.

        Whether or not redirects are enabled for the provider's domain.

        :return: The domain_redirect_enabled of this Attributes22.
        :rtype: bool
        """
        return self._domain_redirect_enabled

    @domain_redirect_enabled.setter
    def domain_redirect_enabled(self, domain_redirect_enabled):
        """Sets the domain_redirect_enabled of this Attributes22.

        Whether or not redirects are enabled for the provider's domain.

        :param domain_redirect_enabled: The domain_redirect_enabled of this Attributes22.
        :type domain_redirect_enabled: bool
        """

        self._domain_redirect_enabled = domain_redirect_enabled

    @property
    def email_contact(self):
        """Gets the email_contact of this Attributes22.

        The preprint provider's contact email address. This field is deprecated as of verson 2.4.

        :return: The email_contact of this Attributes22.
        :rtype: str
        """
        return self._email_contact

    @email_contact.setter
    def email_contact(self, email_contact):
        """Sets the email_contact of this Attributes22.

        The preprint provider's contact email address. This field is deprecated as of verson 2.4.

        :param email_contact: The email_contact of this Attributes22.
        :type email_contact: str
        """

        self._email_contact = email_contact

    @property
    def email_support(self):
        """Gets the email_support of this Attributes22.

        The preprint providers's support email address.

        :return: The email_support of this Attributes22.
        :rtype: str
        """
        return self._email_support

    @email_support.setter
    def email_support(self, email_support):
        """Sets the email_support of this Attributes22.

        The preprint providers's support email address.

        :param email_support: The email_support of this Attributes22.
        :type email_support: str
        """

        self._email_support = email_support

    @property
    def example(self):
        """Gets the example of this Attributes22.

        The GUID for an example preprint from this preprint provider.

        :return: The example of this Attributes22.
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this Attributes22.

        The GUID for an example preprint from this preprint provider.

        :param example: The example of this Attributes22.
        :type example: str
        """

        self._example = example

    @property
    def logo_path(self):
        """Gets the logo_path of this Attributes22.

        A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4.

        :return: The logo_path of this Attributes22.
        :rtype: str
        """
        return self._logo_path

    @logo_path.setter
    def logo_path(self, logo_path):
        """Sets the logo_path of this Attributes22.

        A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4.

        :param logo_path: The logo_path of this Attributes22.
        :type logo_path: str
        """

        self._logo_path = logo_path

    @property
    def name(self):
        """Gets the name of this Attributes22.

        The name of the preprint provider.

        :return: The name of this Attributes22.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attributes22.

        The name of the preprint provider.

        :param name: The name of this Attributes22.
        :type name: str
        """

        self._name = name

    @property
    def social_facebook(self):
        """Gets the social_facebook of this Attributes22.

        The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4.

        :return: The social_facebook of this Attributes22.
        :rtype: str
        """
        return self._social_facebook

    @social_facebook.setter
    def social_facebook(self, social_facebook):
        """Sets the social_facebook of this Attributes22.

        The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4.

        :param social_facebook: The social_facebook of this Attributes22.
        :type social_facebook: str
        """

        self._social_facebook = social_facebook

    @property
    def social_instagram(self):
        """Gets the social_instagram of this Attributes22.

        The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4.

        :return: The social_instagram of this Attributes22.
        :rtype: str
        """
        return self._social_instagram

    @social_instagram.setter
    def social_instagram(self, social_instagram):
        """Sets the social_instagram of this Attributes22.

        The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4.

        :param social_instagram: The social_instagram of this Attributes22.
        :type social_instagram: str
        """

        self._social_instagram = social_instagram

    @property
    def subjects_acceptable(self):
        """Gets the subjects_acceptable of this Attributes22.

        A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy.

        :return: The subjects_acceptable of this Attributes22.
        :rtype: str
        """
        return self._subjects_acceptable

    @subjects_acceptable.setter
    def subjects_acceptable(self, subjects_acceptable):
        """Sets the subjects_acceptable of this Attributes22.

        A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy.

        :param subjects_acceptable: The subjects_acceptable of this Attributes22.
        :type subjects_acceptable: str
        """

        self._subjects_acceptable = subjects_acceptable
