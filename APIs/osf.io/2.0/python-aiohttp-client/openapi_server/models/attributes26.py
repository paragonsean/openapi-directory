# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes26(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto: bool=None, comment: str=None, date_created: str=None, from_state: str=None, to_state: str=None, trigger: str=None, visible: bool=None):
        """Attributes26 - a model defined in OpenAPI

        :param auto: The auto of this Attributes26.
        :param comment: The comment of this Attributes26.
        :param date_created: The date_created of this Attributes26.
        :param from_state: The from_state of this Attributes26.
        :param to_state: The to_state of this Attributes26.
        :param trigger: The trigger of this Attributes26.
        :param visible: The visible of this Attributes26.
        """
        self.openapi_types = {
            'auto': bool,
            'comment': str,
            'date_created': str,
            'from_state': str,
            'to_state': str,
            'trigger': str,
            'visible': bool
        }

        self.attribute_map = {
            'auto': 'auto',
            'comment': 'comment',
            'date_created': 'date_created',
            'from_state': 'from_state',
            'to_state': 'to_state',
            'trigger': 'trigger',
            'visible': 'visible'
        }

        self._auto = auto
        self._comment = comment
        self._date_created = date_created
        self._from_state = from_state
        self._to_state = to_state
        self._trigger = trigger
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes26':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_26 of this Attributes26.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto(self):
        """Gets the auto of this Attributes26.

        Bool of representing whether a user created the action.

        :return: The auto of this Attributes26.
        :rtype: bool
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this Attributes26.

        Bool of representing whether a user created the action.

        :param auto: The auto of this Attributes26.
        :type auto: bool
        """

        self._auto = auto

    @property
    def comment(self):
        """Gets the comment of this Attributes26.

        A comment made explaining the reasoning of the action.

        :return: The comment of this Attributes26.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Attributes26.

        A comment made explaining the reasoning of the action.

        :param comment: The comment of this Attributes26.
        :type comment: str
        """

        self._comment = comment

    @property
    def date_created(self):
        """Gets the date_created of this Attributes26.

        The date the action was created.

        :return: The date_created of this Attributes26.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Attributes26.

        The date the action was created.

        :param date_created: The date_created of this Attributes26.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def from_state(self):
        """Gets the from_state of this Attributes26.

        The name of the state of the Schema Response prior to the creation of the action.

        :return: The from_state of this Attributes26.
        :rtype: str
        """
        return self._from_state

    @from_state.setter
    def from_state(self, from_state):
        """Sets the from_state of this Attributes26.

        The name of the state of the Schema Response prior to the creation of the action.

        :param from_state: The from_state of this Attributes26.
        :type from_state: str
        """
        allowed_values = ["initial", "in_progress", "approved", "pending_moderation"]  # noqa: E501
        if from_state not in allowed_values:
            raise ValueError(
                "Invalid value for `from_state` ({0}), must be one of {1}"
                .format(from_state, allowed_values)
            )

        self._from_state = from_state

    @property
    def to_state(self):
        """Gets the to_state of this Attributes26.

        The name of the state of the Schema Response after the creation of the action

        :return: The to_state of this Attributes26.
        :rtype: str
        """
        return self._to_state

    @to_state.setter
    def to_state(self, to_state):
        """Sets the to_state of this Attributes26.

        The name of the state of the Schema Response after the creation of the action

        :param to_state: The to_state of this Attributes26.
        :type to_state: str
        """
        allowed_values = ["in_progress", "approved", "pending_moderation"]  # noqa: E501
        if to_state not in allowed_values:
            raise ValueError(
                "Invalid value for `to_state` ({0}), must be one of {1}"
                .format(to_state, allowed_values)
            )

        self._to_state = to_state

    @property
    def trigger(self):
        """Gets the trigger of this Attributes26.

        The name of the trigger that caused the action.

        :return: The trigger of this Attributes26.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Attributes26.

        The name of the trigger that caused the action.

        :param trigger: The trigger of this Attributes26.
        :type trigger: str
        """
        allowed_values = ["submit", "approve", "accept", "admin_reject", "moderator_reject"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def visible(self):
        """Gets the visible of this Attributes26.

        Bool of representing whether the action is visible.

        :return: The visible of this Attributes26.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Attributes26.

        Bool of representing whether the action is visible.

        :param visible: The visible of this Attributes26.
        :type visible: bool
        """

        self._visible = visible
