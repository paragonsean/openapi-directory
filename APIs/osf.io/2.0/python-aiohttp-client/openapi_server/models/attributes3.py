# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_edit: bool=None, content: str=None, date_created: datetime=None, date_modified: datetime=None, deleted: bool=None, has_children: bool=None, has_report: bool=None, is_abuse: bool=None, is_ham: bool=None, modified: bool=None, page: str=None):
        """Attributes3 - a model defined in OpenAPI

        :param can_edit: The can_edit of this Attributes3.
        :param content: The content of this Attributes3.
        :param date_created: The date_created of this Attributes3.
        :param date_modified: The date_modified of this Attributes3.
        :param deleted: The deleted of this Attributes3.
        :param has_children: The has_children of this Attributes3.
        :param has_report: The has_report of this Attributes3.
        :param is_abuse: The is_abuse of this Attributes3.
        :param is_ham: The is_ham of this Attributes3.
        :param modified: The modified of this Attributes3.
        :param page: The page of this Attributes3.
        """
        self.openapi_types = {
            'can_edit': bool,
            'content': str,
            'date_created': datetime,
            'date_modified': datetime,
            'deleted': bool,
            'has_children': bool,
            'has_report': bool,
            'is_abuse': bool,
            'is_ham': bool,
            'modified': bool,
            'page': str
        }

        self.attribute_map = {
            'can_edit': 'can_edit',
            'content': 'content',
            'date_created': 'date_created',
            'date_modified': 'date_modified',
            'deleted': 'deleted',
            'has_children': 'has_children',
            'has_report': 'has_report',
            'is_abuse': 'is_abuse',
            'is_ham': 'is_ham',
            'modified': 'modified',
            'page': 'page'
        }

        self._can_edit = can_edit
        self._content = content
        self._date_created = date_created
        self._date_modified = date_modified
        self._deleted = deleted
        self._has_children = has_children
        self._has_report = has_report
        self._is_abuse = is_abuse
        self._is_ham = is_ham
        self._modified = modified
        self._page = page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_3 of this Attributes3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_edit(self):
        """Gets the can_edit of this Attributes3.

        Whether or not the current user has permission to edit this comment

        :return: The can_edit of this Attributes3.
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this Attributes3.

        Whether or not the current user has permission to edit this comment

        :param can_edit: The can_edit of this Attributes3.
        :type can_edit: bool
        """

        self._can_edit = can_edit

    @property
    def content(self):
        """Gets the content of this Attributes3.

        The content of the comment.

        :return: The content of this Attributes3.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Attributes3.

        The content of the comment.

        :param content: The content of this Attributes3.
        :type content: str
        """

        self._content = content

    @property
    def date_created(self):
        """Gets the date_created of this Attributes3.

        The time at which the comment was created, as an iso8601 formatted timestamp.

        :return: The date_created of this Attributes3.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Attributes3.

        The time at which the comment was created, as an iso8601 formatted timestamp.

        :param date_created: The date_created of this Attributes3.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this Attributes3.

        The time at which the comment was last modified, as an iso8601 formatted timestamp.

        :return: The date_modified of this Attributes3.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Attributes3.

        The time at which the comment was last modified, as an iso8601 formatted timestamp.

        :param date_modified: The date_modified of this Attributes3.
        :type date_modified: datetime
        """

        self._date_modified = date_modified

    @property
    def deleted(self):
        """Gets the deleted of this Attributes3.

        Whether or not the comment is deleted.

        :return: The deleted of this Attributes3.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Attributes3.

        Whether or not the comment is deleted.

        :param deleted: The deleted of this Attributes3.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def has_children(self):
        """Gets the has_children of this Attributes3.

        Whether or not the comment has replies.

        :return: The has_children of this Attributes3.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Attributes3.

        Whether or not the comment has replies.

        :param has_children: The has_children of this Attributes3.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def has_report(self):
        """Gets the has_report of this Attributes3.

        Whether or not the comment the current user reported this as spam.

        :return: The has_report of this Attributes3.
        :rtype: bool
        """
        return self._has_report

    @has_report.setter
    def has_report(self, has_report):
        """Sets the has_report of this Attributes3.

        Whether or not the comment the current user reported this as spam.

        :param has_report: The has_report of this Attributes3.
        :type has_report: bool
        """

        self._has_report = has_report

    @property
    def is_abuse(self):
        """Gets the is_abuse of this Attributes3.

        Whether or not the comment is flagged or confirmed spam.

        :return: The is_abuse of this Attributes3.
        :rtype: bool
        """
        return self._is_abuse

    @is_abuse.setter
    def is_abuse(self, is_abuse):
        """Sets the is_abuse of this Attributes3.

        Whether or not the comment is flagged or confirmed spam.

        :param is_abuse: The is_abuse of this Attributes3.
        :type is_abuse: bool
        """

        self._is_abuse = is_abuse

    @property
    def is_ham(self):
        """Gets the is_ham of this Attributes3.

        Whether or not an admin checked the legitimacy of this comment.

        :return: The is_ham of this Attributes3.
        :rtype: bool
        """
        return self._is_ham

    @is_ham.setter
    def is_ham(self, is_ham):
        """Sets the is_ham of this Attributes3.

        Whether or not an admin checked the legitimacy of this comment.

        :param is_ham: The is_ham of this Attributes3.
        :type is_ham: bool
        """

        self._is_ham = is_ham

    @property
    def modified(self):
        """Gets the modified of this Attributes3.

        Whether or not the comment has been edited.

        :return: The modified of this Attributes3.
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Attributes3.

        Whether or not the comment has been edited.

        :param modified: The modified of this Attributes3.
        :type modified: bool
        """

        self._modified = modified

    @property
    def page(self):
        """Gets the page of this Attributes3.

        The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.

        :return: The page of this Attributes3.
        :rtype: str
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Attributes3.

        The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.

        :param page: The page of this Attributes3.
        :type page: str
        """

        self._page = page
