# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes28(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, name: str=None, _schema: Dict[str, List[object]]=None, schema_version: int=None):
        """Attributes28 - a model defined in OpenAPI

        :param active: The active of this Attributes28.
        :param name: The name of this Attributes28.
        :param _schema: The _schema of this Attributes28.
        :param schema_version: The schema_version of this Attributes28.
        """
        self.openapi_types = {
            'active': bool,
            'name': str,
            '_schema': Dict[str, List[object]],
            'schema_version': int
        }

        self.attribute_map = {
            'active': 'active',
            'name': 'name',
            '_schema': 'schema',
            'schema_version': 'schema_version'
        }

        self._active = active
        self._name = name
        self.__schema = _schema
        self._schema_version = schema_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes28':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_28 of this Attributes28.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Attributes28.

        Bool that represents whether the Registration Schema is active.

        :return: The active of this Attributes28.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Attributes28.

        Bool that represents whether the Registration Schema is active.

        :param active: The active of this Attributes28.
        :type active: bool
        """

        self._active = active

    @property
    def name(self):
        """Gets the name of this Attributes28.

        The name of the Registration Schema

        :return: The name of this Attributes28.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attributes28.

        The name of the Registration Schema

        :param name: The name of this Attributes28.
        :type name: str
        """

        self._name = name

    @property
    def _schema(self):
        """Gets the _schema of this Attributes28.

        This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks.

        :return: The _schema of this Attributes28.
        :rtype: Dict[str, List[object]]
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this Attributes28.

        This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks.

        :param _schema: The _schema of this Attributes28.
        :type _schema: Dict[str, List[object]]
        """

        self.__schema = _schema

    @property
    def schema_version(self):
        """Gets the schema_version of this Attributes28.

        The version of this Registration Schema

        :return: The schema_version of this Attributes28.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this Attributes28.

        The version of this Registration Schema

        :param schema_version: The schema_version of this Attributes28.
        :type schema_version: int
        """

        self._schema_version = schema_version
