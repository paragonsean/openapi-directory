# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bookmarks: bool=None, collected_type_choices: List[str]=None, date_created: datetime=None, date_modified: datetime=None, is_promoted: bool=None, is_public: bool=None, issue_choices: List[str]=None, program_area_choices: List[str]=None, status_choices: List[str]=None, title: str=None, volume_choices: List[str]=None):
        """Attributes2 - a model defined in OpenAPI

        :param bookmarks: The bookmarks of this Attributes2.
        :param collected_type_choices: The collected_type_choices of this Attributes2.
        :param date_created: The date_created of this Attributes2.
        :param date_modified: The date_modified of this Attributes2.
        :param is_promoted: The is_promoted of this Attributes2.
        :param is_public: The is_public of this Attributes2.
        :param issue_choices: The issue_choices of this Attributes2.
        :param program_area_choices: The program_area_choices of this Attributes2.
        :param status_choices: The status_choices of this Attributes2.
        :param title: The title of this Attributes2.
        :param volume_choices: The volume_choices of this Attributes2.
        """
        self.openapi_types = {
            'bookmarks': bool,
            'collected_type_choices': List[str],
            'date_created': datetime,
            'date_modified': datetime,
            'is_promoted': bool,
            'is_public': bool,
            'issue_choices': List[str],
            'program_area_choices': List[str],
            'status_choices': List[str],
            'title': str,
            'volume_choices': List[str]
        }

        self.attribute_map = {
            'bookmarks': 'bookmarks',
            'collected_type_choices': 'collected_type_choices',
            'date_created': 'date_created',
            'date_modified': 'date_modified',
            'is_promoted': 'is_promoted',
            'is_public': 'is_public',
            'issue_choices': 'issue_choices',
            'program_area_choices': 'program_area_choices',
            'status_choices': 'status_choices',
            'title': 'title',
            'volume_choices': 'volume_choices'
        }

        self._bookmarks = bookmarks
        self._collected_type_choices = collected_type_choices
        self._date_created = date_created
        self._date_modified = date_modified
        self._is_promoted = is_promoted
        self._is_public = is_public
        self._issue_choices = issue_choices
        self._program_area_choices = program_area_choices
        self._status_choices = status_choices
        self._title = title
        self._volume_choices = volume_choices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_2 of this Attributes2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bookmarks(self):
        """Gets the bookmarks of this Attributes2.

        This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection.

        :return: The bookmarks of this Attributes2.
        :rtype: bool
        """
        return self._bookmarks

    @bookmarks.setter
    def bookmarks(self, bookmarks):
        """Sets the bookmarks of this Attributes2.

        This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection.

        :param bookmarks: The bookmarks of this Attributes2.
        :type bookmarks: bool
        """

        self._bookmarks = bookmarks

    @property
    def collected_type_choices(self):
        """Gets the collected_type_choices of this Attributes2.

        A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection.

        :return: The collected_type_choices of this Attributes2.
        :rtype: List[str]
        """
        return self._collected_type_choices

    @collected_type_choices.setter
    def collected_type_choices(self, collected_type_choices):
        """Sets the collected_type_choices of this Attributes2.

        A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection.

        :param collected_type_choices: The collected_type_choices of this Attributes2.
        :type collected_type_choices: List[str]
        """

        self._collected_type_choices = collected_type_choices

    @property
    def date_created(self):
        """Gets the date_created of this Attributes2.

        The time at which the collection was created, as an iso8601 formatted timestamp.

        :return: The date_created of this Attributes2.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Attributes2.

        The time at which the collection was created, as an iso8601 formatted timestamp.

        :param date_created: The date_created of this Attributes2.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this Attributes2.

        The time at which the collection was last modified, as an iso8601 formatted timestamp.

        :return: The date_modified of this Attributes2.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Attributes2.

        The time at which the collection was last modified, as an iso8601 formatted timestamp.

        :param date_modified: The date_modified of this Attributes2.
        :type date_modified: datetime
        """

        self._date_modified = date_modified

    @property
    def is_promoted(self):
        """Gets the is_promoted of this Attributes2.

        ???

        :return: The is_promoted of this Attributes2.
        :rtype: bool
        """
        return self._is_promoted

    @is_promoted.setter
    def is_promoted(self, is_promoted):
        """Sets the is_promoted of this Attributes2.

        ???

        :param is_promoted: The is_promoted of this Attributes2.
        :type is_promoted: bool
        """

        self._is_promoted = is_promoted

    @property
    def is_public(self):
        """Gets the is_public of this Attributes2.

        This attribute indicates if a collection is viewable to a user with no special permissions.

        :return: The is_public of this Attributes2.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Attributes2.

        This attribute indicates if a collection is viewable to a user with no special permissions.

        :param is_public: The is_public of this Attributes2.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def issue_choices(self):
        """Gets the issue_choices of this Attributes2.

        A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection.

        :return: The issue_choices of this Attributes2.
        :rtype: List[str]
        """
        return self._issue_choices

    @issue_choices.setter
    def issue_choices(self, issue_choices):
        """Sets the issue_choices of this Attributes2.

        A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection.

        :param issue_choices: The issue_choices of this Attributes2.
        :type issue_choices: List[str]
        """

        self._issue_choices = issue_choices

    @property
    def program_area_choices(self):
        """Gets the program_area_choices of this Attributes2.

        A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of .

        :return: The program_area_choices of this Attributes2.
        :rtype: List[str]
        """
        return self._program_area_choices

    @program_area_choices.setter
    def program_area_choices(self, program_area_choices):
        """Sets the program_area_choices of this Attributes2.

        A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of .

        :param program_area_choices: The program_area_choices of this Attributes2.
        :type program_area_choices: List[str]
        """

        self._program_area_choices = program_area_choices

    @property
    def status_choices(self):
        """Gets the status_choices of this Attributes2.

        A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection.

        :return: The status_choices of this Attributes2.
        :rtype: List[str]
        """
        return self._status_choices

    @status_choices.setter
    def status_choices(self, status_choices):
        """Sets the status_choices of this Attributes2.

        A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection.

        :param status_choices: The status_choices of this Attributes2.
        :type status_choices: List[str]
        """

        self._status_choices = status_choices

    @property
    def title(self):
        """Gets the title of this Attributes2.

        The title of the collection.

        :return: The title of this Attributes2.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attributes2.

        The title of the collection.

        :param title: The title of this Attributes2.
        :type title: str
        """

        self._title = title

    @property
    def volume_choices(self):
        """Gets the volume_choices of this Attributes2.

        A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection.

        :return: The volume_choices of this Attributes2.
        :rtype: List[str]
        """
        return self._volume_choices

    @volume_choices.setter
    def volume_choices(self, volume_choices):
        """Sets the volume_choices of this Attributes2.

        A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection.

        :param volume_choices: The volume_choices of this Attributes2.
        :type volume_choices: List[str]
        """

        self._volume_choices = volume_choices
