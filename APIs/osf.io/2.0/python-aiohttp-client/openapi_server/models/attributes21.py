# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes21(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, current_user_can_comment: str=None, date_modified: datetime=None, extra: str=None, kind: str=None, materialized_path: str=None, name: str=None, path: str=None, size: str=None):
        """Attributes21 - a model defined in OpenAPI

        :param content_type: The content_type of this Attributes21.
        :param current_user_can_comment: The current_user_can_comment of this Attributes21.
        :param date_modified: The date_modified of this Attributes21.
        :param extra: The extra of this Attributes21.
        :param kind: The kind of this Attributes21.
        :param materialized_path: The materialized_path of this Attributes21.
        :param name: The name of this Attributes21.
        :param path: The path of this Attributes21.
        :param size: The size of this Attributes21.
        """
        self.openapi_types = {
            'content_type': str,
            'current_user_can_comment': str,
            'date_modified': datetime,
            'extra': str,
            'kind': str,
            'materialized_path': str,
            'name': str,
            'path': str,
            'size': str
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'current_user_can_comment': 'current_user_can_comment',
            'date_modified': 'date_modified',
            'extra': 'extra',
            'kind': 'kind',
            'materialized_path': 'materialized_path',
            'name': 'name',
            'path': 'path',
            'size': 'size'
        }

        self._content_type = content_type
        self._current_user_can_comment = current_user_can_comment
        self._date_modified = date_modified
        self._extra = extra
        self._kind = kind
        self._materialized_path = materialized_path
        self._name = name
        self._path = path
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes21':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_21 of this Attributes21.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Attributes21.

        Content type of the wiki (`text/markdown`).

        :return: The content_type of this Attributes21.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Attributes21.

        Content type of the wiki (`text/markdown`).

        :param content_type: The content_type of this Attributes21.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def current_user_can_comment(self):
        """Gets the current_user_can_comment of this Attributes21.

        Whether the current user is allowed to post comments on this wiki.

        :return: The current_user_can_comment of this Attributes21.
        :rtype: str
        """
        return self._current_user_can_comment

    @current_user_can_comment.setter
    def current_user_can_comment(self, current_user_can_comment):
        """Sets the current_user_can_comment of this Attributes21.

        Whether the current user is allowed to post comments on this wiki.

        :param current_user_can_comment: The current_user_can_comment of this Attributes21.
        :type current_user_can_comment: str
        """
        if current_user_can_comment is None:
            raise ValueError("Invalid value for `current_user_can_comment`, must not be `None`")

        self._current_user_can_comment = current_user_can_comment

    @property
    def date_modified(self):
        """Gets the date_modified of this Attributes21.

        The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.

        :return: The date_modified of this Attributes21.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this Attributes21.

        The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.

        :param date_modified: The date_modified of this Attributes21.
        :type date_modified: datetime
        """
        if date_modified is None:
            raise ValueError("Invalid value for `date_modified`, must not be `None`")

        self._date_modified = date_modified

    @property
    def extra(self):
        """Gets the extra of this Attributes21.

        A dictionary containing additional metadata about this wiki, including version information.

        :return: The extra of this Attributes21.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Attributes21.

        A dictionary containing additional metadata about this wiki, including version information.

        :param extra: The extra of this Attributes21.
        :type extra: str
        """
        if extra is None:
            raise ValueError("Invalid value for `extra`, must not be `None`")

        self._extra = extra

    @property
    def kind(self):
        """Gets the kind of this Attributes21.

        The type of object.

        :return: The kind of this Attributes21.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Attributes21.

        The type of object.

        :param kind: The kind of this Attributes21.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def materialized_path(self):
        """Gets the materialized_path of this Attributes21.

        Materialized path to the wiki object.

        :return: The materialized_path of this Attributes21.
        :rtype: str
        """
        return self._materialized_path

    @materialized_path.setter
    def materialized_path(self, materialized_path):
        """Sets the materialized_path of this Attributes21.

        Materialized path to the wiki object.

        :param materialized_path: The materialized_path of this Attributes21.
        :type materialized_path: str
        """
        if materialized_path is None:
            raise ValueError("Invalid value for `materialized_path`, must not be `None`")

        self._materialized_path = materialized_path

    @property
    def name(self):
        """Gets the name of this Attributes21.

        The name/title of the wiki page.

        :return: The name of this Attributes21.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attributes21.

        The name/title of the wiki page.

        :param name: The name of this Attributes21.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this Attributes21.

        Path to the wiki object.

        :return: The path of this Attributes21.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Attributes21.

        Path to the wiki object.

        :param path: The path of this Attributes21.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def size(self):
        """Gets the size of this Attributes21.

        Size of the wiki.

        :return: The size of this Attributes21.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Attributes21.

        Size of the wiki.

        :param size: The size of this Attributes21.
        :type size: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
