# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, date_registered: datetime=None, family_name: str=None, full_name: str=None, given_name: str=None, locale: str=None, middle_names: str=None, suffix: str=None, timezone: str=None):
        """Attributes11 - a model defined in OpenAPI

        :param active: The active of this Attributes11.
        :param date_registered: The date_registered of this Attributes11.
        :param family_name: The family_name of this Attributes11.
        :param full_name: The full_name of this Attributes11.
        :param given_name: The given_name of this Attributes11.
        :param locale: The locale of this Attributes11.
        :param middle_names: The middle_names of this Attributes11.
        :param suffix: The suffix of this Attributes11.
        :param timezone: The timezone of this Attributes11.
        """
        self.openapi_types = {
            'active': bool,
            'date_registered': datetime,
            'family_name': str,
            'full_name': str,
            'given_name': str,
            'locale': str,
            'middle_names': str,
            'suffix': str,
            'timezone': str
        }

        self.attribute_map = {
            'active': 'active',
            'date_registered': 'date_registered',
            'family_name': 'family_name',
            'full_name': 'full_name',
            'given_name': 'given_name',
            'locale': 'locale',
            'middle_names': 'middle_names',
            'suffix': 'suffix',
            'timezone': 'timezone'
        }

        self._active = active
        self._date_registered = date_registered
        self._family_name = family_name
        self._full_name = full_name
        self._given_name = given_name
        self._locale = locale
        self._middle_names = middle_names
        self._suffix = suffix
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_11 of this Attributes11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Attributes11.

        Whether or not the user is an active user.

        :return: The active of this Attributes11.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Attributes11.

        Whether or not the user is an active user.

        :param active: The active of this Attributes11.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def date_registered(self):
        """Gets the date_registered of this Attributes11.

        The time at which the user registered their account, as an iso8601 formatted timestamp.

        :return: The date_registered of this Attributes11.
        :rtype: datetime
        """
        return self._date_registered

    @date_registered.setter
    def date_registered(self, date_registered):
        """Sets the date_registered of this Attributes11.

        The time at which the user registered their account, as an iso8601 formatted timestamp.

        :param date_registered: The date_registered of this Attributes11.
        :type date_registered: datetime
        """
        if date_registered is None:
            raise ValueError("Invalid value for `date_registered`, must not be `None`")

        self._date_registered = date_registered

    @property
    def family_name(self):
        """Gets the family_name of this Attributes11.

        The family name of the user, used for bibliographic citations.

        :return: The family_name of this Attributes11.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Attributes11.

        The family name of the user, used for bibliographic citations.

        :param family_name: The family_name of this Attributes11.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def full_name(self):
        """Gets the full_name of this Attributes11.

        The full name of the user, used for display on the OSF.

        :return: The full_name of this Attributes11.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Attributes11.

        The full name of the user, used for display on the OSF.

        :param full_name: The full_name of this Attributes11.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def given_name(self):
        """Gets the given_name of this Attributes11.

        The given name of the user, used for bibliographic citations.

        :return: The given_name of this Attributes11.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Attributes11.

        The given name of the user, used for bibliographic citations.

        :param given_name: The given_name of this Attributes11.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def locale(self):
        """Gets the locale of this Attributes11.

        The user's locale, e.g. 'en_US'.

        :return: The locale of this Attributes11.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Attributes11.

        The user's locale, e.g. 'en_US'.

        :param locale: The locale of this Attributes11.
        :type locale: str
        """

        self._locale = locale

    @property
    def middle_names(self):
        """Gets the middle_names of this Attributes11.

        The middle names of the user, used for bibliographic citations.

        :return: The middle_names of this Attributes11.
        :rtype: str
        """
        return self._middle_names

    @middle_names.setter
    def middle_names(self, middle_names):
        """Sets the middle_names of this Attributes11.

        The middle names of the user, used for bibliographic citations.

        :param middle_names: The middle_names of this Attributes11.
        :type middle_names: str
        """

        self._middle_names = middle_names

    @property
    def suffix(self):
        """Gets the suffix of this Attributes11.

        The suffix of the user, used for bibliographic citations.

        :return: The suffix of this Attributes11.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Attributes11.

        The suffix of the user, used for bibliographic citations.

        :param suffix: The suffix of this Attributes11.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def timezone(self):
        """Gets the timezone of this Attributes11.

        The user's timezone, e.g. 'Etc/UTC'.

        :return: The timezone of this Attributes11.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Attributes11.

        The user's timezone, e.g. 'Etc/UTC'.

        :param timezone: The timezone of this Attributes11.
        :type timezone: str
        """

        self._timezone = timezone
