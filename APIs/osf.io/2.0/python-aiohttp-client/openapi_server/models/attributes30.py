# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes30(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, profile_url: str=None, provider: str=None):
        """Attributes30 - a model defined in OpenAPI

        :param display_name: The display_name of this Attributes30.
        :param profile_url: The profile_url of this Attributes30.
        :param provider: The provider of this Attributes30.
        """
        self.openapi_types = {
            'display_name': str,
            'profile_url': str,
            'provider': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'profile_url': 'profile_url',
            'provider': 'provider'
        }

        self._display_name = display_name
        self._profile_url = profile_url
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes30':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_30 of this Attributes30.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Attributes30.

        The user's display name on the third-party service

        :return: The display_name of this Attributes30.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Attributes30.

        The user's display name on the third-party service

        :param display_name: The display_name of this Attributes30.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def profile_url(self):
        """Gets the profile_url of this Attributes30.

        The link to user's profile on third-party service

        :return: The profile_url of this Attributes30.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this Attributes30.

        The link to user's profile on third-party service

        :param profile_url: The profile_url of this Attributes30.
        :type profile_url: str
        """

        self._profile_url = profile_url

    @property
    def provider(self):
        """Gets the provider of this Attributes30.

        The short name of the third-party service

        :return: The provider of this Attributes30.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Attributes30.

        The short name of the third-party service

        :param provider: The provider of this Attributes30.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
