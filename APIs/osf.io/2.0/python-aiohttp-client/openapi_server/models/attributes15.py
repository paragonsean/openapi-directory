# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attributes15(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, doi: str=None, publisher: str=None, title: str=None):
        """Attributes15 - a model defined in OpenAPI

        :param author: The author of this Attributes15.
        :param doi: The doi of this Attributes15.
        :param publisher: The publisher of this Attributes15.
        :param title: The title of this Attributes15.
        """
        self.openapi_types = {
            'author': str,
            'doi': str,
            'publisher': str,
            'title': str
        }

        self.attribute_map = {
            'author': 'author',
            'doi': 'doi',
            'publisher': 'publisher',
            'title': 'title'
        }

        self._author = author
        self._doi = doi
        self._publisher = publisher
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes15':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_15 of this Attributes15.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Attributes15.

        The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited.

        :return: The author of this Attributes15.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Attributes15.

        The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited.

        :param author: The author of this Attributes15.
        :type author: str
        """

        self._author = author

    @property
    def doi(self):
        """Gets the doi of this Attributes15.

        The DOI for the entity being cited, if one exists.

        :return: The doi of this Attributes15.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Attributes15.

        The DOI for the entity being cited, if one exists.

        :param doi: The doi of this Attributes15.
        :type doi: str
        """

        self._doi = doi

    @property
    def publisher(self):
        """Gets the publisher of this Attributes15.

        The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider.

        :return: The publisher of this Attributes15.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Attributes15.

        The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider.

        :param publisher: The publisher of this Attributes15.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def title(self):
        """Gets the title of this Attributes15.

        The title of the entity being cited.

        :return: The title of this Attributes15.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attributes15.

        The title of the entity being cited.

        :param title: The title of this Attributes15.
        :type title: str
        """

        self._title = title
