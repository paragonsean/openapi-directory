# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collected_metadata: str=None, linked_nodes: str=None, linked_preprints: str=None, linked_registrations: str=None, node_links: str=None, provider: str=None):
        """Relationships - a model defined in OpenAPI

        :param collected_metadata: The collected_metadata of this Relationships.
        :param linked_nodes: The linked_nodes of this Relationships.
        :param linked_preprints: The linked_preprints of this Relationships.
        :param linked_registrations: The linked_registrations of this Relationships.
        :param node_links: The node_links of this Relationships.
        :param provider: The provider of this Relationships.
        """
        self.openapi_types = {
            'collected_metadata': str,
            'linked_nodes': str,
            'linked_preprints': str,
            'linked_registrations': str,
            'node_links': str,
            'provider': str
        }

        self.attribute_map = {
            'collected_metadata': 'collected_metadata',
            'linked_nodes': 'linked_nodes',
            'linked_preprints': 'linked_preprints',
            'linked_registrations': 'linked_registrations',
            'node_links': 'node_links',
            'provider': 'provider'
        }

        self._collected_metadata = collected_metadata
        self._linked_nodes = linked_nodes
        self._linked_preprints = linked_preprints
        self._linked_registrations = linked_registrations
        self._node_links = node_links
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationships of this Relationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collected_metadata(self):
        """Gets the collected_metadata of this Relationships.

        A link to the list of metadata entries that are linked to the current collections.

        :return: The collected_metadata of this Relationships.
        :rtype: str
        """
        return self._collected_metadata

    @collected_metadata.setter
    def collected_metadata(self, collected_metadata):
        """Sets the collected_metadata of this Relationships.

        A link to the list of metadata entries that are linked to the current collections.

        :param collected_metadata: The collected_metadata of this Relationships.
        :type collected_metadata: str
        """

        self._collected_metadata = collected_metadata

    @property
    def linked_nodes(self):
        """Gets the linked_nodes of this Relationships.

        A link to the list of nodes that are linked to the current collection.

        :return: The linked_nodes of this Relationships.
        :rtype: str
        """
        return self._linked_nodes

    @linked_nodes.setter
    def linked_nodes(self, linked_nodes):
        """Sets the linked_nodes of this Relationships.

        A link to the list of nodes that are linked to the current collection.

        :param linked_nodes: The linked_nodes of this Relationships.
        :type linked_nodes: str
        """

        self._linked_nodes = linked_nodes

    @property
    def linked_preprints(self):
        """Gets the linked_preprints of this Relationships.

        A link to the list of preprints that are linked to the current collection.

        :return: The linked_preprints of this Relationships.
        :rtype: str
        """
        return self._linked_preprints

    @linked_preprints.setter
    def linked_preprints(self, linked_preprints):
        """Sets the linked_preprints of this Relationships.

        A link to the list of preprints that are linked to the current collection.

        :param linked_preprints: The linked_preprints of this Relationships.
        :type linked_preprints: str
        """

        self._linked_preprints = linked_preprints

    @property
    def linked_registrations(self):
        """Gets the linked_registrations of this Relationships.

        A link to the list of registrations that are linked to the current collection.

        :return: The linked_registrations of this Relationships.
        :rtype: str
        """
        return self._linked_registrations

    @linked_registrations.setter
    def linked_registrations(self, linked_registrations):
        """Sets the linked_registrations of this Relationships.

        A link to the list of registrations that are linked to the current collection.

        :param linked_registrations: The linked_registrations of this Relationships.
        :type linked_registrations: str
        """

        self._linked_registrations = linked_registrations

    @property
    def node_links(self):
        """Gets the node_links of this Relationships.

        A link to the list of nodes that are linked to the current collection.

        :return: The node_links of this Relationships.
        :rtype: str
        """
        return self._node_links

    @node_links.setter
    def node_links(self, node_links):
        """Sets the node_links of this Relationships.

        A link to the list of nodes that are linked to the current collection.

        :param node_links: The node_links of this Relationships.
        :type node_links: str
        """

        self._node_links = node_links

    @property
    def provider(self):
        """Gets the provider of this Relationships.

        A link to the list of preprints that this node relates to.

        :return: The provider of this Relationships.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Relationships.

        A link to the list of preprints that this node relates to.

        :param provider: The provider of this Relationships.
        :type provider: str
        """

        self._provider = provider
