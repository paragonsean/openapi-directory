/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OsfApiv2Documentation);
  }
}(this, function(expect, OsfApiv2Documentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OsfApiv2Documentation.Relationships12();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Relationships12', function() {
    it('should create an instance of Relationships12', function() {
      // uncomment below and update the code to test Relationships12
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be.a(OsfApiv2Documentation.Relationships12);
    });

    it('should have the property affiliatedInstitutions (base name: "affiliated_institutions")', function() {
      // uncomment below and update the code to test the property affiliatedInstitutions
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property children (base name: "children")', function() {
      // uncomment below and update the code to test the property children
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property citation (base name: "citation")', function() {
      // uncomment below and update the code to test the property citation
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property contributors (base name: "contributors")', function() {
      // uncomment below and update the code to test the property contributors
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property files (base name: "files")', function() {
      // uncomment below and update the code to test the property files
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property forks (base name: "forks")', function() {
      // uncomment below and update the code to test the property forks
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property identifiers (base name: "identifiers")', function() {
      // uncomment below and update the code to test the property identifiers
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property linkedNodes (base name: "linked_nodes")', function() {
      // uncomment below and update the code to test the property linkedNodes
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property logs (base name: "logs")', function() {
      // uncomment below and update the code to test the property logs
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property nodeLinks (base name: "node_links")', function() {
      // uncomment below and update the code to test the property nodeLinks
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property registeredBy (base name: "registered_by")', function() {
      // uncomment below and update the code to test the property registeredBy
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property registeredFrom (base name: "registered_from")', function() {
      // uncomment below and update the code to test the property registeredFrom
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property registrationSchema (base name: "registration_schema")', function() {
      // uncomment below and update the code to test the property registrationSchema
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property root (base name: "root")', function() {
      // uncomment below and update the code to test the property root
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property viewOnlyLinks (base name: "view_only_links")', function() {
      // uncomment below and update the code to test the property viewOnlyLinks
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

    it('should have the property wikis (base name: "wikis")', function() {
      // uncomment below and update the code to test the property wikis
      //var instance = new OsfApiv2Documentation.Relationships12();
      //expect(instance).to.be();
    });

  });

}));
