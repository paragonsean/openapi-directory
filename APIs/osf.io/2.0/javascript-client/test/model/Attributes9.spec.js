/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OsfApiv2Documentation);
  }
}(this, function(expect, OsfApiv2Documentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OsfApiv2Documentation.Attributes9();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Attributes9', function() {
    it('should create an instance of Attributes9', function() {
      // uncomment below and update the code to test Attributes9
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be.a(OsfApiv2Documentation.Attributes9);
    });

    it('should have the property checkout (base name: "checkout")', function() {
      // uncomment below and update the code to test the property checkout
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property currentUserCanComment (base name: "current_user_can_comment")', function() {
      // uncomment below and update the code to test the property currentUserCanComment
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property currentVersion (base name: "current_version")', function() {
      // uncomment below and update the code to test the property currentVersion
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "date_created")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property dateModified (base name: "date_modified")', function() {
      // uncomment below and update the code to test the property dateModified
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property deleteAllowed (base name: "delete_allowed")', function() {
      // uncomment below and update the code to test the property deleteAllowed
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property extra (base name: "extra")', function() {
      // uncomment below and update the code to test the property extra
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property guid (base name: "guid")', function() {
      // uncomment below and update the code to test the property guid
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property lastTouched (base name: "last_touched")', function() {
      // uncomment below and update the code to test the property lastTouched
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property materializedPath (base name: "materialized_path")', function() {
      // uncomment below and update the code to test the property materializedPath
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new OsfApiv2Documentation.Attributes9();
      //expect(instance).to.be();
    });

  });

}));
