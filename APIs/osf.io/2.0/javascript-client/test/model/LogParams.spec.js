/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OsfApiv2Documentation);
  }
}(this, function(expect, OsfApiv2Documentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OsfApiv2Documentation.LogParams();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LogParams', function() {
    it('should create an instance of LogParams', function() {
      // uncomment below and update the code to test LogParams
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be.a(OsfApiv2Documentation.LogParams);
    });

    it('should have the property addon (base name: "addon")', function() {
      // uncomment below and update the code to test the property addon
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property anonymousLink (base name: "anonymous_link")', function() {
      // uncomment below and update the code to test the property anonymousLink
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property bucket (base name: "bucket")', function() {
      // uncomment below and update the code to test the property bucket
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property citationName (base name: "citation_name")', function() {
      // uncomment below and update the code to test the property citationName
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property contributors (base name: "contributors")', function() {
      // uncomment below and update the code to test the property contributors
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property dataSet (base name: "data_set")', function() {
      // uncomment below and update the code to test the property dataSet
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property figshareTitle (base name: "figshare_title")', function() {
      // uncomment below and update the code to test the property figshareTitle
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property file (base name: "file")', function() {
      // uncomment below and update the code to test the property file
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property filename (base name: "filename")', function() {
      // uncomment below and update the code to test the property filename
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property folder (base name: "folder")', function() {
      // uncomment below and update the code to test the property folder
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property folderName (base name: "folder_name")', function() {
      // uncomment below and update the code to test the property folderName
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property forwardUrl (base name: "forward_url")', function() {
      // uncomment below and update the code to test the property forwardUrl
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property githubRepo (base name: "github_repo")', function() {
      // uncomment below and update the code to test the property githubRepo
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property githubUser (base name: "github_user")', function() {
      // uncomment below and update the code to test the property githubUser
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property identifiers (base name: "identifiers")', function() {
      // uncomment below and update the code to test the property identifiers
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property institution (base name: "institution")', function() {
      // uncomment below and update the code to test the property institution
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property oldPage (base name: "old_page")', function() {
      // uncomment below and update the code to test the property oldPage
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property page (base name: "page")', function() {
      // uncomment below and update the code to test the property page
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property pageId (base name: "page_id")', function() {
      // uncomment below and update the code to test the property pageId
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property paramsNode (base name: "params_node")', function() {
      // uncomment below and update the code to test the property paramsNode
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property paramsProject (base name: "params_project")', function() {
      // uncomment below and update the code to test the property paramsProject
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property pointer (base name: "pointer")', function() {
      // uncomment below and update the code to test the property pointer
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property preprint (base name: "preprint")', function() {
      // uncomment below and update the code to test the property preprint
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property preprintProvider (base name: "preprint_provider")', function() {
      // uncomment below and update the code to test the property preprintProvider
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property previousInstitution (base name: "previous_institution")', function() {
      // uncomment below and update the code to test the property previousInstitution
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property study (base name: "study")', function() {
      // uncomment below and update the code to test the property study
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property tag (base name: "tag")', function() {
      // uncomment below and update the code to test the property tag
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property templateNode (base name: "template_node")', function() {
      // uncomment below and update the code to test the property templateNode
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property titleNew (base name: "title_new")', function() {
      // uncomment below and update the code to test the property titleNew
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property titleOriginal (base name: "title_original")', function() {
      // uncomment below and update the code to test the property titleOriginal
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property updatedFields (base name: "updated_fields")', function() {
      // uncomment below and update the code to test the property updatedFields
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property urls (base name: "urls")', function() {
      // uncomment below and update the code to test the property urls
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

    it('should have the property wiki (base name: "wiki")', function() {
      // uncomment below and update the code to test the property wiki
      //var instance = new OsfApiv2Documentation.LogParams();
      //expect(instance).to.be();
    });

  });

}));
