/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OsfApiv2Documentation);
  }
}(this, function(expect, OsfApiv2Documentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OsfApiv2Documentation.CollectionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CollectionsApi', function() {
    describe('collectionsAddMetadata', function() {
      it('should call collectionsAddMetadata successfully', function(done) {
        //uncomment below and update the code to test collectionsAddMetadata
        //instance.collectionsAddMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsCollectedMetadata', function() {
      it('should call collectionsCollectedMetadata successfully', function(done) {
        //uncomment below and update the code to test collectionsCollectedMetadata
        //instance.collectionsCollectedMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsCreate', function() {
      it('should call collectionsCreate successfully', function(done) {
        //uncomment below and update the code to test collectionsCreate
        //instance.collectionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsDelete', function() {
      it('should call collectionsDelete successfully', function(done) {
        //uncomment below and update the code to test collectionsDelete
        //instance.collectionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsDetail', function() {
      it('should call collectionsDetail successfully', function(done) {
        //uncomment below and update the code to test collectionsDetail
        //instance.collectionsDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedNodesList', function() {
      it('should call collectionsLinkedNodesList successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedNodesList
        //instance.collectionsLinkedNodesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedNodesRelationships', function() {
      it('should call collectionsLinkedNodesRelationships successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedNodesRelationships
        //instance.collectionsLinkedNodesRelationships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedNodesRelationshipsCreate', function() {
      it('should call collectionsLinkedNodesRelationshipsCreate successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedNodesRelationshipsCreate
        //instance.collectionsLinkedNodesRelationshipsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedNodesRelationshipsDelete', function() {
      it('should call collectionsLinkedNodesRelationshipsDelete successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedNodesRelationshipsDelete
        //instance.collectionsLinkedNodesRelationshipsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedPreprintsList', function() {
      it('should call collectionsLinkedPreprintsList successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedPreprintsList
        //instance.collectionsLinkedPreprintsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedRegistrationsList', function() {
      it('should call collectionsLinkedRegistrationsList successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedRegistrationsList
        //instance.collectionsLinkedRegistrationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedRegistrationsRelationships', function() {
      it('should call collectionsLinkedRegistrationsRelationships successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedRegistrationsRelationships
        //instance.collectionsLinkedRegistrationsRelationships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedRegistrationsRelationshipsCreate', function() {
      it('should call collectionsLinkedRegistrationsRelationshipsCreate successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedRegistrationsRelationshipsCreate
        //instance.collectionsLinkedRegistrationsRelationshipsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsLinkedRegistrationsRelationshipsDelete', function() {
      it('should call collectionsLinkedRegistrationsRelationshipsDelete successfully', function(done) {
        //uncomment below and update the code to test collectionsLinkedRegistrationsRelationshipsDelete
        //instance.collectionsLinkedRegistrationsRelationshipsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsList', function() {
      it('should call collectionsList successfully', function(done) {
        //uncomment below and update the code to test collectionsList
        //instance.collectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsMetadataDelete', function() {
      it('should call collectionsMetadataDelete successfully', function(done) {
        //uncomment below and update the code to test collectionsMetadataDelete
        //instance.collectionsMetadataDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsMetadataDetail', function() {
      it('should call collectionsMetadataDetail successfully', function(done) {
        //uncomment below and update the code to test collectionsMetadataDetail
        //instance.collectionsMetadataDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsMetadataRegistrationsDetail', function() {
      it('should call collectionsMetadataRegistrationsDetail successfully', function(done) {
        //uncomment below and update the code to test collectionsMetadataRegistrationsDetail
        //instance.collectionsMetadataRegistrationsDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsMetadataRegistrationsList', function() {
      it('should call collectionsMetadataRegistrationsList successfully', function(done) {
        //uncomment below and update the code to test collectionsMetadataRegistrationsList
        //instance.collectionsMetadataRegistrationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsMetadataSubjectsRelationships', function() {
      it('should call collectionsMetadataSubjectsRelationships successfully', function(done) {
        //uncomment below and update the code to test collectionsMetadataSubjectsRelationships
        //instance.collectionsMetadataSubjectsRelationships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsMetadataSubjectsRelationshipsUpdate', function() {
      it('should call collectionsMetadataSubjectsRelationshipsUpdate successfully', function(done) {
        //uncomment below and update the code to test collectionsMetadataSubjectsRelationshipsUpdate
        //instance.collectionsMetadataSubjectsRelationshipsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
