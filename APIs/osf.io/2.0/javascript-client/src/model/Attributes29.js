/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes29 model module.
 * @module model/Attributes29
 * @version 2.0
 */
class Attributes29 {
    /**
     * Constructs a new <code>Attributes29</code>.
     * The properties of the user addon entity.
     * @alias module:model/Attributes29
     * @param userHasAuth {Boolean} Whether or not the user has access to this user addon.
     */
    constructor(userHasAuth) { 
        
        Attributes29.initialize(this, userHasAuth);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userHasAuth) { 
        obj['user_has_auth'] = userHasAuth;
    }

    /**
     * Constructs a <code>Attributes29</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes29} obj Optional instance to populate.
     * @return {module:model/Attributes29} The populated <code>Attributes29</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes29();

            if (data.hasOwnProperty('user_has_auth')) {
                obj['user_has_auth'] = ApiClient.convertToType(data['user_has_auth'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes29</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes29</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attributes29.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Attributes29.RequiredProperties = ["user_has_auth"];

/**
 * Whether or not the user has access to this user addon.
 * @member {Boolean} user_has_auth
 */
Attributes29.prototype['user_has_auth'] = undefined;






export default Attributes29;

