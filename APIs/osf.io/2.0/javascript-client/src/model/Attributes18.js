/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes18 model module.
 * @module model/Attributes18
 * @version 2.0
 */
class Attributes18 {
    /**
     * Constructs a new <code>Attributes18</code>.
     * The properties of the preprint entity.
     * @alias module:model/Attributes18
     */
    constructor() { 
        
        Attributes18.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes18</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes18} obj Optional instance to populate.
     * @return {module:model/Attributes18} The populated <code>Attributes18</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes18();

            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_modified')) {
                obj['date_modified'] = ApiClient.convertToType(data['date_modified'], 'Date');
            }
            if (data.hasOwnProperty('date_published')) {
                obj['date_published'] = ApiClient.convertToType(data['date_published'], 'Date');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('is_preprint_orphan')) {
                obj['is_preprint_orphan'] = ApiClient.convertToType(data['is_preprint_orphan'], 'Boolean');
            }
            if (data.hasOwnProperty('license_record')) {
                obj['license_record'] = ApiClient.convertToType(data['license_record'], 'String');
            }
            if (data.hasOwnProperty('subjects')) {
                obj['subjects'] = ApiClient.convertToType(data['subjects'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes18</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes18</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['license_record'] && !(typeof data['license_record'] === 'string' || data['license_record'] instanceof String)) {
            throw new Error("Expected the field `license_record` to be a primitive type in the JSON string but got " + data['license_record']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjects'])) {
            throw new Error("Expected the field `subjects` to be an array in the JSON data but got " + data['subjects']);
        }

        return true;
    }


}



/**
 * The time at which the preprint was created, as an iso8601 formatted timestamp.
 * @member {Date} date_created
 */
Attributes18.prototype['date_created'] = undefined;

/**
 * The time at which the preprint was last modified, as an iso8601 formatted timestamp.
 * @member {Date} date_modified
 */
Attributes18.prototype['date_modified'] = undefined;

/**
 * The time at which the preprint was published, as an iso8601 formatted timestamp.
 * @member {Date} date_published
 */
Attributes18.prototype['date_published'] = undefined;

/**
 * The DOI of the associated journal article, as entered by the user, if the preprint is published.
 * @member {String} doi
 */
Attributes18.prototype['doi'] = undefined;

/**
 * Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions.
 * @member {Boolean} is_preprint_orphan
 */
Attributes18.prototype['is_preprint_orphan'] = undefined;

/**
 * The metadata (copyright year and holder) associated with a license, required for certain licenses.
 * @member {String} license_record
 */
Attributes18.prototype['license_record'] = undefined;

/**
 * A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject.
 * @member {Array.<String>} subjects
 */
Attributes18.prototype['subjects'] = undefined;






export default Attributes18;

