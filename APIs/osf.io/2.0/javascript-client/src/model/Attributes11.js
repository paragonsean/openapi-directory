/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes11 model module.
 * @module model/Attributes11
 * @version 2.0
 */
class Attributes11 {
    /**
     * Constructs a new <code>Attributes11</code>.
     * The properties of the user entity.
     * @alias module:model/Attributes11
     * @param active {Boolean} Whether or not the user is an active user.
     * @param dateRegistered {Date} The time at which the user registered their account, as an iso8601 formatted timestamp.
     * @param fullName {String} The full name of the user, used for display on the OSF.
     */
    constructor(active, dateRegistered, fullName) { 
        
        Attributes11.initialize(this, active, dateRegistered, fullName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, dateRegistered, fullName) { 
        obj['active'] = active;
        obj['date_registered'] = dateRegistered;
        obj['full_name'] = fullName;
    }

    /**
     * Constructs a <code>Attributes11</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes11} obj Optional instance to populate.
     * @return {module:model/Attributes11} The populated <code>Attributes11</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes11();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('date_registered')) {
                obj['date_registered'] = ApiClient.convertToType(data['date_registered'], 'Date');
            }
            if (data.hasOwnProperty('family_name')) {
                obj['family_name'] = ApiClient.convertToType(data['family_name'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('given_name')) {
                obj['given_name'] = ApiClient.convertToType(data['given_name'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('middle_names')) {
                obj['middle_names'] = ApiClient.convertToType(data['middle_names'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes11</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes11</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attributes11.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['family_name'] && !(typeof data['family_name'] === 'string' || data['family_name'] instanceof String)) {
            throw new Error("Expected the field `family_name` to be a primitive type in the JSON string but got " + data['family_name']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['given_name'] && !(typeof data['given_name'] === 'string' || data['given_name'] instanceof String)) {
            throw new Error("Expected the field `given_name` to be a primitive type in the JSON string but got " + data['given_name']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['middle_names'] && !(typeof data['middle_names'] === 'string' || data['middle_names'] instanceof String)) {
            throw new Error("Expected the field `middle_names` to be a primitive type in the JSON string but got " + data['middle_names']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}

Attributes11.RequiredProperties = ["active", "date_registered", "full_name"];

/**
 * Whether or not the user is an active user.
 * @member {Boolean} active
 */
Attributes11.prototype['active'] = undefined;

/**
 * The time at which the user registered their account, as an iso8601 formatted timestamp.
 * @member {Date} date_registered
 */
Attributes11.prototype['date_registered'] = undefined;

/**
 * The family name of the user, used for bibliographic citations.
 * @member {String} family_name
 */
Attributes11.prototype['family_name'] = undefined;

/**
 * The full name of the user, used for display on the OSF.
 * @member {String} full_name
 */
Attributes11.prototype['full_name'] = undefined;

/**
 * The given name of the user, used for bibliographic citations.
 * @member {String} given_name
 */
Attributes11.prototype['given_name'] = undefined;

/**
 * The user's locale, e.g. 'en_US'.
 * @member {String} locale
 */
Attributes11.prototype['locale'] = undefined;

/**
 * The middle names of the user, used for bibliographic citations.
 * @member {String} middle_names
 */
Attributes11.prototype['middle_names'] = undefined;

/**
 * The suffix of the user, used for bibliographic citations.
 * @member {String} suffix
 */
Attributes11.prototype['suffix'] = undefined;

/**
 * The user's timezone, e.g. 'Etc/UTC'.
 * @member {String} timezone
 */
Attributes11.prototype['timezone'] = undefined;






export default Attributes11;

