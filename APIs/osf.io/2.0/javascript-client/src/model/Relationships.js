/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relationships model module.
 * @module model/Relationships
 * @version 2.0
 */
class Relationships {
    /**
     * Constructs a new <code>Relationships</code>.
     * URLs to other entities or entity collections that have a relationship to the node entity.
     * @alias module:model/Relationships
     */
    constructor() { 
        
        Relationships.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relationships</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationships} obj Optional instance to populate.
     * @return {module:model/Relationships} The populated <code>Relationships</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationships();

            if (data.hasOwnProperty('collected_metadata')) {
                obj['collected_metadata'] = ApiClient.convertToType(data['collected_metadata'], 'String');
            }
            if (data.hasOwnProperty('linked_nodes')) {
                obj['linked_nodes'] = ApiClient.convertToType(data['linked_nodes'], 'String');
            }
            if (data.hasOwnProperty('linked_preprints')) {
                obj['linked_preprints'] = ApiClient.convertToType(data['linked_preprints'], 'String');
            }
            if (data.hasOwnProperty('linked_registrations')) {
                obj['linked_registrations'] = ApiClient.convertToType(data['linked_registrations'], 'String');
            }
            if (data.hasOwnProperty('node_links')) {
                obj['node_links'] = ApiClient.convertToType(data['node_links'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relationships</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relationships</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collected_metadata'] && !(typeof data['collected_metadata'] === 'string' || data['collected_metadata'] instanceof String)) {
            throw new Error("Expected the field `collected_metadata` to be a primitive type in the JSON string but got " + data['collected_metadata']);
        }
        // ensure the json data is a string
        if (data['linked_nodes'] && !(typeof data['linked_nodes'] === 'string' || data['linked_nodes'] instanceof String)) {
            throw new Error("Expected the field `linked_nodes` to be a primitive type in the JSON string but got " + data['linked_nodes']);
        }
        // ensure the json data is a string
        if (data['linked_preprints'] && !(typeof data['linked_preprints'] === 'string' || data['linked_preprints'] instanceof String)) {
            throw new Error("Expected the field `linked_preprints` to be a primitive type in the JSON string but got " + data['linked_preprints']);
        }
        // ensure the json data is a string
        if (data['linked_registrations'] && !(typeof data['linked_registrations'] === 'string' || data['linked_registrations'] instanceof String)) {
            throw new Error("Expected the field `linked_registrations` to be a primitive type in the JSON string but got " + data['linked_registrations']);
        }
        // ensure the json data is a string
        if (data['node_links'] && !(typeof data['node_links'] === 'string' || data['node_links'] instanceof String)) {
            throw new Error("Expected the field `node_links` to be a primitive type in the JSON string but got " + data['node_links']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }

        return true;
    }


}



/**
 * A link to the list of metadata entries that are linked to the current collections.
 * @member {String} collected_metadata
 */
Relationships.prototype['collected_metadata'] = undefined;

/**
 * A link to the list of nodes that are linked to the current collection.
 * @member {String} linked_nodes
 */
Relationships.prototype['linked_nodes'] = undefined;

/**
 * A link to the list of preprints that are linked to the current collection.
 * @member {String} linked_preprints
 */
Relationships.prototype['linked_preprints'] = undefined;

/**
 * A link to the list of registrations that are linked to the current collection.
 * @member {String} linked_registrations
 */
Relationships.prototype['linked_registrations'] = undefined;

/**
 * A link to the list of nodes that are linked to the current collection.
 * @member {String} node_links
 */
Relationships.prototype['node_links'] = undefined;

/**
 * A link to the list of preprints that this node relates to.
 * @member {String} provider
 */
Relationships.prototype['provider'] = undefined;






export default Relationships;

