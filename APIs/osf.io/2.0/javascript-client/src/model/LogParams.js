/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogParams model module.
 * @module model/LogParams
 * @version 2.0
 */
class LogParams {
    /**
     * Constructs a new <code>LogParams</code>.
     * The type of action performed on the OSF. See description for full list of possible actions.
     * @alias module:model/LogParams
     */
    constructor() { 
        
        LogParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogParams} obj Optional instance to populate.
     * @return {module:model/LogParams} The populated <code>LogParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogParams();

            if (data.hasOwnProperty('addon')) {
                obj['addon'] = ApiClient.convertToType(data['addon'], 'String');
            }
            if (data.hasOwnProperty('anonymous_link')) {
                obj['anonymous_link'] = ApiClient.convertToType(data['anonymous_link'], 'Boolean');
            }
            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('citation_name')) {
                obj['citation_name'] = ApiClient.convertToType(data['citation_name'], 'String');
            }
            if (data.hasOwnProperty('contributors')) {
                obj['contributors'] = ApiClient.convertToType(data['contributors'], 'String');
            }
            if (data.hasOwnProperty('data_set')) {
                obj['data_set'] = ApiClient.convertToType(data['data_set'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('figshare_title')) {
                obj['figshare_title'] = ApiClient.convertToType(data['figshare_title'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], 'String');
            }
            if (data.hasOwnProperty('folder_name')) {
                obj['folder_name'] = ApiClient.convertToType(data['folder_name'], 'String');
            }
            if (data.hasOwnProperty('forward_url')) {
                obj['forward_url'] = ApiClient.convertToType(data['forward_url'], 'String');
            }
            if (data.hasOwnProperty('github_repo')) {
                obj['github_repo'] = ApiClient.convertToType(data['github_repo'], 'String');
            }
            if (data.hasOwnProperty('github_user')) {
                obj['github_user'] = ApiClient.convertToType(data['github_user'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], 'String');
            }
            if (data.hasOwnProperty('institution')) {
                obj['institution'] = ApiClient.convertToType(data['institution'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('old_page')) {
                obj['old_page'] = ApiClient.convertToType(data['old_page'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'String');
            }
            if (data.hasOwnProperty('page_id')) {
                obj['page_id'] = ApiClient.convertToType(data['page_id'], 'String');
            }
            if (data.hasOwnProperty('params_node')) {
                obj['params_node'] = ApiClient.convertToType(data['params_node'], 'String');
            }
            if (data.hasOwnProperty('params_project')) {
                obj['params_project'] = ApiClient.convertToType(data['params_project'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('pointer')) {
                obj['pointer'] = ApiClient.convertToType(data['pointer'], 'String');
            }
            if (data.hasOwnProperty('preprint')) {
                obj['preprint'] = ApiClient.convertToType(data['preprint'], 'String');
            }
            if (data.hasOwnProperty('preprint_provider')) {
                obj['preprint_provider'] = ApiClient.convertToType(data['preprint_provider'], 'String');
            }
            if (data.hasOwnProperty('previous_institution')) {
                obj['previous_institution'] = ApiClient.convertToType(data['previous_institution'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('study')) {
                obj['study'] = ApiClient.convertToType(data['study'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('template_node')) {
                obj['template_node'] = ApiClient.convertToType(data['template_node'], 'String');
            }
            if (data.hasOwnProperty('title_new')) {
                obj['title_new'] = ApiClient.convertToType(data['title_new'], 'String');
            }
            if (data.hasOwnProperty('title_original')) {
                obj['title_original'] = ApiClient.convertToType(data['title_original'], 'String');
            }
            if (data.hasOwnProperty('updated_fields')) {
                obj['updated_fields'] = ApiClient.convertToType(data['updated_fields'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('wiki')) {
                obj['wiki'] = ApiClient.convertToType(data['wiki'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addon'] && !(typeof data['addon'] === 'string' || data['addon'] instanceof String)) {
            throw new Error("Expected the field `addon` to be a primitive type in the JSON string but got " + data['addon']);
        }
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['citation_name'] && !(typeof data['citation_name'] === 'string' || data['citation_name'] instanceof String)) {
            throw new Error("Expected the field `citation_name` to be a primitive type in the JSON string but got " + data['citation_name']);
        }
        // ensure the json data is a string
        if (data['contributors'] && !(typeof data['contributors'] === 'string' || data['contributors'] instanceof String)) {
            throw new Error("Expected the field `contributors` to be a primitive type in the JSON string but got " + data['contributors']);
        }
        // ensure the json data is a string
        if (data['data_set'] && !(typeof data['data_set'] === 'string' || data['data_set'] instanceof String)) {
            throw new Error("Expected the field `data_set` to be a primitive type in the JSON string but got " + data['data_set']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['figshare_title'] && !(typeof data['figshare_title'] === 'string' || data['figshare_title'] instanceof String)) {
            throw new Error("Expected the field `figshare_title` to be a primitive type in the JSON string but got " + data['figshare_title']);
        }
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['folder'] && !(typeof data['folder'] === 'string' || data['folder'] instanceof String)) {
            throw new Error("Expected the field `folder` to be a primitive type in the JSON string but got " + data['folder']);
        }
        // ensure the json data is a string
        if (data['folder_name'] && !(typeof data['folder_name'] === 'string' || data['folder_name'] instanceof String)) {
            throw new Error("Expected the field `folder_name` to be a primitive type in the JSON string but got " + data['folder_name']);
        }
        // ensure the json data is a string
        if (data['forward_url'] && !(typeof data['forward_url'] === 'string' || data['forward_url'] instanceof String)) {
            throw new Error("Expected the field `forward_url` to be a primitive type in the JSON string but got " + data['forward_url']);
        }
        // ensure the json data is a string
        if (data['github_repo'] && !(typeof data['github_repo'] === 'string' || data['github_repo'] instanceof String)) {
            throw new Error("Expected the field `github_repo` to be a primitive type in the JSON string but got " + data['github_repo']);
        }
        // ensure the json data is a string
        if (data['github_user'] && !(typeof data['github_user'] === 'string' || data['github_user'] instanceof String)) {
            throw new Error("Expected the field `github_user` to be a primitive type in the JSON string but got " + data['github_user']);
        }
        // ensure the json data is a string
        if (data['identifiers'] && !(typeof data['identifiers'] === 'string' || data['identifiers'] instanceof String)) {
            throw new Error("Expected the field `identifiers` to be a primitive type in the JSON string but got " + data['identifiers']);
        }
        // ensure the json data is a string
        if (data['institution'] && !(typeof data['institution'] === 'string' || data['institution'] instanceof String)) {
            throw new Error("Expected the field `institution` to be a primitive type in the JSON string but got " + data['institution']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['old_page'] && !(typeof data['old_page'] === 'string' || data['old_page'] instanceof String)) {
            throw new Error("Expected the field `old_page` to be a primitive type in the JSON string but got " + data['old_page']);
        }
        // ensure the json data is a string
        if (data['page'] && !(typeof data['page'] === 'string' || data['page'] instanceof String)) {
            throw new Error("Expected the field `page` to be a primitive type in the JSON string but got " + data['page']);
        }
        // ensure the json data is a string
        if (data['page_id'] && !(typeof data['page_id'] === 'string' || data['page_id'] instanceof String)) {
            throw new Error("Expected the field `page_id` to be a primitive type in the JSON string but got " + data['page_id']);
        }
        // ensure the json data is a string
        if (data['params_node'] && !(typeof data['params_node'] === 'string' || data['params_node'] instanceof String)) {
            throw new Error("Expected the field `params_node` to be a primitive type in the JSON string but got " + data['params_node']);
        }
        // ensure the json data is a string
        if (data['params_project'] && !(typeof data['params_project'] === 'string' || data['params_project'] instanceof String)) {
            throw new Error("Expected the field `params_project` to be a primitive type in the JSON string but got " + data['params_project']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['pointer'] && !(typeof data['pointer'] === 'string' || data['pointer'] instanceof String)) {
            throw new Error("Expected the field `pointer` to be a primitive type in the JSON string but got " + data['pointer']);
        }
        // ensure the json data is a string
        if (data['preprint'] && !(typeof data['preprint'] === 'string' || data['preprint'] instanceof String)) {
            throw new Error("Expected the field `preprint` to be a primitive type in the JSON string but got " + data['preprint']);
        }
        // ensure the json data is a string
        if (data['preprint_provider'] && !(typeof data['preprint_provider'] === 'string' || data['preprint_provider'] instanceof String)) {
            throw new Error("Expected the field `preprint_provider` to be a primitive type in the JSON string but got " + data['preprint_provider']);
        }
        // ensure the json data is a string
        if (data['previous_institution'] && !(typeof data['previous_institution'] === 'string' || data['previous_institution'] instanceof String)) {
            throw new Error("Expected the field `previous_institution` to be a primitive type in the JSON string but got " + data['previous_institution']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['study'] && !(typeof data['study'] === 'string' || data['study'] instanceof String)) {
            throw new Error("Expected the field `study` to be a primitive type in the JSON string but got " + data['study']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['template_node'] && !(typeof data['template_node'] === 'string' || data['template_node'] instanceof String)) {
            throw new Error("Expected the field `template_node` to be a primitive type in the JSON string but got " + data['template_node']);
        }
        // ensure the json data is a string
        if (data['title_new'] && !(typeof data['title_new'] === 'string' || data['title_new'] instanceof String)) {
            throw new Error("Expected the field `title_new` to be a primitive type in the JSON string but got " + data['title_new']);
        }
        // ensure the json data is a string
        if (data['title_original'] && !(typeof data['title_original'] === 'string' || data['title_original'] instanceof String)) {
            throw new Error("Expected the field `title_original` to be a primitive type in the JSON string but got " + data['title_original']);
        }
        // ensure the json data is a string
        if (data['updated_fields'] && !(typeof data['updated_fields'] === 'string' || data['updated_fields'] instanceof String)) {
            throw new Error("Expected the field `updated_fields` to be a primitive type in the JSON string but got " + data['updated_fields']);
        }
        // ensure the json data is a string
        if (data['urls'] && !(typeof data['urls'] === 'string' || data['urls'] instanceof String)) {
            throw new Error("Expected the field `urls` to be a primitive type in the JSON string but got " + data['urls']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['wiki'] && !(typeof data['wiki'] === 'string' || data['wiki'] instanceof String)) {
            throw new Error("Expected the field `wiki` to be a primitive type in the JSON string but got " + data['wiki']);
        }

        return true;
    }


}



/**
 * The addon associated with the connected node.
 * @member {String} addon
 */
LogParams.prototype['addon'] = undefined;

/**
 * The view only link added to the node was anonymous.
 * @member {Boolean} anonymous_link
 */
LogParams.prototype['anonymous_link'] = undefined;

/**
 * The Amazon s3 bucket connected to the connected node.
 * @member {String} bucket
 */
LogParams.prototype['bucket'] = undefined;

/**
 * Name of citation associated with the connected node.
 * @member {String} citation_name
 */
LogParams.prototype['citation_name'] = undefined;

/**
 * List of contributors on the connected node involved in the action represented by this node log.
 * @member {String} contributors
 */
LogParams.prototype['contributors'] = undefined;

/**
 * The dataset associated with the connected node.
 * @member {String} data_set
 */
LogParams.prototype['data_set'] = undefined;

/**
 * A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title.
 * @member {String} destination
 */
LogParams.prototype['destination'] = undefined;

/**
 * Title of the fighshare project associated with this node log
 * @member {String} figshare_title
 */
LogParams.prototype['figshare_title'] = undefined;

/**
 * Dictionary with information about the file involved with the log.
 * @member {String} file
 */
LogParams.prototype['file'] = undefined;

/**
 * Filename for the file associated with the log.
 * @member {String} filename
 */
LogParams.prototype['filename'] = undefined;

/**
 * Folder associated with the log.
 * @member {String} folder
 */
LogParams.prototype['folder'] = undefined;

/**
 * Name of the folder associated with the log.
 * @member {String} folder_name
 */
LogParams.prototype['folder_name'] = undefined;

/**
 * URL that the connected node forwards to.
 * @member {String} forward_url
 */
LogParams.prototype['forward_url'] = undefined;

/**
 * The github repository involved with the action represented by this node log.
 * @member {String} github_repo
 */
LogParams.prototype['github_repo'] = undefined;

/**
 * The github user involved with the action represented by this node log.
 * @member {String} github_user
 */
LogParams.prototype['github_user'] = undefined;

/**
 * Dictionary containing the DOI and ARK ID for a preprint associated with the log.
 * @member {String} identifiers
 */
LogParams.prototype['identifiers'] = undefined;

/**
 * Dictionary containing the ID and Name of the institution associated with the log.
 * @member {String} institution
 */
LogParams.prototype['institution'] = undefined;

/**
 * Kind of the object associated with the log.
 * @member {String} kind
 */
LogParams.prototype['kind'] = undefined;

/**
 * License for the associated node.
 * @member {String} license
 */
LogParams.prototype['license'] = undefined;

/**
 * Old name of wiki page for a wiki rename log action.
 * @member {String} old_page
 */
LogParams.prototype['old_page'] = undefined;

/**
 * Current name of wiki page for rename log action.
 * @member {String} page
 */
LogParams.prototype['page'] = undefined;

/**
 * Primary key of the wiki page associated with the log.
 * @member {String} page_id
 */
LogParams.prototype['page_id'] = undefined;

/**
 * Node that is refered to in the params of the log.
 * @member {String} params_node
 */
LogParams.prototype['params_node'] = undefined;

/**
 * Project that is refered to in the params of the log.
 * @member {String} params_project
 */
LogParams.prototype['params_project'] = undefined;

/**
 * Path for a file associated with the log.
 * @member {String} path
 */
LogParams.prototype['path'] = undefined;

/**
 * A dictionary with information about the node that is linked to the associated node.
 * @member {String} pointer
 */
LogParams.prototype['pointer'] = undefined;

/**
 * Preprint related to the associated node.
 * @member {String} preprint
 */
LogParams.prototype['preprint'] = undefined;

/**
 * Preprint provider for the associated node.
 * @member {String} preprint_provider
 */
LogParams.prototype['preprint_provider'] = undefined;

/**
 * If a primary institution for the associated node is changed, this will show the previous institution.
 * @member {String} previous_institution
 */
LogParams.prototype['previous_institution'] = undefined;

/**
 * A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title.
 * @member {String} source
 */
LogParams.prototype['source'] = undefined;

/**
 * Dataverse study linked to the associated node.
 * @member {String} study
 */
LogParams.prototype['study'] = undefined;

/**
 * Tag associated with the associated node.
 * @member {String} tag
 */
LogParams.prototype['tag'] = undefined;

/**
 * Tags associated with the associated node.
 * @member {String} tags
 */
LogParams.prototype['tags'] = undefined;

/**
 * A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title.
 * @member {String} target
 */
LogParams.prototype['target'] = undefined;

/**
 * A dictionary containing information about the node that was used as a template for the associated node.
 * @member {String} template_node
 */
LogParams.prototype['template_node'] = undefined;

/**
 * The new title for the associated node.
 * @member {String} title_new
 */
LogParams.prototype['title_new'] = undefined;

/**
 * The original title for the associated node
 * @member {String} title_original
 */
LogParams.prototype['title_original'] = undefined;

/**
 * A dictionary containing all of the fields updated on the associated node.
 * @member {String} updated_fields
 */
LogParams.prototype['updated_fields'] = undefined;

/**
 * Links to access information about the file associated with this log.
 * @member {String} urls
 */
LogParams.prototype['urls'] = undefined;

/**
 * Version of the wiki page associated with this log.
 * @member {String} version
 */
LogParams.prototype['version'] = undefined;

/**
 * A dictionary with information about the wiki page associated with the log.
 * @member {String} wiki
 */
LogParams.prototype['wiki'] = undefined;






export default LogParams;

