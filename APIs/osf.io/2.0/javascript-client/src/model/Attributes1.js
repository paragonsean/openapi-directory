/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes1 model module.
 * @module model/Attributes1
 * @version 2.0
 */
class Attributes1 {
    /**
     * Constructs a new <code>Attributes1</code>.
     * The properties of the citation style entity.
     * @alias module:model/Attributes1
     * @param dateParsed {Date} The time at which the citation style was first parsed, as an iso8601 formatted timestamp.
     * @param title {String} The official name of the citation style.
     */
    constructor(dateParsed, title) { 
        
        Attributes1.initialize(this, dateParsed, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateParsed, title) { 
        obj['date_parsed'] = dateParsed;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Attributes1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes1} obj Optional instance to populate.
     * @return {module:model/Attributes1} The populated <code>Attributes1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes1();

            if (data.hasOwnProperty('date_parsed')) {
                obj['date_parsed'] = ApiClient.convertToType(data['date_parsed'], 'Date');
            }
            if (data.hasOwnProperty('short_title')) {
                obj['short_title'] = ApiClient.convertToType(data['short_title'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attributes1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['short_title'] && !(typeof data['short_title'] === 'string' || data['short_title'] instanceof String)) {
            throw new Error("Expected the field `short_title` to be a primitive type in the JSON string but got " + data['short_title']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Attributes1.RequiredProperties = ["date_parsed", "title"];

/**
 * The time at which the citation style was first parsed, as an iso8601 formatted timestamp.
 * @member {Date} date_parsed
 */
Attributes1.prototype['date_parsed'] = undefined;

/**
 * The short name for the citation style.
 * @member {String} short_title
 */
Attributes1.prototype['short_title'] = undefined;

/**
 * The summary of the citation style.
 * @member {String} summary
 */
Attributes1.prototype['summary'] = undefined;

/**
 * The official name of the citation style.
 * @member {String} title
 */
Attributes1.prototype['title'] = undefined;






export default Attributes1;

