/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes28 model module.
 * @module model/Attributes28
 * @version 2.0
 */
class Attributes28 {
    /**
     * Constructs a new <code>Attributes28</code>.
     * The attributes of the Registration Schema.
     * @alias module:model/Attributes28
     */
    constructor() { 
        
        Attributes28.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes28</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes28} obj Optional instance to populate.
     * @return {module:model/Attributes28} The populated <code>Attributes28</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes28();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], {'String': [Object]});
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes28</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes28</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Bool that represents whether the Registration Schema is active.
 * @member {Boolean} active
 */
Attributes28.prototype['active'] = undefined;

/**
 * The name of the Registration Schema
 * @member {String} name
 */
Attributes28.prototype['name'] = undefined;

/**
 * This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks.
 * @member {Object.<String, Array.<Object>>} schema
 */
Attributes28.prototype['schema'] = undefined;

/**
 * The version of this Registration Schema
 * @member {Number} schema_version
 */
Attributes28.prototype['schema_version'] = undefined;






export default Attributes28;

