/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes24 model module.
 * @module model/Attributes24
 * @version 2.0
 */
class Attributes24 {
    /**
     * Constructs a new <code>Attributes24</code>.
     * The properties of the contributor entity.
     * @alias module:model/Attributes24
     */
    constructor() { 
        
        Attributes24.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes24</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes24} obj Optional instance to populate.
     * @return {module:model/Attributes24} The populated <code>Attributes24</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes24();

            if (data.hasOwnProperty('bibliographic')) {
                obj['bibliographic'] = ApiClient.convertToType(data['bibliographic'], 'Boolean');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('unregistered_contributor')) {
                obj['unregistered_contributor'] = ApiClient.convertToType(data['unregistered_contributor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes24</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes24</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is a string
        if (data['unregistered_contributor'] && !(typeof data['unregistered_contributor'] === 'string' || data['unregistered_contributor'] instanceof String)) {
            throw new Error("Expected the field `unregistered_contributor` to be a primitive type in the JSON string but got " + data['unregistered_contributor']);
        }

        return true;
    }


}



/**
 * Whether or not the contributor will be included in citations for the Preprint. The default value is true.
 * @member {Boolean} bibliographic
 */
Attributes24.prototype['bibliographic'] = undefined;

/**
 * The position of this contributor in the list of Preprint's contributors and in a Preprint's citations.
 * @member {Number} index
 */
Attributes24.prototype['index'] = undefined;

/**
 * The permission level of the contributor. The default value is 'write'.
 * @member {module:model/Attributes24.PermissionEnum} permission
 */
Attributes24.prototype['permission'] = undefined;

/**
 * The assigned name of the contributor if the contributor has not yet claimed their account.
 * @member {String} unregistered_contributor
 */
Attributes24.prototype['unregistered_contributor'] = undefined;





/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
Attributes24['PermissionEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"
};



export default Attributes24;

