/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeLicense model module.
 * @module model/NodeLicense
 * @version 2.0
 */
class NodeLicense {
    /**
     * Constructs a new <code>NodeLicense</code>.
     * @alias module:model/NodeLicense
     */
    constructor() { 
        
        NodeLicense.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeLicense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeLicense} obj Optional instance to populate.
     * @return {module:model/NodeLicense} The populated <code>NodeLicense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeLicense();

            if (data.hasOwnProperty('copyright_holders')) {
                obj['copyright_holders'] = ApiClient.convertToType(data['copyright_holders'], ['String']);
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeLicense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeLicense</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['copyright_holders'])) {
            throw new Error("Expected the field `copyright_holders` to be an array in the JSON data but got " + data['copyright_holders']);
        }

        return true;
    }


}



/**
 * A list of names of copyright holders for the license.
 * @member {Array.<String>} copyright_holders
 */
NodeLicense.prototype['copyright_holders'] = undefined;

/**
 * The year the copyright was made.
 * @member {Number} year
 */
NodeLicense.prototype['year'] = undefined;






export default NodeLicense;

