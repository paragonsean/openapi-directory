/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attributes23 from './Attributes23';
import Links18 from './Links18';

/**
 * The Taxonomy model module.
 * @module model/Taxonomy
 * @version 2.0
 */
class Taxonomy {
    /**
     * Constructs a new <code>Taxonomy</code>.
     * @alias module:model/Taxonomy
     */
    constructor() { 
        
        Taxonomy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Taxonomy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Taxonomy} obj Optional instance to populate.
     * @return {module:model/Taxonomy} The populated <code>Taxonomy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Taxonomy();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = Attributes23.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = Links18.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Taxonomy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Taxonomy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          Attributes23.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          Links18.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Attributes23} attributes
 */
Taxonomy.prototype['attributes'] = undefined;

/**
 * The identifier of the taxonomy entity.
 * @member {String} id
 */
Taxonomy.prototype['id'] = undefined;

/**
 * @member {module:model/Links18} links
 */
Taxonomy.prototype['links'] = undefined;

/**
 * The type identifier of the taxonomy entity (`taxonomies`).
 * @member {String} type
 */
Taxonomy.prototype['type'] = undefined;






export default Taxonomy;

