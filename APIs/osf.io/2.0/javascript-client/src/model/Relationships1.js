/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relationships1 model module.
 * @module model/Relationships1
 * @version 2.0
 */
class Relationships1 {
    /**
     * Constructs a new <code>Relationships1</code>.
     * URLs to other entities or entity collections that have a relationship to the comment entity.
     * @alias module:model/Relationships1
     */
    constructor() { 
        
        Relationships1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relationships1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationships1} obj Optional instance to populate.
     * @return {module:model/Relationships1} The populated <code>Relationships1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationships1();

            if (data.hasOwnProperty('node')) {
                obj['node'] = ApiClient.convertToType(data['node'], 'String');
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], 'String');
            }
            if (data.hasOwnProperty('reports')) {
                obj['reports'] = ApiClient.convertToType(data['reports'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relationships1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relationships1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['node'] && !(typeof data['node'] === 'string' || data['node'] instanceof String)) {
            throw new Error("Expected the field `node` to be a primitive type in the JSON string but got " + data['node']);
        }
        // ensure the json data is a string
        if (data['replies'] && !(typeof data['replies'] === 'string' || data['replies'] instanceof String)) {
            throw new Error("Expected the field `replies` to be a primitive type in the JSON string but got " + data['replies']);
        }
        // ensure the json data is a string
        if (data['reports'] && !(typeof data['reports'] === 'string' || data['reports'] instanceof String)) {
            throw new Error("Expected the field `reports` to be a primitive type in the JSON string but got " + data['reports']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * A relationship to the node the comment is on.
 * @member {String} node
 */
Relationships1.prototype['node'] = undefined;

/**
 * A relationship to the replies to the comment.
 * @member {String} replies
 */
Relationships1.prototype['replies'] = undefined;

/**
 * A relationship to the reports connected to the comment.
 * @member {String} reports
 */
Relationships1.prototype['reports'] = undefined;

/**
 * A relationship to the target of the comment.
 * @member {String} target
 */
Relationships1.prototype['target'] = undefined;

/**
 * A relationship to the user who created the comment.
 * @member {String} user
 */
Relationships1.prototype['user'] = undefined;






export default Relationships1;

