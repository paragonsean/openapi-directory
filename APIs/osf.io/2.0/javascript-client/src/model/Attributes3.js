/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes3 model module.
 * @module model/Attributes3
 * @version 2.0
 */
class Attributes3 {
    /**
     * Constructs a new <code>Attributes3</code>.
     * The properties of the comment entity.
     * @alias module:model/Attributes3
     */
    constructor() { 
        
        Attributes3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes3} obj Optional instance to populate.
     * @return {module:model/Attributes3} The populated <code>Attributes3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes3();

            if (data.hasOwnProperty('can_edit')) {
                obj['can_edit'] = ApiClient.convertToType(data['can_edit'], 'Boolean');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_modified')) {
                obj['date_modified'] = ApiClient.convertToType(data['date_modified'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('has_children')) {
                obj['has_children'] = ApiClient.convertToType(data['has_children'], 'Boolean');
            }
            if (data.hasOwnProperty('has_report')) {
                obj['has_report'] = ApiClient.convertToType(data['has_report'], 'Boolean');
            }
            if (data.hasOwnProperty('is_abuse')) {
                obj['is_abuse'] = ApiClient.convertToType(data['is_abuse'], 'Boolean');
            }
            if (data.hasOwnProperty('is_ham')) {
                obj['is_ham'] = ApiClient.convertToType(data['is_ham'], 'Boolean');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Boolean');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes3</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['page'] && !(typeof data['page'] === 'string' || data['page'] instanceof String)) {
            throw new Error("Expected the field `page` to be a primitive type in the JSON string but got " + data['page']);
        }

        return true;
    }


}



/**
 * Whether or not the current user has permission to edit this comment
 * @member {Boolean} can_edit
 */
Attributes3.prototype['can_edit'] = undefined;

/**
 * The content of the comment.
 * @member {String} content
 */
Attributes3.prototype['content'] = undefined;

/**
 * The time at which the comment was created, as an iso8601 formatted timestamp.
 * @member {Date} date_created
 */
Attributes3.prototype['date_created'] = undefined;

/**
 * The time at which the comment was last modified, as an iso8601 formatted timestamp.
 * @member {Date} date_modified
 */
Attributes3.prototype['date_modified'] = undefined;

/**
 * Whether or not the comment is deleted.
 * @member {Boolean} deleted
 */
Attributes3.prototype['deleted'] = undefined;

/**
 * Whether or not the comment has replies.
 * @member {Boolean} has_children
 */
Attributes3.prototype['has_children'] = undefined;

/**
 * Whether or not the comment the current user reported this as spam.
 * @member {Boolean} has_report
 */
Attributes3.prototype['has_report'] = undefined;

/**
 * Whether or not the comment is flagged or confirmed spam.
 * @member {Boolean} is_abuse
 */
Attributes3.prototype['is_abuse'] = undefined;

/**
 * Whether or not an admin checked the legitimacy of this comment.
 * @member {Boolean} is_ham
 */
Attributes3.prototype['is_ham'] = undefined;

/**
 * Whether or not the comment has been edited.
 * @member {Boolean} modified
 */
Attributes3.prototype['modified'] = undefined;

/**
 * The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.
 * @member {String} page
 */
Attributes3.prototype['page'] = undefined;






export default Attributes3;

