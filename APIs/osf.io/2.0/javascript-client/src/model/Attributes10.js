/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes10 model module.
 * @module model/Attributes10
 * @version 2.0
 */
class Attributes10 {
    /**
     * Constructs a new <code>Attributes10</code>.
     * The properties of the node entity.
     * @alias module:model/Attributes10
     * @param category {module:model/Attributes10.CategoryEnum} The category of the node, as selected by project contributors.
     * @param title {String} The title of the node.
     */
    constructor(category, title) { 
        
        Attributes10.initialize(this, category, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, title) { 
        obj['category'] = category;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Attributes10</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes10} obj Optional instance to populate.
     * @return {module:model/Attributes10} The populated <code>Attributes10</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes10();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('collection')) {
                obj['collection'] = ApiClient.convertToType(data['collection'], 'Boolean');
            }
            if (data.hasOwnProperty('current_user_can_comment')) {
                obj['current_user_can_comment'] = ApiClient.convertToType(data['current_user_can_comment'], 'Boolean');
            }
            if (data.hasOwnProperty('current_user_permissions')) {
                obj['current_user_permissions'] = ApiClient.convertToType(data['current_user_permissions'], ['String']);
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_modified')) {
                obj['date_modified'] = ApiClient.convertToType(data['date_modified'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fork')) {
                obj['fork'] = ApiClient.convertToType(data['fork'], 'Boolean');
            }
            if (data.hasOwnProperty('forked_date')) {
                obj['forked_date'] = ApiClient.convertToType(data['forked_date'], 'Date');
            }
            if (data.hasOwnProperty('node_license')) {
                obj['node_license'] = ApiClient.convertToType(data['node_license'], 'String');
            }
            if (data.hasOwnProperty('preprint')) {
                obj['preprint'] = ApiClient.convertToType(data['preprint'], 'Boolean');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('registration')) {
                obj['registration'] = ApiClient.convertToType(data['registration'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('template_from')) {
                obj['template_from'] = ApiClient.convertToType(data['template_from'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes10</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes10</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attributes10.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['current_user_permissions'])) {
            throw new Error("Expected the field `current_user_permissions` to be an array in the JSON data but got " + data['current_user_permissions']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['node_license'] && !(typeof data['node_license'] === 'string' || data['node_license'] instanceof String)) {
            throw new Error("Expected the field `node_license` to be a primitive type in the JSON string but got " + data['node_license']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['template_from'] && !(typeof data['template_from'] === 'string' || data['template_from'] instanceof String)) {
            throw new Error("Expected the field `template_from` to be a primitive type in the JSON string but got " + data['template_from']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Attributes10.RequiredProperties = ["category", "title"];

/**
 * The category of the node, as selected by project contributors.
 * @member {module:model/Attributes10.CategoryEnum} category
 */
Attributes10.prototype['category'] = undefined;

/**
 * Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions.
 * @member {Boolean} collection
 */
Attributes10.prototype['collection'] = undefined;

/**
 * Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.
 * @member {Boolean} current_user_can_comment
 */
Attributes10.prototype['current_user_can_comment'] = undefined;

/**
 * A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\".
 * @member {Array.<String>} current_user_permissions
 */
Attributes10.prototype['current_user_permissions'] = undefined;

/**
 * The time at which the node was created, as an iso8601 formatted timestamp.
 * @member {Date} date_created
 */
Attributes10.prototype['date_created'] = undefined;

/**
 * The time at which the node was last modified, as an iso8601 formatted timestamp.
 * @member {Date} date_modified
 */
Attributes10.prototype['date_modified'] = undefined;

/**
 * The description of the node.
 * @member {String} description
 */
Attributes10.prototype['description'] = undefined;

/**
 * Whether or not this node represents a fork of another node.
 * @member {Boolean} fork
 */
Attributes10.prototype['fork'] = undefined;

/**
 * If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.
 * @member {Date} forked_date
 */
Attributes10.prototype['forked_date'] = undefined;

/**
 * A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).
 * @member {String} node_license
 */
Attributes10.prototype['node_license'] = undefined;

/**
 * Whether or not a preprint has been created from this node, or if this node was created for a preprint.
 * @member {Boolean} preprint
 */
Attributes10.prototype['preprint'] = undefined;

/**
 * Whether or not the node is publicly visible. This field is only editable by project administrators.
 * @member {Boolean} public
 */
Attributes10.prototype['public'] = undefined;

/**
 * Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions.
 * @member {Boolean} registration
 */
Attributes10.prototype['registration'] = undefined;

/**
 * A list of strings that describe this node, as entered by project contributors.
 * @member {Array.<String>} tags
 */
Attributes10.prototype['tags'] = undefined;

/**
 * The unique ID of the node from which this node was templated, if this node was created from a template.
 * @member {String} template_from
 */
Attributes10.prototype['template_from'] = undefined;

/**
 * The title of the node.
 * @member {String} title
 */
Attributes10.prototype['title'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Attributes10['CategoryEnum'] = {

    /**
     * value: "analysis"
     * @const
     */
    "analysis": "analysis",

    /**
     * value: "communication"
     * @const
     */
    "communication": "communication",

    /**
     * value: "data"
     * @const
     */
    "data": "data",

    /**
     * value: "hypothesis"
     * @const
     */
    "hypothesis": "hypothesis",

    /**
     * value: "instrumentation"
     * @const
     */
    "instrumentation": "instrumentation",

    /**
     * value: "methods and measures"
     * @const
     */
    "methods and measures": "methods and measures",

    /**
     * value: "procedure"
     * @const
     */
    "procedure": "procedure",

    /**
     * value: "project"
     * @const
     */
    "project": "project",

    /**
     * value: "software"
     * @const
     */
    "software": "software",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Attributes10;

