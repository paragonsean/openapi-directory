/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relationships4 model module.
 * @module model/Relationships4
 * @version 2.0
 */
class Relationships4 {
    /**
     * Constructs a new <code>Relationships4</code>.
     * URLs to other entities or entity collections that have a relationship to the institution entity.
     * @alias module:model/Relationships4
     */
    constructor() { 
        
        Relationships4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relationships4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationships4} obj Optional instance to populate.
     * @return {module:model/Relationships4} The populated <code>Relationships4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationships4();

            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], 'String');
            }
            if (data.hasOwnProperty('registrations')) {
                obj['registrations'] = ApiClient.convertToType(data['registrations'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relationships4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relationships4</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nodes'] && !(typeof data['nodes'] === 'string' || data['nodes'] instanceof String)) {
            throw new Error("Expected the field `nodes` to be a primitive type in the JSON string but got " + data['nodes']);
        }
        // ensure the json data is a string
        if (data['registrations'] && !(typeof data['registrations'] === 'string' || data['registrations'] instanceof String)) {
            throw new Error("Expected the field `registrations` to be a primitive type in the JSON string but got " + data['registrations']);
        }
        // ensure the json data is a string
        if (data['users'] && !(typeof data['users'] === 'string' || data['users'] instanceof String)) {
            throw new Error("Expected the field `users` to be a primitive type in the JSON string but got " + data['users']);
        }

        return true;
    }


}



/**
 * A relationship to the nodes affiliated with the institution.
 * @member {String} nodes
 */
Relationships4.prototype['nodes'] = undefined;

/**
 * A relationship to the registrations affiliated with the institution.
 * @member {String} registrations
 */
Relationships4.prototype['registrations'] = undefined;

/**
 * A relationship to the users affiliated with the institution.
 * @member {String} users
 */
Relationships4.prototype['users'] = undefined;






export default Relationships4;

