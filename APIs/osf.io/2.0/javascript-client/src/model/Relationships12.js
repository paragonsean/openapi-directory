/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relationships12 model module.
 * @module model/Relationships12
 * @version 2.0
 */
class Relationships12 {
    /**
     * Constructs a new <code>Relationships12</code>.
     * URLs to other entities or entity collections that have a relationship to the registration entity.
     * @alias module:model/Relationships12
     */
    constructor() { 
        
        Relationships12.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relationships12</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationships12} obj Optional instance to populate.
     * @return {module:model/Relationships12} The populated <code>Relationships12</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationships12();

            if (data.hasOwnProperty('affiliated_institutions')) {
                obj['affiliated_institutions'] = ApiClient.convertToType(data['affiliated_institutions'], 'String');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], 'String');
            }
            if (data.hasOwnProperty('citation')) {
                obj['citation'] = ApiClient.convertToType(data['citation'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('contributors')) {
                obj['contributors'] = ApiClient.convertToType(data['contributors'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], 'String');
            }
            if (data.hasOwnProperty('forks')) {
                obj['forks'] = ApiClient.convertToType(data['forks'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], 'String');
            }
            if (data.hasOwnProperty('linked_nodes')) {
                obj['linked_nodes'] = ApiClient.convertToType(data['linked_nodes'], 'String');
            }
            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], 'String');
            }
            if (data.hasOwnProperty('node_links')) {
                obj['node_links'] = ApiClient.convertToType(data['node_links'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('registered_by')) {
                obj['registered_by'] = ApiClient.convertToType(data['registered_by'], 'String');
            }
            if (data.hasOwnProperty('registered_from')) {
                obj['registered_from'] = ApiClient.convertToType(data['registered_from'], 'String');
            }
            if (data.hasOwnProperty('registration_schema')) {
                obj['registration_schema'] = ApiClient.convertToType(data['registration_schema'], 'String');
            }
            if (data.hasOwnProperty('root')) {
                obj['root'] = ApiClient.convertToType(data['root'], 'String');
            }
            if (data.hasOwnProperty('view_only_links')) {
                obj['view_only_links'] = ApiClient.convertToType(data['view_only_links'], 'String');
            }
            if (data.hasOwnProperty('wikis')) {
                obj['wikis'] = ApiClient.convertToType(data['wikis'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relationships12</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relationships12</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affiliated_institutions'] && !(typeof data['affiliated_institutions'] === 'string' || data['affiliated_institutions'] instanceof String)) {
            throw new Error("Expected the field `affiliated_institutions` to be a primitive type in the JSON string but got " + data['affiliated_institutions']);
        }
        // ensure the json data is a string
        if (data['children'] && !(typeof data['children'] === 'string' || data['children'] instanceof String)) {
            throw new Error("Expected the field `children` to be a primitive type in the JSON string but got " + data['children']);
        }
        // ensure the json data is a string
        if (data['citation'] && !(typeof data['citation'] === 'string' || data['citation'] instanceof String)) {
            throw new Error("Expected the field `citation` to be a primitive type in the JSON string but got " + data['citation']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['contributors'] && !(typeof data['contributors'] === 'string' || data['contributors'] instanceof String)) {
            throw new Error("Expected the field `contributors` to be a primitive type in the JSON string but got " + data['contributors']);
        }
        // ensure the json data is a string
        if (data['files'] && !(typeof data['files'] === 'string' || data['files'] instanceof String)) {
            throw new Error("Expected the field `files` to be a primitive type in the JSON string but got " + data['files']);
        }
        // ensure the json data is a string
        if (data['forks'] && !(typeof data['forks'] === 'string' || data['forks'] instanceof String)) {
            throw new Error("Expected the field `forks` to be a primitive type in the JSON string but got " + data['forks']);
        }
        // ensure the json data is a string
        if (data['identifiers'] && !(typeof data['identifiers'] === 'string' || data['identifiers'] instanceof String)) {
            throw new Error("Expected the field `identifiers` to be a primitive type in the JSON string but got " + data['identifiers']);
        }
        // ensure the json data is a string
        if (data['linked_nodes'] && !(typeof data['linked_nodes'] === 'string' || data['linked_nodes'] instanceof String)) {
            throw new Error("Expected the field `linked_nodes` to be a primitive type in the JSON string but got " + data['linked_nodes']);
        }
        // ensure the json data is a string
        if (data['logs'] && !(typeof data['logs'] === 'string' || data['logs'] instanceof String)) {
            throw new Error("Expected the field `logs` to be a primitive type in the JSON string but got " + data['logs']);
        }
        // ensure the json data is a string
        if (data['node_links'] && !(typeof data['node_links'] === 'string' || data['node_links'] instanceof String)) {
            throw new Error("Expected the field `node_links` to be a primitive type in the JSON string but got " + data['node_links']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['registered_by'] && !(typeof data['registered_by'] === 'string' || data['registered_by'] instanceof String)) {
            throw new Error("Expected the field `registered_by` to be a primitive type in the JSON string but got " + data['registered_by']);
        }
        // ensure the json data is a string
        if (data['registered_from'] && !(typeof data['registered_from'] === 'string' || data['registered_from'] instanceof String)) {
            throw new Error("Expected the field `registered_from` to be a primitive type in the JSON string but got " + data['registered_from']);
        }
        // ensure the json data is a string
        if (data['registration_schema'] && !(typeof data['registration_schema'] === 'string' || data['registration_schema'] instanceof String)) {
            throw new Error("Expected the field `registration_schema` to be a primitive type in the JSON string but got " + data['registration_schema']);
        }
        // ensure the json data is a string
        if (data['root'] && !(typeof data['root'] === 'string' || data['root'] instanceof String)) {
            throw new Error("Expected the field `root` to be a primitive type in the JSON string but got " + data['root']);
        }
        // ensure the json data is a string
        if (data['view_only_links'] && !(typeof data['view_only_links'] === 'string' || data['view_only_links'] instanceof String)) {
            throw new Error("Expected the field `view_only_links` to be a primitive type in the JSON string but got " + data['view_only_links']);
        }
        // ensure the json data is a string
        if (data['wikis'] && !(typeof data['wikis'] === 'string' || data['wikis'] instanceof String)) {
            throw new Error("Expected the field `wikis` to be a primitive type in the JSON string but got " + data['wikis']);
        }

        return true;
    }


}



/**
 * A link to the list of institutions this registration is affiliated with.
 * @member {String} affiliated_institutions
 */
Relationships12.prototype['affiliated_institutions'] = undefined;

/**
 * A link to the list of the registered node's children (components).
 * @member {String} children
 */
Relationships12.prototype['children'] = undefined;

/**
 * A link to the citation details of this registration.
 * @member {String} citation
 */
Relationships12.prototype['citation'] = undefined;

/**
 * A link to the list of comments on this registration.
 * @member {String} comments
 */
Relationships12.prototype['comments'] = undefined;

/**
 * A link to the list of contributors on this registration.
 * @member {String} contributors
 */
Relationships12.prototype['contributors'] = undefined;

/**
 * A link to the list of storage providers that have been enabled on this registration.
 * @member {String} files
 */
Relationships12.prototype['files'] = undefined;

/**
 * A link to the list of nodes that are forks of this registration.
 * @member {String} forks
 */
Relationships12.prototype['forks'] = undefined;

/**
 * A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers).
 * @member {String} identifiers
 */
Relationships12.prototype['identifiers'] = undefined;

/**
 * A link to the list of nodes that are linked to this registration.
 * @member {String} linked_nodes
 */
Relationships12.prototype['linked_nodes'] = undefined;

/**
 * A link to the list of log actions pertaining to this registration.
 * @member {String} logs
 */
Relationships12.prototype['logs'] = undefined;

/**
 * A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead.
 * @member {String} node_links
 */
Relationships12.prototype['node_links'] = undefined;

/**
 * A link to the node that is the direct parent of the current registration, if the current registration is a child registration.
 * @member {String} parent
 */
Relationships12.prototype['parent'] = undefined;

/**
 * A link to the user that initiated this registration.
 * @member {String} registered_by
 */
Relationships12.prototype['registered_by'] = undefined;

/**
 * A link to the node that this registration was registered from.
 * @member {String} registered_from
 */
Relationships12.prototype['registered_from'] = undefined;

/**
 * A link to the metaschema that this registration conforms to.
 * @member {String} registration_schema
 */
Relationships12.prototype['registration_schema'] = undefined;

/**
 * A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration.
 * @member {String} root
 */
Relationships12.prototype['root'] = undefined;

/**
 * A link to the list of view only links that have been created for this registration.
 * @member {String} view_only_links
 */
Relationships12.prototype['view_only_links'] = undefined;

/**
 * A link to the list of wiki pages for this registration.
 * @member {String} wikis
 */
Relationships12.prototype['wikis'] = undefined;






export default Relationships12;

