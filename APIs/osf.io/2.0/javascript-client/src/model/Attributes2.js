/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes2 model module.
 * @module model/Attributes2
 * @version 2.0
 */
class Attributes2 {
    /**
     * Constructs a new <code>Attributes2</code>.
     * The properties of the collection.
     * @alias module:model/Attributes2
     */
    constructor() { 
        
        Attributes2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes2} obj Optional instance to populate.
     * @return {module:model/Attributes2} The populated <code>Attributes2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes2();

            if (data.hasOwnProperty('bookmarks')) {
                obj['bookmarks'] = ApiClient.convertToType(data['bookmarks'], 'Boolean');
            }
            if (data.hasOwnProperty('collected_type_choices')) {
                obj['collected_type_choices'] = ApiClient.convertToType(data['collected_type_choices'], ['String']);
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_modified')) {
                obj['date_modified'] = ApiClient.convertToType(data['date_modified'], 'Date');
            }
            if (data.hasOwnProperty('is_promoted')) {
                obj['is_promoted'] = ApiClient.convertToType(data['is_promoted'], 'Boolean');
            }
            if (data.hasOwnProperty('is_public')) {
                obj['is_public'] = ApiClient.convertToType(data['is_public'], 'Boolean');
            }
            if (data.hasOwnProperty('issue_choices')) {
                obj['issue_choices'] = ApiClient.convertToType(data['issue_choices'], ['String']);
            }
            if (data.hasOwnProperty('program_area_choices')) {
                obj['program_area_choices'] = ApiClient.convertToType(data['program_area_choices'], ['String']);
            }
            if (data.hasOwnProperty('status_choices')) {
                obj['status_choices'] = ApiClient.convertToType(data['status_choices'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('volume_choices')) {
                obj['volume_choices'] = ApiClient.convertToType(data['volume_choices'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes2</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['collected_type_choices'])) {
            throw new Error("Expected the field `collected_type_choices` to be an array in the JSON data but got " + data['collected_type_choices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issue_choices'])) {
            throw new Error("Expected the field `issue_choices` to be an array in the JSON data but got " + data['issue_choices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['program_area_choices'])) {
            throw new Error("Expected the field `program_area_choices` to be an array in the JSON data but got " + data['program_area_choices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status_choices'])) {
            throw new Error("Expected the field `status_choices` to be an array in the JSON data but got " + data['status_choices']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['volume_choices'])) {
            throw new Error("Expected the field `volume_choices` to be an array in the JSON data but got " + data['volume_choices']);
        }

        return true;
    }


}



/**
 * This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection.
 * @member {Boolean} bookmarks
 */
Attributes2.prototype['bookmarks'] = undefined;

/**
 * A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection.
 * @member {Array.<String>} collected_type_choices
 */
Attributes2.prototype['collected_type_choices'] = undefined;

/**
 * The time at which the collection was created, as an iso8601 formatted timestamp.
 * @member {Date} date_created
 */
Attributes2.prototype['date_created'] = undefined;

/**
 * The time at which the collection was last modified, as an iso8601 formatted timestamp.
 * @member {Date} date_modified
 */
Attributes2.prototype['date_modified'] = undefined;

/**
 * ???
 * @member {Boolean} is_promoted
 */
Attributes2.prototype['is_promoted'] = undefined;

/**
 * This attribute indicates if a collection is viewable to a user with no special permissions.
 * @member {Boolean} is_public
 */
Attributes2.prototype['is_public'] = undefined;

/**
 * A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection.
 * @member {Array.<String>} issue_choices
 */
Attributes2.prototype['issue_choices'] = undefined;

/**
 * A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of .
 * @member {Array.<String>} program_area_choices
 */
Attributes2.prototype['program_area_choices'] = undefined;

/**
 * A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection.
 * @member {Array.<String>} status_choices
 */
Attributes2.prototype['status_choices'] = undefined;

/**
 * The title of the collection.
 * @member {String} title
 */
Attributes2.prototype['title'] = undefined;

/**
 * A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection.
 * @member {Array.<String>} volume_choices
 */
Attributes2.prototype['volume_choices'] = undefined;






export default Attributes2;

