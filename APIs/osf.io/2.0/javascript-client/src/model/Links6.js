/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Links6 model module.
 * @module model/Links6
 * @version 2.0
 */
class Links6 {
    /**
     * Constructs a new <code>Links6</code>.
     * Links to alternative representations of the file entity.
     * @alias module:model/Links6
     */
    constructor() { 
        
        Links6.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Links6</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Links6} obj Optional instance to populate.
     * @return {module:model/Links6} The populated <code>Links6</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Links6();

            if (data.hasOwnProperty('delete')) {
                obj['delete'] = ApiClient.convertToType(data['delete'], 'String');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = ApiClient.convertToType(data['download'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], 'String');
            }
            if (data.hasOwnProperty('move')) {
                obj['move'] = ApiClient.convertToType(data['move'], 'String');
            }
            if (data.hasOwnProperty('new_folder')) {
                obj['new_folder'] = ApiClient.convertToType(data['new_folder'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('upload')) {
                obj['upload'] = ApiClient.convertToType(data['upload'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Links6</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Links6</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delete'] && !(typeof data['delete'] === 'string' || data['delete'] instanceof String)) {
            throw new Error("Expected the field `delete` to be a primitive type in the JSON string but got " + data['delete']);
        }
        // ensure the json data is a string
        if (data['download'] && !(typeof data['download'] === 'string' || data['download'] instanceof String)) {
            throw new Error("Expected the field `download` to be a primitive type in the JSON string but got " + data['download']);
        }
        // ensure the json data is a string
        if (data['info'] && !(typeof data['info'] === 'string' || data['info'] instanceof String)) {
            throw new Error("Expected the field `info` to be a primitive type in the JSON string but got " + data['info']);
        }
        // ensure the json data is a string
        if (data['move'] && !(typeof data['move'] === 'string' || data['move'] instanceof String)) {
            throw new Error("Expected the field `move` to be a primitive type in the JSON string but got " + data['move']);
        }
        // ensure the json data is a string
        if (data['new_folder'] && !(typeof data['new_folder'] === 'string' || data['new_folder'] instanceof String)) {
            throw new Error("Expected the field `new_folder` to be a primitive type in the JSON string but got " + data['new_folder']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is a string
        if (data['upload'] && !(typeof data['upload'] === 'string' || data['upload'] instanceof String)) {
            throw new Error("Expected the field `upload` to be a primitive type in the JSON string but got " + data['upload']);
        }

        return true;
    }


}



/**
 * The Waterbutler API route for file deletions.
 * @member {String} delete
 */
Links6.prototype['delete'] = undefined;

/**
 * The Waterbutler API route for file downloads.
 * @member {String} download
 */
Links6.prototype['download'] = undefined;

/**
 * A link to the page to view a file's information or a folder's contents.
 * @member {String} info
 */
Links6.prototype['info'] = undefined;

/**
 * The Waterbutler API route for file moves.
 * @member {String} move
 */
Links6.prototype['move'] = undefined;

/**
 * The Waterbutler API route for creating a new subfolder (does not exist for files).
 * @member {String} new_folder
 */
Links6.prototype['new_folder'] = undefined;

/**
 * A link to the detail page for the file.
 * @member {String} self
 */
Links6.prototype['self'] = undefined;

/**
 * The Waterbutler API route for file uploads.
 * @member {String} upload
 */
Links6.prototype['upload'] = undefined;






export default Links6;

