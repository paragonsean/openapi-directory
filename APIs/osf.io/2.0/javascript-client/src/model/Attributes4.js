/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeLicense from './NodeLicense';

/**
 * The Attributes4 model module.
 * @module model/Attributes4
 * @version 2.0
 */
class Attributes4 {
    /**
     * Constructs a new <code>Attributes4</code>.
     * The properties of the Draft Registration entity.
     * @alias module:model/Attributes4
     */
    constructor() { 
        
        Attributes4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes4} obj Optional instance to populate.
     * @return {module:model/Attributes4} The populated <code>Attributes4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes4();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('current_user_permissions')) {
                obj['current_user_permissions'] = ApiClient.convertToType(data['current_user_permissions'], ['String']);
            }
            if (data.hasOwnProperty('datetime_initiated')) {
                obj['datetime_initiated'] = ApiClient.convertToType(data['datetime_initiated'], 'Date');
            }
            if (data.hasOwnProperty('datetime_updated')) {
                obj['datetime_updated'] = ApiClient.convertToType(data['datetime_updated'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('has_project')) {
                obj['has_project'] = ApiClient.convertToType(data['has_project'], 'Boolean');
            }
            if (data.hasOwnProperty('node_license')) {
                obj['node_license'] = NodeLicense.constructFromObject(data['node_license']);
            }
            if (data.hasOwnProperty('registration_metadata')) {
                obj['registration_metadata'] = ApiClient.convertToType(data['registration_metadata'], Object);
            }
            if (data.hasOwnProperty('registration_responses')) {
                obj['registration_responses'] = ApiClient.convertToType(data['registration_responses'], Object);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes4</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['current_user_permissions'])) {
            throw new Error("Expected the field `current_user_permissions` to be an array in the JSON data but got " + data['current_user_permissions']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `node_license`
        if (data['node_license']) { // data not null
          NodeLicense.validateJSON(data['node_license']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The category of the Draft Registration.
 * @member {String} category
 */
Attributes4.prototype['category'] = undefined;

/**
 * The current users permission level for the Draft Registration.
 * @member {Array.<String>} current_user_permissions
 */
Attributes4.prototype['current_user_permissions'] = undefined;

/**
 * The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.
 * @member {Date} datetime_initiated
 */
Attributes4.prototype['datetime_initiated'] = undefined;

/**
 * The time at which the draft registration was last updated, as an iso8601 formatted timestamp.
 * @member {Date} datetime_updated
 */
Attributes4.prototype['datetime_updated'] = undefined;

/**
 * The description of the Draft Registration.
 * @member {String} description
 */
Attributes4.prototype['description'] = undefined;

/**
 * This indicates whether a Draft Registration was branched from a project.
 * @member {Boolean} has_project
 */
Attributes4.prototype['has_project'] = undefined;

/**
 * @member {module:model/NodeLicense} node_license
 */
Attributes4.prototype['node_license'] = undefined;

/**
 * This is a legacy format for `registration_responses`.
 * @member {Object} registration_metadata
 */
Attributes4.prototype['registration_metadata'] = undefined;

/**
 * A dictionary of question IDs and responses from the registration schema.
 * @member {Object} registration_responses
 */
Attributes4.prototype['registration_responses'] = undefined;

/**
 * The searchable tags of the Draft Registration.
 * @member {Array.<String>} tags
 */
Attributes4.prototype['tags'] = undefined;

/**
 * The title of the Draft Registration.
 * @member {String} title
 */
Attributes4.prototype['title'] = undefined;






export default Attributes4;

