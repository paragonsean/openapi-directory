/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relationships13 model module.
 * @module model/Relationships13
 * @version 2.0
 */
class Relationships13 {
    /**
     * Constructs a new <code>Relationships13</code>.
     * URLs to other entities or entity collections that have a relationship to the view only link entity.
     * @alias module:model/Relationships13
     * @param creator {String} A relationship to the user who created this view only link.
     * @param nodes {String} A relationship to the nodes which this view only link gives read-only access to.
     */
    constructor(creator, nodes) { 
        
        Relationships13.initialize(this, creator, nodes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creator, nodes) { 
        obj['creator'] = creator;
        obj['nodes'] = nodes;
    }

    /**
     * Constructs a <code>Relationships13</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationships13} obj Optional instance to populate.
     * @return {module:model/Relationships13} The populated <code>Relationships13</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationships13();

            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relationships13</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relationships13</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Relationships13.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is a string
        if (data['nodes'] && !(typeof data['nodes'] === 'string' || data['nodes'] instanceof String)) {
            throw new Error("Expected the field `nodes` to be a primitive type in the JSON string but got " + data['nodes']);
        }

        return true;
    }


}

Relationships13.RequiredProperties = ["creator", "nodes"];

/**
 * A relationship to the user who created this view only link.
 * @member {String} creator
 */
Relationships13.prototype['creator'] = undefined;

/**
 * A relationship to the nodes which this view only link gives read-only access to.
 * @member {String} nodes
 */
Relationships13.prototype['nodes'] = undefined;






export default Relationships13;

