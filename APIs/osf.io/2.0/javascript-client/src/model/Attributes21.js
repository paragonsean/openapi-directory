/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attributes21 model module.
 * @module model/Attributes21
 * @version 2.0
 */
class Attributes21 {
    /**
     * Constructs a new <code>Attributes21</code>.
     * The properties of the wiki.
     * @alias module:model/Attributes21
     * @param contentType {String} Content type of the wiki (`text/markdown`).
     * @param currentUserCanComment {String} Whether the current user is allowed to post comments on this wiki.
     * @param dateModified {Date} The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.
     * @param extra {String} A dictionary containing additional metadata about this wiki, including version information.
     * @param kind {String} The type of object.
     * @param materializedPath {String} Materialized path to the wiki object.
     * @param name {String} The name/title of the wiki page.
     * @param path {String} Path to the wiki object.
     * @param size {String} Size of the wiki.
     */
    constructor(contentType, currentUserCanComment, dateModified, extra, kind, materializedPath, name, path, size) { 
        
        Attributes21.initialize(this, contentType, currentUserCanComment, dateModified, extra, kind, materializedPath, name, path, size);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType, currentUserCanComment, dateModified, extra, kind, materializedPath, name, path, size) { 
        obj['content_type'] = contentType;
        obj['current_user_can_comment'] = currentUserCanComment;
        obj['date_modified'] = dateModified;
        obj['extra'] = extra;
        obj['kind'] = kind;
        obj['materialized_path'] = materializedPath;
        obj['name'] = name;
        obj['path'] = path;
        obj['size'] = size;
    }

    /**
     * Constructs a <code>Attributes21</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes21} obj Optional instance to populate.
     * @return {module:model/Attributes21} The populated <code>Attributes21</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes21();

            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('current_user_can_comment')) {
                obj['current_user_can_comment'] = ApiClient.convertToType(data['current_user_can_comment'], 'String');
            }
            if (data.hasOwnProperty('date_modified')) {
                obj['date_modified'] = ApiClient.convertToType(data['date_modified'], 'Date');
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('materialized_path')) {
                obj['materialized_path'] = ApiClient.convertToType(data['materialized_path'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes21</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes21</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attributes21.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['current_user_can_comment'] && !(typeof data['current_user_can_comment'] === 'string' || data['current_user_can_comment'] instanceof String)) {
            throw new Error("Expected the field `current_user_can_comment` to be a primitive type in the JSON string but got " + data['current_user_can_comment']);
        }
        // ensure the json data is a string
        if (data['extra'] && !(typeof data['extra'] === 'string' || data['extra'] instanceof String)) {
            throw new Error("Expected the field `extra` to be a primitive type in the JSON string but got " + data['extra']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['materialized_path'] && !(typeof data['materialized_path'] === 'string' || data['materialized_path'] instanceof String)) {
            throw new Error("Expected the field `materialized_path` to be a primitive type in the JSON string but got " + data['materialized_path']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}

Attributes21.RequiredProperties = ["content_type", "current_user_can_comment", "date_modified", "extra", "kind", "materialized_path", "name", "path", "size"];

/**
 * Content type of the wiki (`text/markdown`).
 * @member {String} content_type
 */
Attributes21.prototype['content_type'] = undefined;

/**
 * Whether the current user is allowed to post comments on this wiki.
 * @member {String} current_user_can_comment
 */
Attributes21.prototype['current_user_can_comment'] = undefined;

/**
 * The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.
 * @member {Date} date_modified
 */
Attributes21.prototype['date_modified'] = undefined;

/**
 * A dictionary containing additional metadata about this wiki, including version information.
 * @member {String} extra
 */
Attributes21.prototype['extra'] = undefined;

/**
 * The type of object.
 * @member {String} kind
 */
Attributes21.prototype['kind'] = undefined;

/**
 * Materialized path to the wiki object.
 * @member {String} materialized_path
 */
Attributes21.prototype['materialized_path'] = undefined;

/**
 * The name/title of the wiki page.
 * @member {String} name
 */
Attributes21.prototype['name'] = undefined;

/**
 * Path to the wiki object.
 * @member {String} path
 */
Attributes21.prototype['path'] = undefined;

/**
 * Size of the wiki.
 * @member {String} size
 */
Attributes21.prototype['size'] = undefined;






export default Attributes21;

