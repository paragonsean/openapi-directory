/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Taxonomy from '../model/Taxonomy';

/**
* Taxonomies service.
* @module api/TaxonomiesApi
* @version 2.0
*/
export default class TaxonomiesApi {

    /**
    * Constructs a new TaxonomiesApi. 
    * @alias module:api/TaxonomiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the taxonomiesList operation.
     * @callback module:api/TaxonomiesApi~taxonomiesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Taxonomy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all taxonomies
     *  A paginated list of all [bepress disciplines taxonomies](https://www.bepress.com/wp-content/uploads/2016/12/Digital-Commons-Disciplines-taxonomy-2017-01.pdf). Note: this API endpoint is under active development, and is subject to change in the future. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of up to 10 taxonomies. Each resource in the array is a separate taxonomy object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include taxonomies that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/taxonomies/?filter['id']='{taxonomy_id}'.  Taxonomies may be filtered by their `id`, `parents`, and `text`.
     * @param {module:api/TaxonomiesApi~taxonomiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Taxonomy>}
     */
    taxonomiesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Taxonomy];
      return this.apiClient.callApi(
        '/taxonomies/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taxonomiesRead operation.
     * @callback module:api/TaxonomiesApi~taxonomiesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Taxonomy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a taxonomy
     * Retrieves the details of a taxonomy. #### Returns  Returns a JSON object with a `data` key containing the representation of the requested taxonomy, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} taxonomyId The unique identifier of the taxonomy.
     * @param {module:api/TaxonomiesApi~taxonomiesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Taxonomy}
     */
    taxonomiesRead(taxonomyId, callback) {
      let postBody = null;
      // verify the required parameter 'taxonomyId' is set
      if (taxonomyId === undefined || taxonomyId === null) {
        throw new Error("Missing the required parameter 'taxonomyId' when calling taxonomiesRead");
      }

      let pathParams = {
        'taxonomy_id': taxonomyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Taxonomy;
      return this.apiClient.callApi(
        '/taxonomies/{taxonomy_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
