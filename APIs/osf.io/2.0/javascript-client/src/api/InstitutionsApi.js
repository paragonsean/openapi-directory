/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Institution from '../model/Institution';
import Node from '../model/Node';
import User from '../model/User';

/**
* Institutions service.
* @module api/InstitutionsApi
* @version 2.0
*/
export default class InstitutionsApi {

    /**
    * Constructs a new InstitutionsApi. 
    * @alias module:api/InstitutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the institutionsDetail operation.
     * @callback module:api/InstitutionsApi~institutionsDetailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Institution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an institution
     * Retrieves the details of an institution #### Returns Returns a JSON object with a `data` key containing the representation of the requested institution, if the request was successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} institutionId The unique identifier of the institution you wish to retrieve.
     * @param {module:api/InstitutionsApi~institutionsDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Institution>}
     */
    institutionsDetail(institutionId, callback) {
      let postBody = null;
      // verify the required parameter 'institutionId' is set
      if (institutionId === undefined || institutionId === null) {
        throw new Error("Missing the required parameter 'institutionId' when calling institutionsDetail");
      }

      let pathParams = {
        'institution_id': institutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Institution];
      return this.apiClient.callApi(
        '/institutions/{institution_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsList operation.
     * @callback module:api/InstitutionsApi~institutionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Institution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all institutions
     *  A paginated list of all verified institutions. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 institutions. Each resource in the array is a separate institution object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include institutions that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/?filter[id]=cos.  Institutions may be filtered by their `id`, `name`, and `auth_url`
     * @param {module:api/InstitutionsApi~institutionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Institution>}
     */
    institutionsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Institution];
      return this.apiClient.callApi(
        '/institutions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsNodeList operation.
     * @callback module:api/InstitutionsApi~institutionsNodeListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Node>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all affiliated nodes
     * A paginated list of all nodes affiliated with an institution. #### Versioning As of version `2.2`, affiliated components (in addition to affiliated top-level projects) are returned from this endpoint. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 nodes. Each resource in the array is a separate nodes object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Filtering You can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/nodes?filter[title]=science.  Nodes may be filtered by their `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`
     * @param {String} institutionId The unique identifier of the institution you wish to retrieve.
     * @param {module:api/InstitutionsApi~institutionsNodeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Node>}
     */
    institutionsNodeList(institutionId, callback) {
      let postBody = null;
      // verify the required parameter 'institutionId' is set
      if (institutionId === undefined || institutionId === null) {
        throw new Error("Missing the required parameter 'institutionId' when calling institutionsNodeList");
      }

      let pathParams = {
        'institution_id': institutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Node];
      return this.apiClient.callApi(
        '/institutions/{institution_id}/nodes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsRegistrationList operation.
     * @callback module:api/InstitutionsApi~institutionsRegistrationListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all affiliated registrations
     * A paginated list of all registrations affiliated with an institution. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 registrations. Each resource in the array is a separate users object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/registrations?filter[title]=science.  Registrations may be filtered by their  `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`
     * @param {String} institutionId The unique identifier of the institution you wish to retrieve.
     * @param {module:api/InstitutionsApi~institutionsRegistrationListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    institutionsRegistrationList(institutionId, callback) {
      let postBody = null;
      // verify the required parameter 'institutionId' is set
      if (institutionId === undefined || institutionId === null) {
        throw new Error("Missing the required parameter 'institutionId' when calling institutionsRegistrationList");
      }

      let pathParams = {
        'institution_id': institutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/institutions/{institution_id}/registrations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsUsersList operation.
     * @callback module:api/InstitutionsApi~institutionsUsersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all affiliated users
     * A paginated list of all users affiliated with an institution. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 users. Each resource in the array is a separate users object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Filtering You can optionally request that the response only include users that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/users?filter[family_name]=Nosek.  Users may be filtered by their `id`, `full_name`, `given_name`, `middle_names`, and `family_name`
     * @param {String} institutionId The unique identifier of the institution you wish to retrieve.
     * @param {module:api/InstitutionsApi~institutionsUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    institutionsUsersList(institutionId, callback) {
      let postBody = null;
      // verify the required parameter 'institutionId' is set
      if (institutionId === undefined || institutionId === null) {
        throw new Error("Missing the required parameter 'institutionId' when calling institutionsUsersList");
      }

      let pathParams = {
        'institution_id': institutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/institutions/{institution_id}/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
