/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RegistrationSchemaBlock from '../model/RegistrationSchemaBlock';

/**
* RegistrationSchemaBlocks service.
* @module api/RegistrationSchemaBlocksApi
* @version 2.0
*/
export default class RegistrationSchemaBlocksApi {

    /**
    * Constructs a new RegistrationSchemaBlocksApi. 
    * @alias module:api/RegistrationSchemaBlocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schemaResponseBlocksRead operation.
     * @callback module:api/RegistrationSchemaBlocksApi~schemaResponseBlocksReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationSchemaBlock} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Registration Schema Blocks for a Schema Response
     * This returns a list of all the Registration Schema Blocks are contained in Registration Schema. #### Returns Returns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {module:api/RegistrationSchemaBlocksApi~schemaResponseBlocksReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationSchemaBlock}
     */
    schemaResponseBlocksRead(schemaResponseId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponseBlocksRead");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = RegistrationSchemaBlock;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}/schema_blocks/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet operation.
     * @callback module:api/RegistrationSchemaBlocksApi~schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationSchemaBlock} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Registration Schema Block
     * This returns a Registration Schema Block by it's ID. #### Returns Returns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {String} schemaResponseBlockId The unique identifier of the Schema Response Block example `61b79f9eadbb5701424a2d5e`.
     * @param {module:api/RegistrationSchemaBlocksApi~schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationSchemaBlock}
     */
    schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet(schemaResponseId, schemaResponseBlockId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet");
      }
      // verify the required parameter 'schemaResponseBlockId' is set
      if (schemaResponseBlockId === undefined || schemaResponseBlockId === null) {
        throw new Error("Missing the required parameter 'schemaResponseBlockId' when calling schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId,
        'schema_response_block_id': schemaResponseBlockId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = RegistrationSchemaBlock;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}/schema_blocks/{schema_response_block_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
