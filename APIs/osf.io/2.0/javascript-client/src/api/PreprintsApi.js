/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CitationDetail from '../model/CitationDetail';
import Contributor1 from '../model/Contributor1';
import Preprint from '../model/Preprint';
import StyledCitation from '../model/StyledCitation';

/**
* Preprints service.
* @module api/PreprintsApi
* @version 2.0
*/
export default class PreprintsApi {

    /**
    * Constructs a new PreprintsApi. 
    * @alias module:api/PreprintsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the preprintsBibliographicContributorsList operation.
     * @callback module:api/PreprintsApi~preprintsBibliographicContributorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Contributor1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Bibliographic Contributors
     * A paginated list of the Preprint's Bibliographic Contributors, sorted by their index. Contributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.  Contributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.  Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.  #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/contributors/?filter[bibliographic]=true.  Contributors may be filtered by their `bibliographic` and `permission` attributes.
     * @param {String} preprintId The unique identifier of the preprint.
     * @param {module:api/PreprintsApi~preprintsBibliographicContributorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Contributor1>}
     */
    preprintsBibliographicContributorsList(preprintId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsBibliographicContributorsList");
      }

      let pathParams = {
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Contributor1];
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/bibliographic_contributors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsCitationList operation.
     * @callback module:api/PreprintsApi~preprintsCitationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CitationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve citation details
     * The citation details for a preprint, in CSL format. #### Returns Returns a JSON object with a `data` key that contains the representation of the details necessary for the preprint citation.
     * @param {String} preprintId The unique identifier of the preprint whose citation you wish to retrieve.
     * @param {module:api/PreprintsApi~preprintsCitationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CitationDetail}
     */
    preprintsCitationList(preprintId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsCitationList");
      }

      let pathParams = {
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = CitationDetail;
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/citation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsCitationRead operation.
     * @callback module:api/PreprintsApi~preprintsCitationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StyledCitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a styled citation
     * The citation for a preprint in a specific style. #### Returns Returns a JSON object with a `data` key that contains the representation of the preprint citation, in the requested style.
     * @param {String} styleId The unique identifier of the citation style.
     * @param {String} preprintId The unique identifier of the preprint.
     * @param {module:api/PreprintsApi~preprintsCitationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StyledCitation}
     */
    preprintsCitationRead(styleId, preprintId, callback) {
      let postBody = null;
      // verify the required parameter 'styleId' is set
      if (styleId === undefined || styleId === null) {
        throw new Error("Missing the required parameter 'styleId' when calling preprintsCitationRead");
      }
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsCitationRead");
      }

      let pathParams = {
        'style_id': styleId,
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = StyledCitation;
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/citation/{style_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsContributorRead operation.
     * @callback module:api/PreprintsApi~preprintsContributorReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a contributor
     * Retrieves the details of a contributor on this Preprint. Contributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.  Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string. #### Returns Returns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} preprintId The unique identifier of the Preprint.
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/PreprintsApi~preprintsContributorReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    preprintsContributorRead(preprintId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsContributorRead");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling preprintsContributorRead");
      }

      let pathParams = {
        'preprint_id': preprintId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/contributors/{user_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsContributorsCreate operation.
     * @callback module:api/PreprintsApi~preprintsContributorsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Contributor
     * Adds a contributor to a Preprint, effectively creating a relationship between the Preprint and a user.  Contributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.  Contributors are categorized as either \"bibliographic\" or \"non-bibliographic\" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not. #### Permissions Only project administrators can add contributors to a Preprint. #### Required A relationship object with a `data` key, containing the `users` type and valid user ID is required.  All attributes describing the relationship between the Preprint and the user are optional. #### Returns Returns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} preprintId The unique identifier of the Preprint.
     * @param {module:model/Contributor1} contributor1 
     * @param {module:api/PreprintsApi~preprintsContributorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    preprintsContributorsCreate(preprintId, contributor1, callback) {
      let postBody = contributor1;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsContributorsCreate");
      }
      // verify the required parameter 'contributor1' is set
      if (contributor1 === undefined || contributor1 === null) {
        throw new Error("Missing the required parameter 'contributor1' when calling preprintsContributorsCreate");
      }

      let pathParams = {
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/contributors/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsContributorsList operation.
     * @callback module:api/PreprintsApi~preprintsContributorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Contributor1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Contributors for a Preprint
     * A paginated list of the Preprint's Contributors, sorted by their index.  Contributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.  Contributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.  Note that if an anonymous view_only key is being used to view the list of Contributors, the user relationship will not be exposed and the Contributor ID will be an empty string.  #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/contributors/?filter[bibliographic]=true.  Contributors may be filtered by their `bibliographic` and `permission` attributes.
     * @param {String} preprintId The unique identifier of the preprint.
     * @param {module:api/PreprintsApi~preprintsContributorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Contributor1>}
     */
    preprintsContributorsList(preprintId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsContributorsList");
      }

      let pathParams = {
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Contributor1];
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/contributors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsCreate operation.
     * @callback module:api/PreprintsApi~preprintsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a preprint
     * Creates a new preprint. #### Returns Returns a JSON object with a `data` key containing the representation of the created preprint, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.
     * @param {module:model/Preprint} preprint 
     * @param {module:api/PreprintsApi~preprintsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    preprintsCreate(preprint, callback) {
      let postBody = preprint;
      // verify the required parameter 'preprint' is set
      if (preprint === undefined || preprint === null) {
        throw new Error("Missing the required parameter 'preprint' when calling preprintsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/preprints/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsList operation.
     * @callback module:api/PreprintsApi~preprintsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Preprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all preprints
     *  A paginated list of preprints from all preprint providers. The returned preprints are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/?filter[provider]=socarxiv.  Preprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.
     * @param {module:api/PreprintsApi~preprintsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Preprint>}
     */
    preprintsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Preprint];
      return this.apiClient.callApi(
        '/preprints/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsPartialUpdate operation.
     * @callback module:api/PreprintsApi~preprintsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a preprint
     * Updates the specified preprint by setting the values of the parameters passed. Any parameters not provided will be left unchanged. #### Returns Returns a JSON object with a `data` key containing the new representation of the updated preprint, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.
     * @param {String} preprintId The unique identifier of the preprint.
     * @param {Object.<String, Object>} body 
     * @param {module:api/PreprintsApi~preprintsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    preprintsPartialUpdate(preprintId, body, callback) {
      let postBody = body;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsPartialUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling preprintsPartialUpdate");
      }

      let pathParams = {
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintsRead operation.
     * @callback module:api/PreprintsApi~preprintsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Preprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a preprint
     * Retrieves the details of a preprint. #### Returns Returns a JSON object with a `data` key containing the representation of the requested preprint, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} preprintId The unique identifier of the preprint.
     * @param {module:api/PreprintsApi~preprintsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Preprint}
     */
    preprintsRead(preprintId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintId' is set
      if (preprintId === undefined || preprintId === null) {
        throw new Error("Missing the required parameter 'preprintId' when calling preprintsRead");
      }

      let pathParams = {
        'preprint_id': preprintId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Preprint;
      return this.apiClient.callApi(
        '/preprints/{preprint_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
