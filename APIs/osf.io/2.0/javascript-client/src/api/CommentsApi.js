/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comment from '../model/Comment';

/**
* Comments service.
* @module api/CommentsApi
* @version 2.0
*/
export default class CommentsApi {

    /**
    * Constructs a new CommentsApi. 
    * @alias module:api/CommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the commentsDelete operation.
     * @callback module:api/CommentsApi~commentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * Deletes a comment. This action can be undone by setting deleted to False in a comment update request. #### Returns If the request is successful, no content is returned.  If the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} commentId The unique identifier of the comment you wish to delete.
     * @param {module:api/CommentsApi~commentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commentsDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling commentsDelete");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comments/{comment_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsPut operation.
     * @callback module:api/CommentsApi~commentsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comment
     * Updates the specified comment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. #### Returns Returns JSON with a `data` key containing the new representation of the updated comment, if the request is successful.  If the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} commentId The unique identifier of the comment you wish to update.
     * @param {Object.<String, Object>} body 
     * @param {module:api/CommentsApi~commentsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commentsPut(commentId, body, callback) {
      let postBody = body;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling commentsPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commentsPut");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comments/{comment_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsRead operation.
     * @callback module:api/CommentsApi~commentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a comment
     * Retrieves the details of a comment #### Returns Returns a JSON object with a `data` key containing the representation of the requested comment, if the request was successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} commentId The unique identifier of the comment you wish to retrieve.
     * @param {module:api/CommentsApi~commentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    commentsRead(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling commentsRead");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/comments/{comment_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
