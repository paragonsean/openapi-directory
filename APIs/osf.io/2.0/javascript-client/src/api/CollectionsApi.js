/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';

/**
* Collections service.
* @module api/CollectionsApi
* @version 2.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the collectionsAddMetadata operation.
     * @callback module:api/CollectionsApi~collectionsAddMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Metadata or Subjects to a Entity in a Collection
     * List of user created metadata for entities within a collection. #### Permissions To edit this collection a user must have collections write permissions #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsAddMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsAddMetadata(collectionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsAddMetadata");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsAddMetadata");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsCollectedMetadata operation.
     * @callback module:api/CollectionsApi~collectionsCollectedMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve subject data for a specific piece of metadata info for a collection
     *  #### Permissions In order to view these subject it must be a public collection or a user must have read permissions for collection.  #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error, other then permissions errors.
     * @param {String} collectionId A short id for that collection
     * @param {String} cgmId A short id for that piece of metadata
     * @param {module:api/CollectionsApi~collectionsCollectedMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsCollectedMetadata(collectionId, cgmId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsCollectedMetadata");
      }
      // verify the required parameter 'cgmId' is set
      if (cgmId === undefined || cgmId === null) {
        throw new Error("Missing the required parameter 'cgmId' when calling collectionsCollectedMetadata");
      }

      let pathParams = {
        'collection_id': collectionId,
        'cgm_id': cgmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/{cgm_id}/subjects/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsCreate operation.
     * @callback module:api/CollectionsApi~collectionsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Collection
     * Retrieves a list collections, either public or related to the user #### Permissions Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.  Comments on private nodes are only visible to contributors and administrators on the parent node. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of comment objects. Each resource in the array is a separate comment object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsCreate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsDelete operation.
     * @callback module:api/CollectionsApi~collectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Collection
     * Deletes a collection, if the user has appropriate permissions. #### Permissions Users must have write permissions on a collection in order to delete it #### Returns Nothing is returned in the body
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsDelete(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsDelete");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsDetail operation.
     * @callback module:api/CollectionsApi~collectionsDetailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Collection
     * Retrieves a collection, if the user has appropriate permissions.  #### Permissions Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content. #### Returns Returns a JSON object containing `data` and `links` keys.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    collectionsDetail(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsDetail");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/collections/{collection_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedNodesList operation.
     * @callback module:api/CollectionsApi~collectionsLinkedNodesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Linked Nodes for a Collection
     * List of all nodes linked to the given collection. #### Permissions This returns all public nodes associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsLinkedNodesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedNodesList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedNodesList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedNodesRelationships operation.
     * @callback module:api/CollectionsApi~collectionsLinkedNodesRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link Nodes to Collection
     * This endpoint allow users to a add a node to a collection by issuing a POST request. #### Permissions This returns all public nodes associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of comment objects. Each resource in the array is a separate comment object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsLinkedNodesRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedNodesRelationships(collectionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedNodesRelationships");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsLinkedNodesRelationships");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_nodes/relationships/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedNodesRelationshipsCreate operation.
     * @callback module:api/CollectionsApi~collectionsLinkedNodesRelationshipsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Give a Sparse List of Node Ids
     * List of all the node ids linked to the given collection. #### Permissions This returns all public nodes associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsLinkedNodesRelationshipsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedNodesRelationshipsCreate(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedNodesRelationshipsCreate");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_nodes/relationships/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedNodesRelationshipsDelete operation.
     * @callback module:api/CollectionsApi~collectionsLinkedNodesRelationshipsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Nodes From Collection
     *  This removes associated nodes from a collection #### Permissions Any user with write permissions on this collection should be to remove nodes from this collection. #### Returns Nothing in the response body.
     * @param {String} collectionId A short id for that collection
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsLinkedNodesRelationshipsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedNodesRelationshipsDelete(collectionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedNodesRelationshipsDelete");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsLinkedNodesRelationshipsDelete");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_nodes/relationships/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedPreprintsList operation.
     * @callback module:api/CollectionsApi~collectionsLinkedPreprintsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Linked Preprints for a Collection
     * List of all preprints linked to the given collection. #### Permissions This returns all public preprints associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsLinkedPreprintsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedPreprintsList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedPreprintsList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'links', 'meta'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_preprints/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedRegistrationsList operation.
     * @callback module:api/CollectionsApi~collectionsLinkedRegistrationsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Linked Registrations for a Collection
     * List of all registrations linked to the given collection. #### Permissions This returns all public registrations associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsLinkedRegistrationsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedRegistrationsList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedRegistrationsList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'links', 'meta'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_registrations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedRegistrationsRelationships operation.
     * @callback module:api/CollectionsApi~collectionsLinkedRegistrationsRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link Registrations to Collection
     * This endpoint allow users to a add a registration to a collection by issuing a POST request. #### Permissions This returns all public registrations associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of comment objects. Each resource in the array is a separate comment object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsLinkedRegistrationsRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedRegistrationsRelationships(collectionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedRegistrationsRelationships");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsLinkedRegistrationsRelationships");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_registrations/relationships/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedRegistrationsRelationshipsCreate operation.
     * @callback module:api/CollectionsApi~collectionsLinkedRegistrationsRelationshipsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Give a Sparse List of Registrations Ids
     * List of all the registration ids linked to the given collection. #### Permissions This returns all public registrations associated with this collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsLinkedRegistrationsRelationshipsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedRegistrationsRelationshipsCreate(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedRegistrationsRelationshipsCreate");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_registrations/relationships/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsLinkedRegistrationsRelationshipsDelete operation.
     * @callback module:api/CollectionsApi~collectionsLinkedRegistrationsRelationshipsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Registrations From Collection
     *  This removes associated registrations from a collection #### Permissions Any user with write permissions on this collection should be to remove registrations from this collection. #### Returns Nothing in the response body.
     * @param {String} collectionId A short id for that collection
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsLinkedRegistrationsRelationshipsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsLinkedRegistrationsRelationshipsDelete(collectionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsLinkedRegistrationsRelationshipsDelete");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsLinkedRegistrationsRelationshipsDelete");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/linked_registrations/relationships/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsList operation.
     * @callback module:api/CollectionsApi~collectionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Collections
     * Retrieves a list collections, either public or related to the user #### Permissions Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.  Comments on private nodes are only visible to contributors and administrators on the parent node. #### Returns Returns a JSON object containing `data` and `links` keys. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {module:api/CollectionsApi~collectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    collectionsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/collections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsMetadataDelete operation.
     * @callback module:api/CollectionsApi~collectionsMetadataDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Collection Metadata from entitiy
     *  #### Permissions Only a user with collection admin permissions can delete collected metadata #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {String} cgmId A short id for that piece of metadata
     * @param {module:api/CollectionsApi~collectionsMetadataDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsMetadataDelete(collectionId, cgmId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsMetadataDelete");
      }
      // verify the required parameter 'cgmId' is set
      if (cgmId === undefined || cgmId === null) {
        throw new Error("Missing the required parameter 'cgmId' when calling collectionsMetadataDelete");
      }

      let pathParams = {
        'collection_id': collectionId,
        'cgm_id': cgmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/{cgm_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsMetadataDetail operation.
     * @callback module:api/CollectionsApi~collectionsMetadataDetailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Metadata or Subjects to an Entity in a Collection
     * List of user created metadata for entities within a collection. #### Permissions To edit this collection a user must have collections write permissions #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {String} cgmId A short id for that piece of metadata
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsMetadataDetailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsMetadataDetail(collectionId, cgmId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsMetadataDetail");
      }
      // verify the required parameter 'cgmId' is set
      if (cgmId === undefined || cgmId === null) {
        throw new Error("Missing the required parameter 'cgmId' when calling collectionsMetadataDetail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsMetadataDetail");
      }

      let pathParams = {
        'collection_id': collectionId,
        'cgm_id': cgmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/{cgm_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsMetadataRegistrationsDetail operation.
     * @callback module:api/CollectionsApi~collectionsMetadataRegistrationsDetailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Specific Metadata for a Collection
     *  #### Permissions In order to view this metadata it must be public or a user must have read permissions for collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     * @param {String} collectionId A short id for that collection
     * @param {String} cgmId A short id for that piece of metadata
     * @param {module:api/CollectionsApi~collectionsMetadataRegistrationsDetailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsMetadataRegistrationsDetail(collectionId, cgmId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsMetadataRegistrationsDetail");
      }
      // verify the required parameter 'cgmId' is set
      if (cgmId === undefined || cgmId === null) {
        throw new Error("Missing the required parameter 'cgmId' when calling collectionsMetadataRegistrationsDetail");
      }

      let pathParams = {
        'collection_id': collectionId,
        'cgm_id': cgmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['data', 'meta'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/{cgm_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsMetadataRegistrationsList operation.
     * @callback module:api/CollectionsApi~collectionsMetadataRegistrationsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of collected metadata for a collection
     * List of user created metadata for entities within a collection. #### Permissions In order to view this metadata it must be public or a user must have read permissions for collection. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     * @param {String} collectionId A short id for that collection
     * @param {module:api/CollectionsApi~collectionsMetadataRegistrationsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsMetadataRegistrationsList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsMetadataRegistrationsList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsMetadataSubjectsRelationships operation.
     * @callback module:api/CollectionsApi~collectionsMetadataSubjectsRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve subject metadata for a specific piece of metadata in a collection
     *  #### Permissions This is public for a logged out user when an entity is public. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {String} cgmId A short id for that piece of metadata
     * @param {module:api/CollectionsApi~collectionsMetadataSubjectsRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsMetadataSubjectsRelationships(collectionId, cgmId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsMetadataSubjectsRelationships");
      }
      // verify the required parameter 'cgmId' is set
      if (cgmId === undefined || cgmId === null) {
        throw new Error("Missing the required parameter 'cgmId' when calling collectionsMetadataSubjectsRelationships");
      }

      let pathParams = {
        'collection_id': collectionId,
        'cgm_id': cgmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsMetadataSubjectsRelationshipsUpdate operation.
     * @callback module:api/CollectionsApi~collectionsMetadataSubjectsRelationshipsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update subjects for a specific piece of metadata in a collection
     *  #### Permissions This is editable for a user with a write permission for this collection.  #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of nodes ids. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} collectionId A short id for that collection
     * @param {String} cgmId A short id for that piece of metadata
     * @param {Object.<String, Object>} body 
     * @param {module:api/CollectionsApi~collectionsMetadataSubjectsRelationshipsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    collectionsMetadataSubjectsRelationshipsUpdate(collectionId, cgmId, body, callback) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionsMetadataSubjectsRelationshipsUpdate");
      }
      // verify the required parameter 'cgmId' is set
      if (cgmId === undefined || cgmId === null) {
        throw new Error("Missing the required parameter 'cgmId' when calling collectionsMetadataSubjectsRelationshipsUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsMetadataSubjectsRelationshipsUpdate");
      }

      let pathParams = {
        'collection_id': collectionId,
        'cgm_id': cgmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
