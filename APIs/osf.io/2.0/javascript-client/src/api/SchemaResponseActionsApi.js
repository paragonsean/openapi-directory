/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SchemaResponseActions from '../model/SchemaResponseActions';

/**
* SchemaResponseActions service.
* @module api/SchemaResponseActionsApi
* @version 2.0
*/
export default class SchemaResponseActionsApi {

    /**
    * Constructs a new SchemaResponseActionsApi. 
    * @alias module:api/SchemaResponseActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schemaResponseActionRead operation.
     * @callback module:api/SchemaResponseActionsApi~schemaResponseActionReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponseActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Schema Response Actions for a Schema Response
     * This retrieves a paginated list of all Schema Response Actions created for a Schema Response. #### Returns Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {module:api/SchemaResponseActionsApi~schemaResponseActionReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponseActions}
     */
    schemaResponseActionRead(schemaResponseId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponseActionRead");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = SchemaResponseActions;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}/actions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsesSchemaResponseIdActionsPost operation.
     * @callback module:api/SchemaResponseActionsApi~schemaResponsesSchemaResponseIdActionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Schema Response Action
     * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response. #### Returns Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {module:api/SchemaResponseActionsApi~schemaResponsesSchemaResponseIdActionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schemaResponsesSchemaResponseIdActionsPost(schemaResponseId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponsesSchemaResponseIdActionsPost");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}/actions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet operation.
     * @callback module:api/SchemaResponseActionsApi~schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponseActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A Schema Response Action from a Schema Response
     * Retrieves a Schema Response Action by it's ID. #### Returns Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Schema Response example `61b9cd62eb66180215222669`.
     * @param {String} schemaResponseActionId The unique identifier of the Schema Response Action example `61b9eae1a7d8ac025c4c46d3`.
     * @param {module:api/SchemaResponseActionsApi~schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponseActions}
     */
    schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet(schemaResponseId, schemaResponseActionId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet");
      }
      // verify the required parameter 'schemaResponseActionId' is set
      if (schemaResponseActionId === undefined || schemaResponseActionId === null) {
        throw new Error("Missing the required parameter 'schemaResponseActionId' when calling schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId,
        'schema_response_action_id': schemaResponseActionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = SchemaResponseActions;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}/actions/{schema_response_action_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
