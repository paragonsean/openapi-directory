/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddonAccount from '../model/AddonAccount';
import Institution from '../model/Institution';
import Node from '../model/Node';
import Preprint from '../model/Preprint';
import User from '../model/User';
import UserAddon from '../model/UserAddon';

/**
* Users service.
* @module api/UsersApi
* @version 2.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersAddonAccountsList operation.
     * @callback module:api/UsersApi~usersAddonAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddonAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all addon accounts
     *  A paginated list of addon accounts authorized by this user.  #### Permissions  Addon accounts are visible only to the user that authorized the account.  #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of at most 10 addon account objects. Each resource in the array is a separate  addon account object and contains the full representation of the addon account.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} userId The unique identifier of the user.
     * @param {String} provider The unique identifier of the addon provider.
     * @param {module:api/UsersApi~usersAddonAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddonAccount>}
     */
    usersAddonAccountsList(userId, provider, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddonAccountsList");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling usersAddonAccountsList");
      }

      let pathParams = {
        'user_id': userId,
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [AddonAccount];
      return this.apiClient.callApi(
        '/users/{user_id}/addons/{provider}/accounts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersAddonAccountsRead operation.
     * @callback module:api/UsersApi~usersAddonAccountsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddonAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an addon account
     * Retrieves the details of an addon account  #### Permissions  Addon accounts are visible only to the user that authorized the account.  #### Returns Returns a JSON object with a `data` key containing the representation of the requested addon account, if the request was successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} userId The unique identifier of the user.
     * @param {String} provider The unique identifier of the addon provider.
     * @param {String} accountId The unique identifier of the addon account.
     * @param {module:api/UsersApi~usersAddonAccountsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddonAccount}
     */
    usersAddonAccountsRead(userId, provider, accountId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddonAccountsRead");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling usersAddonAccountsRead");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling usersAddonAccountsRead");
      }

      let pathParams = {
        'user_id': userId,
        'provider': provider,
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = AddonAccount;
      return this.apiClient.callApi(
        '/users/{user_id}/addons/{provider}/accounts/{account_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersAddonsList operation.
     * @callback module:api/UsersApi~usersAddonsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserAddon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all user addons
     *  A paginated list of authorized user addons  #### Permissions  User addons are visible only to the user that authorized the addon.  #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  Attempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/UsersApi~usersAddonsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserAddon>}
     */
    usersAddonsList(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddonsList");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [UserAddon];
      return this.apiClient.callApi(
        '/users/{user_id}/addons/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersAddonsRead operation.
     * @callback module:api/UsersApi~usersAddonsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAddon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user addon
     * Retrieves the details of an authorized user addon  #### Permissions  User addons are visible only to the user that authorized the addon.  #### Returns Returns a JSON object with a `data` key containing the representation of the requested user addon, if the request was successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  Attempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.
     * @param {String} userId The unique identifier of the user.
     * @param {String} provider The unique identifier of the addon provider.
     * @param {module:api/UsersApi~usersAddonsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAddon}
     */
    usersAddonsRead(userId, provider, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddonsRead");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling usersAddonsRead");
      }

      let pathParams = {
        'user_id': userId,
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = UserAddon;
      return this.apiClient.callApi(
        '/users/{user_id}/addons/{provider}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersInstitutionsList operation.
     * @callback module:api/UsersApi~usersInstitutionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Institution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all institutions
     * A paginated list of institutions that the user is affiliated with. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 institutions. Each resource in the array is a complete institution object and contains the full representation of the institution, meaning additional requests to a institution's detail view are not necessary.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/UsersApi~usersInstitutionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Institution>}
     */
    usersInstitutionsList(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersInstitutionsList");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Institution];
      return this.apiClient.callApi(
        '/users/{user_id}/institutions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/UsersApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users
     *  A paginated list of all users registered on the OSF. The returned users are sorted by their `date_registered`, with the most recently registered users appearing first.  The subroute `/users/me/` is a special endpoint that always points to the currently logged-in user. #### Versioning As of version `2.3`, merged users will not be returned from this endpoint. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 users. Each resource in the array is a separate users object and contains the full representation of the user, meaning additional requests to a user's detail view are not necessary.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/?filter[family_name]=Nosek.  Users may be filtered by their `id`, `full_name`, `given_name`, `middle_name`, or `family_name`.
     * @param {module:api/UsersApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    usersList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersNodesList operation.
     * @callback module:api/UsersApi~usersNodesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Node>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all nodes
     * A paginated list of nodes that the user is a contributor to. The returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.  If the user ID in the path is the same as the logged-in user, all nodes will be returned. Otherwise, only the user's public nodes will be returned.  User registrations are not available at this endpoint. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/nodes/?filter[title]=open.  Nodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/UsersApi~usersNodesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Node>}
     */
    usersNodesList(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersNodesList");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Node];
      return this.apiClient.callApi(
        '/users/{user_id}/nodes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPartialUpdate operation.
     * @callback module:api/UsersApi~usersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Updates a user by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.  Users can be updated with either a **PUT** or **PATCH** request. The `full_name` field is mandatory in a **PUT** request, and optional in a **PATCH**.  **Note**: if you make a PUT/PATCH request to the `/users/me/` endpoint, you must still provide your full user ID in the ID field of the request. We do not support using the `me` alias in request bodies at this time. #### Returns Returns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} userId The unique identifier of the user.
     * @param {module:model/User} user 
     * @param {module:api/UsersApi~usersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPartialUpdate(userId, user, callback) {
      let postBody = user;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPartialUpdate");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersPartialUpdate");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPreprintsList operation.
     * @callback module:api/UsersApi~usersPreprintsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Preprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all preprints
     * A paginated list of preprints that the user contributes to. The returned preprints are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 preprints. Each resource in the array is a complete preprint object and contains the full representation of the preprint, meaning additional requests to a preprint's detail view are not necessary.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/preprints/?filter[provider]=psyarxiv.  Preprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/UsersApi~usersPreprintsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Preprint>}
     */
    usersPreprintsList(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPreprintsList");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Preprint];
      return this.apiClient.callApi(
        '/users/{user_id}/preprints/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersRead operation.
     * @callback module:api/UsersApi~usersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user
     * Retrieves the details of a given users.  The returned information includes the user's bibliographic information and the date the user was registered.  Additionally, relationships to the list of institutions with which the user is affiliated, and to the list of nodes which the user contributes to (that the requesting user has permission to see) are returned.  If `me` is given as the `user_id` in the request path, the record of the currently logged-in user will be returned. #### Returns Returns a JSON object with a `data` key containing the representation of the requested user, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/UsersApi~usersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersRead(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersRead");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{user_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersRegistrationsList operation.
     * @callback module:api/UsersApi~usersRegistrationsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all registrations
     * A paginated list of registrations that the user is a contributor to. The returned registrations are sorted by their `date_modified`, with the most recently updated registrations appearing first.  If the user ID in the path is the same as the logged-in user, all registrations will be returned. Otherwise, only the user's public registrations will be returned.  User nodes are not available at this endpoint. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/registrations/?filter[title]=replication.  Registrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/UsersApi~usersRegistrationsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersRegistrationsList(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersRegistrationsList");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/registrations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
