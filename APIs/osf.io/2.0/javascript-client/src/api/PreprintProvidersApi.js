/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import License from '../model/License';
import Preprint from '../model/Preprint';
import PreprintProviders from '../model/PreprintProviders';
import Taxonomy from '../model/Taxonomy';

/**
* PreprintProviders service.
* @module api/PreprintProvidersApi
* @version 2.0
*/
export default class PreprintProvidersApi {

    /**
    * Constructs a new PreprintProvidersApi. 
    * @alias module:api/PreprintProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the preprintProviderDetail operation.
     * @callback module:api/PreprintProvidersApi~preprintProviderDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreprintProviders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a preprint provider
     * Retrieves the details of a preprint provider. #### Returns Returns a JSON object with a `data` key containing the representation of the requested preprint provider, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Acceptable Subjects Structure Each preprint provider specifies acceptable subjects. `subjects_acceptable` is an array found in `attributes`. Subjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.       \"subjects_acceptable\": [         [             [                 # Parent Subject:                 # Architecture                 \"584240d954be81056ceca9e5\",                  # Child Subject:                 # Architectural Engineering                 \"584240da54be81056cecac87\"             ],             # Include all Architectural Engineering's children:             true         ],         [             [                 # Parent Subject:                 # Engineering                 \"584240da54be81056cecaca9\",                  # Child Subject:                 # Aerospace Engineering                 \"584240db54be81056cecacd6\",                  # Grandchild Subject:                 # Aerodynamics and Fluid Mechanics                 \"584240da54be81056cecaa74\"             ],             # All nestings 3 deep must be false             false         ]     ]  The above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering's children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.
     * @param {String} preprintProviderId The unique identifier of the preprint provider.
     * @param {module:api/PreprintProvidersApi~preprintProviderDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreprintProviders}
     */
    preprintProviderDetail(preprintProviderId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintProviderId' is set
      if (preprintProviderId === undefined || preprintProviderId === null) {
        throw new Error("Missing the required parameter 'preprintProviderId' when calling preprintProviderDetail");
      }

      let pathParams = {
        'preprint_provider_id': preprintProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = PreprintProviders;
      return this.apiClient.callApi(
        '/preprint_providers/{preprint_provider_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintProviderLicensesList operation.
     * @callback module:api/PreprintProvidersApi~preprintProviderLicensesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/License} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all licenses
     *  A paginated list of the licenses allowed by a preprint provider. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} preprintProviderId The unique identifier of the preprint provider.
     * @param {module:api/PreprintProvidersApi~preprintProviderLicensesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/License}
     */
    preprintProviderLicensesList(preprintProviderId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintProviderId' is set
      if (preprintProviderId === undefined || preprintProviderId === null) {
        throw new Error("Missing the required parameter 'preprintProviderId' when calling preprintProviderLicensesList");
      }

      let pathParams = {
        'preprint_provider_id': preprintProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = License;
      return this.apiClient.callApi(
        '/preprint_providers/{preprint_provider_id}/licenses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintProviderList operation.
     * @callback module:api/PreprintProvidersApi~preprintProviderListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreprintProviders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all preprint providers
     *  A paginated list of all preprint providers. The returned preprint providers are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include preprint providers that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprint_providers/?filter[id]=osf.  Preprint Providers may be filtered by their `id`, `name`,  and `description`
     * @param {module:api/PreprintProvidersApi~preprintProviderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreprintProviders}
     */
    preprintProviderList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = PreprintProviders;
      return this.apiClient.callApi(
        '/preprint_providers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintProviderTaxonomiesList operation.
     * @callback module:api/PreprintProvidersApi~preprintProviderTaxonomiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Taxonomy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all taxonomies
     *  A paginated list of the taxonomies for a preprint provider. The returned preprint providers taxonomies are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} preprintProviderId The unique identifier of the preprint provider.
     * @param {module:api/PreprintProvidersApi~preprintProviderTaxonomiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Taxonomy}
     */
    preprintProviderTaxonomiesList(preprintProviderId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintProviderId' is set
      if (preprintProviderId === undefined || preprintProviderId === null) {
        throw new Error("Missing the required parameter 'preprintProviderId' when calling preprintProviderTaxonomiesList");
      }

      let pathParams = {
        'preprint_provider_id': preprintProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Taxonomy;
      return this.apiClient.callApi(
        '/preprint_providers/{preprint_provider_id}/taxonomies/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preprintProvidersPreprintsList operation.
     * @callback module:api/PreprintProvidersApi~preprintProvidersPreprintsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Preprint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all preprints
     *  A paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing `data` and `links` keys.  The `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.  The `links` key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Filtering You can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprint_providers/osf/preprints/?filter[is_published]=true.  Preprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.
     * @param {String} preprintProviderId The unique identifier of the preprint provider.
     * @param {module:api/PreprintProvidersApi~preprintProvidersPreprintsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Preprint>}
     */
    preprintProvidersPreprintsList(preprintProviderId, callback) {
      let postBody = null;
      // verify the required parameter 'preprintProviderId' is set
      if (preprintProviderId === undefined || preprintProviderId === null) {
        throw new Error("Missing the required parameter 'preprintProviderId' when calling preprintProvidersPreprintsList");
      }

      let pathParams = {
        'preprint_provider_id': preprintProviderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [Preprint];
      return this.apiClient.callApi(
        '/preprint_providers/{preprint_provider_id}/preprints/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
