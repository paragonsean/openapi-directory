/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import License from '../model/License';

/**
* Licenses service.
* @module api/LicensesApi
* @version 2.0
*/
export default class LicensesApi {

    /**
    * Constructs a new LicensesApi. 
    * @alias module:api/LicensesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the licenseList operation.
     * @callback module:api/LicensesApi~licenseListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/License>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all licenses
     * A paginated list of licenses. The returned licenses are sorted by their name. #### Returns Returns a JSON object containing `data` and `links` keys. The `data` key contains an array of 10 licenses. Each resource in the array is a separate license object and contains the full representation of the license, meaning additional requests to a license's detail view are not necessary.  The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include licenses that match your filters by utilizing the `filter` query parameter, e.g. [https://api.osf.io/v2/licenses/?filter[name]=apache](https://api.osf.io/v2/licenses/?filter[name]=apache).  Licenses may be filtered by their `id`, and `name`.
     * @param {module:api/LicensesApi~licenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/License>}
     */
    licenseList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [License];
      return this.apiClient.callApi(
        '/licenses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensesRead operation.
     * @callback module:api/LicensesApi~licensesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/License} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a license
     * Retrieves the details of a license. #### Returns Returns a JSON object with a `data` key containing the representation of the requested license, if the request is successful.  If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} licenseId The unique identifier of the license.
     * @param {module:api/LicensesApi~licensesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/License}
     */
    licensesRead(licenseId, callback) {
      let postBody = null;
      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling licensesRead");
      }

      let pathParams = {
        'license_id': licenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = License;
      return this.apiClient.callApi(
        '/license/{license_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
