/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SchemaResponses from '../model/SchemaResponses';

/**
* SchemaResponses service.
* @module api/SchemaResponsesApi
* @version 2.0
*/
export default class SchemaResponsesApi {

    /**
    * Constructs a new SchemaResponsesApi. 
    * @alias module:api/SchemaResponsesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schemaResponseDelete operation.
     * @callback module:api/SchemaResponsesApi~schemaResponseDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Incomplete Schema Response
     * This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the `in_progress` state. Once a Schema Response is transitioned to an `approved` it is immutable and another Schema Response must be created to update the Schema Response for that registration. #### Returns Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {module:api/SchemaResponsesApi~schemaResponseDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schemaResponseDelete(schemaResponseId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponseDelete");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsePatch operation.
     * @callback module:api/SchemaResponsesApi~schemaResponsePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Registration's Schema Response
     * Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an `in_progress` state. #### Returns Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {module:model/SchemaResponses} schemaResponses 
     * @param {module:api/SchemaResponsesApi~schemaResponsePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponses}
     */
    schemaResponsePatch(schemaResponseId, schemaResponses, callback) {
      let postBody = schemaResponses;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponsePatch");
      }
      // verify the required parameter 'schemaResponses' is set
      if (schemaResponses === undefined || schemaResponses === null) {
        throw new Error("Missing the required parameter 'schemaResponses' when calling schemaResponsePatch");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*', 'application/json'];
      let returnType = SchemaResponses;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsePpost operation.
     * @callback module:api/SchemaResponsesApi~schemaResponsePpostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Schema Response
     * This endpoint creates a new Schema Response with an `in_progress` state. A new response can only be created if the current schema response is in an `approved` state. #### Returns Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {module:model/SchemaResponses} schemaResponses 
     * @param {module:api/SchemaResponsesApi~schemaResponsePpostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponses}
     */
    schemaResponsePpost(schemaResponses, callback) {
      let postBody = schemaResponses;
      // verify the required parameter 'schemaResponses' is set
      if (schemaResponses === undefined || schemaResponses === null) {
        throw new Error("Missing the required parameter 'schemaResponses' when calling schemaResponsePpost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*', 'application/json'];
      let returnType = SchemaResponses;
      return this.apiClient.callApi(
        '/schema_responses/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsesList operation.
     * @callback module:api/SchemaResponsesApi~schemaResponsesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Schema Responses
     * This retrieves a paginated list of all active Schema Responses that are public. #### Returns Returns a JSON object containing `data` and `links` keys. The `data` key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     * @param {module:api/SchemaResponsesApi~schemaResponsesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponses}
     */
    schemaResponsesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = SchemaResponses;
      return this.apiClient.callApi(
        '/schema_responses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaResponsesRead operation.
     * @callback module:api/SchemaResponsesApi~schemaResponsesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Schema Response
     * This retrieves a single Schema response using it's id. #### Returns Returns a JSON object with a `data` key containing the representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param {String} schemaResponseId The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
     * @param {module:api/SchemaResponsesApi~schemaResponsesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponses}
     */
    schemaResponsesRead(schemaResponseId, callback) {
      let postBody = null;
      // verify the required parameter 'schemaResponseId' is set
      if (schemaResponseId === undefined || schemaResponseId === null) {
        throw new Error("Missing the required parameter 'schemaResponseId' when calling schemaResponsesRead");
      }

      let pathParams = {
        'schema_response_id': schemaResponseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = SchemaResponses;
      return this.apiClient.callApi(
        '/schema_responses/{schema_response_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
