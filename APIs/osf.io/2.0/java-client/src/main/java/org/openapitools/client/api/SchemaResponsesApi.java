/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SchemaResponses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemaResponsesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchemaResponsesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaResponsesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schemaResponseDelete
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponseDeleteCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponseDeleteValidateBeforeCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponseDelete(Async)");
        }

        return schemaResponseDeleteCall(schemaResponseId, _callback);

    }

    /**
     * Delete a Incomplete Schema Response
     * This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the &#x60;in_progress&#x60; state. Once a Schema Response is transitioned to an &#x60;approved&#x60; it is immutable and another Schema Response must be created to update the Schema Response for that registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void schemaResponseDelete(String schemaResponseId) throws ApiException {
        schemaResponseDeleteWithHttpInfo(schemaResponseId);
    }

    /**
     * Delete a Incomplete Schema Response
     * This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the &#x60;in_progress&#x60; state. Once a Schema Response is transitioned to an &#x60;approved&#x60; it is immutable and another Schema Response must be created to update the Schema Response for that registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schemaResponseDeleteWithHttpInfo(String schemaResponseId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponseDeleteValidateBeforeCall(schemaResponseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Incomplete Schema Response (asynchronously)
     * This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the &#x60;in_progress&#x60; state. Once a Schema Response is transitioned to an &#x60;approved&#x60; it is immutable and another Schema Response must be created to update the Schema Response for that registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponseDeleteAsync(String schemaResponseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponseDeleteValidateBeforeCall(schemaResponseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsePatch
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponses  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsePatchCall(String schemaResponseId, SchemaResponses schemaResponses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schemaResponses;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsePatchValidateBeforeCall(String schemaResponseId, SchemaResponses schemaResponses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponsePatch(Async)");
        }

        // verify the required parameter 'schemaResponses' is set
        if (schemaResponses == null) {
            throw new ApiException("Missing the required parameter 'schemaResponses' when calling schemaResponsePatch(Async)");
        }

        return schemaResponsePatchCall(schemaResponseId, schemaResponses, _callback);

    }

    /**
     * Update a Registration&#39;s Schema Response
     * Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an &#x60;in_progress&#x60; state. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponses  (required)
     * @return SchemaResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SchemaResponses schemaResponsePatch(String schemaResponseId, SchemaResponses schemaResponses) throws ApiException {
        ApiResponse<SchemaResponses> localVarResp = schemaResponsePatchWithHttpInfo(schemaResponseId, schemaResponses);
        return localVarResp.getData();
    }

    /**
     * Update a Registration&#39;s Schema Response
     * Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an &#x60;in_progress&#x60; state. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponses  (required)
     * @return ApiResponse&lt;SchemaResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaResponses> schemaResponsePatchWithHttpInfo(String schemaResponseId, SchemaResponses schemaResponses) throws ApiException {
        okhttp3.Call localVarCall = schemaResponsePatchValidateBeforeCall(schemaResponseId, schemaResponses, null);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Registration&#39;s Schema Response (asynchronously)
     * Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an &#x60;in_progress&#x60; state. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponses  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsePatchAsync(String schemaResponseId, SchemaResponses schemaResponses, final ApiCallback<SchemaResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsePatchValidateBeforeCall(schemaResponseId, schemaResponses, _callback);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsePpost
     * @param schemaResponses  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsePpostCall(SchemaResponses schemaResponses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schemaResponses;

        // create path and map variables
        String localVarPath = "/schema_responses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsePpostValidateBeforeCall(SchemaResponses schemaResponses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponses' is set
        if (schemaResponses == null) {
            throw new ApiException("Missing the required parameter 'schemaResponses' when calling schemaResponsePpost(Async)");
        }

        return schemaResponsePpostCall(schemaResponses, _callback);

    }

    /**
     * Create a new Schema Response
     * This endpoint creates a new Schema Response with an &#x60;in_progress&#x60; state. A new response can only be created if the current schema response is in an &#x60;approved&#x60; state. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponses  (required)
     * @return SchemaResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SchemaResponses schemaResponsePpost(SchemaResponses schemaResponses) throws ApiException {
        ApiResponse<SchemaResponses> localVarResp = schemaResponsePpostWithHttpInfo(schemaResponses);
        return localVarResp.getData();
    }

    /**
     * Create a new Schema Response
     * This endpoint creates a new Schema Response with an &#x60;in_progress&#x60; state. A new response can only be created if the current schema response is in an &#x60;approved&#x60; state. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponses  (required)
     * @return ApiResponse&lt;SchemaResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaResponses> schemaResponsePpostWithHttpInfo(SchemaResponses schemaResponses) throws ApiException {
        okhttp3.Call localVarCall = schemaResponsePpostValidateBeforeCall(schemaResponses, null);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Schema Response (asynchronously)
     * This endpoint creates a new Schema Response with an &#x60;in_progress&#x60; state. A new response can only be created if the current schema response is in an &#x60;approved&#x60; state. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing an updated representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponses  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsePpostAsync(SchemaResponses schemaResponses, final ApiCallback<SchemaResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsePpostValidateBeforeCall(schemaResponses, _callback);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return schemaResponsesListCall(_callback);

    }

    /**
     * List all Schema Responses
     * This retrieves a paginated list of all active Schema Responses that are public. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys. The &#x60;data&#x60; key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     * @return SchemaResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SchemaResponses schemaResponsesList() throws ApiException {
        ApiResponse<SchemaResponses> localVarResp = schemaResponsesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all Schema Responses
     * This retrieves a paginated list of all active Schema Responses that are public. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys. The &#x60;data&#x60; key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     * @return ApiResponse&lt;SchemaResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaResponses> schemaResponsesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = schemaResponsesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Schema Responses (asynchronously)
     * This retrieves a paginated list of all active Schema Responses that are public. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys. The &#x60;data&#x60; key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesListAsync(final ApiCallback<SchemaResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsesRead
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesReadCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsesReadValidateBeforeCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponsesRead(Async)");
        }

        return schemaResponsesReadCall(schemaResponseId, _callback);

    }

    /**
     * Retrieve a Schema Response
     * This retrieves a single Schema response using it&#39;s id. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return SchemaResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SchemaResponses schemaResponsesRead(String schemaResponseId) throws ApiException {
        ApiResponse<SchemaResponses> localVarResp = schemaResponsesReadWithHttpInfo(schemaResponseId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Schema Response
     * This retrieves a single Schema response using it&#39;s id. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return ApiResponse&lt;SchemaResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaResponses> schemaResponsesReadWithHttpInfo(String schemaResponseId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponsesReadValidateBeforeCall(schemaResponseId, null);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Schema Response (asynchronously)
     * This retrieves a single Schema response using it&#39;s id. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesReadAsync(String schemaResponseId, final ApiCallback<SchemaResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsesReadValidateBeforeCall(schemaResponseId, _callback);
        Type localVarReturnType = new TypeToken<SchemaResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
