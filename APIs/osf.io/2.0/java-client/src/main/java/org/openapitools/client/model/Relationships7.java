/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URLs to other entities or entity collections that have a relationship to the node entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relationships7 {
  public static final String SERIALIZED_NAME_AFFILIATED_INSTITUTIONS = "affiliated_institutions";
  @SerializedName(SERIALIZED_NAME_AFFILIATED_INSTITUTIONS)
  private String affiliatedInstitutions;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private String children;

  public static final String SERIALIZED_NAME_CITATION = "citation";
  @SerializedName(SERIALIZED_NAME_CITATION)
  private String citation;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private String contributors;

  public static final String SERIALIZED_NAME_DRAFT_REGISTRATIONS = "draft_registrations";
  @SerializedName(SERIALIZED_NAME_DRAFT_REGISTRATIONS)
  private String draftRegistrations;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private String files;

  public static final String SERIALIZED_NAME_FORKED_FROM = "forked_from";
  @SerializedName(SERIALIZED_NAME_FORKED_FROM)
  private String forkedFrom;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @SerializedName(SERIALIZED_NAME_FORKS)
  private String forks;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private String identifiers;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_LINKED_NODES = "linked_nodes";
  @SerializedName(SERIALIZED_NAME_LINKED_NODES)
  private String linkedNodes;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private String logs;

  public static final String SERIALIZED_NAME_NODE_LINKS = "node_links";
  @SerializedName(SERIALIZED_NAME_NODE_LINKS)
  private String nodeLinks;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_PREPRINTS = "preprints";
  @SerializedName(SERIALIZED_NAME_PREPRINTS)
  private String preprints;

  public static final String SERIALIZED_NAME_REGISTRATIONS = "registrations";
  @SerializedName(SERIALIZED_NAME_REGISTRATIONS)
  private String registrations;

  public static final String SERIALIZED_NAME_ROOT = "root";
  @SerializedName(SERIALIZED_NAME_ROOT)
  private String root;

  public static final String SERIALIZED_NAME_TEMPLATE_NODE = "template_node";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NODE)
  private String templateNode;

  public static final String SERIALIZED_NAME_VIEW_ONLY_LINKS = "view_only_links";
  @SerializedName(SERIALIZED_NAME_VIEW_ONLY_LINKS)
  private String viewOnlyLinks;

  public static final String SERIALIZED_NAME_WIKIS = "wikis";
  @SerializedName(SERIALIZED_NAME_WIKIS)
  private String wikis;

  public Relationships7() {
  }

  public Relationships7(
     String affiliatedInstitutions, 
     String children, 
     String citation, 
     String comments, 
     String contributors, 
     String draftRegistrations, 
     String files, 
     String forkedFrom, 
     String forks, 
     String identifiers, 
     String license, 
     String linkedNodes, 
     String logs, 
     String nodeLinks, 
     String parent, 
     String preprints, 
     String registrations, 
     String root, 
     String templateNode, 
     String viewOnlyLinks, 
     String wikis
  ) {
    this();
    this.affiliatedInstitutions = affiliatedInstitutions;
    this.children = children;
    this.citation = citation;
    this.comments = comments;
    this.contributors = contributors;
    this.draftRegistrations = draftRegistrations;
    this.files = files;
    this.forkedFrom = forkedFrom;
    this.forks = forks;
    this.identifiers = identifiers;
    this.license = license;
    this.linkedNodes = linkedNodes;
    this.logs = logs;
    this.nodeLinks = nodeLinks;
    this.parent = parent;
    this.preprints = preprints;
    this.registrations = registrations;
    this.root = root;
    this.templateNode = templateNode;
    this.viewOnlyLinks = viewOnlyLinks;
    this.wikis = wikis;
  }

  /**
   * A link to the list of institutions this node is affiliated with.
   * @return affiliatedInstitutions
   */
  @javax.annotation.Nullable
  public String getAffiliatedInstitutions() {
    return affiliatedInstitutions;
  }



  /**
   * A link to the list of this node&#39;s children (components).
   * @return children
   */
  @javax.annotation.Nullable
  public String getChildren() {
    return children;
  }



  /**
   * A link to the citation details of this node.
   * @return citation
   */
  @javax.annotation.Nullable
  public String getCitation() {
    return citation;
  }



  /**
   * A link to the list of comments on this node.
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }



  /**
   * A link to the list of contributors on this node.
   * @return contributors
   */
  @javax.annotation.Nullable
  public String getContributors() {
    return contributors;
  }



  /**
   * A link to the list of registrations that have been initiated from this node and are still in a draft state.
   * @return draftRegistrations
   */
  @javax.annotation.Nullable
  public String getDraftRegistrations() {
    return draftRegistrations;
  }



  /**
   * A link to the list of storage providers that have been enabled on this node.
   * @return files
   */
  @javax.annotation.Nullable
  public String getFiles() {
    return files;
  }



  /**
   * A link to the node which this node was forked from, if this node is a fork.
   * @return forkedFrom
   */
  @javax.annotation.Nullable
  public String getForkedFrom() {
    return forkedFrom;
  }



  /**
   * A link to the list of nodes that are forks of this node.
   * @return forks
   */
  @javax.annotation.Nullable
  public String getForks() {
    return forks;
  }



  /**
   * A link to the list of identifiers for this node (i.e. ARK and DOI identifiers).
   * @return identifiers
   */
  @javax.annotation.Nullable
  public String getIdentifiers() {
    return identifiers;
  }



  /**
   * A link to the license that has been applied to this node.
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }



  /**
   * A link to the list of nodes that are linked to the current node.
   * @return linkedNodes
   */
  @javax.annotation.Nullable
  public String getLinkedNodes() {
    return linkedNodes;
  }



  /**
   * A link to the list of log actions pertaining to this node.
   * @return logs
   */
  @javax.annotation.Nullable
  public String getLogs() {
    return logs;
  }



  /**
   * A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead.
   * @return nodeLinks
   */
  @javax.annotation.Nullable
  public String getNodeLinks() {
    return nodeLinks;
  }



  /**
   * A link to the node that is the direct parent of the current node, if the current node is a child node.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }



  /**
   * A link to the list of preprints that this node relates to.
   * @return preprints
   */
  @javax.annotation.Nullable
  public String getPreprints() {
    return preprints;
  }



  /**
   * A link to the list of registrations that have been created from this node.
   * @return registrations
   */
  @javax.annotation.Nullable
  public String getRegistrations() {
    return registrations;
  }



  /**
   * A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node.
   * @return root
   */
  @javax.annotation.Nullable
  public String getRoot() {
    return root;
  }



  /**
   * A link to the node that the current node was templated from, if the current node was created from a template.
   * @return templateNode
   */
  @javax.annotation.Nullable
  public String getTemplateNode() {
    return templateNode;
  }



  /**
   * A link to the list of view only links that have been created for this node.
   * @return viewOnlyLinks
   */
  @javax.annotation.Nullable
  public String getViewOnlyLinks() {
    return viewOnlyLinks;
  }



  /**
   * A link to the list of wiki pages for this node.
   * @return wikis
   */
  @javax.annotation.Nullable
  public String getWikis() {
    return wikis;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships7 relationships7 = (Relationships7) o;
    return Objects.equals(this.affiliatedInstitutions, relationships7.affiliatedInstitutions) &&
        Objects.equals(this.children, relationships7.children) &&
        Objects.equals(this.citation, relationships7.citation) &&
        Objects.equals(this.comments, relationships7.comments) &&
        Objects.equals(this.contributors, relationships7.contributors) &&
        Objects.equals(this.draftRegistrations, relationships7.draftRegistrations) &&
        Objects.equals(this.files, relationships7.files) &&
        Objects.equals(this.forkedFrom, relationships7.forkedFrom) &&
        Objects.equals(this.forks, relationships7.forks) &&
        Objects.equals(this.identifiers, relationships7.identifiers) &&
        Objects.equals(this.license, relationships7.license) &&
        Objects.equals(this.linkedNodes, relationships7.linkedNodes) &&
        Objects.equals(this.logs, relationships7.logs) &&
        Objects.equals(this.nodeLinks, relationships7.nodeLinks) &&
        Objects.equals(this.parent, relationships7.parent) &&
        Objects.equals(this.preprints, relationships7.preprints) &&
        Objects.equals(this.registrations, relationships7.registrations) &&
        Objects.equals(this.root, relationships7.root) &&
        Objects.equals(this.templateNode, relationships7.templateNode) &&
        Objects.equals(this.viewOnlyLinks, relationships7.viewOnlyLinks) &&
        Objects.equals(this.wikis, relationships7.wikis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliatedInstitutions, children, citation, comments, contributors, draftRegistrations, files, forkedFrom, forks, identifiers, license, linkedNodes, logs, nodeLinks, parent, preprints, registrations, root, templateNode, viewOnlyLinks, wikis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships7 {\n");
    sb.append("    affiliatedInstitutions: ").append(toIndentedString(affiliatedInstitutions)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    citation: ").append(toIndentedString(citation)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    draftRegistrations: ").append(toIndentedString(draftRegistrations)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    forkedFrom: ").append(toIndentedString(forkedFrom)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    linkedNodes: ").append(toIndentedString(linkedNodes)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    nodeLinks: ").append(toIndentedString(nodeLinks)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    preprints: ").append(toIndentedString(preprints)).append("\n");
    sb.append("    registrations: ").append(toIndentedString(registrations)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    templateNode: ").append(toIndentedString(templateNode)).append("\n");
    sb.append("    viewOnlyLinks: ").append(toIndentedString(viewOnlyLinks)).append("\n");
    sb.append("    wikis: ").append(toIndentedString(wikis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliated_institutions");
    openapiFields.add("children");
    openapiFields.add("citation");
    openapiFields.add("comments");
    openapiFields.add("contributors");
    openapiFields.add("draft_registrations");
    openapiFields.add("files");
    openapiFields.add("forked_from");
    openapiFields.add("forks");
    openapiFields.add("identifiers");
    openapiFields.add("license");
    openapiFields.add("linked_nodes");
    openapiFields.add("logs");
    openapiFields.add("node_links");
    openapiFields.add("parent");
    openapiFields.add("preprints");
    openapiFields.add("registrations");
    openapiFields.add("root");
    openapiFields.add("template_node");
    openapiFields.add("view_only_links");
    openapiFields.add("wikis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relationships7
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relationships7.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relationships7 is not found in the empty JSON string", Relationships7.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relationships7.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relationships7` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliated_institutions") != null && !jsonObj.get("affiliated_institutions").isJsonNull()) && !jsonObj.get("affiliated_institutions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliated_institutions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliated_institutions").toString()));
      }
      if ((jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) && !jsonObj.get("children").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `children` to be a primitive type in the JSON string but got `%s`", jsonObj.get("children").toString()));
      }
      if ((jsonObj.get("citation") != null && !jsonObj.get("citation").isJsonNull()) && !jsonObj.get("citation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citation").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonNull()) && !jsonObj.get("contributors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors").toString()));
      }
      if ((jsonObj.get("draft_registrations") != null && !jsonObj.get("draft_registrations").isJsonNull()) && !jsonObj.get("draft_registrations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draft_registrations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draft_registrations").toString()));
      }
      if ((jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) && !jsonObj.get("files").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be a primitive type in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      if ((jsonObj.get("forked_from") != null && !jsonObj.get("forked_from").isJsonNull()) && !jsonObj.get("forked_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forked_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forked_from").toString()));
      }
      if ((jsonObj.get("forks") != null && !jsonObj.get("forks").isJsonNull()) && !jsonObj.get("forks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks").toString()));
      }
      if ((jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) && !jsonObj.get("identifiers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("linked_nodes") != null && !jsonObj.get("linked_nodes").isJsonNull()) && !jsonObj.get("linked_nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linked_nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linked_nodes").toString()));
      }
      if ((jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) && !jsonObj.get("logs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }
      if ((jsonObj.get("node_links") != null && !jsonObj.get("node_links").isJsonNull()) && !jsonObj.get("node_links").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_links` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_links").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("preprints") != null && !jsonObj.get("preprints").isJsonNull()) && !jsonObj.get("preprints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preprints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preprints").toString()));
      }
      if ((jsonObj.get("registrations") != null && !jsonObj.get("registrations").isJsonNull()) && !jsonObj.get("registrations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrations").toString()));
      }
      if ((jsonObj.get("root") != null && !jsonObj.get("root").isJsonNull()) && !jsonObj.get("root").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root").toString()));
      }
      if ((jsonObj.get("template_node") != null && !jsonObj.get("template_node").isJsonNull()) && !jsonObj.get("template_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_node").toString()));
      }
      if ((jsonObj.get("view_only_links") != null && !jsonObj.get("view_only_links").isJsonNull()) && !jsonObj.get("view_only_links").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_only_links` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_only_links").toString()));
      }
      if ((jsonObj.get("wikis") != null && !jsonObj.get("wikis").isJsonNull()) && !jsonObj.get("wikis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relationships7.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relationships7' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relationships7> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relationships7.class));

       return (TypeAdapter<T>) new TypeAdapter<Relationships7>() {
           @Override
           public void write(JsonWriter out, Relationships7 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relationships7 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relationships7 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relationships7
   * @throws IOException if the JSON string is invalid with respect to Relationships7
   */
  public static Relationships7 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relationships7.class);
  }

  /**
   * Convert an instance of Relationships7 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

