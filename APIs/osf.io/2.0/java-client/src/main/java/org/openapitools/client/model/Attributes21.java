/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the wiki.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes21 {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT = "current_user_can_comment";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT)
  private String currentUserCanComment;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private String extra;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MATERIALIZED_PATH = "materialized_path";
  @SerializedName(SERIALIZED_NAME_MATERIALIZED_PATH)
  private String materializedPath;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public Attributes21() {
  }

  public Attributes21(
     String contentType, 
     String currentUserCanComment, 
     OffsetDateTime dateModified, 
     String extra, 
     String kind, 
     String materializedPath, 
     String name, 
     String path, 
     String size
  ) {
    this();
    this.contentType = contentType;
    this.currentUserCanComment = currentUserCanComment;
    this.dateModified = dateModified;
    this.extra = extra;
    this.kind = kind;
    this.materializedPath = materializedPath;
    this.name = name;
    this.path = path;
    this.size = size;
  }

  /**
   * Content type of the wiki (&#x60;text/markdown&#x60;).
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }



  /**
   * Whether the current user is allowed to post comments on this wiki.
   * @return currentUserCanComment
   */
  @javax.annotation.Nonnull
  public String getCurrentUserCanComment() {
    return currentUserCanComment;
  }



  /**
   * The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  /**
   * A dictionary containing additional metadata about this wiki, including version information.
   * @return extra
   */
  @javax.annotation.Nonnull
  public String getExtra() {
    return extra;
  }



  /**
   * The type of object.
   * @return kind
   */
  @javax.annotation.Nonnull
  public String getKind() {
    return kind;
  }



  /**
   * Materialized path to the wiki object.
   * @return materializedPath
   */
  @javax.annotation.Nonnull
  public String getMaterializedPath() {
    return materializedPath;
  }



  /**
   * The name/title of the wiki page.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  /**
   * Path to the wiki object.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }



  /**
   * Size of the wiki.
   * @return size
   */
  @javax.annotation.Nonnull
  public String getSize() {
    return size;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes21 attributes21 = (Attributes21) o;
    return Objects.equals(this.contentType, attributes21.contentType) &&
        Objects.equals(this.currentUserCanComment, attributes21.currentUserCanComment) &&
        Objects.equals(this.dateModified, attributes21.dateModified) &&
        Objects.equals(this.extra, attributes21.extra) &&
        Objects.equals(this.kind, attributes21.kind) &&
        Objects.equals(this.materializedPath, attributes21.materializedPath) &&
        Objects.equals(this.name, attributes21.name) &&
        Objects.equals(this.path, attributes21.path) &&
        Objects.equals(this.size, attributes21.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, currentUserCanComment, dateModified, extra, kind, materializedPath, name, path, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes21 {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    currentUserCanComment: ").append(toIndentedString(currentUserCanComment)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    materializedPath: ").append(toIndentedString(materializedPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_type");
    openapiFields.add("current_user_can_comment");
    openapiFields.add("date_modified");
    openapiFields.add("extra");
    openapiFields.add("kind");
    openapiFields.add("materialized_path");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content_type");
    openapiRequiredFields.add("current_user_can_comment");
    openapiRequiredFields.add("date_modified");
    openapiRequiredFields.add("extra");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("materialized_path");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("size");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes21
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes21.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes21 is not found in the empty JSON string", Attributes21.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes21.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes21` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Attributes21.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if (!jsonObj.get("current_user_can_comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_can_comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_can_comment").toString()));
      }
      if (!jsonObj.get("extra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (!jsonObj.get("materialized_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `materialized_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("materialized_path").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes21.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes21' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes21> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes21.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes21>() {
           @Override
           public void write(JsonWriter out, Attributes21 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes21 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes21 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes21
   * @throws IOException if the JSON string is invalid with respect to Attributes21
   */
  public static Attributes21 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes21.class);
  }

  /**
   * Convert an instance of Attributes21 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

