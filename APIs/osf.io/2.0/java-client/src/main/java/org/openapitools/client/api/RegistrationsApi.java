/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CitationDetail;
import org.openapitools.client.model.CitationStyle;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.Identifier;
import org.openapitools.client.model.Institution;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.Registration;
import org.openapitools.client.model.ViewOnlyLinks;
import org.openapitools.client.model.Wiki;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registrationsChildrenList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsChildrenListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/children/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsChildrenListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsChildrenList(Async)");
        }

        return registrationsChildrenListCall(registrationId, _callback);

    }

    /**
     * List all child registrations
     *  A paginated list of children of a registration.  The list consists of the next level child registrations for the given registration. The returned registrations are sorted by their &#x60;date_modified&#x60;, with the most recently updated child registrations appearing first.  The list will include child registrations that are public, as well as child registrations that are private, if the authenticated user has permission to view them. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 child registrations. If the given registration has zero child registrations, the &#x60;data&#x60; key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the child registration.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/children/?filter[title]&#x3D;reproducibility.  Registrations may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, &#x60;root&#x60;, &#x60;parent&#x60;, and &#x60;contributors&#x60;.  Most fields are string fields and will be filtered using simple substring matching. Public is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> registrationsChildrenList(String registrationId) throws ApiException {
        ApiResponse<List<Registration>> localVarResp = registrationsChildrenListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all child registrations
     *  A paginated list of children of a registration.  The list consists of the next level child registrations for the given registration. The returned registrations are sorted by their &#x60;date_modified&#x60;, with the most recently updated child registrations appearing first.  The list will include child registrations that are public, as well as child registrations that are private, if the authenticated user has permission to view them. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 child registrations. If the given registration has zero child registrations, the &#x60;data&#x60; key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the child registration.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/children/?filter[title]&#x3D;reproducibility.  Registrations may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, &#x60;root&#x60;, &#x60;parent&#x60;, and &#x60;contributors&#x60;.  Most fields are string fields and will be filtered using simple substring matching. Public is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> registrationsChildrenListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsChildrenListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all child registrations (asynchronously)
     *  A paginated list of children of a registration.  The list consists of the next level child registrations for the given registration. The returned registrations are sorted by their &#x60;date_modified&#x60;, with the most recently updated child registrations appearing first.  The list will include child registrations that are public, as well as child registrations that are private, if the authenticated user has permission to view them. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 child registrations. If the given registration has zero child registrations, the &#x60;data&#x60; key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the child registration.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/children/?filter[title]&#x3D;reproducibility.  Registrations may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, &#x60;root&#x60;, &#x60;parent&#x60;, and &#x60;contributors&#x60;.  Most fields are string fields and will be filtered using simple substring matching. Public is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsChildrenListAsync(String registrationId, final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsChildrenListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsCitationRead
     * @param registrationId The unique identifier of the registration. (required)
     * @param citationId The unique identifier of the citation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsCitationReadCall(String registrationId, String citationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/citations/{citation_id}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()))
            .replace("{" + "citation_id" + "}", localVarApiClient.escapeString(citationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsCitationReadValidateBeforeCall(String registrationId, String citationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsCitationRead(Async)");
        }

        // verify the required parameter 'citationId' is set
        if (citationId == null) {
            throw new ApiException("Missing the required parameter 'citationId' when calling registrationsCitationRead(Async)");
        }

        return registrationsCitationReadCall(registrationId, citationId, _callback);

    }

    /**
     * Retrieve a citation
     * Retrieves the citation style details for a registration, in CSL format. #### Returns Returns a JSON object with a &#x60;data&#x60; key that contains the representation of the details necessary for the citation style.
     * @param registrationId The unique identifier of the registration. (required)
     * @param citationId The unique identifier of the citation. (required)
     * @return CitationDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CitationDetail registrationsCitationRead(String registrationId, String citationId) throws ApiException {
        ApiResponse<CitationDetail> localVarResp = registrationsCitationReadWithHttpInfo(registrationId, citationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a citation
     * Retrieves the citation style details for a registration, in CSL format. #### Returns Returns a JSON object with a &#x60;data&#x60; key that contains the representation of the details necessary for the citation style.
     * @param registrationId The unique identifier of the registration. (required)
     * @param citationId The unique identifier of the citation. (required)
     * @return ApiResponse&lt;CitationDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CitationDetail> registrationsCitationReadWithHttpInfo(String registrationId, String citationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsCitationReadValidateBeforeCall(registrationId, citationId, null);
        Type localVarReturnType = new TypeToken<CitationDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a citation (asynchronously)
     * Retrieves the citation style details for a registration, in CSL format. #### Returns Returns a JSON object with a &#x60;data&#x60; key that contains the representation of the details necessary for the citation style.
     * @param registrationId The unique identifier of the registration. (required)
     * @param citationId The unique identifier of the citation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsCitationReadAsync(String registrationId, String citationId, final ApiCallback<CitationDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsCitationReadValidateBeforeCall(registrationId, citationId, _callback);
        Type localVarReturnType = new TypeToken<CitationDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsCitationsList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsCitationsListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/citations/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsCitationsListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsCitationsList(Async)");
        }

        return registrationsCitationsListCall(registrationId, _callback);

    }

    /**
     * List all citation styles
     *  A paginated list of the registration&#39;s alternative citation styles  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include citation styles that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]&#x3D;open.  Citation styles may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;short-title&#x60;, and &#x60;summary&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;CitationStyle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CitationStyle> registrationsCitationsList(String registrationId) throws ApiException {
        ApiResponse<List<CitationStyle>> localVarResp = registrationsCitationsListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all citation styles
     *  A paginated list of the registration&#39;s alternative citation styles  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include citation styles that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]&#x3D;open.  Citation styles may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;short-title&#x60;, and &#x60;summary&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;CitationStyle&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CitationStyle>> registrationsCitationsListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsCitationsListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<CitationStyle>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all citation styles (asynchronously)
     *  A paginated list of the registration&#39;s alternative citation styles  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include citation styles that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]&#x3D;open.  Citation styles may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;short-title&#x60;, and &#x60;summary&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsCitationsListAsync(String registrationId, final ApiCallback<List<CitationStyle>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsCitationsListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<CitationStyle>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsCommentsList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsCommentsListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/comments/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsCommentsListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsCommentsList(Async)");
        }

        return registrationsCommentsListCall(registrationId, _callback);

    }

    /**
     * List all comments
     *  A paginated list of the registration&#39;s comments.  The returned comments are sorted by their creation date, with the most recent comments appearing first. #### Permissions Comments of public registrations are given read-only access to everyone.  If the comment-level is &#x60;private&#x60;, only registration contributors have permission to comment.  If the comment-level is &#x60;public&#x60;, any logged-in OSF user can comment.  Comments of private registrations are only visible to contributors and administrators on the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of comment objects. Each resource in the array is a separate comment object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include comments that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wuerf/comments/?filter[target]&#x3D;wuerf  Comments may be filtered by their &#x60;deleted&#x60;, &#x60;target&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;.  Most fields are string fields and will be filtered using simple substring matching. Deleted is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting &#x60;true&#x60; or &#x60;false&#x60; in the query will cause the match to fail.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> registrationsCommentsList(String registrationId) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = registrationsCommentsListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all comments
     *  A paginated list of the registration&#39;s comments.  The returned comments are sorted by their creation date, with the most recent comments appearing first. #### Permissions Comments of public registrations are given read-only access to everyone.  If the comment-level is &#x60;private&#x60;, only registration contributors have permission to comment.  If the comment-level is &#x60;public&#x60;, any logged-in OSF user can comment.  Comments of private registrations are only visible to contributors and administrators on the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of comment objects. Each resource in the array is a separate comment object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include comments that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wuerf/comments/?filter[target]&#x3D;wuerf  Comments may be filtered by their &#x60;deleted&#x60;, &#x60;target&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;.  Most fields are string fields and will be filtered using simple substring matching. Deleted is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting &#x60;true&#x60; or &#x60;false&#x60; in the query will cause the match to fail.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> registrationsCommentsListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsCommentsListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all comments (asynchronously)
     *  A paginated list of the registration&#39;s comments.  The returned comments are sorted by their creation date, with the most recent comments appearing first. #### Permissions Comments of public registrations are given read-only access to everyone.  If the comment-level is &#x60;private&#x60;, only registration contributors have permission to comment.  If the comment-level is &#x60;public&#x60;, any logged-in OSF user can comment.  Comments of private registrations are only visible to contributors and administrators on the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of comment objects. Each resource in the array is a separate comment object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include comments that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wuerf/comments/?filter[target]&#x3D;wuerf  Comments may be filtered by their &#x60;deleted&#x60;, &#x60;target&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;.  Most fields are string fields and will be filtered using simple substring matching. Deleted is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting &#x60;true&#x60; or &#x60;false&#x60; in the query will cause the match to fail.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsCommentsListAsync(String registrationId, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsCommentsListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsContributorsList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsContributorsListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/contributors/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsContributorsListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsContributorsList(Async)");
        }

        return registrationsContributorsListCall(registrationId, _callback);

    }

    /**
     * List all contributors
     * A paginated list of all contributors on this registration. The returned contributors are sorted by their index.  Contributors are users who can make changes to the registration or, in the case of private registration, have read access to the registration.  Contributors are categorized as either \&quot;bibliographic\&quot; or \&quot;non-bibliographic\&quot;. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed in the contributors list on the OSF, while non-bibliographic contributors are not.  Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 contributors. Each resource in the array contains the full representation of the contributor. Additionally, the full representation of the user this contributor represents is automatically embedded within the &#x60;data&#x60; key of the response.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include contributors that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/contributors/?filter[bibliographic]&#x3D;true.  Contributors may be filtered by their &#x60;bibliographic&#x60; and &#x60;permission&#x60; attributes.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Contributor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Contributor> registrationsContributorsList(String registrationId) throws ApiException {
        ApiResponse<List<Contributor>> localVarResp = registrationsContributorsListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all contributors
     * A paginated list of all contributors on this registration. The returned contributors are sorted by their index.  Contributors are users who can make changes to the registration or, in the case of private registration, have read access to the registration.  Contributors are categorized as either \&quot;bibliographic\&quot; or \&quot;non-bibliographic\&quot;. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed in the contributors list on the OSF, while non-bibliographic contributors are not.  Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 contributors. Each resource in the array contains the full representation of the contributor. Additionally, the full representation of the user this contributor represents is automatically embedded within the &#x60;data&#x60; key of the response.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include contributors that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/contributors/?filter[bibliographic]&#x3D;true.  Contributors may be filtered by their &#x60;bibliographic&#x60; and &#x60;permission&#x60; attributes.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Contributor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Contributor>> registrationsContributorsListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsContributorsListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Contributor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all contributors (asynchronously)
     * A paginated list of all contributors on this registration. The returned contributors are sorted by their index.  Contributors are users who can make changes to the registration or, in the case of private registration, have read access to the registration.  Contributors are categorized as either \&quot;bibliographic\&quot; or \&quot;non-bibliographic\&quot;. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed in the contributors list on the OSF, while non-bibliographic contributors are not.  Note that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 contributors. Each resource in the array contains the full representation of the contributor. Additionally, the full representation of the user this contributor represents is automatically embedded within the &#x60;data&#x60; key of the response.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include contributors that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/contributors/?filter[bibliographic]&#x3D;true.  Contributors may be filtered by their &#x60;bibliographic&#x60; and &#x60;permission&#x60; attributes.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsContributorsListAsync(String registrationId, final ApiCallback<List<Contributor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsContributorsListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Contributor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsContributorsRead
     * @param registrationId The unique identifier of the registration. (required)
     * @param userId The unique identifier of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsContributorsReadCall(String registrationId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/contributors/{user_id}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsContributorsReadValidateBeforeCall(String registrationId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsContributorsRead(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling registrationsContributorsRead(Async)");
        }

        return registrationsContributorsReadCall(registrationId, userId, _callback);

    }

    /**
     * Retrieve a contributor
     * Retrieves the details of a contributor on this registration.  #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested contributor, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param userId The unique identifier of the user. (required)
     * @return List&lt;Contributor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Contributor> registrationsContributorsRead(String registrationId, String userId) throws ApiException {
        ApiResponse<List<Contributor>> localVarResp = registrationsContributorsReadWithHttpInfo(registrationId, userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a contributor
     * Retrieves the details of a contributor on this registration.  #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested contributor, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param userId The unique identifier of the user. (required)
     * @return ApiResponse&lt;List&lt;Contributor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Contributor>> registrationsContributorsReadWithHttpInfo(String registrationId, String userId) throws ApiException {
        okhttp3.Call localVarCall = registrationsContributorsReadValidateBeforeCall(registrationId, userId, null);
        Type localVarReturnType = new TypeToken<List<Contributor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a contributor (asynchronously)
     * Retrieves the details of a contributor on this registration.  #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested contributor, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param userId The unique identifier of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsContributorsReadAsync(String registrationId, String userId, final ApiCallback<List<Contributor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsContributorsReadValidateBeforeCall(registrationId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Contributor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsFilesList
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsFilesListCall(String registrationId, String provider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/files/{provider}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsFilesListValidateBeforeCall(String registrationId, String provider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsFilesList(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling registrationsFilesList(Async)");
        }

        return registrationsFilesListCall(registrationId, provider, _callback);

    }

    /**
     * List all files
     * List of all the registration&#39;s files/folders for a given storage provider.  #### Returns  Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Filtering  You can optionally request that the response only include files that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/files/osfstorage/?filter[kind]&#x3D;file  Files may be filtered by &#x60;id&#x60;, &#x60;name&#x60;, &#x60;node&#x60;, &#x60;kind&#x60;, &#x60;path&#x60;, &#x60;provider&#x60;, &#x60;size&#x60;, and &#x60;last_touched&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @return List&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelFile> registrationsFilesList(String registrationId, String provider) throws ApiException {
        ApiResponse<List<ModelFile>> localVarResp = registrationsFilesListWithHttpInfo(registrationId, provider);
        return localVarResp.getData();
    }

    /**
     * List all files
     * List of all the registration&#39;s files/folders for a given storage provider.  #### Returns  Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Filtering  You can optionally request that the response only include files that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/files/osfstorage/?filter[kind]&#x3D;file  Files may be filtered by &#x60;id&#x60;, &#x60;name&#x60;, &#x60;node&#x60;, &#x60;kind&#x60;, &#x60;path&#x60;, &#x60;provider&#x60;, &#x60;size&#x60;, and &#x60;last_touched&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @return ApiResponse&lt;List&lt;ModelFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelFile>> registrationsFilesListWithHttpInfo(String registrationId, String provider) throws ApiException {
        okhttp3.Call localVarCall = registrationsFilesListValidateBeforeCall(registrationId, provider, null);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all files (asynchronously)
     * List of all the registration&#39;s files/folders for a given storage provider.  #### Returns  Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Filtering  You can optionally request that the response only include files that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/files/osfstorage/?filter[kind]&#x3D;file  Files may be filtered by &#x60;id&#x60;, &#x60;name&#x60;, &#x60;node&#x60;, &#x60;kind&#x60;, &#x60;path&#x60;, &#x60;provider&#x60;, &#x60;size&#x60;, and &#x60;last_touched&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsFilesListAsync(String registrationId, String provider, final ApiCallback<List<ModelFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsFilesListValidateBeforeCall(registrationId, provider, _callback);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsFilesRead
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @param path The unique identifier of the file path. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsFilesReadCall(String registrationId, String provider, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/files/{provider}/{path}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()))
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsFilesReadValidateBeforeCall(String registrationId, String provider, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsFilesRead(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling registrationsFilesRead(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling registrationsFilesRead(Async)");
        }

        return registrationsFilesReadCall(registrationId, provider, path, _callback);

    }

    /**
     * Retrieve a file
     * Retrieves the details of a registration file for the given storage provider. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested registration file object, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @param path The unique identifier of the file path. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile registrationsFilesRead(String registrationId, String provider, String path) throws ApiException {
        ApiResponse<ModelFile> localVarResp = registrationsFilesReadWithHttpInfo(registrationId, provider, path);
        return localVarResp.getData();
    }

    /**
     * Retrieve a file
     * Retrieves the details of a registration file for the given storage provider. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested registration file object, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @param path The unique identifier of the file path. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> registrationsFilesReadWithHttpInfo(String registrationId, String provider, String path) throws ApiException {
        okhttp3.Call localVarCall = registrationsFilesReadValidateBeforeCall(registrationId, provider, path, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a file (asynchronously)
     * Retrieves the details of a registration file for the given storage provider. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested registration file object, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param provider The unique identifier of the storage provider. (required)
     * @param path The unique identifier of the file path. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsFilesReadAsync(String registrationId, String provider, String path, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsFilesReadValidateBeforeCall(registrationId, provider, path, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsForksCreate
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsForksCreateCall(String registrationId, Registration registration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registration;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/forks/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsForksCreateValidateBeforeCall(String registrationId, Registration registration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsForksCreate(Async)");
        }

        // verify the required parameter 'registration' is set
        if (registration == null) {
            throw new ApiException("Missing the required parameter 'registration' when calling registrationsForksCreate(Async)");
        }

        return registrationsForksCreateCall(registrationId, registration, _callback);

    }

    /**
     * Create a fork
     * Creates a fork of the given registration.  Forking a project creates a copy of an existing registration and all of its contents. The fork always points back to the original registration, forming a network of registrations.  You might use a fork to copy another&#39;s work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.  When creating a fork, your fork will only contain public components of the current registration and components for which you are a contributor. Private components that you do not have access to will not be forked. #### Required There are no required attributes when creating a fork, as all of the forked registration&#39;s attributes will be copied from the current registration.  The &#x60;title&#x60; field is optional, with the default title being \&quot;Fork of \&quot; prepended to the current registration&#39;s title. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the complete representation of the forked registration, if the request is successful. If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void registrationsForksCreate(String registrationId, Registration registration) throws ApiException {
        registrationsForksCreateWithHttpInfo(registrationId, registration);
    }

    /**
     * Create a fork
     * Creates a fork of the given registration.  Forking a project creates a copy of an existing registration and all of its contents. The fork always points back to the original registration, forming a network of registrations.  You might use a fork to copy another&#39;s work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.  When creating a fork, your fork will only contain public components of the current registration and components for which you are a contributor. Private components that you do not have access to will not be forked. #### Required There are no required attributes when creating a fork, as all of the forked registration&#39;s attributes will be copied from the current registration.  The &#x60;title&#x60; field is optional, with the default title being \&quot;Fork of \&quot; prepended to the current registration&#39;s title. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the complete representation of the forked registration, if the request is successful. If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registrationsForksCreateWithHttpInfo(String registrationId, Registration registration) throws ApiException {
        okhttp3.Call localVarCall = registrationsForksCreateValidateBeforeCall(registrationId, registration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a fork (asynchronously)
     * Creates a fork of the given registration.  Forking a project creates a copy of an existing registration and all of its contents. The fork always points back to the original registration, forming a network of registrations.  You might use a fork to copy another&#39;s work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.  When creating a fork, your fork will only contain public components of the current registration and components for which you are a contributor. Private components that you do not have access to will not be forked. #### Required There are no required attributes when creating a fork, as all of the forked registration&#39;s attributes will be copied from the current registration.  The &#x60;title&#x60; field is optional, with the default title being \&quot;Fork of \&quot; prepended to the current registration&#39;s title. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the complete representation of the forked registration, if the request is successful. If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsForksCreateAsync(String registrationId, Registration registration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsForksCreateValidateBeforeCall(registrationId, registration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsForksList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsForksListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/forks/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsForksListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsForksList(Async)");
        }

        return registrationsForksListCall(registrationId, _callback);

    }

    /**
     * List all forks
     *  A paginated list of the registration’s forks  The returned forks are sorted by their &#x60;forked_date&#x60;, with the most recent forks appearing first.  Forking a registration creates a copy of an existing registration and all of its contents. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 forks. If the current registration has no fork, the &#x60;data&#x60; key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the registration&#39;s fork.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> registrationsForksList(String registrationId) throws ApiException {
        ApiResponse<List<Registration>> localVarResp = registrationsForksListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all forks
     *  A paginated list of the registration’s forks  The returned forks are sorted by their &#x60;forked_date&#x60;, with the most recent forks appearing first.  Forking a registration creates a copy of an existing registration and all of its contents. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 forks. If the current registration has no fork, the &#x60;data&#x60; key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the registration&#39;s fork.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> registrationsForksListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsForksListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all forks (asynchronously)
     *  A paginated list of the registration’s forks  The returned forks are sorted by their &#x60;forked_date&#x60;, with the most recent forks appearing first.  Forking a registration creates a copy of an existing registration and all of its contents. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 forks. If the current registration has no fork, the &#x60;data&#x60; key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the registration&#39;s fork.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsForksListAsync(String registrationId, final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsForksListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsIdentifiersList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsIdentifiersListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/identifiers/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsIdentifiersListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsIdentifiersList(Async)");
        }

        return registrationsIdentifiersListCall(registrationId, _callback);

    }

    /**
     * List all identifiers
     * A paginated list of the registration&#39;s identifiers. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of identifiers. Each resource in the array is a separate identifier object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering  You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/identifiers/?filter[category]&#x3D;ark  Identifiers may be filtered by their &#x60;category&#x60; e.g &#x60;ark&#x60; or &#x60;doi&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Identifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Identifier> registrationsIdentifiersList(String registrationId) throws ApiException {
        ApiResponse<List<Identifier>> localVarResp = registrationsIdentifiersListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all identifiers
     * A paginated list of the registration&#39;s identifiers. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of identifiers. Each resource in the array is a separate identifier object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering  You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/identifiers/?filter[category]&#x3D;ark  Identifiers may be filtered by their &#x60;category&#x60; e.g &#x60;ark&#x60; or &#x60;doi&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Identifier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Identifier>> registrationsIdentifiersListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsIdentifiersListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Identifier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all identifiers (asynchronously)
     * A paginated list of the registration&#39;s identifiers. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of identifiers. Each resource in the array is a separate identifier object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering  You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/identifiers/?filter[category]&#x3D;ark  Identifiers may be filtered by their &#x60;category&#x60; e.g &#x60;ark&#x60; or &#x60;doi&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsIdentifiersListAsync(String registrationId, final ApiCallback<List<Identifier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsIdentifiersListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Identifier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsInstitutionsList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsInstitutionsListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/institutions/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsInstitutionsListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsInstitutionsList(Async)");
        }

        return registrationsInstitutionsListCall(registrationId, _callback);

    }

    /**
     * List all institutions
     * A paginated list of institutions affiliated with the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 affiliated institutions. Each resource in the array is a separate institution object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Institution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Institution> registrationsInstitutionsList(String registrationId) throws ApiException {
        ApiResponse<List<Institution>> localVarResp = registrationsInstitutionsListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all institutions
     * A paginated list of institutions affiliated with the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 affiliated institutions. Each resource in the array is a separate institution object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Institution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Institution>> registrationsInstitutionsListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsInstitutionsListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Institution>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all institutions (asynchronously)
     * A paginated list of institutions affiliated with the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 affiliated institutions. Each resource in the array is a separate institution object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsInstitutionsListAsync(String registrationId, final ApiCallback<List<Institution>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsInstitutionsListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Institution>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsLinkedNodesList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsLinkedNodesListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/linked_nodes/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsLinkedNodesListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsLinkedNodesList(Async)");
        }

        return registrationsLinkedNodesListCall(registrationId, _callback);

    }

    /**
     * List all linked nodes
     * List of all nodes linked to the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include nodes that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/linked_nodes/?filter[title]&#x3D;reproducibility/?filter[title]&#x3D;reproducibility.  Nodes may be filtered by their &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;registration&#x60;, or &#x60;tags&#x60;. &#x60;title&#x60;, &#x60;description&#x60;, and &#x60;category&#x60; are string fields and will be filteres using simple substring matching. &#x60;public&#x60;, &#x60;registration&#x60; are boolean and can be filtered using truthy values, such as &#x60;true&#x60;, &#x60;false&#x60;, &#x60;0&#x60;, &#x60;1&#x60;. &#x60;tags&#x60; is an array of simple strings.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Node> registrationsLinkedNodesList(String registrationId) throws ApiException {
        ApiResponse<List<Node>> localVarResp = registrationsLinkedNodesListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all linked nodes
     * List of all nodes linked to the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include nodes that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/linked_nodes/?filter[title]&#x3D;reproducibility/?filter[title]&#x3D;reproducibility.  Nodes may be filtered by their &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;registration&#x60;, or &#x60;tags&#x60;. &#x60;title&#x60;, &#x60;description&#x60;, and &#x60;category&#x60; are string fields and will be filteres using simple substring matching. &#x60;public&#x60;, &#x60;registration&#x60; are boolean and can be filtered using truthy values, such as &#x60;true&#x60;, &#x60;false&#x60;, &#x60;0&#x60;, &#x60;1&#x60;. &#x60;tags&#x60; is an array of simple strings.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Node&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Node>> registrationsLinkedNodesListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsLinkedNodesListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Node>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all linked nodes (asynchronously)
     * List of all nodes linked to the registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include nodes that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/linked_nodes/?filter[title]&#x3D;reproducibility/?filter[title]&#x3D;reproducibility.  Nodes may be filtered by their &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;registration&#x60;, or &#x60;tags&#x60;. &#x60;title&#x60;, &#x60;description&#x60;, and &#x60;category&#x60; are string fields and will be filteres using simple substring matching. &#x60;public&#x60;, &#x60;registration&#x60; are boolean and can be filtered using truthy values, such as &#x60;true&#x60;, &#x60;false&#x60;, &#x60;0&#x60;, &#x60;1&#x60;. &#x60;tags&#x60; is an array of simple strings.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsLinkedNodesListAsync(String registrationId, final ApiCallback<List<Node>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsLinkedNodesListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Node>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return registrationsListCall(_callback);

    }

    /**
     * List all registrations
     * A paginated list of registrations on the OSF to which the user has access.  The returned registrations are those which are public or which the user has access to view.  Non-registered nodes cannot be accessed through this endpoint (use the [nodes](#Nodes_nodes_list) endpoints instead).  #### Registrations A registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.  Registrations can be made public immediately or embargoed for up to 4 years.  #### Withdrawals Registrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration&#39;s detail view are not necessary.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]&#x3D;open.  Registrations may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, &#x60;root&#x60;, &#x60;parent&#x60;, and &#x60;contributors&#x60;.
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> registrationsList() throws ApiException {
        ApiResponse<List<Registration>> localVarResp = registrationsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all registrations
     * A paginated list of registrations on the OSF to which the user has access.  The returned registrations are those which are public or which the user has access to view.  Non-registered nodes cannot be accessed through this endpoint (use the [nodes](#Nodes_nodes_list) endpoints instead).  #### Registrations A registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.  Registrations can be made public immediately or embargoed for up to 4 years.  #### Withdrawals Registrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration&#39;s detail view are not necessary.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]&#x3D;open.  Registrations may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, &#x60;root&#x60;, &#x60;parent&#x60;, and &#x60;contributors&#x60;.
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> registrationsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = registrationsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all registrations (asynchronously)
     * A paginated list of registrations on the OSF to which the user has access.  The returned registrations are those which are public or which the user has access to view.  Non-registered nodes cannot be accessed through this endpoint (use the [nodes](#Nodes_nodes_list) endpoints instead).  #### Registrations A registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.  Registrations can be made public immediately or embargoed for up to 4 years.  #### Withdrawals Registrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration&#39;s detail view are not necessary.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include registrations that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]&#x3D;open.  Registrations may be filtered by their &#x60;id&#x60;, &#x60;title&#x60;, &#x60;category&#x60;, &#x60;description&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, &#x60;root&#x60;, &#x60;parent&#x60;, and &#x60;contributors&#x60;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsListAsync(final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsLogsList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsLogsListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/logs/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsLogsListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsLogsList(Async)");
        }

        return registrationsLogsListCall(registrationId, _callback);

    }

    /**
     * List all logs
     * A paginated list of the registration&#39;s logs.  The returned logs are sorted by their &#x60;date&#x60;, with the most recents logs appearing first.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 logs. Each resource in the array is a separate logs object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include logs that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/logs/?filter[action]&#x3D;made_private.  Logs may be filtered by their &#x60;action&#x60;, and &#x60;date&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Log> registrationsLogsList(String registrationId) throws ApiException {
        ApiResponse<List<Log>> localVarResp = registrationsLogsListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all logs
     * A paginated list of the registration&#39;s logs.  The returned logs are sorted by their &#x60;date&#x60;, with the most recents logs appearing first.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 logs. Each resource in the array is a separate logs object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include logs that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/logs/?filter[action]&#x3D;made_private.  Logs may be filtered by their &#x60;action&#x60;, and &#x60;date&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Log&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Log>> registrationsLogsListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsLogsListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Log>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all logs (asynchronously)
     * A paginated list of the registration&#39;s logs.  The returned logs are sorted by their &#x60;date&#x60;, with the most recents logs appearing first.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 logs. Each resource in the array is a separate logs object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Filtering You can optionally request that the response only include logs that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/logs/?filter[action]&#x3D;made_private.  Logs may be filtered by their &#x60;action&#x60;, and &#x60;date&#x60;.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsLogsListAsync(String registrationId, final ApiCallback<List<Log>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsLogsListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Log>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsPartialUpdate
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsPartialUpdateCall(String registrationId, Registration registration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registration;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsPartialUpdateValidateBeforeCall(String registrationId, Registration registration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsPartialUpdate(Async)");
        }

        // verify the required parameter 'registration' is set
        if (registration == null) {
            throw new ApiException("Missing the required parameter 'registration' when calling registrationsPartialUpdate(Async)");
        }

        return registrationsPartialUpdateCall(registrationId, registration, _callback);

    }

    /**
     * Update a registration
     * Updates a registration&#39;s privacy from **private** to **public**.  Registrations can be updated with either a **PUT** or **PATCH** request. The &#x60;public&#x60; field is the only field that can be modified on a registration  Registrations can only be turned from private to public, not vice versa. #### Permissions Only project administrators may update a registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the new representation of the updated registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void registrationsPartialUpdate(String registrationId, Registration registration) throws ApiException {
        registrationsPartialUpdateWithHttpInfo(registrationId, registration);
    }

    /**
     * Update a registration
     * Updates a registration&#39;s privacy from **private** to **public**.  Registrations can be updated with either a **PUT** or **PATCH** request. The &#x60;public&#x60; field is the only field that can be modified on a registration  Registrations can only be turned from private to public, not vice versa. #### Permissions Only project administrators may update a registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the new representation of the updated registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registrationsPartialUpdateWithHttpInfo(String registrationId, Registration registration) throws ApiException {
        okhttp3.Call localVarCall = registrationsPartialUpdateValidateBeforeCall(registrationId, registration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a registration (asynchronously)
     * Updates a registration&#39;s privacy from **private** to **public**.  Registrations can be updated with either a **PUT** or **PATCH** request. The &#x60;public&#x60; field is the only field that can be modified on a registration  Registrations can only be turned from private to public, not vice versa. #### Permissions Only project administrators may update a registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the new representation of the updated registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param registration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsPartialUpdateAsync(String registrationId, Registration registration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsPartialUpdateValidateBeforeCall(registrationId, registration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsProvidersList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsProvidersListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/files/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsProvidersListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsProvidersList(Async)");
        }

        return registrationsProvidersListCall(registrationId, _callback);

    }

    /**
     * List all storage providers
     * A paginated list of storage providers enabled on the registration  Users of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.   #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 files. Each resource in the array is a separate file object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  Note: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelFile> registrationsProvidersList(String registrationId) throws ApiException {
        ApiResponse<List<ModelFile>> localVarResp = registrationsProvidersListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all storage providers
     * A paginated list of storage providers enabled on the registration  Users of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.   #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 files. Each resource in the array is a separate file object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  Note: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;ModelFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelFile>> registrationsProvidersListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsProvidersListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all storage providers (asynchronously)
     * A paginated list of storage providers enabled on the registration  Users of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.   #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 files. Each resource in the array is a separate file object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  Note: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsProvidersListAsync(String registrationId, final ApiCallback<List<ModelFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsProvidersListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsRead
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsReadCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsReadValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsRead(Async)");
        }

        return registrationsReadCall(registrationId, _callback);

    }

    /**
     * Retrieve a registration
     * Retrieve the details of a given registration. #### Permissions Only project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.  Authentication is not required to view the details of a public registration, as public registrations give read-only access to everyone. #### Registrations A registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.  Registrations can be made public immediately or embargoed for up to 4 years.  #### Withdrawals Registrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @return Registration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Registration registrationsRead(String registrationId) throws ApiException {
        ApiResponse<Registration> localVarResp = registrationsReadWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a registration
     * Retrieve the details of a given registration. #### Permissions Only project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.  Authentication is not required to view the details of a public registration, as public registrations give read-only access to everyone. #### Registrations A registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.  Registrations can be made public immediately or embargoed for up to 4 years.  #### Withdrawals Registrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Registration> registrationsReadWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsReadValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<Registration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a registration (asynchronously)
     * Retrieve the details of a given registration. #### Permissions Only project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.  Authentication is not required to view the details of a public registration, as public registrations give read-only access to everyone. #### Registrations A registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.  Registrations can be made public immediately or embargoed for up to 4 years.  #### Withdrawals Registrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsReadAsync(String registrationId, final ApiCallback<Registration> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsReadValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<Registration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsViewOnlyLinksList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsViewOnlyLinksListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/view_only_links/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsViewOnlyLinksListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsViewOnlyLinksList(Async)");
        }

        return registrationsViewOnlyLinksListCall(registrationId, _callback);

    }

    /**
     * List all view only links
     * A paginated list of view only links created for this registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 view only links. Each resource in the array is a view only link object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Permissions  View only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.  #### Filtering  You can optionally request that the response only include view only links that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/view_only_links/?filter[anonymous]&#x3D;true.  View Only Links may be filtered based on their &#x60;name&#x60;, &#x60;anonymous&#x60; and &#x60;date_created&#x60; fields. Possible comparison operators include &#39;gt&#39; (greater than), &#39;gte&#39;(greater than or equal to), &#39;lt&#39; (less than) and &#39;lte&#39; (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;ViewOnlyLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ViewOnlyLinks> registrationsViewOnlyLinksList(String registrationId) throws ApiException {
        ApiResponse<List<ViewOnlyLinks>> localVarResp = registrationsViewOnlyLinksListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all view only links
     * A paginated list of view only links created for this registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 view only links. Each resource in the array is a view only link object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Permissions  View only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.  #### Filtering  You can optionally request that the response only include view only links that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/view_only_links/?filter[anonymous]&#x3D;true.  View Only Links may be filtered based on their &#x60;name&#x60;, &#x60;anonymous&#x60; and &#x60;date_created&#x60; fields. Possible comparison operators include &#39;gt&#39; (greater than), &#39;gte&#39;(greater than or equal to), &#39;lt&#39; (less than) and &#39;lte&#39; (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;ViewOnlyLinks&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ViewOnlyLinks>> registrationsViewOnlyLinksListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsViewOnlyLinksListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<ViewOnlyLinks>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all view only links (asynchronously)
     * A paginated list of view only links created for this registration. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 view only links. Each resource in the array is a view only link object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  #### Permissions  View only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.  #### Filtering  You can optionally request that the response only include view only links that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/view_only_links/?filter[anonymous]&#x3D;true.  View Only Links may be filtered based on their &#x60;name&#x60;, &#x60;anonymous&#x60; and &#x60;date_created&#x60; fields. Possible comparison operators include &#39;gt&#39; (greater than), &#39;gte&#39;(greater than or equal to), &#39;lt&#39; (less than) and &#39;lte&#39; (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsViewOnlyLinksListAsync(String registrationId, final ApiCallback<List<ViewOnlyLinks>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsViewOnlyLinksListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<ViewOnlyLinks>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsViewOnlyLinksRead
     * @param registrationId The unique identifier of the registration. (required)
     * @param linkId The unique identifier of the view only link. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsViewOnlyLinksReadCall(String registrationId, String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/view_only_links/{link_id}/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()))
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsViewOnlyLinksReadValidateBeforeCall(String registrationId, String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsViewOnlyLinksRead(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling registrationsViewOnlyLinksRead(Async)");
        }

        return registrationsViewOnlyLinksReadCall(registrationId, linkId, _callback);

    }

    /**
     * Retrieve a view only link
     * Retrieves the details of a view only link created from this registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested view only link, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Permissions  View only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.
     * @param registrationId The unique identifier of the registration. (required)
     * @param linkId The unique identifier of the view only link. (required)
     * @return ViewOnlyLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ViewOnlyLinks registrationsViewOnlyLinksRead(String registrationId, String linkId) throws ApiException {
        ApiResponse<ViewOnlyLinks> localVarResp = registrationsViewOnlyLinksReadWithHttpInfo(registrationId, linkId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a view only link
     * Retrieves the details of a view only link created from this registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested view only link, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Permissions  View only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.
     * @param registrationId The unique identifier of the registration. (required)
     * @param linkId The unique identifier of the view only link. (required)
     * @return ApiResponse&lt;ViewOnlyLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewOnlyLinks> registrationsViewOnlyLinksReadWithHttpInfo(String registrationId, String linkId) throws ApiException {
        okhttp3.Call localVarCall = registrationsViewOnlyLinksReadValidateBeforeCall(registrationId, linkId, null);
        Type localVarReturnType = new TypeToken<ViewOnlyLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a view only link (asynchronously)
     * Retrieves the details of a view only link created from this registration. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested view only link, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Permissions  View only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.
     * @param registrationId The unique identifier of the registration. (required)
     * @param linkId The unique identifier of the view only link. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsViewOnlyLinksReadAsync(String registrationId, String linkId, final ApiCallback<ViewOnlyLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsViewOnlyLinksReadValidateBeforeCall(registrationId, linkId, _callback);
        Type localVarReturnType = new TypeToken<ViewOnlyLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationsWikisList
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsWikisListCall(String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{registration_id}/wikis/"
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationsWikisListValidateBeforeCall(String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling registrationsWikisList(Async)");
        }

        return registrationsWikisListCall(registrationId, _callback);

    }

    /**
     * List all wikis
     * A paginated list of the registration&#39;s wiki pages #### Returns A list of all registration&#39;s current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki&#39;s detail view are not necessary.  If the request is unsuccessful, a JSON object with an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Filtering Wiki pages can be filtered based on their &#x60;name&#x60; and &#x60;date_modified&#x60; fields. + &#x60;filter[name]&#x3D;&lt;Str&gt;&#x60; -- filter wiki pages by name + &#x60;filter[date_modified][comparison_operator]&#x3D;YYYY-MM-DDTH:M:S&#x60; -- filter wiki pages based on date modified.  Possible comparison operators include &#39;gt&#39; (greater than), &#39;gte&#39;(greater than or equal to), &#39;lt&#39; (less than) and &#39;lte&#39; (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.
     * @param registrationId The unique identifier of the registration. (required)
     * @return List&lt;Wiki&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Wiki> registrationsWikisList(String registrationId) throws ApiException {
        ApiResponse<List<Wiki>> localVarResp = registrationsWikisListWithHttpInfo(registrationId);
        return localVarResp.getData();
    }

    /**
     * List all wikis
     * A paginated list of the registration&#39;s wiki pages #### Returns A list of all registration&#39;s current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki&#39;s detail view are not necessary.  If the request is unsuccessful, a JSON object with an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Filtering Wiki pages can be filtered based on their &#x60;name&#x60; and &#x60;date_modified&#x60; fields. + &#x60;filter[name]&#x3D;&lt;Str&gt;&#x60; -- filter wiki pages by name + &#x60;filter[date_modified][comparison_operator]&#x3D;YYYY-MM-DDTH:M:S&#x60; -- filter wiki pages based on date modified.  Possible comparison operators include &#39;gt&#39; (greater than), &#39;gte&#39;(greater than or equal to), &#39;lt&#39; (less than) and &#39;lte&#39; (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.
     * @param registrationId The unique identifier of the registration. (required)
     * @return ApiResponse&lt;List&lt;Wiki&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Wiki>> registrationsWikisListWithHttpInfo(String registrationId) throws ApiException {
        okhttp3.Call localVarCall = registrationsWikisListValidateBeforeCall(registrationId, null);
        Type localVarReturnType = new TypeToken<List<Wiki>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all wikis (asynchronously)
     * A paginated list of the registration&#39;s wiki pages #### Returns A list of all registration&#39;s current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki&#39;s detail view are not necessary.  If the request is unsuccessful, a JSON object with an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed. #### Filtering Wiki pages can be filtered based on their &#x60;name&#x60; and &#x60;date_modified&#x60; fields. + &#x60;filter[name]&#x3D;&lt;Str&gt;&#x60; -- filter wiki pages by name + &#x60;filter[date_modified][comparison_operator]&#x3D;YYYY-MM-DDTH:M:S&#x60; -- filter wiki pages based on date modified.  Possible comparison operators include &#39;gt&#39; (greater than), &#39;gte&#39;(greater than or equal to), &#39;lt&#39; (less than) and &#39;lte&#39; (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.
     * @param registrationId The unique identifier of the registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationsWikisListAsync(String registrationId, final ApiCallback<List<Wiki>> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationsWikisListValidateBeforeCall(registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Wiki>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
