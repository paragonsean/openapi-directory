/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the comment entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes3 {
  public static final String SERIALIZED_NAME_CAN_EDIT = "can_edit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "has_children";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_HAS_REPORT = "has_report";
  @SerializedName(SERIALIZED_NAME_HAS_REPORT)
  private Boolean hasReport;

  public static final String SERIALIZED_NAME_IS_ABUSE = "is_abuse";
  @SerializedName(SERIALIZED_NAME_IS_ABUSE)
  private Boolean isAbuse;

  public static final String SERIALIZED_NAME_IS_HAM = "is_ham";
  @SerializedName(SERIALIZED_NAME_IS_HAM)
  private Boolean isHam;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private Boolean modified;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public Attributes3() {
  }

  public Attributes3(
     Boolean canEdit, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateModified, 
     Boolean deleted, 
     Boolean hasChildren, 
     Boolean hasReport, 
     Boolean isAbuse, 
     Boolean isHam, 
     Boolean modified, 
     String page
  ) {
    this();
    this.canEdit = canEdit;
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
    this.deleted = deleted;
    this.hasChildren = hasChildren;
    this.hasReport = hasReport;
    this.isAbuse = isAbuse;
    this.isHam = isHam;
    this.modified = modified;
    this.page = page;
  }

  /**
   * Whether or not the current user has permission to edit this comment
   * @return canEdit
   */
  @javax.annotation.Nullable
  public Boolean getCanEdit() {
    return canEdit;
  }



  public Attributes3 content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of the comment.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  /**
   * The time at which the comment was created, as an iso8601 formatted timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The time at which the comment was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  /**
   * Whether or not the comment is deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }



  /**
   * Whether or not the comment has replies.
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }



  /**
   * Whether or not the comment the current user reported this as spam.
   * @return hasReport
   */
  @javax.annotation.Nullable
  public Boolean getHasReport() {
    return hasReport;
  }



  /**
   * Whether or not the comment is flagged or confirmed spam.
   * @return isAbuse
   */
  @javax.annotation.Nullable
  public Boolean getIsAbuse() {
    return isAbuse;
  }



  /**
   * Whether or not an admin checked the legitimacy of this comment.
   * @return isHam
   */
  @javax.annotation.Nullable
  public Boolean getIsHam() {
    return isHam;
  }



  /**
   * Whether or not the comment has been edited.
   * @return modified
   */
  @javax.annotation.Nullable
  public Boolean getModified() {
    return modified;
  }



  /**
   * The page type the comment is on, e.g. &#x60;node&#x60;, &#x60;registration&#x60;, &#x60;wiki&#x60;, &#x60;files&#x60;.
   * @return page
   */
  @javax.annotation.Nullable
  public String getPage() {
    return page;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes3 attributes3 = (Attributes3) o;
    return Objects.equals(this.canEdit, attributes3.canEdit) &&
        Objects.equals(this.content, attributes3.content) &&
        Objects.equals(this.dateCreated, attributes3.dateCreated) &&
        Objects.equals(this.dateModified, attributes3.dateModified) &&
        Objects.equals(this.deleted, attributes3.deleted) &&
        Objects.equals(this.hasChildren, attributes3.hasChildren) &&
        Objects.equals(this.hasReport, attributes3.hasReport) &&
        Objects.equals(this.isAbuse, attributes3.isAbuse) &&
        Objects.equals(this.isHam, attributes3.isHam) &&
        Objects.equals(this.modified, attributes3.modified) &&
        Objects.equals(this.page, attributes3.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canEdit, content, dateCreated, dateModified, deleted, hasChildren, hasReport, isAbuse, isHam, modified, page);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes3 {\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    hasReport: ").append(toIndentedString(hasReport)).append("\n");
    sb.append("    isAbuse: ").append(toIndentedString(isAbuse)).append("\n");
    sb.append("    isHam: ").append(toIndentedString(isHam)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_edit");
    openapiFields.add("content");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");
    openapiFields.add("has_children");
    openapiFields.add("has_report");
    openapiFields.add("is_abuse");
    openapiFields.add("is_ham");
    openapiFields.add("modified");
    openapiFields.add("page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes3 is not found in the empty JSON string", Attributes3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes3.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes3>() {
           @Override
           public void write(JsonWriter out, Attributes3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes3
   * @throws IOException if the JSON string is invalid with respect to Attributes3
   */
  public static Attributes3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes3.class);
  }

  /**
   * Convert an instance of Attributes3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

