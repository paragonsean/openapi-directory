/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RegistrationSchemaBlock;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationSchemaBlocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationSchemaBlocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationSchemaBlocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schemaResponseBlocksRead
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponseBlocksReadCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}/schema_blocks/"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponseBlocksReadValidateBeforeCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponseBlocksRead(Async)");
        }

        return schemaResponseBlocksReadCall(schemaResponseId, _callback);

    }

    /**
     * Retrieve a list of Registration Schema Blocks for a Schema Response
     * This returns a list of all the Registration Schema Blocks are contained in Registration Schema. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return RegistrationSchemaBlock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationSchemaBlock schemaResponseBlocksRead(String schemaResponseId) throws ApiException {
        ApiResponse<RegistrationSchemaBlock> localVarResp = schemaResponseBlocksReadWithHttpInfo(schemaResponseId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of Registration Schema Blocks for a Schema Response
     * This returns a list of all the Registration Schema Blocks are contained in Registration Schema. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return ApiResponse&lt;RegistrationSchemaBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationSchemaBlock> schemaResponseBlocksReadWithHttpInfo(String schemaResponseId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponseBlocksReadValidateBeforeCall(schemaResponseId, null);
        Type localVarReturnType = new TypeToken<RegistrationSchemaBlock>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of Registration Schema Blocks for a Schema Response (asynchronously)
     * This returns a list of all the Registration Schema Blocks are contained in Registration Schema. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponseBlocksReadAsync(String schemaResponseId, final ApiCallback<RegistrationSchemaBlock> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponseBlocksReadValidateBeforeCall(schemaResponseId, _callback);
        Type localVarReturnType = new TypeToken<RegistrationSchemaBlock>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponseBlockId The unique identifier of the Schema Response Block example &#x60;61b79f9eadbb5701424a2d5e&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetCall(String schemaResponseId, String schemaResponseBlockId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}/schema_blocks/{schema_response_block_id}"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()))
            .replace("{" + "schema_response_block_id" + "}", localVarApiClient.escapeString(schemaResponseBlockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetValidateBeforeCall(String schemaResponseId, String schemaResponseBlockId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet(Async)");
        }

        // verify the required parameter 'schemaResponseBlockId' is set
        if (schemaResponseBlockId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseBlockId' when calling schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet(Async)");
        }

        return schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetCall(schemaResponseId, schemaResponseBlockId, _callback);

    }

    /**
     * Retrieve a Registration Schema Block
     * This returns a Registration Schema Block by it&#39;s ID. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponseBlockId The unique identifier of the Schema Response Block example &#x60;61b79f9eadbb5701424a2d5e&#x60;. (required)
     * @return RegistrationSchemaBlock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationSchemaBlock schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGet(String schemaResponseId, String schemaResponseBlockId) throws ApiException {
        ApiResponse<RegistrationSchemaBlock> localVarResp = schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetWithHttpInfo(schemaResponseId, schemaResponseBlockId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Registration Schema Block
     * This returns a Registration Schema Block by it&#39;s ID. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponseBlockId The unique identifier of the Schema Response Block example &#x60;61b79f9eadbb5701424a2d5e&#x60;. (required)
     * @return ApiResponse&lt;RegistrationSchemaBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationSchemaBlock> schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetWithHttpInfo(String schemaResponseId, String schemaResponseBlockId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetValidateBeforeCall(schemaResponseId, schemaResponseBlockId, null);
        Type localVarReturnType = new TypeToken<RegistrationSchemaBlock>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Registration Schema Block (asynchronously)
     * This returns a Registration Schema Block by it&#39;s ID. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Registration Schemas, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param schemaResponseBlockId The unique identifier of the Schema Response Block example &#x60;61b79f9eadbb5701424a2d5e&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetAsync(String schemaResponseId, String schemaResponseBlockId, final ApiCallback<RegistrationSchemaBlock> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsesSchemaResponseIdSchemaBlocksSchemaResponseBlockIdGetValidateBeforeCall(schemaResponseId, schemaResponseBlockId, _callback);
        Type localVarReturnType = new TypeToken<RegistrationSchemaBlock>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
