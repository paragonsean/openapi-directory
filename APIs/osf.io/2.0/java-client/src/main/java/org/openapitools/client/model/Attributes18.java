/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the preprint entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes18 {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DATE_PUBLISHED = "date_published";
  @SerializedName(SERIALIZED_NAME_DATE_PUBLISHED)
  private OffsetDateTime datePublished;

  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_IS_PREPRINT_ORPHAN = "is_preprint_orphan";
  @SerializedName(SERIALIZED_NAME_IS_PREPRINT_ORPHAN)
  private Boolean isPreprintOrphan;

  public static final String SERIALIZED_NAME_LICENSE_RECORD = "license_record";
  @SerializedName(SERIALIZED_NAME_LICENSE_RECORD)
  private String licenseRecord;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public Attributes18() {
  }

  public Attributes18(
     OffsetDateTime dateCreated, 
     OffsetDateTime dateModified, 
     OffsetDateTime datePublished, 
     Boolean isPreprintOrphan
  ) {
    this();
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
    this.datePublished = datePublished;
    this.isPreprintOrphan = isPreprintOrphan;
  }

  /**
   * The time at which the preprint was created, as an iso8601 formatted timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The time at which the preprint was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  /**
   * The time at which the preprint was published, as an iso8601 formatted timestamp.
   * @return datePublished
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatePublished() {
    return datePublished;
  }



  public Attributes18 doi(String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * The DOI of the associated journal article, as entered by the user, if the preprint is published.
   * @return doi
   */
  @javax.annotation.Nullable
  public String getDoi() {
    return doi;
  }

  public void setDoi(String doi) {
    this.doi = doi;
  }


  /**
   * Whether or not the preprint is orphaned. A preprint can be orphaned if it&#39;s primary file was removed from the preprint node. This field may be deprecated in future versions.
   * @return isPreprintOrphan
   */
  @javax.annotation.Nullable
  public Boolean getIsPreprintOrphan() {
    return isPreprintOrphan;
  }



  public Attributes18 licenseRecord(String licenseRecord) {
    this.licenseRecord = licenseRecord;
    return this;
  }

  /**
   * The metadata (copyright year and holder) associated with a license, required for certain licenses.
   * @return licenseRecord
   */
  @javax.annotation.Nullable
  public String getLicenseRecord() {
    return licenseRecord;
  }

  public void setLicenseRecord(String licenseRecord) {
    this.licenseRecord = licenseRecord;
  }


  public Attributes18 subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public Attributes18 addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject.
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes18 attributes18 = (Attributes18) o;
    return Objects.equals(this.dateCreated, attributes18.dateCreated) &&
        Objects.equals(this.dateModified, attributes18.dateModified) &&
        Objects.equals(this.datePublished, attributes18.datePublished) &&
        Objects.equals(this.doi, attributes18.doi) &&
        Objects.equals(this.isPreprintOrphan, attributes18.isPreprintOrphan) &&
        Objects.equals(this.licenseRecord, attributes18.licenseRecord) &&
        Objects.equals(this.subjects, attributes18.subjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, datePublished, doi, isPreprintOrphan, licenseRecord, subjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes18 {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    datePublished: ").append(toIndentedString(datePublished)).append("\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    isPreprintOrphan: ").append(toIndentedString(isPreprintOrphan)).append("\n");
    sb.append("    licenseRecord: ").append(toIndentedString(licenseRecord)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("date_published");
    openapiFields.add("doi");
    openapiFields.add("is_preprint_orphan");
    openapiFields.add("license_record");
    openapiFields.add("subjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes18
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes18.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes18 is not found in the empty JSON string", Attributes18.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes18.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes18` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("doi") != null && !jsonObj.get("doi").isJsonNull()) && !jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if ((jsonObj.get("license_record") != null && !jsonObj.get("license_record").isJsonNull()) && !jsonObj.get("license_record").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_record` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_record").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes18.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes18' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes18> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes18.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes18>() {
           @Override
           public void write(JsonWriter out, Attributes18 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes18 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes18 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes18
   * @throws IOException if the JSON string is invalid with respect to Attributes18
   */
  public static Attributes18 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes18.class);
  }

  /**
   * Convert an instance of Attributes18 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

