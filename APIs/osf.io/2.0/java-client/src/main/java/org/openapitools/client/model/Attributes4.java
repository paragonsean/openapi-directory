/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NodeLicense;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Draft Registration entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes4 {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CURRENT_USER_PERMISSIONS = "current_user_permissions";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_PERMISSIONS)
  private List<String> currentUserPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATETIME_INITIATED = "datetime_initiated";
  @SerializedName(SERIALIZED_NAME_DATETIME_INITIATED)
  private OffsetDateTime datetimeInitiated;

  public static final String SERIALIZED_NAME_DATETIME_UPDATED = "datetime_updated";
  @SerializedName(SERIALIZED_NAME_DATETIME_UPDATED)
  private OffsetDateTime datetimeUpdated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_PROJECT = "has_project";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECT)
  private Boolean hasProject;

  public static final String SERIALIZED_NAME_NODE_LICENSE = "node_license";
  @SerializedName(SERIALIZED_NAME_NODE_LICENSE)
  private NodeLicense nodeLicense;

  public static final String SERIALIZED_NAME_REGISTRATION_METADATA = "registration_metadata";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_METADATA)
  private Object registrationMetadata;

  public static final String SERIALIZED_NAME_REGISTRATION_RESPONSES = "registration_responses";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_RESPONSES)
  private Object registrationResponses;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Attributes4() {
  }

  public Attributes4(
     List<String> currentUserPermissions, 
     OffsetDateTime datetimeInitiated, 
     OffsetDateTime datetimeUpdated, 
     Boolean hasProject
  ) {
    this();
    this.currentUserPermissions = currentUserPermissions;
    this.datetimeInitiated = datetimeInitiated;
    this.datetimeUpdated = datetimeUpdated;
    this.hasProject = hasProject;
  }

  public Attributes4 category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the Draft Registration.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  /**
   * The current users permission level for the Draft Registration.
   * @return currentUserPermissions
   */
  @javax.annotation.Nullable
  public List<String> getCurrentUserPermissions() {
    return currentUserPermissions;
  }



  /**
   * The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.
   * @return datetimeInitiated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatetimeInitiated() {
    return datetimeInitiated;
  }



  /**
   * The time at which the draft registration was last updated, as an iso8601 formatted timestamp.
   * @return datetimeUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatetimeUpdated() {
    return datetimeUpdated;
  }



  public Attributes4 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the Draft Registration.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * This indicates whether a Draft Registration was branched from a project.
   * @return hasProject
   */
  @javax.annotation.Nullable
  public Boolean getHasProject() {
    return hasProject;
  }



  public Attributes4 nodeLicense(NodeLicense nodeLicense) {
    this.nodeLicense = nodeLicense;
    return this;
  }

  /**
   * Get nodeLicense
   * @return nodeLicense
   */
  @javax.annotation.Nullable
  public NodeLicense getNodeLicense() {
    return nodeLicense;
  }

  public void setNodeLicense(NodeLicense nodeLicense) {
    this.nodeLicense = nodeLicense;
  }


  public Attributes4 registrationMetadata(Object registrationMetadata) {
    this.registrationMetadata = registrationMetadata;
    return this;
  }

  /**
   * This is a legacy format for &#x60;registration_responses&#x60;.
   * @return registrationMetadata
   */
  @javax.annotation.Nullable
  public Object getRegistrationMetadata() {
    return registrationMetadata;
  }

  public void setRegistrationMetadata(Object registrationMetadata) {
    this.registrationMetadata = registrationMetadata;
  }


  public Attributes4 registrationResponses(Object registrationResponses) {
    this.registrationResponses = registrationResponses;
    return this;
  }

  /**
   * A dictionary of question IDs and responses from the registration schema.
   * @return registrationResponses
   */
  @javax.annotation.Nullable
  public Object getRegistrationResponses() {
    return registrationResponses;
  }

  public void setRegistrationResponses(Object registrationResponses) {
    this.registrationResponses = registrationResponses;
  }


  public Attributes4 tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Attributes4 addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The searchable tags of the Draft Registration.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Attributes4 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the Draft Registration.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes4 attributes4 = (Attributes4) o;
    return Objects.equals(this.category, attributes4.category) &&
        Objects.equals(this.currentUserPermissions, attributes4.currentUserPermissions) &&
        Objects.equals(this.datetimeInitiated, attributes4.datetimeInitiated) &&
        Objects.equals(this.datetimeUpdated, attributes4.datetimeUpdated) &&
        Objects.equals(this.description, attributes4.description) &&
        Objects.equals(this.hasProject, attributes4.hasProject) &&
        Objects.equals(this.nodeLicense, attributes4.nodeLicense) &&
        Objects.equals(this.registrationMetadata, attributes4.registrationMetadata) &&
        Objects.equals(this.registrationResponses, attributes4.registrationResponses) &&
        Objects.equals(this.tags, attributes4.tags) &&
        Objects.equals(this.title, attributes4.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, currentUserPermissions, datetimeInitiated, datetimeUpdated, description, hasProject, nodeLicense, registrationMetadata, registrationResponses, tags, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes4 {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    currentUserPermissions: ").append(toIndentedString(currentUserPermissions)).append("\n");
    sb.append("    datetimeInitiated: ").append(toIndentedString(datetimeInitiated)).append("\n");
    sb.append("    datetimeUpdated: ").append(toIndentedString(datetimeUpdated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasProject: ").append(toIndentedString(hasProject)).append("\n");
    sb.append("    nodeLicense: ").append(toIndentedString(nodeLicense)).append("\n");
    sb.append("    registrationMetadata: ").append(toIndentedString(registrationMetadata)).append("\n");
    sb.append("    registrationResponses: ").append(toIndentedString(registrationResponses)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("current_user_permissions");
    openapiFields.add("datetime_initiated");
    openapiFields.add("datetime_updated");
    openapiFields.add("description");
    openapiFields.add("has_project");
    openapiFields.add("node_license");
    openapiFields.add("registration_metadata");
    openapiFields.add("registration_responses");
    openapiFields.add("tags");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes4
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes4 is not found in the empty JSON string", Attributes4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("current_user_permissions") != null && !jsonObj.get("current_user_permissions").isJsonNull() && !jsonObj.get("current_user_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("current_user_permissions").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `node_license`
      if (jsonObj.get("node_license") != null && !jsonObj.get("node_license").isJsonNull()) {
        NodeLicense.validateJsonElement(jsonObj.get("node_license"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes4.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes4>() {
           @Override
           public void write(JsonWriter out, Attributes4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes4 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes4
   * @throws IOException if the JSON string is invalid with respect to Attributes4
   */
  public static Attributes4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes4.class);
  }

  /**
   * Convert an instance of Attributes4 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

