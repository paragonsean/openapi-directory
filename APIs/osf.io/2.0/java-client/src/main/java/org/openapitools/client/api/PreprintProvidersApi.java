/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.License;
import org.openapitools.client.model.Preprint;
import org.openapitools.client.model.PreprintProviders;
import org.openapitools.client.model.Taxonomy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreprintProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreprintProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreprintProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for preprintProviderDetail
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderDetailCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preprint_providers/{preprint_provider_id}/"
            .replace("{" + "preprint_provider_id" + "}", localVarApiClient.escapeString(preprintProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preprintProviderDetailValidateBeforeCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preprintProviderId' is set
        if (preprintProviderId == null) {
            throw new ApiException("Missing the required parameter 'preprintProviderId' when calling preprintProviderDetail(Async)");
        }

        return preprintProviderDetailCall(preprintProviderId, _callback);

    }

    /**
     * Retrieve a preprint provider
     * Retrieves the details of a preprint provider. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested preprint provider, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Acceptable Subjects Structure Each preprint provider specifies acceptable subjects. &#x60;subjects_acceptable&#x60; is an array found in &#x60;attributes&#x60;. Subjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.       \&quot;subjects_acceptable\&quot;: [         [             [                 # Parent Subject:                 # Architecture                 \&quot;584240d954be81056ceca9e5\&quot;,                  # Child Subject:                 # Architectural Engineering                 \&quot;584240da54be81056cecac87\&quot;             ],             # Include all Architectural Engineering&#39;s children:             true         ],         [             [                 # Parent Subject:                 # Engineering                 \&quot;584240da54be81056cecaca9\&quot;,                  # Child Subject:                 # Aerospace Engineering                 \&quot;584240db54be81056cecacd6\&quot;,                  # Grandchild Subject:                 # Aerodynamics and Fluid Mechanics                 \&quot;584240da54be81056cecaa74\&quot;             ],             # All nestings 3 deep must be false             false         ]     ]  The above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering&#39;s children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return PreprintProviders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreprintProviders preprintProviderDetail(String preprintProviderId) throws ApiException {
        ApiResponse<PreprintProviders> localVarResp = preprintProviderDetailWithHttpInfo(preprintProviderId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a preprint provider
     * Retrieves the details of a preprint provider. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested preprint provider, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Acceptable Subjects Structure Each preprint provider specifies acceptable subjects. &#x60;subjects_acceptable&#x60; is an array found in &#x60;attributes&#x60;. Subjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.       \&quot;subjects_acceptable\&quot;: [         [             [                 # Parent Subject:                 # Architecture                 \&quot;584240d954be81056ceca9e5\&quot;,                  # Child Subject:                 # Architectural Engineering                 \&quot;584240da54be81056cecac87\&quot;             ],             # Include all Architectural Engineering&#39;s children:             true         ],         [             [                 # Parent Subject:                 # Engineering                 \&quot;584240da54be81056cecaca9\&quot;,                  # Child Subject:                 # Aerospace Engineering                 \&quot;584240db54be81056cecacd6\&quot;,                  # Grandchild Subject:                 # Aerodynamics and Fluid Mechanics                 \&quot;584240da54be81056cecaa74\&quot;             ],             # All nestings 3 deep must be false             false         ]     ]  The above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering&#39;s children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return ApiResponse&lt;PreprintProviders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreprintProviders> preprintProviderDetailWithHttpInfo(String preprintProviderId) throws ApiException {
        okhttp3.Call localVarCall = preprintProviderDetailValidateBeforeCall(preprintProviderId, null);
        Type localVarReturnType = new TypeToken<PreprintProviders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a preprint provider (asynchronously)
     * Retrieves the details of a preprint provider. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested preprint provider, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Acceptable Subjects Structure Each preprint provider specifies acceptable subjects. &#x60;subjects_acceptable&#x60; is an array found in &#x60;attributes&#x60;. Subjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.       \&quot;subjects_acceptable\&quot;: [         [             [                 # Parent Subject:                 # Architecture                 \&quot;584240d954be81056ceca9e5\&quot;,                  # Child Subject:                 # Architectural Engineering                 \&quot;584240da54be81056cecac87\&quot;             ],             # Include all Architectural Engineering&#39;s children:             true         ],         [             [                 # Parent Subject:                 # Engineering                 \&quot;584240da54be81056cecaca9\&quot;,                  # Child Subject:                 # Aerospace Engineering                 \&quot;584240db54be81056cecacd6\&quot;,                  # Grandchild Subject:                 # Aerodynamics and Fluid Mechanics                 \&quot;584240da54be81056cecaa74\&quot;             ],             # All nestings 3 deep must be false             false         ]     ]  The above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering&#39;s children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderDetailAsync(String preprintProviderId, final ApiCallback<PreprintProviders> _callback) throws ApiException {

        okhttp3.Call localVarCall = preprintProviderDetailValidateBeforeCall(preprintProviderId, _callback);
        Type localVarReturnType = new TypeToken<PreprintProviders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preprintProviderLicensesList
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderLicensesListCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preprint_providers/{preprint_provider_id}/licenses/"
            .replace("{" + "preprint_provider_id" + "}", localVarApiClient.escapeString(preprintProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preprintProviderLicensesListValidateBeforeCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preprintProviderId' is set
        if (preprintProviderId == null) {
            throw new ApiException("Missing the required parameter 'preprintProviderId' when calling preprintProviderLicensesList(Async)");
        }

        return preprintProviderLicensesListCall(preprintProviderId, _callback);

    }

    /**
     * List all licenses
     *  A paginated list of the licenses allowed by a preprint provider. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return License
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public License preprintProviderLicensesList(String preprintProviderId) throws ApiException {
        ApiResponse<License> localVarResp = preprintProviderLicensesListWithHttpInfo(preprintProviderId);
        return localVarResp.getData();
    }

    /**
     * List all licenses
     *  A paginated list of the licenses allowed by a preprint provider. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return ApiResponse&lt;License&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<License> preprintProviderLicensesListWithHttpInfo(String preprintProviderId) throws ApiException {
        okhttp3.Call localVarCall = preprintProviderLicensesListValidateBeforeCall(preprintProviderId, null);
        Type localVarReturnType = new TypeToken<License>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all licenses (asynchronously)
     *  A paginated list of the licenses allowed by a preprint provider. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderLicensesListAsync(String preprintProviderId, final ApiCallback<License> _callback) throws ApiException {

        okhttp3.Call localVarCall = preprintProviderLicensesListValidateBeforeCall(preprintProviderId, _callback);
        Type localVarReturnType = new TypeToken<License>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preprintProviderList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preprint_providers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preprintProviderListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return preprintProviderListCall(_callback);

    }

    /**
     * List all preprint providers
     *  A paginated list of all preprint providers. The returned preprint providers are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include preprint providers that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/preprint_providers/?filter[id]&#x3D;osf.  Preprint Providers may be filtered by their &#x60;id&#x60;, &#x60;name&#x60;,  and &#x60;description&#x60;
     * @return PreprintProviders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreprintProviders preprintProviderList() throws ApiException {
        ApiResponse<PreprintProviders> localVarResp = preprintProviderListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all preprint providers
     *  A paginated list of all preprint providers. The returned preprint providers are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include preprint providers that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/preprint_providers/?filter[id]&#x3D;osf.  Preprint Providers may be filtered by their &#x60;id&#x60;, &#x60;name&#x60;,  and &#x60;description&#x60;
     * @return ApiResponse&lt;PreprintProviders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreprintProviders> preprintProviderListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = preprintProviderListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PreprintProviders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all preprint providers (asynchronously)
     *  A paginated list of all preprint providers. The returned preprint providers are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  This request should never return an error. #### Filtering You can optionally request that the response only include preprint providers that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/preprint_providers/?filter[id]&#x3D;osf.  Preprint Providers may be filtered by their &#x60;id&#x60;, &#x60;name&#x60;,  and &#x60;description&#x60;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderListAsync(final ApiCallback<PreprintProviders> _callback) throws ApiException {

        okhttp3.Call localVarCall = preprintProviderListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PreprintProviders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preprintProviderTaxonomiesList
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderTaxonomiesListCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preprint_providers/{preprint_provider_id}/taxonomies/"
            .replace("{" + "preprint_provider_id" + "}", localVarApiClient.escapeString(preprintProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preprintProviderTaxonomiesListValidateBeforeCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preprintProviderId' is set
        if (preprintProviderId == null) {
            throw new ApiException("Missing the required parameter 'preprintProviderId' when calling preprintProviderTaxonomiesList(Async)");
        }

        return preprintProviderTaxonomiesListCall(preprintProviderId, _callback);

    }

    /**
     * List all taxonomies
     *  A paginated list of the taxonomies for a preprint provider. The returned preprint providers taxonomies are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return Taxonomy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Taxonomy preprintProviderTaxonomiesList(String preprintProviderId) throws ApiException {
        ApiResponse<Taxonomy> localVarResp = preprintProviderTaxonomiesListWithHttpInfo(preprintProviderId);
        return localVarResp.getData();
    }

    /**
     * List all taxonomies
     *  A paginated list of the taxonomies for a preprint provider. The returned preprint providers taxonomies are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return ApiResponse&lt;Taxonomy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Taxonomy> preprintProviderTaxonomiesListWithHttpInfo(String preprintProviderId) throws ApiException {
        okhttp3.Call localVarCall = preprintProviderTaxonomiesListValidateBeforeCall(preprintProviderId, null);
        Type localVarReturnType = new TypeToken<Taxonomy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all taxonomies (asynchronously)
     *  A paginated list of the taxonomies for a preprint provider. The returned preprint providers taxonomies are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProviderTaxonomiesListAsync(String preprintProviderId, final ApiCallback<Taxonomy> _callback) throws ApiException {

        okhttp3.Call localVarCall = preprintProviderTaxonomiesListValidateBeforeCall(preprintProviderId, _callback);
        Type localVarReturnType = new TypeToken<Taxonomy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preprintProvidersPreprintsList
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProvidersPreprintsListCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preprint_providers/{preprint_provider_id}/preprints/"
            .replace("{" + "preprint_provider_id" + "}", localVarApiClient.escapeString(preprintProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preprintProvidersPreprintsListValidateBeforeCall(String preprintProviderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preprintProviderId' is set
        if (preprintProviderId == null) {
            throw new ApiException("Missing the required parameter 'preprintProviderId' when calling preprintProvidersPreprintsList(Async)");
        }

        return preprintProvidersPreprintsListCall(preprintProviderId, _callback);

    }

    /**
     * List all preprints
     *  A paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprints. Each resource in the array is a separate preprint object.  The &#x60;links&#x60; key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Filtering You can optionally request that the response only include preprints that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/preprint_providers/osf/preprints/?filter[is_published]&#x3D;true.  Preprints may be filtered by their &#x60;id&#x60;, &#x60;is_published&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, and &#x60;provider&#x60;.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return List&lt;Preprint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Preprint> preprintProvidersPreprintsList(String preprintProviderId) throws ApiException {
        ApiResponse<List<Preprint>> localVarResp = preprintProvidersPreprintsListWithHttpInfo(preprintProviderId);
        return localVarResp.getData();
    }

    /**
     * List all preprints
     *  A paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprints. Each resource in the array is a separate preprint object.  The &#x60;links&#x60; key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Filtering You can optionally request that the response only include preprints that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/preprint_providers/osf/preprints/?filter[is_published]&#x3D;true.  Preprints may be filtered by their &#x60;id&#x60;, &#x60;is_published&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, and &#x60;provider&#x60;.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @return ApiResponse&lt;List&lt;Preprint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Preprint>> preprintProvidersPreprintsListWithHttpInfo(String preprintProviderId) throws ApiException {
        okhttp3.Call localVarCall = preprintProvidersPreprintsListValidateBeforeCall(preprintProviderId, null);
        Type localVarReturnType = new TypeToken<List<Preprint>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all preprints (asynchronously)
     *  A paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of 10 preprints. Each resource in the array is a separate preprint object.  The &#x60;links&#x60; key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.  #### Filtering You can optionally request that the response only include preprints that match your filters by utilizing the &#x60;filter&#x60; query parameter, e.g. https://api.osf.io/v2/preprint_providers/osf/preprints/?filter[is_published]&#x3D;true.  Preprints may be filtered by their &#x60;id&#x60;, &#x60;is_published&#x60;, &#x60;date_created&#x60;, &#x60;date_modified&#x60;, and &#x60;provider&#x60;.
     * @param preprintProviderId The unique identifier of the preprint provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preprintProvidersPreprintsListAsync(String preprintProviderId, final ApiCallback<List<Preprint>> _callback) throws ApiException {

        okhttp3.Call localVarCall = preprintProvidersPreprintsListValidateBeforeCall(preprintProviderId, _callback);
        Type localVarReturnType = new TypeToken<List<Preprint>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
