/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the node entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes10 {
  /**
   * The category of the node, as selected by project contributors.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    ANALYSIS("analysis"),
    
    COMMUNICATION("communication"),
    
    DATA("data"),
    
    HYPOTHESIS("hypothesis"),
    
    INSTRUMENTATION("instrumentation"),
    
    METHODS_AND_MEASURES("methods and measures"),
    
    PROCEDURE("procedure"),
    
    PROJECT("project"),
    
    SOFTWARE("software"),
    
    OTHER("other");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private Boolean collection;

  public static final String SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT = "current_user_can_comment";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT)
  private Boolean currentUserCanComment;

  public static final String SERIALIZED_NAME_CURRENT_USER_PERMISSIONS = "current_user_permissions";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_PERMISSIONS)
  private List<String> currentUserPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKED_DATE = "forked_date";
  @SerializedName(SERIALIZED_NAME_FORKED_DATE)
  private OffsetDateTime forkedDate;

  public static final String SERIALIZED_NAME_NODE_LICENSE = "node_license";
  @SerializedName(SERIALIZED_NAME_NODE_LICENSE)
  private String nodeLicense;

  public static final String SERIALIZED_NAME_PREPRINT = "preprint";
  @SerializedName(SERIALIZED_NAME_PREPRINT)
  private Boolean preprint;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private Boolean registration;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_FROM = "template_from";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_FROM)
  private String templateFrom;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Attributes10() {
  }

  public Attributes10(
     Boolean collection, 
     Boolean currentUserCanComment, 
     List<String> currentUserPermissions, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateModified, 
     Boolean fork, 
     OffsetDateTime forkedDate, 
     Boolean preprint, 
     Boolean registration
  ) {
    this();
    this.collection = collection;
    this.currentUserCanComment = currentUserCanComment;
    this.currentUserPermissions = currentUserPermissions;
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
    this.fork = fork;
    this.forkedDate = forkedDate;
    this.preprint = preprint;
    this.registration = registration;
  }

  public Attributes10 category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the node, as selected by project contributors.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  /**
   * Whether or not this node represents a collection. This value should always be &#x60;false&#x60;. This field may be deprecated in future versions.
   * @return collection
   */
  @javax.annotation.Nullable
  public Boolean getCollection() {
    return collection;
  }



  /**
   * Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.
   * @return currentUserCanComment
   */
  @javax.annotation.Nullable
  public Boolean getCurrentUserCanComment() {
    return currentUserCanComment;
  }



  /**
   * A list of strings representing the permissions for the current user on this node. Valid permissions are \&quot;admin\&quot;, \&quot;read\&quot;, and \&quot;write\&quot;.
   * @return currentUserPermissions
   */
  @javax.annotation.Nullable
  public List<String> getCurrentUserPermissions() {
    return currentUserPermissions;
  }



  /**
   * The time at which the node was created, as an iso8601 formatted timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The time at which the node was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  public Attributes10 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the node.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Whether or not this node represents a fork of another node.
   * @return fork
   */
  @javax.annotation.Nullable
  public Boolean getFork() {
    return fork;
  }



  /**
   * If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.
   * @return forkedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getForkedDate() {
    return forkedDate;
  }



  public Attributes10 nodeLicense(String nodeLicense) {
    this.nodeLicense = nodeLicense;
    return this;
  }

  /**
   * A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).
   * @return nodeLicense
   */
  @javax.annotation.Nullable
  public String getNodeLicense() {
    return nodeLicense;
  }

  public void setNodeLicense(String nodeLicense) {
    this.nodeLicense = nodeLicense;
  }


  /**
   * Whether or not a preprint has been created from this node, or if this node was created for a preprint.
   * @return preprint
   */
  @javax.annotation.Nullable
  public Boolean getPreprint() {
    return preprint;
  }



  public Attributes10 _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Whether or not the node is publicly visible. This field is only editable by project administrators.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  /**
   * Whether or not the node represents a registration. This value should always be &#x60;false&#x60;. This field may be deprecated in future versions.
   * @return registration
   */
  @javax.annotation.Nullable
  public Boolean getRegistration() {
    return registration;
  }



  public Attributes10 tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Attributes10 addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of strings that describe this node, as entered by project contributors.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Attributes10 templateFrom(String templateFrom) {
    this.templateFrom = templateFrom;
    return this;
  }

  /**
   * The unique ID of the node from which this node was templated, if this node was created from a template.
   * @return templateFrom
   */
  @javax.annotation.Nullable
  public String getTemplateFrom() {
    return templateFrom;
  }

  public void setTemplateFrom(String templateFrom) {
    this.templateFrom = templateFrom;
  }


  public Attributes10 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the node.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes10 attributes10 = (Attributes10) o;
    return Objects.equals(this.category, attributes10.category) &&
        Objects.equals(this.collection, attributes10.collection) &&
        Objects.equals(this.currentUserCanComment, attributes10.currentUserCanComment) &&
        Objects.equals(this.currentUserPermissions, attributes10.currentUserPermissions) &&
        Objects.equals(this.dateCreated, attributes10.dateCreated) &&
        Objects.equals(this.dateModified, attributes10.dateModified) &&
        Objects.equals(this.description, attributes10.description) &&
        Objects.equals(this.fork, attributes10.fork) &&
        Objects.equals(this.forkedDate, attributes10.forkedDate) &&
        Objects.equals(this.nodeLicense, attributes10.nodeLicense) &&
        Objects.equals(this.preprint, attributes10.preprint) &&
        Objects.equals(this._public, attributes10._public) &&
        Objects.equals(this.registration, attributes10.registration) &&
        Objects.equals(this.tags, attributes10.tags) &&
        Objects.equals(this.templateFrom, attributes10.templateFrom) &&
        Objects.equals(this.title, attributes10.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, collection, currentUserCanComment, currentUserPermissions, dateCreated, dateModified, description, fork, forkedDate, nodeLicense, preprint, _public, registration, tags, templateFrom, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes10 {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    currentUserCanComment: ").append(toIndentedString(currentUserCanComment)).append("\n");
    sb.append("    currentUserPermissions: ").append(toIndentedString(currentUserPermissions)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forkedDate: ").append(toIndentedString(forkedDate)).append("\n");
    sb.append("    nodeLicense: ").append(toIndentedString(nodeLicense)).append("\n");
    sb.append("    preprint: ").append(toIndentedString(preprint)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    templateFrom: ").append(toIndentedString(templateFrom)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("collection");
    openapiFields.add("current_user_can_comment");
    openapiFields.add("current_user_permissions");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("description");
    openapiFields.add("fork");
    openapiFields.add("forked_date");
    openapiFields.add("node_license");
    openapiFields.add("preprint");
    openapiFields.add("public");
    openapiFields.add("registration");
    openapiFields.add("tags");
    openapiFields.add("template_from");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes10
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes10.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes10 is not found in the empty JSON string", Attributes10.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes10.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes10` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Attributes10.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("current_user_permissions") != null && !jsonObj.get("current_user_permissions").isJsonNull() && !jsonObj.get("current_user_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("current_user_permissions").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("node_license") != null && !jsonObj.get("node_license").isJsonNull()) && !jsonObj.get("node_license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_license").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("template_from") != null && !jsonObj.get("template_from").isJsonNull()) && !jsonObj.get("template_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_from").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes10.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes10' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes10> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes10.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes10>() {
           @Override
           public void write(JsonWriter out, Attributes10 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes10 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes10 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes10
   * @throws IOException if the JSON string is invalid with respect to Attributes10
   */
  public static Attributes10 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes10.class);
  }

  /**
   * Convert an instance of Attributes10 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

