/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type of action performed on the OSF. See description for full list of possible actions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogParams {
  public static final String SERIALIZED_NAME_ADDON = "addon";
  @SerializedName(SERIALIZED_NAME_ADDON)
  private String addon;

  public static final String SERIALIZED_NAME_ANONYMOUS_LINK = "anonymous_link";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_LINK)
  private Boolean anonymousLink;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_CITATION_NAME = "citation_name";
  @SerializedName(SERIALIZED_NAME_CITATION_NAME)
  private String citationName;

  public static final String SERIALIZED_NAME_CONTRIBUTORS = "contributors";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS)
  private String contributors;

  public static final String SERIALIZED_NAME_DATA_SET = "data_set";
  @SerializedName(SERIALIZED_NAME_DATA_SET)
  private String dataSet;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_FIGSHARE_TITLE = "figshare_title";
  @SerializedName(SERIALIZED_NAME_FIGSHARE_TITLE)
  private String figshareTitle;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_FOLDER_NAME = "folder_name";
  @SerializedName(SERIALIZED_NAME_FOLDER_NAME)
  private String folderName;

  public static final String SERIALIZED_NAME_FORWARD_URL = "forward_url";
  @SerializedName(SERIALIZED_NAME_FORWARD_URL)
  private String forwardUrl;

  public static final String SERIALIZED_NAME_GITHUB_REPO = "github_repo";
  @SerializedName(SERIALIZED_NAME_GITHUB_REPO)
  private String githubRepo;

  public static final String SERIALIZED_NAME_GITHUB_USER = "github_user";
  @SerializedName(SERIALIZED_NAME_GITHUB_USER)
  private String githubUser;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private String identifiers;

  public static final String SERIALIZED_NAME_INSTITUTION = "institution";
  @SerializedName(SERIALIZED_NAME_INSTITUTION)
  private String institution;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_OLD_PAGE = "old_page";
  @SerializedName(SERIALIZED_NAME_OLD_PAGE)
  private String oldPage;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public static final String SERIALIZED_NAME_PAGE_ID = "page_id";
  @SerializedName(SERIALIZED_NAME_PAGE_ID)
  private String pageId;

  public static final String SERIALIZED_NAME_PARAMS_NODE = "params_node";
  @SerializedName(SERIALIZED_NAME_PARAMS_NODE)
  private String paramsNode;

  public static final String SERIALIZED_NAME_PARAMS_PROJECT = "params_project";
  @SerializedName(SERIALIZED_NAME_PARAMS_PROJECT)
  private String paramsProject;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_POINTER = "pointer";
  @SerializedName(SERIALIZED_NAME_POINTER)
  private String pointer;

  public static final String SERIALIZED_NAME_PREPRINT = "preprint";
  @SerializedName(SERIALIZED_NAME_PREPRINT)
  private String preprint;

  public static final String SERIALIZED_NAME_PREPRINT_PROVIDER = "preprint_provider";
  @SerializedName(SERIALIZED_NAME_PREPRINT_PROVIDER)
  private String preprintProvider;

  public static final String SERIALIZED_NAME_PREVIOUS_INSTITUTION = "previous_institution";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_INSTITUTION)
  private String previousInstitution;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STUDY = "study";
  @SerializedName(SERIALIZED_NAME_STUDY)
  private String study;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TEMPLATE_NODE = "template_node";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NODE)
  private String templateNode;

  public static final String SERIALIZED_NAME_TITLE_NEW = "title_new";
  @SerializedName(SERIALIZED_NAME_TITLE_NEW)
  private String titleNew;

  public static final String SERIALIZED_NAME_TITLE_ORIGINAL = "title_original";
  @SerializedName(SERIALIZED_NAME_TITLE_ORIGINAL)
  private String titleOriginal;

  public static final String SERIALIZED_NAME_UPDATED_FIELDS = "updated_fields";
  @SerializedName(SERIALIZED_NAME_UPDATED_FIELDS)
  private String updatedFields;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private String urls;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WIKI = "wiki";
  @SerializedName(SERIALIZED_NAME_WIKI)
  private String wiki;

  public LogParams() {
  }

  public LogParams(
     String addon, 
     Boolean anonymousLink, 
     String bucket, 
     String citationName, 
     String contributors, 
     String dataSet, 
     String destination, 
     String figshareTitle, 
     String _file, 
     String filename, 
     String folder, 
     String folderName, 
     String forwardUrl, 
     String githubRepo, 
     String githubUser, 
     String identifiers, 
     String institution, 
     String kind, 
     String license, 
     String oldPage, 
     String page, 
     String pageId, 
     String paramsNode, 
     String paramsProject, 
     String path, 
     String pointer, 
     String preprint, 
     String preprintProvider, 
     String previousInstitution, 
     String source, 
     String study, 
     String tag, 
     String tags, 
     String target, 
     String templateNode, 
     String titleNew, 
     String titleOriginal, 
     String updatedFields, 
     String urls, 
     String version, 
     String wiki
  ) {
    this();
    this.addon = addon;
    this.anonymousLink = anonymousLink;
    this.bucket = bucket;
    this.citationName = citationName;
    this.contributors = contributors;
    this.dataSet = dataSet;
    this.destination = destination;
    this.figshareTitle = figshareTitle;
    this._file = _file;
    this.filename = filename;
    this.folder = folder;
    this.folderName = folderName;
    this.forwardUrl = forwardUrl;
    this.githubRepo = githubRepo;
    this.githubUser = githubUser;
    this.identifiers = identifiers;
    this.institution = institution;
    this.kind = kind;
    this.license = license;
    this.oldPage = oldPage;
    this.page = page;
    this.pageId = pageId;
    this.paramsNode = paramsNode;
    this.paramsProject = paramsProject;
    this.path = path;
    this.pointer = pointer;
    this.preprint = preprint;
    this.preprintProvider = preprintProvider;
    this.previousInstitution = previousInstitution;
    this.source = source;
    this.study = study;
    this.tag = tag;
    this.tags = tags;
    this.target = target;
    this.templateNode = templateNode;
    this.titleNew = titleNew;
    this.titleOriginal = titleOriginal;
    this.updatedFields = updatedFields;
    this.urls = urls;
    this.version = version;
    this.wiki = wiki;
  }

  /**
   * The addon associated with the connected node.
   * @return addon
   */
  @javax.annotation.Nullable
  public String getAddon() {
    return addon;
  }



  /**
   * The view only link added to the node was anonymous.
   * @return anonymousLink
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousLink() {
    return anonymousLink;
  }



  /**
   * The Amazon s3 bucket connected to the connected node.
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }



  /**
   * Name of citation associated with the connected node.
   * @return citationName
   */
  @javax.annotation.Nullable
  public String getCitationName() {
    return citationName;
  }



  /**
   * List of contributors on the connected node involved in the action represented by this node log.
   * @return contributors
   */
  @javax.annotation.Nullable
  public String getContributors() {
    return contributors;
  }



  /**
   * The dataset associated with the connected node.
   * @return dataSet
   */
  @javax.annotation.Nullable
  public String getDataSet() {
    return dataSet;
  }



  /**
   * A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title.
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }



  /**
   * Title of the fighshare project associated with this node log
   * @return figshareTitle
   */
  @javax.annotation.Nullable
  public String getFigshareTitle() {
    return figshareTitle;
  }



  /**
   * Dictionary with information about the file involved with the log.
   * @return _file
   */
  @javax.annotation.Nullable
  public String getFile() {
    return _file;
  }



  /**
   * Filename for the file associated with the log.
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }



  /**
   * Folder associated with the log.
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }



  /**
   * Name of the folder associated with the log.
   * @return folderName
   */
  @javax.annotation.Nullable
  public String getFolderName() {
    return folderName;
  }



  /**
   * URL that the connected node forwards to.
   * @return forwardUrl
   */
  @javax.annotation.Nullable
  public String getForwardUrl() {
    return forwardUrl;
  }



  /**
   * The github repository involved with the action represented by this node log.
   * @return githubRepo
   */
  @javax.annotation.Nullable
  public String getGithubRepo() {
    return githubRepo;
  }



  /**
   * The github user involved with the action represented by this node log.
   * @return githubUser
   */
  @javax.annotation.Nullable
  public String getGithubUser() {
    return githubUser;
  }



  /**
   * Dictionary containing the DOI and ARK ID for a preprint associated with the log.
   * @return identifiers
   */
  @javax.annotation.Nullable
  public String getIdentifiers() {
    return identifiers;
  }



  /**
   * Dictionary containing the ID and Name of the institution associated with the log.
   * @return institution
   */
  @javax.annotation.Nullable
  public String getInstitution() {
    return institution;
  }



  /**
   * Kind of the object associated with the log.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  /**
   * License for the associated node.
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }



  /**
   * Old name of wiki page for a wiki rename log action.
   * @return oldPage
   */
  @javax.annotation.Nullable
  public String getOldPage() {
    return oldPage;
  }



  /**
   * Current name of wiki page for rename log action.
   * @return page
   */
  @javax.annotation.Nullable
  public String getPage() {
    return page;
  }



  /**
   * Primary key of the wiki page associated with the log.
   * @return pageId
   */
  @javax.annotation.Nullable
  public String getPageId() {
    return pageId;
  }



  /**
   * Node that is refered to in the params of the log.
   * @return paramsNode
   */
  @javax.annotation.Nullable
  public String getParamsNode() {
    return paramsNode;
  }



  /**
   * Project that is refered to in the params of the log.
   * @return paramsProject
   */
  @javax.annotation.Nullable
  public String getParamsProject() {
    return paramsProject;
  }



  /**
   * Path for a file associated with the log.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }



  /**
   * A dictionary with information about the node that is linked to the associated node.
   * @return pointer
   */
  @javax.annotation.Nullable
  public String getPointer() {
    return pointer;
  }



  /**
   * Preprint related to the associated node.
   * @return preprint
   */
  @javax.annotation.Nullable
  public String getPreprint() {
    return preprint;
  }



  /**
   * Preprint provider for the associated node.
   * @return preprintProvider
   */
  @javax.annotation.Nullable
  public String getPreprintProvider() {
    return preprintProvider;
  }



  /**
   * If a primary institution for the associated node is changed, this will show the previous institution.
   * @return previousInstitution
   */
  @javax.annotation.Nullable
  public String getPreviousInstitution() {
    return previousInstitution;
  }



  /**
   * A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }



  /**
   * Dataverse study linked to the associated node.
   * @return study
   */
  @javax.annotation.Nullable
  public String getStudy() {
    return study;
  }



  /**
   * Tag associated with the associated node.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }



  /**
   * Tags associated with the associated node.
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }



  /**
   * A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }



  /**
   * A dictionary containing information about the node that was used as a template for the associated node.
   * @return templateNode
   */
  @javax.annotation.Nullable
  public String getTemplateNode() {
    return templateNode;
  }



  /**
   * The new title for the associated node.
   * @return titleNew
   */
  @javax.annotation.Nullable
  public String getTitleNew() {
    return titleNew;
  }



  /**
   * The original title for the associated node
   * @return titleOriginal
   */
  @javax.annotation.Nullable
  public String getTitleOriginal() {
    return titleOriginal;
  }



  /**
   * A dictionary containing all of the fields updated on the associated node.
   * @return updatedFields
   */
  @javax.annotation.Nullable
  public String getUpdatedFields() {
    return updatedFields;
  }



  /**
   * Links to access information about the file associated with this log.
   * @return urls
   */
  @javax.annotation.Nullable
  public String getUrls() {
    return urls;
  }



  /**
   * Version of the wiki page associated with this log.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }



  /**
   * A dictionary with information about the wiki page associated with the log.
   * @return wiki
   */
  @javax.annotation.Nullable
  public String getWiki() {
    return wiki;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogParams logParams = (LogParams) o;
    return Objects.equals(this.addon, logParams.addon) &&
        Objects.equals(this.anonymousLink, logParams.anonymousLink) &&
        Objects.equals(this.bucket, logParams.bucket) &&
        Objects.equals(this.citationName, logParams.citationName) &&
        Objects.equals(this.contributors, logParams.contributors) &&
        Objects.equals(this.dataSet, logParams.dataSet) &&
        Objects.equals(this.destination, logParams.destination) &&
        Objects.equals(this.figshareTitle, logParams.figshareTitle) &&
        Objects.equals(this._file, logParams._file) &&
        Objects.equals(this.filename, logParams.filename) &&
        Objects.equals(this.folder, logParams.folder) &&
        Objects.equals(this.folderName, logParams.folderName) &&
        Objects.equals(this.forwardUrl, logParams.forwardUrl) &&
        Objects.equals(this.githubRepo, logParams.githubRepo) &&
        Objects.equals(this.githubUser, logParams.githubUser) &&
        Objects.equals(this.identifiers, logParams.identifiers) &&
        Objects.equals(this.institution, logParams.institution) &&
        Objects.equals(this.kind, logParams.kind) &&
        Objects.equals(this.license, logParams.license) &&
        Objects.equals(this.oldPage, logParams.oldPage) &&
        Objects.equals(this.page, logParams.page) &&
        Objects.equals(this.pageId, logParams.pageId) &&
        Objects.equals(this.paramsNode, logParams.paramsNode) &&
        Objects.equals(this.paramsProject, logParams.paramsProject) &&
        Objects.equals(this.path, logParams.path) &&
        Objects.equals(this.pointer, logParams.pointer) &&
        Objects.equals(this.preprint, logParams.preprint) &&
        Objects.equals(this.preprintProvider, logParams.preprintProvider) &&
        Objects.equals(this.previousInstitution, logParams.previousInstitution) &&
        Objects.equals(this.source, logParams.source) &&
        Objects.equals(this.study, logParams.study) &&
        Objects.equals(this.tag, logParams.tag) &&
        Objects.equals(this.tags, logParams.tags) &&
        Objects.equals(this.target, logParams.target) &&
        Objects.equals(this.templateNode, logParams.templateNode) &&
        Objects.equals(this.titleNew, logParams.titleNew) &&
        Objects.equals(this.titleOriginal, logParams.titleOriginal) &&
        Objects.equals(this.updatedFields, logParams.updatedFields) &&
        Objects.equals(this.urls, logParams.urls) &&
        Objects.equals(this.version, logParams.version) &&
        Objects.equals(this.wiki, logParams.wiki);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addon, anonymousLink, bucket, citationName, contributors, dataSet, destination, figshareTitle, _file, filename, folder, folderName, forwardUrl, githubRepo, githubUser, identifiers, institution, kind, license, oldPage, page, pageId, paramsNode, paramsProject, path, pointer, preprint, preprintProvider, previousInstitution, source, study, tag, tags, target, templateNode, titleNew, titleOriginal, updatedFields, urls, version, wiki);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogParams {\n");
    sb.append("    addon: ").append(toIndentedString(addon)).append("\n");
    sb.append("    anonymousLink: ").append(toIndentedString(anonymousLink)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    citationName: ").append(toIndentedString(citationName)).append("\n");
    sb.append("    contributors: ").append(toIndentedString(contributors)).append("\n");
    sb.append("    dataSet: ").append(toIndentedString(dataSet)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    figshareTitle: ").append(toIndentedString(figshareTitle)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    folderName: ").append(toIndentedString(folderName)).append("\n");
    sb.append("    forwardUrl: ").append(toIndentedString(forwardUrl)).append("\n");
    sb.append("    githubRepo: ").append(toIndentedString(githubRepo)).append("\n");
    sb.append("    githubUser: ").append(toIndentedString(githubUser)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    institution: ").append(toIndentedString(institution)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    oldPage: ").append(toIndentedString(oldPage)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageId: ").append(toIndentedString(pageId)).append("\n");
    sb.append("    paramsNode: ").append(toIndentedString(paramsNode)).append("\n");
    sb.append("    paramsProject: ").append(toIndentedString(paramsProject)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pointer: ").append(toIndentedString(pointer)).append("\n");
    sb.append("    preprint: ").append(toIndentedString(preprint)).append("\n");
    sb.append("    preprintProvider: ").append(toIndentedString(preprintProvider)).append("\n");
    sb.append("    previousInstitution: ").append(toIndentedString(previousInstitution)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    study: ").append(toIndentedString(study)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    templateNode: ").append(toIndentedString(templateNode)).append("\n");
    sb.append("    titleNew: ").append(toIndentedString(titleNew)).append("\n");
    sb.append("    titleOriginal: ").append(toIndentedString(titleOriginal)).append("\n");
    sb.append("    updatedFields: ").append(toIndentedString(updatedFields)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    wiki: ").append(toIndentedString(wiki)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addon");
    openapiFields.add("anonymous_link");
    openapiFields.add("bucket");
    openapiFields.add("citation_name");
    openapiFields.add("contributors");
    openapiFields.add("data_set");
    openapiFields.add("destination");
    openapiFields.add("figshare_title");
    openapiFields.add("file");
    openapiFields.add("filename");
    openapiFields.add("folder");
    openapiFields.add("folder_name");
    openapiFields.add("forward_url");
    openapiFields.add("github_repo");
    openapiFields.add("github_user");
    openapiFields.add("identifiers");
    openapiFields.add("institution");
    openapiFields.add("kind");
    openapiFields.add("license");
    openapiFields.add("old_page");
    openapiFields.add("page");
    openapiFields.add("page_id");
    openapiFields.add("params_node");
    openapiFields.add("params_project");
    openapiFields.add("path");
    openapiFields.add("pointer");
    openapiFields.add("preprint");
    openapiFields.add("preprint_provider");
    openapiFields.add("previous_institution");
    openapiFields.add("source");
    openapiFields.add("study");
    openapiFields.add("tag");
    openapiFields.add("tags");
    openapiFields.add("target");
    openapiFields.add("template_node");
    openapiFields.add("title_new");
    openapiFields.add("title_original");
    openapiFields.add("updated_fields");
    openapiFields.add("urls");
    openapiFields.add("version");
    openapiFields.add("wiki");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogParams is not found in the empty JSON string", LogParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addon") != null && !jsonObj.get("addon").isJsonNull()) && !jsonObj.get("addon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addon").toString()));
      }
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("citation_name") != null && !jsonObj.get("citation_name").isJsonNull()) && !jsonObj.get("citation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citation_name").toString()));
      }
      if ((jsonObj.get("contributors") != null && !jsonObj.get("contributors").isJsonNull()) && !jsonObj.get("contributors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors").toString()));
      }
      if ((jsonObj.get("data_set") != null && !jsonObj.get("data_set").isJsonNull()) && !jsonObj.get("data_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_set").toString()));
      }
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if ((jsonObj.get("figshare_title") != null && !jsonObj.get("figshare_title").isJsonNull()) && !jsonObj.get("figshare_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `figshare_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("figshare_title").toString()));
      }
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      if ((jsonObj.get("folder_name") != null && !jsonObj.get("folder_name").isJsonNull()) && !jsonObj.get("folder_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_name").toString()));
      }
      if ((jsonObj.get("forward_url") != null && !jsonObj.get("forward_url").isJsonNull()) && !jsonObj.get("forward_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forward_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forward_url").toString()));
      }
      if ((jsonObj.get("github_repo") != null && !jsonObj.get("github_repo").isJsonNull()) && !jsonObj.get("github_repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `github_repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("github_repo").toString()));
      }
      if ((jsonObj.get("github_user") != null && !jsonObj.get("github_user").isJsonNull()) && !jsonObj.get("github_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `github_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("github_user").toString()));
      }
      if ((jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) && !jsonObj.get("identifiers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }
      if ((jsonObj.get("institution") != null && !jsonObj.get("institution").isJsonNull()) && !jsonObj.get("institution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("old_page") != null && !jsonObj.get("old_page").isJsonNull()) && !jsonObj.get("old_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_page").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
      if ((jsonObj.get("page_id") != null && !jsonObj.get("page_id").isJsonNull()) && !jsonObj.get("page_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_id").toString()));
      }
      if ((jsonObj.get("params_node") != null && !jsonObj.get("params_node").isJsonNull()) && !jsonObj.get("params_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params_node").toString()));
      }
      if ((jsonObj.get("params_project") != null && !jsonObj.get("params_project").isJsonNull()) && !jsonObj.get("params_project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params_project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params_project").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("pointer") != null && !jsonObj.get("pointer").isJsonNull()) && !jsonObj.get("pointer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointer").toString()));
      }
      if ((jsonObj.get("preprint") != null && !jsonObj.get("preprint").isJsonNull()) && !jsonObj.get("preprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preprint").toString()));
      }
      if ((jsonObj.get("preprint_provider") != null && !jsonObj.get("preprint_provider").isJsonNull()) && !jsonObj.get("preprint_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preprint_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preprint_provider").toString()));
      }
      if ((jsonObj.get("previous_institution") != null && !jsonObj.get("previous_institution").isJsonNull()) && !jsonObj.get("previous_institution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_institution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_institution").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("study") != null && !jsonObj.get("study").isJsonNull()) && !jsonObj.get("study").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `study` to be a primitive type in the JSON string but got `%s`", jsonObj.get("study").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("template_node") != null && !jsonObj.get("template_node").isJsonNull()) && !jsonObj.get("template_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_node").toString()));
      }
      if ((jsonObj.get("title_new") != null && !jsonObj.get("title_new").isJsonNull()) && !jsonObj.get("title_new").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_new` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_new").toString()));
      }
      if ((jsonObj.get("title_original") != null && !jsonObj.get("title_original").isJsonNull()) && !jsonObj.get("title_original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_original").toString()));
      }
      if ((jsonObj.get("updated_fields") != null && !jsonObj.get("updated_fields").isJsonNull()) && !jsonObj.get("updated_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_fields").toString()));
      }
      if ((jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) && !jsonObj.get("urls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urls").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("wiki") != null && !jsonObj.get("wiki").isJsonNull()) && !jsonObj.get("wiki").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wiki` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wiki").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogParams.class));

       return (TypeAdapter<T>) new TypeAdapter<LogParams>() {
           @Override
           public void write(JsonWriter out, LogParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogParams
   * @throws IOException if the JSON string is invalid with respect to LogParams
   */
  public static LogParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogParams.class);
  }

  /**
   * Convert an instance of LogParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

