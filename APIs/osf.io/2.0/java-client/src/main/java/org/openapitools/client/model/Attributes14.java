/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the node addon entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes14 {
  public static final String SERIALIZED_NAME_CONFIGURED = "configured";
  @SerializedName(SERIALIZED_NAME_CONFIGURED)
  private Boolean configured;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "external_account_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folder_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_FOLDER_PATH = "folder_path";
  @SerializedName(SERIALIZED_NAME_FOLDER_PATH)
  private String folderPath;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NODE_HAS_AUTH = "node_has_auth";
  @SerializedName(SERIALIZED_NAME_NODE_HAS_AUTH)
  private Boolean nodeHasAuth;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Attributes14() {
  }

  public Attributes14(
     Boolean configured, 
     Boolean enabled, 
     String externalAccountId, 
     String folderId, 
     String folderPath, 
     String label, 
     Boolean nodeHasAuth, 
     String url
  ) {
    this();
    this.configured = configured;
    this.enabled = enabled;
    this.externalAccountId = externalAccountId;
    this.folderId = folderId;
    this.folderPath = folderPath;
    this.label = label;
    this.nodeHasAuth = nodeHasAuth;
    this.url = url;
  }

  /**
   * Whether or not this node has been configured with an addon folder.
   * @return configured
   */
  @javax.annotation.Nullable
  public Boolean getConfigured() {
    return configured;
  }



  /**
   * Whether or not this node has a NodeSettings object associated with it.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }



  /**
   * The ID of the associated node addon account, if any.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }



  /**
   * The ID of the linked folder from the addon provider.
   * @return folderId
   */
  @javax.annotation.Nullable
  public String getFolderId() {
    return folderId;
  }



  /**
   * The folder path of the linked folder from the addon provider. Google Drive specific
   * @return folderPath
   */
  @javax.annotation.Nullable
  public String getFolderPath() {
    return folderPath;
  }



  /**
   * A label specific to the addon provider.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }



  /**
   * Whether or not this node is fully authorized to use this node addon.
   * @return nodeHasAuth
   */
  @javax.annotation.Nullable
  public Boolean getNodeHasAuth() {
    return nodeHasAuth;
  }



  /**
   * An external link specific to the addon provider.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes14 attributes14 = (Attributes14) o;
    return Objects.equals(this.configured, attributes14.configured) &&
        Objects.equals(this.enabled, attributes14.enabled) &&
        Objects.equals(this.externalAccountId, attributes14.externalAccountId) &&
        Objects.equals(this.folderId, attributes14.folderId) &&
        Objects.equals(this.folderPath, attributes14.folderPath) &&
        Objects.equals(this.label, attributes14.label) &&
        Objects.equals(this.nodeHasAuth, attributes14.nodeHasAuth) &&
        Objects.equals(this.url, attributes14.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configured, enabled, externalAccountId, folderId, folderPath, label, nodeHasAuth, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes14 {\n");
    sb.append("    configured: ").append(toIndentedString(configured)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    folderPath: ").append(toIndentedString(folderPath)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    nodeHasAuth: ").append(toIndentedString(nodeHasAuth)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configured");
    openapiFields.add("enabled");
    openapiFields.add("external_account_id");
    openapiFields.add("folder_id");
    openapiFields.add("folder_path");
    openapiFields.add("label");
    openapiFields.add("node_has_auth");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes14
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes14.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes14 is not found in the empty JSON string", Attributes14.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes14.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes14` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("external_account_id") != null && !jsonObj.get("external_account_id").isJsonNull()) && !jsonObj.get("external_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_account_id").toString()));
      }
      if ((jsonObj.get("folder_id") != null && !jsonObj.get("folder_id").isJsonNull()) && !jsonObj.get("folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_id").toString()));
      }
      if ((jsonObj.get("folder_path") != null && !jsonObj.get("folder_path").isJsonNull()) && !jsonObj.get("folder_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_path").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes14.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes14' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes14> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes14.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes14>() {
           @Override
           public void write(JsonWriter out, Attributes14 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes14 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes14 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes14
   * @throws IOException if the JSON string is invalid with respect to Attributes14
   */
  public static Attributes14 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes14.class);
  }

  /**
   * Convert an instance of Attributes14 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

