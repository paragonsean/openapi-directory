/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the file entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes9 {
  public static final String SERIALIZED_NAME_CHECKOUT = "checkout";
  @SerializedName(SERIALIZED_NAME_CHECKOUT)
  private String checkout;

  public static final String SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT = "current_user_can_comment";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT)
  private Boolean currentUserCanComment;

  public static final String SERIALIZED_NAME_CURRENT_VERSION = "current_version";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  private Integer currentVersion;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETE_ALLOWED = "delete_allowed";
  @SerializedName(SERIALIZED_NAME_DELETE_ALLOWED)
  private Boolean deleteAllowed;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private Object extra;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_TOUCHED = "last_touched";
  @SerializedName(SERIALIZED_NAME_LAST_TOUCHED)
  private OffsetDateTime lastTouched;

  public static final String SERIALIZED_NAME_MATERIALIZED_PATH = "materialized_path";
  @SerializedName(SERIALIZED_NAME_MATERIALIZED_PATH)
  private String materializedPath;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Attributes9() {
  }

  public Attributes9(
     String checkout, 
     Boolean currentUserCanComment, 
     Integer currentVersion, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateModified, 
     Boolean deleteAllowed, 
     Object extra, 
     String guid, 
     String kind, 
     OffsetDateTime lastTouched, 
     String materializedPath, 
     String path, 
     String provider, 
     Integer size, 
     List<String> tags
  ) {
    this();
    this.checkout = checkout;
    this.currentUserCanComment = currentUserCanComment;
    this.currentVersion = currentVersion;
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
    this.deleteAllowed = deleteAllowed;
    this.extra = extra;
    this.guid = guid;
    this.kind = kind;
    this.lastTouched = lastTouched;
    this.materializedPath = materializedPath;
    this.path = path;
    this.provider = provider;
    this.size = size;
    this.tags = tags;
  }

  /**
   * SOON TO BE DEPRECATED, see relationships checkout.
   * @return checkout
   */
  @javax.annotation.Nullable
  public String getCheckout() {
    return checkout;
  }



  /**
   * Whether or not the current user is allowed to post comments.
   * @return currentUserCanComment
   */
  @javax.annotation.Nullable
  public Boolean getCurrentUserCanComment() {
    return currentUserCanComment;
  }



  /**
   * Version number of the file.
   * @return currentVersion
   */
  @javax.annotation.Nullable
  public Integer getCurrentVersion() {
    return currentVersion;
  }



  /**
   * The time at which the file was created, as an iso8601 formatted timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The time at which the file was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  /**
   * Whether or not deletion of the file is allowed.
   * @return deleteAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDeleteAllowed() {
    return deleteAllowed;
  }



  /**
   * Extra information, contains &#x60;hashes&#x60; (&#x60;sha256&#x60;, &#x60;md5&#x60;) and &#x60;downloads&#x60; count.
   * @return extra
   */
  @javax.annotation.Nullable
  public Object getExtra() {
    return extra;
  }



  /**
   * Global unique identifier (GUID) for this file (if one has been assigned).
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  /**
   * The kind of files object it is (&#x60;file&#x60; or &#x60;folder&#x60;).
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  /**
   * The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files).
   * @return lastTouched
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastTouched() {
    return lastTouched;
  }



  /**
   * Unix-style path to the file relative to the provider root.
   * @return materializedPath
   */
  @javax.annotation.Nullable
  public String getMaterializedPath() {
    return materializedPath;
  }



  public Attributes9 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the file
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * The unique identifier for this file entity for this project and storage provider.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }



  /**
   * The id of the file provider (e.g., &#x60;osfstorage&#x60;)
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }



  /**
   * Size of the file in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }



  /**
   * A list of strings that describe this file, as entered by project contributors.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes9 attributes9 = (Attributes9) o;
    return Objects.equals(this.checkout, attributes9.checkout) &&
        Objects.equals(this.currentUserCanComment, attributes9.currentUserCanComment) &&
        Objects.equals(this.currentVersion, attributes9.currentVersion) &&
        Objects.equals(this.dateCreated, attributes9.dateCreated) &&
        Objects.equals(this.dateModified, attributes9.dateModified) &&
        Objects.equals(this.deleteAllowed, attributes9.deleteAllowed) &&
        Objects.equals(this.extra, attributes9.extra) &&
        Objects.equals(this.guid, attributes9.guid) &&
        Objects.equals(this.kind, attributes9.kind) &&
        Objects.equals(this.lastTouched, attributes9.lastTouched) &&
        Objects.equals(this.materializedPath, attributes9.materializedPath) &&
        Objects.equals(this.name, attributes9.name) &&
        Objects.equals(this.path, attributes9.path) &&
        Objects.equals(this.provider, attributes9.provider) &&
        Objects.equals(this.size, attributes9.size) &&
        Objects.equals(this.tags, attributes9.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkout, currentUserCanComment, currentVersion, dateCreated, dateModified, deleteAllowed, extra, guid, kind, lastTouched, materializedPath, name, path, provider, size, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes9 {\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("    currentUserCanComment: ").append(toIndentedString(currentUserCanComment)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleteAllowed: ").append(toIndentedString(deleteAllowed)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastTouched: ").append(toIndentedString(lastTouched)).append("\n");
    sb.append("    materializedPath: ").append(toIndentedString(materializedPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkout");
    openapiFields.add("current_user_can_comment");
    openapiFields.add("current_version");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("delete_allowed");
    openapiFields.add("extra");
    openapiFields.add("guid");
    openapiFields.add("kind");
    openapiFields.add("last_touched");
    openapiFields.add("materialized_path");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("provider");
    openapiFields.add("size");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes9
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes9.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes9 is not found in the empty JSON string", Attributes9.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes9.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes9` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checkout") != null && !jsonObj.get("checkout").isJsonNull()) && !jsonObj.get("checkout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkout").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("materialized_path") != null && !jsonObj.get("materialized_path").isJsonNull()) && !jsonObj.get("materialized_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `materialized_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("materialized_path").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes9.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes9' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes9> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes9.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes9>() {
           @Override
           public void write(JsonWriter out, Attributes9 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes9 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes9 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes9
   * @throws IOException if the JSON string is invalid with respect to Attributes9
   */
  public static Attributes9 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes9.class);
  }

  /**
   * Convert an instance of Attributes9 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

