/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes26
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes26 {
  public static final String SERIALIZED_NAME_AUTO = "auto";
  @SerializedName(SERIALIZED_NAME_AUTO)
  private Boolean auto;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  /**
   * The name of the state of the Schema Response prior to the creation of the action.
   */
  @JsonAdapter(FromStateEnum.Adapter.class)
  public enum FromStateEnum {
    INITIAL("initial"),
    
    IN_PROGRESS("in_progress"),
    
    APPROVED("approved"),
    
    PENDING_MODERATION("pending_moderation");

    private String value;

    FromStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FromStateEnum fromValue(String value) {
      for (FromStateEnum b : FromStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FromStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FromStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FromStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FromStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FromStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FROM_STATE = "from_state";
  @SerializedName(SERIALIZED_NAME_FROM_STATE)
  private FromStateEnum fromState;

  /**
   * The name of the state of the Schema Response after the creation of the action
   */
  @JsonAdapter(ToStateEnum.Adapter.class)
  public enum ToStateEnum {
    IN_PROGRESS("in_progress"),
    
    APPROVED("approved"),
    
    PENDING_MODERATION("pending_moderation");

    private String value;

    ToStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToStateEnum fromValue(String value) {
      for (ToStateEnum b : ToStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ToStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TO_STATE = "to_state";
  @SerializedName(SERIALIZED_NAME_TO_STATE)
  private ToStateEnum toState;

  /**
   * The name of the trigger that caused the action.
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    SUBMIT("submit"),
    
    APPROVE("approve"),
    
    ACCEPT("accept"),
    
    ADMIN_REJECT("admin_reject"),
    
    MODERATOR_REJECT("moderator_reject");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public Attributes26() {
  }

  public Attributes26(
     Boolean auto, 
     String comment, 
     String dateCreated, 
     Boolean visible
  ) {
    this();
    this.auto = auto;
    this.comment = comment;
    this.dateCreated = dateCreated;
    this.visible = visible;
  }

  /**
   * Bool of representing whether a user created the action.
   * @return auto
   */
  @javax.annotation.Nullable
  public Boolean getAuto() {
    return auto;
  }



  /**
   * A comment made explaining the reasoning of the action.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }



  /**
   * The date the action was created.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }



  public Attributes26 fromState(FromStateEnum fromState) {
    this.fromState = fromState;
    return this;
  }

  /**
   * The name of the state of the Schema Response prior to the creation of the action.
   * @return fromState
   */
  @javax.annotation.Nullable
  public FromStateEnum getFromState() {
    return fromState;
  }

  public void setFromState(FromStateEnum fromState) {
    this.fromState = fromState;
  }


  public Attributes26 toState(ToStateEnum toState) {
    this.toState = toState;
    return this;
  }

  /**
   * The name of the state of the Schema Response after the creation of the action
   * @return toState
   */
  @javax.annotation.Nullable
  public ToStateEnum getToState() {
    return toState;
  }

  public void setToState(ToStateEnum toState) {
    this.toState = toState;
  }


  public Attributes26 trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * The name of the trigger that caused the action.
   * @return trigger
   */
  @javax.annotation.Nullable
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  /**
   * Bool of representing whether the action is visible.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes26 attributes26 = (Attributes26) o;
    return Objects.equals(this.auto, attributes26.auto) &&
        Objects.equals(this.comment, attributes26.comment) &&
        Objects.equals(this.dateCreated, attributes26.dateCreated) &&
        Objects.equals(this.fromState, attributes26.fromState) &&
        Objects.equals(this.toState, attributes26.toState) &&
        Objects.equals(this.trigger, attributes26.trigger) &&
        Objects.equals(this.visible, attributes26.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auto, comment, dateCreated, fromState, toState, trigger, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes26 {\n");
    sb.append("    auto: ").append(toIndentedString(auto)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    fromState: ").append(toIndentedString(fromState)).append("\n");
    sb.append("    toState: ").append(toIndentedString(toState)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto");
    openapiFields.add("comment");
    openapiFields.add("date_created");
    openapiFields.add("from_state");
    openapiFields.add("to_state");
    openapiFields.add("trigger");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes26
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes26.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes26 is not found in the empty JSON string", Attributes26.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes26.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes26` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("date_created") != null && !jsonObj.get("date_created").isJsonNull()) && !jsonObj.get("date_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_created").toString()));
      }
      if ((jsonObj.get("from_state") != null && !jsonObj.get("from_state").isJsonNull()) && !jsonObj.get("from_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_state").toString()));
      }
      // validate the optional field `from_state`
      if (jsonObj.get("from_state") != null && !jsonObj.get("from_state").isJsonNull()) {
        FromStateEnum.validateJsonElement(jsonObj.get("from_state"));
      }
      if ((jsonObj.get("to_state") != null && !jsonObj.get("to_state").isJsonNull()) && !jsonObj.get("to_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_state").toString()));
      }
      // validate the optional field `to_state`
      if (jsonObj.get("to_state") != null && !jsonObj.get("to_state").isJsonNull()) {
        ToStateEnum.validateJsonElement(jsonObj.get("to_state"));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        TriggerEnum.validateJsonElement(jsonObj.get("trigger"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes26.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes26' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes26> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes26.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes26>() {
           @Override
           public void write(JsonWriter out, Attributes26 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes26 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes26 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes26
   * @throws IOException if the JSON string is invalid with respect to Attributes26
   */
  public static Attributes26 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes26.class);
  }

  /**
   * Convert an instance of Attributes26 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

