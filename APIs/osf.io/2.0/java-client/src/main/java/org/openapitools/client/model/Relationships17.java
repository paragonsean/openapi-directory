/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Links to other entities or entity collections that have a relationship to the file entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relationships17 {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private String actions;

  public static final String SERIALIZED_NAME_INITIATED_BY = "initiated_by";
  @SerializedName(SERIALIZED_NAME_INITIATED_BY)
  private String initiatedBy;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private String registration;

  public static final String SERIALIZED_NAME_REGISTRATION_SCHEMA = "registration_schema";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_SCHEMA)
  private String registrationSchema;

  public Relationships17() {
  }

  public Relationships17 actions(String actions) {
    this.actions = actions;
    return this;
  }

  /**
   * A link to the Registration Schema Actions endpoint for this Schema Response.
   * @return actions
   */
  @javax.annotation.Nullable
  public String getActions() {
    return actions;
  }

  public void setActions(String actions) {
    this.actions = actions;
  }


  public Relationships17 initiatedBy(String initiatedBy) {
    this.initiatedBy = initiatedBy;
    return this;
  }

  /**
   * A link to the User who initiated the creation of the Schema Response.
   * @return initiatedBy
   */
  @javax.annotation.Nullable
  public String getInitiatedBy() {
    return initiatedBy;
  }

  public void setInitiatedBy(String initiatedBy) {
    this.initiatedBy = initiatedBy;
  }


  public Relationships17 registration(String registration) {
    this.registration = registration;
    return this;
  }

  /**
   * A link to the Registration for this Schema Response.
   * @return registration
   */
  @javax.annotation.Nullable
  public String getRegistration() {
    return registration;
  }

  public void setRegistration(String registration) {
    this.registration = registration;
  }


  public Relationships17 registrationSchema(String registrationSchema) {
    this.registrationSchema = registrationSchema;
    return this;
  }

  /**
   * A link to the Registration Schema for this Schema Response.
   * @return registrationSchema
   */
  @javax.annotation.Nullable
  public String getRegistrationSchema() {
    return registrationSchema;
  }

  public void setRegistrationSchema(String registrationSchema) {
    this.registrationSchema = registrationSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships17 relationships17 = (Relationships17) o;
    return Objects.equals(this.actions, relationships17.actions) &&
        Objects.equals(this.initiatedBy, relationships17.initiatedBy) &&
        Objects.equals(this.registration, relationships17.registration) &&
        Objects.equals(this.registrationSchema, relationships17.registrationSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, initiatedBy, registration, registrationSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships17 {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    initiatedBy: ").append(toIndentedString(initiatedBy)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    registrationSchema: ").append(toIndentedString(registrationSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("initiated_by");
    openapiFields.add("registration");
    openapiFields.add("registration_schema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relationships17
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relationships17.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relationships17 is not found in the empty JSON string", Relationships17.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relationships17.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relationships17` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) && !jsonObj.get("actions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      if ((jsonObj.get("initiated_by") != null && !jsonObj.get("initiated_by").isJsonNull()) && !jsonObj.get("initiated_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiated_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiated_by").toString()));
      }
      if ((jsonObj.get("registration") != null && !jsonObj.get("registration").isJsonNull()) && !jsonObj.get("registration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration").toString()));
      }
      if ((jsonObj.get("registration_schema") != null && !jsonObj.get("registration_schema").isJsonNull()) && !jsonObj.get("registration_schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_schema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relationships17.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relationships17' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relationships17> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relationships17.class));

       return (TypeAdapter<T>) new TypeAdapter<Relationships17>() {
           @Override
           public void write(JsonWriter out, Relationships17 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relationships17 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relationships17 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relationships17
   * @throws IOException if the JSON string is invalid with respect to Relationships17
   */
  public static Relationships17 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relationships17.class);
  }

  /**
   * Convert an instance of Relationships17 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

