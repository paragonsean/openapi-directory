/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Log;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for logsActions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsActionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsActionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logsActionsCall(_callback);

    }

    /**
     * Actions
     *  A log can have one of many actions. The complete list of loggable actions (in the format {identifier}: {description}) is as follows: * &#x60;project_created&#x60;: A Node is created * &#x60;project_registered&#x60;: A Node is registered * &#x60;project_deleted&#x60;: A Node is deleted * &#x60;created_from&#x60;: A Node is created using an existing Node as a template * &#x60;pointer_created&#x60;: A Pointer is created * &#x60;pointer_forked&#x60;: A Pointer is forked * &#x60;pointer_removed&#x60;: A Pointer is removed * &#x60;node_removed&#x60;: A component is deleted * &#x60;node_forked&#x60;: A Node is forked --- * &#x60;made_public&#x60;: A Node is made public * &#x60;made_private&#x60;: A Node is made private * &#x60;tag_added&#x60;: A tag is added to a Node * &#x60;tag_removed&#x60;: A tag is removed from a Node * &#x60;edit_title&#x60;: A Node&#39;s title is changed * &#x60;edit_description&#x60;: A Node&#39;s description is changed * &#x60;updated_fields&#x60;: One or more of a Node&#39;s fields are changed * &#x60;external_ids_added&#x60;: An external identifier is added to a Node (e.g. DOI, ARK) * &#x60;view_only_link_added&#x60;: A view-only link was added to a Node * &#x60;view_only_link_removed&#x60;:  A view-only link was removed from a Node --- * &#x60;contributor_added&#x60;: A Contributor is added to a Node * &#x60;contributor_removed&#x60;: A Contributor is removed from a Node * &#x60;contributors_reordered&#x60;: A Contributor&#39;s position in a Node&#39;s bibliography is changed * &#x60;permissions_updated&#x60;: A Contributor&#x60;s permissions on a Node are changed * &#x60;made_contributor_visible&#x60;: A Contributor is made bibliographically visible on a Node * &#x60;made_contributor_invisible&#x60;: A Contributor is made bibliographically invisible on a Node --- * &#x60;wiki_updated&#x60;: A Node&#39;s wiki is updated * &#x60;wiki_deleted&#x60;: A Node&#39;s wiki is deleted * &#x60;wiki_renamed&#x60;: A Node&#39;s wiki is renamed * &#x60;made_wiki_public&#x60;: A Node&#39;s wiki is made public * &#x60;made_wiki_private&#x60;: A Node&#39;s wiki is made private --- * &#x60;addon_added&#x60;: An add-on is linked to a Node * &#x60;addon_removed&#x60;: An add-on is unlinked from a Node * &#x60;addon_file_moved&#x60;: A File in a Node&#39;s linked add-on is moved * &#x60;addon_file_copied&#x60;: A File in a Node&#39;s linked add-on is copied * &#x60;addon_file_renamed&#x60;: A File in a Node&#39;s linked add-on is renamed * &#x60;node_authorized&#x60;: An addon is authorized for a project * &#x60;node_deauthorized&#x60;: An addon is deauthorized for a project * &#x60;folder_created&#x60;: A Folder is created in a Node&#39;s linked add-on * &#x60;file_added&#x60;: A File is added to a Node&#39;s linked add-on * &#x60;file_updated&#x60;: A File is updated on a Node&#39;s linked add-on * &#x60;file_removed&#x60;: A File is removed from a Node&#39;s linked add-on * &#x60;file_restored&#x60;: A File is restored in a Node&#39;s linked add-on --- * &#x60;comment_added&#x60;: A Comment is added to some item * &#x60;comment_removed&#x60;: A Comment is removed from some item * &#x60;comment_updated&#x60;: A Comment is updated on some item --- * &#x60;embargo_initiated&#x60;: An embargoed Registration is proposed on a Node * &#x60;embargo_approved&#x60;: A proposed Embargo of a Node is approved * &#x60;embargo_cancelled&#x60;: A proposed Embargo of a Node is cancelled * &#x60;embargo_completed&#x60;: A proposed Embargo of a Node is completed * &#x60;retraction_initiated&#x60;: A Withdrawal of a Registration is proposed * &#x60;retraction_approved&#x60;: A Withdrawal of a Registration is approved * &#x60;retraction_cancelled&#x60;: A Withdrawal of a Registration is cancelled * &#x60;registration_initiated&#x60;: A Registration of a Node is proposed * &#x60;registration_approved&#x60;: A proposed Registration is approved * &#x60;registration_cancelled&#x60;: A proposed Registration is cancelled
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void logsActions() throws ApiException {
        logsActionsWithHttpInfo();
    }

    /**
     * Actions
     *  A log can have one of many actions. The complete list of loggable actions (in the format {identifier}: {description}) is as follows: * &#x60;project_created&#x60;: A Node is created * &#x60;project_registered&#x60;: A Node is registered * &#x60;project_deleted&#x60;: A Node is deleted * &#x60;created_from&#x60;: A Node is created using an existing Node as a template * &#x60;pointer_created&#x60;: A Pointer is created * &#x60;pointer_forked&#x60;: A Pointer is forked * &#x60;pointer_removed&#x60;: A Pointer is removed * &#x60;node_removed&#x60;: A component is deleted * &#x60;node_forked&#x60;: A Node is forked --- * &#x60;made_public&#x60;: A Node is made public * &#x60;made_private&#x60;: A Node is made private * &#x60;tag_added&#x60;: A tag is added to a Node * &#x60;tag_removed&#x60;: A tag is removed from a Node * &#x60;edit_title&#x60;: A Node&#39;s title is changed * &#x60;edit_description&#x60;: A Node&#39;s description is changed * &#x60;updated_fields&#x60;: One or more of a Node&#39;s fields are changed * &#x60;external_ids_added&#x60;: An external identifier is added to a Node (e.g. DOI, ARK) * &#x60;view_only_link_added&#x60;: A view-only link was added to a Node * &#x60;view_only_link_removed&#x60;:  A view-only link was removed from a Node --- * &#x60;contributor_added&#x60;: A Contributor is added to a Node * &#x60;contributor_removed&#x60;: A Contributor is removed from a Node * &#x60;contributors_reordered&#x60;: A Contributor&#39;s position in a Node&#39;s bibliography is changed * &#x60;permissions_updated&#x60;: A Contributor&#x60;s permissions on a Node are changed * &#x60;made_contributor_visible&#x60;: A Contributor is made bibliographically visible on a Node * &#x60;made_contributor_invisible&#x60;: A Contributor is made bibliographically invisible on a Node --- * &#x60;wiki_updated&#x60;: A Node&#39;s wiki is updated * &#x60;wiki_deleted&#x60;: A Node&#39;s wiki is deleted * &#x60;wiki_renamed&#x60;: A Node&#39;s wiki is renamed * &#x60;made_wiki_public&#x60;: A Node&#39;s wiki is made public * &#x60;made_wiki_private&#x60;: A Node&#39;s wiki is made private --- * &#x60;addon_added&#x60;: An add-on is linked to a Node * &#x60;addon_removed&#x60;: An add-on is unlinked from a Node * &#x60;addon_file_moved&#x60;: A File in a Node&#39;s linked add-on is moved * &#x60;addon_file_copied&#x60;: A File in a Node&#39;s linked add-on is copied * &#x60;addon_file_renamed&#x60;: A File in a Node&#39;s linked add-on is renamed * &#x60;node_authorized&#x60;: An addon is authorized for a project * &#x60;node_deauthorized&#x60;: An addon is deauthorized for a project * &#x60;folder_created&#x60;: A Folder is created in a Node&#39;s linked add-on * &#x60;file_added&#x60;: A File is added to a Node&#39;s linked add-on * &#x60;file_updated&#x60;: A File is updated on a Node&#39;s linked add-on * &#x60;file_removed&#x60;: A File is removed from a Node&#39;s linked add-on * &#x60;file_restored&#x60;: A File is restored in a Node&#39;s linked add-on --- * &#x60;comment_added&#x60;: A Comment is added to some item * &#x60;comment_removed&#x60;: A Comment is removed from some item * &#x60;comment_updated&#x60;: A Comment is updated on some item --- * &#x60;embargo_initiated&#x60;: An embargoed Registration is proposed on a Node * &#x60;embargo_approved&#x60;: A proposed Embargo of a Node is approved * &#x60;embargo_cancelled&#x60;: A proposed Embargo of a Node is cancelled * &#x60;embargo_completed&#x60;: A proposed Embargo of a Node is completed * &#x60;retraction_initiated&#x60;: A Withdrawal of a Registration is proposed * &#x60;retraction_approved&#x60;: A Withdrawal of a Registration is approved * &#x60;retraction_cancelled&#x60;: A Withdrawal of a Registration is cancelled * &#x60;registration_initiated&#x60;: A Registration of a Node is proposed * &#x60;registration_approved&#x60;: A proposed Registration is approved * &#x60;registration_cancelled&#x60;: A proposed Registration is cancelled
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsActionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logsActionsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Actions (asynchronously)
     *  A log can have one of many actions. The complete list of loggable actions (in the format {identifier}: {description}) is as follows: * &#x60;project_created&#x60;: A Node is created * &#x60;project_registered&#x60;: A Node is registered * &#x60;project_deleted&#x60;: A Node is deleted * &#x60;created_from&#x60;: A Node is created using an existing Node as a template * &#x60;pointer_created&#x60;: A Pointer is created * &#x60;pointer_forked&#x60;: A Pointer is forked * &#x60;pointer_removed&#x60;: A Pointer is removed * &#x60;node_removed&#x60;: A component is deleted * &#x60;node_forked&#x60;: A Node is forked --- * &#x60;made_public&#x60;: A Node is made public * &#x60;made_private&#x60;: A Node is made private * &#x60;tag_added&#x60;: A tag is added to a Node * &#x60;tag_removed&#x60;: A tag is removed from a Node * &#x60;edit_title&#x60;: A Node&#39;s title is changed * &#x60;edit_description&#x60;: A Node&#39;s description is changed * &#x60;updated_fields&#x60;: One or more of a Node&#39;s fields are changed * &#x60;external_ids_added&#x60;: An external identifier is added to a Node (e.g. DOI, ARK) * &#x60;view_only_link_added&#x60;: A view-only link was added to a Node * &#x60;view_only_link_removed&#x60;:  A view-only link was removed from a Node --- * &#x60;contributor_added&#x60;: A Contributor is added to a Node * &#x60;contributor_removed&#x60;: A Contributor is removed from a Node * &#x60;contributors_reordered&#x60;: A Contributor&#39;s position in a Node&#39;s bibliography is changed * &#x60;permissions_updated&#x60;: A Contributor&#x60;s permissions on a Node are changed * &#x60;made_contributor_visible&#x60;: A Contributor is made bibliographically visible on a Node * &#x60;made_contributor_invisible&#x60;: A Contributor is made bibliographically invisible on a Node --- * &#x60;wiki_updated&#x60;: A Node&#39;s wiki is updated * &#x60;wiki_deleted&#x60;: A Node&#39;s wiki is deleted * &#x60;wiki_renamed&#x60;: A Node&#39;s wiki is renamed * &#x60;made_wiki_public&#x60;: A Node&#39;s wiki is made public * &#x60;made_wiki_private&#x60;: A Node&#39;s wiki is made private --- * &#x60;addon_added&#x60;: An add-on is linked to a Node * &#x60;addon_removed&#x60;: An add-on is unlinked from a Node * &#x60;addon_file_moved&#x60;: A File in a Node&#39;s linked add-on is moved * &#x60;addon_file_copied&#x60;: A File in a Node&#39;s linked add-on is copied * &#x60;addon_file_renamed&#x60;: A File in a Node&#39;s linked add-on is renamed * &#x60;node_authorized&#x60;: An addon is authorized for a project * &#x60;node_deauthorized&#x60;: An addon is deauthorized for a project * &#x60;folder_created&#x60;: A Folder is created in a Node&#39;s linked add-on * &#x60;file_added&#x60;: A File is added to a Node&#39;s linked add-on * &#x60;file_updated&#x60;: A File is updated on a Node&#39;s linked add-on * &#x60;file_removed&#x60;: A File is removed from a Node&#39;s linked add-on * &#x60;file_restored&#x60;: A File is restored in a Node&#39;s linked add-on --- * &#x60;comment_added&#x60;: A Comment is added to some item * &#x60;comment_removed&#x60;: A Comment is removed from some item * &#x60;comment_updated&#x60;: A Comment is updated on some item --- * &#x60;embargo_initiated&#x60;: An embargoed Registration is proposed on a Node * &#x60;embargo_approved&#x60;: A proposed Embargo of a Node is approved * &#x60;embargo_cancelled&#x60;: A proposed Embargo of a Node is cancelled * &#x60;embargo_completed&#x60;: A proposed Embargo of a Node is completed * &#x60;retraction_initiated&#x60;: A Withdrawal of a Registration is proposed * &#x60;retraction_approved&#x60;: A Withdrawal of a Registration is approved * &#x60;retraction_cancelled&#x60;: A Withdrawal of a Registration is cancelled * &#x60;registration_initiated&#x60;: A Registration of a Node is proposed * &#x60;registration_approved&#x60;: A proposed Registration is approved * &#x60;registration_cancelled&#x60;: A proposed Registration is cancelled
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsActionsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsActionsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsRead
     * @param logId The unique identifier of the log you wish to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReadCall(String logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{log_id}/"
            .replace("{" + "log_id" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsReadValidateBeforeCall(String logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling logsRead(Async)");
        }

        return logsReadCall(logId, _callback);

    }

    /**
     * Retrieve a log
     * Retrieves the details of a log. A log is permanent immutable record of a node&#39;s history. A log is created when a user performs one of many actions. See the [actions](#Logs_logs_actions) section for more details. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested log, if the request was successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param logId The unique identifier of the log you wish to retrieve. (required)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Log logsRead(String logId) throws ApiException {
        ApiResponse<Log> localVarResp = logsReadWithHttpInfo(logId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a log
     * Retrieves the details of a log. A log is permanent immutable record of a node&#39;s history. A log is created when a user performs one of many actions. See the [actions](#Logs_logs_actions) section for more details. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested log, if the request was successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param logId The unique identifier of the log you wish to retrieve. (required)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> logsReadWithHttpInfo(String logId) throws ApiException {
        okhttp3.Call localVarCall = logsReadValidateBeforeCall(logId, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a log (asynchronously)
     * Retrieves the details of a log. A log is permanent immutable record of a node&#39;s history. A log is created when a user performs one of many actions. See the [actions](#Logs_logs_actions) section for more details. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested log, if the request was successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param logId The unique identifier of the log you wish to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsReadAsync(String logId, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsReadValidateBeforeCall(logId, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
