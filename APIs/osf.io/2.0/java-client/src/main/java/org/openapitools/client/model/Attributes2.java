/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the collection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes2 {
  public static final String SERIALIZED_NAME_BOOKMARKS = "bookmarks";
  @SerializedName(SERIALIZED_NAME_BOOKMARKS)
  private Boolean bookmarks;

  public static final String SERIALIZED_NAME_COLLECTED_TYPE_CHOICES = "collected_type_choices";
  @SerializedName(SERIALIZED_NAME_COLLECTED_TYPE_CHOICES)
  private List<String> collectedTypeChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_IS_PROMOTED = "is_promoted";
  @SerializedName(SERIALIZED_NAME_IS_PROMOTED)
  private Boolean isPromoted;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_ISSUE_CHOICES = "issue_choices";
  @SerializedName(SERIALIZED_NAME_ISSUE_CHOICES)
  private List<String> issueChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRAM_AREA_CHOICES = "program_area_choices";
  @SerializedName(SERIALIZED_NAME_PROGRAM_AREA_CHOICES)
  private List<String> programAreaChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_CHOICES = "status_choices";
  @SerializedName(SERIALIZED_NAME_STATUS_CHOICES)
  private List<String> statusChoices = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VOLUME_CHOICES = "volume_choices";
  @SerializedName(SERIALIZED_NAME_VOLUME_CHOICES)
  private List<String> volumeChoices = new ArrayList<>();

  public Attributes2() {
  }

  public Attributes2(
     Boolean bookmarks, 
     List<String> collectedTypeChoices, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateModified, 
     Boolean isPromoted, 
     Boolean isPublic, 
     List<String> issueChoices, 
     List<String> programAreaChoices, 
     List<String> statusChoices, 
     List<String> volumeChoices
  ) {
    this();
    this.bookmarks = bookmarks;
    this.collectedTypeChoices = collectedTypeChoices;
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
    this.isPromoted = isPromoted;
    this.isPublic = isPublic;
    this.issueChoices = issueChoices;
    this.programAreaChoices = programAreaChoices;
    this.statusChoices = statusChoices;
    this.volumeChoices = volumeChoices;
  }

  /**
   * This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection.
   * @return bookmarks
   */
  @javax.annotation.Nullable
  public Boolean getBookmarks() {
    return bookmarks;
  }



  /**
   * A list of the acceptable entity &#x60;collected_type&#x60; metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection.
   * @return collectedTypeChoices
   */
  @javax.annotation.Nullable
  public List<String> getCollectedTypeChoices() {
    return collectedTypeChoices;
  }



  /**
   * The time at which the collection was created, as an iso8601 formatted timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The time at which the collection was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  /**
   * ???
   * @return isPromoted
   */
  @javax.annotation.Nullable
  public Boolean getIsPromoted() {
    return isPromoted;
  }



  /**
   * This attribute indicates if a collection is viewable to a user with no special permissions.
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }



  /**
   * A list of the acceptable entity &#x60;issue&#x60; metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection.
   * @return issueChoices
   */
  @javax.annotation.Nullable
  public List<String> getIssueChoices() {
    return issueChoices;
  }



  /**
   * A list of the acceptable entity &#x60;program_area&#x60; metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of .
   * @return programAreaChoices
   */
  @javax.annotation.Nullable
  public List<String> getProgramAreaChoices() {
    return programAreaChoices;
  }



  /**
   * A list of the acceptable entity &#x60;status&#x60; metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection.
   * @return statusChoices
   */
  @javax.annotation.Nullable
  public List<String> getStatusChoices() {
    return statusChoices;
  }



  public Attributes2 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the collection.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  /**
   * A list of the acceptable entity &#x60;volume&#x60; metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection.
   * @return volumeChoices
   */
  @javax.annotation.Nullable
  public List<String> getVolumeChoices() {
    return volumeChoices;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes2 attributes2 = (Attributes2) o;
    return Objects.equals(this.bookmarks, attributes2.bookmarks) &&
        Objects.equals(this.collectedTypeChoices, attributes2.collectedTypeChoices) &&
        Objects.equals(this.dateCreated, attributes2.dateCreated) &&
        Objects.equals(this.dateModified, attributes2.dateModified) &&
        Objects.equals(this.isPromoted, attributes2.isPromoted) &&
        Objects.equals(this.isPublic, attributes2.isPublic) &&
        Objects.equals(this.issueChoices, attributes2.issueChoices) &&
        Objects.equals(this.programAreaChoices, attributes2.programAreaChoices) &&
        Objects.equals(this.statusChoices, attributes2.statusChoices) &&
        Objects.equals(this.title, attributes2.title) &&
        Objects.equals(this.volumeChoices, attributes2.volumeChoices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookmarks, collectedTypeChoices, dateCreated, dateModified, isPromoted, isPublic, issueChoices, programAreaChoices, statusChoices, title, volumeChoices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes2 {\n");
    sb.append("    bookmarks: ").append(toIndentedString(bookmarks)).append("\n");
    sb.append("    collectedTypeChoices: ").append(toIndentedString(collectedTypeChoices)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    isPromoted: ").append(toIndentedString(isPromoted)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    issueChoices: ").append(toIndentedString(issueChoices)).append("\n");
    sb.append("    programAreaChoices: ").append(toIndentedString(programAreaChoices)).append("\n");
    sb.append("    statusChoices: ").append(toIndentedString(statusChoices)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    volumeChoices: ").append(toIndentedString(volumeChoices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookmarks");
    openapiFields.add("collected_type_choices");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("is_promoted");
    openapiFields.add("is_public");
    openapiFields.add("issue_choices");
    openapiFields.add("program_area_choices");
    openapiFields.add("status_choices");
    openapiFields.add("title");
    openapiFields.add("volume_choices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes2 is not found in the empty JSON string", Attributes2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("collected_type_choices") != null && !jsonObj.get("collected_type_choices").isJsonNull() && !jsonObj.get("collected_type_choices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collected_type_choices` to be an array in the JSON string but got `%s`", jsonObj.get("collected_type_choices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("issue_choices") != null && !jsonObj.get("issue_choices").isJsonNull() && !jsonObj.get("issue_choices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_choices` to be an array in the JSON string but got `%s`", jsonObj.get("issue_choices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("program_area_choices") != null && !jsonObj.get("program_area_choices").isJsonNull() && !jsonObj.get("program_area_choices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `program_area_choices` to be an array in the JSON string but got `%s`", jsonObj.get("program_area_choices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status_choices") != null && !jsonObj.get("status_choices").isJsonNull() && !jsonObj.get("status_choices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_choices` to be an array in the JSON string but got `%s`", jsonObj.get("status_choices").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("volume_choices") != null && !jsonObj.get("volume_choices").isJsonNull() && !jsonObj.get("volume_choices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume_choices` to be an array in the JSON string but got `%s`", jsonObj.get("volume_choices").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes2.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes2>() {
           @Override
           public void write(JsonWriter out, Attributes2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes2
   * @throws IOException if the JSON string is invalid with respect to Attributes2
   */
  public static Attributes2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes2.class);
  }

  /**
   * Convert an instance of Attributes2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

