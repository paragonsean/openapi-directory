/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URLs to other entities or entity collections that have a relationship to the preprint entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relationships11 {
  public static final String SERIALIZED_NAME_BIBLIOGRAPHIC_CONTRIBUTORS = "bibliographic_contributors";
  @SerializedName(SERIALIZED_NAME_BIBLIOGRAPHIC_CONTRIBUTORS)
  private String bibliographicContributors;

  public static final String SERIALIZED_NAME_CITATION = "citation";
  @SerializedName(SERIALIZED_NAME_CITATION)
  private String citation;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private String identifiers;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private String node;

  public static final String SERIALIZED_NAME_PRIMARY_FILE = "primary_file";
  @SerializedName(SERIALIZED_NAME_PRIMARY_FILE)
  private String primaryFile;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public Relationships11() {
  }

  public Relationships11(
     String citation, 
     String identifiers
  ) {
    this();
    this.citation = citation;
    this.identifiers = identifiers;
  }

  public Relationships11 bibliographicContributors(String bibliographicContributors) {
    this.bibliographicContributors = bibliographicContributors;
    return this;
  }

  /**
   * A relationship to the bibliographic contributors that are listed as contributing to this preprint.
   * @return bibliographicContributors
   */
  @javax.annotation.Nullable
  public String getBibliographicContributors() {
    return bibliographicContributors;
  }

  public void setBibliographicContributors(String bibliographicContributors) {
    this.bibliographicContributors = bibliographicContributors;
  }


  /**
   * A relationship to the citation of the preprint.
   * @return citation
   */
  @javax.annotation.Nullable
  public String getCitation() {
    return citation;
  }



  /**
   * A relationship to the identifiers associated with the preprint.
   * @return identifiers
   */
  @javax.annotation.Nullable
  public String getIdentifiers() {
    return identifiers;
  }



  public Relationships11 license(String license) {
    this.license = license;
    return this;
  }

  /**
   * A relationship to the license that has been applied to the preprint.
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public Relationships11 node(String node) {
    this.node = node;
    return this;
  }

  /**
   * A relationship to the node that was created for the preprint, or from which the preprint was created.
   * @return node
   */
  @javax.annotation.Nonnull
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }


  public Relationships11 primaryFile(String primaryFile) {
    this.primaryFile = primaryFile;
    return this;
  }

  /**
   * A relationship to the file that is designated as the preprint&#39;s primary file, or the manuscript of the preprint.
   * @return primaryFile
   */
  @javax.annotation.Nonnull
  public String getPrimaryFile() {
    return primaryFile;
  }

  public void setPrimaryFile(String primaryFile) {
    this.primaryFile = primaryFile;
  }


  public Relationships11 provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.).
   * @return provider
   */
  @javax.annotation.Nonnull
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships11 relationships11 = (Relationships11) o;
    return Objects.equals(this.bibliographicContributors, relationships11.bibliographicContributors) &&
        Objects.equals(this.citation, relationships11.citation) &&
        Objects.equals(this.identifiers, relationships11.identifiers) &&
        Objects.equals(this.license, relationships11.license) &&
        Objects.equals(this.node, relationships11.node) &&
        Objects.equals(this.primaryFile, relationships11.primaryFile) &&
        Objects.equals(this.provider, relationships11.provider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bibliographicContributors, citation, identifiers, license, node, primaryFile, provider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships11 {\n");
    sb.append("    bibliographicContributors: ").append(toIndentedString(bibliographicContributors)).append("\n");
    sb.append("    citation: ").append(toIndentedString(citation)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    primaryFile: ").append(toIndentedString(primaryFile)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bibliographic_contributors");
    openapiFields.add("citation");
    openapiFields.add("identifiers");
    openapiFields.add("license");
    openapiFields.add("node");
    openapiFields.add("primary_file");
    openapiFields.add("provider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("node");
    openapiRequiredFields.add("primary_file");
    openapiRequiredFields.add("provider");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relationships11
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relationships11.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relationships11 is not found in the empty JSON string", Relationships11.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relationships11.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relationships11` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Relationships11.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bibliographic_contributors") != null && !jsonObj.get("bibliographic_contributors").isJsonNull()) && !jsonObj.get("bibliographic_contributors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bibliographic_contributors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bibliographic_contributors").toString()));
      }
      if ((jsonObj.get("citation") != null && !jsonObj.get("citation").isJsonNull()) && !jsonObj.get("citation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citation").toString()));
      }
      if ((jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) && !jsonObj.get("identifiers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if (!jsonObj.get("node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node").toString()));
      }
      if (!jsonObj.get("primary_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_file").toString()));
      }
      if (!jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relationships11.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relationships11' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relationships11> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relationships11.class));

       return (TypeAdapter<T>) new TypeAdapter<Relationships11>() {
           @Override
           public void write(JsonWriter out, Relationships11 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relationships11 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relationships11 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relationships11
   * @throws IOException if the JSON string is invalid with respect to Relationships11
   */
  public static Relationships11 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relationships11.class);
  }

  /**
   * Convert an instance of Relationships11 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

