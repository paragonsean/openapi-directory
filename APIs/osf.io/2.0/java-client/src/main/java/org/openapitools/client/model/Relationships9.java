/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URLs to other entities or entity collections that have a relationship to the log.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relationships9 {
  public static final String SERIALIZED_NAME_LINKED_NODE = "linked_node";
  @SerializedName(SERIALIZED_NAME_LINKED_NODE)
  private String linkedNode;

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private String node;

  public static final String SERIALIZED_NAME_ORIGINAL_NODE = "original_node";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NODE)
  private String originalNode;

  public static final String SERIALIZED_NAME_TEMPLATE_NODE = "template_node";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NODE)
  private String templateNode;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public Relationships9() {
  }

  public Relationships9(
     String linkedNode, 
     String node, 
     String originalNode, 
     String templateNode, 
     String user
  ) {
    this();
    this.linkedNode = linkedNode;
    this.node = node;
    this.originalNode = originalNode;
    this.templateNode = templateNode;
    this.user = user;
  }

  /**
   * A relationship to the node linked to this log.
   * @return linkedNode
   */
  @javax.annotation.Nullable
  public String getLinkedNode() {
    return linkedNode;
  }



  /**
   * A relationship to the node associated with this log.
   * @return node
   */
  @javax.annotation.Nonnull
  public String getNode() {
    return node;
  }



  /**
   * A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.
   * @return originalNode
   */
  @javax.annotation.Nullable
  public String getOriginalNode() {
    return originalNode;
  }



  /**
   * A relationship to the node used as a template for this log.
   * @return templateNode
   */
  @javax.annotation.Nullable
  public String getTemplateNode() {
    return templateNode;
  }



  /**
   * A relationship to the user who performed the log action.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships9 relationships9 = (Relationships9) o;
    return Objects.equals(this.linkedNode, relationships9.linkedNode) &&
        Objects.equals(this.node, relationships9.node) &&
        Objects.equals(this.originalNode, relationships9.originalNode) &&
        Objects.equals(this.templateNode, relationships9.templateNode) &&
        Objects.equals(this.user, relationships9.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkedNode, node, originalNode, templateNode, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships9 {\n");
    sb.append("    linkedNode: ").append(toIndentedString(linkedNode)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    originalNode: ").append(toIndentedString(originalNode)).append("\n");
    sb.append("    templateNode: ").append(toIndentedString(templateNode)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("linked_node");
    openapiFields.add("node");
    openapiFields.add("original_node");
    openapiFields.add("template_node");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("node");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relationships9
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relationships9.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relationships9 is not found in the empty JSON string", Relationships9.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relationships9.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relationships9` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Relationships9.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("linked_node") != null && !jsonObj.get("linked_node").isJsonNull()) && !jsonObj.get("linked_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linked_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linked_node").toString()));
      }
      if (!jsonObj.get("node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node").toString()));
      }
      if ((jsonObj.get("original_node") != null && !jsonObj.get("original_node").isJsonNull()) && !jsonObj.get("original_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_node").toString()));
      }
      if ((jsonObj.get("template_node") != null && !jsonObj.get("template_node").isJsonNull()) && !jsonObj.get("template_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_node").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relationships9.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relationships9' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relationships9> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relationships9.class));

       return (TypeAdapter<T>) new TypeAdapter<Relationships9>() {
           @Override
           public void write(JsonWriter out, Relationships9 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relationships9 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relationships9 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relationships9
   * @throws IOException if the JSON string is invalid with respect to Relationships9
   */
  public static Relationships9 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relationships9.class);
  }

  /**
   * Convert an instance of Relationships9 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

