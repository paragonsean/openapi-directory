/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the registration entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes19 {
  /**
   * The category of the registered node.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    ANALYSIS("analysis"),
    
    COMMUNICATION("communication"),
    
    DATA("data"),
    
    HYPOTHESIS("hypothesis"),
    
    INSTRUMENTATION("instrumentation"),
    
    METHODS_AND_MEASURES("methods and measures"),
    
    PROCEDURE("procedure"),
    
    PROJECT("project"),
    
    SOFTWARE("software"),
    
    OTHER("other");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private Boolean collection;

  public static final String SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT = "current_user_can_comment";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_CAN_COMMENT)
  private Boolean currentUserCanComment;

  public static final String SERIALIZED_NAME_CURRENT_USER_PERMISSIONS = "current_user_permissions";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_PERMISSIONS)
  private List<String> currentUserPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DATE_REGISTERED = "date_registered";
  @SerializedName(SERIALIZED_NAME_DATE_REGISTERED)
  private OffsetDateTime dateRegistered;

  public static final String SERIALIZED_NAME_DATE_WITHDRAWN = "date_withdrawn";
  @SerializedName(SERIALIZED_NAME_DATE_WITHDRAWN)
  private OffsetDateTime dateWithdrawn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMBARGO_END_DATE = "embargo_end_date";
  @SerializedName(SERIALIZED_NAME_EMBARGO_END_DATE)
  private OffsetDateTime embargoEndDate;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_NODE_LICENSE = "node_license";
  @SerializedName(SERIALIZED_NAME_NODE_LICENSE)
  private String nodeLicense;

  public static final String SERIALIZED_NAME_PENDING_EMBARGO_APPROVAL = "pending_embargo_approval";
  @SerializedName(SERIALIZED_NAME_PENDING_EMBARGO_APPROVAL)
  private Boolean pendingEmbargoApproval;

  public static final String SERIALIZED_NAME_PENDING_REGISTRATION_APPROVAL = "pending_registration_approval";
  @SerializedName(SERIALIZED_NAME_PENDING_REGISTRATION_APPROVAL)
  private Boolean pendingRegistrationApproval;

  public static final String SERIALIZED_NAME_PENDING_WITHDRAWAL = "pending_withdrawal";
  @SerializedName(SERIALIZED_NAME_PENDING_WITHDRAWAL)
  private Boolean pendingWithdrawal;

  public static final String SERIALIZED_NAME_PREPRINT = "preprint";
  @SerializedName(SERIALIZED_NAME_PREPRINT)
  private Boolean preprint;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_REGISTERED_META = "registered_meta";
  @SerializedName(SERIALIZED_NAME_REGISTERED_META)
  private String registeredMeta;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private Boolean registration;

  public static final String SERIALIZED_NAME_REGISTRATION_SUPPLEMENT = "registration_supplement";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_SUPPLEMENT)
  private String registrationSupplement;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_FROM = "template_from";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_FROM)
  private String templateFrom;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_WITHDRAWAL_JUSTIFICATION = "withdrawal_justification";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL_JUSTIFICATION)
  private String withdrawalJustification;

  public static final String SERIALIZED_NAME_WITHDRAWN = "withdrawn";
  @SerializedName(SERIALIZED_NAME_WITHDRAWN)
  private Boolean withdrawn;

  public Attributes19() {
  }

  public Attributes19(
     CategoryEnum category, 
     Boolean collection, 
     Boolean currentUserCanComment, 
     List<String> currentUserPermissions, 
     OffsetDateTime dateCreated, 
     OffsetDateTime dateModified, 
     OffsetDateTime dateRegistered, 
     OffsetDateTime dateWithdrawn, 
     String description, 
     OffsetDateTime embargoEndDate, 
     Boolean fork, 
     String nodeLicense, 
     Boolean pendingEmbargoApproval, 
     Boolean pendingRegistrationApproval, 
     Boolean pendingWithdrawal, 
     Boolean preprint, 
     String registeredMeta, 
     Boolean registration, 
     String registrationSupplement, 
     List<String> tags, 
     String templateFrom, 
     String title, 
     String withdrawalJustification, 
     Boolean withdrawn
  ) {
    this();
    this.category = category;
    this.collection = collection;
    this.currentUserCanComment = currentUserCanComment;
    this.currentUserPermissions = currentUserPermissions;
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
    this.dateRegistered = dateRegistered;
    this.dateWithdrawn = dateWithdrawn;
    this.description = description;
    this.embargoEndDate = embargoEndDate;
    this.fork = fork;
    this.nodeLicense = nodeLicense;
    this.pendingEmbargoApproval = pendingEmbargoApproval;
    this.pendingRegistrationApproval = pendingRegistrationApproval;
    this.pendingWithdrawal = pendingWithdrawal;
    this.preprint = preprint;
    this.registeredMeta = registeredMeta;
    this.registration = registration;
    this.registrationSupplement = registrationSupplement;
    this.tags = tags;
    this.templateFrom = templateFrom;
    this.title = title;
    this.withdrawalJustification = withdrawalJustification;
    this.withdrawn = withdrawn;
  }

  /**
   * The category of the registered node.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }



  /**
   * Whether or not this registration represents a collection. This value should always be &#x60;false&#x60;. This field may be deprecated in future versions.
   * @return collection
   */
  @javax.annotation.Nullable
  public Boolean getCollection() {
    return collection;
  }



  /**
   * Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.
   * @return currentUserCanComment
   */
  @javax.annotation.Nullable
  public Boolean getCurrentUserCanComment() {
    return currentUserCanComment;
  }



  /**
   * A list of strings representing the permissions for the current user on this registration. Valid permissions are \&quot;admin\&quot;, \&quot;read\&quot;, and \&quot;write\&quot;.
   * @return currentUserPermissions
   */
  @javax.annotation.Nullable
  public List<String> getCurrentUserPermissions() {
    return currentUserPermissions;
  }



  /**
   * The time at which the registered node was created, as an iso8601 formatted timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The time at which the registered node was last modified, as an iso8601 formatted timestamp.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }



  /**
   * The time at which this registration was created, as an iso8601 formatted timestamp.
   * @return dateRegistered
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateRegistered() {
    return dateRegistered;
  }



  /**
   * The time at which this registration was withdrawn, as an iso8601 formatted timestamp.
   * @return dateWithdrawn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateWithdrawn() {
    return dateWithdrawn;
  }



  /**
   * The description of the registered node.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.
   * @return embargoEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEmbargoEndDate() {
    return embargoEndDate;
  }



  /**
   * Whether or not this registration represents a fork of another node.
   * @return fork
   */
  @javax.annotation.Nullable
  public Boolean getFork() {
    return fork;
  }



  /**
   * A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).
   * @return nodeLicense
   */
  @javax.annotation.Nullable
  public String getNodeLicense() {
    return nodeLicense;
  }



  /**
   * Whether or not the embargo associated with this registration is pending approval from project administrators.
   * @return pendingEmbargoApproval
   */
  @javax.annotation.Nullable
  public Boolean getPendingEmbargoApproval() {
    return pendingEmbargoApproval;
  }



  /**
   * Whether or not the registration is pending approval from project administrators.
   * @return pendingRegistrationApproval
   */
  @javax.annotation.Nullable
  public Boolean getPendingRegistrationApproval() {
    return pendingRegistrationApproval;
  }



  /**
   * Whether or not the registration is pending approval for withdrawal from project administrators.
   * @return pendingWithdrawal
   */
  @javax.annotation.Nullable
  public Boolean getPendingWithdrawal() {
    return pendingWithdrawal;
  }



  /**
   * Whether or not a preprint has been created from this node, or if this node was created for a preprint.
   * @return preprint
   */
  @javax.annotation.Nullable
  public Boolean getPreprint() {
    return preprint;
  }



  public Attributes19 _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Whether or not the registration is publicly visible.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  /**
   * A dictionary with supplemental registration questions and responses.
   * @return registeredMeta
   */
  @javax.annotation.Nullable
  public String getRegisteredMeta() {
    return registeredMeta;
  }



  /**
   * Whether or not this is a registration. This value should always be &#x60;true&#x60;. This field may be deprecated in future versions.
   * @return registration
   */
  @javax.annotation.Nullable
  public Boolean getRegistration() {
    return registration;
  }



  /**
   * The title of the registration schema this registration conforms to.
   * @return registrationSupplement
   */
  @javax.annotation.Nullable
  public String getRegistrationSupplement() {
    return registrationSupplement;
  }



  /**
   * A list of strings that describe the registered node.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }



  /**
   * The unique ID of the node from which the registered node was templated, if the registered node was created from a template.
   * @return templateFrom
   */
  @javax.annotation.Nullable
  public String getTemplateFrom() {
    return templateFrom;
  }



  /**
   * The title of the registered node.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }



  /**
   * The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.
   * @return withdrawalJustification
   */
  @javax.annotation.Nullable
  public String getWithdrawalJustification() {
    return withdrawalJustification;
  }



  /**
   * Whether or not this registration has been withdrawn.
   * @return withdrawn
   */
  @javax.annotation.Nullable
  public Boolean getWithdrawn() {
    return withdrawn;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes19 attributes19 = (Attributes19) o;
    return Objects.equals(this.category, attributes19.category) &&
        Objects.equals(this.collection, attributes19.collection) &&
        Objects.equals(this.currentUserCanComment, attributes19.currentUserCanComment) &&
        Objects.equals(this.currentUserPermissions, attributes19.currentUserPermissions) &&
        Objects.equals(this.dateCreated, attributes19.dateCreated) &&
        Objects.equals(this.dateModified, attributes19.dateModified) &&
        Objects.equals(this.dateRegistered, attributes19.dateRegistered) &&
        Objects.equals(this.dateWithdrawn, attributes19.dateWithdrawn) &&
        Objects.equals(this.description, attributes19.description) &&
        Objects.equals(this.embargoEndDate, attributes19.embargoEndDate) &&
        Objects.equals(this.fork, attributes19.fork) &&
        Objects.equals(this.nodeLicense, attributes19.nodeLicense) &&
        Objects.equals(this.pendingEmbargoApproval, attributes19.pendingEmbargoApproval) &&
        Objects.equals(this.pendingRegistrationApproval, attributes19.pendingRegistrationApproval) &&
        Objects.equals(this.pendingWithdrawal, attributes19.pendingWithdrawal) &&
        Objects.equals(this.preprint, attributes19.preprint) &&
        Objects.equals(this._public, attributes19._public) &&
        Objects.equals(this.registeredMeta, attributes19.registeredMeta) &&
        Objects.equals(this.registration, attributes19.registration) &&
        Objects.equals(this.registrationSupplement, attributes19.registrationSupplement) &&
        Objects.equals(this.tags, attributes19.tags) &&
        Objects.equals(this.templateFrom, attributes19.templateFrom) &&
        Objects.equals(this.title, attributes19.title) &&
        Objects.equals(this.withdrawalJustification, attributes19.withdrawalJustification) &&
        Objects.equals(this.withdrawn, attributes19.withdrawn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, collection, currentUserCanComment, currentUserPermissions, dateCreated, dateModified, dateRegistered, dateWithdrawn, description, embargoEndDate, fork, nodeLicense, pendingEmbargoApproval, pendingRegistrationApproval, pendingWithdrawal, preprint, _public, registeredMeta, registration, registrationSupplement, tags, templateFrom, title, withdrawalJustification, withdrawn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes19 {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    currentUserCanComment: ").append(toIndentedString(currentUserCanComment)).append("\n");
    sb.append("    currentUserPermissions: ").append(toIndentedString(currentUserPermissions)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    dateRegistered: ").append(toIndentedString(dateRegistered)).append("\n");
    sb.append("    dateWithdrawn: ").append(toIndentedString(dateWithdrawn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    embargoEndDate: ").append(toIndentedString(embargoEndDate)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    nodeLicense: ").append(toIndentedString(nodeLicense)).append("\n");
    sb.append("    pendingEmbargoApproval: ").append(toIndentedString(pendingEmbargoApproval)).append("\n");
    sb.append("    pendingRegistrationApproval: ").append(toIndentedString(pendingRegistrationApproval)).append("\n");
    sb.append("    pendingWithdrawal: ").append(toIndentedString(pendingWithdrawal)).append("\n");
    sb.append("    preprint: ").append(toIndentedString(preprint)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    registeredMeta: ").append(toIndentedString(registeredMeta)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    registrationSupplement: ").append(toIndentedString(registrationSupplement)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    templateFrom: ").append(toIndentedString(templateFrom)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    withdrawalJustification: ").append(toIndentedString(withdrawalJustification)).append("\n");
    sb.append("    withdrawn: ").append(toIndentedString(withdrawn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("collection");
    openapiFields.add("current_user_can_comment");
    openapiFields.add("current_user_permissions");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("date_registered");
    openapiFields.add("date_withdrawn");
    openapiFields.add("description");
    openapiFields.add("embargo_end_date");
    openapiFields.add("fork");
    openapiFields.add("node_license");
    openapiFields.add("pending_embargo_approval");
    openapiFields.add("pending_registration_approval");
    openapiFields.add("pending_withdrawal");
    openapiFields.add("preprint");
    openapiFields.add("public");
    openapiFields.add("registered_meta");
    openapiFields.add("registration");
    openapiFields.add("registration_supplement");
    openapiFields.add("tags");
    openapiFields.add("template_from");
    openapiFields.add("title");
    openapiFields.add("withdrawal_justification");
    openapiFields.add("withdrawn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes19
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes19.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes19 is not found in the empty JSON string", Attributes19.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes19.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes19` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("current_user_permissions") != null && !jsonObj.get("current_user_permissions").isJsonNull() && !jsonObj.get("current_user_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("current_user_permissions").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("node_license") != null && !jsonObj.get("node_license").isJsonNull()) && !jsonObj.get("node_license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_license").toString()));
      }
      if ((jsonObj.get("registered_meta") != null && !jsonObj.get("registered_meta").isJsonNull()) && !jsonObj.get("registered_meta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered_meta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered_meta").toString()));
      }
      if ((jsonObj.get("registration_supplement") != null && !jsonObj.get("registration_supplement").isJsonNull()) && !jsonObj.get("registration_supplement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_supplement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_supplement").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("template_from") != null && !jsonObj.get("template_from").isJsonNull()) && !jsonObj.get("template_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_from").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("withdrawal_justification") != null && !jsonObj.get("withdrawal_justification").isJsonNull()) && !jsonObj.get("withdrawal_justification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `withdrawal_justification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("withdrawal_justification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes19.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes19' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes19> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes19.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes19>() {
           @Override
           public void write(JsonWriter out, Attributes19 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes19 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes19 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes19
   * @throws IOException if the JSON string is invalid with respect to Attributes19
   */
  public static Attributes19 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes19.class);
  }

  /**
   * Convert an instance of Attributes19 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

