/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the preprint provider entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes22 {
  public static final String SERIALIZED_NAME_ADVISORY_BOARD = "advisory_board";
  @SerializedName(SERIALIZED_NAME_ADVISORY_BOARD)
  private String advisoryBoard;

  public static final String SERIALIZED_NAME_BANNER_PATH = "banner_path";
  @SerializedName(SERIALIZED_NAME_BANNER_PATH)
  private String bannerPath;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_REDIRECT_ENABLED = "domain_redirect_enabled";
  @SerializedName(SERIALIZED_NAME_DOMAIN_REDIRECT_ENABLED)
  private Boolean domainRedirectEnabled;

  public static final String SERIALIZED_NAME_EMAIL_CONTACT = "email_contact";
  @SerializedName(SERIALIZED_NAME_EMAIL_CONTACT)
  private String emailContact;

  public static final String SERIALIZED_NAME_EMAIL_SUPPORT = "email_support";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUPPORT)
  private String emailSupport;

  public static final String SERIALIZED_NAME_EXAMPLE = "example";
  @SerializedName(SERIALIZED_NAME_EXAMPLE)
  private String example;

  public static final String SERIALIZED_NAME_LOGO_PATH = "logo_path";
  @SerializedName(SERIALIZED_NAME_LOGO_PATH)
  private String logoPath;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOCIAL_FACEBOOK = "social_facebook";
  @SerializedName(SERIALIZED_NAME_SOCIAL_FACEBOOK)
  private String socialFacebook;

  public static final String SERIALIZED_NAME_SOCIAL_INSTAGRAM = "social_instagram";
  @SerializedName(SERIALIZED_NAME_SOCIAL_INSTAGRAM)
  private String socialInstagram;

  public static final String SERIALIZED_NAME_SUBJECTS_ACCEPTABLE = "subjects_acceptable";
  @SerializedName(SERIALIZED_NAME_SUBJECTS_ACCEPTABLE)
  private String subjectsAcceptable;

  public Attributes22() {
  }

  public Attributes22(
     String advisoryBoard, 
     String bannerPath, 
     String description, 
     String domain, 
     Boolean domainRedirectEnabled, 
     String emailContact, 
     String emailSupport, 
     String example, 
     String logoPath, 
     String name, 
     String socialFacebook, 
     String socialInstagram, 
     String subjectsAcceptable
  ) {
    this();
    this.advisoryBoard = advisoryBoard;
    this.bannerPath = bannerPath;
    this.description = description;
    this.domain = domain;
    this.domainRedirectEnabled = domainRedirectEnabled;
    this.emailContact = emailContact;
    this.emailSupport = emailSupport;
    this.example = example;
    this.logoPath = logoPath;
    this.name = name;
    this.socialFacebook = socialFacebook;
    this.socialInstagram = socialInstagram;
    this.subjectsAcceptable = subjectsAcceptable;
  }

  /**
   * The HTML representation of the preprint provider&#39;s advisory board.
   * @return advisoryBoard
   */
  @javax.annotation.Nullable
  public String getAdvisoryBoard() {
    return advisoryBoard;
  }



  /**
   * A static path to the preprint provider&#39;s banner image. This field is deprecated as of verson 2.4.
   * @return bannerPath
   */
  @javax.annotation.Nullable
  public String getBannerPath() {
    return bannerPath;
  }



  /**
   * The description of the preprint provider.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The preprint provider&#39;s domain, if the provider is using a domain to for their preprint service.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }



  /**
   * Whether or not redirects are enabled for the provider&#39;s domain.
   * @return domainRedirectEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDomainRedirectEnabled() {
    return domainRedirectEnabled;
  }



  /**
   * The preprint provider&#39;s contact email address. This field is deprecated as of verson 2.4.
   * @return emailContact
   */
  @javax.annotation.Nullable
  public String getEmailContact() {
    return emailContact;
  }



  /**
   * The preprint providers&#39;s support email address.
   * @return emailSupport
   */
  @javax.annotation.Nullable
  public String getEmailSupport() {
    return emailSupport;
  }



  /**
   * The GUID for an example preprint from this preprint provider.
   * @return example
   */
  @javax.annotation.Nullable
  public String getExample() {
    return example;
  }



  /**
   * A static path to the preprint provider&#39;s logo image. This field is deprecated as of verson 2.4.
   * @return logoPath
   */
  @javax.annotation.Nullable
  public String getLogoPath() {
    return logoPath;
  }



  /**
   * The name of the preprint provider.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The preprint provider&#39;s Facebook account ID. This field is deprecated as of verson 2.4.
   * @return socialFacebook
   */
  @javax.annotation.Nullable
  public String getSocialFacebook() {
    return socialFacebook;
  }



  /**
   * The preprint provider&#39;s Instagram account ID. This field is deprecated as of verson 2.4.
   * @return socialInstagram
   */
  @javax.annotation.Nullable
  public String getSocialInstagram() {
    return socialInstagram;
  }



  /**
   * A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy.
   * @return subjectsAcceptable
   */
  @javax.annotation.Nullable
  public String getSubjectsAcceptable() {
    return subjectsAcceptable;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes22 attributes22 = (Attributes22) o;
    return Objects.equals(this.advisoryBoard, attributes22.advisoryBoard) &&
        Objects.equals(this.bannerPath, attributes22.bannerPath) &&
        Objects.equals(this.description, attributes22.description) &&
        Objects.equals(this.domain, attributes22.domain) &&
        Objects.equals(this.domainRedirectEnabled, attributes22.domainRedirectEnabled) &&
        Objects.equals(this.emailContact, attributes22.emailContact) &&
        Objects.equals(this.emailSupport, attributes22.emailSupport) &&
        Objects.equals(this.example, attributes22.example) &&
        Objects.equals(this.logoPath, attributes22.logoPath) &&
        Objects.equals(this.name, attributes22.name) &&
        Objects.equals(this.socialFacebook, attributes22.socialFacebook) &&
        Objects.equals(this.socialInstagram, attributes22.socialInstagram) &&
        Objects.equals(this.subjectsAcceptable, attributes22.subjectsAcceptable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advisoryBoard, bannerPath, description, domain, domainRedirectEnabled, emailContact, emailSupport, example, logoPath, name, socialFacebook, socialInstagram, subjectsAcceptable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes22 {\n");
    sb.append("    advisoryBoard: ").append(toIndentedString(advisoryBoard)).append("\n");
    sb.append("    bannerPath: ").append(toIndentedString(bannerPath)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainRedirectEnabled: ").append(toIndentedString(domainRedirectEnabled)).append("\n");
    sb.append("    emailContact: ").append(toIndentedString(emailContact)).append("\n");
    sb.append("    emailSupport: ").append(toIndentedString(emailSupport)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    logoPath: ").append(toIndentedString(logoPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    socialFacebook: ").append(toIndentedString(socialFacebook)).append("\n");
    sb.append("    socialInstagram: ").append(toIndentedString(socialInstagram)).append("\n");
    sb.append("    subjectsAcceptable: ").append(toIndentedString(subjectsAcceptable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advisory_board");
    openapiFields.add("banner_path");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("domain_redirect_enabled");
    openapiFields.add("email_contact");
    openapiFields.add("email_support");
    openapiFields.add("example");
    openapiFields.add("logo_path");
    openapiFields.add("name");
    openapiFields.add("social_facebook");
    openapiFields.add("social_instagram");
    openapiFields.add("subjects_acceptable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes22
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes22.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes22 is not found in the empty JSON string", Attributes22.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes22.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes22` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advisory_board") != null && !jsonObj.get("advisory_board").isJsonNull()) && !jsonObj.get("advisory_board").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisory_board` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisory_board").toString()));
      }
      if ((jsonObj.get("banner_path") != null && !jsonObj.get("banner_path").isJsonNull()) && !jsonObj.get("banner_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `banner_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("banner_path").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("email_contact") != null && !jsonObj.get("email_contact").isJsonNull()) && !jsonObj.get("email_contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_contact").toString()));
      }
      if ((jsonObj.get("email_support") != null && !jsonObj.get("email_support").isJsonNull()) && !jsonObj.get("email_support").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_support` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_support").toString()));
      }
      if ((jsonObj.get("example") != null && !jsonObj.get("example").isJsonNull()) && !jsonObj.get("example").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `example` to be a primitive type in the JSON string but got `%s`", jsonObj.get("example").toString()));
      }
      if ((jsonObj.get("logo_path") != null && !jsonObj.get("logo_path").isJsonNull()) && !jsonObj.get("logo_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_path").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("social_facebook") != null && !jsonObj.get("social_facebook").isJsonNull()) && !jsonObj.get("social_facebook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_facebook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("social_facebook").toString()));
      }
      if ((jsonObj.get("social_instagram") != null && !jsonObj.get("social_instagram").isJsonNull()) && !jsonObj.get("social_instagram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_instagram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("social_instagram").toString()));
      }
      if ((jsonObj.get("subjects_acceptable") != null && !jsonObj.get("subjects_acceptable").isJsonNull()) && !jsonObj.get("subjects_acceptable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects_acceptable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjects_acceptable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes22.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes22' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes22> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes22.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes22>() {
           @Override
           public void write(JsonWriter out, Attributes22 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes22 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes22 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes22
   * @throws IOException if the JSON string is invalid with respect to Attributes22
   */
  public static Attributes22 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes22.class);
  }

  /**
   * Convert an instance of Attributes22 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

