/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Schema Response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes25 {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private Integer dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private Integer dateModified;

  public static final String SERIALIZED_NAME_DATE_SUBMITTED = "date_submitted";
  @SerializedName(SERIALIZED_NAME_DATE_SUBMITTED)
  private Integer dateSubmitted;

  public static final String SERIALIZED_NAME_IS_ORIGINAL_RESPONSE = "is_original_response";
  @SerializedName(SERIALIZED_NAME_IS_ORIGINAL_RESPONSE)
  private Boolean isOriginalResponse;

  public static final String SERIALIZED_NAME_IS_PENDING_CURRENT_USER_APPROVAL = "is_pending_current_user_approval";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_CURRENT_USER_APPROVAL)
  private Boolean isPendingCurrentUserApproval;

  /**
   * A string that represents Schema Response state. &#x60;initial&#x60; is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
   */
  @JsonAdapter(ReviewsStateEnum.Adapter.class)
  public enum ReviewsStateEnum {
    INITIAL("initial"),
    
    IN_PROGRESS("in_progress"),
    
    APPROVED("approved"),
    
    PENDING_MODERATION("pending_moderation");

    private String value;

    ReviewsStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewsStateEnum fromValue(String value) {
      for (ReviewsStateEnum b : ReviewsStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewsStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewsStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewsStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewsStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewsStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEWS_STATE = "reviews_state";
  @SerializedName(SERIALIZED_NAME_REVIEWS_STATE)
  private ReviewsStateEnum reviewsState;

  public static final String SERIALIZED_NAME_REVISION_JUSTIFICATION = "revision_justification";
  @SerializedName(SERIALIZED_NAME_REVISION_JUSTIFICATION)
  private String revisionJustification;

  public static final String SERIALIZED_NAME_REVISION_RESPONSES = "revision_responses";
  @SerializedName(SERIALIZED_NAME_REVISION_RESPONSES)
  private List<Object> revisionResponses = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_RESPONSE_KEYS = "updated_response_keys";
  @SerializedName(SERIALIZED_NAME_UPDATED_RESPONSE_KEYS)
  private List<Object> updatedResponseKeys = new ArrayList<>();

  public Attributes25() {
  }

  public Attributes25(
     List<Object> updatedResponseKeys
  ) {
    this();
    this.updatedResponseKeys = updatedResponseKeys;
  }

  public Attributes25 dateCreated(Integer dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date the Schema Response was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public Integer getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(Integer dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Attributes25 dateModified(Integer dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * The date the Schema Response was most recently changed.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public Integer getDateModified() {
    return dateModified;
  }

  public void setDateModified(Integer dateModified) {
    this.dateModified = dateModified;
  }


  public Attributes25 dateSubmitted(Integer dateSubmitted) {
    this.dateSubmitted = dateSubmitted;
    return this;
  }

  /**
   * The date the Schema Response was submitted for approval.
   * @return dateSubmitted
   */
  @javax.annotation.Nullable
  public Integer getDateSubmitted() {
    return dateSubmitted;
  }

  public void setDateSubmitted(Integer dateSubmitted) {
    this.dateSubmitted = dateSubmitted;
  }


  public Attributes25 isOriginalResponse(Boolean isOriginalResponse) {
    this.isOriginalResponse = isOriginalResponse;
    return this;
  }

  /**
   * A bool that represents whether the Schema Response is the original one that was made when the registration was created.
   * @return isOriginalResponse
   */
  @javax.annotation.Nullable
  public Boolean getIsOriginalResponse() {
    return isOriginalResponse;
  }

  public void setIsOriginalResponse(Boolean isOriginalResponse) {
    this.isOriginalResponse = isOriginalResponse;
  }


  public Attributes25 isPendingCurrentUserApproval(Boolean isPendingCurrentUserApproval) {
    this.isPendingCurrentUserApproval = isPendingCurrentUserApproval;
    return this;
  }

  /**
   * A bool that represents whether the Schema Response needs the current user to approve the state transition.
   * @return isPendingCurrentUserApproval
   */
  @javax.annotation.Nullable
  public Boolean getIsPendingCurrentUserApproval() {
    return isPendingCurrentUserApproval;
  }

  public void setIsPendingCurrentUserApproval(Boolean isPendingCurrentUserApproval) {
    this.isPendingCurrentUserApproval = isPendingCurrentUserApproval;
  }


  public Attributes25 reviewsState(ReviewsStateEnum reviewsState) {
    this.reviewsState = reviewsState;
    return this;
  }

  /**
   * A string that represents Schema Response state. &#x60;initial&#x60; is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
   * @return reviewsState
   */
  @javax.annotation.Nullable
  public ReviewsStateEnum getReviewsState() {
    return reviewsState;
  }

  public void setReviewsState(ReviewsStateEnum reviewsState) {
    this.reviewsState = reviewsState;
  }


  public Attributes25 revisionJustification(String revisionJustification) {
    this.revisionJustification = revisionJustification;
    return this;
  }

  /**
   * A user provided string representing the reason a new Schema Response was needed.
   * @return revisionJustification
   */
  @javax.annotation.Nullable
  public String getRevisionJustification() {
    return revisionJustification;
  }

  public void setRevisionJustification(String revisionJustification) {
    this.revisionJustification = revisionJustification;
  }


  public Attributes25 revisionResponses(List<Object> revisionResponses) {
    this.revisionResponses = revisionResponses;
    return this;
  }

  public Attributes25 addRevisionResponsesItem(Object revisionResponsesItem) {
    if (this.revisionResponses == null) {
      this.revisionResponses = new ArrayList<>();
    }
    this.revisionResponses.add(revisionResponsesItem);
    return this;
  }

  /**
   * A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response &#x60;{\&quot;q1\&quot;: \&quot;Answer 1\&quot;}&#x60; the block key is &#x60;q1&#x60;..
   * @return revisionResponses
   */
  @javax.annotation.Nullable
  public List<Object> getRevisionResponses() {
    return revisionResponses;
  }

  public void setRevisionResponses(List<Object> revisionResponses) {
    this.revisionResponses = revisionResponses;
  }


  /**
   * A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema.
   * @return updatedResponseKeys
   */
  @javax.annotation.Nullable
  public List<Object> getUpdatedResponseKeys() {
    return updatedResponseKeys;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes25 attributes25 = (Attributes25) o;
    return Objects.equals(this.dateCreated, attributes25.dateCreated) &&
        Objects.equals(this.dateModified, attributes25.dateModified) &&
        Objects.equals(this.dateSubmitted, attributes25.dateSubmitted) &&
        Objects.equals(this.isOriginalResponse, attributes25.isOriginalResponse) &&
        Objects.equals(this.isPendingCurrentUserApproval, attributes25.isPendingCurrentUserApproval) &&
        Objects.equals(this.reviewsState, attributes25.reviewsState) &&
        Objects.equals(this.revisionJustification, attributes25.revisionJustification) &&
        Objects.equals(this.revisionResponses, attributes25.revisionResponses) &&
        Objects.equals(this.updatedResponseKeys, attributes25.updatedResponseKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, dateSubmitted, isOriginalResponse, isPendingCurrentUserApproval, reviewsState, revisionJustification, revisionResponses, updatedResponseKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes25 {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    dateSubmitted: ").append(toIndentedString(dateSubmitted)).append("\n");
    sb.append("    isOriginalResponse: ").append(toIndentedString(isOriginalResponse)).append("\n");
    sb.append("    isPendingCurrentUserApproval: ").append(toIndentedString(isPendingCurrentUserApproval)).append("\n");
    sb.append("    reviewsState: ").append(toIndentedString(reviewsState)).append("\n");
    sb.append("    revisionJustification: ").append(toIndentedString(revisionJustification)).append("\n");
    sb.append("    revisionResponses: ").append(toIndentedString(revisionResponses)).append("\n");
    sb.append("    updatedResponseKeys: ").append(toIndentedString(updatedResponseKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("date_submitted");
    openapiFields.add("is_original_response");
    openapiFields.add("is_pending_current_user_approval");
    openapiFields.add("reviews_state");
    openapiFields.add("revision_justification");
    openapiFields.add("revision_responses");
    openapiFields.add("updated_response_keys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes25
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes25.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes25 is not found in the empty JSON string", Attributes25.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes25.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes25` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reviews_state") != null && !jsonObj.get("reviews_state").isJsonNull()) && !jsonObj.get("reviews_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviews_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviews_state").toString()));
      }
      // validate the optional field `reviews_state`
      if (jsonObj.get("reviews_state") != null && !jsonObj.get("reviews_state").isJsonNull()) {
        ReviewsStateEnum.validateJsonElement(jsonObj.get("reviews_state"));
      }
      if ((jsonObj.get("revision_justification") != null && !jsonObj.get("revision_justification").isJsonNull()) && !jsonObj.get("revision_justification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision_justification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision_justification").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("revision_responses") != null && !jsonObj.get("revision_responses").isJsonNull() && !jsonObj.get("revision_responses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision_responses` to be an array in the JSON string but got `%s`", jsonObj.get("revision_responses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("updated_response_keys") != null && !jsonObj.get("updated_response_keys").isJsonNull() && !jsonObj.get("updated_response_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_response_keys` to be an array in the JSON string but got `%s`", jsonObj.get("updated_response_keys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes25.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes25' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes25> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes25.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes25>() {
           @Override
           public void write(JsonWriter out, Attributes25 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes25 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes25 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes25
   * @throws IOException if the JSON string is invalid with respect to Attributes25
   */
  public static Attributes25 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes25.class);
  }

  /**
   * Convert an instance of Attributes25 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

