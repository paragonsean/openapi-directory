/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the contributor entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes24 {
  public static final String SERIALIZED_NAME_BIBLIOGRAPHIC = "bibliographic";
  @SerializedName(SERIALIZED_NAME_BIBLIOGRAPHIC)
  private Boolean bibliographic;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  /**
   * The permission level of the contributor. The default value is &#39;write&#39;.
   */
  @JsonAdapter(PermissionEnum.Adapter.class)
  public enum PermissionEnum {
    READ("read"),
    
    WRITE("write"),
    
    ADMIN("admin");

    private String value;

    PermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionEnum fromValue(String value) {
      for (PermissionEnum b : PermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private PermissionEnum permission;

  public static final String SERIALIZED_NAME_UNREGISTERED_CONTRIBUTOR = "unregistered_contributor";
  @SerializedName(SERIALIZED_NAME_UNREGISTERED_CONTRIBUTOR)
  private String unregisteredContributor;

  public Attributes24() {
  }

  public Attributes24(
     String unregisteredContributor
  ) {
    this();
    this.unregisteredContributor = unregisteredContributor;
  }

  public Attributes24 bibliographic(Boolean bibliographic) {
    this.bibliographic = bibliographic;
    return this;
  }

  /**
   * Whether or not the contributor will be included in citations for the Preprint. The default value is true.
   * @return bibliographic
   */
  @javax.annotation.Nullable
  public Boolean getBibliographic() {
    return bibliographic;
  }

  public void setBibliographic(Boolean bibliographic) {
    this.bibliographic = bibliographic;
  }


  public Attributes24 index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The position of this contributor in the list of Preprint&#39;s contributors and in a Preprint&#39;s citations.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public Attributes24 permission(PermissionEnum permission) {
    this.permission = permission;
    return this;
  }

  /**
   * The permission level of the contributor. The default value is &#39;write&#39;.
   * @return permission
   */
  @javax.annotation.Nullable
  public PermissionEnum getPermission() {
    return permission;
  }

  public void setPermission(PermissionEnum permission) {
    this.permission = permission;
  }


  /**
   * The assigned name of the contributor if the contributor has not yet claimed their account.
   * @return unregisteredContributor
   */
  @javax.annotation.Nullable
  public String getUnregisteredContributor() {
    return unregisteredContributor;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes24 attributes24 = (Attributes24) o;
    return Objects.equals(this.bibliographic, attributes24.bibliographic) &&
        Objects.equals(this.index, attributes24.index) &&
        Objects.equals(this.permission, attributes24.permission) &&
        Objects.equals(this.unregisteredContributor, attributes24.unregisteredContributor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bibliographic, index, permission, unregisteredContributor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes24 {\n");
    sb.append("    bibliographic: ").append(toIndentedString(bibliographic)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    unregisteredContributor: ").append(toIndentedString(unregisteredContributor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bibliographic");
    openapiFields.add("index");
    openapiFields.add("permission");
    openapiFields.add("unregistered_contributor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes24
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes24.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes24 is not found in the empty JSON string", Attributes24.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes24.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes24` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) && !jsonObj.get("permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission").toString()));
      }
      // validate the optional field `permission`
      if (jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) {
        PermissionEnum.validateJsonElement(jsonObj.get("permission"));
      }
      if ((jsonObj.get("unregistered_contributor") != null && !jsonObj.get("unregistered_contributor").isJsonNull()) && !jsonObj.get("unregistered_contributor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unregistered_contributor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unregistered_contributor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes24.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes24' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes24> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes24.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes24>() {
           @Override
           public void write(JsonWriter out, Attributes24 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes24 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes24 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes24
   * @throws IOException if the JSON string is invalid with respect to Attributes24
   */
  public static Attributes24 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes24.class);
  }

  /**
   * Convert an instance of Attributes24 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

