/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URLs to other entities or entity collections that have a relationship to the node entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relationships {
  public static final String SERIALIZED_NAME_COLLECTED_METADATA = "collected_metadata";
  @SerializedName(SERIALIZED_NAME_COLLECTED_METADATA)
  private String collectedMetadata;

  public static final String SERIALIZED_NAME_LINKED_NODES = "linked_nodes";
  @SerializedName(SERIALIZED_NAME_LINKED_NODES)
  private String linkedNodes;

  public static final String SERIALIZED_NAME_LINKED_PREPRINTS = "linked_preprints";
  @SerializedName(SERIALIZED_NAME_LINKED_PREPRINTS)
  private String linkedPreprints;

  public static final String SERIALIZED_NAME_LINKED_REGISTRATIONS = "linked_registrations";
  @SerializedName(SERIALIZED_NAME_LINKED_REGISTRATIONS)
  private String linkedRegistrations;

  public static final String SERIALIZED_NAME_NODE_LINKS = "node_links";
  @SerializedName(SERIALIZED_NAME_NODE_LINKS)
  private String nodeLinks;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public Relationships() {
  }

  public Relationships(
     String collectedMetadata, 
     String linkedNodes, 
     String linkedPreprints, 
     String linkedRegistrations, 
     String nodeLinks, 
     String provider
  ) {
    this();
    this.collectedMetadata = collectedMetadata;
    this.linkedNodes = linkedNodes;
    this.linkedPreprints = linkedPreprints;
    this.linkedRegistrations = linkedRegistrations;
    this.nodeLinks = nodeLinks;
    this.provider = provider;
  }

  /**
   * A link to the list of metadata entries that are linked to the current collections.
   * @return collectedMetadata
   */
  @javax.annotation.Nullable
  public String getCollectedMetadata() {
    return collectedMetadata;
  }



  /**
   * A link to the list of nodes that are linked to the current collection.
   * @return linkedNodes
   */
  @javax.annotation.Nullable
  public String getLinkedNodes() {
    return linkedNodes;
  }



  /**
   * A link to the list of preprints that are linked to the current collection.
   * @return linkedPreprints
   */
  @javax.annotation.Nullable
  public String getLinkedPreprints() {
    return linkedPreprints;
  }



  /**
   * A link to the list of registrations that are linked to the current collection.
   * @return linkedRegistrations
   */
  @javax.annotation.Nullable
  public String getLinkedRegistrations() {
    return linkedRegistrations;
  }



  /**
   * A link to the list of nodes that are linked to the current collection.
   * @return nodeLinks
   */
  @javax.annotation.Nullable
  public String getNodeLinks() {
    return nodeLinks;
  }



  /**
   * A link to the list of preprints that this node relates to.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relationships relationships = (Relationships) o;
    return Objects.equals(this.collectedMetadata, relationships.collectedMetadata) &&
        Objects.equals(this.linkedNodes, relationships.linkedNodes) &&
        Objects.equals(this.linkedPreprints, relationships.linkedPreprints) &&
        Objects.equals(this.linkedRegistrations, relationships.linkedRegistrations) &&
        Objects.equals(this.nodeLinks, relationships.nodeLinks) &&
        Objects.equals(this.provider, relationships.provider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectedMetadata, linkedNodes, linkedPreprints, linkedRegistrations, nodeLinks, provider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relationships {\n");
    sb.append("    collectedMetadata: ").append(toIndentedString(collectedMetadata)).append("\n");
    sb.append("    linkedNodes: ").append(toIndentedString(linkedNodes)).append("\n");
    sb.append("    linkedPreprints: ").append(toIndentedString(linkedPreprints)).append("\n");
    sb.append("    linkedRegistrations: ").append(toIndentedString(linkedRegistrations)).append("\n");
    sb.append("    nodeLinks: ").append(toIndentedString(nodeLinks)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collected_metadata");
    openapiFields.add("linked_nodes");
    openapiFields.add("linked_preprints");
    openapiFields.add("linked_registrations");
    openapiFields.add("node_links");
    openapiFields.add("provider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relationships
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relationships is not found in the empty JSON string", Relationships.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collected_metadata") != null && !jsonObj.get("collected_metadata").isJsonNull()) && !jsonObj.get("collected_metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collected_metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collected_metadata").toString()));
      }
      if ((jsonObj.get("linked_nodes") != null && !jsonObj.get("linked_nodes").isJsonNull()) && !jsonObj.get("linked_nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linked_nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linked_nodes").toString()));
      }
      if ((jsonObj.get("linked_preprints") != null && !jsonObj.get("linked_preprints").isJsonNull()) && !jsonObj.get("linked_preprints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linked_preprints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linked_preprints").toString()));
      }
      if ((jsonObj.get("linked_registrations") != null && !jsonObj.get("linked_registrations").isJsonNull()) && !jsonObj.get("linked_registrations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linked_registrations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linked_registrations").toString()));
      }
      if ((jsonObj.get("node_links") != null && !jsonObj.get("node_links").isJsonNull()) && !jsonObj.get("node_links").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_links` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_links").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relationships.class));

       return (TypeAdapter<T>) new TypeAdapter<Relationships>() {
           @Override
           public void write(JsonWriter out, Relationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relationships given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relationships
   * @throws IOException if the JSON string is invalid with respect to Relationships
   */
  public static Relationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relationships.class);
  }

  /**
   * Convert an instance of Relationships to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

