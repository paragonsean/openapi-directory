/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SchemaResponseActions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemaResponseActionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchemaResponseActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaResponseActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schemaResponseActionRead
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponseActionReadCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}/actions/"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponseActionReadValidateBeforeCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponseActionRead(Async)");
        }

        return schemaResponseActionReadCall(schemaResponseId, _callback);

    }

    /**
     * Retrieve a list of Schema Response Actions for a Schema Response
     * This retrieves a paginated list of all Schema Response Actions created for a Schema Response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return SchemaResponseActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SchemaResponseActions schemaResponseActionRead(String schemaResponseId) throws ApiException {
        ApiResponse<SchemaResponseActions> localVarResp = schemaResponseActionReadWithHttpInfo(schemaResponseId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of Schema Response Actions for a Schema Response
     * This retrieves a paginated list of all Schema Response Actions created for a Schema Response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return ApiResponse&lt;SchemaResponseActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaResponseActions> schemaResponseActionReadWithHttpInfo(String schemaResponseId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponseActionReadValidateBeforeCall(schemaResponseId, null);
        Type localVarReturnType = new TypeToken<SchemaResponseActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of Schema Response Actions for a Schema Response (asynchronously)
     * This retrieves a paginated list of all Schema Response Actions created for a Schema Response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponseActionReadAsync(String schemaResponseId, final ApiCallback<SchemaResponseActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponseActionReadValidateBeforeCall(schemaResponseId, _callback);
        Type localVarReturnType = new TypeToken<SchemaResponseActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsesSchemaResponseIdActionsPost
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesSchemaResponseIdActionsPostCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}/actions/"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsesSchemaResponseIdActionsPostValidateBeforeCall(String schemaResponseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponsesSchemaResponseIdActionsPost(Async)");
        }

        return schemaResponsesSchemaResponseIdActionsPostCall(schemaResponseId, _callback);

    }

    /**
     * Create a new Schema Response Action
     * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void schemaResponsesSchemaResponseIdActionsPost(String schemaResponseId) throws ApiException {
        schemaResponsesSchemaResponseIdActionsPostWithHttpInfo(schemaResponseId);
    }

    /**
     * Create a new Schema Response Action
     * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> schemaResponsesSchemaResponseIdActionsPostWithHttpInfo(String schemaResponseId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponsesSchemaResponseIdActionsPostValidateBeforeCall(schemaResponseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new Schema Response Action (asynchronously)
     * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Registration Schema example &#x60;6176c9d45e01f100091d4f94&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesSchemaResponseIdActionsPostAsync(String schemaResponseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsesSchemaResponseIdActionsPostValidateBeforeCall(schemaResponseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet
     * @param schemaResponseId The unique identifier of the Schema Response example &#x60;61b9cd62eb66180215222669&#x60;. (required)
     * @param schemaResponseActionId The unique identifier of the Schema Response Action example &#x60;61b9eae1a7d8ac025c4c46d3&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetCall(String schemaResponseId, String schemaResponseActionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}"
            .replace("{" + "schema_response_id" + "}", localVarApiClient.escapeString(schemaResponseId.toString()))
            .replace("{" + "schema_response_action_id" + "}", localVarApiClient.escapeString(schemaResponseActionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetValidateBeforeCall(String schemaResponseId, String schemaResponseActionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schemaResponseId' is set
        if (schemaResponseId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseId' when calling schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet(Async)");
        }

        // verify the required parameter 'schemaResponseActionId' is set
        if (schemaResponseActionId == null) {
            throw new ApiException("Missing the required parameter 'schemaResponseActionId' when calling schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet(Async)");
        }

        return schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetCall(schemaResponseId, schemaResponseActionId, _callback);

    }

    /**
     * A Schema Response Action from a Schema Response
     * Retrieves a Schema Response Action by it&#39;s ID. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Schema Response example &#x60;61b9cd62eb66180215222669&#x60;. (required)
     * @param schemaResponseActionId The unique identifier of the Schema Response Action example &#x60;61b9eae1a7d8ac025c4c46d3&#x60;. (required)
     * @return SchemaResponseActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SchemaResponseActions schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGet(String schemaResponseId, String schemaResponseActionId) throws ApiException {
        ApiResponse<SchemaResponseActions> localVarResp = schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetWithHttpInfo(schemaResponseId, schemaResponseActionId);
        return localVarResp.getData();
    }

    /**
     * A Schema Response Action from a Schema Response
     * Retrieves a Schema Response Action by it&#39;s ID. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Schema Response example &#x60;61b9cd62eb66180215222669&#x60;. (required)
     * @param schemaResponseActionId The unique identifier of the Schema Response Action example &#x60;61b9eae1a7d8ac025c4c46d3&#x60;. (required)
     * @return ApiResponse&lt;SchemaResponseActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaResponseActions> schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetWithHttpInfo(String schemaResponseId, String schemaResponseActionId) throws ApiException {
        okhttp3.Call localVarCall = schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetValidateBeforeCall(schemaResponseId, schemaResponseActionId, null);
        Type localVarReturnType = new TypeToken<SchemaResponseActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A Schema Response Action from a Schema Response (asynchronously)
     * Retrieves a Schema Response Action by it&#39;s ID. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested Schema Response Actions, if the request is successful. #### Errors If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param schemaResponseId The unique identifier of the Schema Response example &#x60;61b9cd62eb66180215222669&#x60;. (required)
     * @param schemaResponseActionId The unique identifier of the Schema Response Action example &#x60;61b9eae1a7d8ac025c4c46d3&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetAsync(String schemaResponseId, String schemaResponseActionId, final ApiCallback<SchemaResponseActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = schemaResponsesSchemaResponseIdActionsSchemaResponseActionIdGetValidateBeforeCall(schemaResponseId, schemaResponseActionId, _callback);
        Type localVarReturnType = new TypeToken<SchemaResponseActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
