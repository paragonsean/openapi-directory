/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes of the Registration Schema Block.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:48.027310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes27 {
  /**
   * A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.
   */
  @JsonAdapter(BlockTypeEnum.Adapter.class)
  public enum BlockTypeEnum {
    PAGE_HEADING("page-heading"),
    
    SECTION_HEADING("section-heading"),
    
    SUBSECTION_HEADING("subsection-heading"),
    
    PARAGRAPH("paragraph"),
    
    QUESTION_LABEL("question-label"),
    
    SHORT_TEXT_INPUT("short-text-input"),
    
    LONG_TEXT_INPUT("long-text-input"),
    
    FILE_INPUT("file-input"),
    
    CONTRIBUTORS_INPUT("contributors-input"),
    
    SINGLE_SELECT_INPUT("single-select-input"),
    
    MULTI_SELECT_INPUT("multi-select-input"),
    
    SELECT_INPUT_OPTION("select-input-option"),
    
    SELECT_OTHER_OPTION("select-other-option");

    private String value;

    BlockTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockTypeEnum fromValue(String value) {
      for (BlockTypeEnum b : BlockTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlockTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlockTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlockTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLOCK_TYPE = "block_type";
  @SerializedName(SERIALIZED_NAME_BLOCK_TYPE)
  private BlockTypeEnum blockType;

  public static final String SERIALIZED_NAME_DISPLAY_TEXT = "display_text";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEXT)
  private String displayText;

  public static final String SERIALIZED_NAME_EXAMPLE_TEXT = "example_text";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_TEXT)
  private String exampleText;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REGISTRATION_RESPONSE_KEY = "registration_response_key";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_RESPONSE_KEY)
  private String registrationResponseKey;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SCHEMA_BLOCK_GROUP_KEY = "schema_block_group_key";
  @SerializedName(SERIALIZED_NAME_SCHEMA_BLOCK_GROUP_KEY)
  private String schemaBlockGroupKey;

  public Attributes27() {
  }

  public Attributes27(
     BlockTypeEnum blockType, 
     String displayText, 
     String exampleText, 
     Integer index, 
     String registrationResponseKey, 
     Boolean required, 
     String schemaBlockGroupKey
  ) {
    this();
    this.blockType = blockType;
    this.displayText = displayText;
    this.exampleText = exampleText;
    this.index = index;
    this.registrationResponseKey = registrationResponseKey;
    this.required = required;
    this.schemaBlockGroupKey = schemaBlockGroupKey;
  }

  /**
   * A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.
   * @return blockType
   */
  @javax.annotation.Nullable
  public BlockTypeEnum getBlockType() {
    return blockType;
  }



  /**
   * The text that will accompany the UI element displayed on this Registration Schema Block.
   * @return displayText
   */
  @javax.annotation.Nullable
  public String getDisplayText() {
    return displayText;
  }



  /**
   * The text that will accompany the UI element displayed on this Registration Schema Block.
   * @return exampleText
   */
  @javax.annotation.Nullable
  public String getExampleText() {
    return exampleText;
  }



  /**
   * Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }



  /**
   * This string is the the block key for the Registration Schema Block&#39;s corresponding block on the Schema Response.
   * @return registrationResponseKey
   */
  @javax.annotation.Nullable
  public String getRegistrationResponseKey() {
    return registrationResponseKey;
  }



  /**
   * Bool that represents if this field is required for creation of a Schema Response.
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }



  /**
   * This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together.
   * @return schemaBlockGroupKey
   */
  @javax.annotation.Nullable
  public String getSchemaBlockGroupKey() {
    return schemaBlockGroupKey;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes27 attributes27 = (Attributes27) o;
    return Objects.equals(this.blockType, attributes27.blockType) &&
        Objects.equals(this.displayText, attributes27.displayText) &&
        Objects.equals(this.exampleText, attributes27.exampleText) &&
        Objects.equals(this.index, attributes27.index) &&
        Objects.equals(this.registrationResponseKey, attributes27.registrationResponseKey) &&
        Objects.equals(this.required, attributes27.required) &&
        Objects.equals(this.schemaBlockGroupKey, attributes27.schemaBlockGroupKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockType, displayText, exampleText, index, registrationResponseKey, required, schemaBlockGroupKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes27 {\n");
    sb.append("    blockType: ").append(toIndentedString(blockType)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    exampleText: ").append(toIndentedString(exampleText)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    registrationResponseKey: ").append(toIndentedString(registrationResponseKey)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    schemaBlockGroupKey: ").append(toIndentedString(schemaBlockGroupKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_type");
    openapiFields.add("display_text");
    openapiFields.add("example_text");
    openapiFields.add("index");
    openapiFields.add("registration_response_key");
    openapiFields.add("required");
    openapiFields.add("schema_block_group_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes27
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes27.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes27 is not found in the empty JSON string", Attributes27.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes27.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes27` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("block_type") != null && !jsonObj.get("block_type").isJsonNull()) && !jsonObj.get("block_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_type").toString()));
      }
      // validate the optional field `block_type`
      if (jsonObj.get("block_type") != null && !jsonObj.get("block_type").isJsonNull()) {
        BlockTypeEnum.validateJsonElement(jsonObj.get("block_type"));
      }
      if ((jsonObj.get("display_text") != null && !jsonObj.get("display_text").isJsonNull()) && !jsonObj.get("display_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_text").toString()));
      }
      if ((jsonObj.get("example_text") != null && !jsonObj.get("example_text").isJsonNull()) && !jsonObj.get("example_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `example_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("example_text").toString()));
      }
      if ((jsonObj.get("registration_response_key") != null && !jsonObj.get("registration_response_key").isJsonNull()) && !jsonObj.get("registration_response_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_response_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_response_key").toString()));
      }
      if ((jsonObj.get("schema_block_group_key") != null && !jsonObj.get("schema_block_group_key").isJsonNull()) && !jsonObj.get("schema_block_group_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema_block_group_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema_block_group_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes27.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes27' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes27> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes27.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes27>() {
           @Override
           public void write(JsonWriter out, Attributes27 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes27 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes27 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes27
   * @throws IOException if the JSON string is invalid with respect to Attributes27
   */
  public static Attributes27 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes27.class);
  }

  /**
   * Convert an instance of Attributes27 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

