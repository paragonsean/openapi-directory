/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.DraftRegistration;
import org.openapitools.client.model.Institution;
import org.openapitools.client.model.Subject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DraftRegistrationsApi
 */
@Disabled
public class DraftRegistrationsApiTest {

    private final DraftRegistrationsApi api = new DraftRegistrationsApi();

    /**
     * Add a contributor to a Draft Registration
     *
     * Adds a contributor to a Draft Registration, contributors can view, edit, register or delete a Draft Registration depending on their permissions. Contributors are categorized as either \&quot;bibliographic\&quot; or \&quot;non-bibliographic\&quot; contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not. #### Permissions Only project administrators can add contributors to a Draft Registration. #### Required A relationship object with a &#x60;data&#x60; key, containing the &#x60;users&#x60; type and valid user ID is required. All attributes describing the relationship between the node and the user are optional. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the new contributor, if the request is successful. If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationContributorsCreateTest() throws ApiException {
        String draftId = null;
        Contributor contributor = null;
        api.draftRegistrationContributorsCreate(draftId, contributor);
        // TODO: test validations
    }

    /**
     * Retreive a list Contributors from a Draft Registration
     *
     * Retrieves the details of all given Contributors for a Draft Registration. Contributors are users who can make changes to the Draft Registration. Contributors are categorized as either \&quot;bibliographic\&quot; or \&quot;non-bibliographic\&quot;. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationContributorsListTest() throws ApiException {
        String draftId = null;
        api.draftRegistrationContributorsList(draftId);
        // TODO: test validations
    }

    /**
     * Create a Draft Registration
     *
     * This creates a Draft Registration that can be used to edit and register research. Draft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it&#39;s metadata edited. A Draft Registration created by this endpoint will not have a Project linked with it by default, but if the user includes a &#x60;branched_from&#x60; attribute in their Draft Registration creation payload with the value of the &#x60;branched_from&#x60; being guid of a Project they have permissions for the Draft Registration will be linked to the Project. If you linked your Draft Registration on a Project, your original Project remains editable and will now have the Draft Registration linked to it.  #### Permissions Any user can create a Draft Registration. If the &#x60;branched_from&#x60; attribute is provided, then the user must be an ADMIN contributor on the Project being registered. #### Required Required fields for creating a Draft Registration include:  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x60;schema_id&#x60; #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the created Draft Registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsCreateTest() throws ApiException {
        DraftRegistration draftRegistration = null;
        DraftRegistration response = api.draftRegistrationsCreate(draftRegistration);
        // TODO: test validations
    }

    /**
     * Retreive a Contributor from a Draft Registration
     *
     * Retrieves the details of a given contributor.  Contributors are users who can view or edit to the Draft Registrations.  Contributors are categorized as either \&quot;bibliographic\&quot; or \&quot;non-bibliographic\&quot;. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsDraftIdContributorsUserIdGetTest() throws ApiException {
        String draftId = null;
        String userId = null;
        api.draftRegistrationsDraftIdContributorsUserIdGet(draftId, userId);
        // TODO: test validations
    }

    /**
     * Delete a draft registration
     *
     * Permanently deletes a draft registration. A draft that has already been registered cannot be deleted. #### Permissions Only draft registration contributors with ADMIN permissions may delete draft registrations #### Returns If the request is successful, no content is returned. If the request is unsuccessful, a JSON object with an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsDraftIdDeleteTest() throws ApiException {
        String draftId = null;
        api.draftRegistrationsDraftIdDelete(draftId);
        // TODO: test validations
    }

    /**
     * Retrieve a Draft Registration
     *
     * Retrieve the details of a given Draft Registration Draft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it&#39;s metadata edited.  If you based your Draft Registration on a Project, your original Project remains editable but will now have the Draft Registration linked to it. #### Permissions Only draft registration contributors may view draft registrations. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested draft registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsDraftIdGetTest() throws ApiException {
        String draftId = null;
        DraftRegistration response = api.draftRegistrationsDraftIdGet(draftId);
        // TODO: test validations
    }

    /**
     * Retrieve Institutions afilliated with a Draft Registration
     *
     * Once a properly authenticated user has marked their registration as affiliated with an institution, that institution and any others added will appear in this list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsDraftIdInstitutionsGetTest() throws ApiException {
        String draftId = null;
        Institution response = api.draftRegistrationsDraftIdInstitutionsGet(draftId);
        // TODO: test validations
    }

    /**
     * Update a Draft Registration
     *
     * Updates a Draft Registration by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged. Note this will not register or change the machine state of a Draft Registration, it can only edit the Draft Registration&#39;s attributes prior to its registration. #### Permissions Only draft registration contributors may view draft registrations and only draft registration contributors with WRITE or ADMIN permissions may update draft registrations. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the new representation of the updated draft registration, if the request is successful. If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsDraftIdPatchTest() throws ApiException {
        String draftId = null;
        Object body = null;
        api.draftRegistrationsDraftIdPatch(draftId, body);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Draft Registrations
     *
     * Retrieve a list of all currently available Draft Registrations for that user. #### Permissions Only Draft Registration contributors may view draft registrations. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested draft registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void draftRegistrationsReadTest() throws ApiException {
        DraftRegistration response = api.draftRegistrationsRead();
        // TODO: test validations
    }

    /**
     * Retrieve a Draft Registration
     *
     * Retrieve the details of a given draft registration. Draft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it&#39;s metadata edited.  Your original project remains editable but will now have the draft registration linked to it. #### Permissions Only project administrators may view draft registrations. #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested draft registration, if the request is successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodesDraftRegistrationsReadTest() throws ApiException {
        String nodeId = null;
        String draftId = null;
        DraftRegistration response = api.nodesDraftRegistrationsRead(nodeId, draftId);
        // TODO: test validations
    }

    /**
     * Retrieve Subjects associated with a Draft Registration
     *
     * This retrieves a list of subjects associated with a Draft Registration. Subjects are formatted here in a flat paginated list, but are hierarchical and nested by specificity of subject matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodesDraftRegistrationsSubjectsTest() throws ApiException {
        String draftId = null;
        Subject response = api.nodesDraftRegistrationsSubjects(draftId);
        // TODO: test validations
    }

}
