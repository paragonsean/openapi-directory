/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Comment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Delete a comment
     *
     * Deletes a comment. This action can be undone by setting deleted to False in a comment update request. #### Returns If the request is successful, no content is returned.  If the request is unsuccessful, a JSON object with an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsDeleteTest() throws ApiException {
        String commentId = null;
        api.commentsDelete(commentId);
        // TODO: test validations
    }

    /**
     * Update a comment
     *
     * Updates the specified comment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. #### Returns Returns JSON with a &#x60;data&#x60; key containing the new representation of the updated comment, if the request is successful.  If the request is unsuccessful, JSON with an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsPutTest() throws ApiException {
        String commentId = null;
        Object body = null;
        api.commentsPut(commentId, body);
        // TODO: test validations
    }

    /**
     * Retrieve a comment
     *
     * Retrieves the details of a comment #### Returns Returns a JSON object with a &#x60;data&#x60; key containing the representation of the requested comment, if the request was successful.  If the request is unsuccessful, an &#x60;errors&#x60; key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsReadTest() throws ApiException {
        String commentId = null;
        Comment response = api.commentsRead(commentId);
        // TODO: test validations
    }

}
