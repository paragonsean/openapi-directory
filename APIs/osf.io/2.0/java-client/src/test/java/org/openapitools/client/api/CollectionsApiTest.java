/*
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Collection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollectionsApi
 */
@Disabled
public class CollectionsApiTest {

    private final CollectionsApi api = new CollectionsApi();

    /**
     * Add Metadata or Subjects to a Entity in a Collection
     *
     * List of user created metadata for entities within a collection. #### Permissions To edit this collection a user must have collections write permissions #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsAddMetadataTest() throws ApiException {
        String collectionId = null;
        Object body = null;
        api.collectionsAddMetadata(collectionId, body);
        // TODO: test validations
    }

    /**
     * Retrieve subject data for a specific piece of metadata info for a collection
     *
     *  #### Permissions In order to view these subject it must be a public collection or a user must have read permissions for collection.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error, other then permissions errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsCollectedMetadataTest() throws ApiException {
        String collectionId = null;
        String cgmId = null;
        api.collectionsCollectedMetadata(collectionId, cgmId);
        // TODO: test validations
    }

    /**
     * Create a Collection
     *
     * Retrieves a list collections, either public or related to the user #### Permissions Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.  Comments on private nodes are only visible to contributors and administrators on the parent node. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of comment objects. Each resource in the array is a separate comment object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsCreateTest() throws ApiException {
        Object body = null;
        api.collectionsCreate(body);
        // TODO: test validations
    }

    /**
     * Delete a Collection
     *
     * Deletes a collection, if the user has appropriate permissions. #### Permissions Users must have write permissions on a collection in order to delete it #### Returns Nothing is returned in the body
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsDeleteTest() throws ApiException {
        String collectionId = null;
        api.collectionsDelete(collectionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Collection
     *
     * Retrieves a collection, if the user has appropriate permissions.  #### Permissions Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsDetailTest() throws ApiException {
        String collectionId = null;
        List<Collection> response = api.collectionsDetail(collectionId);
        // TODO: test validations
    }

    /**
     * List All Linked Nodes for a Collection
     *
     * List of all nodes linked to the given collection. #### Permissions This returns all public nodes associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedNodesListTest() throws ApiException {
        String collectionId = null;
        api.collectionsLinkedNodesList(collectionId);
        // TODO: test validations
    }

    /**
     * Link Nodes to Collection
     *
     * This endpoint allow users to a add a node to a collection by issuing a POST request. #### Permissions This returns all public nodes associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of comment objects. Each resource in the array is a separate comment object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedNodesRelationshipsTest() throws ApiException {
        String collectionId = null;
        Object body = null;
        api.collectionsLinkedNodesRelationships(collectionId, body);
        // TODO: test validations
    }

    /**
     * Give a Sparse List of Node Ids
     *
     * List of all the node ids linked to the given collection. #### Permissions This returns all public nodes associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedNodesRelationshipsCreateTest() throws ApiException {
        String collectionId = null;
        api.collectionsLinkedNodesRelationshipsCreate(collectionId);
        // TODO: test validations
    }

    /**
     * Remove Nodes From Collection
     *
     *  This removes associated nodes from a collection #### Permissions Any user with write permissions on this collection should be to remove nodes from this collection. #### Returns Nothing in the response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedNodesRelationshipsDeleteTest() throws ApiException {
        String collectionId = null;
        Object body = null;
        api.collectionsLinkedNodesRelationshipsDelete(collectionId, body);
        // TODO: test validations
    }

    /**
     * List All Linked Preprints for a Collection
     *
     * List of all preprints linked to the given collection. #### Permissions This returns all public preprints associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedPreprintsListTest() throws ApiException {
        String collectionId = null;
        api.collectionsLinkedPreprintsList(collectionId);
        // TODO: test validations
    }

    /**
     * List All Linked Registrations for a Collection
     *
     * List of all registrations linked to the given collection. #### Permissions This returns all public registrations associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of up to 10 nodes. Each resource in the array is a separate node object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedRegistrationsListTest() throws ApiException {
        String collectionId = null;
        api.collectionsLinkedRegistrationsList(collectionId);
        // TODO: test validations
    }

    /**
     * Link Registrations to Collection
     *
     * This endpoint allow users to a add a registration to a collection by issuing a POST request. #### Permissions This returns all public registrations associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of comment objects. Each resource in the array is a separate comment object.  The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedRegistrationsRelationshipsTest() throws ApiException {
        String collectionId = null;
        Object body = null;
        api.collectionsLinkedRegistrationsRelationships(collectionId, body);
        // TODO: test validations
    }

    /**
     * Give a Sparse List of Registrations Ids
     *
     * List of all the registration ids linked to the given collection. #### Permissions This returns all public registrations associated with this collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedRegistrationsRelationshipsCreateTest() throws ApiException {
        String collectionId = null;
        api.collectionsLinkedRegistrationsRelationshipsCreate(collectionId);
        // TODO: test validations
    }

    /**
     * Remove Registrations From Collection
     *
     *  This removes associated registrations from a collection #### Permissions Any user with write permissions on this collection should be to remove registrations from this collection. #### Returns Nothing in the response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsLinkedRegistrationsRelationshipsDeleteTest() throws ApiException {
        String collectionId = null;
        Object body = null;
        api.collectionsLinkedRegistrationsRelationshipsDelete(collectionId, body);
        // TODO: test validations
    }

    /**
     * List all Collections
     *
     * Retrieves a list collections, either public or related to the user #### Permissions Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.  Comments on private nodes are only visible to contributors and administrators on the parent node. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsListTest() throws ApiException {
        List<Collection> response = api.collectionsList();
        // TODO: test validations
    }

    /**
     * Delete Collection Metadata from entitiy
     *
     *  #### Permissions Only a user with collection admin permissions can delete collected metadata #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsMetadataDeleteTest() throws ApiException {
        String collectionId = null;
        String cgmId = null;
        api.collectionsMetadataDelete(collectionId, cgmId);
        // TODO: test validations
    }

    /**
     * Add Metadata or Subjects to an Entity in a Collection
     *
     * List of user created metadata for entities within a collection. #### Permissions To edit this collection a user must have collections write permissions #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsMetadataDetailTest() throws ApiException {
        String collectionId = null;
        String cgmId = null;
        Object body = null;
        api.collectionsMetadataDetail(collectionId, cgmId, body);
        // TODO: test validations
    }

    /**
     * Retrieve Specific Metadata for a Collection
     *
     *  #### Permissions In order to view this metadata it must be public or a user must have read permissions for collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsMetadataRegistrationsDetailTest() throws ApiException {
        String collectionId = null;
        String cgmId = null;
        api.collectionsMetadataRegistrationsDetail(collectionId, cgmId);
        // TODO: test validations
    }

    /**
     * Retrieve a list of collected metadata for a collection
     *
     * List of user created metadata for entities within a collection. #### Permissions In order to view this metadata it must be public or a user must have read permissions for collection. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination). #### Errors This request should never return an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsMetadataRegistrationsListTest() throws ApiException {
        String collectionId = null;
        api.collectionsMetadataRegistrationsList(collectionId);
        // TODO: test validations
    }

    /**
     * Retrieve subject metadata for a specific piece of metadata in a collection
     *
     *  #### Permissions This is public for a logged out user when an entity is public. #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsMetadataSubjectsRelationshipsTest() throws ApiException {
        String collectionId = null;
        String cgmId = null;
        api.collectionsMetadataSubjectsRelationships(collectionId, cgmId);
        // TODO: test validations
    }

    /**
     * Update subjects for a specific piece of metadata in a collection
     *
     *  #### Permissions This is editable for a user with a write permission for this collection.  #### Returns Returns a JSON object containing &#x60;data&#x60; and &#x60;links&#x60; keys.  The &#x60;data&#x60; key contains an array of nodes ids. The &#x60;links&#x60; key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionsMetadataSubjectsRelationshipsUpdateTest() throws ApiException {
        String collectionId = null;
        String cgmId = null;
        Object body = null;
        api.collectionsMetadataSubjectsRelationshipsUpdate(collectionId, cgmId, body);
        // TODO: test validations
    }

}
