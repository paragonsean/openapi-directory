/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_1::OAIAttributes_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_1::OAIAttributes_1() {
    this->initializeModel();
}

OAIAttributes_1::~OAIAttributes_1() {}

void OAIAttributes_1::initializeModel() {

    m_date_parsed_isSet = false;
    m_date_parsed_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAttributes_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_1::fromJsonObject(QJsonObject json) {

    m_date_parsed_isValid = ::OpenAPI::fromJsonValue(m_date_parsed, json[QString("date_parsed")]);
    m_date_parsed_isSet = !json[QString("date_parsed")].isNull() && m_date_parsed_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("short_title")]);
    m_short_title_isSet = !json[QString("short_title")].isNull() && m_short_title_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAttributes_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_1::asJsonObject() const {
    QJsonObject obj;
    if (m_date_parsed_isSet) {
        obj.insert(QString("date_parsed"), ::OpenAPI::toJsonValue(m_date_parsed));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("short_title"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIAttributes_1::getDateParsed() const {
    return m_date_parsed;
}
void OAIAttributes_1::setDateParsed(const QDateTime &date_parsed) {
    m_date_parsed = date_parsed;
    m_date_parsed_isSet = true;
}

bool OAIAttributes_1::is_date_parsed_Set() const{
    return m_date_parsed_isSet;
}

bool OAIAttributes_1::is_date_parsed_Valid() const{
    return m_date_parsed_isValid;
}

QString OAIAttributes_1::getShortTitle() const {
    return m_short_title;
}
void OAIAttributes_1::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAIAttributes_1::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAIAttributes_1::is_short_title_Valid() const{
    return m_short_title_isValid;
}

QString OAIAttributes_1::getSummary() const {
    return m_summary;
}
void OAIAttributes_1::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIAttributes_1::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIAttributes_1::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIAttributes_1::getTitle() const {
    return m_title;
}
void OAIAttributes_1::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttributes_1::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttributes_1::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAttributes_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_parsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_parsed_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
