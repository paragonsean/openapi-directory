/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_14.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_14::OAIAttributes_14(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_14::OAIAttributes_14() {
    this->initializeModel();
}

OAIAttributes_14::~OAIAttributes_14() {}

void OAIAttributes_14::initializeModel() {

    m_configured_isSet = false;
    m_configured_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_external_account_id_isSet = false;
    m_external_account_id_isValid = false;

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_node_has_auth_isSet = false;
    m_node_has_auth_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAttributes_14::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_14::fromJsonObject(QJsonObject json) {

    m_configured_isValid = ::OpenAPI::fromJsonValue(m_configured, json[QString("configured")]);
    m_configured_isSet = !json[QString("configured")].isNull() && m_configured_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_external_account_id_isValid = ::OpenAPI::fromJsonValue(m_external_account_id, json[QString("external_account_id")]);
    m_external_account_id_isSet = !json[QString("external_account_id")].isNull() && m_external_account_id_isValid;

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("folder_id")]);
    m_folder_id_isSet = !json[QString("folder_id")].isNull() && m_folder_id_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folder_path")]);
    m_folder_path_isSet = !json[QString("folder_path")].isNull() && m_folder_path_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_node_has_auth_isValid = ::OpenAPI::fromJsonValue(m_node_has_auth, json[QString("node_has_auth")]);
    m_node_has_auth_isSet = !json[QString("node_has_auth")].isNull() && m_node_has_auth_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAttributes_14::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_14::asJsonObject() const {
    QJsonObject obj;
    if (m_configured_isSet) {
        obj.insert(QString("configured"), ::OpenAPI::toJsonValue(m_configured));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_external_account_id_isSet) {
        obj.insert(QString("external_account_id"), ::OpenAPI::toJsonValue(m_external_account_id));
    }
    if (m_folder_id_isSet) {
        obj.insert(QString("folder_id"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folder_path"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_node_has_auth_isSet) {
        obj.insert(QString("node_has_auth"), ::OpenAPI::toJsonValue(m_node_has_auth));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIAttributes_14::isConfigured() const {
    return m_configured;
}
void OAIAttributes_14::setConfigured(const bool &configured) {
    m_configured = configured;
    m_configured_isSet = true;
}

bool OAIAttributes_14::is_configured_Set() const{
    return m_configured_isSet;
}

bool OAIAttributes_14::is_configured_Valid() const{
    return m_configured_isValid;
}

bool OAIAttributes_14::isEnabled() const {
    return m_enabled;
}
void OAIAttributes_14::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAttributes_14::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAttributes_14::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAttributes_14::getExternalAccountId() const {
    return m_external_account_id;
}
void OAIAttributes_14::setExternalAccountId(const QString &external_account_id) {
    m_external_account_id = external_account_id;
    m_external_account_id_isSet = true;
}

bool OAIAttributes_14::is_external_account_id_Set() const{
    return m_external_account_id_isSet;
}

bool OAIAttributes_14::is_external_account_id_Valid() const{
    return m_external_account_id_isValid;
}

QString OAIAttributes_14::getFolderId() const {
    return m_folder_id;
}
void OAIAttributes_14::setFolderId(const QString &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIAttributes_14::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIAttributes_14::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

QString OAIAttributes_14::getFolderPath() const {
    return m_folder_path;
}
void OAIAttributes_14::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIAttributes_14::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIAttributes_14::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

QString OAIAttributes_14::getLabel() const {
    return m_label;
}
void OAIAttributes_14::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAttributes_14::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAttributes_14::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIAttributes_14::isNodeHasAuth() const {
    return m_node_has_auth;
}
void OAIAttributes_14::setNodeHasAuth(const bool &node_has_auth) {
    m_node_has_auth = node_has_auth;
    m_node_has_auth_isSet = true;
}

bool OAIAttributes_14::is_node_has_auth_Set() const{
    return m_node_has_auth_isSet;
}

bool OAIAttributes_14::is_node_has_auth_Valid() const{
    return m_node_has_auth_isValid;
}

QString OAIAttributes_14::getUrl() const {
    return m_url;
}
void OAIAttributes_14::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAttributes_14::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAttributes_14::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAttributes_14::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_has_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_14::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
