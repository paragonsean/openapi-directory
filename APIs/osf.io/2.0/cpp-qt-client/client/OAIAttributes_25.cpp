/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_25.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_25::OAIAttributes_25(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_25::OAIAttributes_25() {
    this->initializeModel();
}

OAIAttributes_25::~OAIAttributes_25() {}

void OAIAttributes_25::initializeModel() {

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_date_submitted_isSet = false;
    m_date_submitted_isValid = false;

    m_is_original_response_isSet = false;
    m_is_original_response_isValid = false;

    m_is_pending_current_user_approval_isSet = false;
    m_is_pending_current_user_approval_isValid = false;

    m_reviews_state_isSet = false;
    m_reviews_state_isValid = false;

    m_revision_justification_isSet = false;
    m_revision_justification_isValid = false;

    m_revision_responses_isSet = false;
    m_revision_responses_isValid = false;

    m_updated_response_keys_isSet = false;
    m_updated_response_keys_isValid = false;
}

void OAIAttributes_25::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_25::fromJsonObject(QJsonObject json) {

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("date_modified")]);
    m_date_modified_isSet = !json[QString("date_modified")].isNull() && m_date_modified_isValid;

    m_date_submitted_isValid = ::OpenAPI::fromJsonValue(m_date_submitted, json[QString("date_submitted")]);
    m_date_submitted_isSet = !json[QString("date_submitted")].isNull() && m_date_submitted_isValid;

    m_is_original_response_isValid = ::OpenAPI::fromJsonValue(m_is_original_response, json[QString("is_original_response")]);
    m_is_original_response_isSet = !json[QString("is_original_response")].isNull() && m_is_original_response_isValid;

    m_is_pending_current_user_approval_isValid = ::OpenAPI::fromJsonValue(m_is_pending_current_user_approval, json[QString("is_pending_current_user_approval")]);
    m_is_pending_current_user_approval_isSet = !json[QString("is_pending_current_user_approval")].isNull() && m_is_pending_current_user_approval_isValid;

    m_reviews_state_isValid = ::OpenAPI::fromJsonValue(m_reviews_state, json[QString("reviews_state")]);
    m_reviews_state_isSet = !json[QString("reviews_state")].isNull() && m_reviews_state_isValid;

    m_revision_justification_isValid = ::OpenAPI::fromJsonValue(m_revision_justification, json[QString("revision_justification")]);
    m_revision_justification_isSet = !json[QString("revision_justification")].isNull() && m_revision_justification_isValid;

    m_revision_responses_isValid = ::OpenAPI::fromJsonValue(m_revision_responses, json[QString("revision_responses")]);
    m_revision_responses_isSet = !json[QString("revision_responses")].isNull() && m_revision_responses_isValid;

    m_updated_response_keys_isValid = ::OpenAPI::fromJsonValue(m_updated_response_keys, json[QString("updated_response_keys")]);
    m_updated_response_keys_isSet = !json[QString("updated_response_keys")].isNull() && m_updated_response_keys_isValid;
}

QString OAIAttributes_25::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_25::asJsonObject() const {
    QJsonObject obj;
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("date_modified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_date_submitted_isSet) {
        obj.insert(QString("date_submitted"), ::OpenAPI::toJsonValue(m_date_submitted));
    }
    if (m_is_original_response_isSet) {
        obj.insert(QString("is_original_response"), ::OpenAPI::toJsonValue(m_is_original_response));
    }
    if (m_is_pending_current_user_approval_isSet) {
        obj.insert(QString("is_pending_current_user_approval"), ::OpenAPI::toJsonValue(m_is_pending_current_user_approval));
    }
    if (m_reviews_state_isSet) {
        obj.insert(QString("reviews_state"), ::OpenAPI::toJsonValue(m_reviews_state));
    }
    if (m_revision_justification_isSet) {
        obj.insert(QString("revision_justification"), ::OpenAPI::toJsonValue(m_revision_justification));
    }
    if (m_revision_responses.size() > 0) {
        obj.insert(QString("revision_responses"), ::OpenAPI::toJsonValue(m_revision_responses));
    }
    if (m_updated_response_keys.size() > 0) {
        obj.insert(QString("updated_response_keys"), ::OpenAPI::toJsonValue(m_updated_response_keys));
    }
    return obj;
}

qint32 OAIAttributes_25::getDateCreated() const {
    return m_date_created;
}
void OAIAttributes_25::setDateCreated(const qint32 &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAttributes_25::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAttributes_25::is_date_created_Valid() const{
    return m_date_created_isValid;
}

qint32 OAIAttributes_25::getDateModified() const {
    return m_date_modified;
}
void OAIAttributes_25::setDateModified(const qint32 &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIAttributes_25::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIAttributes_25::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAIAttributes_25::getDateSubmitted() const {
    return m_date_submitted;
}
void OAIAttributes_25::setDateSubmitted(const qint32 &date_submitted) {
    m_date_submitted = date_submitted;
    m_date_submitted_isSet = true;
}

bool OAIAttributes_25::is_date_submitted_Set() const{
    return m_date_submitted_isSet;
}

bool OAIAttributes_25::is_date_submitted_Valid() const{
    return m_date_submitted_isValid;
}

bool OAIAttributes_25::isIsOriginalResponse() const {
    return m_is_original_response;
}
void OAIAttributes_25::setIsOriginalResponse(const bool &is_original_response) {
    m_is_original_response = is_original_response;
    m_is_original_response_isSet = true;
}

bool OAIAttributes_25::is_is_original_response_Set() const{
    return m_is_original_response_isSet;
}

bool OAIAttributes_25::is_is_original_response_Valid() const{
    return m_is_original_response_isValid;
}

bool OAIAttributes_25::isIsPendingCurrentUserApproval() const {
    return m_is_pending_current_user_approval;
}
void OAIAttributes_25::setIsPendingCurrentUserApproval(const bool &is_pending_current_user_approval) {
    m_is_pending_current_user_approval = is_pending_current_user_approval;
    m_is_pending_current_user_approval_isSet = true;
}

bool OAIAttributes_25::is_is_pending_current_user_approval_Set() const{
    return m_is_pending_current_user_approval_isSet;
}

bool OAIAttributes_25::is_is_pending_current_user_approval_Valid() const{
    return m_is_pending_current_user_approval_isValid;
}

QString OAIAttributes_25::getReviewsState() const {
    return m_reviews_state;
}
void OAIAttributes_25::setReviewsState(const QString &reviews_state) {
    m_reviews_state = reviews_state;
    m_reviews_state_isSet = true;
}

bool OAIAttributes_25::is_reviews_state_Set() const{
    return m_reviews_state_isSet;
}

bool OAIAttributes_25::is_reviews_state_Valid() const{
    return m_reviews_state_isValid;
}

QString OAIAttributes_25::getRevisionJustification() const {
    return m_revision_justification;
}
void OAIAttributes_25::setRevisionJustification(const QString &revision_justification) {
    m_revision_justification = revision_justification;
    m_revision_justification_isSet = true;
}

bool OAIAttributes_25::is_revision_justification_Set() const{
    return m_revision_justification_isSet;
}

bool OAIAttributes_25::is_revision_justification_Valid() const{
    return m_revision_justification_isValid;
}

QList<OAIObject> OAIAttributes_25::getRevisionResponses() const {
    return m_revision_responses;
}
void OAIAttributes_25::setRevisionResponses(const QList<OAIObject> &revision_responses) {
    m_revision_responses = revision_responses;
    m_revision_responses_isSet = true;
}

bool OAIAttributes_25::is_revision_responses_Set() const{
    return m_revision_responses_isSet;
}

bool OAIAttributes_25::is_revision_responses_Valid() const{
    return m_revision_responses_isValid;
}

QList<QJsonValue> OAIAttributes_25::getUpdatedResponseKeys() const {
    return m_updated_response_keys;
}
void OAIAttributes_25::setUpdatedResponseKeys(const QList<QJsonValue> &updated_response_keys) {
    m_updated_response_keys = updated_response_keys;
    m_updated_response_keys_isSet = true;
}

bool OAIAttributes_25::is_updated_response_keys_Set() const{
    return m_updated_response_keys_isSet;
}

bool OAIAttributes_25::is_updated_response_keys_Valid() const{
    return m_updated_response_keys_isValid;
}

bool OAIAttributes_25::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_submitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_original_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_current_user_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviews_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_justification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_response_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_25::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
