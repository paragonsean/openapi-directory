/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog_Params.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog_Params::OAILog_Params(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog_Params::OAILog_Params() {
    this->initializeModel();
}

OAILog_Params::~OAILog_Params() {}

void OAILog_Params::initializeModel() {

    m_addon_isSet = false;
    m_addon_isValid = false;

    m_anonymous_link_isSet = false;
    m_anonymous_link_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_citation_name_isSet = false;
    m_citation_name_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_data_set_isSet = false;
    m_data_set_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_figshare_title_isSet = false;
    m_figshare_title_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_folder_name_isSet = false;
    m_folder_name_isValid = false;

    m_forward_url_isSet = false;
    m_forward_url_isValid = false;

    m_github_repo_isSet = false;
    m_github_repo_isValid = false;

    m_github_user_isSet = false;
    m_github_user_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_institution_isSet = false;
    m_institution_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_old_page_isSet = false;
    m_old_page_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_id_isSet = false;
    m_page_id_isValid = false;

    m_params_node_isSet = false;
    m_params_node_isValid = false;

    m_params_project_isSet = false;
    m_params_project_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_pointer_isSet = false;
    m_pointer_isValid = false;

    m_preprint_isSet = false;
    m_preprint_isValid = false;

    m_preprint_provider_isSet = false;
    m_preprint_provider_isValid = false;

    m_previous_institution_isSet = false;
    m_previous_institution_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_study_isSet = false;
    m_study_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_template_node_isSet = false;
    m_template_node_isValid = false;

    m_title_new_isSet = false;
    m_title_new_isValid = false;

    m_title_original_isSet = false;
    m_title_original_isValid = false;

    m_updated_fields_isSet = false;
    m_updated_fields_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_wiki_isSet = false;
    m_wiki_isValid = false;
}

void OAILog_Params::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog_Params::fromJsonObject(QJsonObject json) {

    m_addon_isValid = ::OpenAPI::fromJsonValue(m_addon, json[QString("addon")]);
    m_addon_isSet = !json[QString("addon")].isNull() && m_addon_isValid;

    m_anonymous_link_isValid = ::OpenAPI::fromJsonValue(m_anonymous_link, json[QString("anonymous_link")]);
    m_anonymous_link_isSet = !json[QString("anonymous_link")].isNull() && m_anonymous_link_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_citation_name_isValid = ::OpenAPI::fromJsonValue(m_citation_name, json[QString("citation_name")]);
    m_citation_name_isSet = !json[QString("citation_name")].isNull() && m_citation_name_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_data_set_isValid = ::OpenAPI::fromJsonValue(m_data_set, json[QString("data_set")]);
    m_data_set_isSet = !json[QString("data_set")].isNull() && m_data_set_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_figshare_title_isValid = ::OpenAPI::fromJsonValue(m_figshare_title, json[QString("figshare_title")]);
    m_figshare_title_isSet = !json[QString("figshare_title")].isNull() && m_figshare_title_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_folder_name_isValid = ::OpenAPI::fromJsonValue(m_folder_name, json[QString("folder_name")]);
    m_folder_name_isSet = !json[QString("folder_name")].isNull() && m_folder_name_isValid;

    m_forward_url_isValid = ::OpenAPI::fromJsonValue(m_forward_url, json[QString("forward_url")]);
    m_forward_url_isSet = !json[QString("forward_url")].isNull() && m_forward_url_isValid;

    m_github_repo_isValid = ::OpenAPI::fromJsonValue(m_github_repo, json[QString("github_repo")]);
    m_github_repo_isSet = !json[QString("github_repo")].isNull() && m_github_repo_isValid;

    m_github_user_isValid = ::OpenAPI::fromJsonValue(m_github_user, json[QString("github_user")]);
    m_github_user_isSet = !json[QString("github_user")].isNull() && m_github_user_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_institution_isValid = ::OpenAPI::fromJsonValue(m_institution, json[QString("institution")]);
    m_institution_isSet = !json[QString("institution")].isNull() && m_institution_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_old_page_isValid = ::OpenAPI::fromJsonValue(m_old_page, json[QString("old_page")]);
    m_old_page_isSet = !json[QString("old_page")].isNull() && m_old_page_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_id_isValid = ::OpenAPI::fromJsonValue(m_page_id, json[QString("page_id")]);
    m_page_id_isSet = !json[QString("page_id")].isNull() && m_page_id_isValid;

    m_params_node_isValid = ::OpenAPI::fromJsonValue(m_params_node, json[QString("params_node")]);
    m_params_node_isSet = !json[QString("params_node")].isNull() && m_params_node_isValid;

    m_params_project_isValid = ::OpenAPI::fromJsonValue(m_params_project, json[QString("params_project")]);
    m_params_project_isSet = !json[QString("params_project")].isNull() && m_params_project_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_pointer_isValid = ::OpenAPI::fromJsonValue(m_pointer, json[QString("pointer")]);
    m_pointer_isSet = !json[QString("pointer")].isNull() && m_pointer_isValid;

    m_preprint_isValid = ::OpenAPI::fromJsonValue(m_preprint, json[QString("preprint")]);
    m_preprint_isSet = !json[QString("preprint")].isNull() && m_preprint_isValid;

    m_preprint_provider_isValid = ::OpenAPI::fromJsonValue(m_preprint_provider, json[QString("preprint_provider")]);
    m_preprint_provider_isSet = !json[QString("preprint_provider")].isNull() && m_preprint_provider_isValid;

    m_previous_institution_isValid = ::OpenAPI::fromJsonValue(m_previous_institution, json[QString("previous_institution")]);
    m_previous_institution_isSet = !json[QString("previous_institution")].isNull() && m_previous_institution_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_study_isValid = ::OpenAPI::fromJsonValue(m_study, json[QString("study")]);
    m_study_isSet = !json[QString("study")].isNull() && m_study_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_template_node_isValid = ::OpenAPI::fromJsonValue(m_template_node, json[QString("template_node")]);
    m_template_node_isSet = !json[QString("template_node")].isNull() && m_template_node_isValid;

    m_title_new_isValid = ::OpenAPI::fromJsonValue(m_title_new, json[QString("title_new")]);
    m_title_new_isSet = !json[QString("title_new")].isNull() && m_title_new_isValid;

    m_title_original_isValid = ::OpenAPI::fromJsonValue(m_title_original, json[QString("title_original")]);
    m_title_original_isSet = !json[QString("title_original")].isNull() && m_title_original_isValid;

    m_updated_fields_isValid = ::OpenAPI::fromJsonValue(m_updated_fields, json[QString("updated_fields")]);
    m_updated_fields_isSet = !json[QString("updated_fields")].isNull() && m_updated_fields_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_wiki_isValid = ::OpenAPI::fromJsonValue(m_wiki, json[QString("wiki")]);
    m_wiki_isSet = !json[QString("wiki")].isNull() && m_wiki_isValid;
}

QString OAILog_Params::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog_Params::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_isSet) {
        obj.insert(QString("addon"), ::OpenAPI::toJsonValue(m_addon));
    }
    if (m_anonymous_link_isSet) {
        obj.insert(QString("anonymous_link"), ::OpenAPI::toJsonValue(m_anonymous_link));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_citation_name_isSet) {
        obj.insert(QString("citation_name"), ::OpenAPI::toJsonValue(m_citation_name));
    }
    if (m_contributors_isSet) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_data_set_isSet) {
        obj.insert(QString("data_set"), ::OpenAPI::toJsonValue(m_data_set));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_figshare_title_isSet) {
        obj.insert(QString("figshare_title"), ::OpenAPI::toJsonValue(m_figshare_title));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_folder_isSet) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_folder_name_isSet) {
        obj.insert(QString("folder_name"), ::OpenAPI::toJsonValue(m_folder_name));
    }
    if (m_forward_url_isSet) {
        obj.insert(QString("forward_url"), ::OpenAPI::toJsonValue(m_forward_url));
    }
    if (m_github_repo_isSet) {
        obj.insert(QString("github_repo"), ::OpenAPI::toJsonValue(m_github_repo));
    }
    if (m_github_user_isSet) {
        obj.insert(QString("github_user"), ::OpenAPI::toJsonValue(m_github_user));
    }
    if (m_identifiers_isSet) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_institution_isSet) {
        obj.insert(QString("institution"), ::OpenAPI::toJsonValue(m_institution));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_old_page_isSet) {
        obj.insert(QString("old_page"), ::OpenAPI::toJsonValue(m_old_page));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_id_isSet) {
        obj.insert(QString("page_id"), ::OpenAPI::toJsonValue(m_page_id));
    }
    if (m_params_node_isSet) {
        obj.insert(QString("params_node"), ::OpenAPI::toJsonValue(m_params_node));
    }
    if (m_params_project_isSet) {
        obj.insert(QString("params_project"), ::OpenAPI::toJsonValue(m_params_project));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_pointer_isSet) {
        obj.insert(QString("pointer"), ::OpenAPI::toJsonValue(m_pointer));
    }
    if (m_preprint_isSet) {
        obj.insert(QString("preprint"), ::OpenAPI::toJsonValue(m_preprint));
    }
    if (m_preprint_provider_isSet) {
        obj.insert(QString("preprint_provider"), ::OpenAPI::toJsonValue(m_preprint_provider));
    }
    if (m_previous_institution_isSet) {
        obj.insert(QString("previous_institution"), ::OpenAPI::toJsonValue(m_previous_institution));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_study_isSet) {
        obj.insert(QString("study"), ::OpenAPI::toJsonValue(m_study));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_template_node_isSet) {
        obj.insert(QString("template_node"), ::OpenAPI::toJsonValue(m_template_node));
    }
    if (m_title_new_isSet) {
        obj.insert(QString("title_new"), ::OpenAPI::toJsonValue(m_title_new));
    }
    if (m_title_original_isSet) {
        obj.insert(QString("title_original"), ::OpenAPI::toJsonValue(m_title_original));
    }
    if (m_updated_fields_isSet) {
        obj.insert(QString("updated_fields"), ::OpenAPI::toJsonValue(m_updated_fields));
    }
    if (m_urls_isSet) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_wiki_isSet) {
        obj.insert(QString("wiki"), ::OpenAPI::toJsonValue(m_wiki));
    }
    return obj;
}

QString OAILog_Params::getAddon() const {
    return m_addon;
}
void OAILog_Params::setAddon(const QString &addon) {
    m_addon = addon;
    m_addon_isSet = true;
}

bool OAILog_Params::is_addon_Set() const{
    return m_addon_isSet;
}

bool OAILog_Params::is_addon_Valid() const{
    return m_addon_isValid;
}

bool OAILog_Params::isAnonymousLink() const {
    return m_anonymous_link;
}
void OAILog_Params::setAnonymousLink(const bool &anonymous_link) {
    m_anonymous_link = anonymous_link;
    m_anonymous_link_isSet = true;
}

bool OAILog_Params::is_anonymous_link_Set() const{
    return m_anonymous_link_isSet;
}

bool OAILog_Params::is_anonymous_link_Valid() const{
    return m_anonymous_link_isValid;
}

QString OAILog_Params::getBucket() const {
    return m_bucket;
}
void OAILog_Params::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAILog_Params::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAILog_Params::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAILog_Params::getCitationName() const {
    return m_citation_name;
}
void OAILog_Params::setCitationName(const QString &citation_name) {
    m_citation_name = citation_name;
    m_citation_name_isSet = true;
}

bool OAILog_Params::is_citation_name_Set() const{
    return m_citation_name_isSet;
}

bool OAILog_Params::is_citation_name_Valid() const{
    return m_citation_name_isValid;
}

QString OAILog_Params::getContributors() const {
    return m_contributors;
}
void OAILog_Params::setContributors(const QString &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAILog_Params::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAILog_Params::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QString OAILog_Params::getDataSet() const {
    return m_data_set;
}
void OAILog_Params::setDataSet(const QString &data_set) {
    m_data_set = data_set;
    m_data_set_isSet = true;
}

bool OAILog_Params::is_data_set_Set() const{
    return m_data_set_isSet;
}

bool OAILog_Params::is_data_set_Valid() const{
    return m_data_set_isValid;
}

QString OAILog_Params::getDestination() const {
    return m_destination;
}
void OAILog_Params::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAILog_Params::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAILog_Params::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAILog_Params::getFigshareTitle() const {
    return m_figshare_title;
}
void OAILog_Params::setFigshareTitle(const QString &figshare_title) {
    m_figshare_title = figshare_title;
    m_figshare_title_isSet = true;
}

bool OAILog_Params::is_figshare_title_Set() const{
    return m_figshare_title_isSet;
}

bool OAILog_Params::is_figshare_title_Valid() const{
    return m_figshare_title_isValid;
}

QString OAILog_Params::getFile() const {
    return m_file;
}
void OAILog_Params::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAILog_Params::is_file_Set() const{
    return m_file_isSet;
}

bool OAILog_Params::is_file_Valid() const{
    return m_file_isValid;
}

QString OAILog_Params::getFilename() const {
    return m_filename;
}
void OAILog_Params::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAILog_Params::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAILog_Params::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAILog_Params::getFolder() const {
    return m_folder;
}
void OAILog_Params::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAILog_Params::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAILog_Params::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAILog_Params::getFolderName() const {
    return m_folder_name;
}
void OAILog_Params::setFolderName(const QString &folder_name) {
    m_folder_name = folder_name;
    m_folder_name_isSet = true;
}

bool OAILog_Params::is_folder_name_Set() const{
    return m_folder_name_isSet;
}

bool OAILog_Params::is_folder_name_Valid() const{
    return m_folder_name_isValid;
}

QString OAILog_Params::getForwardUrl() const {
    return m_forward_url;
}
void OAILog_Params::setForwardUrl(const QString &forward_url) {
    m_forward_url = forward_url;
    m_forward_url_isSet = true;
}

bool OAILog_Params::is_forward_url_Set() const{
    return m_forward_url_isSet;
}

bool OAILog_Params::is_forward_url_Valid() const{
    return m_forward_url_isValid;
}

QString OAILog_Params::getGithubRepo() const {
    return m_github_repo;
}
void OAILog_Params::setGithubRepo(const QString &github_repo) {
    m_github_repo = github_repo;
    m_github_repo_isSet = true;
}

bool OAILog_Params::is_github_repo_Set() const{
    return m_github_repo_isSet;
}

bool OAILog_Params::is_github_repo_Valid() const{
    return m_github_repo_isValid;
}

QString OAILog_Params::getGithubUser() const {
    return m_github_user;
}
void OAILog_Params::setGithubUser(const QString &github_user) {
    m_github_user = github_user;
    m_github_user_isSet = true;
}

bool OAILog_Params::is_github_user_Set() const{
    return m_github_user_isSet;
}

bool OAILog_Params::is_github_user_Valid() const{
    return m_github_user_isValid;
}

QString OAILog_Params::getIdentifiers() const {
    return m_identifiers;
}
void OAILog_Params::setIdentifiers(const QString &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAILog_Params::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAILog_Params::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAILog_Params::getInstitution() const {
    return m_institution;
}
void OAILog_Params::setInstitution(const QString &institution) {
    m_institution = institution;
    m_institution_isSet = true;
}

bool OAILog_Params::is_institution_Set() const{
    return m_institution_isSet;
}

bool OAILog_Params::is_institution_Valid() const{
    return m_institution_isValid;
}

QString OAILog_Params::getKind() const {
    return m_kind;
}
void OAILog_Params::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILog_Params::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILog_Params::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAILog_Params::getLicense() const {
    return m_license;
}
void OAILog_Params::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAILog_Params::is_license_Set() const{
    return m_license_isSet;
}

bool OAILog_Params::is_license_Valid() const{
    return m_license_isValid;
}

QString OAILog_Params::getOldPage() const {
    return m_old_page;
}
void OAILog_Params::setOldPage(const QString &old_page) {
    m_old_page = old_page;
    m_old_page_isSet = true;
}

bool OAILog_Params::is_old_page_Set() const{
    return m_old_page_isSet;
}

bool OAILog_Params::is_old_page_Valid() const{
    return m_old_page_isValid;
}

QString OAILog_Params::getPage() const {
    return m_page;
}
void OAILog_Params::setPage(const QString &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAILog_Params::is_page_Set() const{
    return m_page_isSet;
}

bool OAILog_Params::is_page_Valid() const{
    return m_page_isValid;
}

QString OAILog_Params::getPageId() const {
    return m_page_id;
}
void OAILog_Params::setPageId(const QString &page_id) {
    m_page_id = page_id;
    m_page_id_isSet = true;
}

bool OAILog_Params::is_page_id_Set() const{
    return m_page_id_isSet;
}

bool OAILog_Params::is_page_id_Valid() const{
    return m_page_id_isValid;
}

QString OAILog_Params::getParamsNode() const {
    return m_params_node;
}
void OAILog_Params::setParamsNode(const QString &params_node) {
    m_params_node = params_node;
    m_params_node_isSet = true;
}

bool OAILog_Params::is_params_node_Set() const{
    return m_params_node_isSet;
}

bool OAILog_Params::is_params_node_Valid() const{
    return m_params_node_isValid;
}

QString OAILog_Params::getParamsProject() const {
    return m_params_project;
}
void OAILog_Params::setParamsProject(const QString &params_project) {
    m_params_project = params_project;
    m_params_project_isSet = true;
}

bool OAILog_Params::is_params_project_Set() const{
    return m_params_project_isSet;
}

bool OAILog_Params::is_params_project_Valid() const{
    return m_params_project_isValid;
}

QString OAILog_Params::getPath() const {
    return m_path;
}
void OAILog_Params::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAILog_Params::is_path_Set() const{
    return m_path_isSet;
}

bool OAILog_Params::is_path_Valid() const{
    return m_path_isValid;
}

QString OAILog_Params::getPointer() const {
    return m_pointer;
}
void OAILog_Params::setPointer(const QString &pointer) {
    m_pointer = pointer;
    m_pointer_isSet = true;
}

bool OAILog_Params::is_pointer_Set() const{
    return m_pointer_isSet;
}

bool OAILog_Params::is_pointer_Valid() const{
    return m_pointer_isValid;
}

QString OAILog_Params::getPreprint() const {
    return m_preprint;
}
void OAILog_Params::setPreprint(const QString &preprint) {
    m_preprint = preprint;
    m_preprint_isSet = true;
}

bool OAILog_Params::is_preprint_Set() const{
    return m_preprint_isSet;
}

bool OAILog_Params::is_preprint_Valid() const{
    return m_preprint_isValid;
}

QString OAILog_Params::getPreprintProvider() const {
    return m_preprint_provider;
}
void OAILog_Params::setPreprintProvider(const QString &preprint_provider) {
    m_preprint_provider = preprint_provider;
    m_preprint_provider_isSet = true;
}

bool OAILog_Params::is_preprint_provider_Set() const{
    return m_preprint_provider_isSet;
}

bool OAILog_Params::is_preprint_provider_Valid() const{
    return m_preprint_provider_isValid;
}

QString OAILog_Params::getPreviousInstitution() const {
    return m_previous_institution;
}
void OAILog_Params::setPreviousInstitution(const QString &previous_institution) {
    m_previous_institution = previous_institution;
    m_previous_institution_isSet = true;
}

bool OAILog_Params::is_previous_institution_Set() const{
    return m_previous_institution_isSet;
}

bool OAILog_Params::is_previous_institution_Valid() const{
    return m_previous_institution_isValid;
}

QString OAILog_Params::getSource() const {
    return m_source;
}
void OAILog_Params::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILog_Params::is_source_Set() const{
    return m_source_isSet;
}

bool OAILog_Params::is_source_Valid() const{
    return m_source_isValid;
}

QString OAILog_Params::getStudy() const {
    return m_study;
}
void OAILog_Params::setStudy(const QString &study) {
    m_study = study;
    m_study_isSet = true;
}

bool OAILog_Params::is_study_Set() const{
    return m_study_isSet;
}

bool OAILog_Params::is_study_Valid() const{
    return m_study_isValid;
}

QString OAILog_Params::getTag() const {
    return m_tag;
}
void OAILog_Params::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAILog_Params::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAILog_Params::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAILog_Params::getTags() const {
    return m_tags;
}
void OAILog_Params::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAILog_Params::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAILog_Params::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAILog_Params::getTarget() const {
    return m_target;
}
void OAILog_Params::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAILog_Params::is_target_Set() const{
    return m_target_isSet;
}

bool OAILog_Params::is_target_Valid() const{
    return m_target_isValid;
}

QString OAILog_Params::getTemplateNode() const {
    return m_template_node;
}
void OAILog_Params::setTemplateNode(const QString &template_node) {
    m_template_node = template_node;
    m_template_node_isSet = true;
}

bool OAILog_Params::is_template_node_Set() const{
    return m_template_node_isSet;
}

bool OAILog_Params::is_template_node_Valid() const{
    return m_template_node_isValid;
}

QString OAILog_Params::getTitleNew() const {
    return m_title_new;
}
void OAILog_Params::setTitleNew(const QString &title_new) {
    m_title_new = title_new;
    m_title_new_isSet = true;
}

bool OAILog_Params::is_title_new_Set() const{
    return m_title_new_isSet;
}

bool OAILog_Params::is_title_new_Valid() const{
    return m_title_new_isValid;
}

QString OAILog_Params::getTitleOriginal() const {
    return m_title_original;
}
void OAILog_Params::setTitleOriginal(const QString &title_original) {
    m_title_original = title_original;
    m_title_original_isSet = true;
}

bool OAILog_Params::is_title_original_Set() const{
    return m_title_original_isSet;
}

bool OAILog_Params::is_title_original_Valid() const{
    return m_title_original_isValid;
}

QString OAILog_Params::getUpdatedFields() const {
    return m_updated_fields;
}
void OAILog_Params::setUpdatedFields(const QString &updated_fields) {
    m_updated_fields = updated_fields;
    m_updated_fields_isSet = true;
}

bool OAILog_Params::is_updated_fields_Set() const{
    return m_updated_fields_isSet;
}

bool OAILog_Params::is_updated_fields_Valid() const{
    return m_updated_fields_isValid;
}

QString OAILog_Params::getUrls() const {
    return m_urls;
}
void OAILog_Params::setUrls(const QString &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAILog_Params::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAILog_Params::is_urls_Valid() const{
    return m_urls_isValid;
}

QString OAILog_Params::getVersion() const {
    return m_version;
}
void OAILog_Params::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAILog_Params::is_version_Set() const{
    return m_version_isSet;
}

bool OAILog_Params::is_version_Valid() const{
    return m_version_isValid;
}

QString OAILog_Params::getWiki() const {
    return m_wiki;
}
void OAILog_Params::setWiki(const QString &wiki) {
    m_wiki = wiki;
    m_wiki_isSet = true;
}

bool OAILog_Params::is_wiki_Set() const{
    return m_wiki_isSet;
}

bool OAILog_Params::is_wiki_Valid() const{
    return m_wiki_isValid;
}

bool OAILog_Params::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymous_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_figshare_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pointer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprint_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_institution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog_Params::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
