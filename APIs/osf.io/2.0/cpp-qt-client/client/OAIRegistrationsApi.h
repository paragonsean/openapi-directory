/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrationsApi_H
#define OAI_OAIRegistrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICitation_Detail.h"
#include "OAICitation_Style.h"
#include "OAIComment.h"
#include "OAIContributor.h"
#include "OAIFile.h"
#include "OAIIdentifier.h"
#include "OAIInstitution.h"
#include "OAILog.h"
#include "OAINode.h"
#include "OAIRegistration.h"
#include "OAIView_only_links.h"
#include "OAIWiki.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrationsApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrationsApi(const int timeOut = 0);
    ~OAIRegistrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsChildrenList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  citation_id QString [required]
    */
    virtual void registrationsCitationRead(const QString &registration_id, const QString &citation_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsCitationsList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsCommentsList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsContributorsList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void registrationsContributorsRead(const QString &registration_id, const QString &user_id);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void registrationsFilesList(const QString &registration_id, const QString &provider);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  path QString [required]
    */
    virtual void registrationsFilesRead(const QString &registration_id, const QString &provider, const QString &path);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  oai_registration OAIRegistration [required]
    */
    virtual void registrationsForksCreate(const QString &registration_id, const OAIRegistration &oai_registration);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsForksList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsIdentifiersList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsInstitutionsList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsLinkedNodesList(const QString &registration_id);


    virtual void registrationsList();

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsLogsList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  oai_registration OAIRegistration [required]
    */
    virtual void registrationsPartialUpdate(const QString &registration_id, const OAIRegistration &oai_registration);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsProvidersList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsRead(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsViewOnlyLinksList(const QString &registration_id);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  link_id QString [required]
    */
    virtual void registrationsViewOnlyLinksRead(const QString &registration_id, const QString &link_id);

    /**
    * @param[in]  registration_id QString [required]
    */
    virtual void registrationsWikisList(const QString &registration_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void registrationsChildrenListCallback(OAIHttpRequestWorker *worker);
    void registrationsCitationReadCallback(OAIHttpRequestWorker *worker);
    void registrationsCitationsListCallback(OAIHttpRequestWorker *worker);
    void registrationsCommentsListCallback(OAIHttpRequestWorker *worker);
    void registrationsContributorsListCallback(OAIHttpRequestWorker *worker);
    void registrationsContributorsReadCallback(OAIHttpRequestWorker *worker);
    void registrationsFilesListCallback(OAIHttpRequestWorker *worker);
    void registrationsFilesReadCallback(OAIHttpRequestWorker *worker);
    void registrationsForksCreateCallback(OAIHttpRequestWorker *worker);
    void registrationsForksListCallback(OAIHttpRequestWorker *worker);
    void registrationsIdentifiersListCallback(OAIHttpRequestWorker *worker);
    void registrationsInstitutionsListCallback(OAIHttpRequestWorker *worker);
    void registrationsLinkedNodesListCallback(OAIHttpRequestWorker *worker);
    void registrationsListCallback(OAIHttpRequestWorker *worker);
    void registrationsLogsListCallback(OAIHttpRequestWorker *worker);
    void registrationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void registrationsProvidersListCallback(OAIHttpRequestWorker *worker);
    void registrationsReadCallback(OAIHttpRequestWorker *worker);
    void registrationsViewOnlyLinksListCallback(OAIHttpRequestWorker *worker);
    void registrationsViewOnlyLinksReadCallback(OAIHttpRequestWorker *worker);
    void registrationsWikisListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void registrationsChildrenListSignal(QList<OAIRegistration> summary);
    void registrationsCitationReadSignal(OAICitation_Detail summary);
    void registrationsCitationsListSignal(QList<OAICitation_Style> summary);
    void registrationsCommentsListSignal(QList<OAIComment> summary);
    void registrationsContributorsListSignal(QList<OAIContributor> summary);
    void registrationsContributorsReadSignal(QList<OAIContributor> summary);
    void registrationsFilesListSignal(QList<OAIFile> summary);
    void registrationsFilesReadSignal(OAIFile summary);
    void registrationsForksCreateSignal();
    void registrationsForksListSignal(QList<OAIRegistration> summary);
    void registrationsIdentifiersListSignal(QList<OAIIdentifier> summary);
    void registrationsInstitutionsListSignal(QList<OAIInstitution> summary);
    void registrationsLinkedNodesListSignal(QList<OAINode> summary);
    void registrationsListSignal(QList<OAIRegistration> summary);
    void registrationsLogsListSignal(QList<OAILog> summary);
    void registrationsPartialUpdateSignal();
    void registrationsProvidersListSignal(QList<OAIFile> summary);
    void registrationsReadSignal(OAIRegistration summary);
    void registrationsViewOnlyLinksListSignal(QList<OAIView_only_links> summary);
    void registrationsViewOnlyLinksReadSignal(OAIView_only_links summary);
    void registrationsWikisListSignal(QList<OAIWiki> summary);


    void registrationsChildrenListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistration> summary);
    void registrationsCitationReadSignalFull(OAIHttpRequestWorker *worker, OAICitation_Detail summary);
    void registrationsCitationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICitation_Style> summary);
    void registrationsCommentsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void registrationsContributorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor> summary);
    void registrationsContributorsReadSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor> summary);
    void registrationsFilesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFile> summary);
    void registrationsFilesReadSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void registrationsForksCreateSignalFull(OAIHttpRequestWorker *worker);
    void registrationsForksListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistration> summary);
    void registrationsIdentifiersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIIdentifier> summary);
    void registrationsInstitutionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstitution> summary);
    void registrationsLinkedNodesListSignalFull(OAIHttpRequestWorker *worker, QList<OAINode> summary);
    void registrationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistration> summary);
    void registrationsLogsListSignalFull(OAIHttpRequestWorker *worker, QList<OAILog> summary);
    void registrationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker);
    void registrationsProvidersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFile> summary);
    void registrationsReadSignalFull(OAIHttpRequestWorker *worker, OAIRegistration summary);
    void registrationsViewOnlyLinksListSignalFull(OAIHttpRequestWorker *worker, QList<OAIView_only_links> summary);
    void registrationsViewOnlyLinksReadSignalFull(OAIHttpRequestWorker *worker, OAIView_only_links summary);
    void registrationsWikisListSignalFull(OAIHttpRequestWorker *worker, QList<OAIWiki> summary);

    Q_DECL_DEPRECATED_X("Use registrationsChildrenListSignalError() instead")
    void registrationsChildrenListSignalE(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsChildrenListSignalError(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsCitationReadSignalError() instead")
    void registrationsCitationReadSignalE(OAICitation_Detail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCitationReadSignalError(OAICitation_Detail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsCitationsListSignalError() instead")
    void registrationsCitationsListSignalE(QList<OAICitation_Style> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCitationsListSignalError(QList<OAICitation_Style> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsCommentsListSignalError() instead")
    void registrationsCommentsListSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCommentsListSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsContributorsListSignalError() instead")
    void registrationsContributorsListSignalE(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsContributorsListSignalError(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsContributorsReadSignalError() instead")
    void registrationsContributorsReadSignalE(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsContributorsReadSignalError(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsFilesListSignalError() instead")
    void registrationsFilesListSignalE(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsFilesListSignalError(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsFilesReadSignalError() instead")
    void registrationsFilesReadSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsFilesReadSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsForksCreateSignalError() instead")
    void registrationsForksCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsForksCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsForksListSignalError() instead")
    void registrationsForksListSignalE(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsForksListSignalError(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsIdentifiersListSignalError() instead")
    void registrationsIdentifiersListSignalE(QList<OAIIdentifier> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsIdentifiersListSignalError(QList<OAIIdentifier> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsInstitutionsListSignalError() instead")
    void registrationsInstitutionsListSignalE(QList<OAIInstitution> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsInstitutionsListSignalError(QList<OAIInstitution> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsLinkedNodesListSignalError() instead")
    void registrationsLinkedNodesListSignalE(QList<OAINode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsLinkedNodesListSignalError(QList<OAINode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsListSignalError() instead")
    void registrationsListSignalE(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsListSignalError(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsLogsListSignalError() instead")
    void registrationsLogsListSignalE(QList<OAILog> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsLogsListSignalError(QList<OAILog> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsPartialUpdateSignalError() instead")
    void registrationsPartialUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsPartialUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsProvidersListSignalError() instead")
    void registrationsProvidersListSignalE(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsProvidersListSignalError(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsReadSignalError() instead")
    void registrationsReadSignalE(OAIRegistration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsReadSignalError(OAIRegistration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsViewOnlyLinksListSignalError() instead")
    void registrationsViewOnlyLinksListSignalE(QList<OAIView_only_links> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsViewOnlyLinksListSignalError(QList<OAIView_only_links> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsViewOnlyLinksReadSignalError() instead")
    void registrationsViewOnlyLinksReadSignalE(OAIView_only_links summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsViewOnlyLinksReadSignalError(OAIView_only_links summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsWikisListSignalError() instead")
    void registrationsWikisListSignalE(QList<OAIWiki> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsWikisListSignalError(QList<OAIWiki> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use registrationsChildrenListSignalErrorFull() instead")
    void registrationsChildrenListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsChildrenListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsCitationReadSignalErrorFull() instead")
    void registrationsCitationReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCitationReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsCitationsListSignalErrorFull() instead")
    void registrationsCitationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCitationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsCommentsListSignalErrorFull() instead")
    void registrationsCommentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCommentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsContributorsListSignalErrorFull() instead")
    void registrationsContributorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsContributorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsContributorsReadSignalErrorFull() instead")
    void registrationsContributorsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsContributorsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsFilesListSignalErrorFull() instead")
    void registrationsFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsFilesReadSignalErrorFull() instead")
    void registrationsFilesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsFilesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsForksCreateSignalErrorFull() instead")
    void registrationsForksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsForksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsForksListSignalErrorFull() instead")
    void registrationsForksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsForksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsIdentifiersListSignalErrorFull() instead")
    void registrationsIdentifiersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsIdentifiersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsInstitutionsListSignalErrorFull() instead")
    void registrationsInstitutionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsInstitutionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsLinkedNodesListSignalErrorFull() instead")
    void registrationsLinkedNodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsLinkedNodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsListSignalErrorFull() instead")
    void registrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsLogsListSignalErrorFull() instead")
    void registrationsLogsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsLogsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsPartialUpdateSignalErrorFull() instead")
    void registrationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsProvidersListSignalErrorFull() instead")
    void registrationsProvidersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsProvidersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsReadSignalErrorFull() instead")
    void registrationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsViewOnlyLinksListSignalErrorFull() instead")
    void registrationsViewOnlyLinksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsViewOnlyLinksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsViewOnlyLinksReadSignalErrorFull() instead")
    void registrationsViewOnlyLinksReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsViewOnlyLinksReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsWikisListSignalErrorFull() instead")
    void registrationsWikisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsWikisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
