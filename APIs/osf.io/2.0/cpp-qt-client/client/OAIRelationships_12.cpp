/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_12.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_12::OAIRelationships_12(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_12::OAIRelationships_12() {
    this->initializeModel();
}

OAIRelationships_12::~OAIRelationships_12() {}

void OAIRelationships_12::initializeModel() {

    m_affiliated_institutions_isSet = false;
    m_affiliated_institutions_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_citation_isSet = false;
    m_citation_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_forks_isSet = false;
    m_forks_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_linked_nodes_isSet = false;
    m_linked_nodes_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_node_links_isSet = false;
    m_node_links_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_registered_by_isSet = false;
    m_registered_by_isValid = false;

    m_registered_from_isSet = false;
    m_registered_from_isValid = false;

    m_registration_schema_isSet = false;
    m_registration_schema_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_view_only_links_isSet = false;
    m_view_only_links_isValid = false;

    m_wikis_isSet = false;
    m_wikis_isValid = false;
}

void OAIRelationships_12::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_12::fromJsonObject(QJsonObject json) {

    m_affiliated_institutions_isValid = ::OpenAPI::fromJsonValue(m_affiliated_institutions, json[QString("affiliated_institutions")]);
    m_affiliated_institutions_isSet = !json[QString("affiliated_institutions")].isNull() && m_affiliated_institutions_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_citation_isValid = ::OpenAPI::fromJsonValue(m_citation, json[QString("citation")]);
    m_citation_isSet = !json[QString("citation")].isNull() && m_citation_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_forks_isValid = ::OpenAPI::fromJsonValue(m_forks, json[QString("forks")]);
    m_forks_isSet = !json[QString("forks")].isNull() && m_forks_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_linked_nodes_isValid = ::OpenAPI::fromJsonValue(m_linked_nodes, json[QString("linked_nodes")]);
    m_linked_nodes_isSet = !json[QString("linked_nodes")].isNull() && m_linked_nodes_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_node_links_isValid = ::OpenAPI::fromJsonValue(m_node_links, json[QString("node_links")]);
    m_node_links_isSet = !json[QString("node_links")].isNull() && m_node_links_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_registered_by_isValid = ::OpenAPI::fromJsonValue(m_registered_by, json[QString("registered_by")]);
    m_registered_by_isSet = !json[QString("registered_by")].isNull() && m_registered_by_isValid;

    m_registered_from_isValid = ::OpenAPI::fromJsonValue(m_registered_from, json[QString("registered_from")]);
    m_registered_from_isSet = !json[QString("registered_from")].isNull() && m_registered_from_isValid;

    m_registration_schema_isValid = ::OpenAPI::fromJsonValue(m_registration_schema, json[QString("registration_schema")]);
    m_registration_schema_isSet = !json[QString("registration_schema")].isNull() && m_registration_schema_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_view_only_links_isValid = ::OpenAPI::fromJsonValue(m_view_only_links, json[QString("view_only_links")]);
    m_view_only_links_isSet = !json[QString("view_only_links")].isNull() && m_view_only_links_isValid;

    m_wikis_isValid = ::OpenAPI::fromJsonValue(m_wikis, json[QString("wikis")]);
    m_wikis_isSet = !json[QString("wikis")].isNull() && m_wikis_isValid;
}

QString OAIRelationships_12::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_12::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliated_institutions_isSet) {
        obj.insert(QString("affiliated_institutions"), ::OpenAPI::toJsonValue(m_affiliated_institutions));
    }
    if (m_children_isSet) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_citation_isSet) {
        obj.insert(QString("citation"), ::OpenAPI::toJsonValue(m_citation));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_contributors_isSet) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_files_isSet) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_forks_isSet) {
        obj.insert(QString("forks"), ::OpenAPI::toJsonValue(m_forks));
    }
    if (m_identifiers_isSet) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_linked_nodes_isSet) {
        obj.insert(QString("linked_nodes"), ::OpenAPI::toJsonValue(m_linked_nodes));
    }
    if (m_logs_isSet) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_node_links_isSet) {
        obj.insert(QString("node_links"), ::OpenAPI::toJsonValue(m_node_links));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_registered_by_isSet) {
        obj.insert(QString("registered_by"), ::OpenAPI::toJsonValue(m_registered_by));
    }
    if (m_registered_from_isSet) {
        obj.insert(QString("registered_from"), ::OpenAPI::toJsonValue(m_registered_from));
    }
    if (m_registration_schema_isSet) {
        obj.insert(QString("registration_schema"), ::OpenAPI::toJsonValue(m_registration_schema));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_view_only_links_isSet) {
        obj.insert(QString("view_only_links"), ::OpenAPI::toJsonValue(m_view_only_links));
    }
    if (m_wikis_isSet) {
        obj.insert(QString("wikis"), ::OpenAPI::toJsonValue(m_wikis));
    }
    return obj;
}

QString OAIRelationships_12::getAffiliatedInstitutions() const {
    return m_affiliated_institutions;
}
void OAIRelationships_12::setAffiliatedInstitutions(const QString &affiliated_institutions) {
    m_affiliated_institutions = affiliated_institutions;
    m_affiliated_institutions_isSet = true;
}

bool OAIRelationships_12::is_affiliated_institutions_Set() const{
    return m_affiliated_institutions_isSet;
}

bool OAIRelationships_12::is_affiliated_institutions_Valid() const{
    return m_affiliated_institutions_isValid;
}

QString OAIRelationships_12::getChildren() const {
    return m_children;
}
void OAIRelationships_12::setChildren(const QString &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIRelationships_12::is_children_Set() const{
    return m_children_isSet;
}

bool OAIRelationships_12::is_children_Valid() const{
    return m_children_isValid;
}

QString OAIRelationships_12::getCitation() const {
    return m_citation;
}
void OAIRelationships_12::setCitation(const QString &citation) {
    m_citation = citation;
    m_citation_isSet = true;
}

bool OAIRelationships_12::is_citation_Set() const{
    return m_citation_isSet;
}

bool OAIRelationships_12::is_citation_Valid() const{
    return m_citation_isValid;
}

QString OAIRelationships_12::getComments() const {
    return m_comments;
}
void OAIRelationships_12::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIRelationships_12::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIRelationships_12::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIRelationships_12::getContributors() const {
    return m_contributors;
}
void OAIRelationships_12::setContributors(const QString &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAIRelationships_12::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAIRelationships_12::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QString OAIRelationships_12::getFiles() const {
    return m_files;
}
void OAIRelationships_12::setFiles(const QString &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIRelationships_12::is_files_Set() const{
    return m_files_isSet;
}

bool OAIRelationships_12::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIRelationships_12::getForks() const {
    return m_forks;
}
void OAIRelationships_12::setForks(const QString &forks) {
    m_forks = forks;
    m_forks_isSet = true;
}

bool OAIRelationships_12::is_forks_Set() const{
    return m_forks_isSet;
}

bool OAIRelationships_12::is_forks_Valid() const{
    return m_forks_isValid;
}

QString OAIRelationships_12::getIdentifiers() const {
    return m_identifiers;
}
void OAIRelationships_12::setIdentifiers(const QString &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIRelationships_12::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIRelationships_12::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIRelationships_12::getLinkedNodes() const {
    return m_linked_nodes;
}
void OAIRelationships_12::setLinkedNodes(const QString &linked_nodes) {
    m_linked_nodes = linked_nodes;
    m_linked_nodes_isSet = true;
}

bool OAIRelationships_12::is_linked_nodes_Set() const{
    return m_linked_nodes_isSet;
}

bool OAIRelationships_12::is_linked_nodes_Valid() const{
    return m_linked_nodes_isValid;
}

QString OAIRelationships_12::getLogs() const {
    return m_logs;
}
void OAIRelationships_12::setLogs(const QString &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIRelationships_12::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIRelationships_12::is_logs_Valid() const{
    return m_logs_isValid;
}

QString OAIRelationships_12::getNodeLinks() const {
    return m_node_links;
}
void OAIRelationships_12::setNodeLinks(const QString &node_links) {
    m_node_links = node_links;
    m_node_links_isSet = true;
}

bool OAIRelationships_12::is_node_links_Set() const{
    return m_node_links_isSet;
}

bool OAIRelationships_12::is_node_links_Valid() const{
    return m_node_links_isValid;
}

QString OAIRelationships_12::getParent() const {
    return m_parent;
}
void OAIRelationships_12::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIRelationships_12::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIRelationships_12::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIRelationships_12::getRegisteredBy() const {
    return m_registered_by;
}
void OAIRelationships_12::setRegisteredBy(const QString &registered_by) {
    m_registered_by = registered_by;
    m_registered_by_isSet = true;
}

bool OAIRelationships_12::is_registered_by_Set() const{
    return m_registered_by_isSet;
}

bool OAIRelationships_12::is_registered_by_Valid() const{
    return m_registered_by_isValid;
}

QString OAIRelationships_12::getRegisteredFrom() const {
    return m_registered_from;
}
void OAIRelationships_12::setRegisteredFrom(const QString &registered_from) {
    m_registered_from = registered_from;
    m_registered_from_isSet = true;
}

bool OAIRelationships_12::is_registered_from_Set() const{
    return m_registered_from_isSet;
}

bool OAIRelationships_12::is_registered_from_Valid() const{
    return m_registered_from_isValid;
}

QString OAIRelationships_12::getRegistrationSchema() const {
    return m_registration_schema;
}
void OAIRelationships_12::setRegistrationSchema(const QString &registration_schema) {
    m_registration_schema = registration_schema;
    m_registration_schema_isSet = true;
}

bool OAIRelationships_12::is_registration_schema_Set() const{
    return m_registration_schema_isSet;
}

bool OAIRelationships_12::is_registration_schema_Valid() const{
    return m_registration_schema_isValid;
}

QString OAIRelationships_12::getRoot() const {
    return m_root;
}
void OAIRelationships_12::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIRelationships_12::is_root_Set() const{
    return m_root_isSet;
}

bool OAIRelationships_12::is_root_Valid() const{
    return m_root_isValid;
}

QString OAIRelationships_12::getViewOnlyLinks() const {
    return m_view_only_links;
}
void OAIRelationships_12::setViewOnlyLinks(const QString &view_only_links) {
    m_view_only_links = view_only_links;
    m_view_only_links_isSet = true;
}

bool OAIRelationships_12::is_view_only_links_Set() const{
    return m_view_only_links_isSet;
}

bool OAIRelationships_12::is_view_only_links_Valid() const{
    return m_view_only_links_isValid;
}

QString OAIRelationships_12::getWikis() const {
    return m_wikis;
}
void OAIRelationships_12::setWikis(const QString &wikis) {
    m_wikis = wikis;
    m_wikis_isSet = true;
}

bool OAIRelationships_12::is_wikis_Set() const{
    return m_wikis_isSet;
}

bool OAIRelationships_12::is_wikis_Valid() const{
    return m_wikis_isValid;
}

bool OAIRelationships_12::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliated_institutions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_only_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_12::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
