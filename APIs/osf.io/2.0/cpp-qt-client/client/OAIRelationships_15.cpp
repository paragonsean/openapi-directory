/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_15.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_15::OAIRelationships_15(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_15::OAIRelationships_15() {
    this->initializeModel();
}

OAIRelationships_15::~OAIRelationships_15() {}

void OAIRelationships_15::initializeModel() {

    m_licenses_acceptable_isSet = false;
    m_licenses_acceptable_isValid = false;

    m_preprints_isSet = false;
    m_preprints_isValid = false;

    m_taxonomies_isSet = false;
    m_taxonomies_isValid = false;
}

void OAIRelationships_15::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_15::fromJsonObject(QJsonObject json) {

    m_licenses_acceptable_isValid = ::OpenAPI::fromJsonValue(m_licenses_acceptable, json[QString("licenses_acceptable")]);
    m_licenses_acceptable_isSet = !json[QString("licenses_acceptable")].isNull() && m_licenses_acceptable_isValid;

    m_preprints_isValid = ::OpenAPI::fromJsonValue(m_preprints, json[QString("preprints")]);
    m_preprints_isSet = !json[QString("preprints")].isNull() && m_preprints_isValid;

    m_taxonomies_isValid = ::OpenAPI::fromJsonValue(m_taxonomies, json[QString("taxonomies")]);
    m_taxonomies_isSet = !json[QString("taxonomies")].isNull() && m_taxonomies_isValid;
}

QString OAIRelationships_15::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_15::asJsonObject() const {
    QJsonObject obj;
    if (m_licenses_acceptable_isSet) {
        obj.insert(QString("licenses_acceptable"), ::OpenAPI::toJsonValue(m_licenses_acceptable));
    }
    if (m_preprints_isSet) {
        obj.insert(QString("preprints"), ::OpenAPI::toJsonValue(m_preprints));
    }
    if (m_taxonomies_isSet) {
        obj.insert(QString("taxonomies"), ::OpenAPI::toJsonValue(m_taxonomies));
    }
    return obj;
}

QString OAIRelationships_15::getLicensesAcceptable() const {
    return m_licenses_acceptable;
}
void OAIRelationships_15::setLicensesAcceptable(const QString &licenses_acceptable) {
    m_licenses_acceptable = licenses_acceptable;
    m_licenses_acceptable_isSet = true;
}

bool OAIRelationships_15::is_licenses_acceptable_Set() const{
    return m_licenses_acceptable_isSet;
}

bool OAIRelationships_15::is_licenses_acceptable_Valid() const{
    return m_licenses_acceptable_isValid;
}

QString OAIRelationships_15::getPreprints() const {
    return m_preprints;
}
void OAIRelationships_15::setPreprints(const QString &preprints) {
    m_preprints = preprints;
    m_preprints_isSet = true;
}

bool OAIRelationships_15::is_preprints_Set() const{
    return m_preprints_isSet;
}

bool OAIRelationships_15::is_preprints_Valid() const{
    return m_preprints_isValid;
}

QString OAIRelationships_15::getTaxonomies() const {
    return m_taxonomies;
}
void OAIRelationships_15::setTaxonomies(const QString &taxonomies) {
    m_taxonomies = taxonomies;
    m_taxonomies_isSet = true;
}

bool OAIRelationships_15::is_taxonomies_Set() const{
    return m_taxonomies_isSet;
}

bool OAIRelationships_15::is_taxonomies_Valid() const{
    return m_taxonomies_isValid;
}

bool OAIRelationships_15::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_licenses_acceptable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomies_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_15::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
