/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_18.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_18::OAIAttributes_18(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_18::OAIAttributes_18() {
    this->initializeModel();
}

OAIAttributes_18::~OAIAttributes_18() {}

void OAIAttributes_18::initializeModel() {

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_is_preprint_orphan_isSet = false;
    m_is_preprint_orphan_isValid = false;

    m_license_record_isSet = false;
    m_license_record_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;
}

void OAIAttributes_18::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_18::fromJsonObject(QJsonObject json) {

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("date_modified")]);
    m_date_modified_isSet = !json[QString("date_modified")].isNull() && m_date_modified_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("date_published")]);
    m_date_published_isSet = !json[QString("date_published")].isNull() && m_date_published_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_is_preprint_orphan_isValid = ::OpenAPI::fromJsonValue(m_is_preprint_orphan, json[QString("is_preprint_orphan")]);
    m_is_preprint_orphan_isSet = !json[QString("is_preprint_orphan")].isNull() && m_is_preprint_orphan_isValid;

    m_license_record_isValid = ::OpenAPI::fromJsonValue(m_license_record, json[QString("license_record")]);
    m_license_record_isSet = !json[QString("license_record")].isNull() && m_license_record_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;
}

QString OAIAttributes_18::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_18::asJsonObject() const {
    QJsonObject obj;
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("date_modified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("date_published"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_is_preprint_orphan_isSet) {
        obj.insert(QString("is_preprint_orphan"), ::OpenAPI::toJsonValue(m_is_preprint_orphan));
    }
    if (m_license_record_isSet) {
        obj.insert(QString("license_record"), ::OpenAPI::toJsonValue(m_license_record));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    return obj;
}

QDateTime OAIAttributes_18::getDateCreated() const {
    return m_date_created;
}
void OAIAttributes_18::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAttributes_18::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAttributes_18::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAttributes_18::getDateModified() const {
    return m_date_modified;
}
void OAIAttributes_18::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIAttributes_18::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIAttributes_18::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QDateTime OAIAttributes_18::getDatePublished() const {
    return m_date_published;
}
void OAIAttributes_18::setDatePublished(const QDateTime &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIAttributes_18::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIAttributes_18::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QString OAIAttributes_18::getDoi() const {
    return m_doi;
}
void OAIAttributes_18::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIAttributes_18::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIAttributes_18::is_doi_Valid() const{
    return m_doi_isValid;
}

bool OAIAttributes_18::isIsPreprintOrphan() const {
    return m_is_preprint_orphan;
}
void OAIAttributes_18::setIsPreprintOrphan(const bool &is_preprint_orphan) {
    m_is_preprint_orphan = is_preprint_orphan;
    m_is_preprint_orphan_isSet = true;
}

bool OAIAttributes_18::is_is_preprint_orphan_Set() const{
    return m_is_preprint_orphan_isSet;
}

bool OAIAttributes_18::is_is_preprint_orphan_Valid() const{
    return m_is_preprint_orphan_isValid;
}

QString OAIAttributes_18::getLicenseRecord() const {
    return m_license_record;
}
void OAIAttributes_18::setLicenseRecord(const QString &license_record) {
    m_license_record = license_record;
    m_license_record_isSet = true;
}

bool OAIAttributes_18::is_license_record_Set() const{
    return m_license_record_isSet;
}

bool OAIAttributes_18::is_license_record_Valid() const{
    return m_license_record_isValid;
}

QList<QString> OAIAttributes_18::getSubjects() const {
    return m_subjects;
}
void OAIAttributes_18::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIAttributes_18::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIAttributes_18::is_subjects_Valid() const{
    return m_subjects_isValid;
}

bool OAIAttributes_18::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preprint_orphan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_18::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
