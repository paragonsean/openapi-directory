/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_9.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_9::OAIAttributes_9(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_9::OAIAttributes_9() {
    this->initializeModel();
}

OAIAttributes_9::~OAIAttributes_9() {}

void OAIAttributes_9::initializeModel() {

    m_checkout_isSet = false;
    m_checkout_isValid = false;

    m_current_user_can_comment_isSet = false;
    m_current_user_can_comment_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_delete_allowed_isSet = false;
    m_delete_allowed_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_touched_isSet = false;
    m_last_touched_isValid = false;

    m_materialized_path_isSet = false;
    m_materialized_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAttributes_9::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_9::fromJsonObject(QJsonObject json) {

    m_checkout_isValid = ::OpenAPI::fromJsonValue(m_checkout, json[QString("checkout")]);
    m_checkout_isSet = !json[QString("checkout")].isNull() && m_checkout_isValid;

    m_current_user_can_comment_isValid = ::OpenAPI::fromJsonValue(m_current_user_can_comment, json[QString("current_user_can_comment")]);
    m_current_user_can_comment_isSet = !json[QString("current_user_can_comment")].isNull() && m_current_user_can_comment_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("current_version")]);
    m_current_version_isSet = !json[QString("current_version")].isNull() && m_current_version_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("date_modified")]);
    m_date_modified_isSet = !json[QString("date_modified")].isNull() && m_date_modified_isValid;

    m_delete_allowed_isValid = ::OpenAPI::fromJsonValue(m_delete_allowed, json[QString("delete_allowed")]);
    m_delete_allowed_isSet = !json[QString("delete_allowed")].isNull() && m_delete_allowed_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(m_extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_touched_isValid = ::OpenAPI::fromJsonValue(m_last_touched, json[QString("last_touched")]);
    m_last_touched_isSet = !json[QString("last_touched")].isNull() && m_last_touched_isValid;

    m_materialized_path_isValid = ::OpenAPI::fromJsonValue(m_materialized_path, json[QString("materialized_path")]);
    m_materialized_path_isSet = !json[QString("materialized_path")].isNull() && m_materialized_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIAttributes_9::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_9::asJsonObject() const {
    QJsonObject obj;
    if (m_checkout_isSet) {
        obj.insert(QString("checkout"), ::OpenAPI::toJsonValue(m_checkout));
    }
    if (m_current_user_can_comment_isSet) {
        obj.insert(QString("current_user_can_comment"), ::OpenAPI::toJsonValue(m_current_user_can_comment));
    }
    if (m_current_version_isSet) {
        obj.insert(QString("current_version"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("date_modified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_delete_allowed_isSet) {
        obj.insert(QString("delete_allowed"), ::OpenAPI::toJsonValue(m_delete_allowed));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(m_extra));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_touched_isSet) {
        obj.insert(QString("last_touched"), ::OpenAPI::toJsonValue(m_last_touched));
    }
    if (m_materialized_path_isSet) {
        obj.insert(QString("materialized_path"), ::OpenAPI::toJsonValue(m_materialized_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIAttributes_9::getCheckout() const {
    return m_checkout;
}
void OAIAttributes_9::setCheckout(const QString &checkout) {
    m_checkout = checkout;
    m_checkout_isSet = true;
}

bool OAIAttributes_9::is_checkout_Set() const{
    return m_checkout_isSet;
}

bool OAIAttributes_9::is_checkout_Valid() const{
    return m_checkout_isValid;
}

bool OAIAttributes_9::isCurrentUserCanComment() const {
    return m_current_user_can_comment;
}
void OAIAttributes_9::setCurrentUserCanComment(const bool &current_user_can_comment) {
    m_current_user_can_comment = current_user_can_comment;
    m_current_user_can_comment_isSet = true;
}

bool OAIAttributes_9::is_current_user_can_comment_Set() const{
    return m_current_user_can_comment_isSet;
}

bool OAIAttributes_9::is_current_user_can_comment_Valid() const{
    return m_current_user_can_comment_isValid;
}

qint32 OAIAttributes_9::getCurrentVersion() const {
    return m_current_version;
}
void OAIAttributes_9::setCurrentVersion(const qint32 &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIAttributes_9::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIAttributes_9::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QDateTime OAIAttributes_9::getDateCreated() const {
    return m_date_created;
}
void OAIAttributes_9::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAttributes_9::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAttributes_9::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAttributes_9::getDateModified() const {
    return m_date_modified;
}
void OAIAttributes_9::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIAttributes_9::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIAttributes_9::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAIAttributes_9::isDeleteAllowed() const {
    return m_delete_allowed;
}
void OAIAttributes_9::setDeleteAllowed(const bool &delete_allowed) {
    m_delete_allowed = delete_allowed;
    m_delete_allowed_isSet = true;
}

bool OAIAttributes_9::is_delete_allowed_Set() const{
    return m_delete_allowed_isSet;
}

bool OAIAttributes_9::is_delete_allowed_Valid() const{
    return m_delete_allowed_isValid;
}

OAIObject OAIAttributes_9::getExtra() const {
    return m_extra;
}
void OAIAttributes_9::setExtra(const OAIObject &extra) {
    m_extra = extra;
    m_extra_isSet = true;
}

bool OAIAttributes_9::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIAttributes_9::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIAttributes_9::getGuid() const {
    return m_guid;
}
void OAIAttributes_9::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIAttributes_9::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIAttributes_9::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIAttributes_9::getKind() const {
    return m_kind;
}
void OAIAttributes_9::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAttributes_9::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAttributes_9::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIAttributes_9::getLastTouched() const {
    return m_last_touched;
}
void OAIAttributes_9::setLastTouched(const QDateTime &last_touched) {
    m_last_touched = last_touched;
    m_last_touched_isSet = true;
}

bool OAIAttributes_9::is_last_touched_Set() const{
    return m_last_touched_isSet;
}

bool OAIAttributes_9::is_last_touched_Valid() const{
    return m_last_touched_isValid;
}

QString OAIAttributes_9::getMaterializedPath() const {
    return m_materialized_path;
}
void OAIAttributes_9::setMaterializedPath(const QString &materialized_path) {
    m_materialized_path = materialized_path;
    m_materialized_path_isSet = true;
}

bool OAIAttributes_9::is_materialized_path_Set() const{
    return m_materialized_path_isSet;
}

bool OAIAttributes_9::is_materialized_path_Valid() const{
    return m_materialized_path_isValid;
}

QString OAIAttributes_9::getName() const {
    return m_name;
}
void OAIAttributes_9::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttributes_9::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttributes_9::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttributes_9::getPath() const {
    return m_path;
}
void OAIAttributes_9::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAttributes_9::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAttributes_9::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAttributes_9::getProvider() const {
    return m_provider;
}
void OAIAttributes_9::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIAttributes_9::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIAttributes_9::is_provider_Valid() const{
    return m_provider_isValid;
}

qint32 OAIAttributes_9::getSize() const {
    return m_size;
}
void OAIAttributes_9::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAttributes_9::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttributes_9::is_size_Valid() const{
    return m_size_isValid;
}

QList<QString> OAIAttributes_9::getTags() const {
    return m_tags;
}
void OAIAttributes_9::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAttributes_9::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAttributes_9::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAttributes_9::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_can_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_touched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_materialized_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_9::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
