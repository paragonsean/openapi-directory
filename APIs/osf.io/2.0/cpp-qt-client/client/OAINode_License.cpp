/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode_License.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode_License::OAINode_License(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode_License::OAINode_License() {
    this->initializeModel();
}

OAINode_License::~OAINode_License() {}

void OAINode_License::initializeModel() {

    m_copyright_holders_isSet = false;
    m_copyright_holders_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAINode_License::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode_License::fromJsonObject(QJsonObject json) {

    m_copyright_holders_isValid = ::OpenAPI::fromJsonValue(m_copyright_holders, json[QString("copyright_holders")]);
    m_copyright_holders_isSet = !json[QString("copyright_holders")].isNull() && m_copyright_holders_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAINode_License::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode_License::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_holders.size() > 0) {
        obj.insert(QString("copyright_holders"), ::OpenAPI::toJsonValue(m_copyright_holders));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<QString> OAINode_License::getCopyrightHolders() const {
    return m_copyright_holders;
}
void OAINode_License::setCopyrightHolders(const QList<QString> &copyright_holders) {
    m_copyright_holders = copyright_holders;
    m_copyright_holders_isSet = true;
}

bool OAINode_License::is_copyright_holders_Set() const{
    return m_copyright_holders_isSet;
}

bool OAINode_License::is_copyright_holders_Valid() const{
    return m_copyright_holders_isValid;
}

qint32 OAINode_License::getYear() const {
    return m_year;
}
void OAINode_License::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAINode_License::is_year_Set() const{
    return m_year_isSet;
}

bool OAINode_License::is_year_Valid() const{
    return m_year_isValid;
}

bool OAINode_License::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_holders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode_License::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
