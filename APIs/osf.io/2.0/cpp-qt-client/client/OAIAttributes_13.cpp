/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_13.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_13::OAIAttributes_13(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_13::OAIAttributes_13() {
    this->initializeModel();
}

OAIAttributes_13::~OAIAttributes_13() {}

void OAIAttributes_13::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;
}

void OAIAttributes_13::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_13::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;
}

QString OAIAttributes_13::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_13::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    return obj;
}

QString OAIAttributes_13::getAction() const {
    return m_action;
}
void OAIAttributes_13::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAttributes_13::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAttributes_13::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAIAttributes_13::getDate() const {
    return m_date;
}
void OAIAttributes_13::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAttributes_13::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAttributes_13::is_date_Valid() const{
    return m_date_isValid;
}

OAILog_Params OAIAttributes_13::getParams() const {
    return m_params;
}
void OAIAttributes_13::setParams(const OAILog_Params &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIAttributes_13::is_params_Set() const{
    return m_params_isSet;
}

bool OAIAttributes_13::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIAttributes_13::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_13::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_date_isValid && true;
}

} // namespace OpenAPI
