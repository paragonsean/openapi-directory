/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINodesApi_H
#define OAI_OAINodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddon.h"
#include "OAICitation_Detail.h"
#include "OAIComment.h"
#include "OAIContributor.h"
#include "OAIDraft_Registration.h"
#include "OAIFile.h"
#include "OAIIdentifier.h"
#include "OAIInstitution.h"
#include "OAILog.h"
#include "OAINode.h"
#include "OAINode_Addon.h"
#include "OAIObject.h"
#include "OAIPreprint.h"
#include "OAIRegistration.h"
#include "OAIStyled_Citation.h"
#include "OAIView_only_links.h"
#include "OAIWiki.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINodesApi : public QObject {
    Q_OBJECT

public:
    OAINodesApi(const int timeOut = 0);
    ~OAINodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void nodesAddonRead(const QString &node_id, const QString &provider);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void nodesAddonsFoldersList(const QString &node_id, const QString &provider);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesAddonsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  oai_node OAINode [required]
    */
    virtual void nodesChildrenCreate(const QString &node_id, const OAINode &oai_node);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesChildrenList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesCitationList(const QString &node_id);

    /**
    * @param[in]  style_id QString [required]
    * @param[in]  node_id QString [required]
    */
    virtual void nodesCitationRead(const QString &style_id, const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  oai_comment OAIComment [required]
    */
    virtual void nodesCommentCreate(const QString &node_id, const OAIComment &oai_comment);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesCommentsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  oai_contributor OAIContributor [required]
    */
    virtual void nodesContributorsCreate(const QString &node_id, const OAIContributor &oai_contributor);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void nodesContributorsDelete(const QString &node_id, const QString &user_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesContributorsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_contributor OAIContributor [required]
    */
    virtual void nodesContributorsPartialUpdate(const QString &node_id, const QString &user_id, const OAIContributor &oai_contributor);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void nodesContributorsRead(const QString &node_id, const QString &user_id);

    /**
    * @param[in]  oai_node OAINode [required]
    */
    virtual void nodesCreate(const OAINode &oai_node);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesDelete(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  oai_draft_registration OAIDraft_Registration [required]
    */
    virtual void nodesDraftRegistrationsCreate(const QString &node_id, const OAIDraft_Registration &oai_draft_registration);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  draft_id QString [required]
    */
    virtual void nodesDraftRegistrationsDelete(const QString &node_id, const QString &draft_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesDraftRegistrationsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  draft_id QString [required]
    * @param[in]  oai_draft_registration OAIDraft_Registration [required]
    */
    virtual void nodesDraftRegistrationsPartialUpdate(const QString &node_id, const QString &draft_id, const OAIDraft_Registration &oai_draft_registration);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void nodesFilesList(const QString &node_id, const QString &provider);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  path QString [required]
    */
    virtual void nodesFilesRead(const QString &node_id, const QString &provider, const QString &path);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  oai_node OAINode [required]
    */
    virtual void nodesForksCreate(const QString &node_id, const OAINode &oai_node);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesForksList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesIdentifiersList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesInstitutionsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesLinkedNodesList(const QString &node_id);


    virtual void nodesList();

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesLogsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void nodesNodeAddonUpdate(const QString &node_id, const QString &provider, const OAIObject &body);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void nodesPartialUpdate(const QString &node_id, const OAIObject &body);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesPreprintsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesProvidersList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void nodesProvidersRead(const QString &node_id, const QString &provider);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesRead(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesRegistrationsList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesViewOnlyLinksList(const QString &node_id);

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  link_id QString [required]
    */
    virtual void nodesViewOnlyLinksRead(const QString &node_id, const QString &link_id);

    /**
    * @param[in]  node_id QString [required]
    */
    virtual void nodesWikisList(const QString &node_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void nodesAddonReadCallback(OAIHttpRequestWorker *worker);
    void nodesAddonsFoldersListCallback(OAIHttpRequestWorker *worker);
    void nodesAddonsListCallback(OAIHttpRequestWorker *worker);
    void nodesChildrenCreateCallback(OAIHttpRequestWorker *worker);
    void nodesChildrenListCallback(OAIHttpRequestWorker *worker);
    void nodesCitationListCallback(OAIHttpRequestWorker *worker);
    void nodesCitationReadCallback(OAIHttpRequestWorker *worker);
    void nodesCommentCreateCallback(OAIHttpRequestWorker *worker);
    void nodesCommentsListCallback(OAIHttpRequestWorker *worker);
    void nodesContributorsCreateCallback(OAIHttpRequestWorker *worker);
    void nodesContributorsDeleteCallback(OAIHttpRequestWorker *worker);
    void nodesContributorsListCallback(OAIHttpRequestWorker *worker);
    void nodesContributorsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void nodesContributorsReadCallback(OAIHttpRequestWorker *worker);
    void nodesCreateCallback(OAIHttpRequestWorker *worker);
    void nodesDeleteCallback(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsCreateCallback(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsDeleteCallback(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsListCallback(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void nodesFilesListCallback(OAIHttpRequestWorker *worker);
    void nodesFilesReadCallback(OAIHttpRequestWorker *worker);
    void nodesForksCreateCallback(OAIHttpRequestWorker *worker);
    void nodesForksListCallback(OAIHttpRequestWorker *worker);
    void nodesIdentifiersListCallback(OAIHttpRequestWorker *worker);
    void nodesInstitutionsListCallback(OAIHttpRequestWorker *worker);
    void nodesLinkedNodesListCallback(OAIHttpRequestWorker *worker);
    void nodesListCallback(OAIHttpRequestWorker *worker);
    void nodesLogsListCallback(OAIHttpRequestWorker *worker);
    void nodesNodeAddonUpdateCallback(OAIHttpRequestWorker *worker);
    void nodesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void nodesPreprintsListCallback(OAIHttpRequestWorker *worker);
    void nodesProvidersListCallback(OAIHttpRequestWorker *worker);
    void nodesProvidersReadCallback(OAIHttpRequestWorker *worker);
    void nodesReadCallback(OAIHttpRequestWorker *worker);
    void nodesRegistrationsListCallback(OAIHttpRequestWorker *worker);
    void nodesViewOnlyLinksListCallback(OAIHttpRequestWorker *worker);
    void nodesViewOnlyLinksReadCallback(OAIHttpRequestWorker *worker);
    void nodesWikisListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void nodesAddonReadSignal(OAINode_Addon summary);
    void nodesAddonsFoldersListSignal(QList<OAIAddon> summary);
    void nodesAddonsListSignal(QList<OAIAddon> summary);
    void nodesChildrenCreateSignal();
    void nodesChildrenListSignal(QList<OAINode> summary);
    void nodesCitationListSignal(OAICitation_Detail summary);
    void nodesCitationReadSignal(OAIStyled_Citation summary);
    void nodesCommentCreateSignal();
    void nodesCommentsListSignal(QList<OAIComment> summary);
    void nodesContributorsCreateSignal();
    void nodesContributorsDeleteSignal();
    void nodesContributorsListSignal(QList<OAIContributor> summary);
    void nodesContributorsPartialUpdateSignal();
    void nodesContributorsReadSignal(QList<OAIContributor> summary);
    void nodesCreateSignal();
    void nodesDeleteSignal();
    void nodesDraftRegistrationsCreateSignal();
    void nodesDraftRegistrationsDeleteSignal();
    void nodesDraftRegistrationsListSignal(QList<OAIDraft_Registration> summary);
    void nodesDraftRegistrationsPartialUpdateSignal();
    void nodesFilesListSignal(QList<OAIFile> summary);
    void nodesFilesReadSignal(OAIFile summary);
    void nodesForksCreateSignal();
    void nodesForksListSignal(QList<OAINode> summary);
    void nodesIdentifiersListSignal(QList<OAIIdentifier> summary);
    void nodesInstitutionsListSignal(QList<OAIInstitution> summary);
    void nodesLinkedNodesListSignal(QList<OAINode> summary);
    void nodesListSignal(QList<OAINode> summary);
    void nodesLogsListSignal(QList<OAILog> summary);
    void nodesNodeAddonUpdateSignal();
    void nodesPartialUpdateSignal();
    void nodesPreprintsListSignal(QList<OAIPreprint> summary);
    void nodesProvidersListSignal(QList<OAIFile> summary);
    void nodesProvidersReadSignal(OAIFile summary);
    void nodesReadSignal(OAINode summary);
    void nodesRegistrationsListSignal(QList<OAIRegistration> summary);
    void nodesViewOnlyLinksListSignal(QList<OAIView_only_links> summary);
    void nodesViewOnlyLinksReadSignal(OAIView_only_links summary);
    void nodesWikisListSignal(QList<OAIWiki> summary);


    void nodesAddonReadSignalFull(OAIHttpRequestWorker *worker, OAINode_Addon summary);
    void nodesAddonsFoldersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void nodesAddonsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void nodesChildrenCreateSignalFull(OAIHttpRequestWorker *worker);
    void nodesChildrenListSignalFull(OAIHttpRequestWorker *worker, QList<OAINode> summary);
    void nodesCitationListSignalFull(OAIHttpRequestWorker *worker, OAICitation_Detail summary);
    void nodesCitationReadSignalFull(OAIHttpRequestWorker *worker, OAIStyled_Citation summary);
    void nodesCommentCreateSignalFull(OAIHttpRequestWorker *worker);
    void nodesCommentsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void nodesContributorsCreateSignalFull(OAIHttpRequestWorker *worker);
    void nodesContributorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void nodesContributorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor> summary);
    void nodesContributorsPartialUpdateSignalFull(OAIHttpRequestWorker *worker);
    void nodesContributorsReadSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor> summary);
    void nodesCreateSignalFull(OAIHttpRequestWorker *worker);
    void nodesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsCreateSignalFull(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDraft_Registration> summary);
    void nodesDraftRegistrationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker);
    void nodesFilesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFile> summary);
    void nodesFilesReadSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void nodesForksCreateSignalFull(OAIHttpRequestWorker *worker);
    void nodesForksListSignalFull(OAIHttpRequestWorker *worker, QList<OAINode> summary);
    void nodesIdentifiersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIIdentifier> summary);
    void nodesInstitutionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstitution> summary);
    void nodesLinkedNodesListSignalFull(OAIHttpRequestWorker *worker, QList<OAINode> summary);
    void nodesListSignalFull(OAIHttpRequestWorker *worker, QList<OAINode> summary);
    void nodesLogsListSignalFull(OAIHttpRequestWorker *worker, QList<OAILog> summary);
    void nodesNodeAddonUpdateSignalFull(OAIHttpRequestWorker *worker);
    void nodesPartialUpdateSignalFull(OAIHttpRequestWorker *worker);
    void nodesPreprintsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPreprint> summary);
    void nodesProvidersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFile> summary);
    void nodesProvidersReadSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void nodesReadSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void nodesRegistrationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistration> summary);
    void nodesViewOnlyLinksListSignalFull(OAIHttpRequestWorker *worker, QList<OAIView_only_links> summary);
    void nodesViewOnlyLinksReadSignalFull(OAIHttpRequestWorker *worker, OAIView_only_links summary);
    void nodesWikisListSignalFull(OAIHttpRequestWorker *worker, QList<OAIWiki> summary);

    Q_DECL_DEPRECATED_X("Use nodesAddonReadSignalError() instead")
    void nodesAddonReadSignalE(OAINode_Addon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesAddonReadSignalError(OAINode_Addon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesAddonsFoldersListSignalError() instead")
    void nodesAddonsFoldersListSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesAddonsFoldersListSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesAddonsListSignalError() instead")
    void nodesAddonsListSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesAddonsListSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesChildrenCreateSignalError() instead")
    void nodesChildrenCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesChildrenCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesChildrenListSignalError() instead")
    void nodesChildrenListSignalE(QList<OAINode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesChildrenListSignalError(QList<OAINode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCitationListSignalError() instead")
    void nodesCitationListSignalE(OAICitation_Detail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCitationListSignalError(OAICitation_Detail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCitationReadSignalError() instead")
    void nodesCitationReadSignalE(OAIStyled_Citation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCitationReadSignalError(OAIStyled_Citation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCommentCreateSignalError() instead")
    void nodesCommentCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCommentCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCommentsListSignalError() instead")
    void nodesCommentsListSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCommentsListSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsCreateSignalError() instead")
    void nodesContributorsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsDeleteSignalError() instead")
    void nodesContributorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsListSignalError() instead")
    void nodesContributorsListSignalE(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsListSignalError(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsPartialUpdateSignalError() instead")
    void nodesContributorsPartialUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsPartialUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsReadSignalError() instead")
    void nodesContributorsReadSignalE(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsReadSignalError(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCreateSignalError() instead")
    void nodesCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDeleteSignalError() instead")
    void nodesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsCreateSignalError() instead")
    void nodesDraftRegistrationsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsDeleteSignalError() instead")
    void nodesDraftRegistrationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsListSignalError() instead")
    void nodesDraftRegistrationsListSignalE(QList<OAIDraft_Registration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsListSignalError(QList<OAIDraft_Registration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsPartialUpdateSignalError() instead")
    void nodesDraftRegistrationsPartialUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsPartialUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesFilesListSignalError() instead")
    void nodesFilesListSignalE(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesFilesListSignalError(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesFilesReadSignalError() instead")
    void nodesFilesReadSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesFilesReadSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesForksCreateSignalError() instead")
    void nodesForksCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesForksCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesForksListSignalError() instead")
    void nodesForksListSignalE(QList<OAINode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesForksListSignalError(QList<OAINode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesIdentifiersListSignalError() instead")
    void nodesIdentifiersListSignalE(QList<OAIIdentifier> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesIdentifiersListSignalError(QList<OAIIdentifier> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesInstitutionsListSignalError() instead")
    void nodesInstitutionsListSignalE(QList<OAIInstitution> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesInstitutionsListSignalError(QList<OAIInstitution> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesLinkedNodesListSignalError() instead")
    void nodesLinkedNodesListSignalE(QList<OAINode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesLinkedNodesListSignalError(QList<OAINode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesListSignalError() instead")
    void nodesListSignalE(QList<OAINode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesListSignalError(QList<OAINode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesLogsListSignalError() instead")
    void nodesLogsListSignalE(QList<OAILog> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesLogsListSignalError(QList<OAILog> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesNodeAddonUpdateSignalError() instead")
    void nodesNodeAddonUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesNodeAddonUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesPartialUpdateSignalError() instead")
    void nodesPartialUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nodesPartialUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesPreprintsListSignalError() instead")
    void nodesPreprintsListSignalE(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesPreprintsListSignalError(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesProvidersListSignalError() instead")
    void nodesProvidersListSignalE(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesProvidersListSignalError(QList<OAIFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesProvidersReadSignalError() instead")
    void nodesProvidersReadSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesProvidersReadSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesReadSignalError() instead")
    void nodesReadSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesReadSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesRegistrationsListSignalError() instead")
    void nodesRegistrationsListSignalE(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesRegistrationsListSignalError(QList<OAIRegistration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesViewOnlyLinksListSignalError() instead")
    void nodesViewOnlyLinksListSignalE(QList<OAIView_only_links> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesViewOnlyLinksListSignalError(QList<OAIView_only_links> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesViewOnlyLinksReadSignalError() instead")
    void nodesViewOnlyLinksReadSignalE(OAIView_only_links summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesViewOnlyLinksReadSignalError(OAIView_only_links summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesWikisListSignalError() instead")
    void nodesWikisListSignalE(QList<OAIWiki> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesWikisListSignalError(QList<OAIWiki> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use nodesAddonReadSignalErrorFull() instead")
    void nodesAddonReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesAddonReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesAddonsFoldersListSignalErrorFull() instead")
    void nodesAddonsFoldersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesAddonsFoldersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesAddonsListSignalErrorFull() instead")
    void nodesAddonsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesAddonsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesChildrenCreateSignalErrorFull() instead")
    void nodesChildrenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesChildrenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesChildrenListSignalErrorFull() instead")
    void nodesChildrenListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesChildrenListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCitationListSignalErrorFull() instead")
    void nodesCitationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCitationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCitationReadSignalErrorFull() instead")
    void nodesCitationReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCitationReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCommentCreateSignalErrorFull() instead")
    void nodesCommentCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCommentCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCommentsListSignalErrorFull() instead")
    void nodesCommentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCommentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsCreateSignalErrorFull() instead")
    void nodesContributorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsDeleteSignalErrorFull() instead")
    void nodesContributorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsListSignalErrorFull() instead")
    void nodesContributorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsPartialUpdateSignalErrorFull() instead")
    void nodesContributorsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesContributorsReadSignalErrorFull() instead")
    void nodesContributorsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesContributorsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesCreateSignalErrorFull() instead")
    void nodesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDeleteSignalErrorFull() instead")
    void nodesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsCreateSignalErrorFull() instead")
    void nodesDraftRegistrationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsDeleteSignalErrorFull() instead")
    void nodesDraftRegistrationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsListSignalErrorFull() instead")
    void nodesDraftRegistrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsPartialUpdateSignalErrorFull() instead")
    void nodesDraftRegistrationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesFilesListSignalErrorFull() instead")
    void nodesFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesFilesReadSignalErrorFull() instead")
    void nodesFilesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesFilesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesForksCreateSignalErrorFull() instead")
    void nodesForksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesForksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesForksListSignalErrorFull() instead")
    void nodesForksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesForksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesIdentifiersListSignalErrorFull() instead")
    void nodesIdentifiersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesIdentifiersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesInstitutionsListSignalErrorFull() instead")
    void nodesInstitutionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesInstitutionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesLinkedNodesListSignalErrorFull() instead")
    void nodesLinkedNodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesLinkedNodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesListSignalErrorFull() instead")
    void nodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesLogsListSignalErrorFull() instead")
    void nodesLogsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesLogsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesNodeAddonUpdateSignalErrorFull() instead")
    void nodesNodeAddonUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesNodeAddonUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesPartialUpdateSignalErrorFull() instead")
    void nodesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesPreprintsListSignalErrorFull() instead")
    void nodesPreprintsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesPreprintsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesProvidersListSignalErrorFull() instead")
    void nodesProvidersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesProvidersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesProvidersReadSignalErrorFull() instead")
    void nodesProvidersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesProvidersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesReadSignalErrorFull() instead")
    void nodesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesRegistrationsListSignalErrorFull() instead")
    void nodesRegistrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesRegistrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesViewOnlyLinksListSignalErrorFull() instead")
    void nodesViewOnlyLinksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesViewOnlyLinksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesViewOnlyLinksReadSignalErrorFull() instead")
    void nodesViewOnlyLinksReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesViewOnlyLinksReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesWikisListSignalErrorFull() instead")
    void nodesWikisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesWikisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
