/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_7.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_7::OAIRelationships_7(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_7::OAIRelationships_7() {
    this->initializeModel();
}

OAIRelationships_7::~OAIRelationships_7() {}

void OAIRelationships_7::initializeModel() {

    m_affiliated_institutions_isSet = false;
    m_affiliated_institutions_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_citation_isSet = false;
    m_citation_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_draft_registrations_isSet = false;
    m_draft_registrations_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_forked_from_isSet = false;
    m_forked_from_isValid = false;

    m_forks_isSet = false;
    m_forks_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_linked_nodes_isSet = false;
    m_linked_nodes_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_node_links_isSet = false;
    m_node_links_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_preprints_isSet = false;
    m_preprints_isValid = false;

    m_registrations_isSet = false;
    m_registrations_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_template_node_isSet = false;
    m_template_node_isValid = false;

    m_view_only_links_isSet = false;
    m_view_only_links_isValid = false;

    m_wikis_isSet = false;
    m_wikis_isValid = false;
}

void OAIRelationships_7::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_7::fromJsonObject(QJsonObject json) {

    m_affiliated_institutions_isValid = ::OpenAPI::fromJsonValue(m_affiliated_institutions, json[QString("affiliated_institutions")]);
    m_affiliated_institutions_isSet = !json[QString("affiliated_institutions")].isNull() && m_affiliated_institutions_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_citation_isValid = ::OpenAPI::fromJsonValue(m_citation, json[QString("citation")]);
    m_citation_isSet = !json[QString("citation")].isNull() && m_citation_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_draft_registrations_isValid = ::OpenAPI::fromJsonValue(m_draft_registrations, json[QString("draft_registrations")]);
    m_draft_registrations_isSet = !json[QString("draft_registrations")].isNull() && m_draft_registrations_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_forked_from_isValid = ::OpenAPI::fromJsonValue(m_forked_from, json[QString("forked_from")]);
    m_forked_from_isSet = !json[QString("forked_from")].isNull() && m_forked_from_isValid;

    m_forks_isValid = ::OpenAPI::fromJsonValue(m_forks, json[QString("forks")]);
    m_forks_isSet = !json[QString("forks")].isNull() && m_forks_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_linked_nodes_isValid = ::OpenAPI::fromJsonValue(m_linked_nodes, json[QString("linked_nodes")]);
    m_linked_nodes_isSet = !json[QString("linked_nodes")].isNull() && m_linked_nodes_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_node_links_isValid = ::OpenAPI::fromJsonValue(m_node_links, json[QString("node_links")]);
    m_node_links_isSet = !json[QString("node_links")].isNull() && m_node_links_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_preprints_isValid = ::OpenAPI::fromJsonValue(m_preprints, json[QString("preprints")]);
    m_preprints_isSet = !json[QString("preprints")].isNull() && m_preprints_isValid;

    m_registrations_isValid = ::OpenAPI::fromJsonValue(m_registrations, json[QString("registrations")]);
    m_registrations_isSet = !json[QString("registrations")].isNull() && m_registrations_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_template_node_isValid = ::OpenAPI::fromJsonValue(m_template_node, json[QString("template_node")]);
    m_template_node_isSet = !json[QString("template_node")].isNull() && m_template_node_isValid;

    m_view_only_links_isValid = ::OpenAPI::fromJsonValue(m_view_only_links, json[QString("view_only_links")]);
    m_view_only_links_isSet = !json[QString("view_only_links")].isNull() && m_view_only_links_isValid;

    m_wikis_isValid = ::OpenAPI::fromJsonValue(m_wikis, json[QString("wikis")]);
    m_wikis_isSet = !json[QString("wikis")].isNull() && m_wikis_isValid;
}

QString OAIRelationships_7::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_7::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliated_institutions_isSet) {
        obj.insert(QString("affiliated_institutions"), ::OpenAPI::toJsonValue(m_affiliated_institutions));
    }
    if (m_children_isSet) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_citation_isSet) {
        obj.insert(QString("citation"), ::OpenAPI::toJsonValue(m_citation));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_contributors_isSet) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_draft_registrations_isSet) {
        obj.insert(QString("draft_registrations"), ::OpenAPI::toJsonValue(m_draft_registrations));
    }
    if (m_files_isSet) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_forked_from_isSet) {
        obj.insert(QString("forked_from"), ::OpenAPI::toJsonValue(m_forked_from));
    }
    if (m_forks_isSet) {
        obj.insert(QString("forks"), ::OpenAPI::toJsonValue(m_forks));
    }
    if (m_identifiers_isSet) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_linked_nodes_isSet) {
        obj.insert(QString("linked_nodes"), ::OpenAPI::toJsonValue(m_linked_nodes));
    }
    if (m_logs_isSet) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_node_links_isSet) {
        obj.insert(QString("node_links"), ::OpenAPI::toJsonValue(m_node_links));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_preprints_isSet) {
        obj.insert(QString("preprints"), ::OpenAPI::toJsonValue(m_preprints));
    }
    if (m_registrations_isSet) {
        obj.insert(QString("registrations"), ::OpenAPI::toJsonValue(m_registrations));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_template_node_isSet) {
        obj.insert(QString("template_node"), ::OpenAPI::toJsonValue(m_template_node));
    }
    if (m_view_only_links_isSet) {
        obj.insert(QString("view_only_links"), ::OpenAPI::toJsonValue(m_view_only_links));
    }
    if (m_wikis_isSet) {
        obj.insert(QString("wikis"), ::OpenAPI::toJsonValue(m_wikis));
    }
    return obj;
}

QString OAIRelationships_7::getAffiliatedInstitutions() const {
    return m_affiliated_institutions;
}
void OAIRelationships_7::setAffiliatedInstitutions(const QString &affiliated_institutions) {
    m_affiliated_institutions = affiliated_institutions;
    m_affiliated_institutions_isSet = true;
}

bool OAIRelationships_7::is_affiliated_institutions_Set() const{
    return m_affiliated_institutions_isSet;
}

bool OAIRelationships_7::is_affiliated_institutions_Valid() const{
    return m_affiliated_institutions_isValid;
}

QString OAIRelationships_7::getChildren() const {
    return m_children;
}
void OAIRelationships_7::setChildren(const QString &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIRelationships_7::is_children_Set() const{
    return m_children_isSet;
}

bool OAIRelationships_7::is_children_Valid() const{
    return m_children_isValid;
}

QString OAIRelationships_7::getCitation() const {
    return m_citation;
}
void OAIRelationships_7::setCitation(const QString &citation) {
    m_citation = citation;
    m_citation_isSet = true;
}

bool OAIRelationships_7::is_citation_Set() const{
    return m_citation_isSet;
}

bool OAIRelationships_7::is_citation_Valid() const{
    return m_citation_isValid;
}

QString OAIRelationships_7::getComments() const {
    return m_comments;
}
void OAIRelationships_7::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIRelationships_7::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIRelationships_7::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIRelationships_7::getContributors() const {
    return m_contributors;
}
void OAIRelationships_7::setContributors(const QString &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAIRelationships_7::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAIRelationships_7::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QString OAIRelationships_7::getDraftRegistrations() const {
    return m_draft_registrations;
}
void OAIRelationships_7::setDraftRegistrations(const QString &draft_registrations) {
    m_draft_registrations = draft_registrations;
    m_draft_registrations_isSet = true;
}

bool OAIRelationships_7::is_draft_registrations_Set() const{
    return m_draft_registrations_isSet;
}

bool OAIRelationships_7::is_draft_registrations_Valid() const{
    return m_draft_registrations_isValid;
}

QString OAIRelationships_7::getFiles() const {
    return m_files;
}
void OAIRelationships_7::setFiles(const QString &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIRelationships_7::is_files_Set() const{
    return m_files_isSet;
}

bool OAIRelationships_7::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIRelationships_7::getForkedFrom() const {
    return m_forked_from;
}
void OAIRelationships_7::setForkedFrom(const QString &forked_from) {
    m_forked_from = forked_from;
    m_forked_from_isSet = true;
}

bool OAIRelationships_7::is_forked_from_Set() const{
    return m_forked_from_isSet;
}

bool OAIRelationships_7::is_forked_from_Valid() const{
    return m_forked_from_isValid;
}

QString OAIRelationships_7::getForks() const {
    return m_forks;
}
void OAIRelationships_7::setForks(const QString &forks) {
    m_forks = forks;
    m_forks_isSet = true;
}

bool OAIRelationships_7::is_forks_Set() const{
    return m_forks_isSet;
}

bool OAIRelationships_7::is_forks_Valid() const{
    return m_forks_isValid;
}

QString OAIRelationships_7::getIdentifiers() const {
    return m_identifiers;
}
void OAIRelationships_7::setIdentifiers(const QString &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIRelationships_7::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIRelationships_7::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIRelationships_7::getLicense() const {
    return m_license;
}
void OAIRelationships_7::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIRelationships_7::is_license_Set() const{
    return m_license_isSet;
}

bool OAIRelationships_7::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIRelationships_7::getLinkedNodes() const {
    return m_linked_nodes;
}
void OAIRelationships_7::setLinkedNodes(const QString &linked_nodes) {
    m_linked_nodes = linked_nodes;
    m_linked_nodes_isSet = true;
}

bool OAIRelationships_7::is_linked_nodes_Set() const{
    return m_linked_nodes_isSet;
}

bool OAIRelationships_7::is_linked_nodes_Valid() const{
    return m_linked_nodes_isValid;
}

QString OAIRelationships_7::getLogs() const {
    return m_logs;
}
void OAIRelationships_7::setLogs(const QString &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIRelationships_7::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIRelationships_7::is_logs_Valid() const{
    return m_logs_isValid;
}

QString OAIRelationships_7::getNodeLinks() const {
    return m_node_links;
}
void OAIRelationships_7::setNodeLinks(const QString &node_links) {
    m_node_links = node_links;
    m_node_links_isSet = true;
}

bool OAIRelationships_7::is_node_links_Set() const{
    return m_node_links_isSet;
}

bool OAIRelationships_7::is_node_links_Valid() const{
    return m_node_links_isValid;
}

QString OAIRelationships_7::getParent() const {
    return m_parent;
}
void OAIRelationships_7::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIRelationships_7::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIRelationships_7::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIRelationships_7::getPreprints() const {
    return m_preprints;
}
void OAIRelationships_7::setPreprints(const QString &preprints) {
    m_preprints = preprints;
    m_preprints_isSet = true;
}

bool OAIRelationships_7::is_preprints_Set() const{
    return m_preprints_isSet;
}

bool OAIRelationships_7::is_preprints_Valid() const{
    return m_preprints_isValid;
}

QString OAIRelationships_7::getRegistrations() const {
    return m_registrations;
}
void OAIRelationships_7::setRegistrations(const QString &registrations) {
    m_registrations = registrations;
    m_registrations_isSet = true;
}

bool OAIRelationships_7::is_registrations_Set() const{
    return m_registrations_isSet;
}

bool OAIRelationships_7::is_registrations_Valid() const{
    return m_registrations_isValid;
}

QString OAIRelationships_7::getRoot() const {
    return m_root;
}
void OAIRelationships_7::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIRelationships_7::is_root_Set() const{
    return m_root_isSet;
}

bool OAIRelationships_7::is_root_Valid() const{
    return m_root_isValid;
}

QString OAIRelationships_7::getTemplateNode() const {
    return m_template_node;
}
void OAIRelationships_7::setTemplateNode(const QString &template_node) {
    m_template_node = template_node;
    m_template_node_isSet = true;
}

bool OAIRelationships_7::is_template_node_Set() const{
    return m_template_node_isSet;
}

bool OAIRelationships_7::is_template_node_Valid() const{
    return m_template_node_isValid;
}

QString OAIRelationships_7::getViewOnlyLinks() const {
    return m_view_only_links;
}
void OAIRelationships_7::setViewOnlyLinks(const QString &view_only_links) {
    m_view_only_links = view_only_links;
    m_view_only_links_isSet = true;
}

bool OAIRelationships_7::is_view_only_links_Set() const{
    return m_view_only_links_isSet;
}

bool OAIRelationships_7::is_view_only_links_Valid() const{
    return m_view_only_links_isValid;
}

QString OAIRelationships_7::getWikis() const {
    return m_wikis;
}
void OAIRelationships_7::setWikis(const QString &wikis) {
    m_wikis = wikis;
    m_wikis_isSet = true;
}

bool OAIRelationships_7::is_wikis_Set() const{
    return m_wikis_isSet;
}

bool OAIRelationships_7::is_wikis_Valid() const{
    return m_wikis_isValid;
}

bool OAIRelationships_7::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliated_institutions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_registrations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forked_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_only_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_7::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
