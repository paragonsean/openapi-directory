/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDraftRegistrationsApi_H
#define OAI_OAIDraftRegistrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContributor.h"
#include "OAIDraft_Registration.h"
#include "OAIInstitution.h"
#include "OAIObject.h"
#include "OAISubject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDraftRegistrationsApi : public QObject {
    Q_OBJECT

public:
    OAIDraftRegistrationsApi(const int timeOut = 0);
    ~OAIDraftRegistrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  draft_id QString [required]
    * @param[in]  oai_contributor OAIContributor [required]
    */
    virtual void draftRegistrationContributorsCreate(const QString &draft_id, const OAIContributor &oai_contributor);

    /**
    * @param[in]  draft_id QString [required]
    */
    virtual void draftRegistrationContributorsList(const QString &draft_id);

    /**
    * @param[in]  oai_draft_registration OAIDraft_Registration [required]
    */
    virtual void draftRegistrationsCreate(const OAIDraft_Registration &oai_draft_registration);

    /**
    * @param[in]  draft_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void draftRegistrationsDraftIdContributorsUserIdGet(const QString &draft_id, const QString &user_id);

    /**
    * @param[in]  draft_id QString [required]
    */
    virtual void draftRegistrationsDraftIdDelete(const QString &draft_id);

    /**
    * @param[in]  draft_id QString [required]
    */
    virtual void draftRegistrationsDraftIdGet(const QString &draft_id);

    /**
    * @param[in]  draft_id QString [required]
    */
    virtual void draftRegistrationsDraftIdInstitutionsGet(const QString &draft_id);

    /**
    * @param[in]  draft_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void draftRegistrationsDraftIdPatch(const QString &draft_id, const OAIObject &body);


    virtual void draftRegistrationsRead();

    /**
    * @param[in]  node_id QString [required]
    * @param[in]  draft_id QString [required]
    */
    virtual void nodesDraftRegistrationsRead(const QString &node_id, const QString &draft_id);

    /**
    * @param[in]  draft_id QString [required]
    */
    virtual void nodesDraftRegistrationsSubjects(const QString &draft_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void draftRegistrationContributorsCreateCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationContributorsListCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsCreateCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdContributorsUserIdGetCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdDeleteCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdGetCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdInstitutionsGetCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdPatchCallback(OAIHttpRequestWorker *worker);
    void draftRegistrationsReadCallback(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsReadCallback(OAIHttpRequestWorker *worker);
    void nodesDraftRegistrationsSubjectsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void draftRegistrationContributorsCreateSignal();
    void draftRegistrationContributorsListSignal();
    void draftRegistrationsCreateSignal(OAIDraft_Registration summary);
    void draftRegistrationsDraftIdContributorsUserIdGetSignal();
    void draftRegistrationsDraftIdDeleteSignal();
    void draftRegistrationsDraftIdGetSignal(OAIDraft_Registration summary);
    void draftRegistrationsDraftIdInstitutionsGetSignal(OAIInstitution summary);
    void draftRegistrationsDraftIdPatchSignal();
    void draftRegistrationsReadSignal(OAIDraft_Registration summary);
    void nodesDraftRegistrationsReadSignal(OAIDraft_Registration summary);
    void nodesDraftRegistrationsSubjectsSignal(OAISubject summary);


    void draftRegistrationContributorsCreateSignalFull(OAIHttpRequestWorker *worker);
    void draftRegistrationContributorsListSignalFull(OAIHttpRequestWorker *worker);
    void draftRegistrationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIDraft_Registration summary);
    void draftRegistrationsDraftIdContributorsUserIdGetSignalFull(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void draftRegistrationsDraftIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDraft_Registration summary);
    void draftRegistrationsDraftIdInstitutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIInstitution summary);
    void draftRegistrationsDraftIdPatchSignalFull(OAIHttpRequestWorker *worker);
    void draftRegistrationsReadSignalFull(OAIHttpRequestWorker *worker, OAIDraft_Registration summary);
    void nodesDraftRegistrationsReadSignalFull(OAIHttpRequestWorker *worker, OAIDraft_Registration summary);
    void nodesDraftRegistrationsSubjectsSignalFull(OAIHttpRequestWorker *worker, OAISubject summary);

    Q_DECL_DEPRECATED_X("Use draftRegistrationContributorsCreateSignalError() instead")
    void draftRegistrationContributorsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationContributorsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationContributorsListSignalError() instead")
    void draftRegistrationContributorsListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationContributorsListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsCreateSignalError() instead")
    void draftRegistrationsCreateSignalE(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsCreateSignalError(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdContributorsUserIdGetSignalError() instead")
    void draftRegistrationsDraftIdContributorsUserIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdContributorsUserIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdDeleteSignalError() instead")
    void draftRegistrationsDraftIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdGetSignalError() instead")
    void draftRegistrationsDraftIdGetSignalE(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdGetSignalError(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdInstitutionsGetSignalError() instead")
    void draftRegistrationsDraftIdInstitutionsGetSignalE(OAIInstitution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdInstitutionsGetSignalError(OAIInstitution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdPatchSignalError() instead")
    void draftRegistrationsDraftIdPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsReadSignalError() instead")
    void draftRegistrationsReadSignalE(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsReadSignalError(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsReadSignalError() instead")
    void nodesDraftRegistrationsReadSignalE(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsReadSignalError(OAIDraft_Registration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsSubjectsSignalError() instead")
    void nodesDraftRegistrationsSubjectsSignalE(OAISubject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsSubjectsSignalError(OAISubject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use draftRegistrationContributorsCreateSignalErrorFull() instead")
    void draftRegistrationContributorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationContributorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationContributorsListSignalErrorFull() instead")
    void draftRegistrationContributorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationContributorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsCreateSignalErrorFull() instead")
    void draftRegistrationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdContributorsUserIdGetSignalErrorFull() instead")
    void draftRegistrationsDraftIdContributorsUserIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdContributorsUserIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdDeleteSignalErrorFull() instead")
    void draftRegistrationsDraftIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdGetSignalErrorFull() instead")
    void draftRegistrationsDraftIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdInstitutionsGetSignalErrorFull() instead")
    void draftRegistrationsDraftIdInstitutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdInstitutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsDraftIdPatchSignalErrorFull() instead")
    void draftRegistrationsDraftIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsDraftIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftRegistrationsReadSignalErrorFull() instead")
    void draftRegistrationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftRegistrationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsReadSignalErrorFull() instead")
    void nodesDraftRegistrationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDraftRegistrationsSubjectsSignalErrorFull() instead")
    void nodesDraftRegistrationsSubjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDraftRegistrationsSubjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
