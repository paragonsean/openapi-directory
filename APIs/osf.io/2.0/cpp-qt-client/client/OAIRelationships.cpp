/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships::OAIRelationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships::OAIRelationships() {
    this->initializeModel();
}

OAIRelationships::~OAIRelationships() {}

void OAIRelationships::initializeModel() {

    m_collected_metadata_isSet = false;
    m_collected_metadata_isValid = false;

    m_linked_nodes_isSet = false;
    m_linked_nodes_isValid = false;

    m_linked_preprints_isSet = false;
    m_linked_preprints_isValid = false;

    m_linked_registrations_isSet = false;
    m_linked_registrations_isValid = false;

    m_node_links_isSet = false;
    m_node_links_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIRelationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships::fromJsonObject(QJsonObject json) {

    m_collected_metadata_isValid = ::OpenAPI::fromJsonValue(m_collected_metadata, json[QString("collected_metadata")]);
    m_collected_metadata_isSet = !json[QString("collected_metadata")].isNull() && m_collected_metadata_isValid;

    m_linked_nodes_isValid = ::OpenAPI::fromJsonValue(m_linked_nodes, json[QString("linked_nodes")]);
    m_linked_nodes_isSet = !json[QString("linked_nodes")].isNull() && m_linked_nodes_isValid;

    m_linked_preprints_isValid = ::OpenAPI::fromJsonValue(m_linked_preprints, json[QString("linked_preprints")]);
    m_linked_preprints_isSet = !json[QString("linked_preprints")].isNull() && m_linked_preprints_isValid;

    m_linked_registrations_isValid = ::OpenAPI::fromJsonValue(m_linked_registrations, json[QString("linked_registrations")]);
    m_linked_registrations_isSet = !json[QString("linked_registrations")].isNull() && m_linked_registrations_isValid;

    m_node_links_isValid = ::OpenAPI::fromJsonValue(m_node_links, json[QString("node_links")]);
    m_node_links_isSet = !json[QString("node_links")].isNull() && m_node_links_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIRelationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships::asJsonObject() const {
    QJsonObject obj;
    if (m_collected_metadata_isSet) {
        obj.insert(QString("collected_metadata"), ::OpenAPI::toJsonValue(m_collected_metadata));
    }
    if (m_linked_nodes_isSet) {
        obj.insert(QString("linked_nodes"), ::OpenAPI::toJsonValue(m_linked_nodes));
    }
    if (m_linked_preprints_isSet) {
        obj.insert(QString("linked_preprints"), ::OpenAPI::toJsonValue(m_linked_preprints));
    }
    if (m_linked_registrations_isSet) {
        obj.insert(QString("linked_registrations"), ::OpenAPI::toJsonValue(m_linked_registrations));
    }
    if (m_node_links_isSet) {
        obj.insert(QString("node_links"), ::OpenAPI::toJsonValue(m_node_links));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIRelationships::getCollectedMetadata() const {
    return m_collected_metadata;
}
void OAIRelationships::setCollectedMetadata(const QString &collected_metadata) {
    m_collected_metadata = collected_metadata;
    m_collected_metadata_isSet = true;
}

bool OAIRelationships::is_collected_metadata_Set() const{
    return m_collected_metadata_isSet;
}

bool OAIRelationships::is_collected_metadata_Valid() const{
    return m_collected_metadata_isValid;
}

QString OAIRelationships::getLinkedNodes() const {
    return m_linked_nodes;
}
void OAIRelationships::setLinkedNodes(const QString &linked_nodes) {
    m_linked_nodes = linked_nodes;
    m_linked_nodes_isSet = true;
}

bool OAIRelationships::is_linked_nodes_Set() const{
    return m_linked_nodes_isSet;
}

bool OAIRelationships::is_linked_nodes_Valid() const{
    return m_linked_nodes_isValid;
}

QString OAIRelationships::getLinkedPreprints() const {
    return m_linked_preprints;
}
void OAIRelationships::setLinkedPreprints(const QString &linked_preprints) {
    m_linked_preprints = linked_preprints;
    m_linked_preprints_isSet = true;
}

bool OAIRelationships::is_linked_preprints_Set() const{
    return m_linked_preprints_isSet;
}

bool OAIRelationships::is_linked_preprints_Valid() const{
    return m_linked_preprints_isValid;
}

QString OAIRelationships::getLinkedRegistrations() const {
    return m_linked_registrations;
}
void OAIRelationships::setLinkedRegistrations(const QString &linked_registrations) {
    m_linked_registrations = linked_registrations;
    m_linked_registrations_isSet = true;
}

bool OAIRelationships::is_linked_registrations_Set() const{
    return m_linked_registrations_isSet;
}

bool OAIRelationships::is_linked_registrations_Valid() const{
    return m_linked_registrations_isValid;
}

QString OAIRelationships::getNodeLinks() const {
    return m_node_links;
}
void OAIRelationships::setNodeLinks(const QString &node_links) {
    m_node_links = node_links;
    m_node_links_isSet = true;
}

bool OAIRelationships::is_node_links_Set() const{
    return m_node_links_isSet;
}

bool OAIRelationships::is_node_links_Valid() const{
    return m_node_links_isValid;
}

QString OAIRelationships::getProvider() const {
    return m_provider;
}
void OAIRelationships::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIRelationships::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIRelationships::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIRelationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collected_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_preprints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_registrations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
