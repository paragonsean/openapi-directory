/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreprintsApi_H
#define OAI_OAIPreprintsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICitation_Detail.h"
#include "OAIContributor_1.h"
#include "OAIObject.h"
#include "OAIPreprint.h"
#include "OAIStyled_Citation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreprintsApi : public QObject {
    Q_OBJECT

public:
    OAIPreprintsApi(const int timeOut = 0);
    ~OAIPreprintsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  preprint_id QString [required]
    */
    virtual void preprintsBibliographicContributorsList(const QString &preprint_id);

    /**
    * @param[in]  preprint_id QString [required]
    */
    virtual void preprintsCitationList(const QString &preprint_id);

    /**
    * @param[in]  style_id QString [required]
    * @param[in]  preprint_id QString [required]
    */
    virtual void preprintsCitationRead(const QString &style_id, const QString &preprint_id);

    /**
    * @param[in]  preprint_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void preprintsContributorRead(const QString &preprint_id, const QString &user_id);

    /**
    * @param[in]  preprint_id QString [required]
    * @param[in]  oai_contributor_1 OAIContributor_1 [required]
    */
    virtual void preprintsContributorsCreate(const QString &preprint_id, const OAIContributor_1 &oai_contributor_1);

    /**
    * @param[in]  preprint_id QString [required]
    */
    virtual void preprintsContributorsList(const QString &preprint_id);

    /**
    * @param[in]  oai_preprint OAIPreprint [required]
    */
    virtual void preprintsCreate(const OAIPreprint &oai_preprint);


    virtual void preprintsList();

    /**
    * @param[in]  preprint_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void preprintsPartialUpdate(const QString &preprint_id, const OAIObject &body);

    /**
    * @param[in]  preprint_id QString [required]
    */
    virtual void preprintsRead(const QString &preprint_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void preprintsBibliographicContributorsListCallback(OAIHttpRequestWorker *worker);
    void preprintsCitationListCallback(OAIHttpRequestWorker *worker);
    void preprintsCitationReadCallback(OAIHttpRequestWorker *worker);
    void preprintsContributorReadCallback(OAIHttpRequestWorker *worker);
    void preprintsContributorsCreateCallback(OAIHttpRequestWorker *worker);
    void preprintsContributorsListCallback(OAIHttpRequestWorker *worker);
    void preprintsCreateCallback(OAIHttpRequestWorker *worker);
    void preprintsListCallback(OAIHttpRequestWorker *worker);
    void preprintsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void preprintsReadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void preprintsBibliographicContributorsListSignal(QList<OAIContributor_1> summary);
    void preprintsCitationListSignal(OAICitation_Detail summary);
    void preprintsCitationReadSignal(OAIStyled_Citation summary);
    void preprintsContributorReadSignal();
    void preprintsContributorsCreateSignal();
    void preprintsContributorsListSignal(QList<OAIContributor_1> summary);
    void preprintsCreateSignal();
    void preprintsListSignal(QList<OAIPreprint> summary);
    void preprintsPartialUpdateSignal();
    void preprintsReadSignal(OAIPreprint summary);


    void preprintsBibliographicContributorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor_1> summary);
    void preprintsCitationListSignalFull(OAIHttpRequestWorker *worker, OAICitation_Detail summary);
    void preprintsCitationReadSignalFull(OAIHttpRequestWorker *worker, OAIStyled_Citation summary);
    void preprintsContributorReadSignalFull(OAIHttpRequestWorker *worker);
    void preprintsContributorsCreateSignalFull(OAIHttpRequestWorker *worker);
    void preprintsContributorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor_1> summary);
    void preprintsCreateSignalFull(OAIHttpRequestWorker *worker);
    void preprintsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPreprint> summary);
    void preprintsPartialUpdateSignalFull(OAIHttpRequestWorker *worker);
    void preprintsReadSignalFull(OAIHttpRequestWorker *worker, OAIPreprint summary);

    Q_DECL_DEPRECATED_X("Use preprintsBibliographicContributorsListSignalError() instead")
    void preprintsBibliographicContributorsListSignalE(QList<OAIContributor_1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsBibliographicContributorsListSignalError(QList<OAIContributor_1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsCitationListSignalError() instead")
    void preprintsCitationListSignalE(OAICitation_Detail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsCitationListSignalError(OAICitation_Detail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsCitationReadSignalError() instead")
    void preprintsCitationReadSignalE(OAIStyled_Citation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsCitationReadSignalError(OAIStyled_Citation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsContributorReadSignalError() instead")
    void preprintsContributorReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsContributorReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsContributorsCreateSignalError() instead")
    void preprintsContributorsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsContributorsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsContributorsListSignalError() instead")
    void preprintsContributorsListSignalE(QList<OAIContributor_1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsContributorsListSignalError(QList<OAIContributor_1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsCreateSignalError() instead")
    void preprintsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsListSignalError() instead")
    void preprintsListSignalE(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsListSignalError(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsPartialUpdateSignalError() instead")
    void preprintsPartialUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsPartialUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsReadSignalError() instead")
    void preprintsReadSignalE(OAIPreprint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsReadSignalError(OAIPreprint summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use preprintsBibliographicContributorsListSignalErrorFull() instead")
    void preprintsBibliographicContributorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsBibliographicContributorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsCitationListSignalErrorFull() instead")
    void preprintsCitationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsCitationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsCitationReadSignalErrorFull() instead")
    void preprintsCitationReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsCitationReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsContributorReadSignalErrorFull() instead")
    void preprintsContributorReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsContributorReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsContributorsCreateSignalErrorFull() instead")
    void preprintsContributorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsContributorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsContributorsListSignalErrorFull() instead")
    void preprintsContributorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsContributorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsCreateSignalErrorFull() instead")
    void preprintsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsListSignalErrorFull() instead")
    void preprintsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsPartialUpdateSignalErrorFull() instead")
    void preprintsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintsReadSignalErrorFull() instead")
    void preprintsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
