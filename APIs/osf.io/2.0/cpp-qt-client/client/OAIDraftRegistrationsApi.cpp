/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDraftRegistrationsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDraftRegistrationsApi::OAIDraftRegistrationsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDraftRegistrationsApi::~OAIDraftRegistrationsApi() {
}

void OAIDraftRegistrationsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.test.osf.io/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("draftRegistrationContributorsCreate", defaultConf);
    _serverIndices.insert("draftRegistrationContributorsCreate", 0);
    _serverConfigs.insert("draftRegistrationContributorsList", defaultConf);
    _serverIndices.insert("draftRegistrationContributorsList", 0);
    _serverConfigs.insert("draftRegistrationsCreate", defaultConf);
    _serverIndices.insert("draftRegistrationsCreate", 0);
    _serverConfigs.insert("draftRegistrationsDraftIdContributorsUserIdGet", defaultConf);
    _serverIndices.insert("draftRegistrationsDraftIdContributorsUserIdGet", 0);
    _serverConfigs.insert("draftRegistrationsDraftIdDelete", defaultConf);
    _serverIndices.insert("draftRegistrationsDraftIdDelete", 0);
    _serverConfigs.insert("draftRegistrationsDraftIdGet", defaultConf);
    _serverIndices.insert("draftRegistrationsDraftIdGet", 0);
    _serverConfigs.insert("draftRegistrationsDraftIdInstitutionsGet", defaultConf);
    _serverIndices.insert("draftRegistrationsDraftIdInstitutionsGet", 0);
    _serverConfigs.insert("draftRegistrationsDraftIdPatch", defaultConf);
    _serverIndices.insert("draftRegistrationsDraftIdPatch", 0);
    _serverConfigs.insert("draftRegistrationsRead", defaultConf);
    _serverIndices.insert("draftRegistrationsRead", 0);
    _serverConfigs.insert("nodesDraftRegistrationsRead", defaultConf);
    _serverIndices.insert("nodesDraftRegistrationsRead", 0);
    _serverConfigs.insert("nodesDraftRegistrationsSubjects", defaultConf);
    _serverIndices.insert("nodesDraftRegistrationsSubjects", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDraftRegistrationsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDraftRegistrationsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDraftRegistrationsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDraftRegistrationsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDraftRegistrationsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDraftRegistrationsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDraftRegistrationsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDraftRegistrationsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDraftRegistrationsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDraftRegistrationsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDraftRegistrationsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDraftRegistrationsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDraftRegistrationsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDraftRegistrationsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDraftRegistrationsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDraftRegistrationsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDraftRegistrationsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDraftRegistrationsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDraftRegistrationsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDraftRegistrationsApi::draftRegistrationContributorsCreate(const QString &draft_id, const OAIContributor &oai_contributor) {
    QString fullPath = QString(_serverConfigs["draftRegistrationContributorsCreate"][_serverIndices.value("draftRegistrationContributorsCreate")].URL()+"/draft_registrations/{draft_id}/contributors/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_contributor.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationContributorsCreateCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationContributorsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationContributorsCreateSignal();
        Q_EMIT draftRegistrationContributorsCreateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationContributorsCreateSignalE(error_type, error_str);
        Q_EMIT draftRegistrationContributorsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationContributorsCreateSignalError(error_type, error_str);
        Q_EMIT draftRegistrationContributorsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationContributorsList(const QString &draft_id) {
    QString fullPath = QString(_serverConfigs["draftRegistrationContributorsList"][_serverIndices.value("draftRegistrationContributorsList")].URL()+"/draft_registrations/{draft_id}/contributors/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationContributorsListCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationContributorsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationContributorsListSignal();
        Q_EMIT draftRegistrationContributorsListSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationContributorsListSignalE(error_type, error_str);
        Q_EMIT draftRegistrationContributorsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationContributorsListSignalError(error_type, error_str);
        Q_EMIT draftRegistrationContributorsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsCreate(const OAIDraft_Registration &oai_draft_registration) {
    QString fullPath = QString(_serverConfigs["draftRegistrationsCreate"][_serverIndices.value("draftRegistrationsCreate")].URL()+"/draft_registrations/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_draft_registration.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsCreateCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDraft_Registration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsCreateSignal(output);
        Q_EMIT draftRegistrationsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsCreateSignalE(output, error_type, error_str);
        Q_EMIT draftRegistrationsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsCreateSignalError(output, error_type, error_str);
        Q_EMIT draftRegistrationsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdContributorsUserIdGet(const QString &draft_id, const QString &user_id) {
    QString fullPath = QString(_serverConfigs["draftRegistrationsDraftIdContributorsUserIdGet"][_serverIndices.value("draftRegistrationsDraftIdContributorsUserIdGet")].URL()+"/draft_registrations/{draft_id}/contributors/{user_id}/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsDraftIdContributorsUserIdGetCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdContributorsUserIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsDraftIdContributorsUserIdGetSignal();
        Q_EMIT draftRegistrationsDraftIdContributorsUserIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsDraftIdContributorsUserIdGetSignalE(error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdContributorsUserIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsDraftIdContributorsUserIdGetSignalError(error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdContributorsUserIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdDelete(const QString &draft_id) {
    QString fullPath = QString(_serverConfigs["draftRegistrationsDraftIdDelete"][_serverIndices.value("draftRegistrationsDraftIdDelete")].URL()+"/draft_registrations/{draft_id}/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsDraftIdDeleteCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsDraftIdDeleteSignal();
        Q_EMIT draftRegistrationsDraftIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsDraftIdDeleteSignalE(error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsDraftIdDeleteSignalError(error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdGet(const QString &draft_id) {
    QString fullPath = QString(_serverConfigs["draftRegistrationsDraftIdGet"][_serverIndices.value("draftRegistrationsDraftIdGet")].URL()+"/draft_registrations/{draft_id}/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsDraftIdGetCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDraft_Registration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsDraftIdGetSignal(output);
        Q_EMIT draftRegistrationsDraftIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsDraftIdGetSignalE(output, error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsDraftIdGetSignalError(output, error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdInstitutionsGet(const QString &draft_id) {
    QString fullPath = QString(_serverConfigs["draftRegistrationsDraftIdInstitutionsGet"][_serverIndices.value("draftRegistrationsDraftIdInstitutionsGet")].URL()+"/draft_registrations/{draft_id}/institutions/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsDraftIdInstitutionsGetCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdInstitutionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInstitution output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsDraftIdInstitutionsGetSignal(output);
        Q_EMIT draftRegistrationsDraftIdInstitutionsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsDraftIdInstitutionsGetSignalE(output, error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdInstitutionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsDraftIdInstitutionsGetSignalError(output, error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdInstitutionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdPatch(const QString &draft_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["draftRegistrationsDraftIdPatch"][_serverIndices.value("draftRegistrationsDraftIdPatch")].URL()+"/draft_registrations/{draft_id}/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsDraftIdPatchCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsDraftIdPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsDraftIdPatchSignal();
        Q_EMIT draftRegistrationsDraftIdPatchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsDraftIdPatchSignalE(error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsDraftIdPatchSignalError(error_type, error_str);
        Q_EMIT draftRegistrationsDraftIdPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::draftRegistrationsRead() {
    QString fullPath = QString(_serverConfigs["draftRegistrationsRead"][_serverIndices.value("draftRegistrationsRead")].URL()+"/draft_registrations/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::draftRegistrationsReadCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::draftRegistrationsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDraft_Registration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT draftRegistrationsReadSignal(output);
        Q_EMIT draftRegistrationsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT draftRegistrationsReadSignalE(output, error_type, error_str);
        Q_EMIT draftRegistrationsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT draftRegistrationsReadSignalError(output, error_type, error_str);
        Q_EMIT draftRegistrationsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::nodesDraftRegistrationsRead(const QString &node_id, const QString &draft_id) {
    QString fullPath = QString(_serverConfigs["nodesDraftRegistrationsRead"][_serverIndices.value("nodesDraftRegistrationsRead")].URL()+"/nodes/{node_id}/draft_registrations/{draft_id}/");
    
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("node_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node_id"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::nodesDraftRegistrationsReadCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::nodesDraftRegistrationsReadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDraft_Registration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT nodesDraftRegistrationsReadSignal(output);
        Q_EMIT nodesDraftRegistrationsReadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT nodesDraftRegistrationsReadSignalE(output, error_type, error_str);
        Q_EMIT nodesDraftRegistrationsReadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT nodesDraftRegistrationsReadSignalError(output, error_type, error_str);
        Q_EMIT nodesDraftRegistrationsReadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::nodesDraftRegistrationsSubjects(const QString &draft_id) {
    QString fullPath = QString(_serverConfigs["nodesDraftRegistrationsSubjects"][_serverIndices.value("nodesDraftRegistrationsSubjects")].URL()+"/draft_registrations/{draft_id}/subjects/");
    
    
    {
        QString draft_idPathParam("{");
        draft_idPathParam.append("draft_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "draft_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"draft_id"+pathSuffix : pathPrefix;
        fullPath.replace(draft_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(draft_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDraftRegistrationsApi::nodesDraftRegistrationsSubjectsCallback);
    connect(this, &OAIDraftRegistrationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDraftRegistrationsApi::nodesDraftRegistrationsSubjectsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISubject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT nodesDraftRegistrationsSubjectsSignal(output);
        Q_EMIT nodesDraftRegistrationsSubjectsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT nodesDraftRegistrationsSubjectsSignalE(output, error_type, error_str);
        Q_EMIT nodesDraftRegistrationsSubjectsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT nodesDraftRegistrationsSubjectsSignalError(output, error_type, error_str);
        Q_EMIT nodesDraftRegistrationsSubjectsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDraftRegistrationsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
