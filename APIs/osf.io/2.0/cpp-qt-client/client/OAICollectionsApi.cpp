/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICollectionsApi::OAICollectionsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICollectionsApi::~OAICollectionsApi() {
}

void OAICollectionsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.test.osf.io/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("collectionsAddMetadata", defaultConf);
    _serverIndices.insert("collectionsAddMetadata", 0);
    _serverConfigs.insert("collectionsCollectedMetadata", defaultConf);
    _serverIndices.insert("collectionsCollectedMetadata", 0);
    _serverConfigs.insert("collectionsCreate", defaultConf);
    _serverIndices.insert("collectionsCreate", 0);
    _serverConfigs.insert("collectionsDelete", defaultConf);
    _serverIndices.insert("collectionsDelete", 0);
    _serverConfigs.insert("collectionsDetail", defaultConf);
    _serverIndices.insert("collectionsDetail", 0);
    _serverConfigs.insert("collectionsLinkedNodesList", defaultConf);
    _serverIndices.insert("collectionsLinkedNodesList", 0);
    _serverConfigs.insert("collectionsLinkedNodesRelationships", defaultConf);
    _serverIndices.insert("collectionsLinkedNodesRelationships", 0);
    _serverConfigs.insert("collectionsLinkedNodesRelationshipsCreate", defaultConf);
    _serverIndices.insert("collectionsLinkedNodesRelationshipsCreate", 0);
    _serverConfigs.insert("collectionsLinkedNodesRelationshipsDelete", defaultConf);
    _serverIndices.insert("collectionsLinkedNodesRelationshipsDelete", 0);
    _serverConfigs.insert("collectionsLinkedPreprintsList", defaultConf);
    _serverIndices.insert("collectionsLinkedPreprintsList", 0);
    _serverConfigs.insert("collectionsLinkedRegistrationsList", defaultConf);
    _serverIndices.insert("collectionsLinkedRegistrationsList", 0);
    _serverConfigs.insert("collectionsLinkedRegistrationsRelationships", defaultConf);
    _serverIndices.insert("collectionsLinkedRegistrationsRelationships", 0);
    _serverConfigs.insert("collectionsLinkedRegistrationsRelationshipsCreate", defaultConf);
    _serverIndices.insert("collectionsLinkedRegistrationsRelationshipsCreate", 0);
    _serverConfigs.insert("collectionsLinkedRegistrationsRelationshipsDelete", defaultConf);
    _serverIndices.insert("collectionsLinkedRegistrationsRelationshipsDelete", 0);
    _serverConfigs.insert("collectionsList", defaultConf);
    _serverIndices.insert("collectionsList", 0);
    _serverConfigs.insert("collectionsMetadataDelete", defaultConf);
    _serverIndices.insert("collectionsMetadataDelete", 0);
    _serverConfigs.insert("collectionsMetadataDetail", defaultConf);
    _serverIndices.insert("collectionsMetadataDetail", 0);
    _serverConfigs.insert("collectionsMetadataRegistrationsDetail", defaultConf);
    _serverIndices.insert("collectionsMetadataRegistrationsDetail", 0);
    _serverConfigs.insert("collectionsMetadataRegistrationsList", defaultConf);
    _serverIndices.insert("collectionsMetadataRegistrationsList", 0);
    _serverConfigs.insert("collectionsMetadataSubjectsRelationships", defaultConf);
    _serverIndices.insert("collectionsMetadataSubjectsRelationships", 0);
    _serverConfigs.insert("collectionsMetadataSubjectsRelationshipsUpdate", defaultConf);
    _serverIndices.insert("collectionsMetadataSubjectsRelationshipsUpdate", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICollectionsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICollectionsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICollectionsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICollectionsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICollectionsApi::setUsername(const QString &username) {
    _username = username;
}

void OAICollectionsApi::setPassword(const QString &password) {
    _password = password;
}


void OAICollectionsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICollectionsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICollectionsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICollectionsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICollectionsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICollectionsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICollectionsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICollectionsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICollectionsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICollectionsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICollectionsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICollectionsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICollectionsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICollectionsApi::collectionsAddMetadata(const QString &collection_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsAddMetadata"][_serverIndices.value("collectionsAddMetadata")].URL()+"/collections/{collection_id}/collected_metadata/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsAddMetadataCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsAddMetadataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsAddMetadataSignal();
        Q_EMIT collectionsAddMetadataSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsAddMetadataSignalE(error_type, error_str);
        Q_EMIT collectionsAddMetadataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsAddMetadataSignalError(error_type, error_str);
        Q_EMIT collectionsAddMetadataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsCollectedMetadata(const QString &collection_id, const QString &cgm_id) {
    QString fullPath = QString(_serverConfigs["collectionsCollectedMetadata"][_serverIndices.value("collectionsCollectedMetadata")].URL()+"/collections/{collection_id}/collected_metadata/{cgm_id}/subjects/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    
    {
        QString cgm_idPathParam("{");
        cgm_idPathParam.append("cgm_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cgm_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cgm_id"+pathSuffix : pathPrefix;
        fullPath.replace(cgm_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cgm_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsCollectedMetadataCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsCollectedMetadataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsCollectedMetadataSignal();
        Q_EMIT collectionsCollectedMetadataSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsCollectedMetadataSignalE(error_type, error_str);
        Q_EMIT collectionsCollectedMetadataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsCollectedMetadataSignalError(error_type, error_str);
        Q_EMIT collectionsCollectedMetadataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsCreate(const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsCreate"][_serverIndices.value("collectionsCreate")].URL()+"/collections/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsCreateCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsCreateSignal();
        Q_EMIT collectionsCreateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsCreateSignalE(error_type, error_str);
        Q_EMIT collectionsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsCreateSignalError(error_type, error_str);
        Q_EMIT collectionsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsDelete(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsDelete"][_serverIndices.value("collectionsDelete")].URL()+"/collections/{collection_id}/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsDeleteCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsDeleteSignal();
        Q_EMIT collectionsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsDeleteSignalE(error_type, error_str);
        Q_EMIT collectionsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsDeleteSignalError(error_type, error_str);
        Q_EMIT collectionsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsDetail(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsDetail"][_serverIndices.value("collectionsDetail")].URL()+"/collections/{collection_id}/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsDetailCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICollection> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICollection val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsDetailSignal(output);
        Q_EMIT collectionsDetailSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsDetailSignalE(output, error_type, error_str);
        Q_EMIT collectionsDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsDetailSignalError(output, error_type, error_str);
        Q_EMIT collectionsDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedNodesList(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedNodesList"][_serverIndices.value("collectionsLinkedNodesList")].URL()+"/collections/{collection_id}/linked_nodes");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedNodesListCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedNodesListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedNodesListSignal();
        Q_EMIT collectionsLinkedNodesListSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedNodesListSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedNodesListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedNodesListSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedNodesListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedNodesRelationships(const QString &collection_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedNodesRelationships"][_serverIndices.value("collectionsLinkedNodesRelationships")].URL()+"/collections/{collection_id}/linked_nodes/relationships/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedNodesRelationshipsCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedNodesRelationshipsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedNodesRelationshipsSignal();
        Q_EMIT collectionsLinkedNodesRelationshipsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedNodesRelationshipsSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedNodesRelationshipsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedNodesRelationshipsSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedNodesRelationshipsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedNodesRelationshipsCreate(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedNodesRelationshipsCreate"][_serverIndices.value("collectionsLinkedNodesRelationshipsCreate")].URL()+"/collections/{collection_id}/linked_nodes/relationships/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedNodesRelationshipsCreateCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedNodesRelationshipsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedNodesRelationshipsCreateSignal();
        Q_EMIT collectionsLinkedNodesRelationshipsCreateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedNodesRelationshipsCreateSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedNodesRelationshipsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedNodesRelationshipsCreateSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedNodesRelationshipsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedNodesRelationshipsDelete(const QString &collection_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedNodesRelationshipsDelete"][_serverIndices.value("collectionsLinkedNodesRelationshipsDelete")].URL()+"/collections/{collection_id}/linked_nodes/relationships/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedNodesRelationshipsDeleteCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedNodesRelationshipsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedNodesRelationshipsDeleteSignal();
        Q_EMIT collectionsLinkedNodesRelationshipsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedNodesRelationshipsDeleteSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedNodesRelationshipsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedNodesRelationshipsDeleteSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedNodesRelationshipsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedPreprintsList(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedPreprintsList"][_serverIndices.value("collectionsLinkedPreprintsList")].URL()+"/collections/{collection_id}/linked_preprints/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedPreprintsListCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedPreprintsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedPreprintsListSignal();
        Q_EMIT collectionsLinkedPreprintsListSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedPreprintsListSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedPreprintsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedPreprintsListSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedPreprintsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedRegistrationsList(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedRegistrationsList"][_serverIndices.value("collectionsLinkedRegistrationsList")].URL()+"/collections/{collection_id}/linked_registrations/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedRegistrationsListCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedRegistrationsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedRegistrationsListSignal();
        Q_EMIT collectionsLinkedRegistrationsListSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedRegistrationsListSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedRegistrationsListSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedRegistrationsRelationships(const QString &collection_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedRegistrationsRelationships"][_serverIndices.value("collectionsLinkedRegistrationsRelationships")].URL()+"/collections/{collection_id}/linked_registrations/relationships/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedRegistrationsRelationshipsSignal();
        Q_EMIT collectionsLinkedRegistrationsRelationshipsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedRegistrationsRelationshipsSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsRelationshipsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedRegistrationsRelationshipsSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsRelationshipsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsCreate(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedRegistrationsRelationshipsCreate"][_serverIndices.value("collectionsLinkedRegistrationsRelationshipsCreate")].URL()+"/collections/{collection_id}/linked_registrations/relationships/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsCreateCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedRegistrationsRelationshipsCreateSignal();
        Q_EMIT collectionsLinkedRegistrationsRelationshipsCreateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedRegistrationsRelationshipsCreateSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsRelationshipsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedRegistrationsRelationshipsCreateSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsRelationshipsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsDelete(const QString &collection_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsLinkedRegistrationsRelationshipsDelete"][_serverIndices.value("collectionsLinkedRegistrationsRelationshipsDelete")].URL()+"/collections/{collection_id}/linked_registrations/relationships/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsDeleteCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsLinkedRegistrationsRelationshipsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsLinkedRegistrationsRelationshipsDeleteSignal();
        Q_EMIT collectionsLinkedRegistrationsRelationshipsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsLinkedRegistrationsRelationshipsDeleteSignalE(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsRelationshipsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsLinkedRegistrationsRelationshipsDeleteSignalError(error_type, error_str);
        Q_EMIT collectionsLinkedRegistrationsRelationshipsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsList() {
    QString fullPath = QString(_serverConfigs["collectionsList"][_serverIndices.value("collectionsList")].URL()+"/collections/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsListCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICollection> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICollection val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsListSignal(output);
        Q_EMIT collectionsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsListSignalE(output, error_type, error_str);
        Q_EMIT collectionsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsListSignalError(output, error_type, error_str);
        Q_EMIT collectionsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsMetadataDelete(const QString &collection_id, const QString &cgm_id) {
    QString fullPath = QString(_serverConfigs["collectionsMetadataDelete"][_serverIndices.value("collectionsMetadataDelete")].URL()+"/collections/{collection_id}/collected_metadata/{cgm_id}");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    
    {
        QString cgm_idPathParam("{");
        cgm_idPathParam.append("cgm_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cgm_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cgm_id"+pathSuffix : pathPrefix;
        fullPath.replace(cgm_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cgm_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsMetadataDeleteCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsMetadataDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsMetadataDeleteSignal();
        Q_EMIT collectionsMetadataDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsMetadataDeleteSignalE(error_type, error_str);
        Q_EMIT collectionsMetadataDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsMetadataDeleteSignalError(error_type, error_str);
        Q_EMIT collectionsMetadataDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsMetadataDetail(const QString &collection_id, const QString &cgm_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsMetadataDetail"][_serverIndices.value("collectionsMetadataDetail")].URL()+"/collections/{collection_id}/collected_metadata/{cgm_id}");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    
    {
        QString cgm_idPathParam("{");
        cgm_idPathParam.append("cgm_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cgm_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cgm_id"+pathSuffix : pathPrefix;
        fullPath.replace(cgm_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cgm_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsMetadataDetailCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsMetadataDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsMetadataDetailSignal();
        Q_EMIT collectionsMetadataDetailSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsMetadataDetailSignalE(error_type, error_str);
        Q_EMIT collectionsMetadataDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsMetadataDetailSignalError(error_type, error_str);
        Q_EMIT collectionsMetadataDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsMetadataRegistrationsDetail(const QString &collection_id, const QString &cgm_id) {
    QString fullPath = QString(_serverConfigs["collectionsMetadataRegistrationsDetail"][_serverIndices.value("collectionsMetadataRegistrationsDetail")].URL()+"/collections/{collection_id}/collected_metadata/{cgm_id}");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    
    {
        QString cgm_idPathParam("{");
        cgm_idPathParam.append("cgm_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cgm_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cgm_id"+pathSuffix : pathPrefix;
        fullPath.replace(cgm_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cgm_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsMetadataRegistrationsDetailCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsMetadataRegistrationsDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsMetadataRegistrationsDetailSignal();
        Q_EMIT collectionsMetadataRegistrationsDetailSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsMetadataRegistrationsDetailSignalE(error_type, error_str);
        Q_EMIT collectionsMetadataRegistrationsDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsMetadataRegistrationsDetailSignalError(error_type, error_str);
        Q_EMIT collectionsMetadataRegistrationsDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsMetadataRegistrationsList(const QString &collection_id) {
    QString fullPath = QString(_serverConfigs["collectionsMetadataRegistrationsList"][_serverIndices.value("collectionsMetadataRegistrationsList")].URL()+"/collections/{collection_id}/collected_metadata/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsMetadataRegistrationsListCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsMetadataRegistrationsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsMetadataRegistrationsListSignal();
        Q_EMIT collectionsMetadataRegistrationsListSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsMetadataRegistrationsListSignalE(error_type, error_str);
        Q_EMIT collectionsMetadataRegistrationsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsMetadataRegistrationsListSignalError(error_type, error_str);
        Q_EMIT collectionsMetadataRegistrationsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsMetadataSubjectsRelationships(const QString &collection_id, const QString &cgm_id) {
    QString fullPath = QString(_serverConfigs["collectionsMetadataSubjectsRelationships"][_serverIndices.value("collectionsMetadataSubjectsRelationships")].URL()+"/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    
    {
        QString cgm_idPathParam("{");
        cgm_idPathParam.append("cgm_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cgm_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cgm_id"+pathSuffix : pathPrefix;
        fullPath.replace(cgm_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cgm_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsMetadataSubjectsRelationshipsCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsMetadataSubjectsRelationshipsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsMetadataSubjectsRelationshipsSignal();
        Q_EMIT collectionsMetadataSubjectsRelationshipsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsMetadataSubjectsRelationshipsSignalE(error_type, error_str);
        Q_EMIT collectionsMetadataSubjectsRelationshipsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsMetadataSubjectsRelationshipsSignalError(error_type, error_str);
        Q_EMIT collectionsMetadataSubjectsRelationshipsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::collectionsMetadataSubjectsRelationshipsUpdate(const QString &collection_id, const QString &cgm_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["collectionsMetadataSubjectsRelationshipsUpdate"][_serverIndices.value("collectionsMetadataSubjectsRelationshipsUpdate")].URL()+"/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/");
    
    
    {
        QString collection_idPathParam("{");
        collection_idPathParam.append("collection_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_id"+pathSuffix : pathPrefix;
        fullPath.replace(collection_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_id)));
    }
    
    {
        QString cgm_idPathParam("{");
        cgm_idPathParam.append("cgm_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cgm_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cgm_id"+pathSuffix : pathPrefix;
        fullPath.replace(cgm_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cgm_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICollectionsApi::collectionsMetadataSubjectsRelationshipsUpdateCallback);
    connect(this, &OAICollectionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICollectionsApi::collectionsMetadataSubjectsRelationshipsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsMetadataSubjectsRelationshipsUpdateSignal();
        Q_EMIT collectionsMetadataSubjectsRelationshipsUpdateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsMetadataSubjectsRelationshipsUpdateSignalE(error_type, error_str);
        Q_EMIT collectionsMetadataSubjectsRelationshipsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsMetadataSubjectsRelationshipsUpdateSignalError(error_type, error_str);
        Q_EMIT collectionsMetadataSubjectsRelationshipsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICollectionsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
