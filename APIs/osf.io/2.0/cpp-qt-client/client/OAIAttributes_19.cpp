/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_19.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_19::OAIAttributes_19(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_19::OAIAttributes_19() {
    this->initializeModel();
}

OAIAttributes_19::~OAIAttributes_19() {}

void OAIAttributes_19::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_current_user_can_comment_isSet = false;
    m_current_user_can_comment_isValid = false;

    m_current_user_permissions_isSet = false;
    m_current_user_permissions_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_date_registered_isSet = false;
    m_date_registered_isValid = false;

    m_date_withdrawn_isSet = false;
    m_date_withdrawn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_embargo_end_date_isSet = false;
    m_embargo_end_date_isValid = false;

    m_fork_isSet = false;
    m_fork_isValid = false;

    m_node_license_isSet = false;
    m_node_license_isValid = false;

    m_pending_embargo_approval_isSet = false;
    m_pending_embargo_approval_isValid = false;

    m_pending_registration_approval_isSet = false;
    m_pending_registration_approval_isValid = false;

    m_pending_withdrawal_isSet = false;
    m_pending_withdrawal_isValid = false;

    m_preprint_isSet = false;
    m_preprint_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_registered_meta_isSet = false;
    m_registered_meta_isValid = false;

    m_registration_isSet = false;
    m_registration_isValid = false;

    m_registration_supplement_isSet = false;
    m_registration_supplement_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_template_from_isSet = false;
    m_template_from_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_withdrawal_justification_isSet = false;
    m_withdrawal_justification_isValid = false;

    m_withdrawn_isSet = false;
    m_withdrawn_isValid = false;
}

void OAIAttributes_19::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_19::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_current_user_can_comment_isValid = ::OpenAPI::fromJsonValue(m_current_user_can_comment, json[QString("current_user_can_comment")]);
    m_current_user_can_comment_isSet = !json[QString("current_user_can_comment")].isNull() && m_current_user_can_comment_isValid;

    m_current_user_permissions_isValid = ::OpenAPI::fromJsonValue(m_current_user_permissions, json[QString("current_user_permissions")]);
    m_current_user_permissions_isSet = !json[QString("current_user_permissions")].isNull() && m_current_user_permissions_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("date_modified")]);
    m_date_modified_isSet = !json[QString("date_modified")].isNull() && m_date_modified_isValid;

    m_date_registered_isValid = ::OpenAPI::fromJsonValue(m_date_registered, json[QString("date_registered")]);
    m_date_registered_isSet = !json[QString("date_registered")].isNull() && m_date_registered_isValid;

    m_date_withdrawn_isValid = ::OpenAPI::fromJsonValue(m_date_withdrawn, json[QString("date_withdrawn")]);
    m_date_withdrawn_isSet = !json[QString("date_withdrawn")].isNull() && m_date_withdrawn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_embargo_end_date_isValid = ::OpenAPI::fromJsonValue(m_embargo_end_date, json[QString("embargo_end_date")]);
    m_embargo_end_date_isSet = !json[QString("embargo_end_date")].isNull() && m_embargo_end_date_isValid;

    m_fork_isValid = ::OpenAPI::fromJsonValue(m_fork, json[QString("fork")]);
    m_fork_isSet = !json[QString("fork")].isNull() && m_fork_isValid;

    m_node_license_isValid = ::OpenAPI::fromJsonValue(m_node_license, json[QString("node_license")]);
    m_node_license_isSet = !json[QString("node_license")].isNull() && m_node_license_isValid;

    m_pending_embargo_approval_isValid = ::OpenAPI::fromJsonValue(m_pending_embargo_approval, json[QString("pending_embargo_approval")]);
    m_pending_embargo_approval_isSet = !json[QString("pending_embargo_approval")].isNull() && m_pending_embargo_approval_isValid;

    m_pending_registration_approval_isValid = ::OpenAPI::fromJsonValue(m_pending_registration_approval, json[QString("pending_registration_approval")]);
    m_pending_registration_approval_isSet = !json[QString("pending_registration_approval")].isNull() && m_pending_registration_approval_isValid;

    m_pending_withdrawal_isValid = ::OpenAPI::fromJsonValue(m_pending_withdrawal, json[QString("pending_withdrawal")]);
    m_pending_withdrawal_isSet = !json[QString("pending_withdrawal")].isNull() && m_pending_withdrawal_isValid;

    m_preprint_isValid = ::OpenAPI::fromJsonValue(m_preprint, json[QString("preprint")]);
    m_preprint_isSet = !json[QString("preprint")].isNull() && m_preprint_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_registered_meta_isValid = ::OpenAPI::fromJsonValue(m_registered_meta, json[QString("registered_meta")]);
    m_registered_meta_isSet = !json[QString("registered_meta")].isNull() && m_registered_meta_isValid;

    m_registration_isValid = ::OpenAPI::fromJsonValue(m_registration, json[QString("registration")]);
    m_registration_isSet = !json[QString("registration")].isNull() && m_registration_isValid;

    m_registration_supplement_isValid = ::OpenAPI::fromJsonValue(m_registration_supplement, json[QString("registration_supplement")]);
    m_registration_supplement_isSet = !json[QString("registration_supplement")].isNull() && m_registration_supplement_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_template_from_isValid = ::OpenAPI::fromJsonValue(m_template_from, json[QString("template_from")]);
    m_template_from_isSet = !json[QString("template_from")].isNull() && m_template_from_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_withdrawal_justification_isValid = ::OpenAPI::fromJsonValue(m_withdrawal_justification, json[QString("withdrawal_justification")]);
    m_withdrawal_justification_isSet = !json[QString("withdrawal_justification")].isNull() && m_withdrawal_justification_isValid;

    m_withdrawn_isValid = ::OpenAPI::fromJsonValue(m_withdrawn, json[QString("withdrawn")]);
    m_withdrawn_isSet = !json[QString("withdrawn")].isNull() && m_withdrawn_isValid;
}

QString OAIAttributes_19::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_19::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_collection_isSet) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_current_user_can_comment_isSet) {
        obj.insert(QString("current_user_can_comment"), ::OpenAPI::toJsonValue(m_current_user_can_comment));
    }
    if (m_current_user_permissions.size() > 0) {
        obj.insert(QString("current_user_permissions"), ::OpenAPI::toJsonValue(m_current_user_permissions));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("date_modified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_date_registered_isSet) {
        obj.insert(QString("date_registered"), ::OpenAPI::toJsonValue(m_date_registered));
    }
    if (m_date_withdrawn_isSet) {
        obj.insert(QString("date_withdrawn"), ::OpenAPI::toJsonValue(m_date_withdrawn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_embargo_end_date_isSet) {
        obj.insert(QString("embargo_end_date"), ::OpenAPI::toJsonValue(m_embargo_end_date));
    }
    if (m_fork_isSet) {
        obj.insert(QString("fork"), ::OpenAPI::toJsonValue(m_fork));
    }
    if (m_node_license_isSet) {
        obj.insert(QString("node_license"), ::OpenAPI::toJsonValue(m_node_license));
    }
    if (m_pending_embargo_approval_isSet) {
        obj.insert(QString("pending_embargo_approval"), ::OpenAPI::toJsonValue(m_pending_embargo_approval));
    }
    if (m_pending_registration_approval_isSet) {
        obj.insert(QString("pending_registration_approval"), ::OpenAPI::toJsonValue(m_pending_registration_approval));
    }
    if (m_pending_withdrawal_isSet) {
        obj.insert(QString("pending_withdrawal"), ::OpenAPI::toJsonValue(m_pending_withdrawal));
    }
    if (m_preprint_isSet) {
        obj.insert(QString("preprint"), ::OpenAPI::toJsonValue(m_preprint));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_registered_meta_isSet) {
        obj.insert(QString("registered_meta"), ::OpenAPI::toJsonValue(m_registered_meta));
    }
    if (m_registration_isSet) {
        obj.insert(QString("registration"), ::OpenAPI::toJsonValue(m_registration));
    }
    if (m_registration_supplement_isSet) {
        obj.insert(QString("registration_supplement"), ::OpenAPI::toJsonValue(m_registration_supplement));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_template_from_isSet) {
        obj.insert(QString("template_from"), ::OpenAPI::toJsonValue(m_template_from));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_withdrawal_justification_isSet) {
        obj.insert(QString("withdrawal_justification"), ::OpenAPI::toJsonValue(m_withdrawal_justification));
    }
    if (m_withdrawn_isSet) {
        obj.insert(QString("withdrawn"), ::OpenAPI::toJsonValue(m_withdrawn));
    }
    return obj;
}

QString OAIAttributes_19::getCategory() const {
    return m_category;
}
void OAIAttributes_19::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAttributes_19::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAttributes_19::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIAttributes_19::isCollection() const {
    return m_collection;
}
void OAIAttributes_19::setCollection(const bool &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIAttributes_19::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIAttributes_19::is_collection_Valid() const{
    return m_collection_isValid;
}

bool OAIAttributes_19::isCurrentUserCanComment() const {
    return m_current_user_can_comment;
}
void OAIAttributes_19::setCurrentUserCanComment(const bool &current_user_can_comment) {
    m_current_user_can_comment = current_user_can_comment;
    m_current_user_can_comment_isSet = true;
}

bool OAIAttributes_19::is_current_user_can_comment_Set() const{
    return m_current_user_can_comment_isSet;
}

bool OAIAttributes_19::is_current_user_can_comment_Valid() const{
    return m_current_user_can_comment_isValid;
}

QList<QString> OAIAttributes_19::getCurrentUserPermissions() const {
    return m_current_user_permissions;
}
void OAIAttributes_19::setCurrentUserPermissions(const QList<QString> &current_user_permissions) {
    m_current_user_permissions = current_user_permissions;
    m_current_user_permissions_isSet = true;
}

bool OAIAttributes_19::is_current_user_permissions_Set() const{
    return m_current_user_permissions_isSet;
}

bool OAIAttributes_19::is_current_user_permissions_Valid() const{
    return m_current_user_permissions_isValid;
}

QDateTime OAIAttributes_19::getDateCreated() const {
    return m_date_created;
}
void OAIAttributes_19::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAttributes_19::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAttributes_19::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAttributes_19::getDateModified() const {
    return m_date_modified;
}
void OAIAttributes_19::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIAttributes_19::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIAttributes_19::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QDateTime OAIAttributes_19::getDateRegistered() const {
    return m_date_registered;
}
void OAIAttributes_19::setDateRegistered(const QDateTime &date_registered) {
    m_date_registered = date_registered;
    m_date_registered_isSet = true;
}

bool OAIAttributes_19::is_date_registered_Set() const{
    return m_date_registered_isSet;
}

bool OAIAttributes_19::is_date_registered_Valid() const{
    return m_date_registered_isValid;
}

QDateTime OAIAttributes_19::getDateWithdrawn() const {
    return m_date_withdrawn;
}
void OAIAttributes_19::setDateWithdrawn(const QDateTime &date_withdrawn) {
    m_date_withdrawn = date_withdrawn;
    m_date_withdrawn_isSet = true;
}

bool OAIAttributes_19::is_date_withdrawn_Set() const{
    return m_date_withdrawn_isSet;
}

bool OAIAttributes_19::is_date_withdrawn_Valid() const{
    return m_date_withdrawn_isValid;
}

QString OAIAttributes_19::getDescription() const {
    return m_description;
}
void OAIAttributes_19::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributes_19::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributes_19::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAttributes_19::getEmbargoEndDate() const {
    return m_embargo_end_date;
}
void OAIAttributes_19::setEmbargoEndDate(const QDateTime &embargo_end_date) {
    m_embargo_end_date = embargo_end_date;
    m_embargo_end_date_isSet = true;
}

bool OAIAttributes_19::is_embargo_end_date_Set() const{
    return m_embargo_end_date_isSet;
}

bool OAIAttributes_19::is_embargo_end_date_Valid() const{
    return m_embargo_end_date_isValid;
}

bool OAIAttributes_19::isFork() const {
    return m_fork;
}
void OAIAttributes_19::setFork(const bool &fork) {
    m_fork = fork;
    m_fork_isSet = true;
}

bool OAIAttributes_19::is_fork_Set() const{
    return m_fork_isSet;
}

bool OAIAttributes_19::is_fork_Valid() const{
    return m_fork_isValid;
}

QString OAIAttributes_19::getNodeLicense() const {
    return m_node_license;
}
void OAIAttributes_19::setNodeLicense(const QString &node_license) {
    m_node_license = node_license;
    m_node_license_isSet = true;
}

bool OAIAttributes_19::is_node_license_Set() const{
    return m_node_license_isSet;
}

bool OAIAttributes_19::is_node_license_Valid() const{
    return m_node_license_isValid;
}

bool OAIAttributes_19::isPendingEmbargoApproval() const {
    return m_pending_embargo_approval;
}
void OAIAttributes_19::setPendingEmbargoApproval(const bool &pending_embargo_approval) {
    m_pending_embargo_approval = pending_embargo_approval;
    m_pending_embargo_approval_isSet = true;
}

bool OAIAttributes_19::is_pending_embargo_approval_Set() const{
    return m_pending_embargo_approval_isSet;
}

bool OAIAttributes_19::is_pending_embargo_approval_Valid() const{
    return m_pending_embargo_approval_isValid;
}

bool OAIAttributes_19::isPendingRegistrationApproval() const {
    return m_pending_registration_approval;
}
void OAIAttributes_19::setPendingRegistrationApproval(const bool &pending_registration_approval) {
    m_pending_registration_approval = pending_registration_approval;
    m_pending_registration_approval_isSet = true;
}

bool OAIAttributes_19::is_pending_registration_approval_Set() const{
    return m_pending_registration_approval_isSet;
}

bool OAIAttributes_19::is_pending_registration_approval_Valid() const{
    return m_pending_registration_approval_isValid;
}

bool OAIAttributes_19::isPendingWithdrawal() const {
    return m_pending_withdrawal;
}
void OAIAttributes_19::setPendingWithdrawal(const bool &pending_withdrawal) {
    m_pending_withdrawal = pending_withdrawal;
    m_pending_withdrawal_isSet = true;
}

bool OAIAttributes_19::is_pending_withdrawal_Set() const{
    return m_pending_withdrawal_isSet;
}

bool OAIAttributes_19::is_pending_withdrawal_Valid() const{
    return m_pending_withdrawal_isValid;
}

bool OAIAttributes_19::isPreprint() const {
    return m_preprint;
}
void OAIAttributes_19::setPreprint(const bool &preprint) {
    m_preprint = preprint;
    m_preprint_isSet = true;
}

bool OAIAttributes_19::is_preprint_Set() const{
    return m_preprint_isSet;
}

bool OAIAttributes_19::is_preprint_Valid() const{
    return m_preprint_isValid;
}

bool OAIAttributes_19::isRPublic() const {
    return m_r_public;
}
void OAIAttributes_19::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIAttributes_19::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIAttributes_19::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAIAttributes_19::getRegisteredMeta() const {
    return m_registered_meta;
}
void OAIAttributes_19::setRegisteredMeta(const QString &registered_meta) {
    m_registered_meta = registered_meta;
    m_registered_meta_isSet = true;
}

bool OAIAttributes_19::is_registered_meta_Set() const{
    return m_registered_meta_isSet;
}

bool OAIAttributes_19::is_registered_meta_Valid() const{
    return m_registered_meta_isValid;
}

bool OAIAttributes_19::isRegistration() const {
    return m_registration;
}
void OAIAttributes_19::setRegistration(const bool &registration) {
    m_registration = registration;
    m_registration_isSet = true;
}

bool OAIAttributes_19::is_registration_Set() const{
    return m_registration_isSet;
}

bool OAIAttributes_19::is_registration_Valid() const{
    return m_registration_isValid;
}

QString OAIAttributes_19::getRegistrationSupplement() const {
    return m_registration_supplement;
}
void OAIAttributes_19::setRegistrationSupplement(const QString &registration_supplement) {
    m_registration_supplement = registration_supplement;
    m_registration_supplement_isSet = true;
}

bool OAIAttributes_19::is_registration_supplement_Set() const{
    return m_registration_supplement_isSet;
}

bool OAIAttributes_19::is_registration_supplement_Valid() const{
    return m_registration_supplement_isValid;
}

QList<QString> OAIAttributes_19::getTags() const {
    return m_tags;
}
void OAIAttributes_19::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAttributes_19::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAttributes_19::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAttributes_19::getTemplateFrom() const {
    return m_template_from;
}
void OAIAttributes_19::setTemplateFrom(const QString &template_from) {
    m_template_from = template_from;
    m_template_from_isSet = true;
}

bool OAIAttributes_19::is_template_from_Set() const{
    return m_template_from_isSet;
}

bool OAIAttributes_19::is_template_from_Valid() const{
    return m_template_from_isValid;
}

QString OAIAttributes_19::getTitle() const {
    return m_title;
}
void OAIAttributes_19::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttributes_19::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttributes_19::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAttributes_19::getWithdrawalJustification() const {
    return m_withdrawal_justification;
}
void OAIAttributes_19::setWithdrawalJustification(const QString &withdrawal_justification) {
    m_withdrawal_justification = withdrawal_justification;
    m_withdrawal_justification_isSet = true;
}

bool OAIAttributes_19::is_withdrawal_justification_Set() const{
    return m_withdrawal_justification_isSet;
}

bool OAIAttributes_19::is_withdrawal_justification_Valid() const{
    return m_withdrawal_justification_isValid;
}

bool OAIAttributes_19::isWithdrawn() const {
    return m_withdrawn;
}
void OAIAttributes_19::setWithdrawn(const bool &withdrawn) {
    m_withdrawn = withdrawn;
    m_withdrawn_isSet = true;
}

bool OAIAttributes_19::is_withdrawn_Set() const{
    return m_withdrawn_isSet;
}

bool OAIAttributes_19::is_withdrawn_Valid() const{
    return m_withdrawn_isValid;
}

bool OAIAttributes_19::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_can_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_withdrawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_embargo_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_registration_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_withdrawal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_meta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_supplement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawal_justification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_19::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
