/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreprintProvidersApi_H
#define OAI_OAIPreprintProvidersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILicense.h"
#include "OAIPreprint.h"
#include "OAIPreprint_Providers.h"
#include "OAITaxonomy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreprintProvidersApi : public QObject {
    Q_OBJECT

public:
    OAIPreprintProvidersApi(const int timeOut = 0);
    ~OAIPreprintProvidersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  preprint_provider_id QString [required]
    */
    virtual void preprintProviderDetail(const QString &preprint_provider_id);

    /**
    * @param[in]  preprint_provider_id QString [required]
    */
    virtual void preprintProviderLicensesList(const QString &preprint_provider_id);


    virtual void preprintProviderList();

    /**
    * @param[in]  preprint_provider_id QString [required]
    */
    virtual void preprintProviderTaxonomiesList(const QString &preprint_provider_id);

    /**
    * @param[in]  preprint_provider_id QString [required]
    */
    virtual void preprintProvidersPreprintsList(const QString &preprint_provider_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void preprintProviderDetailCallback(OAIHttpRequestWorker *worker);
    void preprintProviderLicensesListCallback(OAIHttpRequestWorker *worker);
    void preprintProviderListCallback(OAIHttpRequestWorker *worker);
    void preprintProviderTaxonomiesListCallback(OAIHttpRequestWorker *worker);
    void preprintProvidersPreprintsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void preprintProviderDetailSignal(OAIPreprint_Providers summary);
    void preprintProviderLicensesListSignal(OAILicense summary);
    void preprintProviderListSignal(OAIPreprint_Providers summary);
    void preprintProviderTaxonomiesListSignal(OAITaxonomy summary);
    void preprintProvidersPreprintsListSignal(QList<OAIPreprint> summary);


    void preprintProviderDetailSignalFull(OAIHttpRequestWorker *worker, OAIPreprint_Providers summary);
    void preprintProviderLicensesListSignalFull(OAIHttpRequestWorker *worker, OAILicense summary);
    void preprintProviderListSignalFull(OAIHttpRequestWorker *worker, OAIPreprint_Providers summary);
    void preprintProviderTaxonomiesListSignalFull(OAIHttpRequestWorker *worker, OAITaxonomy summary);
    void preprintProvidersPreprintsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPreprint> summary);

    Q_DECL_DEPRECATED_X("Use preprintProviderDetailSignalError() instead")
    void preprintProviderDetailSignalE(OAIPreprint_Providers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderDetailSignalError(OAIPreprint_Providers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProviderLicensesListSignalError() instead")
    void preprintProviderLicensesListSignalE(OAILicense summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderLicensesListSignalError(OAILicense summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProviderListSignalError() instead")
    void preprintProviderListSignalE(OAIPreprint_Providers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderListSignalError(OAIPreprint_Providers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProviderTaxonomiesListSignalError() instead")
    void preprintProviderTaxonomiesListSignalE(OAITaxonomy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderTaxonomiesListSignalError(OAITaxonomy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProvidersPreprintsListSignalError() instead")
    void preprintProvidersPreprintsListSignalE(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProvidersPreprintsListSignalError(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use preprintProviderDetailSignalErrorFull() instead")
    void preprintProviderDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProviderLicensesListSignalErrorFull() instead")
    void preprintProviderLicensesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderLicensesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProviderListSignalErrorFull() instead")
    void preprintProviderListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProviderTaxonomiesListSignalErrorFull() instead")
    void preprintProviderTaxonomiesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProviderTaxonomiesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use preprintProvidersPreprintsListSignalErrorFull() instead")
    void preprintProvidersPreprintsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void preprintProvidersPreprintsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
