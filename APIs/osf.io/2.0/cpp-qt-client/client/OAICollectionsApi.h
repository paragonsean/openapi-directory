/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionsApi_H
#define OAI_OAICollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollection.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionsApi : public QObject {
    Q_OBJECT

public:
    OAICollectionsApi(const int timeOut = 0);
    ~OAICollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsAddMetadata(const QString &collection_id, const OAIObject &body);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  cgm_id QString [required]
    */
    virtual void collectionsCollectedMetadata(const QString &collection_id, const QString &cgm_id);

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsCreate(const OAIObject &body);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsDelete(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsDetail(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsLinkedNodesList(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsLinkedNodesRelationships(const QString &collection_id, const OAIObject &body);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsLinkedNodesRelationshipsCreate(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsLinkedNodesRelationshipsDelete(const QString &collection_id, const OAIObject &body);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsLinkedPreprintsList(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsLinkedRegistrationsList(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsLinkedRegistrationsRelationships(const QString &collection_id, const OAIObject &body);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsLinkedRegistrationsRelationshipsCreate(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsLinkedRegistrationsRelationshipsDelete(const QString &collection_id, const OAIObject &body);


    virtual void collectionsList();

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  cgm_id QString [required]
    */
    virtual void collectionsMetadataDelete(const QString &collection_id, const QString &cgm_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  cgm_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsMetadataDetail(const QString &collection_id, const QString &cgm_id, const OAIObject &body);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  cgm_id QString [required]
    */
    virtual void collectionsMetadataRegistrationsDetail(const QString &collection_id, const QString &cgm_id);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void collectionsMetadataRegistrationsList(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  cgm_id QString [required]
    */
    virtual void collectionsMetadataSubjectsRelationships(const QString &collection_id, const QString &cgm_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  cgm_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void collectionsMetadataSubjectsRelationshipsUpdate(const QString &collection_id, const QString &cgm_id, const OAIObject &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void collectionsAddMetadataCallback(OAIHttpRequestWorker *worker);
    void collectionsCollectedMetadataCallback(OAIHttpRequestWorker *worker);
    void collectionsCreateCallback(OAIHttpRequestWorker *worker);
    void collectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void collectionsDetailCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesListCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesRelationshipsCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesRelationshipsCreateCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesRelationshipsDeleteCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedPreprintsListCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsListCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsRelationshipsCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsRelationshipsCreateCallback(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsRelationshipsDeleteCallback(OAIHttpRequestWorker *worker);
    void collectionsListCallback(OAIHttpRequestWorker *worker);
    void collectionsMetadataDeleteCallback(OAIHttpRequestWorker *worker);
    void collectionsMetadataDetailCallback(OAIHttpRequestWorker *worker);
    void collectionsMetadataRegistrationsDetailCallback(OAIHttpRequestWorker *worker);
    void collectionsMetadataRegistrationsListCallback(OAIHttpRequestWorker *worker);
    void collectionsMetadataSubjectsRelationshipsCallback(OAIHttpRequestWorker *worker);
    void collectionsMetadataSubjectsRelationshipsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void collectionsAddMetadataSignal();
    void collectionsCollectedMetadataSignal();
    void collectionsCreateSignal();
    void collectionsDeleteSignal();
    void collectionsDetailSignal(QList<OAICollection> summary);
    void collectionsLinkedNodesListSignal();
    void collectionsLinkedNodesRelationshipsSignal();
    void collectionsLinkedNodesRelationshipsCreateSignal();
    void collectionsLinkedNodesRelationshipsDeleteSignal();
    void collectionsLinkedPreprintsListSignal();
    void collectionsLinkedRegistrationsListSignal();
    void collectionsLinkedRegistrationsRelationshipsSignal();
    void collectionsLinkedRegistrationsRelationshipsCreateSignal();
    void collectionsLinkedRegistrationsRelationshipsDeleteSignal();
    void collectionsListSignal(QList<OAICollection> summary);
    void collectionsMetadataDeleteSignal();
    void collectionsMetadataDetailSignal();
    void collectionsMetadataRegistrationsDetailSignal();
    void collectionsMetadataRegistrationsListSignal();
    void collectionsMetadataSubjectsRelationshipsSignal();
    void collectionsMetadataSubjectsRelationshipsUpdateSignal();


    void collectionsAddMetadataSignalFull(OAIHttpRequestWorker *worker);
    void collectionsCollectedMetadataSignalFull(OAIHttpRequestWorker *worker);
    void collectionsCreateSignalFull(OAIHttpRequestWorker *worker);
    void collectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void collectionsDetailSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);
    void collectionsLinkedNodesListSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesRelationshipsSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesRelationshipsCreateSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedNodesRelationshipsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedPreprintsListSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsListSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsRelationshipsSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsRelationshipsCreateSignalFull(OAIHttpRequestWorker *worker);
    void collectionsLinkedRegistrationsRelationshipsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void collectionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);
    void collectionsMetadataDeleteSignalFull(OAIHttpRequestWorker *worker);
    void collectionsMetadataDetailSignalFull(OAIHttpRequestWorker *worker);
    void collectionsMetadataRegistrationsDetailSignalFull(OAIHttpRequestWorker *worker);
    void collectionsMetadataRegistrationsListSignalFull(OAIHttpRequestWorker *worker);
    void collectionsMetadataSubjectsRelationshipsSignalFull(OAIHttpRequestWorker *worker);
    void collectionsMetadataSubjectsRelationshipsUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use collectionsAddMetadataSignalError() instead")
    void collectionsAddMetadataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsAddMetadataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsCollectedMetadataSignalError() instead")
    void collectionsCollectedMetadataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsCollectedMetadataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsCreateSignalError() instead")
    void collectionsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsDeleteSignalError() instead")
    void collectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsDetailSignalError() instead")
    void collectionsDetailSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsDetailSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesListSignalError() instead")
    void collectionsLinkedNodesListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesRelationshipsSignalError() instead")
    void collectionsLinkedNodesRelationshipsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesRelationshipsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesRelationshipsCreateSignalError() instead")
    void collectionsLinkedNodesRelationshipsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesRelationshipsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesRelationshipsDeleteSignalError() instead")
    void collectionsLinkedNodesRelationshipsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesRelationshipsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedPreprintsListSignalError() instead")
    void collectionsLinkedPreprintsListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedPreprintsListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsListSignalError() instead")
    void collectionsLinkedRegistrationsListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsRelationshipsSignalError() instead")
    void collectionsLinkedRegistrationsRelationshipsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsRelationshipsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsRelationshipsCreateSignalError() instead")
    void collectionsLinkedRegistrationsRelationshipsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsRelationshipsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsRelationshipsDeleteSignalError() instead")
    void collectionsLinkedRegistrationsRelationshipsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsRelationshipsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsListSignalError() instead")
    void collectionsListSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsListSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataDeleteSignalError() instead")
    void collectionsMetadataDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataDetailSignalError() instead")
    void collectionsMetadataDetailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataDetailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataRegistrationsDetailSignalError() instead")
    void collectionsMetadataRegistrationsDetailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataRegistrationsDetailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataRegistrationsListSignalError() instead")
    void collectionsMetadataRegistrationsListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataRegistrationsListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataSubjectsRelationshipsSignalError() instead")
    void collectionsMetadataSubjectsRelationshipsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataSubjectsRelationshipsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataSubjectsRelationshipsUpdateSignalError() instead")
    void collectionsMetadataSubjectsRelationshipsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataSubjectsRelationshipsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use collectionsAddMetadataSignalErrorFull() instead")
    void collectionsAddMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsAddMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsCollectedMetadataSignalErrorFull() instead")
    void collectionsCollectedMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsCollectedMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsCreateSignalErrorFull() instead")
    void collectionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsDeleteSignalErrorFull() instead")
    void collectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsDetailSignalErrorFull() instead")
    void collectionsDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesListSignalErrorFull() instead")
    void collectionsLinkedNodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesRelationshipsSignalErrorFull() instead")
    void collectionsLinkedNodesRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesRelationshipsCreateSignalErrorFull() instead")
    void collectionsLinkedNodesRelationshipsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesRelationshipsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedNodesRelationshipsDeleteSignalErrorFull() instead")
    void collectionsLinkedNodesRelationshipsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedNodesRelationshipsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedPreprintsListSignalErrorFull() instead")
    void collectionsLinkedPreprintsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedPreprintsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsListSignalErrorFull() instead")
    void collectionsLinkedRegistrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsRelationshipsSignalErrorFull() instead")
    void collectionsLinkedRegistrationsRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsRelationshipsCreateSignalErrorFull() instead")
    void collectionsLinkedRegistrationsRelationshipsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsRelationshipsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsLinkedRegistrationsRelationshipsDeleteSignalErrorFull() instead")
    void collectionsLinkedRegistrationsRelationshipsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsLinkedRegistrationsRelationshipsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsListSignalErrorFull() instead")
    void collectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataDeleteSignalErrorFull() instead")
    void collectionsMetadataDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataDetailSignalErrorFull() instead")
    void collectionsMetadataDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataRegistrationsDetailSignalErrorFull() instead")
    void collectionsMetadataRegistrationsDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataRegistrationsDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataRegistrationsListSignalErrorFull() instead")
    void collectionsMetadataRegistrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataRegistrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataSubjectsRelationshipsSignalErrorFull() instead")
    void collectionsMetadataSubjectsRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataSubjectsRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsMetadataSubjectsRelationshipsUpdateSignalErrorFull() instead")
    void collectionsMetadataSubjectsRelationshipsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsMetadataSubjectsRelationshipsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
