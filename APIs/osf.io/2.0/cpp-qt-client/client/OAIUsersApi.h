/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddon_Account.h"
#include "OAIInstitution.h"
#include "OAINode.h"
#include "OAIPreprint.h"
#include "OAIUser.h"
#include "OAIUser_Addon.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void usersAddonAccountsList(const QString &user_id, const QString &provider);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  provider QString [required]
    * @param[in]  account_id QString [required]
    */
    virtual void usersAddonAccountsRead(const QString &user_id, const QString &provider, const QString &account_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersAddonsList(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  provider QString [required]
    */
    virtual void usersAddonsRead(const QString &user_id, const QString &provider);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersInstitutionsList(const QString &user_id);


    virtual void usersList();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersNodesList(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user OAIUser [required]
    */
    virtual void usersPartialUpdate(const QString &user_id, const OAIUser &oai_user);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersPreprintsList(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersRead(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersRegistrationsList(const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersAddonAccountsListCallback(OAIHttpRequestWorker *worker);
    void usersAddonAccountsReadCallback(OAIHttpRequestWorker *worker);
    void usersAddonsListCallback(OAIHttpRequestWorker *worker);
    void usersAddonsReadCallback(OAIHttpRequestWorker *worker);
    void usersInstitutionsListCallback(OAIHttpRequestWorker *worker);
    void usersListCallback(OAIHttpRequestWorker *worker);
    void usersNodesListCallback(OAIHttpRequestWorker *worker);
    void usersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersPreprintsListCallback(OAIHttpRequestWorker *worker);
    void usersReadCallback(OAIHttpRequestWorker *worker);
    void usersRegistrationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersAddonAccountsListSignal(QList<OAIAddon_Account> summary);
    void usersAddonAccountsReadSignal(OAIAddon_Account summary);
    void usersAddonsListSignal(QList<OAIUser_Addon> summary);
    void usersAddonsReadSignal(OAIUser_Addon summary);
    void usersInstitutionsListSignal(QList<OAIInstitution> summary);
    void usersListSignal(QList<OAIUser> summary);
    void usersNodesListSignal(QList<OAINode> summary);
    void usersPartialUpdateSignal();
    void usersPreprintsListSignal(QList<OAIPreprint> summary);
    void usersReadSignal(OAIUser summary);
    void usersRegistrationsListSignal();


    void usersAddonAccountsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon_Account> summary);
    void usersAddonAccountsReadSignalFull(OAIHttpRequestWorker *worker, OAIAddon_Account summary);
    void usersAddonsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser_Addon> summary);
    void usersAddonsReadSignalFull(OAIHttpRequestWorker *worker, OAIUser_Addon summary);
    void usersInstitutionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstitution> summary);
    void usersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void usersNodesListSignalFull(OAIHttpRequestWorker *worker, QList<OAINode> summary);
    void usersPartialUpdateSignalFull(OAIHttpRequestWorker *worker);
    void usersPreprintsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPreprint> summary);
    void usersReadSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersRegistrationsListSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use usersAddonAccountsListSignalError() instead")
    void usersAddonAccountsListSignalE(QList<OAIAddon_Account> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonAccountsListSignalError(QList<OAIAddon_Account> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAddonAccountsReadSignalError() instead")
    void usersAddonAccountsReadSignalE(OAIAddon_Account summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonAccountsReadSignalError(OAIAddon_Account summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAddonsListSignalError() instead")
    void usersAddonsListSignalE(QList<OAIUser_Addon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonsListSignalError(QList<OAIUser_Addon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAddonsReadSignalError() instead")
    void usersAddonsReadSignalE(OAIUser_Addon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonsReadSignalError(OAIUser_Addon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInstitutionsListSignalError() instead")
    void usersInstitutionsListSignalE(QList<OAIInstitution> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInstitutionsListSignalError(QList<OAIInstitution> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalError() instead")
    void usersListSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersNodesListSignalError() instead")
    void usersNodesListSignalE(QList<OAINode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersNodesListSignalError(QList<OAINode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPartialUpdateSignalError() instead")
    void usersPartialUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPartialUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPreprintsListSignalError() instead")
    void usersPreprintsListSignalE(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPreprintsListSignalError(QList<OAIPreprint> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersReadSignalError() instead")
    void usersReadSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersReadSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersRegistrationsListSignalError() instead")
    void usersRegistrationsListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersRegistrationsListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersAddonAccountsListSignalErrorFull() instead")
    void usersAddonAccountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonAccountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAddonAccountsReadSignalErrorFull() instead")
    void usersAddonAccountsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonAccountsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAddonsListSignalErrorFull() instead")
    void usersAddonsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAddonsReadSignalErrorFull() instead")
    void usersAddonsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAddonsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInstitutionsListSignalErrorFull() instead")
    void usersInstitutionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInstitutionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalErrorFull() instead")
    void usersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersNodesListSignalErrorFull() instead")
    void usersNodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersNodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPartialUpdateSignalErrorFull() instead")
    void usersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPreprintsListSignalErrorFull() instead")
    void usersPreprintsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPreprintsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersReadSignalErrorFull() instead")
    void usersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersRegistrationsListSignalErrorFull() instead")
    void usersRegistrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersRegistrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
