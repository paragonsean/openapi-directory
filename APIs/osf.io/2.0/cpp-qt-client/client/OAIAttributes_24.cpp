/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_24.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_24::OAIAttributes_24(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_24::OAIAttributes_24() {
    this->initializeModel();
}

OAIAttributes_24::~OAIAttributes_24() {}

void OAIAttributes_24::initializeModel() {

    m_bibliographic_isSet = false;
    m_bibliographic_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_unregistered_contributor_isSet = false;
    m_unregistered_contributor_isValid = false;
}

void OAIAttributes_24::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_24::fromJsonObject(QJsonObject json) {

    m_bibliographic_isValid = ::OpenAPI::fromJsonValue(m_bibliographic, json[QString("bibliographic")]);
    m_bibliographic_isSet = !json[QString("bibliographic")].isNull() && m_bibliographic_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_unregistered_contributor_isValid = ::OpenAPI::fromJsonValue(m_unregistered_contributor, json[QString("unregistered_contributor")]);
    m_unregistered_contributor_isSet = !json[QString("unregistered_contributor")].isNull() && m_unregistered_contributor_isValid;
}

QString OAIAttributes_24::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_24::asJsonObject() const {
    QJsonObject obj;
    if (m_bibliographic_isSet) {
        obj.insert(QString("bibliographic"), ::OpenAPI::toJsonValue(m_bibliographic));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_unregistered_contributor_isSet) {
        obj.insert(QString("unregistered_contributor"), ::OpenAPI::toJsonValue(m_unregistered_contributor));
    }
    return obj;
}

bool OAIAttributes_24::isBibliographic() const {
    return m_bibliographic;
}
void OAIAttributes_24::setBibliographic(const bool &bibliographic) {
    m_bibliographic = bibliographic;
    m_bibliographic_isSet = true;
}

bool OAIAttributes_24::is_bibliographic_Set() const{
    return m_bibliographic_isSet;
}

bool OAIAttributes_24::is_bibliographic_Valid() const{
    return m_bibliographic_isValid;
}

qint32 OAIAttributes_24::getIndex() const {
    return m_index;
}
void OAIAttributes_24::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIAttributes_24::is_index_Set() const{
    return m_index_isSet;
}

bool OAIAttributes_24::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIAttributes_24::getPermission() const {
    return m_permission;
}
void OAIAttributes_24::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIAttributes_24::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIAttributes_24::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIAttributes_24::getUnregisteredContributor() const {
    return m_unregistered_contributor;
}
void OAIAttributes_24::setUnregisteredContributor(const QString &unregistered_contributor) {
    m_unregistered_contributor = unregistered_contributor;
    m_unregistered_contributor_isSet = true;
}

bool OAIAttributes_24::is_unregistered_contributor_Set() const{
    return m_unregistered_contributor_isSet;
}

bool OAIAttributes_24::is_unregistered_contributor_Valid() const{
    return m_unregistered_contributor_isValid;
}

bool OAIAttributes_24::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bibliographic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unregistered_contributor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_24::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
