/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_2::OAIRelationships_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_2::OAIRelationships_2() {
    this->initializeModel();
}

OAIRelationships_2::~OAIRelationships_2() {}

void OAIRelationships_2::initializeModel() {

    m_branched_from_isSet = false;
    m_branched_from_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_registration_schema_isSet = false;
    m_registration_schema_isValid = false;
}

void OAIRelationships_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_2::fromJsonObject(QJsonObject json) {

    m_branched_from_isValid = ::OpenAPI::fromJsonValue(m_branched_from, json[QString("branched_from")]);
    m_branched_from_isSet = !json[QString("branched_from")].isNull() && m_branched_from_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_registration_schema_isValid = ::OpenAPI::fromJsonValue(m_registration_schema, json[QString("registration_schema")]);
    m_registration_schema_isSet = !json[QString("registration_schema")].isNull() && m_registration_schema_isValid;
}

QString OAIRelationships_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_2::asJsonObject() const {
    QJsonObject obj;
    if (m_branched_from_isSet) {
        obj.insert(QString("branched_from"), ::OpenAPI::toJsonValue(m_branched_from));
    }
    if (m_initiator_isSet) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_registration_schema_isSet) {
        obj.insert(QString("registration_schema"), ::OpenAPI::toJsonValue(m_registration_schema));
    }
    return obj;
}

QString OAIRelationships_2::getBranchedFrom() const {
    return m_branched_from;
}
void OAIRelationships_2::setBranchedFrom(const QString &branched_from) {
    m_branched_from = branched_from;
    m_branched_from_isSet = true;
}

bool OAIRelationships_2::is_branched_from_Set() const{
    return m_branched_from_isSet;
}

bool OAIRelationships_2::is_branched_from_Valid() const{
    return m_branched_from_isValid;
}

QString OAIRelationships_2::getInitiator() const {
    return m_initiator;
}
void OAIRelationships_2::setInitiator(const QString &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIRelationships_2::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIRelationships_2::is_initiator_Valid() const{
    return m_initiator_isValid;
}

QString OAIRelationships_2::getRegistrationSchema() const {
    return m_registration_schema;
}
void OAIRelationships_2::setRegistrationSchema(const QString &registration_schema) {
    m_registration_schema = registration_schema;
    m_registration_schema_isSet = true;
}

bool OAIRelationships_2::is_registration_schema_Set() const{
    return m_registration_schema_isSet;
}

bool OAIRelationships_2::is_registration_schema_Valid() const{
    return m_registration_schema_isValid;
}

bool OAIRelationships_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branched_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
