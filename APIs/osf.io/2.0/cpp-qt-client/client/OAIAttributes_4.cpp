/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_4::OAIAttributes_4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_4::OAIAttributes_4() {
    this->initializeModel();
}

OAIAttributes_4::~OAIAttributes_4() {}

void OAIAttributes_4::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_current_user_permissions_isSet = false;
    m_current_user_permissions_isValid = false;

    m_datetime_initiated_isSet = false;
    m_datetime_initiated_isValid = false;

    m_datetime_updated_isSet = false;
    m_datetime_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_project_isSet = false;
    m_has_project_isValid = false;

    m_node_license_isSet = false;
    m_node_license_isValid = false;

    m_registration_metadata_isSet = false;
    m_registration_metadata_isValid = false;

    m_registration_responses_isSet = false;
    m_registration_responses_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAttributes_4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_4::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_current_user_permissions_isValid = ::OpenAPI::fromJsonValue(m_current_user_permissions, json[QString("current_user_permissions")]);
    m_current_user_permissions_isSet = !json[QString("current_user_permissions")].isNull() && m_current_user_permissions_isValid;

    m_datetime_initiated_isValid = ::OpenAPI::fromJsonValue(m_datetime_initiated, json[QString("datetime_initiated")]);
    m_datetime_initiated_isSet = !json[QString("datetime_initiated")].isNull() && m_datetime_initiated_isValid;

    m_datetime_updated_isValid = ::OpenAPI::fromJsonValue(m_datetime_updated, json[QString("datetime_updated")]);
    m_datetime_updated_isSet = !json[QString("datetime_updated")].isNull() && m_datetime_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_project_isValid = ::OpenAPI::fromJsonValue(m_has_project, json[QString("has_project")]);
    m_has_project_isSet = !json[QString("has_project")].isNull() && m_has_project_isValid;

    m_node_license_isValid = ::OpenAPI::fromJsonValue(m_node_license, json[QString("node_license")]);
    m_node_license_isSet = !json[QString("node_license")].isNull() && m_node_license_isValid;

    m_registration_metadata_isValid = ::OpenAPI::fromJsonValue(m_registration_metadata, json[QString("registration_metadata")]);
    m_registration_metadata_isSet = !json[QString("registration_metadata")].isNull() && m_registration_metadata_isValid;

    m_registration_responses_isValid = ::OpenAPI::fromJsonValue(m_registration_responses, json[QString("registration_responses")]);
    m_registration_responses_isSet = !json[QString("registration_responses")].isNull() && m_registration_responses_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAttributes_4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_4::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_current_user_permissions.size() > 0) {
        obj.insert(QString("current_user_permissions"), ::OpenAPI::toJsonValue(m_current_user_permissions));
    }
    if (m_datetime_initiated_isSet) {
        obj.insert(QString("datetime_initiated"), ::OpenAPI::toJsonValue(m_datetime_initiated));
    }
    if (m_datetime_updated_isSet) {
        obj.insert(QString("datetime_updated"), ::OpenAPI::toJsonValue(m_datetime_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_project_isSet) {
        obj.insert(QString("has_project"), ::OpenAPI::toJsonValue(m_has_project));
    }
    if (m_node_license.isSet()) {
        obj.insert(QString("node_license"), ::OpenAPI::toJsonValue(m_node_license));
    }
    if (m_registration_metadata_isSet) {
        obj.insert(QString("registration_metadata"), ::OpenAPI::toJsonValue(m_registration_metadata));
    }
    if (m_registration_responses_isSet) {
        obj.insert(QString("registration_responses"), ::OpenAPI::toJsonValue(m_registration_responses));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAttributes_4::getCategory() const {
    return m_category;
}
void OAIAttributes_4::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAttributes_4::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAttributes_4::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIAttributes_4::getCurrentUserPermissions() const {
    return m_current_user_permissions;
}
void OAIAttributes_4::setCurrentUserPermissions(const QList<QString> &current_user_permissions) {
    m_current_user_permissions = current_user_permissions;
    m_current_user_permissions_isSet = true;
}

bool OAIAttributes_4::is_current_user_permissions_Set() const{
    return m_current_user_permissions_isSet;
}

bool OAIAttributes_4::is_current_user_permissions_Valid() const{
    return m_current_user_permissions_isValid;
}

QDateTime OAIAttributes_4::getDatetimeInitiated() const {
    return m_datetime_initiated;
}
void OAIAttributes_4::setDatetimeInitiated(const QDateTime &datetime_initiated) {
    m_datetime_initiated = datetime_initiated;
    m_datetime_initiated_isSet = true;
}

bool OAIAttributes_4::is_datetime_initiated_Set() const{
    return m_datetime_initiated_isSet;
}

bool OAIAttributes_4::is_datetime_initiated_Valid() const{
    return m_datetime_initiated_isValid;
}

QDateTime OAIAttributes_4::getDatetimeUpdated() const {
    return m_datetime_updated;
}
void OAIAttributes_4::setDatetimeUpdated(const QDateTime &datetime_updated) {
    m_datetime_updated = datetime_updated;
    m_datetime_updated_isSet = true;
}

bool OAIAttributes_4::is_datetime_updated_Set() const{
    return m_datetime_updated_isSet;
}

bool OAIAttributes_4::is_datetime_updated_Valid() const{
    return m_datetime_updated_isValid;
}

QString OAIAttributes_4::getDescription() const {
    return m_description;
}
void OAIAttributes_4::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributes_4::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributes_4::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAttributes_4::isHasProject() const {
    return m_has_project;
}
void OAIAttributes_4::setHasProject(const bool &has_project) {
    m_has_project = has_project;
    m_has_project_isSet = true;
}

bool OAIAttributes_4::is_has_project_Set() const{
    return m_has_project_isSet;
}

bool OAIAttributes_4::is_has_project_Valid() const{
    return m_has_project_isValid;
}

OAINode_License OAIAttributes_4::getNodeLicense() const {
    return m_node_license;
}
void OAIAttributes_4::setNodeLicense(const OAINode_License &node_license) {
    m_node_license = node_license;
    m_node_license_isSet = true;
}

bool OAIAttributes_4::is_node_license_Set() const{
    return m_node_license_isSet;
}

bool OAIAttributes_4::is_node_license_Valid() const{
    return m_node_license_isValid;
}

OAIObject OAIAttributes_4::getRegistrationMetadata() const {
    return m_registration_metadata;
}
void OAIAttributes_4::setRegistrationMetadata(const OAIObject &registration_metadata) {
    m_registration_metadata = registration_metadata;
    m_registration_metadata_isSet = true;
}

bool OAIAttributes_4::is_registration_metadata_Set() const{
    return m_registration_metadata_isSet;
}

bool OAIAttributes_4::is_registration_metadata_Valid() const{
    return m_registration_metadata_isValid;
}

OAIObject OAIAttributes_4::getRegistrationResponses() const {
    return m_registration_responses;
}
void OAIAttributes_4::setRegistrationResponses(const OAIObject &registration_responses) {
    m_registration_responses = registration_responses;
    m_registration_responses_isSet = true;
}

bool OAIAttributes_4::is_registration_responses_Set() const{
    return m_registration_responses_isSet;
}

bool OAIAttributes_4::is_registration_responses_Valid() const{
    return m_registration_responses_isValid;
}

QList<QString> OAIAttributes_4::getTags() const {
    return m_tags;
}
void OAIAttributes_4::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAttributes_4::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAttributes_4::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAttributes_4::getTitle() const {
    return m_title;
}
void OAIAttributes_4::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttributes_4::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttributes_4::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAttributes_4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_initiated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
