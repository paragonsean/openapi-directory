/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_3::OAIAttributes_3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_3::OAIAttributes_3() {
    this->initializeModel();
}

OAIAttributes_3::~OAIAttributes_3() {}

void OAIAttributes_3::initializeModel() {

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_has_report_isSet = false;
    m_has_report_isValid = false;

    m_is_abuse_isSet = false;
    m_is_abuse_isValid = false;

    m_is_ham_isSet = false;
    m_is_ham_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;
}

void OAIAttributes_3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_3::fromJsonObject(QJsonObject json) {

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("date_modified")]);
    m_date_modified_isSet = !json[QString("date_modified")].isNull() && m_date_modified_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("has_children")]);
    m_has_children_isSet = !json[QString("has_children")].isNull() && m_has_children_isValid;

    m_has_report_isValid = ::OpenAPI::fromJsonValue(m_has_report, json[QString("has_report")]);
    m_has_report_isSet = !json[QString("has_report")].isNull() && m_has_report_isValid;

    m_is_abuse_isValid = ::OpenAPI::fromJsonValue(m_is_abuse, json[QString("is_abuse")]);
    m_is_abuse_isSet = !json[QString("is_abuse")].isNull() && m_is_abuse_isValid;

    m_is_ham_isValid = ::OpenAPI::fromJsonValue(m_is_ham, json[QString("is_ham")]);
    m_is_ham_isSet = !json[QString("is_ham")].isNull() && m_is_ham_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;
}

QString OAIAttributes_3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_3::asJsonObject() const {
    QJsonObject obj;
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("date_modified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("has_children"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_has_report_isSet) {
        obj.insert(QString("has_report"), ::OpenAPI::toJsonValue(m_has_report));
    }
    if (m_is_abuse_isSet) {
        obj.insert(QString("is_abuse"), ::OpenAPI::toJsonValue(m_is_abuse));
    }
    if (m_is_ham_isSet) {
        obj.insert(QString("is_ham"), ::OpenAPI::toJsonValue(m_is_ham));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    return obj;
}

bool OAIAttributes_3::isCanEdit() const {
    return m_can_edit;
}
void OAIAttributes_3::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIAttributes_3::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIAttributes_3::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

QString OAIAttributes_3::getContent() const {
    return m_content;
}
void OAIAttributes_3::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIAttributes_3::is_content_Set() const{
    return m_content_isSet;
}

bool OAIAttributes_3::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIAttributes_3::getDateCreated() const {
    return m_date_created;
}
void OAIAttributes_3::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAttributes_3::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAttributes_3::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAttributes_3::getDateModified() const {
    return m_date_modified;
}
void OAIAttributes_3::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIAttributes_3::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIAttributes_3::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAIAttributes_3::isDeleted() const {
    return m_deleted;
}
void OAIAttributes_3::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIAttributes_3::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIAttributes_3::is_deleted_Valid() const{
    return m_deleted_isValid;
}

bool OAIAttributes_3::isHasChildren() const {
    return m_has_children;
}
void OAIAttributes_3::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIAttributes_3::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIAttributes_3::is_has_children_Valid() const{
    return m_has_children_isValid;
}

bool OAIAttributes_3::isHasReport() const {
    return m_has_report;
}
void OAIAttributes_3::setHasReport(const bool &has_report) {
    m_has_report = has_report;
    m_has_report_isSet = true;
}

bool OAIAttributes_3::is_has_report_Set() const{
    return m_has_report_isSet;
}

bool OAIAttributes_3::is_has_report_Valid() const{
    return m_has_report_isValid;
}

bool OAIAttributes_3::isIsAbuse() const {
    return m_is_abuse;
}
void OAIAttributes_3::setIsAbuse(const bool &is_abuse) {
    m_is_abuse = is_abuse;
    m_is_abuse_isSet = true;
}

bool OAIAttributes_3::is_is_abuse_Set() const{
    return m_is_abuse_isSet;
}

bool OAIAttributes_3::is_is_abuse_Valid() const{
    return m_is_abuse_isValid;
}

bool OAIAttributes_3::isIsHam() const {
    return m_is_ham;
}
void OAIAttributes_3::setIsHam(const bool &is_ham) {
    m_is_ham = is_ham;
    m_is_ham_isSet = true;
}

bool OAIAttributes_3::is_is_ham_Set() const{
    return m_is_ham_isSet;
}

bool OAIAttributes_3::is_is_ham_Valid() const{
    return m_is_ham_isValid;
}

bool OAIAttributes_3::isModified() const {
    return m_modified;
}
void OAIAttributes_3::setModified(const bool &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIAttributes_3::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIAttributes_3::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIAttributes_3::getPage() const {
    return m_page;
}
void OAIAttributes_3::setPage(const QString &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIAttributes_3::is_page_Set() const{
    return m_page_isSet;
}

bool OAIAttributes_3::is_page_Valid() const{
    return m_page_isValid;
}

bool OAIAttributes_3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_abuse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ham_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
