/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_28.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_28::OAIAttributes_28(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_28::OAIAttributes_28() {
    this->initializeModel();
}

OAIAttributes_28::~OAIAttributes_28() {}

void OAIAttributes_28::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAIAttributes_28::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_28::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    if(json["schema"].isObject()){
        auto varmap = json["schema"].toObject().toVariantMap();
        m_schema_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIObject> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_schema_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_schema_isSet &= !jval.isNull() && m_schema_isValid;
                m_schema.insert(m_schema.end(), val, item);
            }
        }
    }

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schema_version")]);
    m_schema_version_isSet = !json[QString("schema_version")].isNull() && m_schema_version_isValid;
}

QString OAIAttributes_28::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_28::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schema.size() > 0) {
        
        obj.insert(QString("schema"), toJsonValue(m_schema));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schema_version"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

bool OAIAttributes_28::isActive() const {
    return m_active;
}
void OAIAttributes_28::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAttributes_28::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAttributes_28::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIAttributes_28::getName() const {
    return m_name;
}
void OAIAttributes_28::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttributes_28::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttributes_28::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QList<OAIObject>> OAIAttributes_28::getSchema() const {
    return m_schema;
}
void OAIAttributes_28::setSchema(const QMap<QString, QList<OAIObject>> &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIAttributes_28::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIAttributes_28::is_schema_Valid() const{
    return m_schema_isValid;
}

qint32 OAIAttributes_28::getSchemaVersion() const {
    return m_schema_version;
}
void OAIAttributes_28::setSchemaVersion(const qint32 &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIAttributes_28::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIAttributes_28::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAIAttributes_28::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_28::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
