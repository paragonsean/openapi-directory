/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_2::OAIAttributes_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_2::OAIAttributes_2() {
    this->initializeModel();
}

OAIAttributes_2::~OAIAttributes_2() {}

void OAIAttributes_2::initializeModel() {

    m_bookmarks_isSet = false;
    m_bookmarks_isValid = false;

    m_collected_type_choices_isSet = false;
    m_collected_type_choices_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_is_promoted_isSet = false;
    m_is_promoted_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_issue_choices_isSet = false;
    m_issue_choices_isValid = false;

    m_program_area_choices_isSet = false;
    m_program_area_choices_isValid = false;

    m_status_choices_isSet = false;
    m_status_choices_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_volume_choices_isSet = false;
    m_volume_choices_isValid = false;
}

void OAIAttributes_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_2::fromJsonObject(QJsonObject json) {

    m_bookmarks_isValid = ::OpenAPI::fromJsonValue(m_bookmarks, json[QString("bookmarks")]);
    m_bookmarks_isSet = !json[QString("bookmarks")].isNull() && m_bookmarks_isValid;

    m_collected_type_choices_isValid = ::OpenAPI::fromJsonValue(m_collected_type_choices, json[QString("collected_type_choices")]);
    m_collected_type_choices_isSet = !json[QString("collected_type_choices")].isNull() && m_collected_type_choices_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("date_modified")]);
    m_date_modified_isSet = !json[QString("date_modified")].isNull() && m_date_modified_isValid;

    m_is_promoted_isValid = ::OpenAPI::fromJsonValue(m_is_promoted, json[QString("is_promoted")]);
    m_is_promoted_isSet = !json[QString("is_promoted")].isNull() && m_is_promoted_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_issue_choices_isValid = ::OpenAPI::fromJsonValue(m_issue_choices, json[QString("issue_choices")]);
    m_issue_choices_isSet = !json[QString("issue_choices")].isNull() && m_issue_choices_isValid;

    m_program_area_choices_isValid = ::OpenAPI::fromJsonValue(m_program_area_choices, json[QString("program_area_choices")]);
    m_program_area_choices_isSet = !json[QString("program_area_choices")].isNull() && m_program_area_choices_isValid;

    m_status_choices_isValid = ::OpenAPI::fromJsonValue(m_status_choices, json[QString("status_choices")]);
    m_status_choices_isSet = !json[QString("status_choices")].isNull() && m_status_choices_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_volume_choices_isValid = ::OpenAPI::fromJsonValue(m_volume_choices, json[QString("volume_choices")]);
    m_volume_choices_isSet = !json[QString("volume_choices")].isNull() && m_volume_choices_isValid;
}

QString OAIAttributes_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_2::asJsonObject() const {
    QJsonObject obj;
    if (m_bookmarks_isSet) {
        obj.insert(QString("bookmarks"), ::OpenAPI::toJsonValue(m_bookmarks));
    }
    if (m_collected_type_choices.size() > 0) {
        obj.insert(QString("collected_type_choices"), ::OpenAPI::toJsonValue(m_collected_type_choices));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("date_modified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_is_promoted_isSet) {
        obj.insert(QString("is_promoted"), ::OpenAPI::toJsonValue(m_is_promoted));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_issue_choices.size() > 0) {
        obj.insert(QString("issue_choices"), ::OpenAPI::toJsonValue(m_issue_choices));
    }
    if (m_program_area_choices.size() > 0) {
        obj.insert(QString("program_area_choices"), ::OpenAPI::toJsonValue(m_program_area_choices));
    }
    if (m_status_choices.size() > 0) {
        obj.insert(QString("status_choices"), ::OpenAPI::toJsonValue(m_status_choices));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_volume_choices.size() > 0) {
        obj.insert(QString("volume_choices"), ::OpenAPI::toJsonValue(m_volume_choices));
    }
    return obj;
}

bool OAIAttributes_2::isBookmarks() const {
    return m_bookmarks;
}
void OAIAttributes_2::setBookmarks(const bool &bookmarks) {
    m_bookmarks = bookmarks;
    m_bookmarks_isSet = true;
}

bool OAIAttributes_2::is_bookmarks_Set() const{
    return m_bookmarks_isSet;
}

bool OAIAttributes_2::is_bookmarks_Valid() const{
    return m_bookmarks_isValid;
}

QList<QString> OAIAttributes_2::getCollectedTypeChoices() const {
    return m_collected_type_choices;
}
void OAIAttributes_2::setCollectedTypeChoices(const QList<QString> &collected_type_choices) {
    m_collected_type_choices = collected_type_choices;
    m_collected_type_choices_isSet = true;
}

bool OAIAttributes_2::is_collected_type_choices_Set() const{
    return m_collected_type_choices_isSet;
}

bool OAIAttributes_2::is_collected_type_choices_Valid() const{
    return m_collected_type_choices_isValid;
}

QDateTime OAIAttributes_2::getDateCreated() const {
    return m_date_created;
}
void OAIAttributes_2::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAttributes_2::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAttributes_2::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAttributes_2::getDateModified() const {
    return m_date_modified;
}
void OAIAttributes_2::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIAttributes_2::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIAttributes_2::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAIAttributes_2::isIsPromoted() const {
    return m_is_promoted;
}
void OAIAttributes_2::setIsPromoted(const bool &is_promoted) {
    m_is_promoted = is_promoted;
    m_is_promoted_isSet = true;
}

bool OAIAttributes_2::is_is_promoted_Set() const{
    return m_is_promoted_isSet;
}

bool OAIAttributes_2::is_is_promoted_Valid() const{
    return m_is_promoted_isValid;
}

bool OAIAttributes_2::isIsPublic() const {
    return m_is_public;
}
void OAIAttributes_2::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIAttributes_2::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIAttributes_2::is_is_public_Valid() const{
    return m_is_public_isValid;
}

QList<QString> OAIAttributes_2::getIssueChoices() const {
    return m_issue_choices;
}
void OAIAttributes_2::setIssueChoices(const QList<QString> &issue_choices) {
    m_issue_choices = issue_choices;
    m_issue_choices_isSet = true;
}

bool OAIAttributes_2::is_issue_choices_Set() const{
    return m_issue_choices_isSet;
}

bool OAIAttributes_2::is_issue_choices_Valid() const{
    return m_issue_choices_isValid;
}

QList<QString> OAIAttributes_2::getProgramAreaChoices() const {
    return m_program_area_choices;
}
void OAIAttributes_2::setProgramAreaChoices(const QList<QString> &program_area_choices) {
    m_program_area_choices = program_area_choices;
    m_program_area_choices_isSet = true;
}

bool OAIAttributes_2::is_program_area_choices_Set() const{
    return m_program_area_choices_isSet;
}

bool OAIAttributes_2::is_program_area_choices_Valid() const{
    return m_program_area_choices_isValid;
}

QList<QString> OAIAttributes_2::getStatusChoices() const {
    return m_status_choices;
}
void OAIAttributes_2::setStatusChoices(const QList<QString> &status_choices) {
    m_status_choices = status_choices;
    m_status_choices_isSet = true;
}

bool OAIAttributes_2::is_status_choices_Set() const{
    return m_status_choices_isSet;
}

bool OAIAttributes_2::is_status_choices_Valid() const{
    return m_status_choices_isValid;
}

QString OAIAttributes_2::getTitle() const {
    return m_title;
}
void OAIAttributes_2::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttributes_2::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttributes_2::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIAttributes_2::getVolumeChoices() const {
    return m_volume_choices;
}
void OAIAttributes_2::setVolumeChoices(const QList<QString> &volume_choices) {
    m_volume_choices = volume_choices;
    m_volume_choices_isSet = true;
}

bool OAIAttributes_2::is_volume_choices_Set() const{
    return m_volume_choices_isSet;
}

bool OAIAttributes_2::is_volume_choices_Valid() const{
    return m_volume_choices_isValid;
}

bool OAIAttributes_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bookmarks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collected_type_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_promoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_area_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
