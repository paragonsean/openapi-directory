/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_11.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_11::OAIRelationships_11(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_11::OAIRelationships_11() {
    this->initializeModel();
}

OAIRelationships_11::~OAIRelationships_11() {}

void OAIRelationships_11::initializeModel() {

    m_bibliographic_contributors_isSet = false;
    m_bibliographic_contributors_isValid = false;

    m_citation_isSet = false;
    m_citation_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_node_isSet = false;
    m_node_isValid = false;

    m_primary_file_isSet = false;
    m_primary_file_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIRelationships_11::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_11::fromJsonObject(QJsonObject json) {

    m_bibliographic_contributors_isValid = ::OpenAPI::fromJsonValue(m_bibliographic_contributors, json[QString("bibliographic_contributors")]);
    m_bibliographic_contributors_isSet = !json[QString("bibliographic_contributors")].isNull() && m_bibliographic_contributors_isValid;

    m_citation_isValid = ::OpenAPI::fromJsonValue(m_citation, json[QString("citation")]);
    m_citation_isSet = !json[QString("citation")].isNull() && m_citation_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_primary_file_isValid = ::OpenAPI::fromJsonValue(m_primary_file, json[QString("primary_file")]);
    m_primary_file_isSet = !json[QString("primary_file")].isNull() && m_primary_file_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIRelationships_11::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_11::asJsonObject() const {
    QJsonObject obj;
    if (m_bibliographic_contributors_isSet) {
        obj.insert(QString("bibliographic_contributors"), ::OpenAPI::toJsonValue(m_bibliographic_contributors));
    }
    if (m_citation_isSet) {
        obj.insert(QString("citation"), ::OpenAPI::toJsonValue(m_citation));
    }
    if (m_identifiers_isSet) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_node_isSet) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_primary_file_isSet) {
        obj.insert(QString("primary_file"), ::OpenAPI::toJsonValue(m_primary_file));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIRelationships_11::getBibliographicContributors() const {
    return m_bibliographic_contributors;
}
void OAIRelationships_11::setBibliographicContributors(const QString &bibliographic_contributors) {
    m_bibliographic_contributors = bibliographic_contributors;
    m_bibliographic_contributors_isSet = true;
}

bool OAIRelationships_11::is_bibliographic_contributors_Set() const{
    return m_bibliographic_contributors_isSet;
}

bool OAIRelationships_11::is_bibliographic_contributors_Valid() const{
    return m_bibliographic_contributors_isValid;
}

QString OAIRelationships_11::getCitation() const {
    return m_citation;
}
void OAIRelationships_11::setCitation(const QString &citation) {
    m_citation = citation;
    m_citation_isSet = true;
}

bool OAIRelationships_11::is_citation_Set() const{
    return m_citation_isSet;
}

bool OAIRelationships_11::is_citation_Valid() const{
    return m_citation_isValid;
}

QString OAIRelationships_11::getIdentifiers() const {
    return m_identifiers;
}
void OAIRelationships_11::setIdentifiers(const QString &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIRelationships_11::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIRelationships_11::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIRelationships_11::getLicense() const {
    return m_license;
}
void OAIRelationships_11::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIRelationships_11::is_license_Set() const{
    return m_license_isSet;
}

bool OAIRelationships_11::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIRelationships_11::getNode() const {
    return m_node;
}
void OAIRelationships_11::setNode(const QString &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAIRelationships_11::is_node_Set() const{
    return m_node_isSet;
}

bool OAIRelationships_11::is_node_Valid() const{
    return m_node_isValid;
}

QString OAIRelationships_11::getPrimaryFile() const {
    return m_primary_file;
}
void OAIRelationships_11::setPrimaryFile(const QString &primary_file) {
    m_primary_file = primary_file;
    m_primary_file_isSet = true;
}

bool OAIRelationships_11::is_primary_file_Set() const{
    return m_primary_file_isSet;
}

bool OAIRelationships_11::is_primary_file_Valid() const{
    return m_primary_file_isValid;
}

QString OAIRelationships_11::getProvider() const {
    return m_provider;
}
void OAIRelationships_11::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIRelationships_11::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIRelationships_11::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIRelationships_11::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bibliographic_contributors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_11::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_isValid && m_primary_file_isValid && m_provider_isValid && true;
}

} // namespace OpenAPI
