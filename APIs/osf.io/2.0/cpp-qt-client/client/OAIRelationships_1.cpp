/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_1::OAIRelationships_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_1::OAIRelationships_1() {
    this->initializeModel();
}

OAIRelationships_1::~OAIRelationships_1() {}

void OAIRelationships_1::initializeModel() {

    m_node_isSet = false;
    m_node_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_reports_isSet = false;
    m_reports_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRelationships_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_1::fromJsonObject(QJsonObject json) {

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_reports_isValid = ::OpenAPI::fromJsonValue(m_reports, json[QString("reports")]);
    m_reports_isSet = !json[QString("reports")].isNull() && m_reports_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRelationships_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_1::asJsonObject() const {
    QJsonObject obj;
    if (m_node_isSet) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_replies_isSet) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_reports_isSet) {
        obj.insert(QString("reports"), ::OpenAPI::toJsonValue(m_reports));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIRelationships_1::getNode() const {
    return m_node;
}
void OAIRelationships_1::setNode(const QString &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAIRelationships_1::is_node_Set() const{
    return m_node_isSet;
}

bool OAIRelationships_1::is_node_Valid() const{
    return m_node_isValid;
}

QString OAIRelationships_1::getReplies() const {
    return m_replies;
}
void OAIRelationships_1::setReplies(const QString &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIRelationships_1::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIRelationships_1::is_replies_Valid() const{
    return m_replies_isValid;
}

QString OAIRelationships_1::getReports() const {
    return m_reports;
}
void OAIRelationships_1::setReports(const QString &reports) {
    m_reports = reports;
    m_reports_isSet = true;
}

bool OAIRelationships_1::is_reports_Set() const{
    return m_reports_isSet;
}

bool OAIRelationships_1::is_reports_Valid() const{
    return m_reports_isValid;
}

QString OAIRelationships_1::getTarget() const {
    return m_target;
}
void OAIRelationships_1::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIRelationships_1::is_target_Set() const{
    return m_target_isSet;
}

bool OAIRelationships_1::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIRelationships_1::getUser() const {
    return m_user;
}
void OAIRelationships_1::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRelationships_1::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRelationships_1::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRelationships_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
