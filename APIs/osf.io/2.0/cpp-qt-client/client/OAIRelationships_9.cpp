/**
 * OSF APIv2 Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@osf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationships_9.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationships_9::OAIRelationships_9(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationships_9::OAIRelationships_9() {
    this->initializeModel();
}

OAIRelationships_9::~OAIRelationships_9() {}

void OAIRelationships_9::initializeModel() {

    m_linked_node_isSet = false;
    m_linked_node_isValid = false;

    m_node_isSet = false;
    m_node_isValid = false;

    m_original_node_isSet = false;
    m_original_node_isValid = false;

    m_template_node_isSet = false;
    m_template_node_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRelationships_9::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationships_9::fromJsonObject(QJsonObject json) {

    m_linked_node_isValid = ::OpenAPI::fromJsonValue(m_linked_node, json[QString("linked_node")]);
    m_linked_node_isSet = !json[QString("linked_node")].isNull() && m_linked_node_isValid;

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_original_node_isValid = ::OpenAPI::fromJsonValue(m_original_node, json[QString("original_node")]);
    m_original_node_isSet = !json[QString("original_node")].isNull() && m_original_node_isValid;

    m_template_node_isValid = ::OpenAPI::fromJsonValue(m_template_node, json[QString("template_node")]);
    m_template_node_isSet = !json[QString("template_node")].isNull() && m_template_node_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRelationships_9::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationships_9::asJsonObject() const {
    QJsonObject obj;
    if (m_linked_node_isSet) {
        obj.insert(QString("linked_node"), ::OpenAPI::toJsonValue(m_linked_node));
    }
    if (m_node_isSet) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_original_node_isSet) {
        obj.insert(QString("original_node"), ::OpenAPI::toJsonValue(m_original_node));
    }
    if (m_template_node_isSet) {
        obj.insert(QString("template_node"), ::OpenAPI::toJsonValue(m_template_node));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIRelationships_9::getLinkedNode() const {
    return m_linked_node;
}
void OAIRelationships_9::setLinkedNode(const QString &linked_node) {
    m_linked_node = linked_node;
    m_linked_node_isSet = true;
}

bool OAIRelationships_9::is_linked_node_Set() const{
    return m_linked_node_isSet;
}

bool OAIRelationships_9::is_linked_node_Valid() const{
    return m_linked_node_isValid;
}

QString OAIRelationships_9::getNode() const {
    return m_node;
}
void OAIRelationships_9::setNode(const QString &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAIRelationships_9::is_node_Set() const{
    return m_node_isSet;
}

bool OAIRelationships_9::is_node_Valid() const{
    return m_node_isValid;
}

QString OAIRelationships_9::getOriginalNode() const {
    return m_original_node;
}
void OAIRelationships_9::setOriginalNode(const QString &original_node) {
    m_original_node = original_node;
    m_original_node_isSet = true;
}

bool OAIRelationships_9::is_original_node_Set() const{
    return m_original_node_isSet;
}

bool OAIRelationships_9::is_original_node_Valid() const{
    return m_original_node_isValid;
}

QString OAIRelationships_9::getTemplateNode() const {
    return m_template_node;
}
void OAIRelationships_9::setTemplateNode(const QString &template_node) {
    m_template_node = template_node;
    m_template_node_isSet = true;
}

bool OAIRelationships_9::is_template_node_Set() const{
    return m_template_node_isSet;
}

bool OAIRelationships_9::is_template_node_Valid() const{
    return m_template_node_isValid;
}

QString OAIRelationships_9::getUser() const {
    return m_user;
}
void OAIRelationships_9::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRelationships_9::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRelationships_9::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRelationships_9::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_linked_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationships_9::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_isValid && true;
}

} // namespace OpenAPI
