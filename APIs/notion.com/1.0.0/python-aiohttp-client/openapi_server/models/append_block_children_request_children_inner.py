# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.append_block_children_request_children_inner_heading2 import AppendBlockChildrenRequestChildrenInnerHeading2
from openapi_server.models.append_block_children_request_children_inner_paragraph import AppendBlockChildrenRequestChildrenInnerParagraph
from openapi_server import util


class AppendBlockChildrenRequestChildrenInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, heading_2: AppendBlockChildrenRequestChildrenInnerHeading2=None, object: str=None, paragraph: AppendBlockChildrenRequestChildrenInnerParagraph=None, type: str=None):
        """AppendBlockChildrenRequestChildrenInner - a model defined in OpenAPI

        :param heading_2: The heading_2 of this AppendBlockChildrenRequestChildrenInner.
        :param object: The object of this AppendBlockChildrenRequestChildrenInner.
        :param paragraph: The paragraph of this AppendBlockChildrenRequestChildrenInner.
        :param type: The type of this AppendBlockChildrenRequestChildrenInner.
        """
        self.openapi_types = {
            'heading_2': AppendBlockChildrenRequestChildrenInnerHeading2,
            'object': str,
            'paragraph': AppendBlockChildrenRequestChildrenInnerParagraph,
            'type': str
        }

        self.attribute_map = {
            'heading_2': 'heading_2',
            'object': 'object',
            'paragraph': 'paragraph',
            'type': 'type'
        }

        self._heading_2 = heading_2
        self._object = object
        self._paragraph = paragraph
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppendBlockChildrenRequestChildrenInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The appendBlockChildren_request_children_inner of this AppendBlockChildrenRequestChildrenInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def heading_2(self):
        """Gets the heading_2 of this AppendBlockChildrenRequestChildrenInner.


        :return: The heading_2 of this AppendBlockChildrenRequestChildrenInner.
        :rtype: AppendBlockChildrenRequestChildrenInnerHeading2
        """
        return self._heading_2

    @heading_2.setter
    def heading_2(self, heading_2):
        """Sets the heading_2 of this AppendBlockChildrenRequestChildrenInner.


        :param heading_2: The heading_2 of this AppendBlockChildrenRequestChildrenInner.
        :type heading_2: AppendBlockChildrenRequestChildrenInnerHeading2
        """

        self._heading_2 = heading_2

    @property
    def object(self):
        """Gets the object of this AppendBlockChildrenRequestChildrenInner.


        :return: The object of this AppendBlockChildrenRequestChildrenInner.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this AppendBlockChildrenRequestChildrenInner.


        :param object: The object of this AppendBlockChildrenRequestChildrenInner.
        :type object: str
        """

        self._object = object

    @property
    def paragraph(self):
        """Gets the paragraph of this AppendBlockChildrenRequestChildrenInner.


        :return: The paragraph of this AppendBlockChildrenRequestChildrenInner.
        :rtype: AppendBlockChildrenRequestChildrenInnerParagraph
        """
        return self._paragraph

    @paragraph.setter
    def paragraph(self, paragraph):
        """Sets the paragraph of this AppendBlockChildrenRequestChildrenInner.


        :param paragraph: The paragraph of this AppendBlockChildrenRequestChildrenInner.
        :type paragraph: AppendBlockChildrenRequestChildrenInnerParagraph
        """

        self._paragraph = paragraph

    @property
    def type(self):
        """Gets the type of this AppendBlockChildrenRequestChildrenInner.


        :return: The type of this AppendBlockChildrenRequestChildrenInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AppendBlockChildrenRequestChildrenInner.


        :param type: The type of this AppendBlockChildrenRequestChildrenInner.
        :type type: str
        """

        self._type = type
