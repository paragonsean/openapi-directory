# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrieveABlock200ResponseParagraphTextInnerAnnotations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bold: bool=None, code: bool=None, color: str=None, italic: bool=None, strikethrough: bool=None, underline: bool=None):
        """RetrieveABlock200ResponseParagraphTextInnerAnnotations - a model defined in OpenAPI

        :param bold: The bold of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :param code: The code of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :param color: The color of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :param italic: The italic of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :param strikethrough: The strikethrough of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :param underline: The underline of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        """
        self.openapi_types = {
            'bold': bool,
            'code': bool,
            'color': str,
            'italic': bool,
            'strikethrough': bool,
            'underline': bool
        }

        self.attribute_map = {
            'bold': 'bold',
            'code': 'code',
            'color': 'color',
            'italic': 'italic',
            'strikethrough': 'strikethrough',
            'underline': 'underline'
        }

        self._bold = bold
        self._code = code
        self._color = color
        self._italic = italic
        self._strikethrough = strikethrough
        self._underline = underline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrieveABlock200ResponseParagraphTextInnerAnnotations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The retrieveABlock_200_response_paragraph_text_inner_annotations of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bold(self):
        """Gets the bold of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :return: The bold of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :param bold: The bold of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :type bold: bool
        """

        self._bold = bold

    @property
    def code(self):
        """Gets the code of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :return: The code of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :rtype: bool
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :param code: The code of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :type code: bool
        """

        self._code = code

    @property
    def color(self):
        """Gets the color of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :return: The color of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :param color: The color of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :type color: str
        """

        self._color = color

    @property
    def italic(self):
        """Gets the italic of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :return: The italic of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :rtype: bool
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :param italic: The italic of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :type italic: bool
        """

        self._italic = italic

    @property
    def strikethrough(self):
        """Gets the strikethrough of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :return: The strikethrough of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :rtype: bool
        """
        return self._strikethrough

    @strikethrough.setter
    def strikethrough(self, strikethrough):
        """Sets the strikethrough of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :param strikethrough: The strikethrough of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :type strikethrough: bool
        """

        self._strikethrough = strikethrough

    @property
    def underline(self):
        """Gets the underline of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :return: The underline of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :rtype: bool
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.


        :param underline: The underline of this RetrieveABlock200ResponseParagraphTextInnerAnnotations.
        :type underline: bool
        """

        self._underline = underline
