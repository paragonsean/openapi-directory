/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppendBlockChildren200Response from '../model/AppendBlockChildren200Response';
import AppendBlockChildrenRequest from '../model/AppendBlockChildrenRequest';
import DeleteABlock200Response from '../model/DeleteABlock200Response';
import RetrieveABlock200Response from '../model/RetrieveABlock200Response';
import RetrieveBlockChildren200Response from '../model/RetrieveBlockChildren200Response';
import UpdateABlockRequest from '../model/UpdateABlockRequest';

/**
* Blocks service.
* @module api/BlocksApi
* @version 1.0.0
*/
export default class BlocksApi {

    /**
    * Constructs a new BlocksApi. 
    * @alias module:api/BlocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appendBlockChildren operation.
     * @callback module:api/BlocksApi~appendBlockChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppendBlockChildren200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Append block children
     * Append block children
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notionVersion] 
     * @param {module:model/AppendBlockChildrenRequest} [appendBlockChildrenRequest] 
     * @param {module:api/BlocksApi~appendBlockChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppendBlockChildren200Response}
     */
    appendBlockChildren(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['appendBlockChildrenRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appendBlockChildren");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Notion-Version': opts['notionVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppendBlockChildren200Response;
      return this.apiClient.callApi(
        '/v1/blocks/{id}/children', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteABlock operation.
     * @callback module:api/BlocksApi~deleteABlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteABlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a block
     * Delete a block
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notionVersion] 
     * @param {module:api/BlocksApi~deleteABlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteABlock200Response}
     */
    deleteABlock(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteABlock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Notion-Version': opts['notionVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteABlock200Response;
      return this.apiClient.callApi(
        '/v1/blocks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveABlock operation.
     * @callback module:api/BlocksApi~retrieveABlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveABlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a block
     * Retrieve a block
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notionVersion] 
     * @param {module:api/BlocksApi~retrieveABlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveABlock200Response}
     */
    retrieveABlock(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveABlock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Notion-Version': opts['notionVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveABlock200Response;
      return this.apiClient.callApi(
        '/v1/blocks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveBlockChildren operation.
     * @callback module:api/BlocksApi~retrieveBlockChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveBlockChildren200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve block children
     * Retrieve block children
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [pageSize] 
     * @param {String} [notionVersion] 
     * @param {module:api/BlocksApi~retrieveBlockChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveBlockChildren200Response}
     */
    retrieveBlockChildren(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveBlockChildren");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'Notion-Version': opts['notionVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveBlockChildren200Response;
      return this.apiClient.callApi(
        '/v1/blocks/{id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateABlock operation.
     * @callback module:api/BlocksApi~updateABlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveABlock200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a block
     * This endpoint allows you to update block content. [See Full Documentation](https://developers.notion.com/reference/update-a-block)
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notionVersion] 
     * @param {module:model/UpdateABlockRequest} [updateABlockRequest] 
     * @param {module:api/BlocksApi~updateABlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveABlock200Response}
     */
    updateABlock(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateABlockRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateABlock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Notion-Version': opts['notionVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrieveABlock200Response;
      return this.apiClient.callApi(
        '/v1/blocks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
