/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePageProperties_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePageProperties_200_response::OAIUpdatePageProperties_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePageProperties_200_response::OAIUpdatePageProperties_200_response() {
    this->initializeModel();
}

OAIUpdatePageProperties_200_response::~OAIUpdatePageProperties_200_response() {}

void OAIUpdatePageProperties_200_response::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_edited_time_isSet = false;
    m_last_edited_time_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIUpdatePageProperties_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePageProperties_200_response::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_edited_time_isValid = ::OpenAPI::fromJsonValue(m_last_edited_time, json[QString("last_edited_time")]);
    m_last_edited_time_isSet = !json[QString("last_edited_time")].isNull() && m_last_edited_time_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIUpdatePageProperties_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePageProperties_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_edited_time_isSet) {
        obj.insert(QString("last_edited_time"), ::OpenAPI::toJsonValue(m_last_edited_time));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

bool OAIUpdatePageProperties_200_response::isArchived() const {
    return m_archived;
}
void OAIUpdatePageProperties_200_response::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIUpdatePageProperties_200_response::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIUpdatePageProperties_200_response::getCreatedTime() const {
    return m_created_time;
}
void OAIUpdatePageProperties_200_response::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIUpdatePageProperties_200_response::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIUpdatePageProperties_200_response::getId() const {
    return m_id;
}
void OAIUpdatePageProperties_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdatePageProperties_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdatePageProperties_200_response::getLastEditedTime() const {
    return m_last_edited_time;
}
void OAIUpdatePageProperties_200_response::setLastEditedTime(const QString &last_edited_time) {
    m_last_edited_time = last_edited_time;
    m_last_edited_time_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_last_edited_time_Set() const{
    return m_last_edited_time_isSet;
}

bool OAIUpdatePageProperties_200_response::is_last_edited_time_Valid() const{
    return m_last_edited_time_isValid;
}

QString OAIUpdatePageProperties_200_response::getObject() const {
    return m_object;
}
void OAIUpdatePageProperties_200_response::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_object_Set() const{
    return m_object_isSet;
}

bool OAIUpdatePageProperties_200_response::is_object_Valid() const{
    return m_object_isValid;
}

OAIQueryADatabase_200_response_results_inner_parent OAIUpdatePageProperties_200_response::getParent() const {
    return m_parent;
}
void OAIUpdatePageProperties_200_response::setParent(const OAIQueryADatabase_200_response_results_inner_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIUpdatePageProperties_200_response::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIUpdatePageProperties_200_response_properties OAIUpdatePageProperties_200_response::getProperties() const {
    return m_properties;
}
void OAIUpdatePageProperties_200_response::setProperties(const OAIUpdatePageProperties_200_response_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIUpdatePageProperties_200_response::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIUpdatePageProperties_200_response::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIUpdatePageProperties_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edited_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePageProperties_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
