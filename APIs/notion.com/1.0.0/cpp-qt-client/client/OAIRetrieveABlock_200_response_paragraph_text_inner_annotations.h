/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRetrieveABlock_200_response_paragraph_text_inner_annotations.h
 *
 * 
 */

#ifndef OAIRetrieveABlock_200_response_paragraph_text_inner_annotations_H
#define OAIRetrieveABlock_200_response_paragraph_text_inner_annotations_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRetrieveABlock_200_response_paragraph_text_inner_annotations : public OAIObject {
public:
    OAIRetrieveABlock_200_response_paragraph_text_inner_annotations();
    OAIRetrieveABlock_200_response_paragraph_text_inner_annotations(QString json);
    ~OAIRetrieveABlock_200_response_paragraph_text_inner_annotations() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBold() const;
    void setBold(const bool &bold);
    bool is_bold_Set() const;
    bool is_bold_Valid() const;

    bool isCode() const;
    void setCode(const bool &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    bool isItalic() const;
    void setItalic(const bool &italic);
    bool is_italic_Set() const;
    bool is_italic_Valid() const;

    bool isStrikethrough() const;
    void setStrikethrough(const bool &strikethrough);
    bool is_strikethrough_Set() const;
    bool is_strikethrough_Valid() const;

    bool isUnderline() const;
    void setUnderline(const bool &underline);
    bool is_underline_Set() const;
    bool is_underline_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_bold;
    bool m_bold_isSet;
    bool m_bold_isValid;

    bool m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    bool m_italic;
    bool m_italic_isSet;
    bool m_italic_isValid;

    bool m_strikethrough;
    bool m_strikethrough_isSet;
    bool m_strikethrough_isValid;

    bool m_underline;
    bool m_underline_isSet;
    bool m_underline_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRetrieveABlock_200_response_paragraph_text_inner_annotations)

#endif // OAIRetrieveABlock_200_response_paragraph_text_inner_annotations_H
