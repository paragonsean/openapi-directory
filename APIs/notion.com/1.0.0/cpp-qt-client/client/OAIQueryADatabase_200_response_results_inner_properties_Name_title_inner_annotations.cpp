/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations() {
    this->initializeModel();
}

OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::~OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations() {}

void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::initializeModel() {

    m_bold_isSet = false;
    m_bold_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_italic_isSet = false;
    m_italic_isValid = false;

    m_strikethrough_isSet = false;
    m_strikethrough_isValid = false;

    m_underline_isSet = false;
    m_underline_isValid = false;
}

void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::fromJsonObject(QJsonObject json) {

    m_bold_isValid = ::OpenAPI::fromJsonValue(m_bold, json[QString("bold")]);
    m_bold_isSet = !json[QString("bold")].isNull() && m_bold_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_italic_isValid = ::OpenAPI::fromJsonValue(m_italic, json[QString("italic")]);
    m_italic_isSet = !json[QString("italic")].isNull() && m_italic_isValid;

    m_strikethrough_isValid = ::OpenAPI::fromJsonValue(m_strikethrough, json[QString("strikethrough")]);
    m_strikethrough_isSet = !json[QString("strikethrough")].isNull() && m_strikethrough_isValid;

    m_underline_isValid = ::OpenAPI::fromJsonValue(m_underline, json[QString("underline")]);
    m_underline_isSet = !json[QString("underline")].isNull() && m_underline_isValid;
}

QString OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::asJsonObject() const {
    QJsonObject obj;
    if (m_bold_isSet) {
        obj.insert(QString("bold"), ::OpenAPI::toJsonValue(m_bold));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_italic_isSet) {
        obj.insert(QString("italic"), ::OpenAPI::toJsonValue(m_italic));
    }
    if (m_strikethrough_isSet) {
        obj.insert(QString("strikethrough"), ::OpenAPI::toJsonValue(m_strikethrough));
    }
    if (m_underline_isSet) {
        obj.insert(QString("underline"), ::OpenAPI::toJsonValue(m_underline));
    }
    return obj;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isBold() const {
    return m_bold;
}
void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::setBold(const bool &bold) {
    m_bold = bold;
    m_bold_isSet = true;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_bold_Set() const{
    return m_bold_isSet;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_bold_Valid() const{
    return m_bold_isValid;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isCode() const {
    return m_code;
}
void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::setCode(const bool &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_code_Set() const{
    return m_code_isSet;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::getColor() const {
    return m_color;
}
void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_color_Set() const{
    return m_color_isSet;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isItalic() const {
    return m_italic;
}
void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::setItalic(const bool &italic) {
    m_italic = italic;
    m_italic_isSet = true;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_italic_Set() const{
    return m_italic_isSet;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_italic_Valid() const{
    return m_italic_isValid;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isStrikethrough() const {
    return m_strikethrough;
}
void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::setStrikethrough(const bool &strikethrough) {
    m_strikethrough = strikethrough;
    m_strikethrough_isSet = true;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_strikethrough_Set() const{
    return m_strikethrough_isSet;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_strikethrough_Valid() const{
    return m_strikethrough_isValid;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isUnderline() const {
    return m_underline;
}
void OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::setUnderline(const bool &underline) {
    m_underline = underline;
    m_underline_isSet = true;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_underline_Set() const{
    return m_underline_isSet;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::is_underline_Valid() const{
    return m_underline_isValid;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_italic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikethrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_underline_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryADatabase_200_response_results_inner_properties_Name_title_inner_annotations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
