/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePageProperties_200_response_properties_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePageProperties_200_response_properties_Read::OAIUpdatePageProperties_200_response_properties_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePageProperties_200_response_properties_Read::OAIUpdatePageProperties_200_response_properties_Read() {
    this->initializeModel();
}

OAIUpdatePageProperties_200_response_properties_Read::~OAIUpdatePageProperties_200_response_properties_Read() {}

void OAIUpdatePageProperties_200_response_properties_Read::initializeModel() {

    m_checkbox_isSet = false;
    m_checkbox_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdatePageProperties_200_response_properties_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePageProperties_200_response_properties_Read::fromJsonObject(QJsonObject json) {

    m_checkbox_isValid = ::OpenAPI::fromJsonValue(m_checkbox, json[QString("checkbox")]);
    m_checkbox_isSet = !json[QString("checkbox")].isNull() && m_checkbox_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUpdatePageProperties_200_response_properties_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePageProperties_200_response_properties_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_checkbox_isSet) {
        obj.insert(QString("checkbox"), ::OpenAPI::toJsonValue(m_checkbox));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIUpdatePageProperties_200_response_properties_Read::isCheckbox() const {
    return m_checkbox;
}
void OAIUpdatePageProperties_200_response_properties_Read::setCheckbox(const bool &checkbox) {
    m_checkbox = checkbox;
    m_checkbox_isSet = true;
}

bool OAIUpdatePageProperties_200_response_properties_Read::is_checkbox_Set() const{
    return m_checkbox_isSet;
}

bool OAIUpdatePageProperties_200_response_properties_Read::is_checkbox_Valid() const{
    return m_checkbox_isValid;
}

QString OAIUpdatePageProperties_200_response_properties_Read::getId() const {
    return m_id;
}
void OAIUpdatePageProperties_200_response_properties_Read::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdatePageProperties_200_response_properties_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdatePageProperties_200_response_properties_Read::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdatePageProperties_200_response_properties_Read::getType() const {
    return m_type;
}
void OAIUpdatePageProperties_200_response_properties_Read::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdatePageProperties_200_response_properties_Read::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdatePageProperties_200_response_properties_Read::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdatePageProperties_200_response_properties_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkbox_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePageProperties_200_response_properties_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
