/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveABlock_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveABlock_200_response::OAIRetrieveABlock_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveABlock_200_response::OAIRetrieveABlock_200_response() {
    this->initializeModel();
}

OAIRetrieveABlock_200_response::~OAIRetrieveABlock_200_response() {}

void OAIRetrieveABlock_200_response::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_edited_time_isSet = false;
    m_last_edited_time_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_paragraph_isSet = false;
    m_paragraph_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRetrieveABlock_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveABlock_200_response::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("has_children")]);
    m_has_children_isSet = !json[QString("has_children")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_edited_time_isValid = ::OpenAPI::fromJsonValue(m_last_edited_time, json[QString("last_edited_time")]);
    m_last_edited_time_isSet = !json[QString("last_edited_time")].isNull() && m_last_edited_time_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_paragraph_isValid = ::OpenAPI::fromJsonValue(m_paragraph, json[QString("paragraph")]);
    m_paragraph_isSet = !json[QString("paragraph")].isNull() && m_paragraph_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRetrieveABlock_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveABlock_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("has_children"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_edited_time_isSet) {
        obj.insert(QString("last_edited_time"), ::OpenAPI::toJsonValue(m_last_edited_time));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_paragraph.isSet()) {
        obj.insert(QString("paragraph"), ::OpenAPI::toJsonValue(m_paragraph));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRetrieveABlock_200_response::getCreatedTime() const {
    return m_created_time;
}
void OAIRetrieveABlock_200_response::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIRetrieveABlock_200_response::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIRetrieveABlock_200_response::isHasChildren() const {
    return m_has_children;
}
void OAIRetrieveABlock_200_response::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIRetrieveABlock_200_response::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAIRetrieveABlock_200_response::getId() const {
    return m_id;
}
void OAIRetrieveABlock_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRetrieveABlock_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRetrieveABlock_200_response::getLastEditedTime() const {
    return m_last_edited_time;
}
void OAIRetrieveABlock_200_response::setLastEditedTime(const QString &last_edited_time) {
    m_last_edited_time = last_edited_time;
    m_last_edited_time_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_last_edited_time_Set() const{
    return m_last_edited_time_isSet;
}

bool OAIRetrieveABlock_200_response::is_last_edited_time_Valid() const{
    return m_last_edited_time_isValid;
}

QString OAIRetrieveABlock_200_response::getObject() const {
    return m_object;
}
void OAIRetrieveABlock_200_response::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_object_Set() const{
    return m_object_isSet;
}

bool OAIRetrieveABlock_200_response::is_object_Valid() const{
    return m_object_isValid;
}

OAIRetrieveABlock_200_response_paragraph OAIRetrieveABlock_200_response::getParagraph() const {
    return m_paragraph;
}
void OAIRetrieveABlock_200_response::setParagraph(const OAIRetrieveABlock_200_response_paragraph &paragraph) {
    m_paragraph = paragraph;
    m_paragraph_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_paragraph_Set() const{
    return m_paragraph_isSet;
}

bool OAIRetrieveABlock_200_response::is_paragraph_Valid() const{
    return m_paragraph_isValid;
}

QString OAIRetrieveABlock_200_response::getType() const {
    return m_type;
}
void OAIRetrieveABlock_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRetrieveABlock_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRetrieveABlock_200_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRetrieveABlock_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edited_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveABlock_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
