/**
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveComments_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveComments_200_response::OAIRetrieveComments_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveComments_200_response::OAIRetrieveComments_200_response() {
    this->initializeModel();
}

OAIRetrieveComments_200_response::~OAIRetrieveComments_200_response() {}

void OAIRetrieveComments_200_response::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_next_cursor_isSet = false;
    m_next_cursor_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRetrieveComments_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveComments_200_response::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("has_more")]);
    m_has_more_isSet = !json[QString("has_more")].isNull() && m_has_more_isValid;

    m_next_cursor_isValid = ::OpenAPI::fromJsonValue(m_next_cursor, json[QString("next_cursor")]);
    m_next_cursor_isSet = !json[QString("next_cursor")].isNull() && m_next_cursor_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRetrieveComments_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveComments_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("has_more"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_next_cursor_isSet) {
        obj.insert(QString("next_cursor"), ::OpenAPI::toJsonValue(m_next_cursor));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIRetrieveComments_200_response::getComment() const {
    return m_comment;
}
void OAIRetrieveComments_200_response::setComment(const OAIObject &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRetrieveComments_200_response::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRetrieveComments_200_response::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIRetrieveComments_200_response::isHasMore() const {
    return m_has_more;
}
void OAIRetrieveComments_200_response::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIRetrieveComments_200_response::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIRetrieveComments_200_response::is_has_more_Valid() const{
    return m_has_more_isValid;
}

QJsonValue OAIRetrieveComments_200_response::getNextCursor() const {
    return m_next_cursor;
}
void OAIRetrieveComments_200_response::setNextCursor(const QJsonValue &next_cursor) {
    m_next_cursor = next_cursor;
    m_next_cursor_isSet = true;
}

bool OAIRetrieveComments_200_response::is_next_cursor_Set() const{
    return m_next_cursor_isSet;
}

bool OAIRetrieveComments_200_response::is_next_cursor_Valid() const{
    return m_next_cursor_isValid;
}

QString OAIRetrieveComments_200_response::getObject() const {
    return m_object;
}
void OAIRetrieveComments_200_response::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIRetrieveComments_200_response::is_object_Set() const{
    return m_object_isSet;
}

bool OAIRetrieveComments_200_response::is_object_Valid() const{
    return m_object_isValid;
}

QList<OAIRetrieveComments_200_response_results_inner> OAIRetrieveComments_200_response::getResults() const {
    return m_results;
}
void OAIRetrieveComments_200_response::setResults(const QList<OAIRetrieveComments_200_response_results_inner> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIRetrieveComments_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAIRetrieveComments_200_response::is_results_Valid() const{
    return m_results_isValid;
}

QString OAIRetrieveComments_200_response::getType() const {
    return m_type;
}
void OAIRetrieveComments_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRetrieveComments_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRetrieveComments_200_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRetrieveComments_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveComments_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
