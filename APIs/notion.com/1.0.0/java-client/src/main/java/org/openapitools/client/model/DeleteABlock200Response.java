/*
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeleteABlock200ResponseCreatedBy;
import org.openapitools.client.model.DeleteABlock200ResponseLastEditedBy;
import org.openapitools.client.model.RetrieveABlock200ResponseParagraph;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteABlock200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:52.197913-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteABlock200Response {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private DeleteABlock200ResponseCreatedBy createdBy;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "has_children";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_EDITED_BY = "last_edited_by";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_BY)
  private DeleteABlock200ResponseLastEditedBy lastEditedBy;

  public static final String SERIALIZED_NAME_LAST_EDITED_TIME = "last_edited_time";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_TIME)
  private String lastEditedTime;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_PARAGRAPH = "paragraph";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH)
  private RetrieveABlock200ResponseParagraph paragraph;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public DeleteABlock200Response() {
  }

  public DeleteABlock200Response archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public DeleteABlock200Response createdBy(DeleteABlock200ResponseCreatedBy createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public DeleteABlock200ResponseCreatedBy getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(DeleteABlock200ResponseCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public DeleteABlock200Response createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public DeleteABlock200Response hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public DeleteABlock200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeleteABlock200Response lastEditedBy(DeleteABlock200ResponseLastEditedBy lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
    return this;
  }

  /**
   * Get lastEditedBy
   * @return lastEditedBy
   */
  @javax.annotation.Nullable
  public DeleteABlock200ResponseLastEditedBy getLastEditedBy() {
    return lastEditedBy;
  }

  public void setLastEditedBy(DeleteABlock200ResponseLastEditedBy lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
  }


  public DeleteABlock200Response lastEditedTime(String lastEditedTime) {
    this.lastEditedTime = lastEditedTime;
    return this;
  }

  /**
   * Get lastEditedTime
   * @return lastEditedTime
   */
  @javax.annotation.Nullable
  public String getLastEditedTime() {
    return lastEditedTime;
  }

  public void setLastEditedTime(String lastEditedTime) {
    this.lastEditedTime = lastEditedTime;
  }


  public DeleteABlock200Response _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public DeleteABlock200Response paragraph(RetrieveABlock200ResponseParagraph paragraph) {
    this.paragraph = paragraph;
    return this;
  }

  /**
   * Get paragraph
   * @return paragraph
   */
  @javax.annotation.Nullable
  public RetrieveABlock200ResponseParagraph getParagraph() {
    return paragraph;
  }

  public void setParagraph(RetrieveABlock200ResponseParagraph paragraph) {
    this.paragraph = paragraph;
  }


  public DeleteABlock200Response type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteABlock200Response deleteABlock200Response = (DeleteABlock200Response) o;
    return Objects.equals(this.archived, deleteABlock200Response.archived) &&
        Objects.equals(this.createdBy, deleteABlock200Response.createdBy) &&
        Objects.equals(this.createdTime, deleteABlock200Response.createdTime) &&
        Objects.equals(this.hasChildren, deleteABlock200Response.hasChildren) &&
        Objects.equals(this.id, deleteABlock200Response.id) &&
        Objects.equals(this.lastEditedBy, deleteABlock200Response.lastEditedBy) &&
        Objects.equals(this.lastEditedTime, deleteABlock200Response.lastEditedTime) &&
        Objects.equals(this._object, deleteABlock200Response._object) &&
        Objects.equals(this.paragraph, deleteABlock200Response.paragraph) &&
        Objects.equals(this.type, deleteABlock200Response.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, createdBy, createdTime, hasChildren, id, lastEditedBy, lastEditedTime, _object, paragraph, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteABlock200Response {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastEditedBy: ").append(toIndentedString(lastEditedBy)).append("\n");
    sb.append("    lastEditedTime: ").append(toIndentedString(lastEditedTime)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    paragraph: ").append(toIndentedString(paragraph)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("created_by");
    openapiFields.add("created_time");
    openapiFields.add("has_children");
    openapiFields.add("id");
    openapiFields.add("last_edited_by");
    openapiFields.add("last_edited_time");
    openapiFields.add("object");
    openapiFields.add("paragraph");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteABlock200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteABlock200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteABlock200Response is not found in the empty JSON string", DeleteABlock200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteABlock200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteABlock200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        DeleteABlock200ResponseCreatedBy.validateJsonElement(jsonObj.get("created_by"));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `last_edited_by`
      if (jsonObj.get("last_edited_by") != null && !jsonObj.get("last_edited_by").isJsonNull()) {
        DeleteABlock200ResponseLastEditedBy.validateJsonElement(jsonObj.get("last_edited_by"));
      }
      if ((jsonObj.get("last_edited_time") != null && !jsonObj.get("last_edited_time").isJsonNull()) && !jsonObj.get("last_edited_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_edited_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_edited_time").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the optional field `paragraph`
      if (jsonObj.get("paragraph") != null && !jsonObj.get("paragraph").isJsonNull()) {
        RetrieveABlock200ResponseParagraph.validateJsonElement(jsonObj.get("paragraph"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteABlock200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteABlock200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteABlock200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteABlock200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteABlock200Response>() {
           @Override
           public void write(JsonWriter out, DeleteABlock200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteABlock200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteABlock200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteABlock200Response
   * @throws IOException if the JSON string is invalid with respect to DeleteABlock200Response
   */
  public static DeleteABlock200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteABlock200Response.class);
  }

  /**
   * Convert an instance of DeleteABlock200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

