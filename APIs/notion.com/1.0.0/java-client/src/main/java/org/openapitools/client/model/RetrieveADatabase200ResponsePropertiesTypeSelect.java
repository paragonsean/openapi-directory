/*
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetrieveADatabase200ResponsePropertiesTypeSelect
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:52.197913-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetrieveADatabase200ResponsePropertiesTypeSelect {
  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner> options = new ArrayList<>();

  public RetrieveADatabase200ResponsePropertiesTypeSelect() {
  }

  public RetrieveADatabase200ResponsePropertiesTypeSelect options(List<RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner> options) {
    this.options = options;
    return this;
  }

  public RetrieveADatabase200ResponsePropertiesTypeSelect addOptionsItem(RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public List<RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner> getOptions() {
    return options;
  }

  public void setOptions(List<RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner> options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveADatabase200ResponsePropertiesTypeSelect retrieveADatabase200ResponsePropertiesTypeSelect = (RetrieveADatabase200ResponsePropertiesTypeSelect) o;
    return Objects.equals(this.options, retrieveADatabase200ResponsePropertiesTypeSelect.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveADatabase200ResponsePropertiesTypeSelect {\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveADatabase200ResponsePropertiesTypeSelect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveADatabase200ResponsePropertiesTypeSelect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveADatabase200ResponsePropertiesTypeSelect is not found in the empty JSON string", RetrieveADatabase200ResponsePropertiesTypeSelect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveADatabase200ResponsePropertiesTypeSelect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveADatabase200ResponsePropertiesTypeSelect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            RetrieveADatabase200ResponsePropertiesTypeSelectOptionsInner.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveADatabase200ResponsePropertiesTypeSelect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveADatabase200ResponsePropertiesTypeSelect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveADatabase200ResponsePropertiesTypeSelect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveADatabase200ResponsePropertiesTypeSelect.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveADatabase200ResponsePropertiesTypeSelect>() {
           @Override
           public void write(JsonWriter out, RetrieveADatabase200ResponsePropertiesTypeSelect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveADatabase200ResponsePropertiesTypeSelect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveADatabase200ResponsePropertiesTypeSelect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveADatabase200ResponsePropertiesTypeSelect
   * @throws IOException if the JSON string is invalid with respect to RetrieveADatabase200ResponsePropertiesTypeSelect
   */
  public static RetrieveADatabase200ResponsePropertiesTypeSelect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveADatabase200ResponsePropertiesTypeSelect.class);
  }

  /**
   * Convert an instance of RetrieveADatabase200ResponsePropertiesTypeSelect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

