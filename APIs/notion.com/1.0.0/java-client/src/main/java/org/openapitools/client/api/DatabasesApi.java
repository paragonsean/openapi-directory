/*
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueryADatabase200Response;
import org.openapitools.client.model.QueryADatabaseRequest;
import org.openapitools.client.model.RetrieveADatabase200Response;
import org.openapitools.client.model.UpdateADatabase200Response;
import org.openapitools.client.model.UpdateADatabaseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryADatabase
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param queryADatabaseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Query a Database (Single Filter) </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryADatabaseCall(String id, String notionVersion, QueryADatabaseRequest queryADatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryADatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases/{id}/query"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryADatabaseValidateBeforeCall(String id, String notionVersion, QueryADatabaseRequest queryADatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling queryADatabase(Async)");
        }

        return queryADatabaseCall(id, notionVersion, queryADatabaseRequest, _callback);

    }

    /**
     * Query a database
     * Query a database
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param queryADatabaseRequest  (optional)
     * @return QueryADatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Query a Database (Single Filter) </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public QueryADatabase200Response queryADatabase(String id, String notionVersion, QueryADatabaseRequest queryADatabaseRequest) throws ApiException {
        ApiResponse<QueryADatabase200Response> localVarResp = queryADatabaseWithHttpInfo(id, notionVersion, queryADatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Query a database
     * Query a database
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param queryADatabaseRequest  (optional)
     * @return ApiResponse&lt;QueryADatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Query a Database (Single Filter) </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<QueryADatabase200Response> queryADatabaseWithHttpInfo(String id, String notionVersion, QueryADatabaseRequest queryADatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = queryADatabaseValidateBeforeCall(id, notionVersion, queryADatabaseRequest, null);
        Type localVarReturnType = new TypeToken<QueryADatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query a database (asynchronously)
     * Query a database
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param queryADatabaseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Query a Database (Single Filter) </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryADatabaseAsync(String id, String notionVersion, QueryADatabaseRequest queryADatabaseRequest, final ApiCallback<QueryADatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryADatabaseValidateBeforeCall(id, notionVersion, queryADatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<QueryADatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveADatabase
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Retrieve a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADatabaseCall(String id, String notionVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/databases/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveADatabaseValidateBeforeCall(String id, String notionVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveADatabase(Async)");
        }

        return retrieveADatabaseCall(id, notionVersion, _callback);

    }

    /**
     * Retrieve a database
     * Retrieves a database object using the ID specified in the request path. 
     * @param id  (required)
     * @param notionVersion  (optional)
     * @return RetrieveADatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Retrieve a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public RetrieveADatabase200Response retrieveADatabase(String id, String notionVersion) throws ApiException {
        ApiResponse<RetrieveADatabase200Response> localVarResp = retrieveADatabaseWithHttpInfo(id, notionVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve a database
     * Retrieves a database object using the ID specified in the request path. 
     * @param id  (required)
     * @param notionVersion  (optional)
     * @return ApiResponse&lt;RetrieveADatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Retrieve a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveADatabase200Response> retrieveADatabaseWithHttpInfo(String id, String notionVersion) throws ApiException {
        okhttp3.Call localVarCall = retrieveADatabaseValidateBeforeCall(id, notionVersion, null);
        Type localVarReturnType = new TypeToken<RetrieveADatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a database (asynchronously)
     * Retrieves a database object using the ID specified in the request path. 
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Retrieve a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADatabaseAsync(String id, String notionVersion, final ApiCallback<RetrieveADatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveADatabaseValidateBeforeCall(id, notionVersion, _callback);
        Type localVarReturnType = new TypeToken<RetrieveADatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateADatabase
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param updateADatabaseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Update a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateADatabaseCall(String id, String notionVersion, UpdateADatabaseRequest updateADatabaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateADatabaseRequest;

        // create path and map variables
        String localVarPath = "/v1/databases/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notionVersion != null) {
            localVarHeaderParams.put("Notion-Version", localVarApiClient.parameterToString(notionVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateADatabaseValidateBeforeCall(String id, String notionVersion, UpdateADatabaseRequest updateADatabaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateADatabase(Async)");
        }

        return updateADatabaseCall(id, notionVersion, updateADatabaseRequest, _callback);

    }

    /**
     * Update a database
     * Update a database
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param updateADatabaseRequest  (optional)
     * @return UpdateADatabase200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Update a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public UpdateADatabase200Response updateADatabase(String id, String notionVersion, UpdateADatabaseRequest updateADatabaseRequest) throws ApiException {
        ApiResponse<UpdateADatabase200Response> localVarResp = updateADatabaseWithHttpInfo(id, notionVersion, updateADatabaseRequest);
        return localVarResp.getData();
    }

    /**
     * Update a database
     * Update a database
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param updateADatabaseRequest  (optional)
     * @return ApiResponse&lt;UpdateADatabase200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Update a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateADatabase200Response> updateADatabaseWithHttpInfo(String id, String notionVersion, UpdateADatabaseRequest updateADatabaseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateADatabaseValidateBeforeCall(id, notionVersion, updateADatabaseRequest, null);
        Type localVarReturnType = new TypeToken<UpdateADatabase200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a database (asynchronously)
     * Update a database
     * @param id  (required)
     * @param notionVersion  (optional)
     * @param updateADatabaseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success - Update a Database </td><td>  * CF-Cache-Status -  <br>  * CF-RAY -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Security-Policy -  <br>  * Date -  <br>  * ETag -  <br>  * Expect-CT -  <br>  * Referrer-Policy -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Strict-Transport-Security -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Content-Security-Policy -  <br>  * X-Content-Type-Options -  <br>  * X-DNS-Prefetch-Control -  <br>  * X-Download-Options -  <br>  * X-Frame-Options -  <br>  * X-WebKit-CSP -  <br>  * X-XSS-Protection -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateADatabaseAsync(String id, String notionVersion, UpdateADatabaseRequest updateADatabaseRequest, final ApiCallback<UpdateADatabase200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateADatabaseValidateBeforeCall(id, notionVersion, updateADatabaseRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateADatabase200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
