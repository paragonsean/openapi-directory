/*
 * Notion API
 * Hello and welcome!  To make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).  [Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!  For our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)  Need more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.QueryADatabase200Response;
import org.openapitools.client.model.QueryADatabaseRequest;
import org.openapitools.client.model.RetrieveADatabase200Response;
import org.openapitools.client.model.UpdateADatabase200Response;
import org.openapitools.client.model.UpdateADatabaseRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabasesApi
 */
@Disabled
public class DatabasesApiTest {

    private final DatabasesApi api = new DatabasesApi();

    /**
     * Query a database
     *
     * Query a database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryADatabaseTest() throws ApiException {
        String id = null;
        String notionVersion = null;
        QueryADatabaseRequest queryADatabaseRequest = null;
        QueryADatabase200Response response = api.queryADatabase(id, notionVersion, queryADatabaseRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a database
     *
     * Retrieves a database object using the ID specified in the request path. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveADatabaseTest() throws ApiException {
        String id = null;
        String notionVersion = null;
        RetrieveADatabase200Response response = api.retrieveADatabase(id, notionVersion);
        // TODO: test validations
    }

    /**
     * Update a database
     *
     * Update a database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateADatabaseTest() throws ApiException {
        String id = null;
        String notionVersion = null;
        UpdateADatabaseRequest updateADatabaseRequest = null;
        UpdateADatabase200Response response = api.updateADatabase(id, notionVersion, updateADatabaseRequest);
        // TODO: test validations
    }

}
