# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friendly_description: str=None, hidden: bool=None, icd10_description: str=None, id: int=None, number: int=None):
        """Category - a model defined in OpenAPI

        :param friendly_description: The friendly_description of this Category.
        :param hidden: The hidden of this Category.
        :param icd10_description: The icd10_description of this Category.
        :param id: The id of this Category.
        :param number: The number of this Category.
        """
        self.openapi_types = {
            'friendly_description': str,
            'hidden': bool,
            'icd10_description': str,
            'id': int,
            'number': int
        }

        self.attribute_map = {
            'friendly_description': 'friendlyDescription',
            'hidden': 'hidden',
            'icd10_description': 'icd10Description',
            'id': 'id',
            'number': 'number'
        }

        self._friendly_description = friendly_description
        self._hidden = hidden
        self._icd10_description = icd10_description
        self._id = id
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friendly_description(self):
        """Gets the friendly_description of this Category.


        :return: The friendly_description of this Category.
        :rtype: str
        """
        return self._friendly_description

    @friendly_description.setter
    def friendly_description(self, friendly_description):
        """Sets the friendly_description of this Category.


        :param friendly_description: The friendly_description of this Category.
        :type friendly_description: str
        """

        self._friendly_description = friendly_description

    @property
    def hidden(self):
        """Gets the hidden of this Category.


        :return: The hidden of this Category.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Category.


        :param hidden: The hidden of this Category.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def icd10_description(self):
        """Gets the icd10_description of this Category.


        :return: The icd10_description of this Category.
        :rtype: str
        """
        return self._icd10_description

    @icd10_description.setter
    def icd10_description(self, icd10_description):
        """Sets the icd10_description of this Category.


        :param icd10_description: The icd10_description of this Category.
        :type icd10_description: str
        """

        self._icd10_description = icd10_description

    @property
    def id(self):
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: int
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this Category.


        :return: The number of this Category.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Category.


        :param number: The number of this Category.
        :type number: int
        """

        self._number = number
