# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lookup import Lookup
from openapi_server import util


class BaseGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, group_type: Lookup=None, id: int=None, last_import_date: datetime=None, name: str=None, parent_codes: List[str]=None, short_name: str=None, visible: bool=None, visible_to_join: bool=None):
        """BaseGroup - a model defined in OpenAPI

        :param code: The code of this BaseGroup.
        :param group_type: The group_type of this BaseGroup.
        :param id: The id of this BaseGroup.
        :param last_import_date: The last_import_date of this BaseGroup.
        :param name: The name of this BaseGroup.
        :param parent_codes: The parent_codes of this BaseGroup.
        :param short_name: The short_name of this BaseGroup.
        :param visible: The visible of this BaseGroup.
        :param visible_to_join: The visible_to_join of this BaseGroup.
        """
        self.openapi_types = {
            'code': str,
            'group_type': Lookup,
            'id': int,
            'last_import_date': datetime,
            'name': str,
            'parent_codes': List[str],
            'short_name': str,
            'visible': bool,
            'visible_to_join': bool
        }

        self.attribute_map = {
            'code': 'code',
            'group_type': 'groupType',
            'id': 'id',
            'last_import_date': 'lastImportDate',
            'name': 'name',
            'parent_codes': 'parentCodes',
            'short_name': 'shortName',
            'visible': 'visible',
            'visible_to_join': 'visibleToJoin'
        }

        self._code = code
        self._group_type = group_type
        self._id = id
        self._last_import_date = last_import_date
        self._name = name
        self._parent_codes = parent_codes
        self._short_name = short_name
        self._visible = visible
        self._visible_to_join = visible_to_join

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseGroup of this BaseGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this BaseGroup.


        :return: The code of this BaseGroup.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BaseGroup.


        :param code: The code of this BaseGroup.
        :type code: str
        """

        self._code = code

    @property
    def group_type(self):
        """Gets the group_type of this BaseGroup.


        :return: The group_type of this BaseGroup.
        :rtype: Lookup
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this BaseGroup.


        :param group_type: The group_type of this BaseGroup.
        :type group_type: Lookup
        """

        self._group_type = group_type

    @property
    def id(self):
        """Gets the id of this BaseGroup.


        :return: The id of this BaseGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseGroup.


        :param id: The id of this BaseGroup.
        :type id: int
        """

        self._id = id

    @property
    def last_import_date(self):
        """Gets the last_import_date of this BaseGroup.


        :return: The last_import_date of this BaseGroup.
        :rtype: datetime
        """
        return self._last_import_date

    @last_import_date.setter
    def last_import_date(self, last_import_date):
        """Sets the last_import_date of this BaseGroup.


        :param last_import_date: The last_import_date of this BaseGroup.
        :type last_import_date: datetime
        """

        self._last_import_date = last_import_date

    @property
    def name(self):
        """Gets the name of this BaseGroup.


        :return: The name of this BaseGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseGroup.


        :param name: The name of this BaseGroup.
        :type name: str
        """

        self._name = name

    @property
    def parent_codes(self):
        """Gets the parent_codes of this BaseGroup.


        :return: The parent_codes of this BaseGroup.
        :rtype: List[str]
        """
        return self._parent_codes

    @parent_codes.setter
    def parent_codes(self, parent_codes):
        """Sets the parent_codes of this BaseGroup.


        :param parent_codes: The parent_codes of this BaseGroup.
        :type parent_codes: List[str]
        """

        self._parent_codes = parent_codes

    @property
    def short_name(self):
        """Gets the short_name of this BaseGroup.


        :return: The short_name of this BaseGroup.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this BaseGroup.


        :param short_name: The short_name of this BaseGroup.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def visible(self):
        """Gets the visible of this BaseGroup.


        :return: The visible of this BaseGroup.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this BaseGroup.


        :param visible: The visible of this BaseGroup.
        :type visible: bool
        """

        self._visible = visible

    @property
    def visible_to_join(self):
        """Gets the visible_to_join of this BaseGroup.


        :return: The visible_to_join of this BaseGroup.
        :rtype: bool
        """
        return self._visible_to_join

    @visible_to_join.setter
    def visible_to_join(self, visible_to_join):
        """Sets the visible_to_join of this BaseGroup.


        :param visible_to_join: The visible_to_join of this BaseGroup.
        :type visible_to_join: bool
        """

        self._visible_to_join = visible_to_join
