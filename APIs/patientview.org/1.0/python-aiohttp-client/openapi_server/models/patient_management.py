# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fhir_condition import FhirCondition
from openapi_server.models.fhir_encounter import FhirEncounter
from openapi_server.models.fhir_observation import FhirObservation
from openapi_server.models.fhir_patient import FhirPatient
from openapi_server.models.fhir_practitioner import FhirPractitioner
from openapi_server import util


class PatientManagement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: FhirCondition=None, encounters: List[FhirEncounter]=None, group_code: str=None, identifier: str=None, observations: List[FhirObservation]=None, patient: FhirPatient=None, practitioners: List[FhirPractitioner]=None):
        """PatientManagement - a model defined in OpenAPI

        :param condition: The condition of this PatientManagement.
        :param encounters: The encounters of this PatientManagement.
        :param group_code: The group_code of this PatientManagement.
        :param identifier: The identifier of this PatientManagement.
        :param observations: The observations of this PatientManagement.
        :param patient: The patient of this PatientManagement.
        :param practitioners: The practitioners of this PatientManagement.
        """
        self.openapi_types = {
            'condition': FhirCondition,
            'encounters': List[FhirEncounter],
            'group_code': str,
            'identifier': str,
            'observations': List[FhirObservation],
            'patient': FhirPatient,
            'practitioners': List[FhirPractitioner]
        }

        self.attribute_map = {
            'condition': 'condition',
            'encounters': 'encounters',
            'group_code': 'groupCode',
            'identifier': 'identifier',
            'observations': 'observations',
            'patient': 'patient',
            'practitioners': 'practitioners'
        }

        self._condition = condition
        self._encounters = encounters
        self._group_code = group_code
        self._identifier = identifier
        self._observations = observations
        self._patient = patient
        self._practitioners = practitioners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientManagement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientManagement of this PatientManagement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this PatientManagement.


        :return: The condition of this PatientManagement.
        :rtype: FhirCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PatientManagement.


        :param condition: The condition of this PatientManagement.
        :type condition: FhirCondition
        """

        self._condition = condition

    @property
    def encounters(self):
        """Gets the encounters of this PatientManagement.


        :return: The encounters of this PatientManagement.
        :rtype: List[FhirEncounter]
        """
        return self._encounters

    @encounters.setter
    def encounters(self, encounters):
        """Sets the encounters of this PatientManagement.


        :param encounters: The encounters of this PatientManagement.
        :type encounters: List[FhirEncounter]
        """

        self._encounters = encounters

    @property
    def group_code(self):
        """Gets the group_code of this PatientManagement.


        :return: The group_code of this PatientManagement.
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this PatientManagement.


        :param group_code: The group_code of this PatientManagement.
        :type group_code: str
        """

        self._group_code = group_code

    @property
    def identifier(self):
        """Gets the identifier of this PatientManagement.


        :return: The identifier of this PatientManagement.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PatientManagement.


        :param identifier: The identifier of this PatientManagement.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def observations(self):
        """Gets the observations of this PatientManagement.


        :return: The observations of this PatientManagement.
        :rtype: List[FhirObservation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this PatientManagement.


        :param observations: The observations of this PatientManagement.
        :type observations: List[FhirObservation]
        """

        self._observations = observations

    @property
    def patient(self):
        """Gets the patient of this PatientManagement.


        :return: The patient of this PatientManagement.
        :rtype: FhirPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientManagement.


        :param patient: The patient of this PatientManagement.
        :type patient: FhirPatient
        """

        self._patient = patient

    @property
    def practitioners(self):
        """Gets the practitioners of this PatientManagement.


        :return: The practitioners of this PatientManagement.
        :rtype: List[FhirPractitioner]
        """
        return self._practitioners

    @practitioners.setter
    def practitioners(self, practitioners):
        """Sets the practitioners of this PatientManagement.


        :param practitioners: The practitioners of this PatientManagement.
        :type practitioners: List[FhirPractitioner]
        """

        self._practitioners = practitioners
