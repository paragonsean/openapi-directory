# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Role(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, name: str=None, visible: bool=None):
        """Role - a model defined in OpenAPI

        :param description: The description of this Role.
        :param id: The id of this Role.
        :param name: The name of this Role.
        :param visible: The visible of this Role.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'name': str,
            'visible': bool
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'visible': 'visible'
        }

        self._description = description
        self._id = id
        self._name = name
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Role of this Role.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Role.


        :return: The description of this Role.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Role.


        :return: The id of this Role.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.


        :param id: The id of this Role.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Role.


        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.
        :type name: str
        """
        allowed_values = ["PATIENT", "UNIT_ADMIN", "STAFF_ADMIN", "DISEASE_GROUP_ADMIN", "SPECIALTY_ADMIN", "GLOBAL_ADMIN", "GP_ADMIN", "MEMBER", "PUBLIC", "UNIT_ADMIN_API", "IMPORTER"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def visible(self):
        """Gets the visible of this Role.


        :return: The visible of this Role.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Role.


        :param visible: The visible of this Role.
        :type visible: bool
        """

        self._visible = visible
