# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.observation_heading_group import ObservationHeadingGroup
from openapi_server import util


class ObservationHeading(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, created: datetime=None, decimal_places: int=None, default_panel: int=None, default_panel_order: int=None, heading: str=None, id: int=None, info_link: str=None, last_update: datetime=None, max_graph: float=None, min_graph: float=None, name: str=None, normal_range: str=None, observation_heading_groups: list[ObservationHeadingGroup]=None, units: str=None):
        """ObservationHeading - a model defined in OpenAPI

        :param code: The code of this ObservationHeading.
        :param created: The created of this ObservationHeading.
        :param decimal_places: The decimal_places of this ObservationHeading.
        :param default_panel: The default_panel of this ObservationHeading.
        :param default_panel_order: The default_panel_order of this ObservationHeading.
        :param heading: The heading of this ObservationHeading.
        :param id: The id of this ObservationHeading.
        :param info_link: The info_link of this ObservationHeading.
        :param last_update: The last_update of this ObservationHeading.
        :param max_graph: The max_graph of this ObservationHeading.
        :param min_graph: The min_graph of this ObservationHeading.
        :param name: The name of this ObservationHeading.
        :param normal_range: The normal_range of this ObservationHeading.
        :param observation_heading_groups: The observation_heading_groups of this ObservationHeading.
        :param units: The units of this ObservationHeading.
        """
        self.openapi_types = {
            'code': str,
            'created': datetime,
            'decimal_places': int,
            'default_panel': int,
            'default_panel_order': int,
            'heading': str,
            'id': int,
            'info_link': str,
            'last_update': datetime,
            'max_graph': float,
            'min_graph': float,
            'name': str,
            'normal_range': str,
            'observation_heading_groups': list[ObservationHeadingGroup],
            'units': str
        }

        self.attribute_map = {
            'code': 'code',
            'created': 'created',
            'decimal_places': 'decimalPlaces',
            'default_panel': 'defaultPanel',
            'default_panel_order': 'defaultPanelOrder',
            'heading': 'heading',
            'id': 'id',
            'info_link': 'infoLink',
            'last_update': 'lastUpdate',
            'max_graph': 'maxGraph',
            'min_graph': 'minGraph',
            'name': 'name',
            'normal_range': 'normalRange',
            'observation_heading_groups': 'observationHeadingGroups',
            'units': 'units'
        }

        self._code = code
        self._created = created
        self._decimal_places = decimal_places
        self._default_panel = default_panel
        self._default_panel_order = default_panel_order
        self._heading = heading
        self._id = id
        self._info_link = info_link
        self._last_update = last_update
        self._max_graph = max_graph
        self._min_graph = min_graph
        self._name = name
        self._normal_range = normal_range
        self._observation_heading_groups = observation_heading_groups
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObservationHeading':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObservationHeading of this ObservationHeading.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ObservationHeading.


        :return: The code of this ObservationHeading.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ObservationHeading.


        :param code: The code of this ObservationHeading.
        :type code: str
        """

        self._code = code

    @property
    def created(self):
        """Gets the created of this ObservationHeading.


        :return: The created of this ObservationHeading.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ObservationHeading.


        :param created: The created of this ObservationHeading.
        :type created: datetime
        """

        self._created = created

    @property
    def decimal_places(self):
        """Gets the decimal_places of this ObservationHeading.


        :return: The decimal_places of this ObservationHeading.
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this ObservationHeading.


        :param decimal_places: The decimal_places of this ObservationHeading.
        :type decimal_places: int
        """

        self._decimal_places = decimal_places

    @property
    def default_panel(self):
        """Gets the default_panel of this ObservationHeading.


        :return: The default_panel of this ObservationHeading.
        :rtype: int
        """
        return self._default_panel

    @default_panel.setter
    def default_panel(self, default_panel):
        """Sets the default_panel of this ObservationHeading.


        :param default_panel: The default_panel of this ObservationHeading.
        :type default_panel: int
        """

        self._default_panel = default_panel

    @property
    def default_panel_order(self):
        """Gets the default_panel_order of this ObservationHeading.


        :return: The default_panel_order of this ObservationHeading.
        :rtype: int
        """
        return self._default_panel_order

    @default_panel_order.setter
    def default_panel_order(self, default_panel_order):
        """Sets the default_panel_order of this ObservationHeading.


        :param default_panel_order: The default_panel_order of this ObservationHeading.
        :type default_panel_order: int
        """

        self._default_panel_order = default_panel_order

    @property
    def heading(self):
        """Gets the heading of this ObservationHeading.


        :return: The heading of this ObservationHeading.
        :rtype: str
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this ObservationHeading.


        :param heading: The heading of this ObservationHeading.
        :type heading: str
        """

        self._heading = heading

    @property
    def id(self):
        """Gets the id of this ObservationHeading.


        :return: The id of this ObservationHeading.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObservationHeading.


        :param id: The id of this ObservationHeading.
        :type id: int
        """

        self._id = id

    @property
    def info_link(self):
        """Gets the info_link of this ObservationHeading.


        :return: The info_link of this ObservationHeading.
        :rtype: str
        """
        return self._info_link

    @info_link.setter
    def info_link(self, info_link):
        """Sets the info_link of this ObservationHeading.


        :param info_link: The info_link of this ObservationHeading.
        :type info_link: str
        """

        self._info_link = info_link

    @property
    def last_update(self):
        """Gets the last_update of this ObservationHeading.


        :return: The last_update of this ObservationHeading.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this ObservationHeading.


        :param last_update: The last_update of this ObservationHeading.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def max_graph(self):
        """Gets the max_graph of this ObservationHeading.


        :return: The max_graph of this ObservationHeading.
        :rtype: float
        """
        return self._max_graph

    @max_graph.setter
    def max_graph(self, max_graph):
        """Sets the max_graph of this ObservationHeading.


        :param max_graph: The max_graph of this ObservationHeading.
        :type max_graph: float
        """

        self._max_graph = max_graph

    @property
    def min_graph(self):
        """Gets the min_graph of this ObservationHeading.


        :return: The min_graph of this ObservationHeading.
        :rtype: float
        """
        return self._min_graph

    @min_graph.setter
    def min_graph(self, min_graph):
        """Sets the min_graph of this ObservationHeading.


        :param min_graph: The min_graph of this ObservationHeading.
        :type min_graph: float
        """

        self._min_graph = min_graph

    @property
    def name(self):
        """Gets the name of this ObservationHeading.


        :return: The name of this ObservationHeading.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObservationHeading.


        :param name: The name of this ObservationHeading.
        :type name: str
        """

        self._name = name

    @property
    def normal_range(self):
        """Gets the normal_range of this ObservationHeading.


        :return: The normal_range of this ObservationHeading.
        :rtype: str
        """
        return self._normal_range

    @normal_range.setter
    def normal_range(self, normal_range):
        """Sets the normal_range of this ObservationHeading.


        :param normal_range: The normal_range of this ObservationHeading.
        :type normal_range: str
        """

        self._normal_range = normal_range

    @property
    def observation_heading_groups(self):
        """Gets the observation_heading_groups of this ObservationHeading.


        :return: The observation_heading_groups of this ObservationHeading.
        :rtype: list[ObservationHeadingGroup]
        """
        return self._observation_heading_groups

    @observation_heading_groups.setter
    def observation_heading_groups(self, observation_heading_groups):
        """Sets the observation_heading_groups of this ObservationHeading.


        :param observation_heading_groups: The observation_heading_groups of this ObservationHeading.
        :type observation_heading_groups: list[ObservationHeadingGroup]
        """

        self._observation_heading_groups = observation_heading_groups

    @property
    def units(self):
        """Gets the units of this ObservationHeading.


        :return: The units of this ObservationHeading.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ObservationHeading.


        :param units: The units of this ObservationHeading.
        :type units: str
        """

        self._units = units
