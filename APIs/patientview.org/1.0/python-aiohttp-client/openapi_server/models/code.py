# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_category import CodeCategory
from openapi_server.models.code_external_standard import CodeExternalStandard
from openapi_server.models.link import Link
from openapi_server.models.lookup import Lookup
from openapi_server import util


class Code(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, code_categories: list[CodeCategory]=None, code_type: Lookup=None, created: datetime=None, description: str=None, display_order: int=None, external_standards: list[CodeExternalStandard]=None, full_description: str=None, hide_from_patients: bool=None, id: int=None, last_update: datetime=None, links: list[Link]=None, patient_friendly_name: str=None, removed_externally: bool=None, source_type: str=None, standard_type: Lookup=None):
        """Code - a model defined in OpenAPI

        :param code: The code of this Code.
        :param code_categories: The code_categories of this Code.
        :param code_type: The code_type of this Code.
        :param created: The created of this Code.
        :param description: The description of this Code.
        :param display_order: The display_order of this Code.
        :param external_standards: The external_standards of this Code.
        :param full_description: The full_description of this Code.
        :param hide_from_patients: The hide_from_patients of this Code.
        :param id: The id of this Code.
        :param last_update: The last_update of this Code.
        :param links: The links of this Code.
        :param patient_friendly_name: The patient_friendly_name of this Code.
        :param removed_externally: The removed_externally of this Code.
        :param source_type: The source_type of this Code.
        :param standard_type: The standard_type of this Code.
        """
        self.openapi_types = {
            'code': str,
            'code_categories': list[CodeCategory],
            'code_type': Lookup,
            'created': datetime,
            'description': str,
            'display_order': int,
            'external_standards': list[CodeExternalStandard],
            'full_description': str,
            'hide_from_patients': bool,
            'id': int,
            'last_update': datetime,
            'links': list[Link],
            'patient_friendly_name': str,
            'removed_externally': bool,
            'source_type': str,
            'standard_type': Lookup
        }

        self.attribute_map = {
            'code': 'code',
            'code_categories': 'codeCategories',
            'code_type': 'codeType',
            'created': 'created',
            'description': 'description',
            'display_order': 'displayOrder',
            'external_standards': 'externalStandards',
            'full_description': 'fullDescription',
            'hide_from_patients': 'hideFromPatients',
            'id': 'id',
            'last_update': 'lastUpdate',
            'links': 'links',
            'patient_friendly_name': 'patientFriendlyName',
            'removed_externally': 'removedExternally',
            'source_type': 'sourceType',
            'standard_type': 'standardType'
        }

        self._code = code
        self._code_categories = code_categories
        self._code_type = code_type
        self._created = created
        self._description = description
        self._display_order = display_order
        self._external_standards = external_standards
        self._full_description = full_description
        self._hide_from_patients = hide_from_patients
        self._id = id
        self._last_update = last_update
        self._links = links
        self._patient_friendly_name = patient_friendly_name
        self._removed_externally = removed_externally
        self._source_type = source_type
        self._standard_type = standard_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Code':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Code of this Code.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Code.


        :return: The code of this Code.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Code.


        :param code: The code of this Code.
        :type code: str
        """

        self._code = code

    @property
    def code_categories(self):
        """Gets the code_categories of this Code.


        :return: The code_categories of this Code.
        :rtype: list[CodeCategory]
        """
        return self._code_categories

    @code_categories.setter
    def code_categories(self, code_categories):
        """Sets the code_categories of this Code.


        :param code_categories: The code_categories of this Code.
        :type code_categories: list[CodeCategory]
        """

        self._code_categories = code_categories

    @property
    def code_type(self):
        """Gets the code_type of this Code.


        :return: The code_type of this Code.
        :rtype: Lookup
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """Sets the code_type of this Code.


        :param code_type: The code_type of this Code.
        :type code_type: Lookup
        """

        self._code_type = code_type

    @property
    def created(self):
        """Gets the created of this Code.


        :return: The created of this Code.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Code.


        :param created: The created of this Code.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Code.


        :return: The description of this Code.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Code.


        :param description: The description of this Code.
        :type description: str
        """

        self._description = description

    @property
    def display_order(self):
        """Gets the display_order of this Code.


        :return: The display_order of this Code.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Code.


        :param display_order: The display_order of this Code.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def external_standards(self):
        """Gets the external_standards of this Code.


        :return: The external_standards of this Code.
        :rtype: list[CodeExternalStandard]
        """
        return self._external_standards

    @external_standards.setter
    def external_standards(self, external_standards):
        """Sets the external_standards of this Code.


        :param external_standards: The external_standards of this Code.
        :type external_standards: list[CodeExternalStandard]
        """

        self._external_standards = external_standards

    @property
    def full_description(self):
        """Gets the full_description of this Code.


        :return: The full_description of this Code.
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this Code.


        :param full_description: The full_description of this Code.
        :type full_description: str
        """

        self._full_description = full_description

    @property
    def hide_from_patients(self):
        """Gets the hide_from_patients of this Code.


        :return: The hide_from_patients of this Code.
        :rtype: bool
        """
        return self._hide_from_patients

    @hide_from_patients.setter
    def hide_from_patients(self, hide_from_patients):
        """Sets the hide_from_patients of this Code.


        :param hide_from_patients: The hide_from_patients of this Code.
        :type hide_from_patients: bool
        """

        self._hide_from_patients = hide_from_patients

    @property
    def id(self):
        """Gets the id of this Code.


        :return: The id of this Code.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Code.


        :param id: The id of this Code.
        :type id: int
        """

        self._id = id

    @property
    def last_update(self):
        """Gets the last_update of this Code.


        :return: The last_update of this Code.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Code.


        :param last_update: The last_update of this Code.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def links(self):
        """Gets the links of this Code.


        :return: The links of this Code.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Code.


        :param links: The links of this Code.
        :type links: list[Link]
        """

        self._links = links

    @property
    def patient_friendly_name(self):
        """Gets the patient_friendly_name of this Code.


        :return: The patient_friendly_name of this Code.
        :rtype: str
        """
        return self._patient_friendly_name

    @patient_friendly_name.setter
    def patient_friendly_name(self, patient_friendly_name):
        """Sets the patient_friendly_name of this Code.


        :param patient_friendly_name: The patient_friendly_name of this Code.
        :type patient_friendly_name: str
        """

        self._patient_friendly_name = patient_friendly_name

    @property
    def removed_externally(self):
        """Gets the removed_externally of this Code.


        :return: The removed_externally of this Code.
        :rtype: bool
        """
        return self._removed_externally

    @removed_externally.setter
    def removed_externally(self, removed_externally):
        """Sets the removed_externally of this Code.


        :param removed_externally: The removed_externally of this Code.
        :type removed_externally: bool
        """

        self._removed_externally = removed_externally

    @property
    def source_type(self):
        """Gets the source_type of this Code.


        :return: The source_type of this Code.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Code.


        :param source_type: The source_type of this Code.
        :type source_type: str
        """
        allowed_values = ["PATIENTVIEW", "NHS_CHOICES"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def standard_type(self):
        """Gets the standard_type of this Code.


        :return: The standard_type of this Code.
        :rtype: Lookup
        """
        return self._standard_type

    @standard_type.setter
    def standard_type(self, standard_type):
        """Sets the standard_type of this Code.


        :param standard_type: The standard_type of this Code.
        :type standard_type: Lookup
        """

        self._standard_type = standard_type
