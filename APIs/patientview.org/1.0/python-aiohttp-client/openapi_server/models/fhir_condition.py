# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.link import Link
from openapi_server import util


class FhirCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asserter: str=None, category: str=None, code: str=None, _date: datetime=None, description: str=None, full_description: str=None, group: Group=None, id: int=None, identifier: str=None, links: list[Link]=None, notes: str=None, severity: str=None, status: str=None):
        """FhirCondition - a model defined in OpenAPI

        :param asserter: The asserter of this FhirCondition.
        :param category: The category of this FhirCondition.
        :param code: The code of this FhirCondition.
        :param _date: The _date of this FhirCondition.
        :param description: The description of this FhirCondition.
        :param full_description: The full_description of this FhirCondition.
        :param group: The group of this FhirCondition.
        :param id: The id of this FhirCondition.
        :param identifier: The identifier of this FhirCondition.
        :param links: The links of this FhirCondition.
        :param notes: The notes of this FhirCondition.
        :param severity: The severity of this FhirCondition.
        :param status: The status of this FhirCondition.
        """
        self.openapi_types = {
            'asserter': str,
            'category': str,
            'code': str,
            '_date': datetime,
            'description': str,
            'full_description': str,
            'group': Group,
            'id': int,
            'identifier': str,
            'links': list[Link],
            'notes': str,
            'severity': str,
            'status': str
        }

        self.attribute_map = {
            'asserter': 'asserter',
            'category': 'category',
            'code': 'code',
            '_date': 'date',
            'description': 'description',
            'full_description': 'fullDescription',
            'group': 'group',
            'id': 'id',
            'identifier': 'identifier',
            'links': 'links',
            'notes': 'notes',
            'severity': 'severity',
            'status': 'status'
        }

        self._asserter = asserter
        self._category = category
        self._code = code
        self.__date = _date
        self._description = description
        self._full_description = full_description
        self._group = group
        self._id = id
        self._identifier = identifier
        self._links = links
        self._notes = notes
        self._severity = severity
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirCondition of this FhirCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asserter(self):
        """Gets the asserter of this FhirCondition.


        :return: The asserter of this FhirCondition.
        :rtype: str
        """
        return self._asserter

    @asserter.setter
    def asserter(self, asserter):
        """Sets the asserter of this FhirCondition.


        :param asserter: The asserter of this FhirCondition.
        :type asserter: str
        """

        self._asserter = asserter

    @property
    def category(self):
        """Gets the category of this FhirCondition.


        :return: The category of this FhirCondition.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FhirCondition.


        :param category: The category of this FhirCondition.
        :type category: str
        """

        self._category = category

    @property
    def code(self):
        """Gets the code of this FhirCondition.


        :return: The code of this FhirCondition.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FhirCondition.


        :param code: The code of this FhirCondition.
        :type code: str
        """

        self._code = code

    @property
    def _date(self):
        """Gets the _date of this FhirCondition.


        :return: The _date of this FhirCondition.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this FhirCondition.


        :param _date: The _date of this FhirCondition.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this FhirCondition.


        :return: The description of this FhirCondition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FhirCondition.


        :param description: The description of this FhirCondition.
        :type description: str
        """

        self._description = description

    @property
    def full_description(self):
        """Gets the full_description of this FhirCondition.


        :return: The full_description of this FhirCondition.
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this FhirCondition.


        :param full_description: The full_description of this FhirCondition.
        :type full_description: str
        """

        self._full_description = full_description

    @property
    def group(self):
        """Gets the group of this FhirCondition.


        :return: The group of this FhirCondition.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FhirCondition.


        :param group: The group of this FhirCondition.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this FhirCondition.


        :return: The id of this FhirCondition.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FhirCondition.


        :param id: The id of this FhirCondition.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this FhirCondition.


        :return: The identifier of this FhirCondition.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this FhirCondition.


        :param identifier: The identifier of this FhirCondition.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def links(self):
        """Gets the links of this FhirCondition.


        :return: The links of this FhirCondition.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FhirCondition.


        :param links: The links of this FhirCondition.
        :type links: list[Link]
        """

        self._links = links

    @property
    def notes(self):
        """Gets the notes of this FhirCondition.


        :return: The notes of this FhirCondition.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FhirCondition.


        :param notes: The notes of this FhirCondition.
        :type notes: str
        """

        self._notes = notes

    @property
    def severity(self):
        """Gets the severity of this FhirCondition.


        :return: The severity of this FhirCondition.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this FhirCondition.


        :param severity: The severity of this FhirCondition.
        :type severity: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this FhirCondition.


        :return: The status of this FhirCondition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FhirCondition.


        :param status: The status of this FhirCondition.
        :type status: str
        """

        self._status = status
