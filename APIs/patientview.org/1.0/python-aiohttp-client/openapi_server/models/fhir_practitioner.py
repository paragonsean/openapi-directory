# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fhir_contact import FhirContact
from openapi_server import util


class FhirPractitioner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, address3: str=None, address4: str=None, allow_invite_gp: bool=None, contacts: List[FhirContact]=None, gender: str=None, group_code: str=None, identifier: str=None, invite_date: datetime=None, name: str=None, postcode: str=None, role: str=None):
        """FhirPractitioner - a model defined in OpenAPI

        :param address1: The address1 of this FhirPractitioner.
        :param address2: The address2 of this FhirPractitioner.
        :param address3: The address3 of this FhirPractitioner.
        :param address4: The address4 of this FhirPractitioner.
        :param allow_invite_gp: The allow_invite_gp of this FhirPractitioner.
        :param contacts: The contacts of this FhirPractitioner.
        :param gender: The gender of this FhirPractitioner.
        :param group_code: The group_code of this FhirPractitioner.
        :param identifier: The identifier of this FhirPractitioner.
        :param invite_date: The invite_date of this FhirPractitioner.
        :param name: The name of this FhirPractitioner.
        :param postcode: The postcode of this FhirPractitioner.
        :param role: The role of this FhirPractitioner.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'address3': str,
            'address4': str,
            'allow_invite_gp': bool,
            'contacts': List[FhirContact],
            'gender': str,
            'group_code': str,
            'identifier': str,
            'invite_date': datetime,
            'name': str,
            'postcode': str,
            'role': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'address3': 'address3',
            'address4': 'address4',
            'allow_invite_gp': 'allowInviteGp',
            'contacts': 'contacts',
            'gender': 'gender',
            'group_code': 'groupCode',
            'identifier': 'identifier',
            'invite_date': 'inviteDate',
            'name': 'name',
            'postcode': 'postcode',
            'role': 'role'
        }

        self._address1 = address1
        self._address2 = address2
        self._address3 = address3
        self._address4 = address4
        self._allow_invite_gp = allow_invite_gp
        self._contacts = contacts
        self._gender = gender
        self._group_code = group_code
        self._identifier = identifier
        self._invite_date = invite_date
        self._name = name
        self._postcode = postcode
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirPractitioner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirPractitioner of this FhirPractitioner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this FhirPractitioner.


        :return: The address1 of this FhirPractitioner.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this FhirPractitioner.


        :param address1: The address1 of this FhirPractitioner.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this FhirPractitioner.


        :return: The address2 of this FhirPractitioner.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this FhirPractitioner.


        :param address2: The address2 of this FhirPractitioner.
        :type address2: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this FhirPractitioner.


        :return: The address3 of this FhirPractitioner.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this FhirPractitioner.


        :param address3: The address3 of this FhirPractitioner.
        :type address3: str
        """

        self._address3 = address3

    @property
    def address4(self):
        """Gets the address4 of this FhirPractitioner.


        :return: The address4 of this FhirPractitioner.
        :rtype: str
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """Sets the address4 of this FhirPractitioner.


        :param address4: The address4 of this FhirPractitioner.
        :type address4: str
        """

        self._address4 = address4

    @property
    def allow_invite_gp(self):
        """Gets the allow_invite_gp of this FhirPractitioner.


        :return: The allow_invite_gp of this FhirPractitioner.
        :rtype: bool
        """
        return self._allow_invite_gp

    @allow_invite_gp.setter
    def allow_invite_gp(self, allow_invite_gp):
        """Sets the allow_invite_gp of this FhirPractitioner.


        :param allow_invite_gp: The allow_invite_gp of this FhirPractitioner.
        :type allow_invite_gp: bool
        """

        self._allow_invite_gp = allow_invite_gp

    @property
    def contacts(self):
        """Gets the contacts of this FhirPractitioner.


        :return: The contacts of this FhirPractitioner.
        :rtype: List[FhirContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this FhirPractitioner.


        :param contacts: The contacts of this FhirPractitioner.
        :type contacts: List[FhirContact]
        """

        self._contacts = contacts

    @property
    def gender(self):
        """Gets the gender of this FhirPractitioner.


        :return: The gender of this FhirPractitioner.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FhirPractitioner.


        :param gender: The gender of this FhirPractitioner.
        :type gender: str
        """

        self._gender = gender

    @property
    def group_code(self):
        """Gets the group_code of this FhirPractitioner.


        :return: The group_code of this FhirPractitioner.
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this FhirPractitioner.


        :param group_code: The group_code of this FhirPractitioner.
        :type group_code: str
        """

        self._group_code = group_code

    @property
    def identifier(self):
        """Gets the identifier of this FhirPractitioner.


        :return: The identifier of this FhirPractitioner.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this FhirPractitioner.


        :param identifier: The identifier of this FhirPractitioner.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def invite_date(self):
        """Gets the invite_date of this FhirPractitioner.


        :return: The invite_date of this FhirPractitioner.
        :rtype: datetime
        """
        return self._invite_date

    @invite_date.setter
    def invite_date(self, invite_date):
        """Sets the invite_date of this FhirPractitioner.


        :param invite_date: The invite_date of this FhirPractitioner.
        :type invite_date: datetime
        """

        self._invite_date = invite_date

    @property
    def name(self):
        """Gets the name of this FhirPractitioner.


        :return: The name of this FhirPractitioner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FhirPractitioner.


        :param name: The name of this FhirPractitioner.
        :type name: str
        """

        self._name = name

    @property
    def postcode(self):
        """Gets the postcode of this FhirPractitioner.


        :return: The postcode of this FhirPractitioner.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this FhirPractitioner.


        :param postcode: The postcode of this FhirPractitioner.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def role(self):
        """Gets the role of this FhirPractitioner.


        :return: The role of this FhirPractitioner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this FhirPractitioner.


        :param role: The role of this FhirPractitioner.
        :type role: str
        """

        self._role = role
