# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server import util


class ObservationHeadingGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, group: Group=None, id: int=None, panel: int=None, panel_order: int=None):
        """ObservationHeadingGroup - a model defined in OpenAPI

        :param created: The created of this ObservationHeadingGroup.
        :param group: The group of this ObservationHeadingGroup.
        :param id: The id of this ObservationHeadingGroup.
        :param panel: The panel of this ObservationHeadingGroup.
        :param panel_order: The panel_order of this ObservationHeadingGroup.
        """
        self.openapi_types = {
            'created': datetime,
            'group': Group,
            'id': int,
            'panel': int,
            'panel_order': int
        }

        self.attribute_map = {
            'created': 'created',
            'group': 'group',
            'id': 'id',
            'panel': 'panel',
            'panel_order': 'panelOrder'
        }

        self._created = created
        self._group = group
        self._id = id
        self._panel = panel
        self._panel_order = panel_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObservationHeadingGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObservationHeadingGroup of this ObservationHeadingGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ObservationHeadingGroup.


        :return: The created of this ObservationHeadingGroup.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ObservationHeadingGroup.


        :param created: The created of this ObservationHeadingGroup.
        :type created: datetime
        """

        self._created = created

    @property
    def group(self):
        """Gets the group of this ObservationHeadingGroup.


        :return: The group of this ObservationHeadingGroup.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ObservationHeadingGroup.


        :param group: The group of this ObservationHeadingGroup.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this ObservationHeadingGroup.


        :return: The id of this ObservationHeadingGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObservationHeadingGroup.


        :param id: The id of this ObservationHeadingGroup.
        :type id: int
        """

        self._id = id

    @property
    def panel(self):
        """Gets the panel of this ObservationHeadingGroup.


        :return: The panel of this ObservationHeadingGroup.
        :rtype: int
        """
        return self._panel

    @panel.setter
    def panel(self, panel):
        """Sets the panel of this ObservationHeadingGroup.


        :param panel: The panel of this ObservationHeadingGroup.
        :type panel: int
        """

        self._panel = panel

    @property
    def panel_order(self):
        """Gets the panel_order of this ObservationHeadingGroup.


        :return: The panel_order of this ObservationHeadingGroup.
        :rtype: int
        """
        return self._panel_order

    @panel_order.setter
    def panel_order(self, panel_order):
        """Sets the panel_order of this ObservationHeadingGroup.


        :param panel_order: The panel_order of this ObservationHeadingGroup.
        :type panel_order: int
        """

        self._panel_order = panel_order
