# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lookup_type import LookupType
from openapi_server import util


class ContactPointType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, lookup_type: LookupType=None, value: str=None):
        """ContactPointType - a model defined in OpenAPI

        :param description: The description of this ContactPointType.
        :param id: The id of this ContactPointType.
        :param lookup_type: The lookup_type of this ContactPointType.
        :param value: The value of this ContactPointType.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'lookup_type': LookupType,
            'value': str
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'lookup_type': 'lookupType',
            'value': 'value'
        }

        self._description = description
        self._id = id
        self._lookup_type = lookup_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactPointType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactPointType of this ContactPointType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ContactPointType.


        :return: The description of this ContactPointType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContactPointType.


        :param description: The description of this ContactPointType.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ContactPointType.


        :return: The id of this ContactPointType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactPointType.


        :param id: The id of this ContactPointType.
        :type id: int
        """

        self._id = id

    @property
    def lookup_type(self):
        """Gets the lookup_type of this ContactPointType.


        :return: The lookup_type of this ContactPointType.
        :rtype: LookupType
        """
        return self._lookup_type

    @lookup_type.setter
    def lookup_type(self, lookup_type):
        """Sets the lookup_type of this ContactPointType.


        :param lookup_type: The lookup_type of this ContactPointType.
        :type lookup_type: LookupType
        """

        self._lookup_type = lookup_type

    @property
    def value(self):
        """Gets the value of this ContactPointType.


        :return: The value of this ContactPointType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContactPointType.


        :param value: The value of this ContactPointType.
        :type value: str
        """
        allowed_values = ["UNIT_WEB_ADDRESS", "TRUST_WEB_ADDRESS", "PV_ADMIN_NAME", "PV_ADMIN_PHONE", "PV_ADMIN_EMAIL", "UNIT_ENQUIRIES_PHONE", "UNIT_ENQUIRIES_EMAIL", "APPOINTMENT_PHONE", "APPOINTMENT_EMAIL", "OUT_OF_HOURS_INFO"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
