# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LookupType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, id: int=None, last_update: datetime=None, type: str=None):
        """LookupType - a model defined in OpenAPI

        :param created: The created of this LookupType.
        :param description: The description of this LookupType.
        :param id: The id of this LookupType.
        :param last_update: The last_update of this LookupType.
        :param type: The type of this LookupType.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'id': int,
            'last_update': datetime,
            'type': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'id': 'id',
            'last_update': 'lastUpdate',
            'type': 'type'
        }

        self._created = created
        self._description = description
        self._id = id
        self._last_update = last_update
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LookupType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LookupType of this LookupType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this LookupType.


        :return: The created of this LookupType.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LookupType.


        :param created: The created of this LookupType.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this LookupType.


        :return: The description of this LookupType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LookupType.


        :param description: The description of this LookupType.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this LookupType.


        :return: The id of this LookupType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LookupType.


        :param id: The id of this LookupType.
        :type id: int
        """

        self._id = id

    @property
    def last_update(self):
        """Gets the last_update of this LookupType.


        :return: The last_update of this LookupType.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this LookupType.


        :param last_update: The last_update of this LookupType.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def type(self):
        """Gets the type of this LookupType.


        :return: The type of this LookupType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LookupType.


        :param type: The type of this LookupType.
        :type type: str
        """
        allowed_values = ["GROUP", "MENU", "ROLE", "CODE_STANDARD", "CODE_TYPE", "FEATURE_TYPE", "RELATIONSHIP_TYPE", "IDENTIFIER", "CONTACT_POINT_TYPE", "STATISTIC_TYPE", "NEWS_TYPE", "GENDER", "IBD_CROHNSLOCATION", "IBD_CROHNSPROXIMALTERMINALILEUM", "IBD_CROHNSPERIANAL", "IBD_CROHNSBEHAVIOUR", "IBD_UCEXTENT", "IBD_EGIMCOMPLICATION", "IBD_SURGERYMAINPROCEDURE", "IBD_SMOKINGSTATUS", "IBD_FAMILYHISTORY", "LINK_TYPE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
