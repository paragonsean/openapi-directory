# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lookup_type import LookupType
from openapi_server import util


class Lookup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, description_friendly: str=None, display_order: int=None, id: int=None, last_update: datetime=None, lookup_type: LookupType=None, value: str=None):
        """Lookup - a model defined in OpenAPI

        :param created: The created of this Lookup.
        :param description: The description of this Lookup.
        :param description_friendly: The description_friendly of this Lookup.
        :param display_order: The display_order of this Lookup.
        :param id: The id of this Lookup.
        :param last_update: The last_update of this Lookup.
        :param lookup_type: The lookup_type of this Lookup.
        :param value: The value of this Lookup.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'description_friendly': str,
            'display_order': int,
            'id': int,
            'last_update': datetime,
            'lookup_type': LookupType,
            'value': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'description_friendly': 'descriptionFriendly',
            'display_order': 'displayOrder',
            'id': 'id',
            'last_update': 'lastUpdate',
            'lookup_type': 'lookupType',
            'value': 'value'
        }

        self._created = created
        self._description = description
        self._description_friendly = description_friendly
        self._display_order = display_order
        self._id = id
        self._last_update = last_update
        self._lookup_type = lookup_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Lookup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Lookup of this Lookup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Lookup.


        :return: The created of this Lookup.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Lookup.


        :param created: The created of this Lookup.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Lookup.


        :return: The description of this Lookup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Lookup.


        :param description: The description of this Lookup.
        :type description: str
        """

        self._description = description

    @property
    def description_friendly(self):
        """Gets the description_friendly of this Lookup.


        :return: The description_friendly of this Lookup.
        :rtype: str
        """
        return self._description_friendly

    @description_friendly.setter
    def description_friendly(self, description_friendly):
        """Sets the description_friendly of this Lookup.


        :param description_friendly: The description_friendly of this Lookup.
        :type description_friendly: str
        """

        self._description_friendly = description_friendly

    @property
    def display_order(self):
        """Gets the display_order of this Lookup.


        :return: The display_order of this Lookup.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Lookup.


        :param display_order: The display_order of this Lookup.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def id(self):
        """Gets the id of this Lookup.


        :return: The id of this Lookup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lookup.


        :param id: The id of this Lookup.
        :type id: int
        """

        self._id = id

    @property
    def last_update(self):
        """Gets the last_update of this Lookup.


        :return: The last_update of this Lookup.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Lookup.


        :param last_update: The last_update of this Lookup.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def lookup_type(self):
        """Gets the lookup_type of this Lookup.


        :return: The lookup_type of this Lookup.
        :rtype: LookupType
        """
        return self._lookup_type

    @lookup_type.setter
    def lookup_type(self, lookup_type):
        """Sets the lookup_type of this Lookup.


        :param lookup_type: The lookup_type of this Lookup.
        :type lookup_type: LookupType
        """

        self._lookup_type = lookup_type

    @property
    def value(self):
        """Gets the value of this Lookup.


        :return: The value of this Lookup.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Lookup.


        :param value: The value of this Lookup.
        :type value: str
        """

        self._value = value
