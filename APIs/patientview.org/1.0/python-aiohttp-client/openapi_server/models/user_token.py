# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_group import BaseGroup
from openapi_server.models.external_standard import ExternalStandard
from openapi_server.models.feature import Feature
from openapi_server.models.role import Role
from openapi_server.models.route import Route
from openapi_server.models.user import User
from openapi_server import util


class UserToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_actions: List[str]=None, check_secret_word: bool=None, created: datetime=None, expiration: datetime=None, external_standards: List[ExternalStandard]=None, group_features: List[Feature]=None, group_messaging_enabled: bool=None, must_set_secret_word: bool=None, patient_features: List[Feature]=None, patient_messaging_feature_types: List[str]=None, patient_roles: List[Role]=None, routes: list[Route]=None, secret_word: str=None, secret_word_choices: object=None, secret_word_indexes: List[str]=None, secret_word_salt: str=None, secret_word_token: str=None, security_roles: List[Role]=None, should_enter_condition: bool=None, staff_features: List[Feature]=None, staff_roles: List[Role]=None, token: str=None, user: User=None, user_features: List[Feature]=None, user_groups: List[BaseGroup]=None):
        """UserToken - a model defined in OpenAPI

        :param audit_actions: The audit_actions of this UserToken.
        :param check_secret_word: The check_secret_word of this UserToken.
        :param created: The created of this UserToken.
        :param expiration: The expiration of this UserToken.
        :param external_standards: The external_standards of this UserToken.
        :param group_features: The group_features of this UserToken.
        :param group_messaging_enabled: The group_messaging_enabled of this UserToken.
        :param must_set_secret_word: The must_set_secret_word of this UserToken.
        :param patient_features: The patient_features of this UserToken.
        :param patient_messaging_feature_types: The patient_messaging_feature_types of this UserToken.
        :param patient_roles: The patient_roles of this UserToken.
        :param routes: The routes of this UserToken.
        :param secret_word: The secret_word of this UserToken.
        :param secret_word_choices: The secret_word_choices of this UserToken.
        :param secret_word_indexes: The secret_word_indexes of this UserToken.
        :param secret_word_salt: The secret_word_salt of this UserToken.
        :param secret_word_token: The secret_word_token of this UserToken.
        :param security_roles: The security_roles of this UserToken.
        :param should_enter_condition: The should_enter_condition of this UserToken.
        :param staff_features: The staff_features of this UserToken.
        :param staff_roles: The staff_roles of this UserToken.
        :param token: The token of this UserToken.
        :param user: The user of this UserToken.
        :param user_features: The user_features of this UserToken.
        :param user_groups: The user_groups of this UserToken.
        """
        self.openapi_types = {
            'audit_actions': List[str],
            'check_secret_word': bool,
            'created': datetime,
            'expiration': datetime,
            'external_standards': List[ExternalStandard],
            'group_features': List[Feature],
            'group_messaging_enabled': bool,
            'must_set_secret_word': bool,
            'patient_features': List[Feature],
            'patient_messaging_feature_types': List[str],
            'patient_roles': List[Role],
            'routes': list[Route],
            'secret_word': str,
            'secret_word_choices': object,
            'secret_word_indexes': List[str],
            'secret_word_salt': str,
            'secret_word_token': str,
            'security_roles': List[Role],
            'should_enter_condition': bool,
            'staff_features': List[Feature],
            'staff_roles': List[Role],
            'token': str,
            'user': User,
            'user_features': List[Feature],
            'user_groups': List[BaseGroup]
        }

        self.attribute_map = {
            'audit_actions': 'auditActions',
            'check_secret_word': 'checkSecretWord',
            'created': 'created',
            'expiration': 'expiration',
            'external_standards': 'externalStandards',
            'group_features': 'groupFeatures',
            'group_messaging_enabled': 'groupMessagingEnabled',
            'must_set_secret_word': 'mustSetSecretWord',
            'patient_features': 'patientFeatures',
            'patient_messaging_feature_types': 'patientMessagingFeatureTypes',
            'patient_roles': 'patientRoles',
            'routes': 'routes',
            'secret_word': 'secretWord',
            'secret_word_choices': 'secretWordChoices',
            'secret_word_indexes': 'secretWordIndexes',
            'secret_word_salt': 'secretWordSalt',
            'secret_word_token': 'secretWordToken',
            'security_roles': 'securityRoles',
            'should_enter_condition': 'shouldEnterCondition',
            'staff_features': 'staffFeatures',
            'staff_roles': 'staffRoles',
            'token': 'token',
            'user': 'user',
            'user_features': 'userFeatures',
            'user_groups': 'userGroups'
        }

        self._audit_actions = audit_actions
        self._check_secret_word = check_secret_word
        self._created = created
        self._expiration = expiration
        self._external_standards = external_standards
        self._group_features = group_features
        self._group_messaging_enabled = group_messaging_enabled
        self._must_set_secret_word = must_set_secret_word
        self._patient_features = patient_features
        self._patient_messaging_feature_types = patient_messaging_feature_types
        self._patient_roles = patient_roles
        self._routes = routes
        self._secret_word = secret_word
        self._secret_word_choices = secret_word_choices
        self._secret_word_indexes = secret_word_indexes
        self._secret_word_salt = secret_word_salt
        self._secret_word_token = secret_word_token
        self._security_roles = security_roles
        self._should_enter_condition = should_enter_condition
        self._staff_features = staff_features
        self._staff_roles = staff_roles
        self._token = token
        self._user = user
        self._user_features = user_features
        self._user_groups = user_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserToken of this UserToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_actions(self):
        """Gets the audit_actions of this UserToken.


        :return: The audit_actions of this UserToken.
        :rtype: List[str]
        """
        return self._audit_actions

    @audit_actions.setter
    def audit_actions(self, audit_actions):
        """Sets the audit_actions of this UserToken.


        :param audit_actions: The audit_actions of this UserToken.
        :type audit_actions: List[str]
        """

        self._audit_actions = audit_actions

    @property
    def check_secret_word(self):
        """Gets the check_secret_word of this UserToken.


        :return: The check_secret_word of this UserToken.
        :rtype: bool
        """
        return self._check_secret_word

    @check_secret_word.setter
    def check_secret_word(self, check_secret_word):
        """Sets the check_secret_word of this UserToken.


        :param check_secret_word: The check_secret_word of this UserToken.
        :type check_secret_word: bool
        """

        self._check_secret_word = check_secret_word

    @property
    def created(self):
        """Gets the created of this UserToken.


        :return: The created of this UserToken.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserToken.


        :param created: The created of this UserToken.
        :type created: datetime
        """

        self._created = created

    @property
    def expiration(self):
        """Gets the expiration of this UserToken.


        :return: The expiration of this UserToken.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this UserToken.


        :param expiration: The expiration of this UserToken.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def external_standards(self):
        """Gets the external_standards of this UserToken.


        :return: The external_standards of this UserToken.
        :rtype: List[ExternalStandard]
        """
        return self._external_standards

    @external_standards.setter
    def external_standards(self, external_standards):
        """Sets the external_standards of this UserToken.


        :param external_standards: The external_standards of this UserToken.
        :type external_standards: List[ExternalStandard]
        """

        self._external_standards = external_standards

    @property
    def group_features(self):
        """Gets the group_features of this UserToken.


        :return: The group_features of this UserToken.
        :rtype: List[Feature]
        """
        return self._group_features

    @group_features.setter
    def group_features(self, group_features):
        """Sets the group_features of this UserToken.


        :param group_features: The group_features of this UserToken.
        :type group_features: List[Feature]
        """

        self._group_features = group_features

    @property
    def group_messaging_enabled(self):
        """Gets the group_messaging_enabled of this UserToken.


        :return: The group_messaging_enabled of this UserToken.
        :rtype: bool
        """
        return self._group_messaging_enabled

    @group_messaging_enabled.setter
    def group_messaging_enabled(self, group_messaging_enabled):
        """Sets the group_messaging_enabled of this UserToken.


        :param group_messaging_enabled: The group_messaging_enabled of this UserToken.
        :type group_messaging_enabled: bool
        """

        self._group_messaging_enabled = group_messaging_enabled

    @property
    def must_set_secret_word(self):
        """Gets the must_set_secret_word of this UserToken.


        :return: The must_set_secret_word of this UserToken.
        :rtype: bool
        """
        return self._must_set_secret_word

    @must_set_secret_word.setter
    def must_set_secret_word(self, must_set_secret_word):
        """Sets the must_set_secret_word of this UserToken.


        :param must_set_secret_word: The must_set_secret_word of this UserToken.
        :type must_set_secret_word: bool
        """

        self._must_set_secret_word = must_set_secret_word

    @property
    def patient_features(self):
        """Gets the patient_features of this UserToken.


        :return: The patient_features of this UserToken.
        :rtype: List[Feature]
        """
        return self._patient_features

    @patient_features.setter
    def patient_features(self, patient_features):
        """Sets the patient_features of this UserToken.


        :param patient_features: The patient_features of this UserToken.
        :type patient_features: List[Feature]
        """

        self._patient_features = patient_features

    @property
    def patient_messaging_feature_types(self):
        """Gets the patient_messaging_feature_types of this UserToken.


        :return: The patient_messaging_feature_types of this UserToken.
        :rtype: List[str]
        """
        return self._patient_messaging_feature_types

    @patient_messaging_feature_types.setter
    def patient_messaging_feature_types(self, patient_messaging_feature_types):
        """Sets the patient_messaging_feature_types of this UserToken.


        :param patient_messaging_feature_types: The patient_messaging_feature_types of this UserToken.
        :type patient_messaging_feature_types: List[str]
        """

        self._patient_messaging_feature_types = patient_messaging_feature_types

    @property
    def patient_roles(self):
        """Gets the patient_roles of this UserToken.


        :return: The patient_roles of this UserToken.
        :rtype: List[Role]
        """
        return self._patient_roles

    @patient_roles.setter
    def patient_roles(self, patient_roles):
        """Sets the patient_roles of this UserToken.


        :param patient_roles: The patient_roles of this UserToken.
        :type patient_roles: List[Role]
        """

        self._patient_roles = patient_roles

    @property
    def routes(self):
        """Gets the routes of this UserToken.


        :return: The routes of this UserToken.
        :rtype: list[Route]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this UserToken.


        :param routes: The routes of this UserToken.
        :type routes: list[Route]
        """

        self._routes = routes

    @property
    def secret_word(self):
        """Gets the secret_word of this UserToken.


        :return: The secret_word of this UserToken.
        :rtype: str
        """
        return self._secret_word

    @secret_word.setter
    def secret_word(self, secret_word):
        """Sets the secret_word of this UserToken.


        :param secret_word: The secret_word of this UserToken.
        :type secret_word: str
        """

        self._secret_word = secret_word

    @property
    def secret_word_choices(self):
        """Gets the secret_word_choices of this UserToken.


        :return: The secret_word_choices of this UserToken.
        :rtype: object
        """
        return self._secret_word_choices

    @secret_word_choices.setter
    def secret_word_choices(self, secret_word_choices):
        """Sets the secret_word_choices of this UserToken.


        :param secret_word_choices: The secret_word_choices of this UserToken.
        :type secret_word_choices: object
        """

        self._secret_word_choices = secret_word_choices

    @property
    def secret_word_indexes(self):
        """Gets the secret_word_indexes of this UserToken.


        :return: The secret_word_indexes of this UserToken.
        :rtype: List[str]
        """
        return self._secret_word_indexes

    @secret_word_indexes.setter
    def secret_word_indexes(self, secret_word_indexes):
        """Sets the secret_word_indexes of this UserToken.


        :param secret_word_indexes: The secret_word_indexes of this UserToken.
        :type secret_word_indexes: List[str]
        """

        self._secret_word_indexes = secret_word_indexes

    @property
    def secret_word_salt(self):
        """Gets the secret_word_salt of this UserToken.


        :return: The secret_word_salt of this UserToken.
        :rtype: str
        """
        return self._secret_word_salt

    @secret_word_salt.setter
    def secret_word_salt(self, secret_word_salt):
        """Sets the secret_word_salt of this UserToken.


        :param secret_word_salt: The secret_word_salt of this UserToken.
        :type secret_word_salt: str
        """

        self._secret_word_salt = secret_word_salt

    @property
    def secret_word_token(self):
        """Gets the secret_word_token of this UserToken.


        :return: The secret_word_token of this UserToken.
        :rtype: str
        """
        return self._secret_word_token

    @secret_word_token.setter
    def secret_word_token(self, secret_word_token):
        """Sets the secret_word_token of this UserToken.


        :param secret_word_token: The secret_word_token of this UserToken.
        :type secret_word_token: str
        """

        self._secret_word_token = secret_word_token

    @property
    def security_roles(self):
        """Gets the security_roles of this UserToken.


        :return: The security_roles of this UserToken.
        :rtype: List[Role]
        """
        return self._security_roles

    @security_roles.setter
    def security_roles(self, security_roles):
        """Sets the security_roles of this UserToken.


        :param security_roles: The security_roles of this UserToken.
        :type security_roles: List[Role]
        """

        self._security_roles = security_roles

    @property
    def should_enter_condition(self):
        """Gets the should_enter_condition of this UserToken.


        :return: The should_enter_condition of this UserToken.
        :rtype: bool
        """
        return self._should_enter_condition

    @should_enter_condition.setter
    def should_enter_condition(self, should_enter_condition):
        """Sets the should_enter_condition of this UserToken.


        :param should_enter_condition: The should_enter_condition of this UserToken.
        :type should_enter_condition: bool
        """

        self._should_enter_condition = should_enter_condition

    @property
    def staff_features(self):
        """Gets the staff_features of this UserToken.


        :return: The staff_features of this UserToken.
        :rtype: List[Feature]
        """
        return self._staff_features

    @staff_features.setter
    def staff_features(self, staff_features):
        """Sets the staff_features of this UserToken.


        :param staff_features: The staff_features of this UserToken.
        :type staff_features: List[Feature]
        """

        self._staff_features = staff_features

    @property
    def staff_roles(self):
        """Gets the staff_roles of this UserToken.


        :return: The staff_roles of this UserToken.
        :rtype: List[Role]
        """
        return self._staff_roles

    @staff_roles.setter
    def staff_roles(self, staff_roles):
        """Sets the staff_roles of this UserToken.


        :param staff_roles: The staff_roles of this UserToken.
        :type staff_roles: List[Role]
        """

        self._staff_roles = staff_roles

    @property
    def token(self):
        """Gets the token of this UserToken.


        :return: The token of this UserToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserToken.


        :param token: The token of this UserToken.
        :type token: str
        """

        self._token = token

    @property
    def user(self):
        """Gets the user of this UserToken.


        :return: The user of this UserToken.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserToken.


        :param user: The user of this UserToken.
        :type user: User
        """

        self._user = user

    @property
    def user_features(self):
        """Gets the user_features of this UserToken.


        :return: The user_features of this UserToken.
        :rtype: List[Feature]
        """
        return self._user_features

    @user_features.setter
    def user_features(self, user_features):
        """Sets the user_features of this UserToken.


        :param user_features: The user_features of this UserToken.
        :type user_features: List[Feature]
        """

        self._user_features = user_features

    @property
    def user_groups(self):
        """Gets the user_groups of this UserToken.


        :return: The user_groups of this UserToken.
        :rtype: List[BaseGroup]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this UserToken.


        :param user_groups: The user_groups of this UserToken.
        :type user_groups: List[BaseGroup]
        """

        self._user_groups = user_groups
