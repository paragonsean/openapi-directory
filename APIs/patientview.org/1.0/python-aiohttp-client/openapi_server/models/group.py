# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_point import ContactPoint
from openapi_server.models.group_feature import GroupFeature
from openapi_server.models.link import Link
from openapi_server.models.location import Location
from openapi_server.models.lookup import Lookup
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, address3: str=None, child_groups: List[Group]=None, code: str=None, contact_points: list[ContactPoint]=None, created: datetime=None, fhir_resource_id: object=None, group_features: list[GroupFeature]=None, group_type: Lookup=None, id: int=None, last_import_date: datetime=None, last_update: datetime=None, links: list[Link]=None, locations: list[Location]=None, name: str=None, parent_groups: List[Group]=None, postcode: str=None, sftp_user: str=None, short_name: str=None, visible: bool=None, visible_to_join: bool=None):
        """Group - a model defined in OpenAPI

        :param address1: The address1 of this Group.
        :param address2: The address2 of this Group.
        :param address3: The address3 of this Group.
        :param child_groups: The child_groups of this Group.
        :param code: The code of this Group.
        :param contact_points: The contact_points of this Group.
        :param created: The created of this Group.
        :param fhir_resource_id: The fhir_resource_id of this Group.
        :param group_features: The group_features of this Group.
        :param group_type: The group_type of this Group.
        :param id: The id of this Group.
        :param last_import_date: The last_import_date of this Group.
        :param last_update: The last_update of this Group.
        :param links: The links of this Group.
        :param locations: The locations of this Group.
        :param name: The name of this Group.
        :param parent_groups: The parent_groups of this Group.
        :param postcode: The postcode of this Group.
        :param sftp_user: The sftp_user of this Group.
        :param short_name: The short_name of this Group.
        :param visible: The visible of this Group.
        :param visible_to_join: The visible_to_join of this Group.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'address3': str,
            'child_groups': List[Group],
            'code': str,
            'contact_points': list[ContactPoint],
            'created': datetime,
            'fhir_resource_id': object,
            'group_features': list[GroupFeature],
            'group_type': Lookup,
            'id': int,
            'last_import_date': datetime,
            'last_update': datetime,
            'links': list[Link],
            'locations': list[Location],
            'name': str,
            'parent_groups': List[Group],
            'postcode': str,
            'sftp_user': str,
            'short_name': str,
            'visible': bool,
            'visible_to_join': bool
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'address3': 'address3',
            'child_groups': 'childGroups',
            'code': 'code',
            'contact_points': 'contactPoints',
            'created': 'created',
            'fhir_resource_id': 'fhirResourceId',
            'group_features': 'groupFeatures',
            'group_type': 'groupType',
            'id': 'id',
            'last_import_date': 'lastImportDate',
            'last_update': 'lastUpdate',
            'links': 'links',
            'locations': 'locations',
            'name': 'name',
            'parent_groups': 'parentGroups',
            'postcode': 'postcode',
            'sftp_user': 'sftpUser',
            'short_name': 'shortName',
            'visible': 'visible',
            'visible_to_join': 'visibleToJoin'
        }

        self._address1 = address1
        self._address2 = address2
        self._address3 = address3
        self._child_groups = child_groups
        self._code = code
        self._contact_points = contact_points
        self._created = created
        self._fhir_resource_id = fhir_resource_id
        self._group_features = group_features
        self._group_type = group_type
        self._id = id
        self._last_import_date = last_import_date
        self._last_update = last_update
        self._links = links
        self._locations = locations
        self._name = name
        self._parent_groups = parent_groups
        self._postcode = postcode
        self._sftp_user = sftp_user
        self._short_name = short_name
        self._visible = visible
        self._visible_to_join = visible_to_join

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this Group.


        :return: The address1 of this Group.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Group.


        :param address1: The address1 of this Group.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Group.


        :return: The address2 of this Group.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Group.


        :param address2: The address2 of this Group.
        :type address2: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this Group.


        :return: The address3 of this Group.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this Group.


        :param address3: The address3 of this Group.
        :type address3: str
        """

        self._address3 = address3

    @property
    def child_groups(self):
        """Gets the child_groups of this Group.


        :return: The child_groups of this Group.
        :rtype: List[Group]
        """
        return self._child_groups

    @child_groups.setter
    def child_groups(self, child_groups):
        """Sets the child_groups of this Group.


        :param child_groups: The child_groups of this Group.
        :type child_groups: List[Group]
        """

        self._child_groups = child_groups

    @property
    def code(self):
        """Gets the code of this Group.


        :return: The code of this Group.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Group.


        :param code: The code of this Group.
        :type code: str
        """

        self._code = code

    @property
    def contact_points(self):
        """Gets the contact_points of this Group.


        :return: The contact_points of this Group.
        :rtype: list[ContactPoint]
        """
        return self._contact_points

    @contact_points.setter
    def contact_points(self, contact_points):
        """Sets the contact_points of this Group.


        :param contact_points: The contact_points of this Group.
        :type contact_points: list[ContactPoint]
        """

        self._contact_points = contact_points

    @property
    def created(self):
        """Gets the created of this Group.


        :return: The created of this Group.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Group.


        :param created: The created of this Group.
        :type created: datetime
        """

        self._created = created

    @property
    def fhir_resource_id(self):
        """Gets the fhir_resource_id of this Group.


        :return: The fhir_resource_id of this Group.
        :rtype: object
        """
        return self._fhir_resource_id

    @fhir_resource_id.setter
    def fhir_resource_id(self, fhir_resource_id):
        """Sets the fhir_resource_id of this Group.


        :param fhir_resource_id: The fhir_resource_id of this Group.
        :type fhir_resource_id: object
        """

        self._fhir_resource_id = fhir_resource_id

    @property
    def group_features(self):
        """Gets the group_features of this Group.


        :return: The group_features of this Group.
        :rtype: list[GroupFeature]
        """
        return self._group_features

    @group_features.setter
    def group_features(self, group_features):
        """Sets the group_features of this Group.


        :param group_features: The group_features of this Group.
        :type group_features: list[GroupFeature]
        """

        self._group_features = group_features

    @property
    def group_type(self):
        """Gets the group_type of this Group.


        :return: The group_type of this Group.
        :rtype: Lookup
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this Group.


        :param group_type: The group_type of this Group.
        :type group_type: Lookup
        """

        self._group_type = group_type

    @property
    def id(self):
        """Gets the id of this Group.


        :return: The id of this Group.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.
        :type id: int
        """

        self._id = id

    @property
    def last_import_date(self):
        """Gets the last_import_date of this Group.


        :return: The last_import_date of this Group.
        :rtype: datetime
        """
        return self._last_import_date

    @last_import_date.setter
    def last_import_date(self, last_import_date):
        """Sets the last_import_date of this Group.


        :param last_import_date: The last_import_date of this Group.
        :type last_import_date: datetime
        """

        self._last_import_date = last_import_date

    @property
    def last_update(self):
        """Gets the last_update of this Group.


        :return: The last_update of this Group.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Group.


        :param last_update: The last_update of this Group.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def links(self):
        """Gets the links of this Group.


        :return: The links of this Group.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Group.


        :param links: The links of this Group.
        :type links: list[Link]
        """

        self._links = links

    @property
    def locations(self):
        """Gets the locations of this Group.


        :return: The locations of this Group.
        :rtype: list[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Group.


        :param locations: The locations of this Group.
        :type locations: list[Location]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this Group.


        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def parent_groups(self):
        """Gets the parent_groups of this Group.


        :return: The parent_groups of this Group.
        :rtype: List[Group]
        """
        return self._parent_groups

    @parent_groups.setter
    def parent_groups(self, parent_groups):
        """Sets the parent_groups of this Group.


        :param parent_groups: The parent_groups of this Group.
        :type parent_groups: List[Group]
        """

        self._parent_groups = parent_groups

    @property
    def postcode(self):
        """Gets the postcode of this Group.


        :return: The postcode of this Group.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Group.


        :param postcode: The postcode of this Group.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def sftp_user(self):
        """Gets the sftp_user of this Group.


        :return: The sftp_user of this Group.
        :rtype: str
        """
        return self._sftp_user

    @sftp_user.setter
    def sftp_user(self, sftp_user):
        """Sets the sftp_user of this Group.


        :param sftp_user: The sftp_user of this Group.
        :type sftp_user: str
        """

        self._sftp_user = sftp_user

    @property
    def short_name(self):
        """Gets the short_name of this Group.


        :return: The short_name of this Group.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Group.


        :param short_name: The short_name of this Group.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def visible(self):
        """Gets the visible of this Group.


        :return: The visible of this Group.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Group.


        :param visible: The visible of this Group.
        :type visible: bool
        """

        self._visible = visible

    @property
    def visible_to_join(self):
        """Gets the visible_to_join of this Group.


        :return: The visible_to_join of this Group.
        :rtype: bool
        """
        return self._visible_to_join

    @visible_to_join.setter
    def visible_to_join(self, visible_to_join):
        """Sets the visible_to_join of this Group.


        :param visible_to_join: The visible_to_join of this Group.
        :type visible_to_join: bool
        """

        self._visible_to_join = visible_to_join
