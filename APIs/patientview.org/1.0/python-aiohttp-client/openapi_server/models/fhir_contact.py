# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FhirContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, system: str=None, use: str=None, value: str=None):
        """FhirContact - a model defined in OpenAPI

        :param id: The id of this FhirContact.
        :param system: The system of this FhirContact.
        :param use: The use of this FhirContact.
        :param value: The value of this FhirContact.
        """
        self.openapi_types = {
            'id': int,
            'system': str,
            'use': str,
            'value': str
        }

        self.attribute_map = {
            'id': 'id',
            'system': 'system',
            'use': 'use',
            'value': 'value'
        }

        self._id = id
        self._system = system
        self._use = use
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirContact of this FhirContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FhirContact.


        :return: The id of this FhirContact.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FhirContact.


        :param id: The id of this FhirContact.
        :type id: int
        """

        self._id = id

    @property
    def system(self):
        """Gets the system of this FhirContact.


        :return: The system of this FhirContact.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this FhirContact.


        :param system: The system of this FhirContact.
        :type system: str
        """

        self._system = system

    @property
    def use(self):
        """Gets the use of this FhirContact.


        :return: The use of this FhirContact.
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this FhirContact.


        :param use: The use of this FhirContact.
        :type use: str
        """

        self._use = use

    @property
    def value(self):
        """Gets the value of this FhirContact.


        :return: The value of this FhirContact.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FhirContact.


        :param value: The value of this FhirContact.
        :type value: str
        """

        self._value = value
