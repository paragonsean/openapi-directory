# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server import util


class FhirObservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applies: datetime=None, body_site: str=None, comments: str=None, comparator: str=None, diagram: str=None, group: Group=None, id: int=None, identifier: str=None, location: str=None, name: str=None, temporary_uuid: str=None, units: str=None, value: str=None):
        """FhirObservation - a model defined in OpenAPI

        :param applies: The applies of this FhirObservation.
        :param body_site: The body_site of this FhirObservation.
        :param comments: The comments of this FhirObservation.
        :param comparator: The comparator of this FhirObservation.
        :param diagram: The diagram of this FhirObservation.
        :param group: The group of this FhirObservation.
        :param id: The id of this FhirObservation.
        :param identifier: The identifier of this FhirObservation.
        :param location: The location of this FhirObservation.
        :param name: The name of this FhirObservation.
        :param temporary_uuid: The temporary_uuid of this FhirObservation.
        :param units: The units of this FhirObservation.
        :param value: The value of this FhirObservation.
        """
        self.openapi_types = {
            'applies': datetime,
            'body_site': str,
            'comments': str,
            'comparator': str,
            'diagram': str,
            'group': Group,
            'id': int,
            'identifier': str,
            'location': str,
            'name': str,
            'temporary_uuid': str,
            'units': str,
            'value': str
        }

        self.attribute_map = {
            'applies': 'applies',
            'body_site': 'bodySite',
            'comments': 'comments',
            'comparator': 'comparator',
            'diagram': 'diagram',
            'group': 'group',
            'id': 'id',
            'identifier': 'identifier',
            'location': 'location',
            'name': 'name',
            'temporary_uuid': 'temporaryUuid',
            'units': 'units',
            'value': 'value'
        }

        self._applies = applies
        self._body_site = body_site
        self._comments = comments
        self._comparator = comparator
        self._diagram = diagram
        self._group = group
        self._id = id
        self._identifier = identifier
        self._location = location
        self._name = name
        self._temporary_uuid = temporary_uuid
        self._units = units
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirObservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirObservation of this FhirObservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applies(self):
        """Gets the applies of this FhirObservation.


        :return: The applies of this FhirObservation.
        :rtype: datetime
        """
        return self._applies

    @applies.setter
    def applies(self, applies):
        """Sets the applies of this FhirObservation.


        :param applies: The applies of this FhirObservation.
        :type applies: datetime
        """

        self._applies = applies

    @property
    def body_site(self):
        """Gets the body_site of this FhirObservation.


        :return: The body_site of this FhirObservation.
        :rtype: str
        """
        return self._body_site

    @body_site.setter
    def body_site(self, body_site):
        """Sets the body_site of this FhirObservation.


        :param body_site: The body_site of this FhirObservation.
        :type body_site: str
        """

        self._body_site = body_site

    @property
    def comments(self):
        """Gets the comments of this FhirObservation.


        :return: The comments of this FhirObservation.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FhirObservation.


        :param comments: The comments of this FhirObservation.
        :type comments: str
        """

        self._comments = comments

    @property
    def comparator(self):
        """Gets the comparator of this FhirObservation.


        :return: The comparator of this FhirObservation.
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this FhirObservation.


        :param comparator: The comparator of this FhirObservation.
        :type comparator: str
        """

        self._comparator = comparator

    @property
    def diagram(self):
        """Gets the diagram of this FhirObservation.


        :return: The diagram of this FhirObservation.
        :rtype: str
        """
        return self._diagram

    @diagram.setter
    def diagram(self, diagram):
        """Sets the diagram of this FhirObservation.


        :param diagram: The diagram of this FhirObservation.
        :type diagram: str
        """

        self._diagram = diagram

    @property
    def group(self):
        """Gets the group of this FhirObservation.


        :return: The group of this FhirObservation.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FhirObservation.


        :param group: The group of this FhirObservation.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this FhirObservation.


        :return: The id of this FhirObservation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FhirObservation.


        :param id: The id of this FhirObservation.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this FhirObservation.


        :return: The identifier of this FhirObservation.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this FhirObservation.


        :param identifier: The identifier of this FhirObservation.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def location(self):
        """Gets the location of this FhirObservation.


        :return: The location of this FhirObservation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FhirObservation.


        :param location: The location of this FhirObservation.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this FhirObservation.


        :return: The name of this FhirObservation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FhirObservation.


        :param name: The name of this FhirObservation.
        :type name: str
        """

        self._name = name

    @property
    def temporary_uuid(self):
        """Gets the temporary_uuid of this FhirObservation.


        :return: The temporary_uuid of this FhirObservation.
        :rtype: str
        """
        return self._temporary_uuid

    @temporary_uuid.setter
    def temporary_uuid(self, temporary_uuid):
        """Sets the temporary_uuid of this FhirObservation.


        :param temporary_uuid: The temporary_uuid of this FhirObservation.
        :type temporary_uuid: str
        """

        self._temporary_uuid = temporary_uuid

    @property
    def units(self):
        """Gets the units of this FhirObservation.


        :return: The units of this FhirObservation.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this FhirObservation.


        :param units: The units of this FhirObservation.
        :type units: str
        """

        self._units = units

    @property
    def value(self):
        """Gets the value of this FhirObservation.


        :return: The value of this FhirObservation.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FhirObservation.


        :param value: The value of this FhirObservation.
        :type value: str
        """

        self._value = value
