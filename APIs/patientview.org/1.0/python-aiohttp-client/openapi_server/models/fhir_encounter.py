# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fhir_observation import FhirObservation
from openapi_server.models.fhir_procedure import FhirProcedure
from openapi_server.models.group import Group
from openapi_server.models.link import Link
from openapi_server import util


class FhirEncounter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, encounter_type: str=None, group: Group=None, id: int=None, identifier: str=None, links: list[Link]=None, observations: list[FhirObservation]=None, procedures: list[FhirProcedure]=None, status: str=None):
        """FhirEncounter - a model defined in OpenAPI

        :param _date: The _date of this FhirEncounter.
        :param encounter_type: The encounter_type of this FhirEncounter.
        :param group: The group of this FhirEncounter.
        :param id: The id of this FhirEncounter.
        :param identifier: The identifier of this FhirEncounter.
        :param links: The links of this FhirEncounter.
        :param observations: The observations of this FhirEncounter.
        :param procedures: The procedures of this FhirEncounter.
        :param status: The status of this FhirEncounter.
        """
        self.openapi_types = {
            '_date': datetime,
            'encounter_type': str,
            'group': Group,
            'id': int,
            'identifier': str,
            'links': list[Link],
            'observations': list[FhirObservation],
            'procedures': list[FhirProcedure],
            'status': str
        }

        self.attribute_map = {
            '_date': 'date',
            'encounter_type': 'encounterType',
            'group': 'group',
            'id': 'id',
            'identifier': 'identifier',
            'links': 'links',
            'observations': 'observations',
            'procedures': 'procedures',
            'status': 'status'
        }

        self.__date = _date
        self._encounter_type = encounter_type
        self._group = group
        self._id = id
        self._identifier = identifier
        self._links = links
        self._observations = observations
        self._procedures = procedures
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FhirEncounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FhirEncounter of this FhirEncounter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this FhirEncounter.


        :return: The _date of this FhirEncounter.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this FhirEncounter.


        :param _date: The _date of this FhirEncounter.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def encounter_type(self):
        """Gets the encounter_type of this FhirEncounter.


        :return: The encounter_type of this FhirEncounter.
        :rtype: str
        """
        return self._encounter_type

    @encounter_type.setter
    def encounter_type(self, encounter_type):
        """Sets the encounter_type of this FhirEncounter.


        :param encounter_type: The encounter_type of this FhirEncounter.
        :type encounter_type: str
        """

        self._encounter_type = encounter_type

    @property
    def group(self):
        """Gets the group of this FhirEncounter.


        :return: The group of this FhirEncounter.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FhirEncounter.


        :param group: The group of this FhirEncounter.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this FhirEncounter.


        :return: The id of this FhirEncounter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FhirEncounter.


        :param id: The id of this FhirEncounter.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this FhirEncounter.


        :return: The identifier of this FhirEncounter.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this FhirEncounter.


        :param identifier: The identifier of this FhirEncounter.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def links(self):
        """Gets the links of this FhirEncounter.


        :return: The links of this FhirEncounter.
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FhirEncounter.


        :param links: The links of this FhirEncounter.
        :type links: list[Link]
        """

        self._links = links

    @property
    def observations(self):
        """Gets the observations of this FhirEncounter.


        :return: The observations of this FhirEncounter.
        :rtype: list[FhirObservation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this FhirEncounter.


        :param observations: The observations of this FhirEncounter.
        :type observations: list[FhirObservation]
        """

        self._observations = observations

    @property
    def procedures(self):
        """Gets the procedures of this FhirEncounter.


        :return: The procedures of this FhirEncounter.
        :rtype: list[FhirProcedure]
        """
        return self._procedures

    @procedures.setter
    def procedures(self, procedures):
        """Sets the procedures of this FhirEncounter.


        :param procedures: The procedures of this FhirEncounter.
        :type procedures: list[FhirProcedure]
        """

        self._procedures = procedures

    @property
    def status(self):
        """Gets the status of this FhirEncounter.


        :return: The status of this FhirEncounter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FhirEncounter.


        :param status: The status of this FhirEncounter.
        :type status: str
        """

        self._status = status
