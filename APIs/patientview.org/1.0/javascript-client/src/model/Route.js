/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Lookup from './Lookup';

/**
 * The Route model module.
 * @module model/Route
 * @version 1.0
 */
class Route {
    /**
     * Constructs a new <code>Route</code>.
     * @alias module:model/Route
     */
    constructor() { 
        
        Route.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Route</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Route} obj Optional instance to populate.
     * @return {module:model/Route} The populated <code>Route</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Route();

            if (data.hasOwnProperty('controller')) {
                obj['controller'] = ApiClient.convertToType(data['controller'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lookup')) {
                obj['lookup'] = Lookup.constructFromObject(data['lookup']);
            }
            if (data.hasOwnProperty('templateUrl')) {
                obj['templateUrl'] = ApiClient.convertToType(data['templateUrl'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Route</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Route</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['controller'] && !(typeof data['controller'] === 'string' || data['controller'] instanceof String)) {
            throw new Error("Expected the field `controller` to be a primitive type in the JSON string but got " + data['controller']);
        }
        // validate the optional field `lookup`
        if (data['lookup']) { // data not null
          Lookup.validateJSON(data['lookup']);
        }
        // ensure the json data is a string
        if (data['templateUrl'] && !(typeof data['templateUrl'] === 'string' || data['templateUrl'] instanceof String)) {
            throw new Error("Expected the field `templateUrl` to be a primitive type in the JSON string but got " + data['templateUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} controller
 */
Route.prototype['controller'] = undefined;

/**
 * @member {Date} created
 */
Route.prototype['created'] = undefined;

/**
 * @member {Number} displayOrder
 */
Route.prototype['displayOrder'] = undefined;

/**
 * @member {Number} id
 */
Route.prototype['id'] = undefined;

/**
 * @member {module:model/Lookup} lookup
 */
Route.prototype['lookup'] = undefined;

/**
 * @member {String} templateUrl
 */
Route.prototype['templateUrl'] = undefined;

/**
 * @member {String} title
 */
Route.prototype['title'] = undefined;

/**
 * @member {String} url
 */
Route.prototype['url'] = undefined;






export default Route;

