/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FhirCondition from './FhirCondition';
import FhirEncounter from './FhirEncounter';
import FhirObservation from './FhirObservation';
import FhirPatient from './FhirPatient';
import FhirPractitioner from './FhirPractitioner';

/**
 * The PatientManagement model module.
 * @module model/PatientManagement
 * @version 1.0
 */
class PatientManagement {
    /**
     * Constructs a new <code>PatientManagement</code>.
     * @alias module:model/PatientManagement
     */
    constructor() { 
        
        PatientManagement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatientManagement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientManagement} obj Optional instance to populate.
     * @return {module:model/PatientManagement} The populated <code>PatientManagement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientManagement();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = FhirCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('encounters')) {
                obj['encounters'] = ApiClient.convertToType(data['encounters'], [FhirEncounter]);
            }
            if (data.hasOwnProperty('groupCode')) {
                obj['groupCode'] = ApiClient.convertToType(data['groupCode'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('observations')) {
                obj['observations'] = ApiClient.convertToType(data['observations'], [FhirObservation]);
            }
            if (data.hasOwnProperty('patient')) {
                obj['patient'] = FhirPatient.constructFromObject(data['patient']);
            }
            if (data.hasOwnProperty('practitioners')) {
                obj['practitioners'] = ApiClient.convertToType(data['practitioners'], [FhirPractitioner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientManagement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientManagement</code>.
     */
    static validateJSON(data) {
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          FhirCondition.validateJSON(data['condition']);
        }
        if (data['encounters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['encounters'])) {
                throw new Error("Expected the field `encounters` to be an array in the JSON data but got " + data['encounters']);
            }
            // validate the optional field `encounters` (array)
            for (const item of data['encounters']) {
                FhirEncounter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['groupCode'] && !(typeof data['groupCode'] === 'string' || data['groupCode'] instanceof String)) {
            throw new Error("Expected the field `groupCode` to be a primitive type in the JSON string but got " + data['groupCode']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        if (data['observations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['observations'])) {
                throw new Error("Expected the field `observations` to be an array in the JSON data but got " + data['observations']);
            }
            // validate the optional field `observations` (array)
            for (const item of data['observations']) {
                FhirObservation.validateJSON(item);
            };
        }
        // validate the optional field `patient`
        if (data['patient']) { // data not null
          FhirPatient.validateJSON(data['patient']);
        }
        if (data['practitioners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['practitioners'])) {
                throw new Error("Expected the field `practitioners` to be an array in the JSON data but got " + data['practitioners']);
            }
            // validate the optional field `practitioners` (array)
            for (const item of data['practitioners']) {
                FhirPractitioner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/FhirCondition} condition
 */
PatientManagement.prototype['condition'] = undefined;

/**
 * @member {Array.<module:model/FhirEncounter>} encounters
 */
PatientManagement.prototype['encounters'] = undefined;

/**
 * @member {String} groupCode
 */
PatientManagement.prototype['groupCode'] = undefined;

/**
 * @member {String} identifier
 */
PatientManagement.prototype['identifier'] = undefined;

/**
 * @member {Array.<module:model/FhirObservation>} observations
 */
PatientManagement.prototype['observations'] = undefined;

/**
 * @member {module:model/FhirPatient} patient
 */
PatientManagement.prototype['patient'] = undefined;

/**
 * @member {Array.<module:model/FhirPractitioner>} practitioners
 */
PatientManagement.prototype['practitioners'] = undefined;






export default PatientManagement;

