/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiKey from './ApiKey';
import BaseGroup from './BaseGroup';
import GroupRole from './GroupRole';
import UserFeature from './UserFeature';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiKey.constructFromObject(data['apiKey']);
            }
            if (data.hasOwnProperty('canSwitchUser')) {
                obj['canSwitchUser'] = ApiClient.convertToType(data['canSwitchUser'], 'Boolean');
            }
            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ApiClient.convertToType(data['changePassword'], 'Boolean');
            }
            if (data.hasOwnProperty('contactNumber')) {
                obj['contactNumber'] = ApiClient.convertToType(data['contactNumber'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('currentLogin')) {
                obj['currentLogin'] = ApiClient.convertToType(data['currentLogin'], 'Date');
            }
            if (data.hasOwnProperty('currentLoginIpAddress')) {
                obj['currentLoginIpAddress'] = ApiClient.convertToType(data['currentLoginIpAddress'], 'String');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('dummy')) {
                obj['dummy'] = ApiClient.convertToType(data['dummy'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('forename')) {
                obj['forename'] = ApiClient.convertToType(data['forename'], 'String');
            }
            if (data.hasOwnProperty('groupRoles')) {
                obj['groupRoles'] = ApiClient.convertToType(data['groupRoles'], [GroupRole]);
            }
            if (data.hasOwnProperty('hideSecretWordNotification')) {
                obj['hideSecretWordNotification'] = ApiClient.convertToType(data['hideSecretWordNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [Object]);
            }
            if (data.hasOwnProperty('lastLogin')) {
                obj['lastLogin'] = ApiClient.convertToType(data['lastLogin'], 'Date');
            }
            if (data.hasOwnProperty('lastLoginIpAddress')) {
                obj['lastLoginIpAddress'] = ApiClient.convertToType(data['lastLoginIpAddress'], 'String');
            }
            if (data.hasOwnProperty('latestDataReceivedBy')) {
                obj['latestDataReceivedBy'] = BaseGroup.constructFromObject(data['latestDataReceivedBy']);
            }
            if (data.hasOwnProperty('latestDataReceivedDate')) {
                obj['latestDataReceivedDate'] = ApiClient.convertToType(data['latestDataReceivedDate'], 'Date');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = ApiClient.convertToType(data['picture'], 'String');
            }
            if (data.hasOwnProperty('roleDescription')) {
                obj['roleDescription'] = ApiClient.convertToType(data['roleDescription'], 'String');
            }
            if (data.hasOwnProperty('secretWordIsSet')) {
                obj['secretWordIsSet'] = ApiClient.convertToType(data['secretWordIsSet'], 'Boolean');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('userFeatures')) {
                obj['userFeatures'] = ApiClient.convertToType(data['userFeatures'], [UserFeature]);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // validate the optional field `apiKey`
        if (data['apiKey']) { // data not null
          ApiKey.validateJSON(data['apiKey']);
        }
        // ensure the json data is a string
        if (data['contactNumber'] && !(typeof data['contactNumber'] === 'string' || data['contactNumber'] instanceof String)) {
            throw new Error("Expected the field `contactNumber` to be a primitive type in the JSON string but got " + data['contactNumber']);
        }
        // ensure the json data is a string
        if (data['currentLoginIpAddress'] && !(typeof data['currentLoginIpAddress'] === 'string' || data['currentLoginIpAddress'] instanceof String)) {
            throw new Error("Expected the field `currentLoginIpAddress` to be a primitive type in the JSON string but got " + data['currentLoginIpAddress']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['forename'] && !(typeof data['forename'] === 'string' || data['forename'] instanceof String)) {
            throw new Error("Expected the field `forename` to be a primitive type in the JSON string but got " + data['forename']);
        }
        if (data['groupRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupRoles'])) {
                throw new Error("Expected the field `groupRoles` to be an array in the JSON data but got " + data['groupRoles']);
            }
            // validate the optional field `groupRoles` (array)
            for (const item of data['groupRoles']) {
                GroupRole.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['identifiers'])) {
            throw new Error("Expected the field `identifiers` to be an array in the JSON data but got " + data['identifiers']);
        }
        // ensure the json data is a string
        if (data['lastLoginIpAddress'] && !(typeof data['lastLoginIpAddress'] === 'string' || data['lastLoginIpAddress'] instanceof String)) {
            throw new Error("Expected the field `lastLoginIpAddress` to be a primitive type in the JSON string but got " + data['lastLoginIpAddress']);
        }
        // validate the optional field `latestDataReceivedBy`
        if (data['latestDataReceivedBy']) { // data not null
          BaseGroup.validateJSON(data['latestDataReceivedBy']);
        }
        // ensure the json data is a string
        if (data['picture'] && !(typeof data['picture'] === 'string' || data['picture'] instanceof String)) {
            throw new Error("Expected the field `picture` to be a primitive type in the JSON string but got " + data['picture']);
        }
        // ensure the json data is a string
        if (data['roleDescription'] && !(typeof data['roleDescription'] === 'string' || data['roleDescription'] instanceof String)) {
            throw new Error("Expected the field `roleDescription` to be a primitive type in the JSON string but got " + data['roleDescription']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }
        if (data['userFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userFeatures'])) {
                throw new Error("Expected the field `userFeatures` to be an array in the JSON data but got " + data['userFeatures']);
            }
            // validate the optional field `userFeatures` (array)
            for (const item of data['userFeatures']) {
                UserFeature.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApiKey} apiKey
 */
User.prototype['apiKey'] = undefined;

/**
 * @member {Boolean} canSwitchUser
 */
User.prototype['canSwitchUser'] = undefined;

/**
 * @member {Boolean} changePassword
 */
User.prototype['changePassword'] = undefined;

/**
 * @member {String} contactNumber
 */
User.prototype['contactNumber'] = undefined;

/**
 * @member {Date} created
 */
User.prototype['created'] = undefined;

/**
 * @member {Date} currentLogin
 */
User.prototype['currentLogin'] = undefined;

/**
 * @member {String} currentLoginIpAddress
 */
User.prototype['currentLoginIpAddress'] = undefined;

/**
 * @member {Date} dateOfBirth
 */
User.prototype['dateOfBirth'] = undefined;

/**
 * @member {Boolean} deleted
 */
User.prototype['deleted'] = undefined;

/**
 * @member {Boolean} dummy
 */
User.prototype['dummy'] = undefined;

/**
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * @member {Boolean} emailVerified
 */
User.prototype['emailVerified'] = undefined;

/**
 * @member {String} forename
 */
User.prototype['forename'] = undefined;

/**
 * @member {Array.<module:model/GroupRole>} groupRoles
 */
User.prototype['groupRoles'] = undefined;

/**
 * @member {Boolean} hideSecretWordNotification
 */
User.prototype['hideSecretWordNotification'] = undefined;

/**
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * @member {Array.<Object>} identifiers
 */
User.prototype['identifiers'] = undefined;

/**
 * @member {Date} lastLogin
 */
User.prototype['lastLogin'] = undefined;

/**
 * @member {String} lastLoginIpAddress
 */
User.prototype['lastLoginIpAddress'] = undefined;

/**
 * @member {module:model/BaseGroup} latestDataReceivedBy
 */
User.prototype['latestDataReceivedBy'] = undefined;

/**
 * @member {Date} latestDataReceivedDate
 */
User.prototype['latestDataReceivedDate'] = undefined;

/**
 * @member {Boolean} locked
 */
User.prototype['locked'] = undefined;

/**
 * @member {String} picture
 */
User.prototype['picture'] = undefined;

/**
 * @member {String} roleDescription
 */
User.prototype['roleDescription'] = undefined;

/**
 * @member {Boolean} secretWordIsSet
 */
User.prototype['secretWordIsSet'] = undefined;

/**
 * @member {String} surname
 */
User.prototype['surname'] = undefined;

/**
 * @member {Array.<module:model/UserFeature>} userFeatures
 */
User.prototype['userFeatures'] = undefined;

/**
 * @member {String} username
 */
User.prototype['username'] = undefined;






export default User;

