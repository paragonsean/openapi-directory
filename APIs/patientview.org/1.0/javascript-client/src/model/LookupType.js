/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LookupType model module.
 * @module model/LookupType
 * @version 1.0
 */
class LookupType {
    /**
     * Constructs a new <code>LookupType</code>.
     * @alias module:model/LookupType
     */
    constructor() { 
        
        LookupType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LookupType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LookupType} obj Optional instance to populate.
     * @return {module:model/LookupType} The populated <code>LookupType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LookupType();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LookupType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LookupType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Date} created
 */
LookupType.prototype['created'] = undefined;

/**
 * @member {String} description
 */
LookupType.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
LookupType.prototype['id'] = undefined;

/**
 * @member {Date} lastUpdate
 */
LookupType.prototype['lastUpdate'] = undefined;

/**
 * @member {module:model/LookupType.TypeEnum} type
 */
LookupType.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LookupType['TypeEnum'] = {

    /**
     * value: "GROUP"
     * @const
     */
    "GROUP": "GROUP",

    /**
     * value: "MENU"
     * @const
     */
    "MENU": "MENU",

    /**
     * value: "ROLE"
     * @const
     */
    "ROLE": "ROLE",

    /**
     * value: "CODE_STANDARD"
     * @const
     */
    "CODE_STANDARD": "CODE_STANDARD",

    /**
     * value: "CODE_TYPE"
     * @const
     */
    "CODE_TYPE": "CODE_TYPE",

    /**
     * value: "FEATURE_TYPE"
     * @const
     */
    "FEATURE_TYPE": "FEATURE_TYPE",

    /**
     * value: "RELATIONSHIP_TYPE"
     * @const
     */
    "RELATIONSHIP_TYPE": "RELATIONSHIP_TYPE",

    /**
     * value: "IDENTIFIER"
     * @const
     */
    "IDENTIFIER": "IDENTIFIER",

    /**
     * value: "CONTACT_POINT_TYPE"
     * @const
     */
    "CONTACT_POINT_TYPE": "CONTACT_POINT_TYPE",

    /**
     * value: "STATISTIC_TYPE"
     * @const
     */
    "STATISTIC_TYPE": "STATISTIC_TYPE",

    /**
     * value: "NEWS_TYPE"
     * @const
     */
    "NEWS_TYPE": "NEWS_TYPE",

    /**
     * value: "GENDER"
     * @const
     */
    "GENDER": "GENDER",

    /**
     * value: "IBD_CROHNSLOCATION"
     * @const
     */
    "IBD_CROHNSLOCATION": "IBD_CROHNSLOCATION",

    /**
     * value: "IBD_CROHNSPROXIMALTERMINALILEUM"
     * @const
     */
    "IBD_CROHNSPROXIMALTERMINALILEUM": "IBD_CROHNSPROXIMALTERMINALILEUM",

    /**
     * value: "IBD_CROHNSPERIANAL"
     * @const
     */
    "IBD_CROHNSPERIANAL": "IBD_CROHNSPERIANAL",

    /**
     * value: "IBD_CROHNSBEHAVIOUR"
     * @const
     */
    "IBD_CROHNSBEHAVIOUR": "IBD_CROHNSBEHAVIOUR",

    /**
     * value: "IBD_UCEXTENT"
     * @const
     */
    "IBD_UCEXTENT": "IBD_UCEXTENT",

    /**
     * value: "IBD_EGIMCOMPLICATION"
     * @const
     */
    "IBD_EGIMCOMPLICATION": "IBD_EGIMCOMPLICATION",

    /**
     * value: "IBD_SURGERYMAINPROCEDURE"
     * @const
     */
    "IBD_SURGERYMAINPROCEDURE": "IBD_SURGERYMAINPROCEDURE",

    /**
     * value: "IBD_SMOKINGSTATUS"
     * @const
     */
    "IBD_SMOKINGSTATUS": "IBD_SMOKINGSTATUS",

    /**
     * value: "IBD_FAMILYHISTORY"
     * @const
     */
    "IBD_FAMILYHISTORY": "IBD_FAMILYHISTORY",

    /**
     * value: "LINK_TYPE"
     * @const
     */
    "LINK_TYPE": "LINK_TYPE"
};



export default LookupType;

