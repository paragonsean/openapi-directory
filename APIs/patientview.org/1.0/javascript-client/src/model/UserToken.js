/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseGroup from './BaseGroup';
import ExternalStandard from './ExternalStandard';
import Feature from './Feature';
import Role from './Role';
import Route from './Route';
import User from './User';

/**
 * The UserToken model module.
 * @module model/UserToken
 * @version 1.0
 */
class UserToken {
    /**
     * Constructs a new <code>UserToken</code>.
     * @alias module:model/UserToken
     */
    constructor() { 
        
        UserToken.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserToken} obj Optional instance to populate.
     * @return {module:model/UserToken} The populated <code>UserToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserToken();

            if (data.hasOwnProperty('auditActions')) {
                obj['auditActions'] = ApiClient.convertToType(data['auditActions'], ['String']);
            }
            if (data.hasOwnProperty('checkSecretWord')) {
                obj['checkSecretWord'] = ApiClient.convertToType(data['checkSecretWord'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
            if (data.hasOwnProperty('externalStandards')) {
                obj['externalStandards'] = ApiClient.convertToType(data['externalStandards'], [ExternalStandard]);
            }
            if (data.hasOwnProperty('groupFeatures')) {
                obj['groupFeatures'] = ApiClient.convertToType(data['groupFeatures'], [Feature]);
            }
            if (data.hasOwnProperty('groupMessagingEnabled')) {
                obj['groupMessagingEnabled'] = ApiClient.convertToType(data['groupMessagingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('mustSetSecretWord')) {
                obj['mustSetSecretWord'] = ApiClient.convertToType(data['mustSetSecretWord'], 'Boolean');
            }
            if (data.hasOwnProperty('patientFeatures')) {
                obj['patientFeatures'] = ApiClient.convertToType(data['patientFeatures'], [Feature]);
            }
            if (data.hasOwnProperty('patientMessagingFeatureTypes')) {
                obj['patientMessagingFeatureTypes'] = ApiClient.convertToType(data['patientMessagingFeatureTypes'], ['String']);
            }
            if (data.hasOwnProperty('patientRoles')) {
                obj['patientRoles'] = ApiClient.convertToType(data['patientRoles'], [Role]);
            }
            if (data.hasOwnProperty('routes')) {
                obj['routes'] = ApiClient.convertToType(data['routes'], [Route]);
            }
            if (data.hasOwnProperty('secretWord')) {
                obj['secretWord'] = ApiClient.convertToType(data['secretWord'], 'String');
            }
            if (data.hasOwnProperty('secretWordChoices')) {
                obj['secretWordChoices'] = ApiClient.convertToType(data['secretWordChoices'], Object);
            }
            if (data.hasOwnProperty('secretWordIndexes')) {
                obj['secretWordIndexes'] = ApiClient.convertToType(data['secretWordIndexes'], ['String']);
            }
            if (data.hasOwnProperty('secretWordSalt')) {
                obj['secretWordSalt'] = ApiClient.convertToType(data['secretWordSalt'], 'String');
            }
            if (data.hasOwnProperty('secretWordToken')) {
                obj['secretWordToken'] = ApiClient.convertToType(data['secretWordToken'], 'String');
            }
            if (data.hasOwnProperty('securityRoles')) {
                obj['securityRoles'] = ApiClient.convertToType(data['securityRoles'], [Role]);
            }
            if (data.hasOwnProperty('shouldEnterCondition')) {
                obj['shouldEnterCondition'] = ApiClient.convertToType(data['shouldEnterCondition'], 'Boolean');
            }
            if (data.hasOwnProperty('staffFeatures')) {
                obj['staffFeatures'] = ApiClient.convertToType(data['staffFeatures'], [Feature]);
            }
            if (data.hasOwnProperty('staffRoles')) {
                obj['staffRoles'] = ApiClient.convertToType(data['staffRoles'], [Role]);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('userFeatures')) {
                obj['userFeatures'] = ApiClient.convertToType(data['userFeatures'], [Feature]);
            }
            if (data.hasOwnProperty('userGroups')) {
                obj['userGroups'] = ApiClient.convertToType(data['userGroups'], [BaseGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserToken</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['auditActions'])) {
            throw new Error("Expected the field `auditActions` to be an array in the JSON data but got " + data['auditActions']);
        }
        if (data['externalStandards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalStandards'])) {
                throw new Error("Expected the field `externalStandards` to be an array in the JSON data but got " + data['externalStandards']);
            }
            // validate the optional field `externalStandards` (array)
            for (const item of data['externalStandards']) {
                ExternalStandard.validateJSON(item);
            };
        }
        if (data['groupFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupFeatures'])) {
                throw new Error("Expected the field `groupFeatures` to be an array in the JSON data but got " + data['groupFeatures']);
            }
            // validate the optional field `groupFeatures` (array)
            for (const item of data['groupFeatures']) {
                Feature.validateJSON(item);
            };
        }
        if (data['patientFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patientFeatures'])) {
                throw new Error("Expected the field `patientFeatures` to be an array in the JSON data but got " + data['patientFeatures']);
            }
            // validate the optional field `patientFeatures` (array)
            for (const item of data['patientFeatures']) {
                Feature.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['patientMessagingFeatureTypes'])) {
            throw new Error("Expected the field `patientMessagingFeatureTypes` to be an array in the JSON data but got " + data['patientMessagingFeatureTypes']);
        }
        if (data['patientRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patientRoles'])) {
                throw new Error("Expected the field `patientRoles` to be an array in the JSON data but got " + data['patientRoles']);
            }
            // validate the optional field `patientRoles` (array)
            for (const item of data['patientRoles']) {
                Role.validateJSON(item);
            };
        }
        if (data['routes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['routes'])) {
                throw new Error("Expected the field `routes` to be an array in the JSON data but got " + data['routes']);
            }
            // validate the optional field `routes` (array)
            for (const item of data['routes']) {
                Route.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['secretWord'] && !(typeof data['secretWord'] === 'string' || data['secretWord'] instanceof String)) {
            throw new Error("Expected the field `secretWord` to be a primitive type in the JSON string but got " + data['secretWord']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secretWordIndexes'])) {
            throw new Error("Expected the field `secretWordIndexes` to be an array in the JSON data but got " + data['secretWordIndexes']);
        }
        // ensure the json data is a string
        if (data['secretWordSalt'] && !(typeof data['secretWordSalt'] === 'string' || data['secretWordSalt'] instanceof String)) {
            throw new Error("Expected the field `secretWordSalt` to be a primitive type in the JSON string but got " + data['secretWordSalt']);
        }
        // ensure the json data is a string
        if (data['secretWordToken'] && !(typeof data['secretWordToken'] === 'string' || data['secretWordToken'] instanceof String)) {
            throw new Error("Expected the field `secretWordToken` to be a primitive type in the JSON string but got " + data['secretWordToken']);
        }
        if (data['securityRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['securityRoles'])) {
                throw new Error("Expected the field `securityRoles` to be an array in the JSON data but got " + data['securityRoles']);
            }
            // validate the optional field `securityRoles` (array)
            for (const item of data['securityRoles']) {
                Role.validateJSON(item);
            };
        }
        if (data['staffFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['staffFeatures'])) {
                throw new Error("Expected the field `staffFeatures` to be an array in the JSON data but got " + data['staffFeatures']);
            }
            // validate the optional field `staffFeatures` (array)
            for (const item of data['staffFeatures']) {
                Feature.validateJSON(item);
            };
        }
        if (data['staffRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['staffRoles'])) {
                throw new Error("Expected the field `staffRoles` to be an array in the JSON data but got " + data['staffRoles']);
            }
            // validate the optional field `staffRoles` (array)
            for (const item of data['staffRoles']) {
                Role.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        if (data['userFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userFeatures'])) {
                throw new Error("Expected the field `userFeatures` to be an array in the JSON data but got " + data['userFeatures']);
            }
            // validate the optional field `userFeatures` (array)
            for (const item of data['userFeatures']) {
                Feature.validateJSON(item);
            };
        }
        if (data['userGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userGroups'])) {
                throw new Error("Expected the field `userGroups` to be an array in the JSON data but got " + data['userGroups']);
            }
            // validate the optional field `userGroups` (array)
            for (const item of data['userGroups']) {
                BaseGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<String>} auditActions
 */
UserToken.prototype['auditActions'] = undefined;

/**
 * @member {Boolean} checkSecretWord
 */
UserToken.prototype['checkSecretWord'] = undefined;

/**
 * @member {Date} created
 */
UserToken.prototype['created'] = undefined;

/**
 * @member {Date} expiration
 */
UserToken.prototype['expiration'] = undefined;

/**
 * @member {Array.<module:model/ExternalStandard>} externalStandards
 */
UserToken.prototype['externalStandards'] = undefined;

/**
 * @member {Array.<module:model/Feature>} groupFeatures
 */
UserToken.prototype['groupFeatures'] = undefined;

/**
 * @member {Boolean} groupMessagingEnabled
 */
UserToken.prototype['groupMessagingEnabled'] = undefined;

/**
 * @member {Boolean} mustSetSecretWord
 */
UserToken.prototype['mustSetSecretWord'] = undefined;

/**
 * @member {Array.<module:model/Feature>} patientFeatures
 */
UserToken.prototype['patientFeatures'] = undefined;

/**
 * @member {Array.<String>} patientMessagingFeatureTypes
 */
UserToken.prototype['patientMessagingFeatureTypes'] = undefined;

/**
 * @member {Array.<module:model/Role>} patientRoles
 */
UserToken.prototype['patientRoles'] = undefined;

/**
 * @member {Array.<module:model/Route>} routes
 */
UserToken.prototype['routes'] = undefined;

/**
 * @member {String} secretWord
 */
UserToken.prototype['secretWord'] = undefined;

/**
 * @member {Object} secretWordChoices
 */
UserToken.prototype['secretWordChoices'] = undefined;

/**
 * @member {Array.<String>} secretWordIndexes
 */
UserToken.prototype['secretWordIndexes'] = undefined;

/**
 * @member {String} secretWordSalt
 */
UserToken.prototype['secretWordSalt'] = undefined;

/**
 * @member {String} secretWordToken
 */
UserToken.prototype['secretWordToken'] = undefined;

/**
 * @member {Array.<module:model/Role>} securityRoles
 */
UserToken.prototype['securityRoles'] = undefined;

/**
 * @member {Boolean} shouldEnterCondition
 */
UserToken.prototype['shouldEnterCondition'] = undefined;

/**
 * @member {Array.<module:model/Feature>} staffFeatures
 */
UserToken.prototype['staffFeatures'] = undefined;

/**
 * @member {Array.<module:model/Role>} staffRoles
 */
UserToken.prototype['staffRoles'] = undefined;

/**
 * @member {String} token
 */
UserToken.prototype['token'] = undefined;

/**
 * @member {module:model/User} user
 */
UserToken.prototype['user'] = undefined;

/**
 * @member {Array.<module:model/Feature>} userFeatures
 */
UserToken.prototype['userFeatures'] = undefined;

/**
 * @member {Array.<module:model/BaseGroup>} userGroups
 */
UserToken.prototype['userGroups'] = undefined;






export default UserToken;

