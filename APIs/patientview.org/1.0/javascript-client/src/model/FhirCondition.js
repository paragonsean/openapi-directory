/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';
import Link from './Link';

/**
 * The FhirCondition model module.
 * @module model/FhirCondition
 * @version 1.0
 */
class FhirCondition {
    /**
     * Constructs a new <code>FhirCondition</code>.
     * @alias module:model/FhirCondition
     */
    constructor() { 
        
        FhirCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirCondition} obj Optional instance to populate.
     * @return {module:model/FhirCondition} The populated <code>FhirCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirCondition();

            if (data.hasOwnProperty('asserter')) {
                obj['asserter'] = ApiClient.convertToType(data['asserter'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fullDescription')) {
                obj['fullDescription'] = ApiClient.convertToType(data['fullDescription'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['asserter'] && !(typeof data['asserter'] === 'string' || data['asserter'] instanceof String)) {
            throw new Error("Expected the field `asserter` to be a primitive type in the JSON string but got " + data['asserter']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['fullDescription'] && !(typeof data['fullDescription'] === 'string' || data['fullDescription'] instanceof String)) {
            throw new Error("Expected the field `fullDescription` to be a primitive type in the JSON string but got " + data['fullDescription']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {String} asserter
 */
FhirCondition.prototype['asserter'] = undefined;

/**
 * @member {String} category
 */
FhirCondition.prototype['category'] = undefined;

/**
 * @member {String} code
 */
FhirCondition.prototype['code'] = undefined;

/**
 * @member {Date} date
 */
FhirCondition.prototype['date'] = undefined;

/**
 * @member {String} description
 */
FhirCondition.prototype['description'] = undefined;

/**
 * @member {String} fullDescription
 */
FhirCondition.prototype['fullDescription'] = undefined;

/**
 * @member {module:model/Group} group
 */
FhirCondition.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
FhirCondition.prototype['id'] = undefined;

/**
 * @member {String} identifier
 */
FhirCondition.prototype['identifier'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
FhirCondition.prototype['links'] = undefined;

/**
 * @member {String} notes
 */
FhirCondition.prototype['notes'] = undefined;

/**
 * @member {String} severity
 */
FhirCondition.prototype['severity'] = undefined;

/**
 * @member {String} status
 */
FhirCondition.prototype['status'] = undefined;






export default FhirCondition;

