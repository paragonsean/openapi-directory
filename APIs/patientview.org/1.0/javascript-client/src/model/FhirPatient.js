/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FhirContact from './FhirContact';
import FhirIdentifier from './FhirIdentifier';
import FhirPractitioner from './FhirPractitioner';
import Group from './Group';

/**
 * The FhirPatient model module.
 * @module model/FhirPatient
 * @version 1.0
 */
class FhirPatient {
    /**
     * Constructs a new <code>FhirPatient</code>.
     * @alias module:model/FhirPatient
     */
    constructor() { 
        
        FhirPatient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirPatient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirPatient} obj Optional instance to populate.
     * @return {module:model/FhirPatient} The populated <code>FhirPatient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirPatient();

            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('address3')) {
                obj['address3'] = ApiClient.convertToType(data['address3'], 'String');
            }
            if (data.hasOwnProperty('address4')) {
                obj['address4'] = ApiClient.convertToType(data['address4'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [FhirContact]);
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('dateOfBirthNoTime')) {
                obj['dateOfBirthNoTime'] = ApiClient.convertToType(data['dateOfBirthNoTime'], 'String');
            }
            if (data.hasOwnProperty('forename')) {
                obj['forename'] = ApiClient.convertToType(data['forename'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('groupCode')) {
                obj['groupCode'] = ApiClient.convertToType(data['groupCode'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [FhirIdentifier]);
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('practitioners')) {
                obj['practitioners'] = ApiClient.convertToType(data['practitioners'], [FhirPractitioner]);
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirPatient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirPatient</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['address3'] && !(typeof data['address3'] === 'string' || data['address3'] instanceof String)) {
            throw new Error("Expected the field `address3` to be a primitive type in the JSON string but got " + data['address3']);
        }
        // ensure the json data is a string
        if (data['address4'] && !(typeof data['address4'] === 'string' || data['address4'] instanceof String)) {
            throw new Error("Expected the field `address4` to be a primitive type in the JSON string but got " + data['address4']);
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                FhirContact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dateOfBirthNoTime'] && !(typeof data['dateOfBirthNoTime'] === 'string' || data['dateOfBirthNoTime'] instanceof String)) {
            throw new Error("Expected the field `dateOfBirthNoTime` to be a primitive type in the JSON string but got " + data['dateOfBirthNoTime']);
        }
        // ensure the json data is a string
        if (data['forename'] && !(typeof data['forename'] === 'string' || data['forename'] instanceof String)) {
            throw new Error("Expected the field `forename` to be a primitive type in the JSON string but got " + data['forename']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['groupCode'] && !(typeof data['groupCode'] === 'string' || data['groupCode'] instanceof String)) {
            throw new Error("Expected the field `groupCode` to be a primitive type in the JSON string but got " + data['groupCode']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        if (data['identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identifiers'])) {
                throw new Error("Expected the field `identifiers` to be an array in the JSON data but got " + data['identifiers']);
            }
            // validate the optional field `identifiers` (array)
            for (const item of data['identifiers']) {
                FhirIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        if (data['practitioners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['practitioners'])) {
                throw new Error("Expected the field `practitioners` to be an array in the JSON data but got " + data['practitioners']);
            }
            // validate the optional field `practitioners` (array)
            for (const item of data['practitioners']) {
                FhirPractitioner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }

        return true;
    }


}



/**
 * @member {String} address1
 */
FhirPatient.prototype['address1'] = undefined;

/**
 * @member {String} address2
 */
FhirPatient.prototype['address2'] = undefined;

/**
 * @member {String} address3
 */
FhirPatient.prototype['address3'] = undefined;

/**
 * @member {String} address4
 */
FhirPatient.prototype['address4'] = undefined;

/**
 * @member {Array.<module:model/FhirContact>} contacts
 */
FhirPatient.prototype['contacts'] = undefined;

/**
 * @member {Date} dateOfBirth
 */
FhirPatient.prototype['dateOfBirth'] = undefined;

/**
 * @member {String} dateOfBirthNoTime
 */
FhirPatient.prototype['dateOfBirthNoTime'] = undefined;

/**
 * @member {String} forename
 */
FhirPatient.prototype['forename'] = undefined;

/**
 * @member {String} gender
 */
FhirPatient.prototype['gender'] = undefined;

/**
 * @member {module:model/Group} group
 */
FhirPatient.prototype['group'] = undefined;

/**
 * @member {String} groupCode
 */
FhirPatient.prototype['groupCode'] = undefined;

/**
 * @member {String} identifier
 */
FhirPatient.prototype['identifier'] = undefined;

/**
 * @member {Array.<module:model/FhirIdentifier>} identifiers
 */
FhirPatient.prototype['identifiers'] = undefined;

/**
 * @member {String} postcode
 */
FhirPatient.prototype['postcode'] = undefined;

/**
 * @member {Array.<module:model/FhirPractitioner>} practitioners
 */
FhirPatient.prototype['practitioners'] = undefined;

/**
 * @member {String} surname
 */
FhirPatient.prototype['surname'] = undefined;






export default FhirPatient;

