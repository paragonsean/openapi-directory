/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeCategory from './CodeCategory';
import CodeExternalStandard from './CodeExternalStandard';
import Link from './Link';
import Lookup from './Lookup';

/**
 * The Code model module.
 * @module model/Code
 * @version 1.0
 */
class Code {
    /**
     * Constructs a new <code>Code</code>.
     * @alias module:model/Code
     */
    constructor() { 
        
        Code.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Code</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Code} obj Optional instance to populate.
     * @return {module:model/Code} The populated <code>Code</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Code();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('codeCategories')) {
                obj['codeCategories'] = ApiClient.convertToType(data['codeCategories'], [CodeCategory]);
            }
            if (data.hasOwnProperty('codeType')) {
                obj['codeType'] = Lookup.constructFromObject(data['codeType']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('externalStandards')) {
                obj['externalStandards'] = ApiClient.convertToType(data['externalStandards'], [CodeExternalStandard]);
            }
            if (data.hasOwnProperty('fullDescription')) {
                obj['fullDescription'] = ApiClient.convertToType(data['fullDescription'], 'String');
            }
            if (data.hasOwnProperty('hideFromPatients')) {
                obj['hideFromPatients'] = ApiClient.convertToType(data['hideFromPatients'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
            if (data.hasOwnProperty('patientFriendlyName')) {
                obj['patientFriendlyName'] = ApiClient.convertToType(data['patientFriendlyName'], 'String');
            }
            if (data.hasOwnProperty('removedExternally')) {
                obj['removedExternally'] = ApiClient.convertToType(data['removedExternally'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('standardType')) {
                obj['standardType'] = Lookup.constructFromObject(data['standardType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Code</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Code</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['codeCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['codeCategories'])) {
                throw new Error("Expected the field `codeCategories` to be an array in the JSON data but got " + data['codeCategories']);
            }
            // validate the optional field `codeCategories` (array)
            for (const item of data['codeCategories']) {
                CodeCategory.validateJSON(item);
            };
        }
        // validate the optional field `codeType`
        if (data['codeType']) { // data not null
          Lookup.validateJSON(data['codeType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['externalStandards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalStandards'])) {
                throw new Error("Expected the field `externalStandards` to be an array in the JSON data but got " + data['externalStandards']);
            }
            // validate the optional field `externalStandards` (array)
            for (const item of data['externalStandards']) {
                CodeExternalStandard.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fullDescription'] && !(typeof data['fullDescription'] === 'string' || data['fullDescription'] instanceof String)) {
            throw new Error("Expected the field `fullDescription` to be a primitive type in the JSON string but got " + data['fullDescription']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['patientFriendlyName'] && !(typeof data['patientFriendlyName'] === 'string' || data['patientFriendlyName'] instanceof String)) {
            throw new Error("Expected the field `patientFriendlyName` to be a primitive type in the JSON string but got " + data['patientFriendlyName']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }
        // validate the optional field `standardType`
        if (data['standardType']) { // data not null
          Lookup.validateJSON(data['standardType']);
        }

        return true;
    }


}



/**
 * @member {String} code
 */
Code.prototype['code'] = undefined;

/**
 * @member {Array.<module:model/CodeCategory>} codeCategories
 */
Code.prototype['codeCategories'] = undefined;

/**
 * @member {module:model/Lookup} codeType
 */
Code.prototype['codeType'] = undefined;

/**
 * @member {Date} created
 */
Code.prototype['created'] = undefined;

/**
 * @member {String} description
 */
Code.prototype['description'] = undefined;

/**
 * @member {Number} displayOrder
 */
Code.prototype['displayOrder'] = undefined;

/**
 * @member {Array.<module:model/CodeExternalStandard>} externalStandards
 */
Code.prototype['externalStandards'] = undefined;

/**
 * @member {String} fullDescription
 */
Code.prototype['fullDescription'] = undefined;

/**
 * @member {Boolean} hideFromPatients
 */
Code.prototype['hideFromPatients'] = undefined;

/**
 * @member {Number} id
 */
Code.prototype['id'] = undefined;

/**
 * @member {Date} lastUpdate
 */
Code.prototype['lastUpdate'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
Code.prototype['links'] = undefined;

/**
 * @member {String} patientFriendlyName
 */
Code.prototype['patientFriendlyName'] = undefined;

/**
 * @member {Boolean} removedExternally
 */
Code.prototype['removedExternally'] = undefined;

/**
 * @member {module:model/Code.SourceTypeEnum} sourceType
 */
Code.prototype['sourceType'] = undefined;

/**
 * @member {module:model/Lookup} standardType
 */
Code.prototype['standardType'] = undefined;





/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
Code['SourceTypeEnum'] = {

    /**
     * value: "PATIENTVIEW"
     * @const
     */
    "PATIENTVIEW": "PATIENTVIEW",

    /**
     * value: "NHS_CHOICES"
     * @const
     */
    "NHS_CHOICES": "NHS_CHOICES"
};



export default Code;

