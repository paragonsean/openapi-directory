/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactPoint from './ContactPoint';
import GroupFeature from './GroupFeature';
import Link from './Link';
import Location from './Location';
import Lookup from './Lookup';

/**
 * The Group model module.
 * @module model/Group
 * @version 1.0
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * @alias module:model/Group
     */
    constructor() { 
        
        Group.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Group} obj Optional instance to populate.
     * @return {module:model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('address3')) {
                obj['address3'] = ApiClient.convertToType(data['address3'], 'String');
            }
            if (data.hasOwnProperty('childGroups')) {
                obj['childGroups'] = ApiClient.convertToType(data['childGroups'], [Group]);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('contactPoints')) {
                obj['contactPoints'] = ApiClient.convertToType(data['contactPoints'], [ContactPoint]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('fhirResourceId')) {
                obj['fhirResourceId'] = ApiClient.convertToType(data['fhirResourceId'], Object);
            }
            if (data.hasOwnProperty('groupFeatures')) {
                obj['groupFeatures'] = ApiClient.convertToType(data['groupFeatures'], [GroupFeature]);
            }
            if (data.hasOwnProperty('groupType')) {
                obj['groupType'] = Lookup.constructFromObject(data['groupType']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastImportDate')) {
                obj['lastImportDate'] = ApiClient.convertToType(data['lastImportDate'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [Location]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentGroups')) {
                obj['parentGroups'] = ApiClient.convertToType(data['parentGroups'], [Group]);
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('sftpUser')) {
                obj['sftpUser'] = ApiClient.convertToType(data['sftpUser'], 'String');
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
            if (data.hasOwnProperty('visibleToJoin')) {
                obj['visibleToJoin'] = ApiClient.convertToType(data['visibleToJoin'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['address3'] && !(typeof data['address3'] === 'string' || data['address3'] instanceof String)) {
            throw new Error("Expected the field `address3` to be a primitive type in the JSON string but got " + data['address3']);
        }
        if (data['childGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childGroups'])) {
                throw new Error("Expected the field `childGroups` to be an array in the JSON data but got " + data['childGroups']);
            }
            // validate the optional field `childGroups` (array)
            for (const item of data['childGroups']) {
                Group.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['contactPoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contactPoints'])) {
                throw new Error("Expected the field `contactPoints` to be an array in the JSON data but got " + data['contactPoints']);
            }
            // validate the optional field `contactPoints` (array)
            for (const item of data['contactPoints']) {
                ContactPoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fhirResourceId'] && !(typeof data['fhirResourceId'] === 'string' || data['fhirResourceId'] instanceof String)) {
            throw new Error("Expected the field `fhirResourceId` to be a primitive type in the JSON string but got " + data['fhirResourceId']);
        }
        if (data['groupFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupFeatures'])) {
                throw new Error("Expected the field `groupFeatures` to be an array in the JSON data but got " + data['groupFeatures']);
            }
            // validate the optional field `groupFeatures` (array)
            for (const item of data['groupFeatures']) {
                GroupFeature.validateJSON(item);
            };
        }
        // validate the optional field `groupType`
        if (data['groupType']) { // data not null
          Lookup.validateJSON(data['groupType']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                Location.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parentGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parentGroups'])) {
                throw new Error("Expected the field `parentGroups` to be an array in the JSON data but got " + data['parentGroups']);
            }
            // validate the optional field `parentGroups` (array)
            for (const item of data['parentGroups']) {
                Group.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['sftpUser'] && !(typeof data['sftpUser'] === 'string' || data['sftpUser'] instanceof String)) {
            throw new Error("Expected the field `sftpUser` to be a primitive type in the JSON string but got " + data['sftpUser']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }

        return true;
    }


}



/**
 * @member {String} address1
 */
Group.prototype['address1'] = undefined;

/**
 * @member {String} address2
 */
Group.prototype['address2'] = undefined;

/**
 * @member {String} address3
 */
Group.prototype['address3'] = undefined;

/**
 * @member {Array.<module:model/Group>} childGroups
 */
Group.prototype['childGroups'] = undefined;

/**
 * @member {String} code
 */
Group.prototype['code'] = undefined;

/**
 * @member {Array.<module:model/ContactPoint>} contactPoints
 */
Group.prototype['contactPoints'] = undefined;

/**
 * @member {Date} created
 */
Group.prototype['created'] = undefined;

/**
 * @member {Object} fhirResourceId
 */
Group.prototype['fhirResourceId'] = undefined;

/**
 * @member {Array.<module:model/GroupFeature>} groupFeatures
 */
Group.prototype['groupFeatures'] = undefined;

/**
 * @member {module:model/Lookup} groupType
 */
Group.prototype['groupType'] = undefined;

/**
 * @member {Number} id
 */
Group.prototype['id'] = undefined;

/**
 * @member {Date} lastImportDate
 */
Group.prototype['lastImportDate'] = undefined;

/**
 * @member {Date} lastUpdate
 */
Group.prototype['lastUpdate'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
Group.prototype['links'] = undefined;

/**
 * @member {Array.<module:model/Location>} locations
 */
Group.prototype['locations'] = undefined;

/**
 * @member {String} name
 */
Group.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Group>} parentGroups
 */
Group.prototype['parentGroups'] = undefined;

/**
 * @member {String} postcode
 */
Group.prototype['postcode'] = undefined;

/**
 * @member {String} sftpUser
 */
Group.prototype['sftpUser'] = undefined;

/**
 * @member {String} shortName
 */
Group.prototype['shortName'] = undefined;

/**
 * @member {Boolean} visible
 */
Group.prototype['visible'] = undefined;

/**
 * @member {Boolean} visibleToJoin
 */
Group.prototype['visibleToJoin'] = undefined;






export default Group;

