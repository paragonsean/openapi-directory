/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Lookup from './Lookup';

/**
 * The BaseGroup model module.
 * @module model/BaseGroup
 * @version 1.0
 */
class BaseGroup {
    /**
     * Constructs a new <code>BaseGroup</code>.
     * @alias module:model/BaseGroup
     */
    constructor() { 
        
        BaseGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseGroup} obj Optional instance to populate.
     * @return {module:model/BaseGroup} The populated <code>BaseGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseGroup();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('groupType')) {
                obj['groupType'] = Lookup.constructFromObject(data['groupType']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastImportDate')) {
                obj['lastImportDate'] = ApiClient.convertToType(data['lastImportDate'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentCodes')) {
                obj['parentCodes'] = ApiClient.convertToType(data['parentCodes'], ['String']);
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
            if (data.hasOwnProperty('visibleToJoin')) {
                obj['visibleToJoin'] = ApiClient.convertToType(data['visibleToJoin'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `groupType`
        if (data['groupType']) { // data not null
          Lookup.validateJSON(data['groupType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentCodes'])) {
            throw new Error("Expected the field `parentCodes` to be an array in the JSON data but got " + data['parentCodes']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }

        return true;
    }


}



/**
 * @member {String} code
 */
BaseGroup.prototype['code'] = undefined;

/**
 * @member {module:model/Lookup} groupType
 */
BaseGroup.prototype['groupType'] = undefined;

/**
 * @member {Number} id
 */
BaseGroup.prototype['id'] = undefined;

/**
 * @member {Date} lastImportDate
 */
BaseGroup.prototype['lastImportDate'] = undefined;

/**
 * @member {String} name
 */
BaseGroup.prototype['name'] = undefined;

/**
 * @member {Array.<String>} parentCodes
 */
BaseGroup.prototype['parentCodes'] = undefined;

/**
 * @member {String} shortName
 */
BaseGroup.prototype['shortName'] = undefined;

/**
 * @member {Boolean} visible
 */
BaseGroup.prototype['visible'] = undefined;

/**
 * @member {Boolean} visibleToJoin
 */
BaseGroup.prototype['visibleToJoin'] = undefined;






export default BaseGroup;

