/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalStandard from './ExternalStandard';

/**
 * The CodeExternalStandard model module.
 * @module model/CodeExternalStandard
 * @version 1.0
 */
class CodeExternalStandard {
    /**
     * Constructs a new <code>CodeExternalStandard</code>.
     * @alias module:model/CodeExternalStandard
     */
    constructor() { 
        
        CodeExternalStandard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodeExternalStandard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeExternalStandard} obj Optional instance to populate.
     * @return {module:model/CodeExternalStandard} The populated <code>CodeExternalStandard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeExternalStandard();

            if (data.hasOwnProperty('codeString')) {
                obj['codeString'] = ApiClient.convertToType(data['codeString'], 'String');
            }
            if (data.hasOwnProperty('externalStandard')) {
                obj['externalStandard'] = ExternalStandard.constructFromObject(data['externalStandard']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeExternalStandard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeExternalStandard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['codeString'] && !(typeof data['codeString'] === 'string' || data['codeString'] instanceof String)) {
            throw new Error("Expected the field `codeString` to be a primitive type in the JSON string but got " + data['codeString']);
        }
        // validate the optional field `externalStandard`
        if (data['externalStandard']) { // data not null
          ExternalStandard.validateJSON(data['externalStandard']);
        }

        return true;
    }


}



/**
 * @member {String} codeString
 */
CodeExternalStandard.prototype['codeString'] = undefined;

/**
 * @member {module:model/ExternalStandard} externalStandard
 */
CodeExternalStandard.prototype['externalStandard'] = undefined;

/**
 * @member {Number} id
 */
CodeExternalStandard.prototype['id'] = undefined;






export default CodeExternalStandard;

