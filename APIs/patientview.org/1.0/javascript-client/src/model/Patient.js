/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Code from './Code';
import FhirAllergy from './FhirAllergy';
import FhirCondition from './FhirCondition';
import FhirEncounter from './FhirEncounter';
import FhirObservation from './FhirObservation';
import FhirPatient from './FhirPatient';
import FhirPractitioner from './FhirPractitioner';
import Group from './Group';

/**
 * The Patient model module.
 * @module model/Patient
 * @version 1.0
 */
class Patient {
    /**
     * Constructs a new <code>Patient</code>.
     * @alias module:model/Patient
     */
    constructor() { 
        
        Patient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Patient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Patient} obj Optional instance to populate.
     * @return {module:model/Patient} The populated <code>Patient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Patient();

            if (data.hasOwnProperty('diagnosisCodes')) {
                obj['diagnosisCodes'] = ApiClient.convertToType(data['diagnosisCodes'], [Code]);
            }
            if (data.hasOwnProperty('fhirAllergies')) {
                obj['fhirAllergies'] = ApiClient.convertToType(data['fhirAllergies'], [FhirAllergy]);
            }
            if (data.hasOwnProperty('fhirConditions')) {
                obj['fhirConditions'] = ApiClient.convertToType(data['fhirConditions'], [FhirCondition]);
            }
            if (data.hasOwnProperty('fhirEncounters')) {
                obj['fhirEncounters'] = ApiClient.convertToType(data['fhirEncounters'], [FhirEncounter]);
            }
            if (data.hasOwnProperty('fhirObservations')) {
                obj['fhirObservations'] = ApiClient.convertToType(data['fhirObservations'], [FhirObservation]);
            }
            if (data.hasOwnProperty('fhirPatient')) {
                obj['fhirPatient'] = FhirPatient.constructFromObject(data['fhirPatient']);
            }
            if (data.hasOwnProperty('fhirPractitioners')) {
                obj['fhirPractitioners'] = ApiClient.convertToType(data['fhirPractitioners'], [FhirPractitioner]);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Patient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Patient</code>.
     */
    static validateJSON(data) {
        if (data['diagnosisCodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diagnosisCodes'])) {
                throw new Error("Expected the field `diagnosisCodes` to be an array in the JSON data but got " + data['diagnosisCodes']);
            }
            // validate the optional field `diagnosisCodes` (array)
            for (const item of data['diagnosisCodes']) {
                Code.validateJSON(item);
            };
        }
        if (data['fhirAllergies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fhirAllergies'])) {
                throw new Error("Expected the field `fhirAllergies` to be an array in the JSON data but got " + data['fhirAllergies']);
            }
            // validate the optional field `fhirAllergies` (array)
            for (const item of data['fhirAllergies']) {
                FhirAllergy.validateJSON(item);
            };
        }
        if (data['fhirConditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fhirConditions'])) {
                throw new Error("Expected the field `fhirConditions` to be an array in the JSON data but got " + data['fhirConditions']);
            }
            // validate the optional field `fhirConditions` (array)
            for (const item of data['fhirConditions']) {
                FhirCondition.validateJSON(item);
            };
        }
        if (data['fhirEncounters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fhirEncounters'])) {
                throw new Error("Expected the field `fhirEncounters` to be an array in the JSON data but got " + data['fhirEncounters']);
            }
            // validate the optional field `fhirEncounters` (array)
            for (const item of data['fhirEncounters']) {
                FhirEncounter.validateJSON(item);
            };
        }
        if (data['fhirObservations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fhirObservations'])) {
                throw new Error("Expected the field `fhirObservations` to be an array in the JSON data but got " + data['fhirObservations']);
            }
            // validate the optional field `fhirObservations` (array)
            for (const item of data['fhirObservations']) {
                FhirObservation.validateJSON(item);
            };
        }
        // validate the optional field `fhirPatient`
        if (data['fhirPatient']) { // data not null
          FhirPatient.validateJSON(data['fhirPatient']);
        }
        if (data['fhirPractitioners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fhirPractitioners'])) {
                throw new Error("Expected the field `fhirPractitioners` to be an array in the JSON data but got " + data['fhirPractitioners']);
            }
            // validate the optional field `fhirPractitioners` (array)
            for (const item of data['fhirPractitioners']) {
                FhirPractitioner.validateJSON(item);
            };
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Code>} diagnosisCodes
 */
Patient.prototype['diagnosisCodes'] = undefined;

/**
 * @member {Array.<module:model/FhirAllergy>} fhirAllergies
 */
Patient.prototype['fhirAllergies'] = undefined;

/**
 * @member {Array.<module:model/FhirCondition>} fhirConditions
 */
Patient.prototype['fhirConditions'] = undefined;

/**
 * @member {Array.<module:model/FhirEncounter>} fhirEncounters
 */
Patient.prototype['fhirEncounters'] = undefined;

/**
 * @member {Array.<module:model/FhirObservation>} fhirObservations
 */
Patient.prototype['fhirObservations'] = undefined;

/**
 * @member {module:model/FhirPatient} fhirPatient
 */
Patient.prototype['fhirPatient'] = undefined;

/**
 * @member {Array.<module:model/FhirPractitioner>} fhirPractitioners
 */
Patient.prototype['fhirPractitioners'] = undefined;

/**
 * @member {module:model/Group} group
 */
Patient.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
Patient.prototype['id'] = undefined;






export default Patient;

