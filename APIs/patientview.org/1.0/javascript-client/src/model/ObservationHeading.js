/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObservationHeadingGroup from './ObservationHeadingGroup';

/**
 * The ObservationHeading model module.
 * @module model/ObservationHeading
 * @version 1.0
 */
class ObservationHeading {
    /**
     * Constructs a new <code>ObservationHeading</code>.
     * @alias module:model/ObservationHeading
     */
    constructor() { 
        
        ObservationHeading.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObservationHeading</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObservationHeading} obj Optional instance to populate.
     * @return {module:model/ObservationHeading} The populated <code>ObservationHeading</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObservationHeading();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('decimalPlaces')) {
                obj['decimalPlaces'] = ApiClient.convertToType(data['decimalPlaces'], 'Number');
            }
            if (data.hasOwnProperty('defaultPanel')) {
                obj['defaultPanel'] = ApiClient.convertToType(data['defaultPanel'], 'Number');
            }
            if (data.hasOwnProperty('defaultPanelOrder')) {
                obj['defaultPanelOrder'] = ApiClient.convertToType(data['defaultPanelOrder'], 'Number');
            }
            if (data.hasOwnProperty('heading')) {
                obj['heading'] = ApiClient.convertToType(data['heading'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('infoLink')) {
                obj['infoLink'] = ApiClient.convertToType(data['infoLink'], 'String');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('maxGraph')) {
                obj['maxGraph'] = ApiClient.convertToType(data['maxGraph'], 'Number');
            }
            if (data.hasOwnProperty('minGraph')) {
                obj['minGraph'] = ApiClient.convertToType(data['minGraph'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('normalRange')) {
                obj['normalRange'] = ApiClient.convertToType(data['normalRange'], 'String');
            }
            if (data.hasOwnProperty('observationHeadingGroups')) {
                obj['observationHeadingGroups'] = ApiClient.convertToType(data['observationHeadingGroups'], [ObservationHeadingGroup]);
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObservationHeading</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObservationHeading</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['heading'] && !(typeof data['heading'] === 'string' || data['heading'] instanceof String)) {
            throw new Error("Expected the field `heading` to be a primitive type in the JSON string but got " + data['heading']);
        }
        // ensure the json data is a string
        if (data['infoLink'] && !(typeof data['infoLink'] === 'string' || data['infoLink'] instanceof String)) {
            throw new Error("Expected the field `infoLink` to be a primitive type in the JSON string but got " + data['infoLink']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['normalRange'] && !(typeof data['normalRange'] === 'string' || data['normalRange'] instanceof String)) {
            throw new Error("Expected the field `normalRange` to be a primitive type in the JSON string but got " + data['normalRange']);
        }
        if (data['observationHeadingGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['observationHeadingGroups'])) {
                throw new Error("Expected the field `observationHeadingGroups` to be an array in the JSON data but got " + data['observationHeadingGroups']);
            }
            // validate the optional field `observationHeadingGroups` (array)
            for (const item of data['observationHeadingGroups']) {
                ObservationHeadingGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }

        return true;
    }


}



/**
 * @member {String} code
 */
ObservationHeading.prototype['code'] = undefined;

/**
 * @member {Date} created
 */
ObservationHeading.prototype['created'] = undefined;

/**
 * @member {Number} decimalPlaces
 */
ObservationHeading.prototype['decimalPlaces'] = undefined;

/**
 * @member {Number} defaultPanel
 */
ObservationHeading.prototype['defaultPanel'] = undefined;

/**
 * @member {Number} defaultPanelOrder
 */
ObservationHeading.prototype['defaultPanelOrder'] = undefined;

/**
 * @member {String} heading
 */
ObservationHeading.prototype['heading'] = undefined;

/**
 * @member {Number} id
 */
ObservationHeading.prototype['id'] = undefined;

/**
 * @member {String} infoLink
 */
ObservationHeading.prototype['infoLink'] = undefined;

/**
 * @member {Date} lastUpdate
 */
ObservationHeading.prototype['lastUpdate'] = undefined;

/**
 * @member {Number} maxGraph
 */
ObservationHeading.prototype['maxGraph'] = undefined;

/**
 * @member {Number} minGraph
 */
ObservationHeading.prototype['minGraph'] = undefined;

/**
 * @member {String} name
 */
ObservationHeading.prototype['name'] = undefined;

/**
 * @member {String} normalRange
 */
ObservationHeading.prototype['normalRange'] = undefined;

/**
 * @member {Array.<module:model/ObservationHeadingGroup>} observationHeadingGroups
 */
ObservationHeading.prototype['observationHeadingGroups'] = undefined;

/**
 * @member {String} units
 */
ObservationHeading.prototype['units'] = undefined;






export default ObservationHeading;

