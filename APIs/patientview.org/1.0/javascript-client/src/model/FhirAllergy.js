/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';

/**
 * The FhirAllergy model module.
 * @module model/FhirAllergy
 * @version 1.0
 */
class FhirAllergy {
    /**
     * Constructs a new <code>FhirAllergy</code>.
     * @alias module:model/FhirAllergy
     */
    constructor() { 
        
        FhirAllergy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirAllergy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirAllergy} obj Optional instance to populate.
     * @return {module:model/FhirAllergy} The populated <code>FhirAllergy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirAllergy();

            if (data.hasOwnProperty('confidenceLevel')) {
                obj['confidenceLevel'] = ApiClient.convertToType(data['confidenceLevel'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('infoSource')) {
                obj['infoSource'] = ApiClient.convertToType(data['infoSource'], 'String');
            }
            if (data.hasOwnProperty('reaction')) {
                obj['reaction'] = ApiClient.convertToType(data['reaction'], 'String');
            }
            if (data.hasOwnProperty('recordedDate')) {
                obj['recordedDate'] = ApiClient.convertToType(data['recordedDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('substance')) {
                obj['substance'] = ApiClient.convertToType(data['substance'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirAllergy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirAllergy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['confidenceLevel'] && !(typeof data['confidenceLevel'] === 'string' || data['confidenceLevel'] instanceof String)) {
            throw new Error("Expected the field `confidenceLevel` to be a primitive type in the JSON string but got " + data['confidenceLevel']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['infoSource'] && !(typeof data['infoSource'] === 'string' || data['infoSource'] instanceof String)) {
            throw new Error("Expected the field `infoSource` to be a primitive type in the JSON string but got " + data['infoSource']);
        }
        // ensure the json data is a string
        if (data['reaction'] && !(typeof data['reaction'] === 'string' || data['reaction'] instanceof String)) {
            throw new Error("Expected the field `reaction` to be a primitive type in the JSON string but got " + data['reaction']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['substance'] && !(typeof data['substance'] === 'string' || data['substance'] instanceof String)) {
            throw new Error("Expected the field `substance` to be a primitive type in the JSON string but got " + data['substance']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} confidenceLevel
 */
FhirAllergy.prototype['confidenceLevel'] = undefined;

/**
 * @member {module:model/Group} group
 */
FhirAllergy.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
FhirAllergy.prototype['id'] = undefined;

/**
 * @member {String} identifier
 */
FhirAllergy.prototype['identifier'] = undefined;

/**
 * @member {String} infoSource
 */
FhirAllergy.prototype['infoSource'] = undefined;

/**
 * @member {String} reaction
 */
FhirAllergy.prototype['reaction'] = undefined;

/**
 * @member {Date} recordedDate
 */
FhirAllergy.prototype['recordedDate'] = undefined;

/**
 * @member {String} status
 */
FhirAllergy.prototype['status'] = undefined;

/**
 * @member {String} substance
 */
FhirAllergy.prototype['substance'] = undefined;

/**
 * @member {String} type
 */
FhirAllergy.prototype['type'] = undefined;






export default FhirAllergy;

