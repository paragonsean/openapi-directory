/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';

/**
 * The FhirObservation model module.
 * @module model/FhirObservation
 * @version 1.0
 */
class FhirObservation {
    /**
     * Constructs a new <code>FhirObservation</code>.
     * @alias module:model/FhirObservation
     */
    constructor() { 
        
        FhirObservation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirObservation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirObservation} obj Optional instance to populate.
     * @return {module:model/FhirObservation} The populated <code>FhirObservation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirObservation();

            if (data.hasOwnProperty('applies')) {
                obj['applies'] = ApiClient.convertToType(data['applies'], 'Date');
            }
            if (data.hasOwnProperty('bodySite')) {
                obj['bodySite'] = ApiClient.convertToType(data['bodySite'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('comparator')) {
                obj['comparator'] = ApiClient.convertToType(data['comparator'], 'String');
            }
            if (data.hasOwnProperty('diagram')) {
                obj['diagram'] = ApiClient.convertToType(data['diagram'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('temporaryUuid')) {
                obj['temporaryUuid'] = ApiClient.convertToType(data['temporaryUuid'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirObservation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirObservation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bodySite'] && !(typeof data['bodySite'] === 'string' || data['bodySite'] instanceof String)) {
            throw new Error("Expected the field `bodySite` to be a primitive type in the JSON string but got " + data['bodySite']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['comparator'] && !(typeof data['comparator'] === 'string' || data['comparator'] instanceof String)) {
            throw new Error("Expected the field `comparator` to be a primitive type in the JSON string but got " + data['comparator']);
        }
        // ensure the json data is a string
        if (data['diagram'] && !(typeof data['diagram'] === 'string' || data['diagram'] instanceof String)) {
            throw new Error("Expected the field `diagram` to be a primitive type in the JSON string but got " + data['diagram']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['temporaryUuid'] && !(typeof data['temporaryUuid'] === 'string' || data['temporaryUuid'] instanceof String)) {
            throw new Error("Expected the field `temporaryUuid` to be a primitive type in the JSON string but got " + data['temporaryUuid']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {Date} applies
 */
FhirObservation.prototype['applies'] = undefined;

/**
 * @member {String} bodySite
 */
FhirObservation.prototype['bodySite'] = undefined;

/**
 * @member {String} comments
 */
FhirObservation.prototype['comments'] = undefined;

/**
 * @member {String} comparator
 */
FhirObservation.prototype['comparator'] = undefined;

/**
 * @member {String} diagram
 */
FhirObservation.prototype['diagram'] = undefined;

/**
 * @member {module:model/Group} group
 */
FhirObservation.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
FhirObservation.prototype['id'] = undefined;

/**
 * @member {String} identifier
 */
FhirObservation.prototype['identifier'] = undefined;

/**
 * @member {String} location
 */
FhirObservation.prototype['location'] = undefined;

/**
 * @member {String} name
 */
FhirObservation.prototype['name'] = undefined;

/**
 * @member {String} temporaryUuid
 */
FhirObservation.prototype['temporaryUuid'] = undefined;

/**
 * @member {String} units
 */
FhirObservation.prototype['units'] = undefined;

/**
 * @member {String} value
 */
FhirObservation.prototype['value'] = undefined;






export default FhirObservation;

