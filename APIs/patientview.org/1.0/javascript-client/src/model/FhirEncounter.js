/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FhirObservation from './FhirObservation';
import FhirProcedure from './FhirProcedure';
import Group from './Group';
import Link from './Link';

/**
 * The FhirEncounter model module.
 * @module model/FhirEncounter
 * @version 1.0
 */
class FhirEncounter {
    /**
     * Constructs a new <code>FhirEncounter</code>.
     * @alias module:model/FhirEncounter
     */
    constructor() { 
        
        FhirEncounter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FhirEncounter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FhirEncounter} obj Optional instance to populate.
     * @return {module:model/FhirEncounter} The populated <code>FhirEncounter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FhirEncounter();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('encounterType')) {
                obj['encounterType'] = ApiClient.convertToType(data['encounterType'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
            if (data.hasOwnProperty('observations')) {
                obj['observations'] = ApiClient.convertToType(data['observations'], [FhirObservation]);
            }
            if (data.hasOwnProperty('procedures')) {
                obj['procedures'] = ApiClient.convertToType(data['procedures'], [FhirProcedure]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FhirEncounter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FhirEncounter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encounterType'] && !(typeof data['encounterType'] === 'string' || data['encounterType'] instanceof String)) {
            throw new Error("Expected the field `encounterType` to be a primitive type in the JSON string but got " + data['encounterType']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }
        if (data['observations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['observations'])) {
                throw new Error("Expected the field `observations` to be an array in the JSON data but got " + data['observations']);
            }
            // validate the optional field `observations` (array)
            for (const item of data['observations']) {
                FhirObservation.validateJSON(item);
            };
        }
        if (data['procedures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['procedures'])) {
                throw new Error("Expected the field `procedures` to be an array in the JSON data but got " + data['procedures']);
            }
            // validate the optional field `procedures` (array)
            for (const item of data['procedures']) {
                FhirProcedure.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Date} date
 */
FhirEncounter.prototype['date'] = undefined;

/**
 * @member {String} encounterType
 */
FhirEncounter.prototype['encounterType'] = undefined;

/**
 * @member {module:model/Group} group
 */
FhirEncounter.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
FhirEncounter.prototype['id'] = undefined;

/**
 * @member {String} identifier
 */
FhirEncounter.prototype['identifier'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
FhirEncounter.prototype['links'] = undefined;

/**
 * @member {Array.<module:model/FhirObservation>} observations
 */
FhirEncounter.prototype['observations'] = undefined;

/**
 * @member {Array.<module:model/FhirProcedure>} procedures
 */
FhirEncounter.prototype['procedures'] = undefined;

/**
 * @member {String} status
 */
FhirEncounter.prototype['status'] = undefined;






export default FhirEncounter;

