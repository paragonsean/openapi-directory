/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FhirObservation from '../model/FhirObservation';
import FhirObservationPage from '../model/FhirObservationPage';

/**
* ObservationController service.
* @module api/ObservationControllerApi
* @version 1.0
*/
export default class ObservationControllerApi {

    /**
    * Constructs a new ObservationControllerApi. 
    * @alias module:api/ObservationControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getObservationsByCode operation.
     * @callback module:api/ObservationControllerApi~getObservationsByCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FhirObservation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Observations of a Certain Type For a User
     * Given a User ID and observation code, retrieve all observations.
     * @param {Number} userId userId
     * @param {String} code code
     * @param {module:api/ObservationControllerApi~getObservationsByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FhirObservation>}
     */
    getObservationsByCode(userId, code, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getObservationsByCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getObservationsByCode");
      }

      let pathParams = {
        'userId': userId,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FhirObservation];
      return this.apiClient.callApi(
        '/user/{userId}/observations/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObservationsByCodes operation.
     * @callback module:api/ObservationControllerApi~getObservationsByCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FhirObservationPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Observations of Multiple Types For a User
     * Given a User ID and search parameters, retrieve a page of observations.
     * @param {Number} userId userId
     * @param {Array.<String>} code code
     * @param {Number} limit limit
     * @param {Number} offset offset
     * @param {String} orderDirection orderDirection
     * @param {module:api/ObservationControllerApi~getObservationsByCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FhirObservationPage}
     */
    getObservationsByCodes(userId, code, limit, offset, orderDirection, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getObservationsByCodes");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getObservationsByCodes");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getObservationsByCodes");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getObservationsByCodes");
      }
      // verify the required parameter 'orderDirection' is set
      if (orderDirection === undefined || orderDirection === null) {
        throw new Error("Missing the required parameter 'orderDirection' when calling getObservationsByCodes");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'code': this.apiClient.buildCollectionParam(code, 'multi'),
        'limit': limit,
        'offset': offset,
        'orderDirection': orderDirection
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FhirObservationPage;
      return this.apiClient.callApi(
        '/user/{userId}/observations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPatientEnteredObservationsByCode operation.
     * @callback module:api/ObservationControllerApi~getPatientEnteredObservationsByCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FhirObservation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get patient entered Observations of a Certain Type For a User
     * Given a User ID and observation code, retrieve patient entered observations.
     * @param {Number} userId userId
     * @param {String} code code
     * @param {module:api/ObservationControllerApi~getPatientEnteredObservationsByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FhirObservation>}
     */
    getPatientEnteredObservationsByCode(userId, code, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPatientEnteredObservationsByCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getPatientEnteredObservationsByCode");
      }

      let pathParams = {
        'userId': userId,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FhirObservation];
      return this.apiClient.callApi(
        '/user/{userId}/observations/{code}/patiententered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
