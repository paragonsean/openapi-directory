/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Credentials from '../model/Credentials';
import User from '../model/User';
import UserToken from '../model/UserToken';

/**
* AuthController service.
* @module api/AuthControllerApi
* @version 1.0
*/
export default class AuthControllerApi {

    /**
    * Constructs a new AuthControllerApi. 
    * @alias module:api/AuthControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBasicUserInformation operation.
     * @callback module:api/AuthControllerApi~getBasicUserInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Basic User Information
     * Once logged in and have a token, get basic user information including group role membership
     * @param {String} token token
     * @param {module:api/AuthControllerApi~getBasicUserInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getBasicUserInformation(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBasicUserInformation");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/{token}/basicuserinformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logIn operation.
     * @callback module:api/AuthControllerApi~logInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log In
     * Authenticate using username and password, returns token, which must be added to X-Auth-Token in header of all future requests
     * @param {Object} opts Optional parameters
     * @param {module:model/Credentials} [credentials] credentials
     * @param {module:api/AuthControllerApi~logInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    logIn(opts, callback) {
      opts = opts || {};
      let postBody = opts['credentials'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logOut operation.
     * @callback module:api/AuthControllerApi~logOutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log Out
     * Log Out
     * @param {String} token token
     * @param {module:api/AuthControllerApi~logOutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logOut(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling logOut");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/logout/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
