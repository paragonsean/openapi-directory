/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ObservationHeading from '../model/ObservationHeading';

/**
* ObservationHeadingController service.
* @module api/ObservationHeadingControllerApi
* @version 1.0
*/
export default class ObservationHeadingControllerApi {

    /**
    * Constructs a new ObservationHeadingControllerApi. 
    * @alias module:api/ObservationHeadingControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAvailableObservationHeadings operation.
     * @callback module:api/ObservationHeadingControllerApi~getAvailableObservationHeadingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ObservationHeading>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Observations Types For a User
     * Given a User ID retrieve a list of available observation types for that user (where they have observation data).
     * @param {Number} userId userId
     * @param {module:api/ObservationHeadingControllerApi~getAvailableObservationHeadingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ObservationHeading>}
     */
    getAvailableObservationHeadings(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAvailableObservationHeadings");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ObservationHeading];
      return this.apiClient.callApi(
        '/user/{userId}/availableobservationheadings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPatientEnteredObservationHeadings operation.
     * @callback module:api/ObservationHeadingControllerApi~getPatientEnteredObservationHeadingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ObservationHeading>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Patient Entered Observations Types For a User
     * Given a User ID retrieve a list of available observation types for that user (where they have patient entered observation data).
     * @param {Number} userId userId
     * @param {module:api/ObservationHeadingControllerApi~getPatientEnteredObservationHeadingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ObservationHeading>}
     */
    getPatientEnteredObservationHeadings(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPatientEnteredObservationHeadings");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ObservationHeading];
      return this.apiClient.callApi(
        '/user/{userId}/patiententeredobservationheadings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
