/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Code from '../model/Code';
import LookupType from '../model/LookupType';
import PatientManagement from '../model/PatientManagement';

/**
* PatientManagementController service.
* @module api/PatientManagementControllerApi
* @version 1.0
*/
export default class PatientManagementControllerApi {

    /**
    * Constructs a new PatientManagementControllerApi. 
    * @alias module:api/PatientManagementControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPatientManagement operation.
     * @callback module:api/PatientManagementControllerApi~getPatientManagementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatientManagement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPatientManagement
     * getPatientManagement
     * @param {Number} userId userId
     * @param {Number} groupId groupId
     * @param {Number} identifierId identifierId
     * @param {module:api/PatientManagementControllerApi~getPatientManagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatientManagement}
     */
    getPatientManagement(userId, groupId, identifierId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPatientManagement");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getPatientManagement");
      }
      // verify the required parameter 'identifierId' is set
      if (identifierId === undefined || identifierId === null) {
        throw new Error("Missing the required parameter 'identifierId' when calling getPatientManagement");
      }

      let pathParams = {
        'userId': userId,
        'groupId': groupId,
        'identifierId': identifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PatientManagement;
      return this.apiClient.callApi(
        '/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPatientManagementDiagnoses operation.
     * @callback module:api/PatientManagementControllerApi~getPatientManagementDiagnosesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Code>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPatientManagementDiagnoses
     * getPatientManagementDiagnoses
     * @param {module:api/PatientManagementControllerApi~getPatientManagementDiagnosesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Code>}
     */
    getPatientManagementDiagnoses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Code];
      return this.apiClient.callApi(
        '/patientmanagement/diagnoses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPatientManagementLookupTypes operation.
     * @callback module:api/PatientManagementControllerApi~getPatientManagementLookupTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LookupType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPatientManagementLookupTypes
     * getPatientManagementLookupTypes
     * @param {module:api/PatientManagementControllerApi~getPatientManagementLookupTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LookupType>}
     */
    getPatientManagementLookupTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LookupType];
      return this.apiClient.callApi(
        '/patientmanagement/lookuptypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savePatientManagement operation.
     * @callback module:api/PatientManagementControllerApi~savePatientManagementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * savePatientManagement
     * savePatientManagement
     * @param {Number} userId userId
     * @param {Number} groupId groupId
     * @param {Number} identifierId identifierId
     * @param {Object} opts Optional parameters
     * @param {module:model/PatientManagement} [patientManagement] patientManagement
     * @param {module:api/PatientManagementControllerApi~savePatientManagementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    savePatientManagement(userId, groupId, identifierId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patientManagement'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling savePatientManagement");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling savePatientManagement");
      }
      // verify the required parameter 'identifierId' is set
      if (identifierId === undefined || identifierId === null) {
        throw new Error("Missing the required parameter 'identifierId' when calling savePatientManagement");
      }

      let pathParams = {
        'userId': userId,
        'groupId': groupId,
        'identifierId': identifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savePatientManagementSurgeries operation.
     * @callback module:api/PatientManagementControllerApi~savePatientManagementSurgeriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * savePatientManagementSurgeries
     * savePatientManagementSurgeries
     * @param {Number} userId userId
     * @param {Number} groupId groupId
     * @param {Number} identifierId identifierId
     * @param {Object} opts Optional parameters
     * @param {module:model/PatientManagement} [patientManagement] patientManagement
     * @param {module:api/PatientManagementControllerApi~savePatientManagementSurgeriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    savePatientManagementSurgeries(userId, groupId, identifierId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patientManagement'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling savePatientManagementSurgeries");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling savePatientManagementSurgeries");
      }
      // verify the required parameter 'identifierId' is set
      if (identifierId === undefined || identifierId === null) {
        throw new Error("Missing the required parameter 'identifierId' when calling savePatientManagementSurgeries");
      }

      let pathParams = {
        'userId': userId,
        'groupId': groupId,
        'identifierId': identifierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/patientmanagement/{userId}/group/{groupId}/identifier/{identifierId}/surgeries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatePatientManagement operation.
     * @callback module:api/PatientManagementControllerApi~validatePatientManagementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validatePatientManagement
     * validatePatientManagement
     * @param {Object} opts Optional parameters
     * @param {module:model/PatientManagement} [patientManagement] patientManagement
     * @param {module:api/PatientManagementControllerApi~validatePatientManagementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validatePatientManagement(opts, callback) {
      opts = opts || {};
      let postBody = opts['patientManagement'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/patientmanagement/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
