/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PatientView);
  }
}(this, function(expect, PatientView) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PatientView.UserToken();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserToken', function() {
    it('should create an instance of UserToken', function() {
      // uncomment below and update the code to test UserToken
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be.a(PatientView.UserToken);
    });

    it('should have the property auditActions (base name: "auditActions")', function() {
      // uncomment below and update the code to test the property auditActions
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property checkSecretWord (base name: "checkSecretWord")', function() {
      // uncomment below and update the code to test the property checkSecretWord
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property externalStandards (base name: "externalStandards")', function() {
      // uncomment below and update the code to test the property externalStandards
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property groupFeatures (base name: "groupFeatures")', function() {
      // uncomment below and update the code to test the property groupFeatures
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property groupMessagingEnabled (base name: "groupMessagingEnabled")', function() {
      // uncomment below and update the code to test the property groupMessagingEnabled
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property mustSetSecretWord (base name: "mustSetSecretWord")', function() {
      // uncomment below and update the code to test the property mustSetSecretWord
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property patientFeatures (base name: "patientFeatures")', function() {
      // uncomment below and update the code to test the property patientFeatures
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property patientMessagingFeatureTypes (base name: "patientMessagingFeatureTypes")', function() {
      // uncomment below and update the code to test the property patientMessagingFeatureTypes
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property patientRoles (base name: "patientRoles")', function() {
      // uncomment below and update the code to test the property patientRoles
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property routes (base name: "routes")', function() {
      // uncomment below and update the code to test the property routes
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property secretWord (base name: "secretWord")', function() {
      // uncomment below and update the code to test the property secretWord
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property secretWordChoices (base name: "secretWordChoices")', function() {
      // uncomment below and update the code to test the property secretWordChoices
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property secretWordIndexes (base name: "secretWordIndexes")', function() {
      // uncomment below and update the code to test the property secretWordIndexes
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property secretWordSalt (base name: "secretWordSalt")', function() {
      // uncomment below and update the code to test the property secretWordSalt
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property secretWordToken (base name: "secretWordToken")', function() {
      // uncomment below and update the code to test the property secretWordToken
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property securityRoles (base name: "securityRoles")', function() {
      // uncomment below and update the code to test the property securityRoles
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property shouldEnterCondition (base name: "shouldEnterCondition")', function() {
      // uncomment below and update the code to test the property shouldEnterCondition
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property staffFeatures (base name: "staffFeatures")', function() {
      // uncomment below and update the code to test the property staffFeatures
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property staffRoles (base name: "staffRoles")', function() {
      // uncomment below and update the code to test the property staffRoles
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property userFeatures (base name: "userFeatures")', function() {
      // uncomment below and update the code to test the property userFeatures
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

    it('should have the property userGroups (base name: "userGroups")', function() {
      // uncomment below and update the code to test the property userGroups
      //var instance = new PatientView.UserToken();
      //expect(instance).to.be();
    });

  });

}));
