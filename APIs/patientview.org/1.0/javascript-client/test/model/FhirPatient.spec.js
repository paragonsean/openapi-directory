/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PatientView);
  }
}(this, function(expect, PatientView) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PatientView.FhirPatient();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FhirPatient', function() {
    it('should create an instance of FhirPatient', function() {
      // uncomment below and update the code to test FhirPatient
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be.a(PatientView.FhirPatient);
    });

    it('should have the property address1 (base name: "address1")', function() {
      // uncomment below and update the code to test the property address1
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property address2 (base name: "address2")', function() {
      // uncomment below and update the code to test the property address2
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property address3 (base name: "address3")', function() {
      // uncomment below and update the code to test the property address3
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property address4 (base name: "address4")', function() {
      // uncomment below and update the code to test the property address4
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property contacts (base name: "contacts")', function() {
      // uncomment below and update the code to test the property contacts
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property dateOfBirth (base name: "dateOfBirth")', function() {
      // uncomment below and update the code to test the property dateOfBirth
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property dateOfBirthNoTime (base name: "dateOfBirthNoTime")', function() {
      // uncomment below and update the code to test the property dateOfBirthNoTime
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property forename (base name: "forename")', function() {
      // uncomment below and update the code to test the property forename
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property groupCode (base name: "groupCode")', function() {
      // uncomment below and update the code to test the property groupCode
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property identifier (base name: "identifier")', function() {
      // uncomment below and update the code to test the property identifier
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property identifiers (base name: "identifiers")', function() {
      // uncomment below and update the code to test the property identifiers
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property postcode (base name: "postcode")', function() {
      // uncomment below and update the code to test the property postcode
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property practitioners (base name: "practitioners")', function() {
      // uncomment below and update the code to test the property practitioners
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

    it('should have the property surname (base name: "surname")', function() {
      // uncomment below and update the code to test the property surname
      //var instance = new PatientView.FhirPatient();
      //expect(instance).to.be();
    });

  });

}));
