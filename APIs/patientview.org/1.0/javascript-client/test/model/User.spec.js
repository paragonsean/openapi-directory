/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PatientView);
  }
}(this, function(expect, PatientView) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PatientView.User();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('User', function() {
    it('should create an instance of User', function() {
      // uncomment below and update the code to test User
      //var instance = new PatientView.User();
      //expect(instance).to.be.a(PatientView.User);
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property canSwitchUser (base name: "canSwitchUser")', function() {
      // uncomment below and update the code to test the property canSwitchUser
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property changePassword (base name: "changePassword")', function() {
      // uncomment below and update the code to test the property changePassword
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property contactNumber (base name: "contactNumber")', function() {
      // uncomment below and update the code to test the property contactNumber
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property currentLogin (base name: "currentLogin")', function() {
      // uncomment below and update the code to test the property currentLogin
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property currentLoginIpAddress (base name: "currentLoginIpAddress")', function() {
      // uncomment below and update the code to test the property currentLoginIpAddress
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property dateOfBirth (base name: "dateOfBirth")', function() {
      // uncomment below and update the code to test the property dateOfBirth
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property dummy (base name: "dummy")', function() {
      // uncomment below and update the code to test the property dummy
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property emailVerified (base name: "emailVerified")', function() {
      // uncomment below and update the code to test the property emailVerified
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property forename (base name: "forename")', function() {
      // uncomment below and update the code to test the property forename
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property groupRoles (base name: "groupRoles")', function() {
      // uncomment below and update the code to test the property groupRoles
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property hideSecretWordNotification (base name: "hideSecretWordNotification")', function() {
      // uncomment below and update the code to test the property hideSecretWordNotification
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property identifiers (base name: "identifiers")', function() {
      // uncomment below and update the code to test the property identifiers
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property lastLogin (base name: "lastLogin")', function() {
      // uncomment below and update the code to test the property lastLogin
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property lastLoginIpAddress (base name: "lastLoginIpAddress")', function() {
      // uncomment below and update the code to test the property lastLoginIpAddress
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property latestDataReceivedBy (base name: "latestDataReceivedBy")', function() {
      // uncomment below and update the code to test the property latestDataReceivedBy
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property latestDataReceivedDate (base name: "latestDataReceivedDate")', function() {
      // uncomment below and update the code to test the property latestDataReceivedDate
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property locked (base name: "locked")', function() {
      // uncomment below and update the code to test the property locked
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property picture (base name: "picture")', function() {
      // uncomment below and update the code to test the property picture
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property roleDescription (base name: "roleDescription")', function() {
      // uncomment below and update the code to test the property roleDescription
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property secretWordIsSet (base name: "secretWordIsSet")', function() {
      // uncomment below and update the code to test the property secretWordIsSet
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property surname (base name: "surname")', function() {
      // uncomment below and update the code to test the property surname
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property userFeatures (base name: "userFeatures")', function() {
      // uncomment below and update the code to test the property userFeatures
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new PatientView.User();
      //expect(instance).to.be();
    });

  });

}));
