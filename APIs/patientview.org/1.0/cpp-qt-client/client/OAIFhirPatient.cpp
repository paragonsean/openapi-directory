/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirPatient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirPatient::OAIFhirPatient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirPatient::OAIFhirPatient() {
    this->initializeModel();
}

OAIFhirPatient::~OAIFhirPatient() {}

void OAIFhirPatient::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_date_of_birth_no_time_isSet = false;
    m_date_of_birth_no_time_isValid = false;

    m_forename_isSet = false;
    m_forename_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_group_code_isSet = false;
    m_group_code_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_practitioners_isSet = false;
    m_practitioners_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;
}

void OAIFhirPatient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirPatient::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("address3")]);
    m_address3_isSet = !json[QString("address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("address4")]);
    m_address4_isSet = !json[QString("address4")].isNull() && m_address4_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_date_of_birth_no_time_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth_no_time, json[QString("dateOfBirthNoTime")]);
    m_date_of_birth_no_time_isSet = !json[QString("dateOfBirthNoTime")].isNull() && m_date_of_birth_no_time_isValid;

    m_forename_isValid = ::OpenAPI::fromJsonValue(m_forename, json[QString("forename")]);
    m_forename_isSet = !json[QString("forename")].isNull() && m_forename_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_group_code_isValid = ::OpenAPI::fromJsonValue(m_group_code, json[QString("groupCode")]);
    m_group_code_isSet = !json[QString("groupCode")].isNull() && m_group_code_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_practitioners_isValid = ::OpenAPI::fromJsonValue(m_practitioners, json[QString("practitioners")]);
    m_practitioners_isSet = !json[QString("practitioners")].isNull() && m_practitioners_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;
}

QString OAIFhirPatient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirPatient::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_date_of_birth_no_time_isSet) {
        obj.insert(QString("dateOfBirthNoTime"), ::OpenAPI::toJsonValue(m_date_of_birth_no_time));
    }
    if (m_forename_isSet) {
        obj.insert(QString("forename"), ::OpenAPI::toJsonValue(m_forename));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_group_code_isSet) {
        obj.insert(QString("groupCode"), ::OpenAPI::toJsonValue(m_group_code));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_identifiers.size() > 0) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_practitioners.size() > 0) {
        obj.insert(QString("practitioners"), ::OpenAPI::toJsonValue(m_practitioners));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    return obj;
}

QString OAIFhirPatient::getAddress1() const {
    return m_address1;
}
void OAIFhirPatient::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIFhirPatient::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIFhirPatient::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIFhirPatient::getAddress2() const {
    return m_address2;
}
void OAIFhirPatient::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIFhirPatient::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIFhirPatient::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIFhirPatient::getAddress3() const {
    return m_address3;
}
void OAIFhirPatient::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIFhirPatient::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIFhirPatient::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAIFhirPatient::getAddress4() const {
    return m_address4;
}
void OAIFhirPatient::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAIFhirPatient::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAIFhirPatient::is_address4_Valid() const{
    return m_address4_isValid;
}

QList<OAIFhirContact> OAIFhirPatient::getContacts() const {
    return m_contacts;
}
void OAIFhirPatient::setContacts(const QList<OAIFhirContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIFhirPatient::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIFhirPatient::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QDateTime OAIFhirPatient::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIFhirPatient::setDateOfBirth(const QDateTime &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIFhirPatient::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIFhirPatient::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIFhirPatient::getDateOfBirthNoTime() const {
    return m_date_of_birth_no_time;
}
void OAIFhirPatient::setDateOfBirthNoTime(const QString &date_of_birth_no_time) {
    m_date_of_birth_no_time = date_of_birth_no_time;
    m_date_of_birth_no_time_isSet = true;
}

bool OAIFhirPatient::is_date_of_birth_no_time_Set() const{
    return m_date_of_birth_no_time_isSet;
}

bool OAIFhirPatient::is_date_of_birth_no_time_Valid() const{
    return m_date_of_birth_no_time_isValid;
}

QString OAIFhirPatient::getForename() const {
    return m_forename;
}
void OAIFhirPatient::setForename(const QString &forename) {
    m_forename = forename;
    m_forename_isSet = true;
}

bool OAIFhirPatient::is_forename_Set() const{
    return m_forename_isSet;
}

bool OAIFhirPatient::is_forename_Valid() const{
    return m_forename_isValid;
}

QString OAIFhirPatient::getGender() const {
    return m_gender;
}
void OAIFhirPatient::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIFhirPatient::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIFhirPatient::is_gender_Valid() const{
    return m_gender_isValid;
}

OAIGroup OAIFhirPatient::getGroup() const {
    return m_group;
}
void OAIFhirPatient::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFhirPatient::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFhirPatient::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIFhirPatient::getGroupCode() const {
    return m_group_code;
}
void OAIFhirPatient::setGroupCode(const QString &group_code) {
    m_group_code = group_code;
    m_group_code_isSet = true;
}

bool OAIFhirPatient::is_group_code_Set() const{
    return m_group_code_isSet;
}

bool OAIFhirPatient::is_group_code_Valid() const{
    return m_group_code_isValid;
}

QString OAIFhirPatient::getIdentifier() const {
    return m_identifier;
}
void OAIFhirPatient::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFhirPatient::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFhirPatient::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList<OAIFhirIdentifier> OAIFhirPatient::getIdentifiers() const {
    return m_identifiers;
}
void OAIFhirPatient::setIdentifiers(const QList<OAIFhirIdentifier> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIFhirPatient::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIFhirPatient::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIFhirPatient::getPostcode() const {
    return m_postcode;
}
void OAIFhirPatient::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIFhirPatient::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIFhirPatient::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QList<OAIFhirPractitioner> OAIFhirPatient::getPractitioners() const {
    return m_practitioners;
}
void OAIFhirPatient::setPractitioners(const QList<OAIFhirPractitioner> &practitioners) {
    m_practitioners = practitioners;
    m_practitioners_isSet = true;
}

bool OAIFhirPatient::is_practitioners_Set() const{
    return m_practitioners_isSet;
}

bool OAIFhirPatient::is_practitioners_Valid() const{
    return m_practitioners_isValid;
}

QString OAIFhirPatient::getSurname() const {
    return m_surname;
}
void OAIFhirPatient::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIFhirPatient::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIFhirPatient::is_surname_Valid() const{
    return m_surname_isValid;
}

bool OAIFhirPatient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_no_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_practitioners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirPatient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
