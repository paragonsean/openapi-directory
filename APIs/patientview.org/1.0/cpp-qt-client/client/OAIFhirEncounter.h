/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFhirEncounter.h
 *
 * 
 */

#ifndef OAIFhirEncounter_H
#define OAIFhirEncounter_H

#include <QJsonObject>

#include "OAIFhirObservation.h"
#include "OAIFhirProcedure.h"
#include "OAIGroup.h"
#include "OAILink.h"
#include <QDateTime>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGroup;
class OAILink;
class OAIFhirObservation;
class OAIFhirProcedure;

class OAIFhirEncounter : public OAIObject {
public:
    OAIFhirEncounter();
    OAIFhirEncounter(QString json);
    ~OAIFhirEncounter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getEncounterType() const;
    void setEncounterType(const QString &encounter_type);
    bool is_encounter_type_Set() const;
    bool is_encounter_type_Valid() const;

    OAIGroup getGroup() const;
    void setGroup(const OAIGroup &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QSet<OAILink> getLinks() const;
    void setLinks(const QSet<OAILink> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QSet<OAIFhirObservation> getObservations() const;
    void setObservations(const QSet<OAIFhirObservation> &observations);
    bool is_observations_Set() const;
    bool is_observations_Valid() const;

    QSet<OAIFhirProcedure> getProcedures() const;
    void setProcedures(const QSet<OAIFhirProcedure> &procedures);
    bool is_procedures_Set() const;
    bool is_procedures_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_encounter_type;
    bool m_encounter_type_isSet;
    bool m_encounter_type_isValid;

    OAIGroup m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QSet<OAILink> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QSet<OAIFhirObservation> m_observations;
    bool m_observations_isSet;
    bool m_observations_isValid;

    QSet<OAIFhirProcedure> m_procedures;
    bool m_procedures_isSet;
    bool m_procedures_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFhirEncounter)

#endif // OAIFhirEncounter_H
