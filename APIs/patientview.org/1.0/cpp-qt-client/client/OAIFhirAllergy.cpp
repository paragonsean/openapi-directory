/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirAllergy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirAllergy::OAIFhirAllergy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirAllergy::OAIFhirAllergy() {
    this->initializeModel();
}

OAIFhirAllergy::~OAIFhirAllergy() {}

void OAIFhirAllergy::initializeModel() {

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_info_source_isSet = false;
    m_info_source_isValid = false;

    m_reaction_isSet = false;
    m_reaction_isValid = false;

    m_recorded_date_isSet = false;
    m_recorded_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_substance_isSet = false;
    m_substance_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFhirAllergy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirAllergy::fromJsonObject(QJsonObject json) {

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_info_source_isValid = ::OpenAPI::fromJsonValue(m_info_source, json[QString("infoSource")]);
    m_info_source_isSet = !json[QString("infoSource")].isNull() && m_info_source_isValid;

    m_reaction_isValid = ::OpenAPI::fromJsonValue(m_reaction, json[QString("reaction")]);
    m_reaction_isSet = !json[QString("reaction")].isNull() && m_reaction_isValid;

    m_recorded_date_isValid = ::OpenAPI::fromJsonValue(m_recorded_date, json[QString("recordedDate")]);
    m_recorded_date_isSet = !json[QString("recordedDate")].isNull() && m_recorded_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_substance_isValid = ::OpenAPI::fromJsonValue(m_substance, json[QString("substance")]);
    m_substance_isSet = !json[QString("substance")].isNull() && m_substance_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFhirAllergy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirAllergy::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_info_source_isSet) {
        obj.insert(QString("infoSource"), ::OpenAPI::toJsonValue(m_info_source));
    }
    if (m_reaction_isSet) {
        obj.insert(QString("reaction"), ::OpenAPI::toJsonValue(m_reaction));
    }
    if (m_recorded_date_isSet) {
        obj.insert(QString("recordedDate"), ::OpenAPI::toJsonValue(m_recorded_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_substance_isSet) {
        obj.insert(QString("substance"), ::OpenAPI::toJsonValue(m_substance));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFhirAllergy::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIFhirAllergy::setConfidenceLevel(const QString &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIFhirAllergy::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIFhirAllergy::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

OAIGroup OAIFhirAllergy::getGroup() const {
    return m_group;
}
void OAIFhirAllergy::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFhirAllergy::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFhirAllergy::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIFhirAllergy::getId() const {
    return m_id;
}
void OAIFhirAllergy::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFhirAllergy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFhirAllergy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFhirAllergy::getIdentifier() const {
    return m_identifier;
}
void OAIFhirAllergy::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFhirAllergy::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFhirAllergy::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIFhirAllergy::getInfoSource() const {
    return m_info_source;
}
void OAIFhirAllergy::setInfoSource(const QString &info_source) {
    m_info_source = info_source;
    m_info_source_isSet = true;
}

bool OAIFhirAllergy::is_info_source_Set() const{
    return m_info_source_isSet;
}

bool OAIFhirAllergy::is_info_source_Valid() const{
    return m_info_source_isValid;
}

QString OAIFhirAllergy::getReaction() const {
    return m_reaction;
}
void OAIFhirAllergy::setReaction(const QString &reaction) {
    m_reaction = reaction;
    m_reaction_isSet = true;
}

bool OAIFhirAllergy::is_reaction_Set() const{
    return m_reaction_isSet;
}

bool OAIFhirAllergy::is_reaction_Valid() const{
    return m_reaction_isValid;
}

QDateTime OAIFhirAllergy::getRecordedDate() const {
    return m_recorded_date;
}
void OAIFhirAllergy::setRecordedDate(const QDateTime &recorded_date) {
    m_recorded_date = recorded_date;
    m_recorded_date_isSet = true;
}

bool OAIFhirAllergy::is_recorded_date_Set() const{
    return m_recorded_date_isSet;
}

bool OAIFhirAllergy::is_recorded_date_Valid() const{
    return m_recorded_date_isValid;
}

QString OAIFhirAllergy::getStatus() const {
    return m_status;
}
void OAIFhirAllergy::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFhirAllergy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFhirAllergy::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFhirAllergy::getSubstance() const {
    return m_substance;
}
void OAIFhirAllergy::setSubstance(const QString &substance) {
    m_substance = substance;
    m_substance_isSet = true;
}

bool OAIFhirAllergy::is_substance_Set() const{
    return m_substance_isSet;
}

bool OAIFhirAllergy::is_substance_Valid() const{
    return m_substance_isValid;
}

QString OAIFhirAllergy::getType() const {
    return m_type;
}
void OAIFhirAllergy::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFhirAllergy::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFhirAllergy::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFhirAllergy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirAllergy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
