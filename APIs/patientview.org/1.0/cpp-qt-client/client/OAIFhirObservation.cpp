/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFhirObservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFhirObservation::OAIFhirObservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFhirObservation::OAIFhirObservation() {
    this->initializeModel();
}

OAIFhirObservation::~OAIFhirObservation() {}

void OAIFhirObservation::initializeModel() {

    m_applies_isSet = false;
    m_applies_isValid = false;

    m_body_site_isSet = false;
    m_body_site_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_comparator_isSet = false;
    m_comparator_isValid = false;

    m_diagram_isSet = false;
    m_diagram_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_temporary_uuid_isSet = false;
    m_temporary_uuid_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFhirObservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFhirObservation::fromJsonObject(QJsonObject json) {

    m_applies_isValid = ::OpenAPI::fromJsonValue(m_applies, json[QString("applies")]);
    m_applies_isSet = !json[QString("applies")].isNull() && m_applies_isValid;

    m_body_site_isValid = ::OpenAPI::fromJsonValue(m_body_site, json[QString("bodySite")]);
    m_body_site_isSet = !json[QString("bodySite")].isNull() && m_body_site_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_comparator_isValid = ::OpenAPI::fromJsonValue(m_comparator, json[QString("comparator")]);
    m_comparator_isSet = !json[QString("comparator")].isNull() && m_comparator_isValid;

    m_diagram_isValid = ::OpenAPI::fromJsonValue(m_diagram, json[QString("diagram")]);
    m_diagram_isSet = !json[QString("diagram")].isNull() && m_diagram_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_temporary_uuid_isValid = ::OpenAPI::fromJsonValue(m_temporary_uuid, json[QString("temporaryUuid")]);
    m_temporary_uuid_isSet = !json[QString("temporaryUuid")].isNull() && m_temporary_uuid_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFhirObservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFhirObservation::asJsonObject() const {
    QJsonObject obj;
    if (m_applies_isSet) {
        obj.insert(QString("applies"), ::OpenAPI::toJsonValue(m_applies));
    }
    if (m_body_site_isSet) {
        obj.insert(QString("bodySite"), ::OpenAPI::toJsonValue(m_body_site));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_comparator_isSet) {
        obj.insert(QString("comparator"), ::OpenAPI::toJsonValue(m_comparator));
    }
    if (m_diagram_isSet) {
        obj.insert(QString("diagram"), ::OpenAPI::toJsonValue(m_diagram));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_temporary_uuid_isSet) {
        obj.insert(QString("temporaryUuid"), ::OpenAPI::toJsonValue(m_temporary_uuid));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAIFhirObservation::getApplies() const {
    return m_applies;
}
void OAIFhirObservation::setApplies(const QDateTime &applies) {
    m_applies = applies;
    m_applies_isSet = true;
}

bool OAIFhirObservation::is_applies_Set() const{
    return m_applies_isSet;
}

bool OAIFhirObservation::is_applies_Valid() const{
    return m_applies_isValid;
}

QString OAIFhirObservation::getBodySite() const {
    return m_body_site;
}
void OAIFhirObservation::setBodySite(const QString &body_site) {
    m_body_site = body_site;
    m_body_site_isSet = true;
}

bool OAIFhirObservation::is_body_site_Set() const{
    return m_body_site_isSet;
}

bool OAIFhirObservation::is_body_site_Valid() const{
    return m_body_site_isValid;
}

QString OAIFhirObservation::getComments() const {
    return m_comments;
}
void OAIFhirObservation::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIFhirObservation::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIFhirObservation::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIFhirObservation::getComparator() const {
    return m_comparator;
}
void OAIFhirObservation::setComparator(const QString &comparator) {
    m_comparator = comparator;
    m_comparator_isSet = true;
}

bool OAIFhirObservation::is_comparator_Set() const{
    return m_comparator_isSet;
}

bool OAIFhirObservation::is_comparator_Valid() const{
    return m_comparator_isValid;
}

QString OAIFhirObservation::getDiagram() const {
    return m_diagram;
}
void OAIFhirObservation::setDiagram(const QString &diagram) {
    m_diagram = diagram;
    m_diagram_isSet = true;
}

bool OAIFhirObservation::is_diagram_Set() const{
    return m_diagram_isSet;
}

bool OAIFhirObservation::is_diagram_Valid() const{
    return m_diagram_isValid;
}

OAIGroup OAIFhirObservation::getGroup() const {
    return m_group;
}
void OAIFhirObservation::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFhirObservation::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFhirObservation::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAIFhirObservation::getId() const {
    return m_id;
}
void OAIFhirObservation::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFhirObservation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFhirObservation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFhirObservation::getIdentifier() const {
    return m_identifier;
}
void OAIFhirObservation::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIFhirObservation::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIFhirObservation::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIFhirObservation::getLocation() const {
    return m_location;
}
void OAIFhirObservation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIFhirObservation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIFhirObservation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIFhirObservation::getName() const {
    return m_name;
}
void OAIFhirObservation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFhirObservation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFhirObservation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFhirObservation::getTemporaryUuid() const {
    return m_temporary_uuid;
}
void OAIFhirObservation::setTemporaryUuid(const QString &temporary_uuid) {
    m_temporary_uuid = temporary_uuid;
    m_temporary_uuid_isSet = true;
}

bool OAIFhirObservation::is_temporary_uuid_Set() const{
    return m_temporary_uuid_isSet;
}

bool OAIFhirObservation::is_temporary_uuid_Valid() const{
    return m_temporary_uuid_isValid;
}

QString OAIFhirObservation::getUnits() const {
    return m_units;
}
void OAIFhirObservation::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIFhirObservation::is_units_Set() const{
    return m_units_isSet;
}

bool OAIFhirObservation::is_units_Valid() const{
    return m_units_isValid;
}

QString OAIFhirObservation::getValue() const {
    return m_value;
}
void OAIFhirObservation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFhirObservation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFhirObservation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFhirObservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFhirObservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
