/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIObservationHeading.h
 *
 * 
 */

#ifndef OAIObservationHeading_H
#define OAIObservationHeading_H

#include <QJsonObject>

#include "OAIObservationHeadingGroup.h"
#include <QDateTime>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObservationHeadingGroup;

class OAIObservationHeading : public OAIObject {
public:
    OAIObservationHeading();
    OAIObservationHeading(QString json);
    ~OAIObservationHeading() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    qint64 getDecimalPlaces() const;
    void setDecimalPlaces(const qint64 &decimal_places);
    bool is_decimal_places_Set() const;
    bool is_decimal_places_Valid() const;

    qint64 getDefaultPanel() const;
    void setDefaultPanel(const qint64 &default_panel);
    bool is_default_panel_Set() const;
    bool is_default_panel_Valid() const;

    qint64 getDefaultPanelOrder() const;
    void setDefaultPanelOrder(const qint64 &default_panel_order);
    bool is_default_panel_order_Set() const;
    bool is_default_panel_order_Valid() const;

    QString getHeading() const;
    void setHeading(const QString &heading);
    bool is_heading_Set() const;
    bool is_heading_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInfoLink() const;
    void setInfoLink(const QString &info_link);
    bool is_info_link_Set() const;
    bool is_info_link_Valid() const;

    QDateTime getLastUpdate() const;
    void setLastUpdate(const QDateTime &last_update);
    bool is_last_update_Set() const;
    bool is_last_update_Valid() const;

    double getMaxGraph() const;
    void setMaxGraph(const double &max_graph);
    bool is_max_graph_Set() const;
    bool is_max_graph_Valid() const;

    double getMinGraph() const;
    void setMinGraph(const double &min_graph);
    bool is_min_graph_Set() const;
    bool is_min_graph_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNormalRange() const;
    void setNormalRange(const QString &normal_range);
    bool is_normal_range_Set() const;
    bool is_normal_range_Valid() const;

    QSet<OAIObservationHeadingGroup> getObservationHeadingGroups() const;
    void setObservationHeadingGroups(const QSet<OAIObservationHeadingGroup> &observation_heading_groups);
    bool is_observation_heading_groups_Set() const;
    bool is_observation_heading_groups_Valid() const;

    QString getUnits() const;
    void setUnits(const QString &units);
    bool is_units_Set() const;
    bool is_units_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    qint64 m_decimal_places;
    bool m_decimal_places_isSet;
    bool m_decimal_places_isValid;

    qint64 m_default_panel;
    bool m_default_panel_isSet;
    bool m_default_panel_isValid;

    qint64 m_default_panel_order;
    bool m_default_panel_order_isSet;
    bool m_default_panel_order_isValid;

    QString m_heading;
    bool m_heading_isSet;
    bool m_heading_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_info_link;
    bool m_info_link_isSet;
    bool m_info_link_isValid;

    QDateTime m_last_update;
    bool m_last_update_isSet;
    bool m_last_update_isValid;

    double m_max_graph;
    bool m_max_graph_isSet;
    bool m_max_graph_isValid;

    double m_min_graph;
    bool m_min_graph_isSet;
    bool m_min_graph_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_normal_range;
    bool m_normal_range_isSet;
    bool m_normal_range_isValid;

    QSet<OAIObservationHeadingGroup> m_observation_heading_groups;
    bool m_observation_heading_groups_isSet;
    bool m_observation_heading_groups_isValid;

    QString m_units;
    bool m_units_isSet;
    bool m_units_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIObservationHeading)

#endif // OAIObservationHeading_H
