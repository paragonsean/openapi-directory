/**
 * PatientView
 * The recommended REST API endpoints to be used when integrating with PatientView
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseGroup::OAIBaseGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseGroup::OAIBaseGroup() {
    this->initializeModel();
}

OAIBaseGroup::~OAIBaseGroup() {}

void OAIBaseGroup::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_import_date_isSet = false;
    m_last_import_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_codes_isSet = false;
    m_parent_codes_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;

    m_visible_to_join_isSet = false;
    m_visible_to_join_isValid = false;
}

void OAIBaseGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseGroup::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("groupType")]);
    m_group_type_isSet = !json[QString("groupType")].isNull() && m_group_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_import_date_isValid = ::OpenAPI::fromJsonValue(m_last_import_date, json[QString("lastImportDate")]);
    m_last_import_date_isSet = !json[QString("lastImportDate")].isNull() && m_last_import_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_codes_isValid = ::OpenAPI::fromJsonValue(m_parent_codes, json[QString("parentCodes")]);
    m_parent_codes_isSet = !json[QString("parentCodes")].isNull() && m_parent_codes_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;

    m_visible_to_join_isValid = ::OpenAPI::fromJsonValue(m_visible_to_join, json[QString("visibleToJoin")]);
    m_visible_to_join_isSet = !json[QString("visibleToJoin")].isNull() && m_visible_to_join_isValid;
}

QString OAIBaseGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_group_type.isSet()) {
        obj.insert(QString("groupType"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_import_date_isSet) {
        obj.insert(QString("lastImportDate"), ::OpenAPI::toJsonValue(m_last_import_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_codes.size() > 0) {
        obj.insert(QString("parentCodes"), ::OpenAPI::toJsonValue(m_parent_codes));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    if (m_visible_to_join_isSet) {
        obj.insert(QString("visibleToJoin"), ::OpenAPI::toJsonValue(m_visible_to_join));
    }
    return obj;
}

QString OAIBaseGroup::getCode() const {
    return m_code;
}
void OAIBaseGroup::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBaseGroup::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBaseGroup::is_code_Valid() const{
    return m_code_isValid;
}

OAILookup OAIBaseGroup::getGroupType() const {
    return m_group_type;
}
void OAIBaseGroup::setGroupType(const OAILookup &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIBaseGroup::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIBaseGroup::is_group_type_Valid() const{
    return m_group_type_isValid;
}

qint64 OAIBaseGroup::getId() const {
    return m_id;
}
void OAIBaseGroup::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBaseGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBaseGroup::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIBaseGroup::getLastImportDate() const {
    return m_last_import_date;
}
void OAIBaseGroup::setLastImportDate(const QDateTime &last_import_date) {
    m_last_import_date = last_import_date;
    m_last_import_date_isSet = true;
}

bool OAIBaseGroup::is_last_import_date_Set() const{
    return m_last_import_date_isSet;
}

bool OAIBaseGroup::is_last_import_date_Valid() const{
    return m_last_import_date_isValid;
}

QString OAIBaseGroup::getName() const {
    return m_name;
}
void OAIBaseGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBaseGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBaseGroup::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIBaseGroup::getParentCodes() const {
    return m_parent_codes;
}
void OAIBaseGroup::setParentCodes(const QList<QString> &parent_codes) {
    m_parent_codes = parent_codes;
    m_parent_codes_isSet = true;
}

bool OAIBaseGroup::is_parent_codes_Set() const{
    return m_parent_codes_isSet;
}

bool OAIBaseGroup::is_parent_codes_Valid() const{
    return m_parent_codes_isValid;
}

QString OAIBaseGroup::getShortName() const {
    return m_short_name;
}
void OAIBaseGroup::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIBaseGroup::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIBaseGroup::is_short_name_Valid() const{
    return m_short_name_isValid;
}

bool OAIBaseGroup::isVisible() const {
    return m_visible;
}
void OAIBaseGroup::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIBaseGroup::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIBaseGroup::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIBaseGroup::isVisibleToJoin() const {
    return m_visible_to_join;
}
void OAIBaseGroup::setVisibleToJoin(const bool &visible_to_join) {
    m_visible_to_join = visible_to_join;
    m_visible_to_join_isSet = true;
}

bool OAIBaseGroup::is_visible_to_join_Set() const{
    return m_visible_to_join_isSet;
}

bool OAIBaseGroup::is_visible_to_join_Valid() const{
    return m_visible_to_join_isValid;
}

bool OAIBaseGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_import_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_to_join_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
